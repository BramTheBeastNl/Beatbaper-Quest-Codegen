// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Internal.Commands.TestActionItem
#include "NUnit/Framework/Internal/Commands/TestActionItem.hpp"
// Including type: NUnit.Framework.ITestAction
#include "NUnit/Framework/ITestAction.hpp"
// Including type: NUnit.Framework.Interfaces.ITest
#include "NUnit/Framework/Interfaces/ITest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Commands.TestActionItem.BeforeTest
void NUnit::Framework::Internal::Commands::TestActionItem::BeforeTest(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::TestActionItem::BeforeTest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeforeTest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Commands.TestActionItem.AfterTest
void NUnit::Framework::Internal::Commands::TestActionItem::AfterTest(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::TestActionItem::AfterTest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AfterTest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, test);
}
// Writing MetadataGetter for method: TestActionItem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestActionItem::*)(NUnit::Framework::ITestAction*)>(&TestActionItem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestActionItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::ITestAction*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestActionItem::*)(NUnit::Framework::ITestAction*)>(&TestActionItem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestActionItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::ITestAction*>()});
  }
};
// Writing MetadataGetter for method: TestActionItem::BeforeTest
// Il2CppName: BeforeTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestActionItem::*)(NUnit::Framework::Interfaces::ITest*)>(&TestActionItem::BeforeTest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestActionItem*), "BeforeTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: TestActionItem::AfterTest
// Il2CppName: AfterTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestActionItem::*)(NUnit::Framework::Interfaces::ITest*)>(&TestActionItem::AfterTest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestActionItem*), "AfterTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Internal.Commands.ApplyChangesToContextCommand
#include "NUnit/Framework/Internal/Commands/ApplyChangesToContextCommand.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: NUnit.Framework.Interfaces.IApplyToContext
#include "NUnit/Framework/Interfaces/IApplyToContext.hpp"
// Including type: NUnit.Framework.Internal.ITestExecutionContext
#include "NUnit/Framework/Internal/ITestExecutionContext.hpp"
// Including type: NUnit.Framework.Internal.TestResult
#include "NUnit/Framework/Internal/TestResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Commands.ApplyChangesToContextCommand.ApplyChanges
void NUnit::Framework::Internal::Commands::ApplyChangesToContextCommand::ApplyChanges(NUnit::Framework::Internal::ITestExecutionContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::ApplyChangesToContextCommand::ApplyChanges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyChanges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context);
}
// Autogenerated method: NUnit.Framework.Internal.Commands.ApplyChangesToContextCommand.Execute
NUnit::Framework::Internal::TestResult* NUnit::Framework::Internal::Commands::ApplyChangesToContextCommand::Execute(NUnit::Framework::Internal::ITestExecutionContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::ApplyChangesToContextCommand::Execute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestResult*, false>(this, ___internal__method, context);
}
// Writing MetadataGetter for method: ApplyChangesToContextCommand::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ApplyChangesToContextCommand::*)(NUnit::Framework::Internal::Commands::TestCommand*, System::Collections::Generic::IEnumerable_1<NUnit::Framework::Interfaces::IApplyToContext*>*)>(&ApplyChangesToContextCommand::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ApplyChangesToContextCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Commands::TestCommand*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<NUnit::Framework::Interfaces::IApplyToContext*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ApplyChangesToContextCommand::*)(NUnit::Framework::Internal::Commands::TestCommand*, System::Collections::Generic::IEnumerable_1<NUnit::Framework::Interfaces::IApplyToContext*>*)>(&ApplyChangesToContextCommand::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ApplyChangesToContextCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Commands::TestCommand*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<NUnit::Framework::Interfaces::IApplyToContext*>*>()});
  }
};
// Writing MetadataGetter for method: ApplyChangesToContextCommand::ApplyChanges
// Il2CppName: ApplyChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ApplyChangesToContextCommand::*)(NUnit::Framework::Internal::ITestExecutionContext*)>(&ApplyChangesToContextCommand::ApplyChanges)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ApplyChangesToContextCommand*), "ApplyChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::ITestExecutionContext*>()});
  }
};
// Writing MetadataGetter for method: ApplyChangesToContextCommand::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestResult* (ApplyChangesToContextCommand::*)(NUnit::Framework::Internal::ITestExecutionContext*)>(&ApplyChangesToContextCommand::Execute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ApplyChangesToContextCommand*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::ITestExecutionContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Internal.Commands.DelegatingTestCommand
#include "NUnit/Framework/Internal/Commands/DelegatingTestCommand.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Commands.DelegatingTestCommand.GetInnerCommand
NUnit::Framework::Internal::Commands::TestCommand* NUnit::Framework::Internal::Commands::DelegatingTestCommand::GetInnerCommand() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::DelegatingTestCommand::GetInnerCommand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInnerCommand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::Commands::TestCommand*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DelegatingTestCommand::GetInnerCommand
// Il2CppName: GetInnerCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::Commands::TestCommand* (DelegatingTestCommand::*)()>(&DelegatingTestCommand::GetInnerCommand)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DelegatingTestCommand*), "GetInnerCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DelegatingTestCommand::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DelegatingTestCommand::*)(NUnit::Framework::Internal::Commands::TestCommand*)>(&DelegatingTestCommand::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DelegatingTestCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Commands::TestCommand*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DelegatingTestCommand::*)(NUnit::Framework::Internal::Commands::TestCommand*)>(&DelegatingTestCommand::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DelegatingTestCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Commands::TestCommand*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Commands.OneTimeSetUpCommand
#include "NUnit/Framework/Internal/Commands/OneTimeSetUpCommand.hpp"
// Including type: NUnit.Framework.Internal.TestSuite
#include "NUnit/Framework/Internal/TestSuite.hpp"
// Including type: NUnit.Framework.Interfaces.ITypeInfo
#include "NUnit/Framework/Interfaces/ITypeInfo.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: NUnit.Framework.Internal.Commands.SetUpTearDownItem
#include "NUnit/Framework/Internal/Commands/SetUpTearDownItem.hpp"
// Including type: NUnit.Framework.Internal.Commands.TestActionItem
#include "NUnit/Framework/Internal/Commands/TestActionItem.hpp"
// Including type: NUnit.Framework.Internal.TestResult
#include "NUnit/Framework/Internal/TestResult.hpp"
// Including type: NUnit.Framework.Internal.ITestExecutionContext
#include "NUnit/Framework/Internal/ITestExecutionContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Commands.OneTimeSetUpCommand.Execute
NUnit::Framework::Internal::TestResult* NUnit::Framework::Internal::Commands::OneTimeSetUpCommand::Execute(NUnit::Framework::Internal::ITestExecutionContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::OneTimeSetUpCommand::Execute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestResult*, false>(this, ___internal__method, context);
}
// Writing MetadataGetter for method: OneTimeSetUpCommand::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OneTimeSetUpCommand::*)(NUnit::Framework::Internal::TestSuite*, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>*, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::TestActionItem*>*)>(&OneTimeSetUpCommand::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OneTimeSetUpCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestSuite*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::TestActionItem*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OneTimeSetUpCommand::*)(NUnit::Framework::Internal::TestSuite*, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>*, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::TestActionItem*>*)>(&OneTimeSetUpCommand::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OneTimeSetUpCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestSuite*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::TestActionItem*>*>()});
  }
};
// Writing MetadataGetter for method: OneTimeSetUpCommand::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestResult* (OneTimeSetUpCommand::*)(NUnit::Framework::Internal::ITestExecutionContext*)>(&OneTimeSetUpCommand::Execute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OneTimeSetUpCommand*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::ITestExecutionContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Internal.Commands.OneTimeTearDownCommand
#include "NUnit/Framework/Internal/Commands/OneTimeTearDownCommand.hpp"
// Including type: NUnit.Framework.Internal.Commands.OneTimeTearDownCommand/<>c__DisplayClass3_0
#include "NUnit/Framework/Internal/Commands/OneTimeTearDownCommand_--c__DisplayClass3_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: NUnit.Framework.Internal.Commands.SetUpTearDownItem
#include "NUnit/Framework/Internal/Commands/SetUpTearDownItem.hpp"
// Including type: NUnit.Framework.Internal.Commands.TestActionItem
#include "NUnit/Framework/Internal/Commands/TestActionItem.hpp"
// Including type: NUnit.Framework.Internal.TestSuite
#include "NUnit/Framework/Internal/TestSuite.hpp"
// Including type: NUnit.Framework.Internal.TestResult
#include "NUnit/Framework/Internal/TestResult.hpp"
// Including type: NUnit.Framework.Internal.ITestExecutionContext
#include "NUnit/Framework/Internal/ITestExecutionContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Commands.OneTimeTearDownCommand.Execute
NUnit::Framework::Internal::TestResult* NUnit::Framework::Internal::Commands::OneTimeTearDownCommand::Execute(NUnit::Framework::Internal::ITestExecutionContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::OneTimeTearDownCommand::Execute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestResult*, false>(this, ___internal__method, context);
}
// Writing MetadataGetter for method: OneTimeTearDownCommand::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OneTimeTearDownCommand::*)(NUnit::Framework::Internal::TestSuite*, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>*, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::TestActionItem*>*)>(&OneTimeTearDownCommand::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OneTimeTearDownCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestSuite*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::TestActionItem*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OneTimeTearDownCommand::*)(NUnit::Framework::Internal::TestSuite*, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>*, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::TestActionItem*>*)>(&OneTimeTearDownCommand::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OneTimeTearDownCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestSuite*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::TestActionItem*>*>()});
  }
};
// Writing MetadataGetter for method: OneTimeTearDownCommand::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestResult* (OneTimeTearDownCommand::*)(NUnit::Framework::Internal::ITestExecutionContext*)>(&OneTimeTearDownCommand::Execute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OneTimeTearDownCommand*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::ITestExecutionContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Commands.OneTimeTearDownCommand/<>c__DisplayClass3_0
#include "NUnit/Framework/Internal/Commands/OneTimeTearDownCommand_--c__DisplayClass3_0.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Commands.OneTimeTearDownCommand/<>c__DisplayClass3_0.<Execute>b__0
::Il2CppObject* NUnit::Framework::Internal::Commands::OneTimeTearDownCommand::$$c__DisplayClass3_0::$Execute$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::OneTimeTearDownCommand::$$c__DisplayClass3_0::<Execute>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Execute>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OneTimeTearDownCommand::$$c__DisplayClass3_0::$Execute$b__0
// Il2CppName: <Execute>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (OneTimeTearDownCommand::$$c__DisplayClass3_0::*)()>(&OneTimeTearDownCommand::$$c__DisplayClass3_0::$Execute$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OneTimeTearDownCommand::$$c__DisplayClass3_0*), "<Execute>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OneTimeTearDownCommand::$$c__DisplayClass3_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OneTimeTearDownCommand::$$c__DisplayClass3_0::*)()>(&OneTimeTearDownCommand::$$c__DisplayClass3_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OneTimeTearDownCommand::$$c__DisplayClass3_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OneTimeTearDownCommand::$$c__DisplayClass3_0::*)()>(&OneTimeTearDownCommand::$$c__DisplayClass3_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OneTimeTearDownCommand::$$c__DisplayClass3_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Commands.SkipCommand
#include "NUnit/Framework/Internal/Commands/SkipCommand.hpp"
// Including type: NUnit.Framework.Internal.Test
#include "NUnit/Framework/Internal/Test.hpp"
// Including type: NUnit.Framework.Internal.TestResult
#include "NUnit/Framework/Internal/TestResult.hpp"
// Including type: NUnit.Framework.Internal.ITestExecutionContext
#include "NUnit/Framework/Internal/ITestExecutionContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Commands.SkipCommand.GetSkipReason
::Il2CppString* NUnit::Framework::Internal::Commands::SkipCommand::GetSkipReason() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::SkipCommand::GetSkipReason");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkipReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Internal.Commands.SkipCommand.GetProviderStackTrace
::Il2CppString* NUnit::Framework::Internal::Commands::SkipCommand::GetProviderStackTrace() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::SkipCommand::GetProviderStackTrace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProviderStackTrace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Internal.Commands.SkipCommand.Execute
NUnit::Framework::Internal::TestResult* NUnit::Framework::Internal::Commands::SkipCommand::Execute(NUnit::Framework::Internal::ITestExecutionContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::SkipCommand::Execute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestResult*, false>(this, ___internal__method, context);
}
// Writing MetadataGetter for method: SkipCommand::GetSkipReason
// Il2CppName: GetSkipReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SkipCommand::*)()>(&SkipCommand::GetSkipReason)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SkipCommand*), "GetSkipReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SkipCommand::GetProviderStackTrace
// Il2CppName: GetProviderStackTrace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SkipCommand::*)()>(&SkipCommand::GetProviderStackTrace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SkipCommand*), "GetProviderStackTrace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SkipCommand::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SkipCommand::*)(NUnit::Framework::Internal::Test*)>(&SkipCommand::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SkipCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Test*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SkipCommand::*)(NUnit::Framework::Internal::Test*)>(&SkipCommand::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SkipCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Test*>()});
  }
};
// Writing MetadataGetter for method: SkipCommand::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestResult* (SkipCommand::*)(NUnit::Framework::Internal::ITestExecutionContext*)>(&SkipCommand::Execute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SkipCommand*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::ITestExecutionContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Internal.Commands.TestCommand
#include "NUnit/Framework/Internal/Commands/TestCommand.hpp"
// Including type: NUnit.Framework.Internal.Test
#include "NUnit/Framework/Internal/Test.hpp"
// Including type: NUnit.Framework.Internal.TestResult
#include "NUnit/Framework/Internal/TestResult.hpp"
// Including type: NUnit.Framework.Internal.ITestExecutionContext
#include "NUnit/Framework/Internal/ITestExecutionContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Commands.TestCommand.get_Test
NUnit::Framework::Internal::Test* NUnit::Framework::Internal::Commands::TestCommand::get_Test() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::TestCommand::get_Test");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Test", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::Test*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Internal.Commands.TestCommand.set_Test
void NUnit::Framework::Internal::Commands::TestCommand::set_Test(NUnit::Framework::Internal::Test* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::TestCommand::set_Test");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Test", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Internal.Commands.TestCommand.Execute
NUnit::Framework::Internal::TestResult* NUnit::Framework::Internal::Commands::TestCommand::Execute(NUnit::Framework::Internal::ITestExecutionContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::TestCommand::Execute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestResult*, false>(this, ___internal__method, context);
}
// Writing MetadataGetter for method: TestCommand::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestCommand::*)(NUnit::Framework::Internal::Test*)>(&TestCommand::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Test*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestCommand::*)(NUnit::Framework::Internal::Test*)>(&TestCommand::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Test*>()});
  }
};
// Writing MetadataGetter for method: TestCommand::get_Test
// Il2CppName: get_Test
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::Test* (TestCommand::*)()>(&TestCommand::get_Test)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestCommand*), "get_Test", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestCommand::set_Test
// Il2CppName: set_Test
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestCommand::*)(NUnit::Framework::Internal::Test*)>(&TestCommand::set_Test)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestCommand*), "set_Test", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Test*>()});
  }
};
// Writing MetadataGetter for method: TestCommand::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestResult* (TestCommand::*)(NUnit::Framework::Internal::ITestExecutionContext*)>(&TestCommand::Execute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestCommand*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::ITestExecutionContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Commands.TestMethodCommand
#include "NUnit/Framework/Internal/Commands/TestMethodCommand.hpp"
// Including type: NUnit.Framework.Internal.TestMethod
#include "NUnit/Framework/Internal/TestMethod.hpp"
// Including type: NUnit.Framework.Internal.ITestExecutionContext
#include "NUnit/Framework/Internal/ITestExecutionContext.hpp"
// Including type: NUnit.Framework.Internal.TestResult
#include "NUnit/Framework/Internal/TestResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Commands.TestMethodCommand.RunTestMethod
::Il2CppObject* NUnit::Framework::Internal::Commands::TestMethodCommand::RunTestMethod(NUnit::Framework::Internal::ITestExecutionContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::TestMethodCommand::RunTestMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunTestMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, context);
}
// Autogenerated method: NUnit.Framework.Internal.Commands.TestMethodCommand.RunNonAsyncTestMethod
::Il2CppObject* NUnit::Framework::Internal::Commands::TestMethodCommand::RunNonAsyncTestMethod(NUnit::Framework::Internal::ITestExecutionContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::TestMethodCommand::RunNonAsyncTestMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RunNonAsyncTestMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, context);
}
// Autogenerated method: NUnit.Framework.Internal.Commands.TestMethodCommand.Execute
NUnit::Framework::Internal::TestResult* NUnit::Framework::Internal::Commands::TestMethodCommand::Execute(NUnit::Framework::Internal::ITestExecutionContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::TestMethodCommand::Execute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestResult*, false>(this, ___internal__method, context);
}
// Writing MetadataGetter for method: TestMethodCommand::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestMethodCommand::*)(NUnit::Framework::Internal::TestMethod*)>(&TestMethodCommand::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestMethodCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestMethod*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestMethodCommand::*)(NUnit::Framework::Internal::TestMethod*)>(&TestMethodCommand::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestMethodCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestMethod*>()});
  }
};
// Writing MetadataGetter for method: TestMethodCommand::RunTestMethod
// Il2CppName: RunTestMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TestMethodCommand::*)(NUnit::Framework::Internal::ITestExecutionContext*)>(&TestMethodCommand::RunTestMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestMethodCommand*), "RunTestMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::ITestExecutionContext*>()});
  }
};
// Writing MetadataGetter for method: TestMethodCommand::RunNonAsyncTestMethod
// Il2CppName: RunNonAsyncTestMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TestMethodCommand::*)(NUnit::Framework::Internal::ITestExecutionContext*)>(&TestMethodCommand::RunNonAsyncTestMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestMethodCommand*), "RunNonAsyncTestMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::ITestExecutionContext*>()});
  }
};
// Writing MetadataGetter for method: TestMethodCommand::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestResult* (TestMethodCommand::*)(NUnit::Framework::Internal::ITestExecutionContext*)>(&TestMethodCommand::Execute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestMethodCommand*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::ITestExecutionContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Internal.Commands.TheoryResultCommand
#include "NUnit/Framework/Internal/Commands/TheoryResultCommand.hpp"
// Including type: NUnit.Framework.Internal.TestResult
#include "NUnit/Framework/Internal/TestResult.hpp"
// Including type: NUnit.Framework.Internal.ITestExecutionContext
#include "NUnit/Framework/Internal/ITestExecutionContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Commands.TheoryResultCommand.Execute
NUnit::Framework::Internal::TestResult* NUnit::Framework::Internal::Commands::TheoryResultCommand::Execute(NUnit::Framework::Internal::ITestExecutionContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Commands::TheoryResultCommand::Execute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Execute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestResult*, false>(this, ___internal__method, context);
}
// Writing MetadataGetter for method: TheoryResultCommand::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TheoryResultCommand::*)(NUnit::Framework::Internal::Commands::TestCommand*)>(&TheoryResultCommand::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TheoryResultCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Commands::TestCommand*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TheoryResultCommand::*)(NUnit::Framework::Internal::Commands::TestCommand*)>(&TheoryResultCommand::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TheoryResultCommand*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Commands::TestCommand*>()});
  }
};
// Writing MetadataGetter for method: TheoryResultCommand::Execute
// Il2CppName: Execute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestResult* (TheoryResultCommand::*)(NUnit::Framework::Internal::ITestExecutionContext*)>(&TheoryResultCommand::Execute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TheoryResultCommand*), "Execute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::ITestExecutionContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Filters.CompositeFilter
#include "NUnit/Framework/Internal/Filters/CompositeFilter.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: NUnit.Framework.Interfaces.ITest
#include "NUnit/Framework/Interfaces/ITest.hpp"
// Including type: NUnit.Framework.Interfaces.TNode
#include "NUnit/Framework/Interfaces/TNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Filters.CompositeFilter.get_Filters
System::Collections::Generic::IList_1<NUnit::Framework::Interfaces::ITestFilter*>* NUnit::Framework::Internal::Filters::CompositeFilter::get_Filters() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::CompositeFilter::get_Filters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Filters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IList_1<NUnit::Framework::Interfaces::ITestFilter*>*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.CompositeFilter.set_Filters
void NUnit::Framework::Internal::Filters::CompositeFilter::set_Filters(System::Collections::Generic::IList_1<NUnit::Framework::Interfaces::ITestFilter*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::CompositeFilter::set_Filters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Filters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.CompositeFilter.get_ElementName
::Il2CppString* NUnit::Framework::Internal::Filters::CompositeFilter::get_ElementName() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::CompositeFilter::get_ElementName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ElementName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.CompositeFilter.Pass
bool NUnit::Framework::Internal::Filters::CompositeFilter::Pass(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::CompositeFilter::Pass");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.CompositeFilter.Match
bool NUnit::Framework::Internal::Filters::CompositeFilter::Match(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::CompositeFilter::Match");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Match", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.CompositeFilter.IsExplicitMatch
bool NUnit::Framework::Internal::Filters::CompositeFilter::IsExplicitMatch(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::CompositeFilter::IsExplicitMatch");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsExplicitMatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.CompositeFilter.AddToXml
NUnit::Framework::Interfaces::TNode* NUnit::Framework::Internal::Filters::CompositeFilter::AddToXml(NUnit::Framework::Interfaces::TNode* parentNode, bool recursive) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::CompositeFilter::AddToXml");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddToXml", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentNode), ::il2cpp_utils::ExtractType(recursive)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::TNode*, false>(this, ___internal__method, parentNode, recursive);
}
// Writing MetadataGetter for method: CompositeFilter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CompositeFilter::*)(::Array<NUnit::Framework::Interfaces::ITestFilter*>*)>(&CompositeFilter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CompositeFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<NUnit::Framework::Interfaces::ITestFilter*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CompositeFilter::*)(::Array<NUnit::Framework::Interfaces::ITestFilter*>*)>(&CompositeFilter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CompositeFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<NUnit::Framework::Interfaces::ITestFilter*>*>()});
  }
};
// Writing MetadataGetter for method: CompositeFilter::get_Filters
// Il2CppName: get_Filters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IList_1<NUnit::Framework::Interfaces::ITestFilter*>* (CompositeFilter::*)()>(&CompositeFilter::get_Filters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CompositeFilter*), "get_Filters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CompositeFilter::set_Filters
// Il2CppName: set_Filters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CompositeFilter::*)(System::Collections::Generic::IList_1<NUnit::Framework::Interfaces::ITestFilter*>*)>(&CompositeFilter::set_Filters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CompositeFilter*), "set_Filters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<NUnit::Framework::Interfaces::ITestFilter*>*>()});
  }
};
// Writing MetadataGetter for method: CompositeFilter::get_ElementName
// Il2CppName: get_ElementName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CompositeFilter::*)()>(&CompositeFilter::get_ElementName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CompositeFilter*), "get_ElementName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CompositeFilter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CompositeFilter::*)()>(&CompositeFilter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CompositeFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CompositeFilter::*)()>(&CompositeFilter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CompositeFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CompositeFilter::Pass
// Il2CppName: Pass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CompositeFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&CompositeFilter::Pass)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CompositeFilter*), "Pass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: CompositeFilter::Match
// Il2CppName: Match
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CompositeFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&CompositeFilter::Match)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CompositeFilter*), "Match", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: CompositeFilter::IsExplicitMatch
// Il2CppName: IsExplicitMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CompositeFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&CompositeFilter::IsExplicitMatch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CompositeFilter*), "IsExplicitMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: CompositeFilter::AddToXml
// Il2CppName: AddToXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TNode* (CompositeFilter::*)(NUnit::Framework::Interfaces::TNode*, bool)>(&CompositeFilter::AddToXml)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CompositeFilter*), "AddToXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TNode*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Filters.ValueMatchFilter
#include "NUnit/Framework/Internal/Filters/ValueMatchFilter.hpp"
// Including type: NUnit.Framework.Interfaces.TNode
#include "NUnit/Framework/Interfaces/TNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Filters.ValueMatchFilter.get_ExpectedValue
::Il2CppString* NUnit::Framework::Internal::Filters::ValueMatchFilter::get_ExpectedValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::ValueMatchFilter::get_ExpectedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ExpectedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.ValueMatchFilter.set_ExpectedValue
void NUnit::Framework::Internal::Filters::ValueMatchFilter::set_ExpectedValue(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::ValueMatchFilter::set_ExpectedValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ExpectedValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.ValueMatchFilter.get_IsRegex
bool NUnit::Framework::Internal::Filters::ValueMatchFilter::get_IsRegex() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::ValueMatchFilter::get_IsRegex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsRegex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.ValueMatchFilter.set_IsRegex
void NUnit::Framework::Internal::Filters::ValueMatchFilter::set_IsRegex(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::ValueMatchFilter::set_IsRegex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IsRegex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.ValueMatchFilter.Match
bool NUnit::Framework::Internal::Filters::ValueMatchFilter::Match(::Il2CppString* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::ValueMatchFilter::Match");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Match", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, input);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.ValueMatchFilter.get_ElementName
::Il2CppString* NUnit::Framework::Internal::Filters::ValueMatchFilter::get_ElementName() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::ValueMatchFilter::get_ElementName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ElementName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.ValueMatchFilter.AddToXml
NUnit::Framework::Interfaces::TNode* NUnit::Framework::Internal::Filters::ValueMatchFilter::AddToXml(NUnit::Framework::Interfaces::TNode* parentNode, bool recursive) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::ValueMatchFilter::AddToXml");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddToXml", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentNode), ::il2cpp_utils::ExtractType(recursive)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::TNode*, false>(this, ___internal__method, parentNode, recursive);
}
// Writing MetadataGetter for method: ValueMatchFilter::get_ExpectedValue
// Il2CppName: get_ExpectedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ValueMatchFilter::*)()>(&ValueMatchFilter::get_ExpectedValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueMatchFilter*), "get_ExpectedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ValueMatchFilter::set_ExpectedValue
// Il2CppName: set_ExpectedValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValueMatchFilter::*)(::Il2CppString*)>(&ValueMatchFilter::set_ExpectedValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueMatchFilter*), "set_ExpectedValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ValueMatchFilter::get_IsRegex
// Il2CppName: get_IsRegex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ValueMatchFilter::*)()>(&ValueMatchFilter::get_IsRegex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueMatchFilter*), "get_IsRegex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ValueMatchFilter::set_IsRegex
// Il2CppName: set_IsRegex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValueMatchFilter::*)(bool)>(&ValueMatchFilter::set_IsRegex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueMatchFilter*), "set_IsRegex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ValueMatchFilter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValueMatchFilter::*)(::Il2CppString*)>(&ValueMatchFilter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueMatchFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValueMatchFilter::*)(::Il2CppString*)>(&ValueMatchFilter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueMatchFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ValueMatchFilter::Match
// Il2CppName: Match
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ValueMatchFilter::*)(::Il2CppString*)>(&ValueMatchFilter::Match)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueMatchFilter*), "Match", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ValueMatchFilter::get_ElementName
// Il2CppName: get_ElementName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ValueMatchFilter::*)()>(&ValueMatchFilter::get_ElementName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueMatchFilter*), "get_ElementName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ValueMatchFilter::AddToXml
// Il2CppName: AddToXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TNode* (ValueMatchFilter::*)(NUnit::Framework::Interfaces::TNode*, bool)>(&ValueMatchFilter::AddToXml)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueMatchFilter*), "AddToXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TNode*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Filters.AndFilter
#include "NUnit/Framework/Internal/Filters/AndFilter.hpp"
// Including type: NUnit.Framework.Interfaces.ITest
#include "NUnit/Framework/Interfaces/ITest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Filters.AndFilter.Pass
bool NUnit::Framework::Internal::Filters::AndFilter::Pass(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::AndFilter::Pass");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.AndFilter.Match
bool NUnit::Framework::Internal::Filters::AndFilter::Match(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::AndFilter::Match");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Match", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.AndFilter.IsExplicitMatch
bool NUnit::Framework::Internal::Filters::AndFilter::IsExplicitMatch(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::AndFilter::IsExplicitMatch");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsExplicitMatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.AndFilter.get_ElementName
::Il2CppString* NUnit::Framework::Internal::Filters::AndFilter::get_ElementName() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::AndFilter::get_ElementName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ElementName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AndFilter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AndFilter::*)()>(&AndFilter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AndFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AndFilter::*)()>(&AndFilter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AndFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AndFilter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AndFilter::*)(::Array<NUnit::Framework::Interfaces::ITestFilter*>*)>(&AndFilter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AndFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<NUnit::Framework::Interfaces::ITestFilter*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AndFilter::*)(::Array<NUnit::Framework::Interfaces::ITestFilter*>*)>(&AndFilter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AndFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<NUnit::Framework::Interfaces::ITestFilter*>*>()});
  }
};
// Writing MetadataGetter for method: AndFilter::Pass
// Il2CppName: Pass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AndFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&AndFilter::Pass)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AndFilter*), "Pass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: AndFilter::Match
// Il2CppName: Match
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AndFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&AndFilter::Match)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AndFilter*), "Match", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: AndFilter::IsExplicitMatch
// Il2CppName: IsExplicitMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AndFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&AndFilter::IsExplicitMatch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AndFilter*), "IsExplicitMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: AndFilter::get_ElementName
// Il2CppName: get_ElementName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AndFilter::*)()>(&AndFilter::get_ElementName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AndFilter*), "get_ElementName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Filters.CategoryFilter
#include "NUnit/Framework/Internal/Filters/CategoryFilter.hpp"
// Including type: NUnit.Framework.Interfaces.ITest
#include "NUnit/Framework/Interfaces/ITest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Filters.CategoryFilter.Match
bool NUnit::Framework::Internal::Filters::CategoryFilter::Match(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::CategoryFilter::Match");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Match", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.CategoryFilter.get_ElementName
::Il2CppString* NUnit::Framework::Internal::Filters::CategoryFilter::get_ElementName() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::CategoryFilter::get_ElementName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ElementName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CategoryFilter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CategoryFilter::*)(::Il2CppString*)>(&CategoryFilter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CategoryFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CategoryFilter::*)(::Il2CppString*)>(&CategoryFilter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CategoryFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CategoryFilter::Match
// Il2CppName: Match
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CategoryFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&CategoryFilter::Match)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CategoryFilter*), "Match", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: CategoryFilter::get_ElementName
// Il2CppName: get_ElementName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CategoryFilter::*)()>(&CategoryFilter::get_ElementName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CategoryFilter*), "get_ElementName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Internal.Filters.NotFilter
#include "NUnit/Framework/Internal/Filters/NotFilter.hpp"
// Including type: NUnit.Framework.Interfaces.ITest
#include "NUnit/Framework/Interfaces/ITest.hpp"
// Including type: NUnit.Framework.Interfaces.TNode
#include "NUnit/Framework/Interfaces/TNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Filters.NotFilter.get_BaseFilter
NUnit::Framework::Internal::TestFilter* NUnit::Framework::Internal::Filters::NotFilter::get_BaseFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::NotFilter::get_BaseFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestFilter*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.NotFilter.set_BaseFilter
void NUnit::Framework::Internal::Filters::NotFilter::set_BaseFilter(NUnit::Framework::Internal::TestFilter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::NotFilter::set_BaseFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_BaseFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.NotFilter.Pass
bool NUnit::Framework::Internal::Filters::NotFilter::Pass(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::NotFilter::Pass");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.NotFilter.Match
bool NUnit::Framework::Internal::Filters::NotFilter::Match(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::NotFilter::Match");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Match", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.NotFilter.IsExplicitMatch
bool NUnit::Framework::Internal::Filters::NotFilter::IsExplicitMatch(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::NotFilter::IsExplicitMatch");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsExplicitMatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.NotFilter.AddToXml
NUnit::Framework::Interfaces::TNode* NUnit::Framework::Internal::Filters::NotFilter::AddToXml(NUnit::Framework::Interfaces::TNode* parentNode, bool recursive) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::NotFilter::AddToXml");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddToXml", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentNode), ::il2cpp_utils::ExtractType(recursive)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::TNode*, false>(this, ___internal__method, parentNode, recursive);
}
// Writing MetadataGetter for method: NotFilter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotFilter::*)(NUnit::Framework::Internal::TestFilter*)>(&NotFilter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestFilter*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotFilter::*)(NUnit::Framework::Internal::TestFilter*)>(&NotFilter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestFilter*>()});
  }
};
// Writing MetadataGetter for method: NotFilter::get_BaseFilter
// Il2CppName: get_BaseFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestFilter* (NotFilter::*)()>(&NotFilter::get_BaseFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotFilter*), "get_BaseFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NotFilter::set_BaseFilter
// Il2CppName: set_BaseFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NotFilter::*)(NUnit::Framework::Internal::TestFilter*)>(&NotFilter::set_BaseFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotFilter*), "set_BaseFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestFilter*>()});
  }
};
// Writing MetadataGetter for method: NotFilter::Pass
// Il2CppName: Pass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NotFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&NotFilter::Pass)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotFilter*), "Pass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: NotFilter::Match
// Il2CppName: Match
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NotFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&NotFilter::Match)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotFilter*), "Match", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: NotFilter::IsExplicitMatch
// Il2CppName: IsExplicitMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NotFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&NotFilter::IsExplicitMatch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotFilter*), "IsExplicitMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: NotFilter::AddToXml
// Il2CppName: AddToXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TNode* (NotFilter::*)(NUnit::Framework::Interfaces::TNode*, bool)>(&NotFilter::AddToXml)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NotFilter*), "AddToXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TNode*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Filters.OrFilter
#include "NUnit/Framework/Internal/Filters/OrFilter.hpp"
// Including type: NUnit.Framework.Interfaces.ITest
#include "NUnit/Framework/Interfaces/ITest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Filters.OrFilter.Pass
bool NUnit::Framework::Internal::Filters::OrFilter::Pass(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::OrFilter::Pass");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.OrFilter.Match
bool NUnit::Framework::Internal::Filters::OrFilter::Match(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::OrFilter::Match");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Match", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.OrFilter.IsExplicitMatch
bool NUnit::Framework::Internal::Filters::OrFilter::IsExplicitMatch(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::OrFilter::IsExplicitMatch");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsExplicitMatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.OrFilter.get_ElementName
::Il2CppString* NUnit::Framework::Internal::Filters::OrFilter::get_ElementName() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::OrFilter::get_ElementName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ElementName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: OrFilter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OrFilter::*)()>(&OrFilter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OrFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OrFilter::*)()>(&OrFilter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OrFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OrFilter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OrFilter::*)(::Array<NUnit::Framework::Interfaces::ITestFilter*>*)>(&OrFilter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OrFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<NUnit::Framework::Interfaces::ITestFilter*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OrFilter::*)(::Array<NUnit::Framework::Interfaces::ITestFilter*>*)>(&OrFilter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OrFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<NUnit::Framework::Interfaces::ITestFilter*>*>()});
  }
};
// Writing MetadataGetter for method: OrFilter::Pass
// Il2CppName: Pass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OrFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&OrFilter::Pass)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OrFilter*), "Pass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: OrFilter::Match
// Il2CppName: Match
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OrFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&OrFilter::Match)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OrFilter*), "Match", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: OrFilter::IsExplicitMatch
// Il2CppName: IsExplicitMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (OrFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&OrFilter::IsExplicitMatch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OrFilter*), "IsExplicitMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: OrFilter::get_ElementName
// Il2CppName: get_ElementName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (OrFilter::*)()>(&OrFilter::get_ElementName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OrFilter*), "get_ElementName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Filters.FullNameFilter
#include "NUnit/Framework/Internal/Filters/FullNameFilter.hpp"
// Including type: NUnit.Framework.Interfaces.ITest
#include "NUnit/Framework/Interfaces/ITest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Filters.FullNameFilter.Match
bool NUnit::Framework::Internal::Filters::FullNameFilter::Match(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::FullNameFilter::Match");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Match", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Filters.FullNameFilter.get_ElementName
::Il2CppString* NUnit::Framework::Internal::Filters::FullNameFilter::get_ElementName() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Filters::FullNameFilter::get_ElementName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ElementName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FullNameFilter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullNameFilter::*)(::Il2CppString*)>(&FullNameFilter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullNameFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullNameFilter::*)(::Il2CppString*)>(&FullNameFilter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullNameFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FullNameFilter::Match
// Il2CppName: Match
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FullNameFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&FullNameFilter::Match)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullNameFilter*), "Match", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: FullNameFilter::get_ElementName
// Il2CppName: get_ElementName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (FullNameFilter::*)()>(&FullNameFilter::get_ElementName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullNameFilter*), "get_ElementName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Execution.EventListenerTextWriter
#include "NUnit/Framework/Internal/Execution/EventListenerTextWriter.hpp"
// Including type: System.Text.Encoding
#include "System/Text/Encoding.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Execution.EventListenerTextWriter.TrySendToListener
bool NUnit::Framework::Internal::Execution::EventListenerTextWriter::TrySendToListener(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::EventListenerTextWriter::TrySendToListener");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySendToListener", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, text);
}
// Autogenerated method: NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write
void NUnit::Framework::Internal::Execution::EventListenerTextWriter::Write(::Il2CppChar aChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::EventListenerTextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(aChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, aChar);
}
// Autogenerated method: NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write
void NUnit::Framework::Internal::Execution::EventListenerTextWriter::Write(::Il2CppString* aString) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::EventListenerTextWriter::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(aString)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, aString);
}
// Autogenerated method: NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine
void NUnit::Framework::Internal::Execution::EventListenerTextWriter::WriteLine(::Il2CppString* aString) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::EventListenerTextWriter::WriteLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(aString)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, aString);
}
// Autogenerated method: NUnit.Framework.Internal.Execution.EventListenerTextWriter.get_Encoding
System::Text::Encoding* NUnit::Framework::Internal::Execution::EventListenerTextWriter::get_Encoding() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::EventListenerTextWriter::get_Encoding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Encoding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Text::Encoding*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EventListenerTextWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EventListenerTextWriter::*)(::Il2CppString*, System::IO::TextWriter*)>(&EventListenerTextWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventListenerTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EventListenerTextWriter::*)(::Il2CppString*, System::IO::TextWriter*)>(&EventListenerTextWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventListenerTextWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::TextWriter*>()});
  }
};
// Writing MetadataGetter for method: EventListenerTextWriter::TrySendToListener
// Il2CppName: TrySendToListener
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EventListenerTextWriter::*)(::Il2CppString*)>(&EventListenerTextWriter::TrySendToListener)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventListenerTextWriter*), "TrySendToListener", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: EventListenerTextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EventListenerTextWriter::*)(::Il2CppChar)>(&EventListenerTextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventListenerTextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: EventListenerTextWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EventListenerTextWriter::*)(::Il2CppString*)>(&EventListenerTextWriter::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventListenerTextWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: EventListenerTextWriter::WriteLine
// Il2CppName: WriteLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EventListenerTextWriter::*)(::Il2CppString*)>(&EventListenerTextWriter::WriteLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventListenerTextWriter*), "WriteLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: EventListenerTextWriter::get_Encoding
// Il2CppName: get_Encoding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Text::Encoding* (EventListenerTextWriter::*)()>(&EventListenerTextWriter::get_Encoding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EventListenerTextWriter*), "get_Encoding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Internal.Execution.CommandBuilder
#include "NUnit/Framework/Internal/Execution/CommandBuilder.hpp"
// Including type: NUnit.Framework.Internal.Commands.TestCommand
#include "NUnit/Framework/Internal/Commands/TestCommand.hpp"
// Including type: NUnit.Framework.Internal.TestSuite
#include "NUnit/Framework/Internal/TestSuite.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: NUnit.Framework.Internal.Commands.SetUpTearDownItem
#include "NUnit/Framework/Internal/Commands/SetUpTearDownItem.hpp"
// Including type: NUnit.Framework.Internal.Commands.TestActionItem
#include "NUnit/Framework/Internal/Commands/TestActionItem.hpp"
// Including type: NUnit.Framework.Internal.Commands.SkipCommand
#include "NUnit/Framework/Internal/Commands/SkipCommand.hpp"
// Including type: NUnit.Framework.Internal.Test
#include "NUnit/Framework/Internal/Test.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Execution.CommandBuilder.MakeOneTimeSetUpCommand
NUnit::Framework::Internal::Commands::TestCommand* NUnit::Framework::Internal::Execution::CommandBuilder::MakeOneTimeSetUpCommand(NUnit::Framework::Internal::TestSuite* suite, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>* setUpTearDown, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::TestActionItem*>* actions) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::CommandBuilder::MakeOneTimeSetUpCommand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Internal.Execution", "CommandBuilder", "MakeOneTimeSetUpCommand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(suite), ::il2cpp_utils::ExtractType(setUpTearDown), ::il2cpp_utils::ExtractType(actions)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::Commands::TestCommand*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, suite, setUpTearDown, actions);
}
// Autogenerated method: NUnit.Framework.Internal.Execution.CommandBuilder.MakeOneTimeTearDownCommand
NUnit::Framework::Internal::Commands::TestCommand* NUnit::Framework::Internal::Execution::CommandBuilder::MakeOneTimeTearDownCommand(NUnit::Framework::Internal::TestSuite* suite, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>* setUpTearDownItems, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::TestActionItem*>* actions) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::CommandBuilder::MakeOneTimeTearDownCommand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Internal.Execution", "CommandBuilder", "MakeOneTimeTearDownCommand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(suite), ::il2cpp_utils::ExtractType(setUpTearDownItems), ::il2cpp_utils::ExtractType(actions)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::Commands::TestCommand*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, suite, setUpTearDownItems, actions);
}
// Autogenerated method: NUnit.Framework.Internal.Execution.CommandBuilder.MakeSkipCommand
NUnit::Framework::Internal::Commands::SkipCommand* NUnit::Framework::Internal::Execution::CommandBuilder::MakeSkipCommand(NUnit::Framework::Internal::Test* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::CommandBuilder::MakeSkipCommand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Internal.Execution", "CommandBuilder", "MakeSkipCommand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::Commands::SkipCommand*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Internal.Execution.CommandBuilder.BuildSetUpTearDownList
System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>* NUnit::Framework::Internal::Execution::CommandBuilder::BuildSetUpTearDownList(System::Type* fixtureType, System::Type* setUpType, System::Type* tearDownType) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::CommandBuilder::BuildSetUpTearDownList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Internal.Execution", "CommandBuilder", "BuildSetUpTearDownList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fixtureType), ::il2cpp_utils::ExtractType(setUpType), ::il2cpp_utils::ExtractType(tearDownType)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fixtureType, setUpType, tearDownType);
}
// Autogenerated method: NUnit.Framework.Internal.Execution.CommandBuilder.BuildNode
NUnit::Framework::Internal::Commands::SetUpTearDownItem* NUnit::Framework::Internal::Execution::CommandBuilder::BuildNode(System::Type* fixtureType, System::Collections::Generic::IList_1<System::Reflection::MethodInfo*>* setUpMethods, System::Collections::Generic::IList_1<System::Reflection::MethodInfo*>* tearDownMethods) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::CommandBuilder::BuildNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Internal.Execution", "CommandBuilder", "BuildNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fixtureType), ::il2cpp_utils::ExtractType(setUpMethods), ::il2cpp_utils::ExtractType(tearDownMethods)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::Commands::SetUpTearDownItem*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fixtureType, setUpMethods, tearDownMethods);
}
// Autogenerated method: NUnit.Framework.Internal.Execution.CommandBuilder.SelectMethodsByDeclaringType
System::Collections::Generic::List_1<System::Reflection::MethodInfo*>* NUnit::Framework::Internal::Execution::CommandBuilder::SelectMethodsByDeclaringType(System::Type* type, System::Collections::Generic::IList_1<System::Reflection::MethodInfo*>* methods) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::CommandBuilder::SelectMethodsByDeclaringType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Internal.Execution", "CommandBuilder", "SelectMethodsByDeclaringType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(methods)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<System::Reflection::MethodInfo*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type, methods);
}
// Writing MetadataGetter for method: CommandBuilder::MakeOneTimeSetUpCommand
// Il2CppName: MakeOneTimeSetUpCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::Commands::TestCommand* (*)(NUnit::Framework::Internal::TestSuite*, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>*, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::TestActionItem*>*)>(&CommandBuilder::MakeOneTimeSetUpCommand)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuilder*), "MakeOneTimeSetUpCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestSuite*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::TestActionItem*>*>()});
  }
};
// Writing MetadataGetter for method: CommandBuilder::MakeOneTimeTearDownCommand
// Il2CppName: MakeOneTimeTearDownCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::Commands::TestCommand* (*)(NUnit::Framework::Internal::TestSuite*, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>*, System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::TestActionItem*>*)>(&CommandBuilder::MakeOneTimeTearDownCommand)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuilder*), "MakeOneTimeTearDownCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestSuite*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::TestActionItem*>*>()});
  }
};
// Writing MetadataGetter for method: CommandBuilder::MakeSkipCommand
// Il2CppName: MakeSkipCommand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::Commands::SkipCommand* (*)(NUnit::Framework::Internal::Test*)>(&CommandBuilder::MakeSkipCommand)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuilder*), "MakeSkipCommand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Test*>()});
  }
};
// Writing MetadataGetter for method: CommandBuilder::BuildSetUpTearDownList
// Il2CppName: BuildSetUpTearDownList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<NUnit::Framework::Internal::Commands::SetUpTearDownItem*>* (*)(System::Type*, System::Type*, System::Type*)>(&CommandBuilder::BuildSetUpTearDownList)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuilder*), "BuildSetUpTearDownList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: CommandBuilder::BuildNode
// Il2CppName: BuildNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::Commands::SetUpTearDownItem* (*)(System::Type*, System::Collections::Generic::IList_1<System::Reflection::MethodInfo*>*, System::Collections::Generic::IList_1<System::Reflection::MethodInfo*>*)>(&CommandBuilder::BuildNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuilder*), "BuildNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<System::Reflection::MethodInfo*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<System::Reflection::MethodInfo*>*>()});
  }
};
// Writing MetadataGetter for method: CommandBuilder::SelectMethodsByDeclaringType
// Il2CppName: SelectMethodsByDeclaringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<System::Reflection::MethodInfo*>* (*)(System::Type*, System::Collections::Generic::IList_1<System::Reflection::MethodInfo*>*)>(&CommandBuilder::SelectMethodsByDeclaringType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CommandBuilder*), "SelectMethodsByDeclaringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<System::Reflection::MethodInfo*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Execution.CountdownEvent
#include "NUnit/Framework/Internal/Execution/CountdownEvent.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Execution.CountdownEvent.get_CurrentCount
int NUnit::Framework::Internal::Execution::CountdownEvent::get_CurrentCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::CountdownEvent::get_CurrentCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CurrentCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Internal.Execution.CountdownEvent.Signal
void NUnit::Framework::Internal::Execution::CountdownEvent::Signal() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::CountdownEvent::Signal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Signal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CountdownEvent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CountdownEvent::*)(int)>(&CountdownEvent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CountdownEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CountdownEvent::*)(int)>(&CountdownEvent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CountdownEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CountdownEvent::get_CurrentCount
// Il2CppName: get_CurrentCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CountdownEvent::*)()>(&CountdownEvent::get_CurrentCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CountdownEvent*), "get_CurrentCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CountdownEvent::Signal
// Il2CppName: Signal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CountdownEvent::*)()>(&CountdownEvent::Signal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CountdownEvent*), "Signal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Internal.Execution.WorkItemState
#include "NUnit/Framework/Internal/Execution/WorkItemState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Internal.Execution.WorkItemState Ready
NUnit::Framework::Internal::Execution::WorkItemState NUnit::Framework::Internal::Execution::WorkItemState::_get_Ready() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::WorkItemState::_get_Ready");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Internal::Execution::WorkItemState>("NUnit.Framework.Internal.Execution", "WorkItemState", "Ready"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Internal.Execution.WorkItemState Ready
void NUnit::Framework::Internal::Execution::WorkItemState::_set_Ready(NUnit::Framework::Internal::Execution::WorkItemState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::WorkItemState::_set_Ready");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Internal.Execution", "WorkItemState", "Ready", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Internal.Execution.WorkItemState Running
NUnit::Framework::Internal::Execution::WorkItemState NUnit::Framework::Internal::Execution::WorkItemState::_get_Running() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::WorkItemState::_get_Running");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Internal::Execution::WorkItemState>("NUnit.Framework.Internal.Execution", "WorkItemState", "Running"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Internal.Execution.WorkItemState Running
void NUnit::Framework::Internal::Execution::WorkItemState::_set_Running(NUnit::Framework::Internal::Execution::WorkItemState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::WorkItemState::_set_Running");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Internal.Execution", "WorkItemState", "Running", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Internal.Execution.WorkItemState Complete
NUnit::Framework::Internal::Execution::WorkItemState NUnit::Framework::Internal::Execution::WorkItemState::_get_Complete() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::WorkItemState::_get_Complete");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Internal::Execution::WorkItemState>("NUnit.Framework.Internal.Execution", "WorkItemState", "Complete"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Internal.Execution.WorkItemState Complete
void NUnit::Framework::Internal::Execution::WorkItemState::_set_Complete(NUnit::Framework::Internal::Execution::WorkItemState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Execution::WorkItemState::_set_Complete");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Internal.Execution", "WorkItemState", "Complete", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Builders.DefaultSuiteBuilder
#include "NUnit/Framework/Internal/Builders/DefaultSuiteBuilder.hpp"
// Including type: NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder
#include "NUnit/Framework/Internal/Builders/NUnitTestFixtureBuilder.hpp"
// Including type: NUnit.Framework.Interfaces.ITypeInfo
#include "NUnit/Framework/Interfaces/ITypeInfo.hpp"
// Including type: NUnit.Framework.Internal.TestSuite
#include "NUnit/Framework/Internal/TestSuite.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: NUnit.Framework.Interfaces.IFixtureBuilder
#include "NUnit/Framework/Interfaces/IFixtureBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.CanBuildFrom
bool NUnit::Framework::Internal::Builders::DefaultSuiteBuilder::CanBuildFrom(NUnit::Framework::Interfaces::ITypeInfo* typeInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::DefaultSuiteBuilder::CanBuildFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanBuildFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeInfo)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, typeInfo);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.BuildFrom
NUnit::Framework::Internal::TestSuite* NUnit::Framework::Internal::Builders::DefaultSuiteBuilder::BuildFrom(NUnit::Framework::Interfaces::ITypeInfo* typeInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::DefaultSuiteBuilder::BuildFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeInfo)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestSuite*, false>(this, ___internal__method, typeInfo);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.BuildMultipleFixtures
NUnit::Framework::Internal::TestSuite* NUnit::Framework::Internal::Builders::DefaultSuiteBuilder::BuildMultipleFixtures(NUnit::Framework::Interfaces::ITypeInfo* typeInfo, System::Collections::Generic::IEnumerable_1<NUnit::Framework::Internal::TestSuite*>* fixtures) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::DefaultSuiteBuilder::BuildMultipleFixtures");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildMultipleFixtures", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeInfo), ::il2cpp_utils::ExtractType(fixtures)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestSuite*, false>(this, ___internal__method, typeInfo, fixtures);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.GetFixtureBuilderAttributes
::Array<NUnit::Framework::Interfaces::IFixtureBuilder*>* NUnit::Framework::Internal::Builders::DefaultSuiteBuilder::GetFixtureBuilderAttributes(NUnit::Framework::Interfaces::ITypeInfo* typeInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::DefaultSuiteBuilder::GetFixtureBuilderAttributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFixtureBuilderAttributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeInfo)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<NUnit::Framework::Interfaces::IFixtureBuilder*>*, false>(this, ___internal__method, typeInfo);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.HasArguments
bool NUnit::Framework::Internal::Builders::DefaultSuiteBuilder::HasArguments(NUnit::Framework::Interfaces::IFixtureBuilder* attr) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::DefaultSuiteBuilder::HasArguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasArguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attr)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attr);
}
// Writing MetadataGetter for method: DefaultSuiteBuilder::CanBuildFrom
// Il2CppName: CanBuildFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DefaultSuiteBuilder::*)(NUnit::Framework::Interfaces::ITypeInfo*)>(&DefaultSuiteBuilder::CanBuildFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultSuiteBuilder*), "CanBuildFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITypeInfo*>()});
  }
};
// Writing MetadataGetter for method: DefaultSuiteBuilder::BuildFrom
// Il2CppName: BuildFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestSuite* (DefaultSuiteBuilder::*)(NUnit::Framework::Interfaces::ITypeInfo*)>(&DefaultSuiteBuilder::BuildFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultSuiteBuilder*), "BuildFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITypeInfo*>()});
  }
};
// Writing MetadataGetter for method: DefaultSuiteBuilder::BuildMultipleFixtures
// Il2CppName: BuildMultipleFixtures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestSuite* (DefaultSuiteBuilder::*)(NUnit::Framework::Interfaces::ITypeInfo*, System::Collections::Generic::IEnumerable_1<NUnit::Framework::Internal::TestSuite*>*)>(&DefaultSuiteBuilder::BuildMultipleFixtures)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultSuiteBuilder*), "BuildMultipleFixtures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITypeInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<NUnit::Framework::Internal::TestSuite*>*>()});
  }
};
// Writing MetadataGetter for method: DefaultSuiteBuilder::GetFixtureBuilderAttributes
// Il2CppName: GetFixtureBuilderAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<NUnit::Framework::Interfaces::IFixtureBuilder*>* (DefaultSuiteBuilder::*)(NUnit::Framework::Interfaces::ITypeInfo*)>(&DefaultSuiteBuilder::GetFixtureBuilderAttributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultSuiteBuilder*), "GetFixtureBuilderAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITypeInfo*>()});
  }
};
// Writing MetadataGetter for method: DefaultSuiteBuilder::HasArguments
// Il2CppName: HasArguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DefaultSuiteBuilder::*)(NUnit::Framework::Interfaces::IFixtureBuilder*)>(&DefaultSuiteBuilder::HasArguments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultSuiteBuilder*), "HasArguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::IFixtureBuilder*>()});
  }
};
// Writing MetadataGetter for method: DefaultSuiteBuilder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultSuiteBuilder::*)()>(&DefaultSuiteBuilder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultSuiteBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultSuiteBuilder::*)()>(&DefaultSuiteBuilder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultSuiteBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder
#include "NUnit/Framework/Internal/Builders/NUnitTestCaseBuilder.hpp"
// Including type: NUnit.Framework.Internal.Randomizer
#include "NUnit/Framework/Internal/Randomizer.hpp"
// Including type: NUnit.Framework.Internal.TestNameGenerator
#include "NUnit/Framework/Internal/TestNameGenerator.hpp"
// Including type: NUnit.Framework.Internal.TestMethod
#include "NUnit/Framework/Internal/TestMethod.hpp"
// Including type: NUnit.Framework.Interfaces.IMethodInfo
#include "NUnit/Framework/Interfaces/IMethodInfo.hpp"
// Including type: NUnit.Framework.Internal.Test
#include "NUnit/Framework/Internal/Test.hpp"
// Including type: NUnit.Framework.Internal.TestCaseParameters
#include "NUnit/Framework/Internal/TestCaseParameters.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder.BuildTestMethod
NUnit::Framework::Internal::TestMethod* NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder::BuildTestMethod(NUnit::Framework::Interfaces::IMethodInfo* method, NUnit::Framework::Internal::Test* parentSuite, NUnit::Framework::Internal::TestCaseParameters* parms) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder::BuildTestMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildTestMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(parentSuite), ::il2cpp_utils::ExtractType(parms)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestMethod*, false>(this, ___internal__method, method, parentSuite, parms);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder.CheckTestMethodSignature
bool NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder::CheckTestMethodSignature(NUnit::Framework::Internal::TestMethod* testMethod, NUnit::Framework::Internal::TestCaseParameters* parms) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder::CheckTestMethodSignature");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Internal.Builders", "NUnitTestCaseBuilder", "CheckTestMethodSignature", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(testMethod), ::il2cpp_utils::ExtractType(parms)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, testMethod, parms);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder.MarkAsNotRunnable
bool NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder::MarkAsNotRunnable(NUnit::Framework::Internal::TestMethod* testMethod, ::Il2CppString* reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder::MarkAsNotRunnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Internal.Builders", "NUnitTestCaseBuilder", "MarkAsNotRunnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(testMethod), ::il2cpp_utils::ExtractType(reason)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, testMethod, reason);
}
// Writing MetadataGetter for method: NUnitTestCaseBuilder::BuildTestMethod
// Il2CppName: BuildTestMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestMethod* (NUnitTestCaseBuilder::*)(NUnit::Framework::Interfaces::IMethodInfo*, NUnit::Framework::Internal::Test*, NUnit::Framework::Internal::TestCaseParameters*)>(&NUnitTestCaseBuilder::BuildTestMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NUnitTestCaseBuilder*), "BuildTestMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::IMethodInfo*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Test*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestCaseParameters*>()});
  }
};
// Writing MetadataGetter for method: NUnitTestCaseBuilder::CheckTestMethodSignature
// Il2CppName: CheckTestMethodSignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(NUnit::Framework::Internal::TestMethod*, NUnit::Framework::Internal::TestCaseParameters*)>(&NUnitTestCaseBuilder::CheckTestMethodSignature)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NUnitTestCaseBuilder*), "CheckTestMethodSignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestMethod*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestCaseParameters*>()});
  }
};
// Writing MetadataGetter for method: NUnitTestCaseBuilder::MarkAsNotRunnable
// Il2CppName: MarkAsNotRunnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(NUnit::Framework::Internal::TestMethod*, ::Il2CppString*)>(&NUnitTestCaseBuilder::MarkAsNotRunnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NUnitTestCaseBuilder*), "MarkAsNotRunnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestMethod*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: NUnitTestCaseBuilder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NUnitTestCaseBuilder::*)()>(&NUnitTestCaseBuilder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NUnitTestCaseBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NUnitTestCaseBuilder::*)()>(&NUnitTestCaseBuilder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NUnitTestCaseBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Builders.NamespaceTreeBuilder
#include "NUnit/Framework/Internal/Builders/NamespaceTreeBuilder.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: NUnit.Framework.Internal.TestSuite
#include "NUnit/Framework/Internal/TestSuite.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: NUnit.Framework.Internal.Test
#include "NUnit/Framework/Internal/Test.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.get_RootSuite
NUnit::Framework::Internal::TestSuite* NUnit::Framework::Internal::Builders::NamespaceTreeBuilder::get_RootSuite() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NamespaceTreeBuilder::get_RootSuite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RootSuite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestSuite*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.Add
void NUnit::Framework::Internal::Builders::NamespaceTreeBuilder::Add(System::Collections::Generic::IList_1<NUnit::Framework::Internal::Test*>* fixtures) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NamespaceTreeBuilder::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fixtures)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fixtures);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.Add
void NUnit::Framework::Internal::Builders::NamespaceTreeBuilder::Add(NUnit::Framework::Internal::TestSuite* fixture) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NamespaceTreeBuilder::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fixture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fixture);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.GetNamespaceForFixture
::Il2CppString* NUnit::Framework::Internal::Builders::NamespaceTreeBuilder::GetNamespaceForFixture(NUnit::Framework::Internal::TestSuite* fixture) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NamespaceTreeBuilder::GetNamespaceForFixture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Internal.Builders", "NamespaceTreeBuilder", "GetNamespaceForFixture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fixture)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fixture);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.BuildFromNameSpace
NUnit::Framework::Internal::TestSuite* NUnit::Framework::Internal::Builders::NamespaceTreeBuilder::BuildFromNameSpace(::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NamespaceTreeBuilder::BuildFromNameSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildFromNameSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ns)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestSuite*, false>(this, ___internal__method, ns);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.AddSetUpFixture
void NUnit::Framework::Internal::Builders::NamespaceTreeBuilder::AddSetUpFixture(NUnit::Framework::Internal::TestSuite* newSetupFixture, NUnit::Framework::Internal::TestSuite* containingSuite, ::Il2CppString* ns) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NamespaceTreeBuilder::AddSetUpFixture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddSetUpFixture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newSetupFixture), ::il2cpp_utils::ExtractType(containingSuite), ::il2cpp_utils::ExtractType(ns)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newSetupFixture, containingSuite, ns);
}
// Writing MetadataGetter for method: NamespaceTreeBuilder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamespaceTreeBuilder::*)(NUnit::Framework::Internal::TestSuite*)>(&NamespaceTreeBuilder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamespaceTreeBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestSuite*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamespaceTreeBuilder::*)(NUnit::Framework::Internal::TestSuite*)>(&NamespaceTreeBuilder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamespaceTreeBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestSuite*>()});
  }
};
// Writing MetadataGetter for method: NamespaceTreeBuilder::get_RootSuite
// Il2CppName: get_RootSuite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestSuite* (NamespaceTreeBuilder::*)()>(&NamespaceTreeBuilder::get_RootSuite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamespaceTreeBuilder*), "get_RootSuite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NamespaceTreeBuilder::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamespaceTreeBuilder::*)(System::Collections::Generic::IList_1<NUnit::Framework::Internal::Test*>*)>(&NamespaceTreeBuilder::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamespaceTreeBuilder*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<NUnit::Framework::Internal::Test*>*>()});
  }
};
// Writing MetadataGetter for method: NamespaceTreeBuilder::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamespaceTreeBuilder::*)(NUnit::Framework::Internal::TestSuite*)>(&NamespaceTreeBuilder::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamespaceTreeBuilder*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestSuite*>()});
  }
};
// Writing MetadataGetter for method: NamespaceTreeBuilder::GetNamespaceForFixture
// Il2CppName: GetNamespaceForFixture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(NUnit::Framework::Internal::TestSuite*)>(&NamespaceTreeBuilder::GetNamespaceForFixture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamespaceTreeBuilder*), "GetNamespaceForFixture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestSuite*>()});
  }
};
// Writing MetadataGetter for method: NamespaceTreeBuilder::BuildFromNameSpace
// Il2CppName: BuildFromNameSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestSuite* (NamespaceTreeBuilder::*)(::Il2CppString*)>(&NamespaceTreeBuilder::BuildFromNameSpace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamespaceTreeBuilder*), "BuildFromNameSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: NamespaceTreeBuilder::AddSetUpFixture
// Il2CppName: AddSetUpFixture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NamespaceTreeBuilder::*)(NUnit::Framework::Internal::TestSuite*, NUnit::Framework::Internal::TestSuite*, ::Il2CppString*)>(&NamespaceTreeBuilder::AddSetUpFixture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NamespaceTreeBuilder*), "AddSetUpFixture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestSuite*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestSuite*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Builders.CombinatorialStrategy
#include "NUnit/Framework/Internal/Builders/CombinatorialStrategy.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: NUnit.Framework.Interfaces.ITestCaseData
#include "NUnit/Framework/Interfaces/ITestCaseData.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Builders.CombinatorialStrategy.GetTestCases
System::Collections::Generic::IEnumerable_1<NUnit::Framework::Interfaces::ITestCaseData*>* NUnit::Framework::Internal::Builders::CombinatorialStrategy::GetTestCases(::Array<System::Collections::IEnumerable*>* sources) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::CombinatorialStrategy::GetTestCases");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTestCases", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sources)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<NUnit::Framework::Interfaces::ITestCaseData*>*, false>(this, ___internal__method, sources);
}
// Writing MetadataGetter for method: CombinatorialStrategy::GetTestCases
// Il2CppName: GetTestCases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<NUnit::Framework::Interfaces::ITestCaseData*>* (CombinatorialStrategy::*)(::Array<System::Collections::IEnumerable*>*)>(&CombinatorialStrategy::GetTestCases)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CombinatorialStrategy*), "GetTestCases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Collections::IEnumerable*>*>()});
  }
};
// Writing MetadataGetter for method: CombinatorialStrategy::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CombinatorialStrategy::*)()>(&CombinatorialStrategy::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CombinatorialStrategy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CombinatorialStrategy::*)()>(&CombinatorialStrategy::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CombinatorialStrategy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder
#include "NUnit/Framework/Internal/Builders/DefaultTestCaseBuilder.hpp"
// Including type: NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder
#include "NUnit/Framework/Internal/Builders/NUnitTestCaseBuilder.hpp"
// Including type: NUnit.Framework.Interfaces.IMethodInfo
#include "NUnit/Framework/Interfaces/IMethodInfo.hpp"
// Including type: NUnit.Framework.Internal.Test
#include "NUnit/Framework/Internal/Test.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: NUnit.Framework.Internal.TestMethod
#include "NUnit/Framework/Internal/TestMethod.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.CanBuildFrom
bool NUnit::Framework::Internal::Builders::DefaultTestCaseBuilder::CanBuildFrom(NUnit::Framework::Interfaces::IMethodInfo* method) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::DefaultTestCaseBuilder::CanBuildFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanBuildFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, method);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.CanBuildFrom
bool NUnit::Framework::Internal::Builders::DefaultTestCaseBuilder::CanBuildFrom(NUnit::Framework::Interfaces::IMethodInfo* method, NUnit::Framework::Internal::Test* parentSuite) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::DefaultTestCaseBuilder::CanBuildFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanBuildFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(parentSuite)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, method, parentSuite);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.BuildFrom
NUnit::Framework::Internal::Test* NUnit::Framework::Internal::Builders::DefaultTestCaseBuilder::BuildFrom(NUnit::Framework::Interfaces::IMethodInfo* method, NUnit::Framework::Internal::Test* parentSuite) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::DefaultTestCaseBuilder::BuildFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(parentSuite)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::Test*, false>(this, ___internal__method, method, parentSuite);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.BuildParameterizedMethodSuite
NUnit::Framework::Internal::Test* NUnit::Framework::Internal::Builders::DefaultTestCaseBuilder::BuildParameterizedMethodSuite(NUnit::Framework::Interfaces::IMethodInfo* method, System::Collections::Generic::IEnumerable_1<NUnit::Framework::Internal::TestMethod*>* tests) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::DefaultTestCaseBuilder::BuildParameterizedMethodSuite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildParameterizedMethodSuite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(tests)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::Test*, false>(this, ___internal__method, method, tests);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.BuildSingleTestMethod
NUnit::Framework::Internal::Test* NUnit::Framework::Internal::Builders::DefaultTestCaseBuilder::BuildSingleTestMethod(NUnit::Framework::Interfaces::IMethodInfo* method, NUnit::Framework::Internal::Test* suite) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::DefaultTestCaseBuilder::BuildSingleTestMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildSingleTestMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(suite)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::Test*, false>(this, ___internal__method, method, suite);
}
// Writing MetadataGetter for method: DefaultTestCaseBuilder::CanBuildFrom
// Il2CppName: CanBuildFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DefaultTestCaseBuilder::*)(NUnit::Framework::Interfaces::IMethodInfo*)>(&DefaultTestCaseBuilder::CanBuildFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTestCaseBuilder*), "CanBuildFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::IMethodInfo*>()});
  }
};
// Writing MetadataGetter for method: DefaultTestCaseBuilder::CanBuildFrom
// Il2CppName: CanBuildFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (DefaultTestCaseBuilder::*)(NUnit::Framework::Interfaces::IMethodInfo*, NUnit::Framework::Internal::Test*)>(&DefaultTestCaseBuilder::CanBuildFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTestCaseBuilder*), "CanBuildFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::IMethodInfo*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Test*>()});
  }
};
// Writing MetadataGetter for method: DefaultTestCaseBuilder::BuildFrom
// Il2CppName: BuildFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::Test* (DefaultTestCaseBuilder::*)(NUnit::Framework::Interfaces::IMethodInfo*, NUnit::Framework::Internal::Test*)>(&DefaultTestCaseBuilder::BuildFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTestCaseBuilder*), "BuildFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::IMethodInfo*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Test*>()});
  }
};
// Writing MetadataGetter for method: DefaultTestCaseBuilder::BuildParameterizedMethodSuite
// Il2CppName: BuildParameterizedMethodSuite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::Test* (DefaultTestCaseBuilder::*)(NUnit::Framework::Interfaces::IMethodInfo*, System::Collections::Generic::IEnumerable_1<NUnit::Framework::Internal::TestMethod*>*)>(&DefaultTestCaseBuilder::BuildParameterizedMethodSuite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTestCaseBuilder*), "BuildParameterizedMethodSuite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::IMethodInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IEnumerable_1<NUnit::Framework::Internal::TestMethod*>*>()});
  }
};
// Writing MetadataGetter for method: DefaultTestCaseBuilder::BuildSingleTestMethod
// Il2CppName: BuildSingleTestMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::Test* (DefaultTestCaseBuilder::*)(NUnit::Framework::Interfaces::IMethodInfo*, NUnit::Framework::Internal::Test*)>(&DefaultTestCaseBuilder::BuildSingleTestMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTestCaseBuilder*), "BuildSingleTestMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::IMethodInfo*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Test*>()});
  }
};
// Writing MetadataGetter for method: DefaultTestCaseBuilder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultTestCaseBuilder::*)()>(&DefaultTestCaseBuilder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTestCaseBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultTestCaseBuilder::*)()>(&DefaultTestCaseBuilder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultTestCaseBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder
#include "NUnit/Framework/Internal/Builders/NUnitTestFixtureBuilder.hpp"
// Including type: NUnit.Framework.Interfaces.ITestCaseBuilder
#include "NUnit/Framework/Interfaces/ITestCaseBuilder.hpp"
// Including type: NUnit.Framework.Internal.TestSuite
#include "NUnit/Framework/Internal/TestSuite.hpp"
// Including type: NUnit.Framework.Interfaces.ITypeInfo
#include "NUnit/Framework/Interfaces/ITypeInfo.hpp"
// Including type: NUnit.Framework.Interfaces.ITestFixtureData
#include "NUnit/Framework/Interfaces/ITestFixtureData.hpp"
// Including type: NUnit.Framework.Internal.TestFixture
#include "NUnit/Framework/Internal/TestFixture.hpp"
// Including type: NUnit.Framework.Internal.Test
#include "NUnit/Framework/Internal/Test.hpp"
// Including type: NUnit.Framework.Interfaces.IMethodInfo
#include "NUnit/Framework/Interfaces/IMethodInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.String NO_TYPE_ARGS_MSG
::Il2CppString* NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::_get_NO_TYPE_ARGS_MSG() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::_get_NO_TYPE_ARGS_MSG");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Internal.Builders", "NUnitTestFixtureBuilder", "NO_TYPE_ARGS_MSG"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String NO_TYPE_ARGS_MSG
void NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::_set_NO_TYPE_ARGS_MSG(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::_set_NO_TYPE_ARGS_MSG");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Internal.Builders", "NUnitTestFixtureBuilder", "NO_TYPE_ARGS_MSG", value));
}
// Autogenerated method: NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.BuildFrom
NUnit::Framework::Internal::TestSuite* NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::BuildFrom(NUnit::Framework::Interfaces::ITypeInfo* typeInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::BuildFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeInfo)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestSuite*, false>(this, ___internal__method, typeInfo);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.BuildFrom
NUnit::Framework::Internal::TestSuite* NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::BuildFrom(NUnit::Framework::Interfaces::ITypeInfo* typeInfo, NUnit::Framework::Interfaces::ITestFixtureData* testFixtureData) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::BuildFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeInfo), ::il2cpp_utils::ExtractType(testFixtureData)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestSuite*, false>(this, ___internal__method, typeInfo, testFixtureData);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.AddTestCasesToFixture
void NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::AddTestCasesToFixture(NUnit::Framework::Internal::TestFixture* fixture) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::AddTestCasesToFixture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddTestCasesToFixture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fixture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fixture);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.BuildTestCase
NUnit::Framework::Internal::Test* NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::BuildTestCase(NUnit::Framework::Interfaces::IMethodInfo* method, NUnit::Framework::Internal::TestSuite* suite) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::BuildTestCase");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildTestCase", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(suite)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::Test*, false>(this, ___internal__method, method, suite);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.CheckTestFixtureIsValid
void NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::CheckTestFixtureIsValid(NUnit::Framework::Internal::TestFixture* fixture) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::CheckTestFixtureIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Internal.Builders", "NUnitTestFixtureBuilder", "CheckTestFixtureIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fixture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fixture);
}
// Autogenerated method: NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder..cctor
void NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::NUnitTestFixtureBuilder::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Internal.Builders", "NUnitTestFixtureBuilder", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: NUnitTestFixtureBuilder::BuildFrom
// Il2CppName: BuildFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestSuite* (NUnitTestFixtureBuilder::*)(NUnit::Framework::Interfaces::ITypeInfo*)>(&NUnitTestFixtureBuilder::BuildFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NUnitTestFixtureBuilder*), "BuildFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITypeInfo*>()});
  }
};
// Writing MetadataGetter for method: NUnitTestFixtureBuilder::BuildFrom
// Il2CppName: BuildFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestSuite* (NUnitTestFixtureBuilder::*)(NUnit::Framework::Interfaces::ITypeInfo*, NUnit::Framework::Interfaces::ITestFixtureData*)>(&NUnitTestFixtureBuilder::BuildFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NUnitTestFixtureBuilder*), "BuildFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITypeInfo*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITestFixtureData*>()});
  }
};
// Writing MetadataGetter for method: NUnitTestFixtureBuilder::AddTestCasesToFixture
// Il2CppName: AddTestCasesToFixture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NUnitTestFixtureBuilder::*)(NUnit::Framework::Internal::TestFixture*)>(&NUnitTestFixtureBuilder::AddTestCasesToFixture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NUnitTestFixtureBuilder*), "AddTestCasesToFixture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestFixture*>()});
  }
};
// Writing MetadataGetter for method: NUnitTestFixtureBuilder::BuildTestCase
// Il2CppName: BuildTestCase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::Test* (NUnitTestFixtureBuilder::*)(NUnit::Framework::Interfaces::IMethodInfo*, NUnit::Framework::Internal::TestSuite*)>(&NUnitTestFixtureBuilder::BuildTestCase)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NUnitTestFixtureBuilder*), "BuildTestCase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::IMethodInfo*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestSuite*>()});
  }
};
// Writing MetadataGetter for method: NUnitTestFixtureBuilder::CheckTestFixtureIsValid
// Il2CppName: CheckTestFixtureIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(NUnit::Framework::Internal::TestFixture*)>(&NUnitTestFixtureBuilder::CheckTestFixtureIsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NUnitTestFixtureBuilder*), "CheckTestFixtureIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::TestFixture*>()});
  }
};
// Writing MetadataGetter for method: NUnitTestFixtureBuilder::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&NUnitTestFixtureBuilder::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NUnitTestFixtureBuilder*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NUnitTestFixtureBuilder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NUnitTestFixtureBuilder::*)()>(&NUnitTestFixtureBuilder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NUnitTestFixtureBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NUnitTestFixtureBuilder::*)()>(&NUnitTestFixtureBuilder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NUnitTestFixtureBuilder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Internal.Builders.ParameterDataSourceProvider
#include "NUnit/Framework/Internal/Builders/ParameterDataSourceProvider.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
// Including type: NUnit.Framework.Interfaces.IParameterInfo
#include "NUnit/Framework/Interfaces/IParameterInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Internal.Builders.ParameterDataSourceProvider.GetDataFor
System::Collections::IEnumerable* NUnit::Framework::Internal::Builders::ParameterDataSourceProvider::GetDataFor(NUnit::Framework::Interfaces::IParameterInfo* parameter) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::Builders::ParameterDataSourceProvider::GetDataFor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDataFor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parameter)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerable*, false>(this, ___internal__method, parameter);
}
// Writing MetadataGetter for method: ParameterDataSourceProvider::GetDataFor
// Il2CppName: GetDataFor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerable* (ParameterDataSourceProvider::*)(NUnit::Framework::Interfaces::IParameterInfo*)>(&ParameterDataSourceProvider::GetDataFor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterDataSourceProvider*), "GetDataFor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::IParameterInfo*>()});
  }
};
// Writing MetadataGetter for method: ParameterDataSourceProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParameterDataSourceProvider::*)()>(&ParameterDataSourceProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterDataSourceProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ParameterDataSourceProvider::*)()>(&ParameterDataSourceProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ParameterDataSourceProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.IMethodInfo
#include "NUnit/Framework/Interfaces/IMethodInfo.hpp"
// Including type: NUnit.Framework.Interfaces.ITypeInfo
#include "NUnit/Framework/Interfaces/ITypeInfo.hpp"
// Including type: System.Reflection.MethodInfo
#include "System/Reflection/MethodInfo.hpp"
// Including type: NUnit.Framework.Interfaces.IParameterInfo
#include "NUnit/Framework/Interfaces/IParameterInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.IMethodInfo.get_TypeInfo
NUnit::Framework::Interfaces::ITypeInfo* NUnit::Framework::Interfaces::IMethodInfo::get_TypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IMethodInfo::get_TypeInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::ITypeInfo*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.IMethodInfo.get_MethodInfo
System::Reflection::MethodInfo* NUnit::Framework::Interfaces::IMethodInfo::get_MethodInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IMethodInfo::get_MethodInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MethodInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::MethodInfo*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.IMethodInfo.get_Name
::Il2CppString* NUnit::Framework::Interfaces::IMethodInfo::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IMethodInfo::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.IMethodInfo.get_IsAbstract
bool NUnit::Framework::Interfaces::IMethodInfo::get_IsAbstract() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IMethodInfo::get_IsAbstract");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsAbstract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.IMethodInfo.get_IsPublic
bool NUnit::Framework::Interfaces::IMethodInfo::get_IsPublic() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IMethodInfo::get_IsPublic");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsPublic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.IMethodInfo.get_ContainsGenericParameters
bool NUnit::Framework::Interfaces::IMethodInfo::get_ContainsGenericParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IMethodInfo::get_ContainsGenericParameters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ContainsGenericParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.IMethodInfo.get_IsGenericMethodDefinition
bool NUnit::Framework::Interfaces::IMethodInfo::get_IsGenericMethodDefinition() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IMethodInfo::get_IsGenericMethodDefinition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsGenericMethodDefinition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.IMethodInfo.get_ReturnType
NUnit::Framework::Interfaces::ITypeInfo* NUnit::Framework::Interfaces::IMethodInfo::get_ReturnType() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IMethodInfo::get_ReturnType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ReturnType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::ITypeInfo*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.IMethodInfo.GetParameters
::Array<NUnit::Framework::Interfaces::IParameterInfo*>* NUnit::Framework::Interfaces::IMethodInfo::GetParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IMethodInfo::GetParameters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<NUnit::Framework::Interfaces::IParameterInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.IMethodInfo.MakeGenericMethod
NUnit::Framework::Interfaces::IMethodInfo* NUnit::Framework::Interfaces::IMethodInfo::MakeGenericMethod(::Array<System::Type*>* typeArguments) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IMethodInfo::MakeGenericMethod");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MakeGenericMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeArguments)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::IMethodInfo*, false>(this, ___internal__method, typeArguments);
}
// Creating initializer_list -> params proxy for: NUnit.Framework.Interfaces.IMethodInfo MakeGenericMethod(params System.Type[] typeArguments)
NUnit::Framework::Interfaces::IMethodInfo* NUnit::Framework::Interfaces::IMethodInfo::MakeGenericMethod(std::initializer_list<System::Type*> typeArguments) {
  return NUnit::Framework::Interfaces::IMethodInfo::MakeGenericMethod(::Array<System::Type*>::New(typeArguments));
}
// Autogenerated method: NUnit.Framework.Interfaces.IMethodInfo.Invoke
::Il2CppObject* NUnit::Framework::Interfaces::IMethodInfo::Invoke(::Il2CppObject* fixture, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IMethodInfo::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fixture), ::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, fixture, args);
}
// Creating initializer_list -> params proxy for: System.Object Invoke(System.Object fixture, params System.Object[] args)
::Il2CppObject* NUnit::Framework::Interfaces::IMethodInfo::Invoke(::Il2CppObject* fixture, std::initializer_list<::Il2CppObject*> args) {
  return NUnit::Framework::Interfaces::IMethodInfo::Invoke(fixture, ::Array<::Il2CppObject*>::New(args));
}
// Writing MetadataGetter for method: IMethodInfo::get_TypeInfo
// Il2CppName: get_TypeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::ITypeInfo* (IMethodInfo::*)()>(&IMethodInfo::get_TypeInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_TypeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMethodInfo::get_MethodInfo
// Il2CppName: get_MethodInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::MethodInfo* (IMethodInfo::*)()>(&IMethodInfo::get_MethodInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_MethodInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMethodInfo::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IMethodInfo::*)()>(&IMethodInfo::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMethodInfo::get_IsAbstract
// Il2CppName: get_IsAbstract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMethodInfo::*)()>(&IMethodInfo::get_IsAbstract)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_IsAbstract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMethodInfo::get_IsPublic
// Il2CppName: get_IsPublic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMethodInfo::*)()>(&IMethodInfo::get_IsPublic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_IsPublic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMethodInfo::get_ContainsGenericParameters
// Il2CppName: get_ContainsGenericParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMethodInfo::*)()>(&IMethodInfo::get_ContainsGenericParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_ContainsGenericParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMethodInfo::get_IsGenericMethodDefinition
// Il2CppName: get_IsGenericMethodDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IMethodInfo::*)()>(&IMethodInfo::get_IsGenericMethodDefinition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_IsGenericMethodDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMethodInfo::get_ReturnType
// Il2CppName: get_ReturnType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::ITypeInfo* (IMethodInfo::*)()>(&IMethodInfo::get_ReturnType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "get_ReturnType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMethodInfo::GetParameters
// Il2CppName: GetParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<NUnit::Framework::Interfaces::IParameterInfo*>* (IMethodInfo::*)()>(&IMethodInfo::GetParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "GetParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IMethodInfo::MakeGenericMethod
// Il2CppName: MakeGenericMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::IMethodInfo* (IMethodInfo::*)(::Array<System::Type*>*)>(&IMethodInfo::MakeGenericMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "MakeGenericMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: IMethodInfo::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (IMethodInfo::*)(::Il2CppObject*, ::Array<::Il2CppObject*>*)>(&IMethodInfo::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IMethodInfo*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.IParameterInfo
#include "NUnit/Framework/Interfaces/IParameterInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.IParameterInfo.get_IsOptional
bool NUnit::Framework::Interfaces::IParameterInfo::get_IsOptional() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IParameterInfo::get_IsOptional");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsOptional", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.IParameterInfo.get_ParameterType
System::Type* NUnit::Framework::Interfaces::IParameterInfo::get_ParameterType() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IParameterInfo::get_ParameterType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ParameterType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IParameterInfo::get_IsOptional
// Il2CppName: get_IsOptional
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IParameterInfo::*)()>(&IParameterInfo::get_IsOptional)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IParameterInfo*), "get_IsOptional", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IParameterInfo::get_ParameterType
// Il2CppName: get_ParameterType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (IParameterInfo::*)()>(&IParameterInfo::get_ParameterType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IParameterInfo*), "get_ParameterType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.IReflectionInfo
#include "NUnit/Framework/Interfaces/IReflectionInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: IReflectionInfo::GetCustomAttributes
// Il2CppName: GetCustomAttributes
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: IReflectionInfo::IsDefined
// Il2CppName: IsDefined
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.ITypeInfo
#include "NUnit/Framework/Interfaces/ITypeInfo.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Reflection.Assembly
#include "System/Reflection/Assembly.hpp"
// Including type: NUnit.Framework.Interfaces.IMethodInfo
#include "NUnit/Framework/Interfaces/IMethodInfo.hpp"
// Including type: System.Reflection.BindingFlags
#include "System/Reflection/BindingFlags.hpp"
// Including type: System.Reflection.ConstructorInfo
#include "System/Reflection/ConstructorInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.get_Type
System::Type* NUnit::Framework::Interfaces::ITypeInfo::get_Type() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::get_Type");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Type", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.get_BaseType
NUnit::Framework::Interfaces::ITypeInfo* NUnit::Framework::Interfaces::ITypeInfo::get_BaseType() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::get_BaseType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BaseType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::ITypeInfo*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.IsType
bool NUnit::Framework::Interfaces::ITypeInfo::IsType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::IsType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, type);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.get_FullName
::Il2CppString* NUnit::Framework::Interfaces::ITypeInfo::get_FullName() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::get_FullName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FullName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.get_Assembly
System::Reflection::Assembly* NUnit::Framework::Interfaces::ITypeInfo::get_Assembly() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::get_Assembly");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Assembly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::Assembly*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.get_Namespace
::Il2CppString* NUnit::Framework::Interfaces::ITypeInfo::get_Namespace() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::get_Namespace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Namespace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.get_IsAbstract
bool NUnit::Framework::Interfaces::ITypeInfo::get_IsAbstract() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::get_IsAbstract");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsAbstract", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.get_IsGenericType
bool NUnit::Framework::Interfaces::ITypeInfo::get_IsGenericType() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::get_IsGenericType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsGenericType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.get_ContainsGenericParameters
bool NUnit::Framework::Interfaces::ITypeInfo::get_ContainsGenericParameters() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::get_ContainsGenericParameters");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ContainsGenericParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.get_IsGenericTypeDefinition
bool NUnit::Framework::Interfaces::ITypeInfo::get_IsGenericTypeDefinition() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::get_IsGenericTypeDefinition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsGenericTypeDefinition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.get_IsSealed
bool NUnit::Framework::Interfaces::ITypeInfo::get_IsSealed() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::get_IsSealed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsSealed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.get_IsStaticClass
bool NUnit::Framework::Interfaces::ITypeInfo::get_IsStaticClass() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::get_IsStaticClass");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsStaticClass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.GetDisplayName
::Il2CppString* NUnit::Framework::Interfaces::ITypeInfo::GetDisplayName() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::GetDisplayName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDisplayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.GetDisplayName
::Il2CppString* NUnit::Framework::Interfaces::ITypeInfo::GetDisplayName(::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::GetDisplayName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDisplayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, args);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.GetGenericTypeDefinition
System::Type* NUnit::Framework::Interfaces::ITypeInfo::GetGenericTypeDefinition() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::GetGenericTypeDefinition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGenericTypeDefinition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.MakeGenericType
NUnit::Framework::Interfaces::ITypeInfo* NUnit::Framework::Interfaces::ITypeInfo::MakeGenericType(::Array<System::Type*>* typeArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::MakeGenericType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MakeGenericType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeArgs)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::ITypeInfo*, false>(this, ___internal__method, typeArgs);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.HasMethodWithAttribute
bool NUnit::Framework::Interfaces::ITypeInfo::HasMethodWithAttribute(System::Type* attrType) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::HasMethodWithAttribute");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasMethodWithAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(attrType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, attrType);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.GetMethods
::Array<NUnit::Framework::Interfaces::IMethodInfo*>* NUnit::Framework::Interfaces::ITypeInfo::GetMethods(System::Reflection::BindingFlags flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::GetMethods");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMethods", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<NUnit::Framework::Interfaces::IMethodInfo*>*, false>(this, ___internal__method, flags);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.GetConstructor
System::Reflection::ConstructorInfo* NUnit::Framework::Interfaces::ITypeInfo::GetConstructor(::Array<System::Type*>* argTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::GetConstructor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConstructor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(argTypes)})));
  return ::il2cpp_utils::RunMethodThrow<System::Reflection::ConstructorInfo*, false>(this, ___internal__method, argTypes);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.HasConstructor
bool NUnit::Framework::Interfaces::ITypeInfo::HasConstructor(::Array<System::Type*>* argTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::HasConstructor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasConstructor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(argTypes)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, argTypes);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITypeInfo.Construct
::Il2CppObject* NUnit::Framework::Interfaces::ITypeInfo::Construct(::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITypeInfo::Construct");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Construct", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(args)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, args);
}
// Writing MetadataGetter for method: ITypeInfo::get_Type
// Il2CppName: get_Type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (ITypeInfo::*)()>(&ITypeInfo::get_Type)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "get_Type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITypeInfo::get_BaseType
// Il2CppName: get_BaseType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::ITypeInfo* (ITypeInfo::*)()>(&ITypeInfo::get_BaseType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "get_BaseType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITypeInfo::IsType
// Il2CppName: IsType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ITypeInfo::*)(System::Type*)>(&ITypeInfo::IsType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "IsType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ITypeInfo::get_FullName
// Il2CppName: get_FullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ITypeInfo::*)()>(&ITypeInfo::get_FullName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "get_FullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITypeInfo::get_Assembly
// Il2CppName: get_Assembly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::Assembly* (ITypeInfo::*)()>(&ITypeInfo::get_Assembly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "get_Assembly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITypeInfo::get_Namespace
// Il2CppName: get_Namespace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ITypeInfo::*)()>(&ITypeInfo::get_Namespace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "get_Namespace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITypeInfo::get_IsAbstract
// Il2CppName: get_IsAbstract
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ITypeInfo::*)()>(&ITypeInfo::get_IsAbstract)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "get_IsAbstract", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITypeInfo::get_IsGenericType
// Il2CppName: get_IsGenericType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ITypeInfo::*)()>(&ITypeInfo::get_IsGenericType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "get_IsGenericType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITypeInfo::get_ContainsGenericParameters
// Il2CppName: get_ContainsGenericParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ITypeInfo::*)()>(&ITypeInfo::get_ContainsGenericParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "get_ContainsGenericParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITypeInfo::get_IsGenericTypeDefinition
// Il2CppName: get_IsGenericTypeDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ITypeInfo::*)()>(&ITypeInfo::get_IsGenericTypeDefinition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "get_IsGenericTypeDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITypeInfo::get_IsSealed
// Il2CppName: get_IsSealed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ITypeInfo::*)()>(&ITypeInfo::get_IsSealed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "get_IsSealed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITypeInfo::get_IsStaticClass
// Il2CppName: get_IsStaticClass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ITypeInfo::*)()>(&ITypeInfo::get_IsStaticClass)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "get_IsStaticClass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITypeInfo::GetDisplayName
// Il2CppName: GetDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ITypeInfo::*)()>(&ITypeInfo::GetDisplayName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "GetDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITypeInfo::GetDisplayName
// Il2CppName: GetDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ITypeInfo::*)(::Array<::Il2CppObject*>*)>(&ITypeInfo::GetDisplayName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "GetDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: ITypeInfo::GetGenericTypeDefinition
// Il2CppName: GetGenericTypeDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (ITypeInfo::*)()>(&ITypeInfo::GetGenericTypeDefinition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "GetGenericTypeDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITypeInfo::MakeGenericType
// Il2CppName: MakeGenericType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::ITypeInfo* (ITypeInfo::*)(::Array<System::Type*>*)>(&ITypeInfo::MakeGenericType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "MakeGenericType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: ITypeInfo::HasMethodWithAttribute
// Il2CppName: HasMethodWithAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ITypeInfo::*)(System::Type*)>(&ITypeInfo::HasMethodWithAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "HasMethodWithAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ITypeInfo::GetMethods
// Il2CppName: GetMethods
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<NUnit::Framework::Interfaces::IMethodInfo*>* (ITypeInfo::*)(System::Reflection::BindingFlags)>(&ITypeInfo::GetMethods)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "GetMethods", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Reflection::BindingFlags>()});
  }
};
// Writing MetadataGetter for method: ITypeInfo::GetConstructor
// Il2CppName: GetConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Reflection::ConstructorInfo* (ITypeInfo::*)(::Array<System::Type*>*)>(&ITypeInfo::GetConstructor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "GetConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: ITypeInfo::HasConstructor
// Il2CppName: HasConstructor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ITypeInfo::*)(::Array<System::Type*>*)>(&ITypeInfo::HasConstructor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "HasConstructor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: ITypeInfo::Construct
// Il2CppName: Construct
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ITypeInfo::*)(::Array<::Il2CppObject*>*)>(&ITypeInfo::Construct)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITypeInfo*), "Construct", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.TestOutput
#include "NUnit/Framework/Interfaces/TestOutput.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.TestOutput.get_Text
::Il2CppString* NUnit::Framework::Interfaces::TestOutput::get_Text() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TestOutput::get_Text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.TestOutput.set_Text
void NUnit::Framework::Interfaces::TestOutput::set_Text(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TestOutput::set_Text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.TestOutput.get_Stream
::Il2CppString* NUnit::Framework::Interfaces::TestOutput::get_Stream() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TestOutput::get_Stream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Stream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.TestOutput.set_Stream
void NUnit::Framework::Interfaces::TestOutput::set_Stream(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TestOutput::set_Stream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Stream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.TestOutput.set_TestName
void NUnit::Framework::Interfaces::TestOutput::set_TestName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TestOutput::set_TestName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_TestName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.TestOutput.ToString
::Il2CppString* NUnit::Framework::Interfaces::TestOutput::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TestOutput::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TestOutput::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestOutput::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&TestOutput::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestOutput*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestOutput::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&TestOutput::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestOutput*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TestOutput::get_Text
// Il2CppName: get_Text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TestOutput::*)()>(&TestOutput::get_Text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestOutput*), "get_Text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestOutput::set_Text
// Il2CppName: set_Text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestOutput::*)(::Il2CppString*)>(&TestOutput::set_Text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestOutput*), "set_Text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TestOutput::get_Stream
// Il2CppName: get_Stream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TestOutput::*)()>(&TestOutput::get_Stream)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestOutput*), "get_Stream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TestOutput::set_Stream
// Il2CppName: set_Stream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestOutput::*)(::Il2CppString*)>(&TestOutput::set_Stream)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestOutput*), "set_Stream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TestOutput::set_TestName
// Il2CppName: set_TestName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestOutput::*)(::Il2CppString*)>(&TestOutput::set_TestName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestOutput*), "set_TestName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TestOutput::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TestOutput::*)()>(&TestOutput::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestOutput*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.ICombiningStrategy
#include "NUnit/Framework/Interfaces/ICombiningStrategy.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: NUnit.Framework.Interfaces.ITestCaseData
#include "NUnit/Framework/Interfaces/ITestCaseData.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.ICombiningStrategy.GetTestCases
System::Collections::Generic::IEnumerable_1<NUnit::Framework::Interfaces::ITestCaseData*>* NUnit::Framework::Interfaces::ICombiningStrategy::GetTestCases(::Array<System::Collections::IEnumerable*>* sources) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ICombiningStrategy::GetTestCases");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTestCases", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sources)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<NUnit::Framework::Interfaces::ITestCaseData*>*, false>(this, ___internal__method, sources);
}
// Writing MetadataGetter for method: ICombiningStrategy::GetTestCases
// Il2CppName: GetTestCases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<NUnit::Framework::Interfaces::ITestCaseData*>* (ICombiningStrategy::*)(::Array<System::Collections::IEnumerable*>*)>(&ICombiningStrategy::GetTestCases)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICombiningStrategy*), "GetTestCases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<System::Collections::IEnumerable*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.ISimpleTestBuilder
#include "NUnit/Framework/Interfaces/ISimpleTestBuilder.hpp"
// Including type: NUnit.Framework.Internal.TestMethod
#include "NUnit/Framework/Internal/TestMethod.hpp"
// Including type: NUnit.Framework.Interfaces.IMethodInfo
#include "NUnit/Framework/Interfaces/IMethodInfo.hpp"
// Including type: NUnit.Framework.Internal.Test
#include "NUnit/Framework/Internal/Test.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.ISimpleTestBuilder.BuildFrom
NUnit::Framework::Internal::TestMethod* NUnit::Framework::Interfaces::ISimpleTestBuilder::BuildFrom(NUnit::Framework::Interfaces::IMethodInfo* method, NUnit::Framework::Internal::Test* suite) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ISimpleTestBuilder::BuildFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(suite)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestMethod*, false>(this, ___internal__method, method, suite);
}
// Writing MetadataGetter for method: ISimpleTestBuilder::BuildFrom
// Il2CppName: BuildFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestMethod* (ISimpleTestBuilder::*)(NUnit::Framework::Interfaces::IMethodInfo*, NUnit::Framework::Internal::Test*)>(&ISimpleTestBuilder::BuildFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ISimpleTestBuilder*), "BuildFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::IMethodInfo*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Test*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.ITestBuilder
#include "NUnit/Framework/Interfaces/ITestBuilder.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: NUnit.Framework.Internal.TestMethod
#include "NUnit/Framework/Internal/TestMethod.hpp"
// Including type: NUnit.Framework.Interfaces.IMethodInfo
#include "NUnit/Framework/Interfaces/IMethodInfo.hpp"
// Including type: NUnit.Framework.Internal.Test
#include "NUnit/Framework/Internal/Test.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.ITestBuilder.BuildFrom
System::Collections::Generic::IEnumerable_1<NUnit::Framework::Internal::TestMethod*>* NUnit::Framework::Interfaces::ITestBuilder::BuildFrom(NUnit::Framework::Interfaces::IMethodInfo* method, NUnit::Framework::Internal::Test* suite) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestBuilder::BuildFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(suite)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<NUnit::Framework::Internal::TestMethod*>*, false>(this, ___internal__method, method, suite);
}
// Writing MetadataGetter for method: ITestBuilder::BuildFrom
// Il2CppName: BuildFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<NUnit::Framework::Internal::TestMethod*>* (ITestBuilder::*)(NUnit::Framework::Interfaces::IMethodInfo*, NUnit::Framework::Internal::Test*)>(&ITestBuilder::BuildFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestBuilder*), "BuildFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::IMethodInfo*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Test*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.IParameterDataProvider
#include "NUnit/Framework/Interfaces/IParameterDataProvider.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
// Including type: NUnit.Framework.Interfaces.IParameterInfo
#include "NUnit/Framework/Interfaces/IParameterInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.IParameterDataProvider.GetDataFor
System::Collections::IEnumerable* NUnit::Framework::Interfaces::IParameterDataProvider::GetDataFor(NUnit::Framework::Interfaces::IParameterInfo* parameter) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IParameterDataProvider::GetDataFor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDataFor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parameter)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerable*, false>(this, ___internal__method, parameter);
}
// Writing MetadataGetter for method: IParameterDataProvider::GetDataFor
// Il2CppName: GetDataFor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerable* (IParameterDataProvider::*)(NUnit::Framework::Interfaces::IParameterInfo*)>(&IParameterDataProvider::GetDataFor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IParameterDataProvider*), "GetDataFor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::IParameterInfo*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.IParameterDataSource
#include "NUnit/Framework/Interfaces/IParameterDataSource.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
// Including type: NUnit.Framework.Interfaces.IParameterInfo
#include "NUnit/Framework/Interfaces/IParameterInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.IParameterDataSource.GetData
System::Collections::IEnumerable* NUnit::Framework::Interfaces::IParameterDataSource::GetData(NUnit::Framework::Interfaces::IParameterInfo* parameter) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IParameterDataSource::GetData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parameter)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerable*, false>(this, ___internal__method, parameter);
}
// Writing MetadataGetter for method: IParameterDataSource::GetData
// Il2CppName: GetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerable* (IParameterDataSource::*)(NUnit::Framework::Interfaces::IParameterInfo*)>(&IParameterDataSource::GetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IParameterDataSource*), "GetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::IParameterInfo*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.IPropertyBag
#include "NUnit/Framework/Interfaces/IPropertyBag.hpp"
// Including type: System.Collections.IList
#include "System/Collections/IList.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.IPropertyBag.Add
void NUnit::Framework::Interfaces::IPropertyBag::Add(::Il2CppString* key, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IPropertyBag::Add");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, key, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.IPropertyBag.Set
void NUnit::Framework::Interfaces::IPropertyBag::Set(::Il2CppString* key, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IPropertyBag::Set");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, key, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.IPropertyBag.Get
::Il2CppObject* NUnit::Framework::Interfaces::IPropertyBag::Get(::Il2CppString* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IPropertyBag::Get");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, key);
}
// Autogenerated method: NUnit.Framework.Interfaces.IPropertyBag.ContainsKey
bool NUnit::Framework::Interfaces::IPropertyBag::ContainsKey(::Il2CppString* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IPropertyBag::ContainsKey");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContainsKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, key);
}
// Autogenerated method: NUnit.Framework.Interfaces.IPropertyBag.get_Item
System::Collections::IList* NUnit::Framework::Interfaces::IPropertyBag::get_Item(::Il2CppString* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IPropertyBag::get_Item");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IList*, false>(this, ___internal__method, key);
}
// Autogenerated method: NUnit.Framework.Interfaces.IPropertyBag.get_Keys
System::Collections::Generic::ICollection_1<::Il2CppString*>* NUnit::Framework::Interfaces::IPropertyBag::get_Keys() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IPropertyBag::get_Keys");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Keys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::ICollection_1<::Il2CppString*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IPropertyBag::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPropertyBag::*)(::Il2CppString*, ::Il2CppObject*)>(&IPropertyBag::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPropertyBag*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IPropertyBag::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPropertyBag::*)(::Il2CppString*, ::Il2CppObject*)>(&IPropertyBag::Set)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPropertyBag*), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IPropertyBag::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (IPropertyBag::*)(::Il2CppString*)>(&IPropertyBag::Get)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPropertyBag*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IPropertyBag::ContainsKey
// Il2CppName: ContainsKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IPropertyBag::*)(::Il2CppString*)>(&IPropertyBag::ContainsKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPropertyBag*), "ContainsKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IPropertyBag::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IList* (IPropertyBag::*)(::Il2CppString*)>(&IPropertyBag::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPropertyBag*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IPropertyBag::get_Keys
// Il2CppName: get_Keys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::ICollection_1<::Il2CppString*>* (IPropertyBag::*)()>(&IPropertyBag::get_Keys)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPropertyBag*), "get_Keys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.ITest
#include "NUnit/Framework/Interfaces/ITest.hpp"
// Including type: NUnit.Framework.Interfaces.ITypeInfo
#include "NUnit/Framework/Interfaces/ITypeInfo.hpp"
// Including type: NUnit.Framework.Interfaces.IMethodInfo
#include "NUnit/Framework/Interfaces/IMethodInfo.hpp"
// Including type: NUnit.Framework.Interfaces.RunState
#include "NUnit/Framework/Interfaces/RunState.hpp"
// Including type: NUnit.Framework.Interfaces.IPropertyBag
#include "NUnit/Framework/Interfaces/IPropertyBag.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.ITest.get_Id
::Il2CppString* NUnit::Framework::Interfaces::ITest::get_Id() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITest::get_Id");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Id", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITest.get_Name
::Il2CppString* NUnit::Framework::Interfaces::ITest::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITest::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITest.get_FullName
::Il2CppString* NUnit::Framework::Interfaces::ITest::get_FullName() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITest::get_FullName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FullName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITest.get_TypeInfo
NUnit::Framework::Interfaces::ITypeInfo* NUnit::Framework::Interfaces::ITest::get_TypeInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITest::get_TypeInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::ITypeInfo*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITest.get_Method
NUnit::Framework::Interfaces::IMethodInfo* NUnit::Framework::Interfaces::ITest::get_Method() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITest::get_Method");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Method", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::IMethodInfo*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITest.get_RunState
NUnit::Framework::Interfaces::RunState NUnit::Framework::Interfaces::ITest::get_RunState() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITest::get_RunState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RunState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::RunState, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITest.get_TestCaseCount
int NUnit::Framework::Interfaces::ITest::get_TestCaseCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITest::get_TestCaseCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TestCaseCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITest.get_Properties
NUnit::Framework::Interfaces::IPropertyBag* NUnit::Framework::Interfaces::ITest::get_Properties() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITest::get_Properties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Properties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::IPropertyBag*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITest.get_Parent
NUnit::Framework::Interfaces::ITest* NUnit::Framework::Interfaces::ITest::get_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITest::get_Parent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Parent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::ITest*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITest.get_IsSuite
bool NUnit::Framework::Interfaces::ITest::get_IsSuite() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITest::get_IsSuite");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsSuite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITest.get_HasChildren
bool NUnit::Framework::Interfaces::ITest::get_HasChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITest::get_HasChildren");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HasChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITest.get_Tests
System::Collections::Generic::IList_1<NUnit::Framework::Interfaces::ITest*>* NUnit::Framework::Interfaces::ITest::get_Tests() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITest::get_Tests");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Tests", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IList_1<NUnit::Framework::Interfaces::ITest*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ITest::get_Id
// Il2CppName: get_Id
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ITest::*)()>(&ITest::get_Id)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITest*), "get_Id", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITest::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ITest::*)()>(&ITest::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITest*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITest::get_FullName
// Il2CppName: get_FullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ITest::*)()>(&ITest::get_FullName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITest*), "get_FullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITest::get_TypeInfo
// Il2CppName: get_TypeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::ITypeInfo* (ITest::*)()>(&ITest::get_TypeInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITest*), "get_TypeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITest::get_Method
// Il2CppName: get_Method
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::IMethodInfo* (ITest::*)()>(&ITest::get_Method)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITest*), "get_Method", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITest::get_RunState
// Il2CppName: get_RunState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::RunState (ITest::*)()>(&ITest::get_RunState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITest*), "get_RunState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITest::get_TestCaseCount
// Il2CppName: get_TestCaseCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ITest::*)()>(&ITest::get_TestCaseCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITest*), "get_TestCaseCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITest::get_Properties
// Il2CppName: get_Properties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::IPropertyBag* (ITest::*)()>(&ITest::get_Properties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITest*), "get_Properties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITest::get_Parent
// Il2CppName: get_Parent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::ITest* (ITest::*)()>(&ITest::get_Parent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITest*), "get_Parent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITest::get_IsSuite
// Il2CppName: get_IsSuite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ITest::*)()>(&ITest::get_IsSuite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITest*), "get_IsSuite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITest::get_HasChildren
// Il2CppName: get_HasChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ITest::*)()>(&ITest::get_HasChildren)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITest*), "get_HasChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITest::get_Tests
// Il2CppName: get_Tests
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IList_1<NUnit::Framework::Interfaces::ITest*>* (ITest::*)()>(&ITest::get_Tests)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITest*), "get_Tests", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.ITestData
#include "NUnit/Framework/Interfaces/ITestData.hpp"
// Including type: NUnit.Framework.Interfaces.RunState
#include "NUnit/Framework/Interfaces/RunState.hpp"
// Including type: NUnit.Framework.Interfaces.IPropertyBag
#include "NUnit/Framework/Interfaces/IPropertyBag.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.ITestData.get_RunState
NUnit::Framework::Interfaces::RunState NUnit::Framework::Interfaces::ITestData::get_RunState() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestData::get_RunState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_RunState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::RunState, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestData.get_Arguments
::Array<::Il2CppObject*>* NUnit::Framework::Interfaces::ITestData::get_Arguments() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestData::get_Arguments");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Arguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestData.get_Properties
NUnit::Framework::Interfaces::IPropertyBag* NUnit::Framework::Interfaces::ITestData::get_Properties() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestData::get_Properties");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Properties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::IPropertyBag*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ITestData::get_RunState
// Il2CppName: get_RunState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::RunState (ITestData::*)()>(&ITestData::get_RunState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestData*), "get_RunState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestData::get_Arguments
// Il2CppName: get_Arguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (ITestData::*)()>(&ITestData::get_Arguments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestData*), "get_Arguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestData::get_Properties
// Il2CppName: get_Properties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::IPropertyBag* (ITestData::*)()>(&ITestData::get_Properties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestData*), "get_Properties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.ITestFixtureData
#include "NUnit/Framework/Interfaces/ITestFixtureData.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.ITestFixtureData.get_TypeArgs
::Array<System::Type*>* NUnit::Framework::Interfaces::ITestFixtureData::get_TypeArgs() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestFixtureData::get_TypeArgs");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_TypeArgs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ITestFixtureData::get_TypeArgs
// Il2CppName: get_TypeArgs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Type*>* (ITestFixtureData::*)()>(&ITestFixtureData::get_TypeArgs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestFixtureData*), "get_TypeArgs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.ITestFilter
#include "NUnit/Framework/Interfaces/ITestFilter.hpp"
// Including type: NUnit.Framework.Interfaces.ITest
#include "NUnit/Framework/Interfaces/ITest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.ITestFilter.Pass
bool NUnit::Framework::Interfaces::ITestFilter::Pass(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestFilter::Pass");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestFilter.IsExplicitMatch
bool NUnit::Framework::Interfaces::ITestFilter::IsExplicitMatch(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestFilter::IsExplicitMatch");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsExplicitMatch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, test);
}
// Writing MetadataGetter for method: ITestFilter::Pass
// Il2CppName: Pass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ITestFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&ITestFilter::Pass)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestFilter*), "Pass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: ITestFilter::IsExplicitMatch
// Il2CppName: IsExplicitMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ITestFilter::*)(NUnit::Framework::Interfaces::ITest*)>(&ITestFilter::IsExplicitMatch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestFilter*), "IsExplicitMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.ITestListener
#include "NUnit/Framework/Interfaces/ITestListener.hpp"
// Including type: NUnit.Framework.Interfaces.ITest
#include "NUnit/Framework/Interfaces/ITest.hpp"
// Including type: NUnit.Framework.Interfaces.ITestResult
#include "NUnit/Framework/Interfaces/ITestResult.hpp"
// Including type: NUnit.Framework.Interfaces.TestOutput
#include "NUnit/Framework/Interfaces/TestOutput.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.ITestListener.TestStarted
void NUnit::Framework::Interfaces::ITestListener::TestStarted(NUnit::Framework::Interfaces::ITest* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestListener::TestStarted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TestStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, test);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestListener.TestFinished
void NUnit::Framework::Interfaces::ITestListener::TestFinished(NUnit::Framework::Interfaces::ITestResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestListener::TestFinished");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TestFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestListener.TestOutput
void NUnit::Framework::Interfaces::ITestListener::TestOutput(NUnit::Framework::Interfaces::TestOutput* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestListener::TestOutput");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TestOutput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(output)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, output);
}
// Writing MetadataGetter for method: ITestListener::TestStarted
// Il2CppName: TestStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ITestListener::*)(NUnit::Framework::Interfaces::ITest*)>(&ITestListener::TestStarted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestListener*), "TestStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITest*>()});
  }
};
// Writing MetadataGetter for method: ITestListener::TestFinished
// Il2CppName: TestFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ITestListener::*)(NUnit::Framework::Interfaces::ITestResult*)>(&ITestListener::TestFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestListener*), "TestFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITestResult*>()});
  }
};
// Writing MetadataGetter for method: ITestListener::TestOutput
// Il2CppName: TestOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ITestListener::*)(NUnit::Framework::Interfaces::TestOutput*)>(&ITestListener::TestOutput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestListener*), "TestOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TestOutput*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.ITestResult
#include "NUnit/Framework/Interfaces/ITestResult.hpp"
// Including type: NUnit.Framework.Interfaces.ResultState
#include "NUnit/Framework/Interfaces/ResultState.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: NUnit.Framework.Interfaces.ITest
#include "NUnit/Framework/Interfaces/ITest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_ResultState
NUnit::Framework::Interfaces::ResultState* NUnit::Framework::Interfaces::ITestResult::get_ResultState() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_ResultState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ResultState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::ResultState*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_Name
::Il2CppString* NUnit::Framework::Interfaces::ITestResult::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_Name");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_FullName
::Il2CppString* NUnit::Framework::Interfaces::ITestResult::get_FullName() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_FullName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FullName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_Duration
double NUnit::Framework::Interfaces::ITestResult::get_Duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_Duration");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Duration", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_StartTime
System::DateTime NUnit::Framework::Interfaces::ITestResult::get_StartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_StartTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_StartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_EndTime
System::DateTime NUnit::Framework::Interfaces::ITestResult::get_EndTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_EndTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_Message
::Il2CppString* NUnit::Framework::Interfaces::ITestResult::get_Message() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_Message");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Message", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_StackTrace
::Il2CppString* NUnit::Framework::Interfaces::ITestResult::get_StackTrace() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_StackTrace");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_StackTrace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_AssertCount
int NUnit::Framework::Interfaces::ITestResult::get_AssertCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_AssertCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AssertCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_FailCount
int NUnit::Framework::Interfaces::ITestResult::get_FailCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_FailCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FailCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_PassCount
int NUnit::Framework::Interfaces::ITestResult::get_PassCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_PassCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PassCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_SkipCount
int NUnit::Framework::Interfaces::ITestResult::get_SkipCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_SkipCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SkipCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_InconclusiveCount
int NUnit::Framework::Interfaces::ITestResult::get_InconclusiveCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_InconclusiveCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_InconclusiveCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_HasChildren
bool NUnit::Framework::Interfaces::ITestResult::get_HasChildren() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_HasChildren");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_HasChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_Children
System::Collections::Generic::IEnumerable_1<NUnit::Framework::Interfaces::ITestResult*>* NUnit::Framework::Interfaces::ITestResult::get_Children() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_Children");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Children", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<NUnit::Framework::Interfaces::ITestResult*>*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_Test
NUnit::Framework::Interfaces::ITest* NUnit::Framework::Interfaces::ITestResult::get_Test() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_Test");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Test", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::ITest*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestResult.get_Output
::Il2CppString* NUnit::Framework::Interfaces::ITestResult::get_Output() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestResult::get_Output");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Output", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ITestResult::get_ResultState
// Il2CppName: get_ResultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::ResultState* (ITestResult::*)()>(&ITestResult::get_ResultState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_ResultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ITestResult::*)()>(&ITestResult::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_FullName
// Il2CppName: get_FullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ITestResult::*)()>(&ITestResult::get_FullName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_FullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_Duration
// Il2CppName: get_Duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (ITestResult::*)()>(&ITestResult::get_Duration)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_Duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_StartTime
// Il2CppName: get_StartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (ITestResult::*)()>(&ITestResult::get_StartTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_StartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_EndTime
// Il2CppName: get_EndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (ITestResult::*)()>(&ITestResult::get_EndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_EndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_Message
// Il2CppName: get_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ITestResult::*)()>(&ITestResult::get_Message)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_StackTrace
// Il2CppName: get_StackTrace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ITestResult::*)()>(&ITestResult::get_StackTrace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_StackTrace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_AssertCount
// Il2CppName: get_AssertCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ITestResult::*)()>(&ITestResult::get_AssertCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_AssertCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_FailCount
// Il2CppName: get_FailCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ITestResult::*)()>(&ITestResult::get_FailCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_FailCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_PassCount
// Il2CppName: get_PassCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ITestResult::*)()>(&ITestResult::get_PassCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_PassCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_SkipCount
// Il2CppName: get_SkipCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ITestResult::*)()>(&ITestResult::get_SkipCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_SkipCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_InconclusiveCount
// Il2CppName: get_InconclusiveCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ITestResult::*)()>(&ITestResult::get_InconclusiveCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_InconclusiveCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_HasChildren
// Il2CppName: get_HasChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ITestResult::*)()>(&ITestResult::get_HasChildren)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_HasChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_Children
// Il2CppName: get_Children
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<NUnit::Framework::Interfaces::ITestResult*>* (ITestResult::*)()>(&ITestResult::get_Children)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_Children", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_Test
// Il2CppName: get_Test
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::ITest* (ITestResult::*)()>(&ITestResult::get_Test)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_Test", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITestResult::get_Output
// Il2CppName: get_Output
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ITestResult::*)()>(&ITestResult::get_Output)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestResult*), "get_Output", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.IXmlNodeBuilder
#include "NUnit/Framework/Interfaces/IXmlNodeBuilder.hpp"
// Including type: NUnit.Framework.Interfaces.TNode
#include "NUnit/Framework/Interfaces/TNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.IXmlNodeBuilder.ToXml
NUnit::Framework::Interfaces::TNode* NUnit::Framework::Interfaces::IXmlNodeBuilder::ToXml(bool recursive) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IXmlNodeBuilder::ToXml");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToXml", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(recursive)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::TNode*, false>(this, ___internal__method, recursive);
}
// Autogenerated method: NUnit.Framework.Interfaces.IXmlNodeBuilder.AddToXml
NUnit::Framework::Interfaces::TNode* NUnit::Framework::Interfaces::IXmlNodeBuilder::AddToXml(NUnit::Framework::Interfaces::TNode* parentNode, bool recursive) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IXmlNodeBuilder::AddToXml");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddToXml", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentNode), ::il2cpp_utils::ExtractType(recursive)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::TNode*, false>(this, ___internal__method, parentNode, recursive);
}
// Writing MetadataGetter for method: IXmlNodeBuilder::ToXml
// Il2CppName: ToXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TNode* (IXmlNodeBuilder::*)(bool)>(&IXmlNodeBuilder::ToXml)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IXmlNodeBuilder*), "ToXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IXmlNodeBuilder::AddToXml
// Il2CppName: AddToXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TNode* (IXmlNodeBuilder::*)(NUnit::Framework::Interfaces::TNode*, bool)>(&IXmlNodeBuilder::AddToXml)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IXmlNodeBuilder*), "AddToXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TNode*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.ResultState
#include "NUnit/Framework/Interfaces/ResultState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly NUnit.Framework.Interfaces.ResultState Inconclusive
NUnit::Framework::Interfaces::ResultState* NUnit::Framework::Interfaces::ResultState::_get_Inconclusive() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_get_Inconclusive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::ResultState*>("NUnit.Framework.Interfaces", "ResultState", "Inconclusive"));
}
// Autogenerated static field setter
// Set static field: static public readonly NUnit.Framework.Interfaces.ResultState Inconclusive
void NUnit::Framework::Interfaces::ResultState::_set_Inconclusive(NUnit::Framework::Interfaces::ResultState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_set_Inconclusive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "ResultState", "Inconclusive", value));
}
// Autogenerated static field getter
// Get static field: static public readonly NUnit.Framework.Interfaces.ResultState Skipped
NUnit::Framework::Interfaces::ResultState* NUnit::Framework::Interfaces::ResultState::_get_Skipped() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_get_Skipped");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::ResultState*>("NUnit.Framework.Interfaces", "ResultState", "Skipped"));
}
// Autogenerated static field setter
// Set static field: static public readonly NUnit.Framework.Interfaces.ResultState Skipped
void NUnit::Framework::Interfaces::ResultState::_set_Skipped(NUnit::Framework::Interfaces::ResultState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_set_Skipped");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "ResultState", "Skipped", value));
}
// Autogenerated static field getter
// Get static field: static public readonly NUnit.Framework.Interfaces.ResultState Ignored
NUnit::Framework::Interfaces::ResultState* NUnit::Framework::Interfaces::ResultState::_get_Ignored() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_get_Ignored");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::ResultState*>("NUnit.Framework.Interfaces", "ResultState", "Ignored"));
}
// Autogenerated static field setter
// Set static field: static public readonly NUnit.Framework.Interfaces.ResultState Ignored
void NUnit::Framework::Interfaces::ResultState::_set_Ignored(NUnit::Framework::Interfaces::ResultState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_set_Ignored");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "ResultState", "Ignored", value));
}
// Autogenerated static field getter
// Get static field: static public readonly NUnit.Framework.Interfaces.ResultState Explicit
NUnit::Framework::Interfaces::ResultState* NUnit::Framework::Interfaces::ResultState::_get_Explicit() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_get_Explicit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::ResultState*>("NUnit.Framework.Interfaces", "ResultState", "Explicit"));
}
// Autogenerated static field setter
// Set static field: static public readonly NUnit.Framework.Interfaces.ResultState Explicit
void NUnit::Framework::Interfaces::ResultState::_set_Explicit(NUnit::Framework::Interfaces::ResultState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_set_Explicit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "ResultState", "Explicit", value));
}
// Autogenerated static field getter
// Get static field: static public readonly NUnit.Framework.Interfaces.ResultState Success
NUnit::Framework::Interfaces::ResultState* NUnit::Framework::Interfaces::ResultState::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::ResultState*>("NUnit.Framework.Interfaces", "ResultState", "Success"));
}
// Autogenerated static field setter
// Set static field: static public readonly NUnit.Framework.Interfaces.ResultState Success
void NUnit::Framework::Interfaces::ResultState::_set_Success(NUnit::Framework::Interfaces::ResultState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "ResultState", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public readonly NUnit.Framework.Interfaces.ResultState Failure
NUnit::Framework::Interfaces::ResultState* NUnit::Framework::Interfaces::ResultState::_get_Failure() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_get_Failure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::ResultState*>("NUnit.Framework.Interfaces", "ResultState", "Failure"));
}
// Autogenerated static field setter
// Set static field: static public readonly NUnit.Framework.Interfaces.ResultState Failure
void NUnit::Framework::Interfaces::ResultState::_set_Failure(NUnit::Framework::Interfaces::ResultState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_set_Failure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "ResultState", "Failure", value));
}
// Autogenerated static field getter
// Get static field: static public readonly NUnit.Framework.Interfaces.ResultState Error
NUnit::Framework::Interfaces::ResultState* NUnit::Framework::Interfaces::ResultState::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::ResultState*>("NUnit.Framework.Interfaces", "ResultState", "Error"));
}
// Autogenerated static field setter
// Set static field: static public readonly NUnit.Framework.Interfaces.ResultState Error
void NUnit::Framework::Interfaces::ResultState::_set_Error(NUnit::Framework::Interfaces::ResultState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "ResultState", "Error", value));
}
// Autogenerated static field getter
// Get static field: static public readonly NUnit.Framework.Interfaces.ResultState Cancelled
NUnit::Framework::Interfaces::ResultState* NUnit::Framework::Interfaces::ResultState::_get_Cancelled() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_get_Cancelled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::ResultState*>("NUnit.Framework.Interfaces", "ResultState", "Cancelled"));
}
// Autogenerated static field setter
// Set static field: static public readonly NUnit.Framework.Interfaces.ResultState Cancelled
void NUnit::Framework::Interfaces::ResultState::_set_Cancelled(NUnit::Framework::Interfaces::ResultState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_set_Cancelled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "ResultState", "Cancelled", value));
}
// Autogenerated static field getter
// Get static field: static public readonly NUnit.Framework.Interfaces.ResultState NotRunnable
NUnit::Framework::Interfaces::ResultState* NUnit::Framework::Interfaces::ResultState::_get_NotRunnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_get_NotRunnable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::ResultState*>("NUnit.Framework.Interfaces", "ResultState", "NotRunnable"));
}
// Autogenerated static field setter
// Set static field: static public readonly NUnit.Framework.Interfaces.ResultState NotRunnable
void NUnit::Framework::Interfaces::ResultState::_set_NotRunnable(NUnit::Framework::Interfaces::ResultState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_set_NotRunnable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "ResultState", "NotRunnable", value));
}
// Autogenerated static field getter
// Get static field: static public readonly NUnit.Framework.Interfaces.ResultState ChildFailure
NUnit::Framework::Interfaces::ResultState* NUnit::Framework::Interfaces::ResultState::_get_ChildFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_get_ChildFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::ResultState*>("NUnit.Framework.Interfaces", "ResultState", "ChildFailure"));
}
// Autogenerated static field setter
// Set static field: static public readonly NUnit.Framework.Interfaces.ResultState ChildFailure
void NUnit::Framework::Interfaces::ResultState::_set_ChildFailure(NUnit::Framework::Interfaces::ResultState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_set_ChildFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "ResultState", "ChildFailure", value));
}
// Autogenerated static field getter
// Get static field: static public readonly NUnit.Framework.Interfaces.ResultState SetUpFailure
NUnit::Framework::Interfaces::ResultState* NUnit::Framework::Interfaces::ResultState::_get_SetUpFailure() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_get_SetUpFailure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::ResultState*>("NUnit.Framework.Interfaces", "ResultState", "SetUpFailure"));
}
// Autogenerated static field setter
// Set static field: static public readonly NUnit.Framework.Interfaces.ResultState SetUpFailure
void NUnit::Framework::Interfaces::ResultState::_set_SetUpFailure(NUnit::Framework::Interfaces::ResultState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_set_SetUpFailure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "ResultState", "SetUpFailure", value));
}
// Autogenerated static field getter
// Get static field: static public readonly NUnit.Framework.Interfaces.ResultState SetUpError
NUnit::Framework::Interfaces::ResultState* NUnit::Framework::Interfaces::ResultState::_get_SetUpError() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_get_SetUpError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::ResultState*>("NUnit.Framework.Interfaces", "ResultState", "SetUpError"));
}
// Autogenerated static field setter
// Set static field: static public readonly NUnit.Framework.Interfaces.ResultState SetUpError
void NUnit::Framework::Interfaces::ResultState::_set_SetUpError(NUnit::Framework::Interfaces::ResultState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_set_SetUpError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "ResultState", "SetUpError", value));
}
// Autogenerated static field getter
// Get static field: static public readonly NUnit.Framework.Interfaces.ResultState TearDownError
NUnit::Framework::Interfaces::ResultState* NUnit::Framework::Interfaces::ResultState::_get_TearDownError() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_get_TearDownError");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::ResultState*>("NUnit.Framework.Interfaces", "ResultState", "TearDownError"));
}
// Autogenerated static field setter
// Set static field: static public readonly NUnit.Framework.Interfaces.ResultState TearDownError
void NUnit::Framework::Interfaces::ResultState::_set_TearDownError(NUnit::Framework::Interfaces::ResultState* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::_set_TearDownError");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "ResultState", "TearDownError", value));
}
// Autogenerated method: NUnit.Framework.Interfaces.ResultState.get_Status
NUnit::Framework::Interfaces::TestStatus NUnit::Framework::Interfaces::ResultState::get_Status() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::get_Status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::TestStatus, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ResultState.set_Status
void NUnit::Framework::Interfaces::ResultState::set_Status(NUnit::Framework::Interfaces::TestStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::set_Status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.ResultState.get_Label
::Il2CppString* NUnit::Framework::Interfaces::ResultState::get_Label() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::get_Label");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Label", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ResultState.set_Label
void NUnit::Framework::Interfaces::ResultState::set_Label(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::set_Label");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Label", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.ResultState.get_Site
NUnit::Framework::Interfaces::FailureSite NUnit::Framework::Interfaces::ResultState::get_Site() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::get_Site");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Site", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::FailureSite, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ResultState.set_Site
void NUnit::Framework::Interfaces::ResultState::set_Site(NUnit::Framework::Interfaces::FailureSite value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::set_Site");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Site", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.ResultState.WithSite
NUnit::Framework::Interfaces::ResultState* NUnit::Framework::Interfaces::ResultState::WithSite(NUnit::Framework::Interfaces::FailureSite site) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::WithSite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WithSite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(site)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::ResultState*, false>(this, ___internal__method, site);
}
// Autogenerated method: NUnit.Framework.Interfaces.ResultState..cctor
void NUnit::Framework::Interfaces::ResultState::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Interfaces", "ResultState", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ResultState.Equals
bool NUnit::Framework::Interfaces::ResultState::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: NUnit.Framework.Interfaces.ResultState.GetHashCode
int NUnit::Framework::Interfaces::ResultState::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.ResultState.ToString
::Il2CppString* NUnit::Framework::Interfaces::ResultState::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ResultState::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ResultState::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultState::*)(NUnit::Framework::Interfaces::TestStatus)>(&ResultState::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TestStatus>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultState::*)(NUnit::Framework::Interfaces::TestStatus)>(&ResultState::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TestStatus>()});
  }
};
// Writing MetadataGetter for method: ResultState::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultState::*)(NUnit::Framework::Interfaces::TestStatus, ::Il2CppString*)>(&ResultState::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TestStatus>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultState::*)(NUnit::Framework::Interfaces::TestStatus, ::Il2CppString*)>(&ResultState::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TestStatus>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ResultState::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultState::*)(NUnit::Framework::Interfaces::TestStatus, ::Il2CppString*, NUnit::Framework::Interfaces::FailureSite)>(&ResultState::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TestStatus>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::FailureSite>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultState::*)(NUnit::Framework::Interfaces::TestStatus, ::Il2CppString*, NUnit::Framework::Interfaces::FailureSite)>(&ResultState::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TestStatus>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::FailureSite>()});
  }
};
// Writing MetadataGetter for method: ResultState::get_Status
// Il2CppName: get_Status
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TestStatus (ResultState::*)()>(&ResultState::get_Status)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), "get_Status", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResultState::set_Status
// Il2CppName: set_Status
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultState::*)(NUnit::Framework::Interfaces::TestStatus)>(&ResultState::set_Status)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), "set_Status", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::TestStatus>()});
  }
};
// Writing MetadataGetter for method: ResultState::get_Label
// Il2CppName: get_Label
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ResultState::*)()>(&ResultState::get_Label)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), "get_Label", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResultState::set_Label
// Il2CppName: set_Label
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultState::*)(::Il2CppString*)>(&ResultState::set_Label)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), "set_Label", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ResultState::get_Site
// Il2CppName: get_Site
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::FailureSite (ResultState::*)()>(&ResultState::get_Site)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), "get_Site", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResultState::set_Site
// Il2CppName: set_Site
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultState::*)(NUnit::Framework::Interfaces::FailureSite)>(&ResultState::set_Site)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), "set_Site", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::FailureSite>()});
  }
};
// Writing MetadataGetter for method: ResultState::WithSite
// Il2CppName: WithSite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::ResultState* (ResultState::*)(NUnit::Framework::Interfaces::FailureSite)>(&ResultState::WithSite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), "WithSite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::FailureSite>()});
  }
};
// Writing MetadataGetter for method: ResultState::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ResultState::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResultState::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ResultState::*)(::Il2CppObject*)>(&ResultState::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ResultState::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ResultState::*)()>(&ResultState::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResultState::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ResultState::*)()>(&ResultState::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultState*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.FailureSite
#include "NUnit/Framework/Interfaces/FailureSite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Interfaces.FailureSite Test
NUnit::Framework::Interfaces::FailureSite NUnit::Framework::Interfaces::FailureSite::_get_Test() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::FailureSite::_get_Test");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::FailureSite>("NUnit.Framework.Interfaces", "FailureSite", "Test"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Interfaces.FailureSite Test
void NUnit::Framework::Interfaces::FailureSite::_set_Test(NUnit::Framework::Interfaces::FailureSite value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::FailureSite::_set_Test");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "FailureSite", "Test", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Interfaces.FailureSite SetUp
NUnit::Framework::Interfaces::FailureSite NUnit::Framework::Interfaces::FailureSite::_get_SetUp() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::FailureSite::_get_SetUp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::FailureSite>("NUnit.Framework.Interfaces", "FailureSite", "SetUp"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Interfaces.FailureSite SetUp
void NUnit::Framework::Interfaces::FailureSite::_set_SetUp(NUnit::Framework::Interfaces::FailureSite value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::FailureSite::_set_SetUp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "FailureSite", "SetUp", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Interfaces.FailureSite TearDown
NUnit::Framework::Interfaces::FailureSite NUnit::Framework::Interfaces::FailureSite::_get_TearDown() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::FailureSite::_get_TearDown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::FailureSite>("NUnit.Framework.Interfaces", "FailureSite", "TearDown"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Interfaces.FailureSite TearDown
void NUnit::Framework::Interfaces::FailureSite::_set_TearDown(NUnit::Framework::Interfaces::FailureSite value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::FailureSite::_set_TearDown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "FailureSite", "TearDown", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Interfaces.FailureSite Parent
NUnit::Framework::Interfaces::FailureSite NUnit::Framework::Interfaces::FailureSite::_get_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::FailureSite::_get_Parent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::FailureSite>("NUnit.Framework.Interfaces", "FailureSite", "Parent"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Interfaces.FailureSite Parent
void NUnit::Framework::Interfaces::FailureSite::_set_Parent(NUnit::Framework::Interfaces::FailureSite value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::FailureSite::_set_Parent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "FailureSite", "Parent", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Interfaces.FailureSite Child
NUnit::Framework::Interfaces::FailureSite NUnit::Framework::Interfaces::FailureSite::_get_Child() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::FailureSite::_get_Child");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::FailureSite>("NUnit.Framework.Interfaces", "FailureSite", "Child"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Interfaces.FailureSite Child
void NUnit::Framework::Interfaces::FailureSite::_set_Child(NUnit::Framework::Interfaces::FailureSite value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::FailureSite::_set_Child");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "FailureSite", "Child", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.RunState
#include "NUnit/Framework/Interfaces/RunState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Interfaces.RunState NotRunnable
NUnit::Framework::Interfaces::RunState NUnit::Framework::Interfaces::RunState::_get_NotRunnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::RunState::_get_NotRunnable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::RunState>("NUnit.Framework.Interfaces", "RunState", "NotRunnable"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Interfaces.RunState NotRunnable
void NUnit::Framework::Interfaces::RunState::_set_NotRunnable(NUnit::Framework::Interfaces::RunState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::RunState::_set_NotRunnable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "RunState", "NotRunnable", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Interfaces.RunState Runnable
NUnit::Framework::Interfaces::RunState NUnit::Framework::Interfaces::RunState::_get_Runnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::RunState::_get_Runnable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::RunState>("NUnit.Framework.Interfaces", "RunState", "Runnable"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Interfaces.RunState Runnable
void NUnit::Framework::Interfaces::RunState::_set_Runnable(NUnit::Framework::Interfaces::RunState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::RunState::_set_Runnable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "RunState", "Runnable", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Interfaces.RunState Explicit
NUnit::Framework::Interfaces::RunState NUnit::Framework::Interfaces::RunState::_get_Explicit() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::RunState::_get_Explicit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::RunState>("NUnit.Framework.Interfaces", "RunState", "Explicit"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Interfaces.RunState Explicit
void NUnit::Framework::Interfaces::RunState::_set_Explicit(NUnit::Framework::Interfaces::RunState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::RunState::_set_Explicit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "RunState", "Explicit", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Interfaces.RunState Skipped
NUnit::Framework::Interfaces::RunState NUnit::Framework::Interfaces::RunState::_get_Skipped() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::RunState::_get_Skipped");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::RunState>("NUnit.Framework.Interfaces", "RunState", "Skipped"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Interfaces.RunState Skipped
void NUnit::Framework::Interfaces::RunState::_set_Skipped(NUnit::Framework::Interfaces::RunState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::RunState::_set_Skipped");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "RunState", "Skipped", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Interfaces.RunState Ignored
NUnit::Framework::Interfaces::RunState NUnit::Framework::Interfaces::RunState::_get_Ignored() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::RunState::_get_Ignored");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::RunState>("NUnit.Framework.Interfaces", "RunState", "Ignored"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Interfaces.RunState Ignored
void NUnit::Framework::Interfaces::RunState::_set_Ignored(NUnit::Framework::Interfaces::RunState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::RunState::_set_Ignored");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "RunState", "Ignored", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.TestStatus
#include "NUnit/Framework/Interfaces/TestStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Interfaces.TestStatus Inconclusive
NUnit::Framework::Interfaces::TestStatus NUnit::Framework::Interfaces::TestStatus::_get_Inconclusive() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TestStatus::_get_Inconclusive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::TestStatus>("NUnit.Framework.Interfaces", "TestStatus", "Inconclusive"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Interfaces.TestStatus Inconclusive
void NUnit::Framework::Interfaces::TestStatus::_set_Inconclusive(NUnit::Framework::Interfaces::TestStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TestStatus::_set_Inconclusive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "TestStatus", "Inconclusive", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Interfaces.TestStatus Skipped
NUnit::Framework::Interfaces::TestStatus NUnit::Framework::Interfaces::TestStatus::_get_Skipped() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TestStatus::_get_Skipped");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::TestStatus>("NUnit.Framework.Interfaces", "TestStatus", "Skipped"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Interfaces.TestStatus Skipped
void NUnit::Framework::Interfaces::TestStatus::_set_Skipped(NUnit::Framework::Interfaces::TestStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TestStatus::_set_Skipped");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "TestStatus", "Skipped", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Interfaces.TestStatus Passed
NUnit::Framework::Interfaces::TestStatus NUnit::Framework::Interfaces::TestStatus::_get_Passed() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TestStatus::_get_Passed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::TestStatus>("NUnit.Framework.Interfaces", "TestStatus", "Passed"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Interfaces.TestStatus Passed
void NUnit::Framework::Interfaces::TestStatus::_set_Passed(NUnit::Framework::Interfaces::TestStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TestStatus::_set_Passed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "TestStatus", "Passed", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Interfaces.TestStatus Failed
NUnit::Framework::Interfaces::TestStatus NUnit::Framework::Interfaces::TestStatus::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TestStatus::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::TestStatus>("NUnit.Framework.Interfaces", "TestStatus", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Interfaces.TestStatus Failed
void NUnit::Framework::Interfaces::TestStatus::_set_Failed(NUnit::Framework::Interfaces::TestStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TestStatus::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "TestStatus", "Failed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.TNode
#include "NUnit/Framework/Interfaces/TNode.hpp"
// Including type: NUnit.Framework.Interfaces.TNode/<>c
#include "NUnit/Framework/Interfaces/TNode_--c.hpp"
// Including type: NUnit.Framework.Interfaces.AttributeDictionary
#include "NUnit/Framework/Interfaces/AttributeDictionary.hpp"
// Including type: NUnit.Framework.Interfaces.NodeList
#include "NUnit/Framework/Interfaces/NodeList.hpp"
// Including type: System.Text.RegularExpressions.Regex
#include "System/Text/RegularExpressions/Regex.hpp"
// Including type: System.Xml.XmlWriter
#include "System/Xml/XmlWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Text.RegularExpressions.Regex InvalidXmlCharactersRegex
System::Text::RegularExpressions::Regex* NUnit::Framework::Interfaces::TNode::_get_InvalidXmlCharactersRegex() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::_get_InvalidXmlCharactersRegex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Text::RegularExpressions::Regex*>("NUnit.Framework.Interfaces", "TNode", "InvalidXmlCharactersRegex"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Text.RegularExpressions.Regex InvalidXmlCharactersRegex
void NUnit::Framework::Interfaces::TNode::_set_InvalidXmlCharactersRegex(System::Text::RegularExpressions::Regex* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::_set_InvalidXmlCharactersRegex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "TNode", "InvalidXmlCharactersRegex", value));
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.get_Name
::Il2CppString* NUnit::Framework::Interfaces::TNode::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::get_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.set_Name
void NUnit::Framework::Interfaces::TNode::set_Name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::set_Name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.get_Value
::Il2CppString* NUnit::Framework::Interfaces::TNode::get_Value() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::get_Value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.set_Value
void NUnit::Framework::Interfaces::TNode::set_Value(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::set_Value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.get_ValueIsCDATA
bool NUnit::Framework::Interfaces::TNode::get_ValueIsCDATA() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::get_ValueIsCDATA");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ValueIsCDATA", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.set_ValueIsCDATA
void NUnit::Framework::Interfaces::TNode::set_ValueIsCDATA(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::set_ValueIsCDATA");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ValueIsCDATA", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.get_Attributes
NUnit::Framework::Interfaces::AttributeDictionary* NUnit::Framework::Interfaces::TNode::get_Attributes() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::get_Attributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::AttributeDictionary*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.set_Attributes
void NUnit::Framework::Interfaces::TNode::set_Attributes(NUnit::Framework::Interfaces::AttributeDictionary* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::set_Attributes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Attributes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.get_ChildNodes
NUnit::Framework::Interfaces::NodeList* NUnit::Framework::Interfaces::TNode::get_ChildNodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::get_ChildNodes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ChildNodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::NodeList*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.set_ChildNodes
void NUnit::Framework::Interfaces::TNode::set_ChildNodes(NUnit::Framework::Interfaces::NodeList* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::set_ChildNodes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ChildNodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.get_OuterXml
::Il2CppString* NUnit::Framework::Interfaces::TNode::get_OuterXml() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::get_OuterXml");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_OuterXml", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.AddElement
NUnit::Framework::Interfaces::TNode* NUnit::Framework::Interfaces::TNode::AddElement(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::AddElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::TNode*, false>(this, ___internal__method, name);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.AddElement
NUnit::Framework::Interfaces::TNode* NUnit::Framework::Interfaces::TNode::AddElement(::Il2CppString* name, ::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::AddElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::TNode*, false>(this, ___internal__method, name, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.AddElementWithCDATA
NUnit::Framework::Interfaces::TNode* NUnit::Framework::Interfaces::TNode::AddElementWithCDATA(::Il2CppString* name, ::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::AddElementWithCDATA");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddElementWithCDATA", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Interfaces::TNode*, false>(this, ___internal__method, name, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.AddAttribute
void NUnit::Framework::Interfaces::TNode::AddAttribute(::Il2CppString* name, ::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::AddAttribute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddAttribute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, name, value);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.WriteTo
void NUnit::Framework::Interfaces::TNode::WriteTo(System::Xml::XmlWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::WriteTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.EscapeInvalidXmlCharacters
::Il2CppString* NUnit::Framework::Interfaces::TNode::EscapeInvalidXmlCharacters(::Il2CppString* str) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::EscapeInvalidXmlCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Interfaces", "TNode", "EscapeInvalidXmlCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(str)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, str);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.CharToUnicodeSequence
::Il2CppString* NUnit::Framework::Interfaces::TNode::CharToUnicodeSequence(::Il2CppChar symbol) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::CharToUnicodeSequence");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Interfaces", "TNode", "CharToUnicodeSequence", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(symbol)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, symbol);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode.WriteCDataTo
void NUnit::Framework::Interfaces::TNode::WriteCDataTo(System::Xml::XmlWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::WriteCDataTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCDataTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode..cctor
void NUnit::Framework::Interfaces::TNode::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Interfaces", "TNode", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TNode::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::*)(::Il2CppString*)>(&TNode::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::*)(::Il2CppString*)>(&TNode::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TNode::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::*)(::Il2CppString*, ::Il2CppString*)>(&TNode::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::*)(::Il2CppString*, ::Il2CppString*)>(&TNode::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TNode::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::*)(::Il2CppString*, ::Il2CppString*, bool)>(&TNode::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::*)(::Il2CppString*, ::Il2CppString*, bool)>(&TNode::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TNode::get_Name
// Il2CppName: get_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TNode::*)()>(&TNode::get_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "get_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TNode::set_Name
// Il2CppName: set_Name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::*)(::Il2CppString*)>(&TNode::set_Name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "set_Name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TNode::get_Value
// Il2CppName: get_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TNode::*)()>(&TNode::get_Value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "get_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TNode::set_Value
// Il2CppName: set_Value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::*)(::Il2CppString*)>(&TNode::set_Value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "set_Value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TNode::get_ValueIsCDATA
// Il2CppName: get_ValueIsCDATA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TNode::*)()>(&TNode::get_ValueIsCDATA)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "get_ValueIsCDATA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TNode::set_ValueIsCDATA
// Il2CppName: set_ValueIsCDATA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::*)(bool)>(&TNode::set_ValueIsCDATA)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "set_ValueIsCDATA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TNode::get_Attributes
// Il2CppName: get_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::AttributeDictionary* (TNode::*)()>(&TNode::get_Attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "get_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TNode::set_Attributes
// Il2CppName: set_Attributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::*)(NUnit::Framework::Interfaces::AttributeDictionary*)>(&TNode::set_Attributes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "set_Attributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::AttributeDictionary*>()});
  }
};
// Writing MetadataGetter for method: TNode::get_ChildNodes
// Il2CppName: get_ChildNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::NodeList* (TNode::*)()>(&TNode::get_ChildNodes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "get_ChildNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TNode::set_ChildNodes
// Il2CppName: set_ChildNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::*)(NUnit::Framework::Interfaces::NodeList*)>(&TNode::set_ChildNodes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "set_ChildNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::NodeList*>()});
  }
};
// Writing MetadataGetter for method: TNode::get_OuterXml
// Il2CppName: get_OuterXml
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TNode::*)()>(&TNode::get_OuterXml)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "get_OuterXml", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TNode::AddElement
// Il2CppName: AddElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TNode* (TNode::*)(::Il2CppString*)>(&TNode::AddElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "AddElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TNode::AddElement
// Il2CppName: AddElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TNode* (TNode::*)(::Il2CppString*, ::Il2CppString*)>(&TNode::AddElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "AddElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TNode::AddElementWithCDATA
// Il2CppName: AddElementWithCDATA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Interfaces::TNode* (TNode::*)(::Il2CppString*, ::Il2CppString*)>(&TNode::AddElementWithCDATA)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "AddElementWithCDATA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TNode::AddAttribute
// Il2CppName: AddAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::*)(::Il2CppString*, ::Il2CppString*)>(&TNode::AddAttribute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "AddAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TNode::WriteTo
// Il2CppName: WriteTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::*)(System::Xml::XmlWriter*)>(&TNode::WriteTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "WriteTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriter*>()});
  }
};
// Writing MetadataGetter for method: TNode::EscapeInvalidXmlCharacters
// Il2CppName: EscapeInvalidXmlCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&TNode::EscapeInvalidXmlCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "EscapeInvalidXmlCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TNode::CharToUnicodeSequence
// Il2CppName: CharToUnicodeSequence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppChar)>(&TNode::CharToUnicodeSequence)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "CharToUnicodeSequence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TNode::WriteCDataTo
// Il2CppName: WriteCDataTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::*)(System::Xml::XmlWriter*)>(&TNode::WriteCDataTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), "WriteCDataTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Xml::XmlWriter*>()});
  }
};
// Writing MetadataGetter for method: TNode::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TNode::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.TNode/<>c
#include "NUnit/Framework/Interfaces/TNode_--c.hpp"
// Including type: System.Text.RegularExpressions.MatchEvaluator
#include "System/Text/RegularExpressions/MatchEvaluator.hpp"
// Including type: System.Text.RegularExpressions.Match
#include "System/Text/RegularExpressions/Match.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly NUnit.Framework.Interfaces.TNode/<>c <>9
NUnit::Framework::Interfaces::TNode::$$c* NUnit::Framework::Interfaces::TNode::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<NUnit::Framework::Interfaces::TNode::$$c*>("NUnit.Framework.Interfaces", "TNode/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly NUnit.Framework.Interfaces.TNode/<>c <>9
void NUnit::Framework::Interfaces::TNode::$$c::_set_$$9(NUnit::Framework::Interfaces::TNode::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "TNode/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Text.RegularExpressions.MatchEvaluator <>9__38_0
System::Text::RegularExpressions::MatchEvaluator* NUnit::Framework::Interfaces::TNode::$$c::_get_$$9__38_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::$$c::_get_$$9__38_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Text::RegularExpressions::MatchEvaluator*>("NUnit.Framework.Interfaces", "TNode/<>c", "<>9__38_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Text.RegularExpressions.MatchEvaluator <>9__38_0
void NUnit::Framework::Interfaces::TNode::$$c::_set_$$9__38_0(System::Text::RegularExpressions::MatchEvaluator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::$$c::_set_$$9__38_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("NUnit.Framework.Interfaces", "TNode/<>c", "<>9__38_0", value)));
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode/<>c..cctor
void NUnit::Framework::Interfaces::TNode::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Interfaces", "TNode/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NUnit.Framework.Interfaces.TNode/<>c.<EscapeInvalidXmlCharacters>b__38_0
::Il2CppString* NUnit::Framework::Interfaces::TNode::$$c::$EscapeInvalidXmlCharacters$b__38_0(System::Text::RegularExpressions::Match* match) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::TNode::$$c::<EscapeInvalidXmlCharacters>b__38_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<EscapeInvalidXmlCharacters>b__38_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(match)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, match);
}
// Writing MetadataGetter for method: TNode::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TNode::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TNode::$$c::$EscapeInvalidXmlCharacters$b__38_0
// Il2CppName: <EscapeInvalidXmlCharacters>b__38_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TNode::$$c::*)(System::Text::RegularExpressions::Match*)>(&TNode::$$c::$EscapeInvalidXmlCharacters$b__38_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode::$$c*), "<EscapeInvalidXmlCharacters>b__38_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::RegularExpressions::Match*>()});
  }
};
// Writing MetadataGetter for method: TNode::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::$$c::*)()>(&TNode::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TNode::$$c::*)()>(&TNode::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TNode::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.NodeList
#include "NUnit/Framework/Interfaces/NodeList.hpp"
// Including type: NUnit.Framework.Interfaces.TNode
#include "NUnit/Framework/Interfaces/TNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NodeList::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodeList::*)()>(&NodeList::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodeList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NodeList::*)()>(&NodeList::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NodeList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Interfaces.AttributeDictionary
#include "NUnit/Framework/Interfaces/AttributeDictionary.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.AttributeDictionary.get_Item
::Il2CppString* NUnit::Framework::Interfaces::AttributeDictionary::get_Item(::Il2CppString* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::AttributeDictionary::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, key);
}
// Writing MetadataGetter for method: AttributeDictionary::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AttributeDictionary::*)(::Il2CppString*)>(&AttributeDictionary::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AttributeDictionary*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AttributeDictionary::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AttributeDictionary::*)()>(&AttributeDictionary::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AttributeDictionary*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AttributeDictionary::*)()>(&AttributeDictionary::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AttributeDictionary*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.IFixtureBuilder
#include "NUnit/Framework/Interfaces/IFixtureBuilder.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: NUnit.Framework.Internal.TestSuite
#include "NUnit/Framework/Internal/TestSuite.hpp"
// Including type: NUnit.Framework.Interfaces.ITypeInfo
#include "NUnit/Framework/Interfaces/ITypeInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.IFixtureBuilder.BuildFrom
System::Collections::Generic::IEnumerable_1<NUnit::Framework::Internal::TestSuite*>* NUnit::Framework::Interfaces::IFixtureBuilder::BuildFrom(NUnit::Framework::Interfaces::ITypeInfo* typeInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IFixtureBuilder::BuildFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeInfo)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<NUnit::Framework::Internal::TestSuite*>*, false>(this, ___internal__method, typeInfo);
}
// Writing MetadataGetter for method: IFixtureBuilder::BuildFrom
// Il2CppName: BuildFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerable_1<NUnit::Framework::Internal::TestSuite*>* (IFixtureBuilder::*)(NUnit::Framework::Interfaces::ITypeInfo*)>(&IFixtureBuilder::BuildFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IFixtureBuilder*), "BuildFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITypeInfo*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.IApplyToContext
#include "NUnit/Framework/Interfaces/IApplyToContext.hpp"
// Including type: NUnit.Framework.Internal.ITestExecutionContext
#include "NUnit/Framework/Internal/ITestExecutionContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.IApplyToContext.ApplyToContext
void NUnit::Framework::Interfaces::IApplyToContext::ApplyToContext(NUnit::Framework::Internal::ITestExecutionContext* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IApplyToContext::ApplyToContext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyToContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(context)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context);
}
// Writing MetadataGetter for method: IApplyToContext::ApplyToContext
// Il2CppName: ApplyToContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IApplyToContext::*)(NUnit::Framework::Internal::ITestExecutionContext*)>(&IApplyToContext::ApplyToContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IApplyToContext*), "ApplyToContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::ITestExecutionContext*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.IApplyToTest
#include "NUnit/Framework/Interfaces/IApplyToTest.hpp"
// Including type: NUnit.Framework.Internal.Test
#include "NUnit/Framework/Internal/Test.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.IApplyToTest.ApplyToTest
void NUnit::Framework::Interfaces::IApplyToTest::ApplyToTest(NUnit::Framework::Internal::Test* test) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::IApplyToTest::ApplyToTest");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyToTest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(test)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, test);
}
// Writing MetadataGetter for method: IApplyToTest::ApplyToTest
// Il2CppName: ApplyToTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IApplyToTest::*)(NUnit::Framework::Internal::Test*)>(&IApplyToTest::ApplyToTest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IApplyToTest*), "ApplyToTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Test*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.ISuiteBuilder
#include "NUnit/Framework/Interfaces/ISuiteBuilder.hpp"
// Including type: NUnit.Framework.Interfaces.ITypeInfo
#include "NUnit/Framework/Interfaces/ITypeInfo.hpp"
// Including type: NUnit.Framework.Internal.TestSuite
#include "NUnit/Framework/Internal/TestSuite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.ISuiteBuilder.CanBuildFrom
bool NUnit::Framework::Interfaces::ISuiteBuilder::CanBuildFrom(NUnit::Framework::Interfaces::ITypeInfo* typeInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ISuiteBuilder::CanBuildFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanBuildFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeInfo)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, typeInfo);
}
// Autogenerated method: NUnit.Framework.Interfaces.ISuiteBuilder.BuildFrom
NUnit::Framework::Internal::TestSuite* NUnit::Framework::Interfaces::ISuiteBuilder::BuildFrom(NUnit::Framework::Interfaces::ITypeInfo* typeInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ISuiteBuilder::BuildFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(typeInfo)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::TestSuite*, false>(this, ___internal__method, typeInfo);
}
// Writing MetadataGetter for method: ISuiteBuilder::CanBuildFrom
// Il2CppName: CanBuildFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ISuiteBuilder::*)(NUnit::Framework::Interfaces::ITypeInfo*)>(&ISuiteBuilder::CanBuildFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ISuiteBuilder*), "CanBuildFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITypeInfo*>()});
  }
};
// Writing MetadataGetter for method: ISuiteBuilder::BuildFrom
// Il2CppName: BuildFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::TestSuite* (ISuiteBuilder::*)(NUnit::Framework::Interfaces::ITypeInfo*)>(&ISuiteBuilder::BuildFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ISuiteBuilder*), "BuildFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::ITypeInfo*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.ITestCaseBuilder
#include "NUnit/Framework/Interfaces/ITestCaseBuilder.hpp"
// Including type: NUnit.Framework.Interfaces.IMethodInfo
#include "NUnit/Framework/Interfaces/IMethodInfo.hpp"
// Including type: NUnit.Framework.Internal.Test
#include "NUnit/Framework/Internal/Test.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.ITestCaseBuilder.CanBuildFrom
bool NUnit::Framework::Interfaces::ITestCaseBuilder::CanBuildFrom(NUnit::Framework::Interfaces::IMethodInfo* method, NUnit::Framework::Internal::Test* suite) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestCaseBuilder::CanBuildFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanBuildFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(suite)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, method, suite);
}
// Autogenerated method: NUnit.Framework.Interfaces.ITestCaseBuilder.BuildFrom
NUnit::Framework::Internal::Test* NUnit::Framework::Interfaces::ITestCaseBuilder::BuildFrom(NUnit::Framework::Interfaces::IMethodInfo* method, NUnit::Framework::Internal::Test* suite) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ITestCaseBuilder::BuildFrom");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(method), ::il2cpp_utils::ExtractType(suite)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::Test*, false>(this, ___internal__method, method, suite);
}
// Writing MetadataGetter for method: ITestCaseBuilder::CanBuildFrom
// Il2CppName: CanBuildFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ITestCaseBuilder::*)(NUnit::Framework::Interfaces::IMethodInfo*, NUnit::Framework::Internal::Test*)>(&ITestCaseBuilder::CanBuildFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestCaseBuilder*), "CanBuildFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::IMethodInfo*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Test*>()});
  }
};
// Writing MetadataGetter for method: ITestCaseBuilder::BuildFrom
// Il2CppName: BuildFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::Test* (ITestCaseBuilder::*)(NUnit::Framework::Interfaces::IMethodInfo*, NUnit::Framework::Internal::Test*)>(&ITestCaseBuilder::BuildFrom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITestCaseBuilder*), "BuildFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Interfaces::IMethodInfo*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Test*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Interfaces.ICommandWrapper
#include "NUnit/Framework/Interfaces/ICommandWrapper.hpp"
// Including type: NUnit.Framework.Internal.Commands.TestCommand
#include "NUnit/Framework/Internal/Commands/TestCommand.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Interfaces.ICommandWrapper.Wrap
NUnit::Framework::Internal::Commands::TestCommand* NUnit::Framework::Interfaces::ICommandWrapper::Wrap(NUnit::Framework::Internal::Commands::TestCommand* command) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Interfaces::ICommandWrapper::Wrap");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Wrap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(command)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Internal::Commands::TestCommand*, false>(this, ___internal__method, command);
}
// Writing MetadataGetter for method: ICommandWrapper::Wrap
// Il2CppName: Wrap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Internal::Commands::TestCommand* (ICommandWrapper::*)(NUnit::Framework::Internal::Commands::TestCommand*)>(&ICommandWrapper::Wrap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ICommandWrapper*), "Wrap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Internal::Commands::TestCommand*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.EqualConstraintResult
#include "NUnit/Framework/Constraints/EqualConstraintResult.hpp"
// Including type: NUnit.Framework.Constraints.Tolerance
#include "NUnit/Framework/Constraints/Tolerance.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: NUnit.Framework.Constraints.EqualConstraint
#include "NUnit/Framework/Constraints/EqualConstraint.hpp"
// Including type: NUnit.Framework.Constraints.MessageWriter
#include "NUnit/Framework/Constraints/MessageWriter.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
// Including type: NUnit.Framework.Constraints.NUnitEqualityComparer/FailurePoint
#include "NUnit/Framework/Constraints/NUnitEqualityComparer_FailurePoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.String StringsDiffer_1
::Il2CppString* NUnit::Framework::Constraints::EqualConstraintResult::_get_StringsDiffer_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_get_StringsDiffer_1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "EqualConstraintResult", "StringsDiffer_1"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String StringsDiffer_1
void NUnit::Framework::Constraints::EqualConstraintResult::_set_StringsDiffer_1(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_set_StringsDiffer_1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "EqualConstraintResult", "StringsDiffer_1", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String StringsDiffer_2
::Il2CppString* NUnit::Framework::Constraints::EqualConstraintResult::_get_StringsDiffer_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_get_StringsDiffer_2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "EqualConstraintResult", "StringsDiffer_2"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String StringsDiffer_2
void NUnit::Framework::Constraints::EqualConstraintResult::_set_StringsDiffer_2(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_set_StringsDiffer_2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "EqualConstraintResult", "StringsDiffer_2", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String StreamsDiffer_1
::Il2CppString* NUnit::Framework::Constraints::EqualConstraintResult::_get_StreamsDiffer_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_get_StreamsDiffer_1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "EqualConstraintResult", "StreamsDiffer_1"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String StreamsDiffer_1
void NUnit::Framework::Constraints::EqualConstraintResult::_set_StreamsDiffer_1(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_set_StreamsDiffer_1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "EqualConstraintResult", "StreamsDiffer_1", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String StreamsDiffer_2
::Il2CppString* NUnit::Framework::Constraints::EqualConstraintResult::_get_StreamsDiffer_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_get_StreamsDiffer_2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "EqualConstraintResult", "StreamsDiffer_2"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String StreamsDiffer_2
void NUnit::Framework::Constraints::EqualConstraintResult::_set_StreamsDiffer_2(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_set_StreamsDiffer_2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "EqualConstraintResult", "StreamsDiffer_2", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String CollectionType_1
::Il2CppString* NUnit::Framework::Constraints::EqualConstraintResult::_get_CollectionType_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_get_CollectionType_1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "EqualConstraintResult", "CollectionType_1"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String CollectionType_1
void NUnit::Framework::Constraints::EqualConstraintResult::_set_CollectionType_1(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_set_CollectionType_1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "EqualConstraintResult", "CollectionType_1", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String CollectionType_2
::Il2CppString* NUnit::Framework::Constraints::EqualConstraintResult::_get_CollectionType_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_get_CollectionType_2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "EqualConstraintResult", "CollectionType_2"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String CollectionType_2
void NUnit::Framework::Constraints::EqualConstraintResult::_set_CollectionType_2(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_set_CollectionType_2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "EqualConstraintResult", "CollectionType_2", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String ValuesDiffer_1
::Il2CppString* NUnit::Framework::Constraints::EqualConstraintResult::_get_ValuesDiffer_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_get_ValuesDiffer_1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "EqualConstraintResult", "ValuesDiffer_1"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String ValuesDiffer_1
void NUnit::Framework::Constraints::EqualConstraintResult::_set_ValuesDiffer_1(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_set_ValuesDiffer_1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "EqualConstraintResult", "ValuesDiffer_1", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String ValuesDiffer_2
::Il2CppString* NUnit::Framework::Constraints::EqualConstraintResult::_get_ValuesDiffer_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_get_ValuesDiffer_2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "EqualConstraintResult", "ValuesDiffer_2"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String ValuesDiffer_2
void NUnit::Framework::Constraints::EqualConstraintResult::_set_ValuesDiffer_2(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::_set_ValuesDiffer_2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "EqualConstraintResult", "ValuesDiffer_2", value));
}
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraintResult.DisplayDifferences
void NUnit::Framework::Constraints::EqualConstraintResult::DisplayDifferences(NUnit::Framework::Constraints::MessageWriter* writer, ::Il2CppObject* expected, ::Il2CppObject* actual, int depth) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::DisplayDifferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisplayDifferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(actual), ::il2cpp_utils::ExtractType(depth)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, expected, actual, depth);
}
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraintResult.DisplayStringDifferences
void NUnit::Framework::Constraints::EqualConstraintResult::DisplayStringDifferences(NUnit::Framework::Constraints::MessageWriter* writer, ::Il2CppString* expected, ::Il2CppString* actual) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::DisplayStringDifferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisplayStringDifferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(actual)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, expected, actual);
}
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraintResult.DisplayStreamDifferences
void NUnit::Framework::Constraints::EqualConstraintResult::DisplayStreamDifferences(NUnit::Framework::Constraints::MessageWriter* writer, System::IO::Stream* expected, System::IO::Stream* actual, int depth) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::DisplayStreamDifferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisplayStreamDifferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(actual), ::il2cpp_utils::ExtractType(depth)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, expected, actual, depth);
}
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraintResult.DisplayCollectionDifferences
void NUnit::Framework::Constraints::EqualConstraintResult::DisplayCollectionDifferences(NUnit::Framework::Constraints::MessageWriter* writer, System::Collections::ICollection* expected, System::Collections::ICollection* actual, int depth) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::DisplayCollectionDifferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisplayCollectionDifferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(actual), ::il2cpp_utils::ExtractType(depth)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, expected, actual, depth);
}
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraintResult.DisplayTypesAndSizes
void NUnit::Framework::Constraints::EqualConstraintResult::DisplayTypesAndSizes(NUnit::Framework::Constraints::MessageWriter* writer, System::Collections::IEnumerable* expected, System::Collections::IEnumerable* actual, int indent) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::DisplayTypesAndSizes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisplayTypesAndSizes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(actual), ::il2cpp_utils::ExtractType(indent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, expected, actual, indent);
}
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraintResult.DisplayFailurePoint
void NUnit::Framework::Constraints::EqualConstraintResult::DisplayFailurePoint(NUnit::Framework::Constraints::MessageWriter* writer, System::Collections::IEnumerable* expected, System::Collections::IEnumerable* actual, NUnit::Framework::Constraints::NUnitEqualityComparer::FailurePoint* failurePoint, int indent) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::DisplayFailurePoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisplayFailurePoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(actual), ::il2cpp_utils::ExtractType(failurePoint), ::il2cpp_utils::ExtractType(indent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, expected, actual, failurePoint, indent);
}
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraintResult.DisplayEnumerableDifferences
void NUnit::Framework::Constraints::EqualConstraintResult::DisplayEnumerableDifferences(NUnit::Framework::Constraints::MessageWriter* writer, System::Collections::IEnumerable* expected, System::Collections::IEnumerable* actual, int depth) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::DisplayEnumerableDifferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisplayEnumerableDifferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer), ::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(actual), ::il2cpp_utils::ExtractType(depth)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer, expected, actual, depth);
}
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraintResult..cctor
void NUnit::Framework::Constraints::EqualConstraintResult::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "EqualConstraintResult", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraintResult.WriteMessageTo
void NUnit::Framework::Constraints::EqualConstraintResult::WriteMessageTo(NUnit::Framework::Constraints::MessageWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraintResult::WriteMessageTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteMessageTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Writing MetadataGetter for method: EqualConstraintResult::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EqualConstraintResult::*)(NUnit::Framework::Constraints::EqualConstraint*, ::Il2CppObject*, bool)>(&EqualConstraintResult::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraintResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::EqualConstraint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EqualConstraintResult::*)(NUnit::Framework::Constraints::EqualConstraint*, ::Il2CppObject*, bool)>(&EqualConstraintResult::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraintResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::EqualConstraint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: EqualConstraintResult::DisplayDifferences
// Il2CppName: DisplayDifferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EqualConstraintResult::*)(NUnit::Framework::Constraints::MessageWriter*, ::Il2CppObject*, ::Il2CppObject*, int)>(&EqualConstraintResult::DisplayDifferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraintResult*), "DisplayDifferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::MessageWriter*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EqualConstraintResult::DisplayStringDifferences
// Il2CppName: DisplayStringDifferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EqualConstraintResult::*)(NUnit::Framework::Constraints::MessageWriter*, ::Il2CppString*, ::Il2CppString*)>(&EqualConstraintResult::DisplayStringDifferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraintResult*), "DisplayStringDifferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::MessageWriter*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: EqualConstraintResult::DisplayStreamDifferences
// Il2CppName: DisplayStreamDifferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EqualConstraintResult::*)(NUnit::Framework::Constraints::MessageWriter*, System::IO::Stream*, System::IO::Stream*, int)>(&EqualConstraintResult::DisplayStreamDifferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraintResult*), "DisplayStreamDifferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::MessageWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EqualConstraintResult::DisplayCollectionDifferences
// Il2CppName: DisplayCollectionDifferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EqualConstraintResult::*)(NUnit::Framework::Constraints::MessageWriter*, System::Collections::ICollection*, System::Collections::ICollection*, int)>(&EqualConstraintResult::DisplayCollectionDifferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraintResult*), "DisplayCollectionDifferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::MessageWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::ICollection*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::ICollection*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EqualConstraintResult::DisplayTypesAndSizes
// Il2CppName: DisplayTypesAndSizes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EqualConstraintResult::*)(NUnit::Framework::Constraints::MessageWriter*, System::Collections::IEnumerable*, System::Collections::IEnumerable*, int)>(&EqualConstraintResult::DisplayTypesAndSizes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraintResult*), "DisplayTypesAndSizes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::MessageWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerable*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerable*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EqualConstraintResult::DisplayFailurePoint
// Il2CppName: DisplayFailurePoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EqualConstraintResult::*)(NUnit::Framework::Constraints::MessageWriter*, System::Collections::IEnumerable*, System::Collections::IEnumerable*, NUnit::Framework::Constraints::NUnitEqualityComparer::FailurePoint*, int)>(&EqualConstraintResult::DisplayFailurePoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraintResult*), "DisplayFailurePoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::MessageWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerable*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerable*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::NUnitEqualityComparer::FailurePoint*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EqualConstraintResult::DisplayEnumerableDifferences
// Il2CppName: DisplayEnumerableDifferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EqualConstraintResult::*)(NUnit::Framework::Constraints::MessageWriter*, System::Collections::IEnumerable*, System::Collections::IEnumerable*, int)>(&EqualConstraintResult::DisplayEnumerableDifferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraintResult*), "DisplayEnumerableDifferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::MessageWriter*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerable*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerable*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EqualConstraintResult::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&EqualConstraintResult::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraintResult*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EqualConstraintResult::WriteMessageTo
// Il2CppName: WriteMessageTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EqualConstraintResult::*)(NUnit::Framework::Constraints::MessageWriter*)>(&EqualConstraintResult::WriteMessageTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraintResult*), "WriteMessageTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::MessageWriter*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.IConstraint
#include "NUnit/Framework/Constraints/IConstraint.hpp"
// Including type: NUnit.Framework.Constraints.ConstraintBuilder
#include "NUnit/Framework/Constraints/ConstraintBuilder.hpp"
// Including type: NUnit.Framework.Constraints.ConstraintResult
#include "NUnit/Framework/Constraints/ConstraintResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.IConstraint.get_Description
::Il2CppString* NUnit::Framework::Constraints::IConstraint::get_Description() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::IConstraint::get_Description");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Description", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.IConstraint.set_Builder
void NUnit::Framework::Constraints::IConstraint::set_Builder(NUnit::Framework::Constraints::ConstraintBuilder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::IConstraint::set_Builder");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Builder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Constraints.IConstraint.ApplyTo
NUnit::Framework::Constraints::ConstraintResult* NUnit::Framework::Constraints::IConstraint::ApplyTo(::Il2CppObject* actual) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::IConstraint::ApplyTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actual)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::ConstraintResult*, false>(this, ___internal__method, actual);
}
// Writing MetadataGetter for method: IConstraint::get_Description
// Il2CppName: get_Description
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (IConstraint::*)()>(&IConstraint::get_Description)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConstraint*), "get_Description", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IConstraint::set_Builder
// Il2CppName: set_Builder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IConstraint::*)(NUnit::Framework::Constraints::ConstraintBuilder*)>(&IConstraint::set_Builder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConstraint*), "set_Builder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::ConstraintBuilder*>()});
  }
};
// Writing MetadataGetter for method: IConstraint::ApplyTo
// Il2CppName: ApplyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::ConstraintResult* (IConstraint::*)(::Il2CppObject*)>(&IConstraint::ApplyTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IConstraint*), "ApplyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.CollectionTally
#include "NUnit/Framework/Constraints/CollectionTally.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: NUnit.Framework.Constraints.NUnitEqualityComparer
#include "NUnit/Framework/Constraints/NUnitEqualityComparer.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.CollectionTally.get_Count
int NUnit::Framework::Constraints::CollectionTally::get_Count() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::CollectionTally::get_Count");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.CollectionTally.ItemsEqual
bool NUnit::Framework::Constraints::CollectionTally::ItemsEqual(::Il2CppObject* expected, ::Il2CppObject* actual) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::CollectionTally::ItemsEqual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ItemsEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(actual)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, expected, actual);
}
// Autogenerated method: NUnit.Framework.Constraints.CollectionTally.TryRemove
bool NUnit::Framework::Constraints::CollectionTally::TryRemove(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::CollectionTally::TryRemove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryRemove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, o);
}
// Autogenerated method: NUnit.Framework.Constraints.CollectionTally.TryRemove
bool NUnit::Framework::Constraints::CollectionTally::TryRemove(System::Collections::IEnumerable* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::CollectionTally::TryRemove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryRemove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, c);
}
// Writing MetadataGetter for method: CollectionTally::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CollectionTally::*)(NUnit::Framework::Constraints::NUnitEqualityComparer*, System::Collections::IEnumerable*)>(&CollectionTally::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CollectionTally*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::NUnitEqualityComparer*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerable*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CollectionTally::*)(NUnit::Framework::Constraints::NUnitEqualityComparer*, System::Collections::IEnumerable*)>(&CollectionTally::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CollectionTally*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::NUnitEqualityComparer*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerable*>()});
  }
};
// Writing MetadataGetter for method: CollectionTally::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CollectionTally::*)()>(&CollectionTally::get_Count)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CollectionTally*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CollectionTally::ItemsEqual
// Il2CppName: ItemsEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CollectionTally::*)(::Il2CppObject*, ::Il2CppObject*)>(&CollectionTally::ItemsEqual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CollectionTally*), "ItemsEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: CollectionTally::TryRemove
// Il2CppName: TryRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CollectionTally::*)(::Il2CppObject*)>(&CollectionTally::TryRemove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CollectionTally*), "TryRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: CollectionTally::TryRemove
// Il2CppName: TryRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CollectionTally::*)(System::Collections::IEnumerable*)>(&CollectionTally::TryRemove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CollectionTally*), "TryRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerable*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.ComparisonAdapter
#include "NUnit/Framework/Constraints/ComparisonAdapter.hpp"
// Including type: NUnit.Framework.Constraints.ComparisonAdapter/DefaultComparisonAdapter
#include "NUnit/Framework/Constraints/ComparisonAdapter_DefaultComparisonAdapter.hpp"
// Including type: NUnit.Framework.Constraints.ComparisonAdapter/ComparerAdapter
#include "NUnit/Framework/Constraints/ComparisonAdapter_ComparerAdapter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.ComparisonAdapter.get_Default
NUnit::Framework::Constraints::ComparisonAdapter* NUnit::Framework::Constraints::ComparisonAdapter::get_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ComparisonAdapter::get_Default");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "ComparisonAdapter", "get_Default", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::ComparisonAdapter*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.ComparisonAdapter.Compare
int NUnit::Framework::Constraints::ComparisonAdapter::Compare(::Il2CppObject* expected, ::Il2CppObject* actual) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ComparisonAdapter::Compare");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Compare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(actual)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, expected, actual);
}
// Writing MetadataGetter for method: ComparisonAdapter::get_Default
// Il2CppName: get_Default
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::ComparisonAdapter* (*)()>(&ComparisonAdapter::get_Default)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComparisonAdapter*), "get_Default", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ComparisonAdapter::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ComparisonAdapter::*)(::Il2CppObject*, ::Il2CppObject*)>(&ComparisonAdapter::Compare)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComparisonAdapter*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ComparisonAdapter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComparisonAdapter::*)()>(&ComparisonAdapter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComparisonAdapter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComparisonAdapter::*)()>(&ComparisonAdapter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComparisonAdapter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Constraints.ComparisonAdapter/DefaultComparisonAdapter
#include "NUnit/Framework/Constraints/ComparisonAdapter_DefaultComparisonAdapter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ComparisonAdapter::DefaultComparisonAdapter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComparisonAdapter::DefaultComparisonAdapter::*)()>(&ComparisonAdapter::DefaultComparisonAdapter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComparisonAdapter::DefaultComparisonAdapter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComparisonAdapter::DefaultComparisonAdapter::*)()>(&ComparisonAdapter::DefaultComparisonAdapter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComparisonAdapter::DefaultComparisonAdapter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.ComparisonAdapter/ComparerAdapter
#include "NUnit/Framework/Constraints/ComparisonAdapter_ComparerAdapter.hpp"
// Including type: System.Collections.IComparer
#include "System/Collections/IComparer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.ComparisonAdapter/ComparerAdapter.Compare
int NUnit::Framework::Constraints::ComparisonAdapter::ComparerAdapter::Compare(::Il2CppObject* expected, ::Il2CppObject* actual) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ComparisonAdapter::ComparerAdapter::Compare");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Compare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(actual)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, expected, actual);
}
// Writing MetadataGetter for method: ComparisonAdapter::ComparerAdapter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComparisonAdapter::ComparerAdapter::*)(System::Collections::IComparer*)>(&ComparisonAdapter::ComparerAdapter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComparisonAdapter::ComparerAdapter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IComparer*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComparisonAdapter::ComparerAdapter::*)(System::Collections::IComparer*)>(&ComparisonAdapter::ComparerAdapter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComparisonAdapter::ComparerAdapter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IComparer*>()});
  }
};
// Writing MetadataGetter for method: ComparisonAdapter::ComparerAdapter::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ComparisonAdapter::ComparerAdapter::*)(::Il2CppObject*, ::Il2CppObject*)>(&ComparisonAdapter::ComparerAdapter::Compare)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComparisonAdapter::ComparerAdapter*), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.ComparisonConstraint
#include "NUnit/Framework/Constraints/ComparisonConstraint.hpp"
// Including type: NUnit.Framework.Constraints.ComparisonAdapter
#include "NUnit/Framework/Constraints/ComparisonAdapter.hpp"
// Including type: NUnit.Framework.Constraints.ConstraintResult
#include "NUnit/Framework/Constraints/ConstraintResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.ComparisonConstraint.ApplyTo
NUnit::Framework::Constraints::ConstraintResult* NUnit::Framework::Constraints::ComparisonConstraint::ApplyTo(::Il2CppObject* actual) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ComparisonConstraint::ApplyTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actual)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::ConstraintResult*, false>(this, ___internal__method, actual);
}
// Writing MetadataGetter for method: ComparisonConstraint::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComparisonConstraint::*)(::Il2CppObject*, bool, bool, bool, ::Il2CppString*)>(&ComparisonConstraint::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComparisonConstraint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ComparisonConstraint::*)(::Il2CppObject*, bool, bool, bool, ::Il2CppString*)>(&ComparisonConstraint::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComparisonConstraint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ComparisonConstraint::ApplyTo
// Il2CppName: ApplyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::ConstraintResult* (ComparisonConstraint::*)(::Il2CppObject*)>(&ComparisonConstraint::ApplyTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComparisonConstraint*), "ApplyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.Constraint
#include "NUnit/Framework/Constraints/Constraint.hpp"
// Including type: System.Lazy`1
#include "System/Lazy_1.hpp"
// Including type: NUnit.Framework.Constraints.ConstraintBuilder
#include "NUnit/Framework/Constraints/ConstraintBuilder.hpp"
// Including type: NUnit.Framework.Constraints.ConstraintResult
#include "NUnit/Framework/Constraints/ConstraintResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.Constraint.get_DisplayName
::Il2CppString* NUnit::Framework::Constraints::Constraint::get_DisplayName() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::Constraint::get_DisplayName");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DisplayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.Constraint.get_Description
::Il2CppString* NUnit::Framework::Constraints::Constraint::get_Description() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::Constraint::get_Description");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Description", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.Constraint.set_Description
void NUnit::Framework::Constraints::Constraint::set_Description(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::Constraint::set_Description");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Description", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Constraints.Constraint.get_Arguments
::Array<::Il2CppObject*>* NUnit::Framework::Constraints::Constraint::get_Arguments() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::Constraint::get_Arguments");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Arguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<::Il2CppObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.Constraint.set_Arguments
void NUnit::Framework::Constraints::Constraint::set_Arguments(::Array<::Il2CppObject*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::Constraint::set_Arguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Arguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Constraints.Constraint.get_Builder
NUnit::Framework::Constraints::ConstraintBuilder* NUnit::Framework::Constraints::Constraint::get_Builder() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::Constraint::get_Builder");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Builder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::ConstraintBuilder*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.Constraint.set_Builder
void NUnit::Framework::Constraints::Constraint::set_Builder(NUnit::Framework::Constraints::ConstraintBuilder* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::Constraint::set_Builder");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Builder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Constraints.Constraint.ApplyTo
NUnit::Framework::Constraints::ConstraintResult* NUnit::Framework::Constraints::Constraint::ApplyTo(::Il2CppObject* actual) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::Constraint::ApplyTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actual)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::ConstraintResult*, false>(this, ___internal__method, actual);
}
// Autogenerated method: NUnit.Framework.Constraints.Constraint.GetStringRepresentation
::Il2CppString* NUnit::Framework::Constraints::Constraint::GetStringRepresentation() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::Constraint::GetStringRepresentation");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStringRepresentation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.Constraint._displayable
::Il2CppString* NUnit::Framework::Constraints::Constraint::_displayable(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::Constraint::_displayable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "Constraint", "_displayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, o);
}
// Autogenerated method: NUnit.Framework.Constraints.Constraint.NUnit.Framework.Constraints.IResolveConstraint.Resolve
NUnit::Framework::Constraints::IConstraint* NUnit::Framework::Constraints::Constraint::NUnit_Framework_Constraints_IResolveConstraint_Resolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::Constraint::NUnit.Framework.Constraints.IResolveConstraint.Resolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NUnit.Framework.Constraints.IResolveConstraint.Resolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::IConstraint*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.Constraint.<.ctor>b__1_0
::Il2CppString* NUnit::Framework::Constraints::Constraint::$_ctor$b__1_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::Constraint::<.ctor>b__1_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__1_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.Constraint.ToString
::Il2CppString* NUnit::Framework::Constraints::Constraint::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::Constraint::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Constraint::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Constraint::*)(::Array<::Il2CppObject*>*)>(&Constraint::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Constraint::*)(::Array<::Il2CppObject*>*)>(&Constraint::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: Constraint::get_DisplayName
// Il2CppName: get_DisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Constraint::*)()>(&Constraint::get_DisplayName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraint*), "get_DisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Constraint::get_Description
// Il2CppName: get_Description
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Constraint::*)()>(&Constraint::get_Description)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraint*), "get_Description", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Constraint::set_Description
// Il2CppName: set_Description
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Constraint::*)(::Il2CppString*)>(&Constraint::set_Description)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraint*), "set_Description", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Constraint::get_Arguments
// Il2CppName: get_Arguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppObject*>* (Constraint::*)()>(&Constraint::get_Arguments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraint*), "get_Arguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Constraint::set_Arguments
// Il2CppName: set_Arguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Constraint::*)(::Array<::Il2CppObject*>*)>(&Constraint::set_Arguments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraint*), "set_Arguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: Constraint::get_Builder
// Il2CppName: get_Builder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::ConstraintBuilder* (Constraint::*)()>(&Constraint::get_Builder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraint*), "get_Builder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Constraint::set_Builder
// Il2CppName: set_Builder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Constraint::*)(NUnit::Framework::Constraints::ConstraintBuilder*)>(&Constraint::set_Builder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraint*), "set_Builder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::ConstraintBuilder*>()});
  }
};
// Writing MetadataGetter for method: Constraint::ApplyTo
// Il2CppName: ApplyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::ConstraintResult* (Constraint::*)(::Il2CppObject*)>(&Constraint::ApplyTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraint*), "ApplyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Constraint::GetStringRepresentation
// Il2CppName: GetStringRepresentation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Constraint::*)()>(&Constraint::GetStringRepresentation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraint*), "GetStringRepresentation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Constraint::_displayable
// Il2CppName: _displayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppObject*)>(&Constraint::_displayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraint*), "_displayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Constraint::NUnit_Framework_Constraints_IResolveConstraint_Resolve
// Il2CppName: NUnit.Framework.Constraints.IResolveConstraint.Resolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::IConstraint* (Constraint::*)()>(&Constraint::NUnit_Framework_Constraints_IResolveConstraint_Resolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraint*), "NUnit.Framework.Constraints.IResolveConstraint.Resolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Constraint::$_ctor$b__1_0
// Il2CppName: <.ctor>b__1_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Constraint::*)()>(&Constraint::$_ctor$b__1_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraint*), "<.ctor>b__1_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Constraint::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Constraint::*)()>(&Constraint::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraint*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.ConstraintBuilder
#include "NUnit/Framework/Constraints/ConstraintBuilder.hpp"
// Including type: NUnit.Framework.Constraints.ConstraintBuilder/OperatorStack
#include "NUnit/Framework/Constraints/ConstraintBuilder_OperatorStack.hpp"
// Including type: NUnit.Framework.Constraints.ConstraintBuilder/ConstraintStack
#include "NUnit/Framework/Constraints/ConstraintBuilder_ConstraintStack.hpp"
// Including type: NUnit.Framework.Constraints.IConstraint
#include "NUnit/Framework/Constraints/IConstraint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.ConstraintBuilder.Resolve
NUnit::Framework::Constraints::IConstraint* NUnit::Framework::Constraints::ConstraintBuilder::Resolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintBuilder::Resolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::IConstraint*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.ConstraintBuilder.get_IsResolvable
bool NUnit::Framework::Constraints::ConstraintBuilder::get_IsResolvable() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintBuilder::get_IsResolvable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsResolvable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ConstraintBuilder::Resolve
// Il2CppName: Resolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::IConstraint* (ConstraintBuilder::*)()>(&ConstraintBuilder::Resolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintBuilder*), "Resolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConstraintBuilder::get_IsResolvable
// Il2CppName: get_IsResolvable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConstraintBuilder::*)()>(&ConstraintBuilder::get_IsResolvable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintBuilder*), "get_IsResolvable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Constraints.ConstraintBuilder/OperatorStack
#include "NUnit/Framework/Constraints/ConstraintBuilder_OperatorStack.hpp"
// Including type: System.Collections.Generic.Stack`1
#include "System/Collections/Generic/Stack_1.hpp"
// Including type: NUnit.Framework.Constraints.ConstraintOperator
#include "NUnit/Framework/Constraints/ConstraintOperator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.ConstraintBuilder/OperatorStack.get_Empty
bool NUnit::Framework::Constraints::ConstraintBuilder::OperatorStack::get_Empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintBuilder::OperatorStack::get_Empty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Empty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.ConstraintBuilder/OperatorStack.Pop
NUnit::Framework::Constraints::ConstraintOperator* NUnit::Framework::Constraints::ConstraintBuilder::OperatorStack::Pop() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintBuilder::OperatorStack::Pop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::ConstraintOperator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ConstraintBuilder::OperatorStack::get_Empty
// Il2CppName: get_Empty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConstraintBuilder::OperatorStack::*)()>(&ConstraintBuilder::OperatorStack::get_Empty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintBuilder::OperatorStack*), "get_Empty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConstraintBuilder::OperatorStack::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::ConstraintOperator* (ConstraintBuilder::OperatorStack::*)()>(&ConstraintBuilder::OperatorStack::Pop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintBuilder::OperatorStack*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Constraints.ConstraintBuilder/ConstraintStack
#include "NUnit/Framework/Constraints/ConstraintBuilder_ConstraintStack.hpp"
// Including type: System.Collections.Generic.Stack`1
#include "System/Collections/Generic/Stack_1.hpp"
// Including type: NUnit.Framework.Constraints.IConstraint
#include "NUnit/Framework/Constraints/IConstraint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.ConstraintBuilder/ConstraintStack.Pop
NUnit::Framework::Constraints::IConstraint* NUnit::Framework::Constraints::ConstraintBuilder::ConstraintStack::Pop() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintBuilder::ConstraintStack::Pop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::IConstraint*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ConstraintBuilder::ConstraintStack::Pop
// Il2CppName: Pop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::IConstraint* (ConstraintBuilder::ConstraintStack::*)()>(&ConstraintBuilder::ConstraintStack::Pop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintBuilder::ConstraintStack*), "Pop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.EqualConstraint
#include "NUnit/Framework/Constraints/EqualConstraint.hpp"
// Including type: NUnit.Framework.Constraints.Tolerance
#include "NUnit/Framework/Constraints/Tolerance.hpp"
// Including type: NUnit.Framework.Constraints.ConstraintResult
#include "NUnit/Framework/Constraints/ConstraintResult.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: NUnit.Framework.Constraints.NUnitEqualityComparer/FailurePoint
#include "NUnit/Framework/Constraints/NUnitEqualityComparer_FailurePoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraint.get_Tolerance
NUnit::Framework::Constraints::Tolerance* NUnit::Framework::Constraints::EqualConstraint::get_Tolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraint::get_Tolerance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Tolerance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::Tolerance*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraint.get_CaseInsensitive
bool NUnit::Framework::Constraints::EqualConstraint::get_CaseInsensitive() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraint::get_CaseInsensitive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_CaseInsensitive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraint.get_ClipStrings
bool NUnit::Framework::Constraints::EqualConstraint::get_ClipStrings() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraint::get_ClipStrings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ClipStrings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraint.set_ClipStrings
void NUnit::Framework::Constraints::EqualConstraint::set_ClipStrings(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraint::set_ClipStrings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ClipStrings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraint.get_FailurePoints
System::Collections::Generic::IList_1<NUnit::Framework::Constraints::NUnitEqualityComparer::FailurePoint*>* NUnit::Framework::Constraints::EqualConstraint::get_FailurePoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraint::get_FailurePoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_FailurePoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IList_1<NUnit::Framework::Constraints::NUnitEqualityComparer::FailurePoint*>*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraint.ApplyTo
NUnit::Framework::Constraints::ConstraintResult* NUnit::Framework::Constraints::EqualConstraint::ApplyTo(::Il2CppObject* actual) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraint::ApplyTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actual)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::ConstraintResult*, false>(this, ___internal__method, actual);
}
// Autogenerated method: NUnit.Framework.Constraints.EqualConstraint.get_Description
::Il2CppString* NUnit::Framework::Constraints::EqualConstraint::get_Description() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualConstraint::get_Description");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Description", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EqualConstraint::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EqualConstraint::*)(::Il2CppObject*)>(&EqualConstraint::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EqualConstraint::*)(::Il2CppObject*)>(&EqualConstraint::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: EqualConstraint::get_Tolerance
// Il2CppName: get_Tolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::Tolerance* (EqualConstraint::*)()>(&EqualConstraint::get_Tolerance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraint*), "get_Tolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EqualConstraint::get_CaseInsensitive
// Il2CppName: get_CaseInsensitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EqualConstraint::*)()>(&EqualConstraint::get_CaseInsensitive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraint*), "get_CaseInsensitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EqualConstraint::get_ClipStrings
// Il2CppName: get_ClipStrings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EqualConstraint::*)()>(&EqualConstraint::get_ClipStrings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraint*), "get_ClipStrings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EqualConstraint::set_ClipStrings
// Il2CppName: set_ClipStrings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EqualConstraint::*)(bool)>(&EqualConstraint::set_ClipStrings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraint*), "set_ClipStrings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: EqualConstraint::get_FailurePoints
// Il2CppName: get_FailurePoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IList_1<NUnit::Framework::Constraints::NUnitEqualityComparer::FailurePoint*>* (EqualConstraint::*)()>(&EqualConstraint::get_FailurePoints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraint*), "get_FailurePoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EqualConstraint::AdjustArgumentIfNeeded
// Il2CppName: AdjustArgumentIfNeeded
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: EqualConstraint::ApplyTo
// Il2CppName: ApplyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::ConstraintResult* (EqualConstraint::*)(::Il2CppObject*)>(&EqualConstraint::ApplyTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraint*), "ApplyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: EqualConstraint::get_Description
// Il2CppName: get_Description
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (EqualConstraint::*)()>(&EqualConstraint::get_Description)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualConstraint*), "get_Description", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.EqualityAdapter
#include "NUnit/Framework/Constraints/EqualityAdapter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.EqualityAdapter.AreEqual
bool NUnit::Framework::Constraints::EqualityAdapter::AreEqual(::Il2CppObject* x, ::Il2CppObject* y) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualityAdapter::AreEqual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AreEqual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x, y);
}
// Autogenerated method: NUnit.Framework.Constraints.EqualityAdapter.CanCompare
bool NUnit::Framework::Constraints::EqualityAdapter::CanCompare(::Il2CppObject* x, ::Il2CppObject* y) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::EqualityAdapter::CanCompare");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanCompare", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, x, y);
}
// Writing MetadataGetter for method: EqualityAdapter::AreEqual
// Il2CppName: AreEqual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EqualityAdapter::*)(::Il2CppObject*, ::Il2CppObject*)>(&EqualityAdapter::AreEqual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualityAdapter*), "AreEqual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: EqualityAdapter::CanCompare
// Il2CppName: CanCompare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (EqualityAdapter::*)(::Il2CppObject*, ::Il2CppObject*)>(&EqualityAdapter::CanCompare)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EqualityAdapter*), "CanCompare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Constraints.FloatingPointNumerics
#include "NUnit/Framework/Constraints/FloatingPointNumerics.hpp"
// Including type: NUnit.Framework.Constraints.FloatingPointNumerics/FloatIntUnion
#include "NUnit/Framework/Constraints/FloatingPointNumerics_FloatIntUnion.hpp"
// Including type: NUnit.Framework.Constraints.FloatingPointNumerics/DoubleLongUnion
#include "NUnit/Framework/Constraints/FloatingPointNumerics_DoubleLongUnion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.FloatingPointNumerics.AreAlmostEqualUlps
bool NUnit::Framework::Constraints::FloatingPointNumerics::AreAlmostEqualUlps(float left, float right, int maxUlps) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::FloatingPointNumerics::AreAlmostEqualUlps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "FloatingPointNumerics", "AreAlmostEqualUlps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(maxUlps)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, maxUlps);
}
// Autogenerated method: NUnit.Framework.Constraints.FloatingPointNumerics.AreAlmostEqualUlps
bool NUnit::Framework::Constraints::FloatingPointNumerics::AreAlmostEqualUlps(double left, double right, int64_t maxUlps) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::FloatingPointNumerics::AreAlmostEqualUlps");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "FloatingPointNumerics", "AreAlmostEqualUlps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(maxUlps)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, maxUlps);
}
// Writing MetadataGetter for method: FloatingPointNumerics::AreAlmostEqualUlps
// Il2CppName: AreAlmostEqualUlps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, float, int)>(&FloatingPointNumerics::AreAlmostEqualUlps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FloatingPointNumerics*), "AreAlmostEqualUlps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FloatingPointNumerics::AreAlmostEqualUlps
// Il2CppName: AreAlmostEqualUlps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double, double, int64_t)>(&FloatingPointNumerics::AreAlmostEqualUlps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FloatingPointNumerics*), "AreAlmostEqualUlps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.GreaterThanOrEqualConstraint
#include "NUnit/Framework/Constraints/GreaterThanOrEqualConstraint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GreaterThanOrEqualConstraint::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GreaterThanOrEqualConstraint::*)(::Il2CppObject*)>(&GreaterThanOrEqualConstraint::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GreaterThanOrEqualConstraint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GreaterThanOrEqualConstraint::*)(::Il2CppObject*)>(&GreaterThanOrEqualConstraint::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GreaterThanOrEqualConstraint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Constraints.ConstraintStatus
#include "NUnit/Framework/Constraints/ConstraintStatus.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Constraints.ConstraintStatus Unknown
NUnit::Framework::Constraints::ConstraintStatus NUnit::Framework::Constraints::ConstraintStatus::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintStatus::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Constraints::ConstraintStatus>("NUnit.Framework.Constraints", "ConstraintStatus", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Constraints.ConstraintStatus Unknown
void NUnit::Framework::Constraints::ConstraintStatus::_set_Unknown(NUnit::Framework::Constraints::ConstraintStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintStatus::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "ConstraintStatus", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Constraints.ConstraintStatus Success
NUnit::Framework::Constraints::ConstraintStatus NUnit::Framework::Constraints::ConstraintStatus::_get_Success() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintStatus::_get_Success");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Constraints::ConstraintStatus>("NUnit.Framework.Constraints", "ConstraintStatus", "Success"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Constraints.ConstraintStatus Success
void NUnit::Framework::Constraints::ConstraintStatus::_set_Success(NUnit::Framework::Constraints::ConstraintStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintStatus::_set_Success");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "ConstraintStatus", "Success", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Constraints.ConstraintStatus Failure
NUnit::Framework::Constraints::ConstraintStatus NUnit::Framework::Constraints::ConstraintStatus::_get_Failure() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintStatus::_get_Failure");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Constraints::ConstraintStatus>("NUnit.Framework.Constraints", "ConstraintStatus", "Failure"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Constraints.ConstraintStatus Failure
void NUnit::Framework::Constraints::ConstraintStatus::_set_Failure(NUnit::Framework::Constraints::ConstraintStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintStatus::_set_Failure");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "ConstraintStatus", "Failure", value));
}
// Autogenerated static field getter
// Get static field: static public NUnit.Framework.Constraints.ConstraintStatus Error
NUnit::Framework::Constraints::ConstraintStatus NUnit::Framework::Constraints::ConstraintStatus::_get_Error() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintStatus::_get_Error");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<NUnit::Framework::Constraints::ConstraintStatus>("NUnit.Framework.Constraints", "ConstraintStatus", "Error"));
}
// Autogenerated static field setter
// Set static field: static public NUnit.Framework.Constraints.ConstraintStatus Error
void NUnit::Framework::Constraints::ConstraintStatus::_set_Error(NUnit::Framework::Constraints::ConstraintStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintStatus::_set_Error");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "ConstraintStatus", "Error", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.ConstraintResult
#include "NUnit/Framework/Constraints/ConstraintResult.hpp"
// Including type: NUnit.Framework.Constraints.IConstraint
#include "NUnit/Framework/Constraints/IConstraint.hpp"
// Including type: NUnit.Framework.Constraints.MessageWriter
#include "NUnit/Framework/Constraints/MessageWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.ConstraintResult.get_ActualValue
::Il2CppObject* NUnit::Framework::Constraints::ConstraintResult::get_ActualValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintResult::get_ActualValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ActualValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.ConstraintResult.set_ActualValue
void NUnit::Framework::Constraints::ConstraintResult::set_ActualValue(::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintResult::set_ActualValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ActualValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Constraints.ConstraintResult.get_Status
NUnit::Framework::Constraints::ConstraintStatus NUnit::Framework::Constraints::ConstraintResult::get_Status() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintResult::get_Status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::ConstraintStatus, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.ConstraintResult.set_Status
void NUnit::Framework::Constraints::ConstraintResult::set_Status(NUnit::Framework::Constraints::ConstraintStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintResult::set_Status");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Status", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Constraints.ConstraintResult.get_IsSuccess
bool NUnit::Framework::Constraints::ConstraintResult::get_IsSuccess() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintResult::get_IsSuccess");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.ConstraintResult.get_Description
::Il2CppString* NUnit::Framework::Constraints::ConstraintResult::get_Description() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintResult::get_Description");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Description", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.ConstraintResult.WriteMessageTo
void NUnit::Framework::Constraints::ConstraintResult::WriteMessageTo(NUnit::Framework::Constraints::MessageWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintResult::WriteMessageTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteMessageTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: NUnit.Framework.Constraints.ConstraintResult.WriteActualValueTo
void NUnit::Framework::Constraints::ConstraintResult::WriteActualValueTo(NUnit::Framework::Constraints::MessageWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ConstraintResult::WriteActualValueTo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteActualValueTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Writing MetadataGetter for method: ConstraintResult::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConstraintResult::*)(NUnit::Framework::Constraints::IConstraint*, ::Il2CppObject*)>(&ConstraintResult::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::IConstraint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConstraintResult::*)(NUnit::Framework::Constraints::IConstraint*, ::Il2CppObject*)>(&ConstraintResult::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::IConstraint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ConstraintResult::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConstraintResult::*)(NUnit::Framework::Constraints::IConstraint*, ::Il2CppObject*, bool)>(&ConstraintResult::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::IConstraint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConstraintResult::*)(NUnit::Framework::Constraints::IConstraint*, ::Il2CppObject*, bool)>(&ConstraintResult::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintResult*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::IConstraint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ConstraintResult::get_ActualValue
// Il2CppName: get_ActualValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (ConstraintResult::*)()>(&ConstraintResult::get_ActualValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintResult*), "get_ActualValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConstraintResult::set_ActualValue
// Il2CppName: set_ActualValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConstraintResult::*)(::Il2CppObject*)>(&ConstraintResult::set_ActualValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintResult*), "set_ActualValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ConstraintResult::get_Status
// Il2CppName: get_Status
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::ConstraintStatus (ConstraintResult::*)()>(&ConstraintResult::get_Status)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintResult*), "get_Status", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConstraintResult::set_Status
// Il2CppName: set_Status
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConstraintResult::*)(NUnit::Framework::Constraints::ConstraintStatus)>(&ConstraintResult::set_Status)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintResult*), "set_Status", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::ConstraintStatus>()});
  }
};
// Writing MetadataGetter for method: ConstraintResult::get_IsSuccess
// Il2CppName: get_IsSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ConstraintResult::*)()>(&ConstraintResult::get_IsSuccess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintResult*), "get_IsSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConstraintResult::get_Description
// Il2CppName: get_Description
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ConstraintResult::*)()>(&ConstraintResult::get_Description)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintResult*), "get_Description", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConstraintResult::WriteMessageTo
// Il2CppName: WriteMessageTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConstraintResult::*)(NUnit::Framework::Constraints::MessageWriter*)>(&ConstraintResult::WriteMessageTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintResult*), "WriteMessageTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::MessageWriter*>()});
  }
};
// Writing MetadataGetter for method: ConstraintResult::WriteActualValueTo
// Il2CppName: WriteActualValueTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConstraintResult::*)(NUnit::Framework::Constraints::MessageWriter*)>(&ConstraintResult::WriteActualValueTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConstraintResult*), "WriteActualValueTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::MessageWriter*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NUnit.Framework.Constraints.IResolveConstraint
#include "NUnit/Framework/Constraints/IResolveConstraint.hpp"
// Including type: NUnit.Framework.Constraints.IConstraint
#include "NUnit/Framework/Constraints/IConstraint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.IResolveConstraint.Resolve
NUnit::Framework::Constraints::IConstraint* NUnit::Framework::Constraints::IResolveConstraint::Resolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::IResolveConstraint::Resolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::IConstraint*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IResolveConstraint::Resolve
// Il2CppName: Resolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::IConstraint* (IResolveConstraint::*)()>(&IResolveConstraint::Resolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IResolveConstraint*), "Resolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.LessThanOrEqualConstraint
#include "NUnit/Framework/Constraints/LessThanOrEqualConstraint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LessThanOrEqualConstraint::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LessThanOrEqualConstraint::*)(::Il2CppObject*)>(&LessThanOrEqualConstraint::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LessThanOrEqualConstraint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LessThanOrEqualConstraint::*)(::Il2CppObject*)>(&LessThanOrEqualConstraint::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LessThanOrEqualConstraint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.MessageWriter
#include "NUnit/Framework/Constraints/MessageWriter.hpp"
// Including type: NUnit.Framework.Constraints.ConstraintResult
#include "NUnit/Framework/Constraints/ConstraintResult.hpp"
// Including type: NUnit.Framework.Constraints.Tolerance
#include "NUnit/Framework/Constraints/Tolerance.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.MessageWriter.get_MaxLineLength
int NUnit::Framework::Constraints::MessageWriter::get_MaxLineLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MessageWriter::get_MaxLineLength");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_MaxLineLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.MessageWriter.WriteMessageLine
void NUnit::Framework::Constraints::MessageWriter::WriteMessageLine(::Il2CppString* message, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MessageWriter::WriteMessageLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteMessageLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message, args);
}
// Creating initializer_list -> params proxy for: System.Void WriteMessageLine(System.String message, params System.Object[] args)
void NUnit::Framework::Constraints::MessageWriter::WriteMessageLine(::Il2CppString* message, std::initializer_list<::Il2CppObject*> args) {
  NUnit::Framework::Constraints::MessageWriter::WriteMessageLine(message, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: NUnit.Framework.Constraints.MessageWriter.WriteMessageLine
void NUnit::Framework::Constraints::MessageWriter::WriteMessageLine(int level, ::Il2CppString* message, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MessageWriter::WriteMessageLine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteMessageLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(args)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, level, message, args);
}
// Creating initializer_list -> params proxy for: System.Void WriteMessageLine(System.Int32 level, System.String message, params System.Object[] args)
void NUnit::Framework::Constraints::MessageWriter::WriteMessageLine(int level, ::Il2CppString* message, std::initializer_list<::Il2CppObject*> args) {
  NUnit::Framework::Constraints::MessageWriter::WriteMessageLine(level, message, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: NUnit.Framework.Constraints.MessageWriter.DisplayDifferences
void NUnit::Framework::Constraints::MessageWriter::DisplayDifferences(NUnit::Framework::Constraints::ConstraintResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MessageWriter::DisplayDifferences");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisplayDifferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: NUnit.Framework.Constraints.MessageWriter.DisplayDifferences
void NUnit::Framework::Constraints::MessageWriter::DisplayDifferences(::Il2CppObject* expected, ::Il2CppObject* actual) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MessageWriter::DisplayDifferences");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisplayDifferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(actual)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, expected, actual);
}
// Autogenerated method: NUnit.Framework.Constraints.MessageWriter.DisplayDifferences
void NUnit::Framework::Constraints::MessageWriter::DisplayDifferences(::Il2CppObject* expected, ::Il2CppObject* actual, NUnit::Framework::Constraints::Tolerance* tolerance) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MessageWriter::DisplayDifferences");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisplayDifferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(actual), ::il2cpp_utils::ExtractType(tolerance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, expected, actual, tolerance);
}
// Autogenerated method: NUnit.Framework.Constraints.MessageWriter.DisplayStringDifferences
void NUnit::Framework::Constraints::MessageWriter::DisplayStringDifferences(::Il2CppString* expected, ::Il2CppString* actual, int mismatch, bool ignoreCase, bool clipping) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MessageWriter::DisplayStringDifferences");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisplayStringDifferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(actual), ::il2cpp_utils::ExtractType(mismatch), ::il2cpp_utils::ExtractType(ignoreCase), ::il2cpp_utils::ExtractType(clipping)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, expected, actual, mismatch, ignoreCase, clipping);
}
// Autogenerated method: NUnit.Framework.Constraints.MessageWriter.WriteActualValue
void NUnit::Framework::Constraints::MessageWriter::WriteActualValue(::Il2CppObject* actual) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MessageWriter::WriteActualValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteActualValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actual)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, actual);
}
// Autogenerated method: NUnit.Framework.Constraints.MessageWriter.WriteValue
void NUnit::Framework::Constraints::MessageWriter::WriteValue(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MessageWriter::WriteValue");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: NUnit.Framework.Constraints.MessageWriter.WriteCollectionElements
void NUnit::Framework::Constraints::MessageWriter::WriteCollectionElements(System::Collections::IEnumerable* collection, int64_t start, int max) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MessageWriter::WriteCollectionElements");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteCollectionElements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collection), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(max)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, collection, start, max);
}
// Writing MetadataGetter for method: MessageWriter::get_MaxLineLength
// Il2CppName: get_MaxLineLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MessageWriter::*)()>(&MessageWriter::get_MaxLineLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageWriter*), "get_MaxLineLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MessageWriter::WriteMessageLine
// Il2CppName: WriteMessageLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageWriter::*)(::Il2CppString*, ::Array<::Il2CppObject*>*)>(&MessageWriter::WriteMessageLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageWriter*), "WriteMessageLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: MessageWriter::WriteMessageLine
// Il2CppName: WriteMessageLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageWriter::*)(int, ::Il2CppString*, ::Array<::Il2CppObject*>*)>(&MessageWriter::WriteMessageLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageWriter*), "WriteMessageLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppObject*>*>()});
  }
};
// Writing MetadataGetter for method: MessageWriter::DisplayDifferences
// Il2CppName: DisplayDifferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageWriter::*)(NUnit::Framework::Constraints::ConstraintResult*)>(&MessageWriter::DisplayDifferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageWriter*), "DisplayDifferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::ConstraintResult*>()});
  }
};
// Writing MetadataGetter for method: MessageWriter::DisplayDifferences
// Il2CppName: DisplayDifferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageWriter::*)(::Il2CppObject*, ::Il2CppObject*)>(&MessageWriter::DisplayDifferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageWriter*), "DisplayDifferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MessageWriter::DisplayDifferences
// Il2CppName: DisplayDifferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageWriter::*)(::Il2CppObject*, ::Il2CppObject*, NUnit::Framework::Constraints::Tolerance*)>(&MessageWriter::DisplayDifferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageWriter*), "DisplayDifferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::Tolerance*>()});
  }
};
// Writing MetadataGetter for method: MessageWriter::DisplayStringDifferences
// Il2CppName: DisplayStringDifferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageWriter::*)(::Il2CppString*, ::Il2CppString*, int, bool, bool)>(&MessageWriter::DisplayStringDifferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageWriter*), "DisplayStringDifferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MessageWriter::WriteActualValue
// Il2CppName: WriteActualValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageWriter::*)(::Il2CppObject*)>(&MessageWriter::WriteActualValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageWriter*), "WriteActualValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MessageWriter::WriteValue
// Il2CppName: WriteValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageWriter::*)(::Il2CppObject*)>(&MessageWriter::WriteValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageWriter*), "WriteValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MessageWriter::WriteCollectionElements
// Il2CppName: WriteCollectionElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageWriter::*)(System::Collections::IEnumerable*, int64_t, int)>(&MessageWriter::WriteCollectionElements)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageWriter*), "WriteCollectionElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerable*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MessageWriter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageWriter::*)()>(&MessageWriter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MessageWriter::*)()>(&MessageWriter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MessageWriter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.ValueFormatter
#include "NUnit/Framework/Constraints/ValueFormatter.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.ValueFormatter.Invoke
::Il2CppString* NUnit::Framework::Constraints::ValueFormatter::Invoke(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ValueFormatter::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, val);
}
// Autogenerated method: NUnit.Framework.Constraints.ValueFormatter.BeginInvoke
System::IAsyncResult* NUnit::Framework::Constraints::ValueFormatter::BeginInvoke(::Il2CppObject* val, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ValueFormatter::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, val, callback, object);
}
// Autogenerated method: NUnit.Framework.Constraints.ValueFormatter.EndInvoke
::Il2CppString* NUnit::Framework::Constraints::ValueFormatter::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ValueFormatter::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: ValueFormatter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValueFormatter::*)(::Il2CppObject*, System::IntPtr)>(&ValueFormatter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueFormatter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValueFormatter::*)(::Il2CppObject*, System::IntPtr)>(&ValueFormatter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueFormatter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: ValueFormatter::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ValueFormatter::*)(::Il2CppObject*)>(&ValueFormatter::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueFormatter*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ValueFormatter::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (ValueFormatter::*)(::Il2CppObject*, System::AsyncCallback*, ::Il2CppObject*)>(&ValueFormatter::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueFormatter*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ValueFormatter::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ValueFormatter::*)(System::IAsyncResult*)>(&ValueFormatter::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueFormatter*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.ValueFormatterFactory
#include "NUnit/Framework/Constraints/ValueFormatterFactory.hpp"
// Including type: NUnit.Framework.Constraints.ValueFormatter
#include "NUnit/Framework/Constraints/ValueFormatter.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.ValueFormatterFactory.Invoke
NUnit::Framework::Constraints::ValueFormatter* NUnit::Framework::Constraints::ValueFormatterFactory::Invoke(NUnit::Framework::Constraints::ValueFormatter* next) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ValueFormatterFactory::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(next)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::ValueFormatter*, false>(this, ___internal__method, next);
}
// Autogenerated method: NUnit.Framework.Constraints.ValueFormatterFactory.BeginInvoke
System::IAsyncResult* NUnit::Framework::Constraints::ValueFormatterFactory::BeginInvoke(NUnit::Framework::Constraints::ValueFormatter* next, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ValueFormatterFactory::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(next), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, next, callback, object);
}
// Autogenerated method: NUnit.Framework.Constraints.ValueFormatterFactory.EndInvoke
NUnit::Framework::Constraints::ValueFormatter* NUnit::Framework::Constraints::ValueFormatterFactory::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::ValueFormatterFactory::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::ValueFormatter*, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: ValueFormatterFactory::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValueFormatterFactory::*)(::Il2CppObject*, System::IntPtr)>(&ValueFormatterFactory::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueFormatterFactory*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ValueFormatterFactory::*)(::Il2CppObject*, System::IntPtr)>(&ValueFormatterFactory::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueFormatterFactory*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: ValueFormatterFactory::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::ValueFormatter* (ValueFormatterFactory::*)(NUnit::Framework::Constraints::ValueFormatter*)>(&ValueFormatterFactory::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueFormatterFactory*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::ValueFormatter*>()});
  }
};
// Writing MetadataGetter for method: ValueFormatterFactory::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (ValueFormatterFactory::*)(NUnit::Framework::Constraints::ValueFormatter*, System::AsyncCallback*, ::Il2CppObject*)>(&ValueFormatterFactory::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueFormatterFactory*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::ValueFormatter*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: ValueFormatterFactory::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::ValueFormatter* (ValueFormatterFactory::*)(System::IAsyncResult*)>(&ValueFormatterFactory::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ValueFormatterFactory*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.MsgUtils
#include "NUnit/Framework/Constraints/MsgUtils.hpp"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_0
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_0.hpp"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_1
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_1.hpp"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_2
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_2.hpp"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_3
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_3.hpp"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_4
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_4.hpp"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_5
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_5.hpp"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_6
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_6.hpp"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_7
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_7.hpp"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_8
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_8.hpp"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_9
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_9.hpp"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c
#include "NUnit/Framework/Constraints/MsgUtils_--c.hpp"
// Including type: NUnit.Framework.Constraints.ValueFormatter
#include "NUnit/Framework/Constraints/ValueFormatter.hpp"
// Including type: NUnit.Framework.Constraints.ValueFormatterFactory
#include "NUnit/Framework/Constraints/ValueFormatterFactory.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
// Including type: System.Array
#include "System/Array.hpp"
// Including type: System.Decimal
#include "System/Decimal.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.DateTimeOffset
#include "System/DateTimeOffset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.String Fmt_Null
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::_get_Fmt_Null() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_get_Fmt_Null");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "MsgUtils", "Fmt_Null"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String Fmt_Null
void NUnit::Framework::Constraints::MsgUtils::_set_Fmt_Null(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_set_Fmt_Null");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "MsgUtils", "Fmt_Null", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String Fmt_EmptyString
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::_get_Fmt_EmptyString() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_get_Fmt_EmptyString");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "MsgUtils", "Fmt_EmptyString"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String Fmt_EmptyString
void NUnit::Framework::Constraints::MsgUtils::_set_Fmt_EmptyString(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_set_Fmt_EmptyString");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "MsgUtils", "Fmt_EmptyString", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String Fmt_EmptyCollection
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::_get_Fmt_EmptyCollection() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_get_Fmt_EmptyCollection");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "MsgUtils", "Fmt_EmptyCollection"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String Fmt_EmptyCollection
void NUnit::Framework::Constraints::MsgUtils::_set_Fmt_EmptyCollection(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_set_Fmt_EmptyCollection");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "MsgUtils", "Fmt_EmptyCollection", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String Fmt_String
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::_get_Fmt_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_get_Fmt_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "MsgUtils", "Fmt_String"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String Fmt_String
void NUnit::Framework::Constraints::MsgUtils::_set_Fmt_String(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_set_Fmt_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "MsgUtils", "Fmt_String", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String Fmt_Char
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::_get_Fmt_Char() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_get_Fmt_Char");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "MsgUtils", "Fmt_Char"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String Fmt_Char
void NUnit::Framework::Constraints::MsgUtils::_set_Fmt_Char(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_set_Fmt_Char");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "MsgUtils", "Fmt_Char", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String Fmt_DateTime
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::_get_Fmt_DateTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_get_Fmt_DateTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "MsgUtils", "Fmt_DateTime"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String Fmt_DateTime
void NUnit::Framework::Constraints::MsgUtils::_set_Fmt_DateTime(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_set_Fmt_DateTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "MsgUtils", "Fmt_DateTime", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String Fmt_DateTimeOffset
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::_get_Fmt_DateTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_get_Fmt_DateTimeOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "MsgUtils", "Fmt_DateTimeOffset"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String Fmt_DateTimeOffset
void NUnit::Framework::Constraints::MsgUtils::_set_Fmt_DateTimeOffset(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_set_Fmt_DateTimeOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "MsgUtils", "Fmt_DateTimeOffset", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String Fmt_ValueType
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::_get_Fmt_ValueType() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_get_Fmt_ValueType");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "MsgUtils", "Fmt_ValueType"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String Fmt_ValueType
void NUnit::Framework::Constraints::MsgUtils::_set_Fmt_ValueType(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_set_Fmt_ValueType");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "MsgUtils", "Fmt_ValueType", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.String Fmt_Default
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::_get_Fmt_Default() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_get_Fmt_Default");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("NUnit.Framework.Constraints", "MsgUtils", "Fmt_Default"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String Fmt_Default
void NUnit::Framework::Constraints::MsgUtils::_set_Fmt_Default(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_set_Fmt_Default");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "MsgUtils", "Fmt_Default", value));
}
// [CompilerGeneratedAttribute] Offset: 0xE05FC4
// [DebuggerBrowsableAttribute] Offset: 0xE05FC4
// Autogenerated static field getter
// Get static field: static private NUnit.Framework.Constraints.ValueFormatter <DefaultValueFormatter>k__BackingField
NUnit::Framework::Constraints::ValueFormatter* NUnit::Framework::Constraints::MsgUtils::_get_$DefaultValueFormatter$k__BackingField() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_get_$DefaultValueFormatter$k__BackingField");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<NUnit::Framework::Constraints::ValueFormatter*>("NUnit.Framework.Constraints", "MsgUtils", "<DefaultValueFormatter>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private NUnit.Framework.Constraints.ValueFormatter <DefaultValueFormatter>k__BackingField
void NUnit::Framework::Constraints::MsgUtils::_set_$DefaultValueFormatter$k__BackingField(NUnit::Framework::Constraints::ValueFormatter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::_set_$DefaultValueFormatter$k__BackingField");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("NUnit.Framework.Constraints", "MsgUtils", "<DefaultValueFormatter>k__BackingField", value));
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.get_DefaultValueFormatter
NUnit::Framework::Constraints::ValueFormatter* NUnit::Framework::Constraints::MsgUtils::get_DefaultValueFormatter() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::get_DefaultValueFormatter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "get_DefaultValueFormatter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<NUnit::Framework::Constraints::ValueFormatter*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.set_DefaultValueFormatter
void NUnit::Framework::Constraints::MsgUtils::set_DefaultValueFormatter(NUnit::Framework::Constraints::ValueFormatter* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::set_DefaultValueFormatter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "set_DefaultValueFormatter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils..cctor
void NUnit::Framework::Constraints::MsgUtils::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.AddFormatter
void NUnit::Framework::Constraints::MsgUtils::AddFormatter(NUnit::Framework::Constraints::ValueFormatterFactory* formatterFactory) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::AddFormatter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "AddFormatter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(formatterFactory)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, formatterFactory);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.FormatValue
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::FormatValue(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::FormatValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "FormatValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, val);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.FormatCollection
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::FormatCollection(System::Collections::IEnumerable* collection, int64_t start, int max) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::FormatCollection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "FormatCollection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collection), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, collection, start, max);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.FormatArray
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::FormatArray(System::Array* array) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::FormatArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "FormatArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, array);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.FormatString
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::FormatString(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::FormatString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "FormatString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.FormatDouble
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::FormatDouble(double d) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::FormatDouble");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "FormatDouble", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, d);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.FormatFloat
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::FormatFloat(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::FormatFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "FormatFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.FormatDecimal
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::FormatDecimal(System::Decimal d) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::FormatDecimal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "FormatDecimal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, d);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.FormatDateTime
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::FormatDateTime(System::DateTime dt) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::FormatDateTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "FormatDateTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dt)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, dt);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.FormatDateTimeOffset
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::FormatDateTimeOffset(System::DateTimeOffset dto) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::FormatDateTimeOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "FormatDateTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dto)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, dto);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.GetTypeRepresentation
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::GetTypeRepresentation(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::GetTypeRepresentation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "GetTypeRepresentation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.EscapeControlChars
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::EscapeControlChars(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::EscapeControlChars");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "EscapeControlChars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.EscapeNullCharacters
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::EscapeNullCharacters(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::EscapeNullCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "EscapeNullCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.GetArrayIndicesAsString
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::GetArrayIndicesAsString(::Array<int>* indices) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::GetArrayIndicesAsString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "GetArrayIndicesAsString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(indices)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, indices);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.GetArrayIndicesFromCollectionIndex
::Array<int>* NUnit::Framework::Constraints::MsgUtils::GetArrayIndicesFromCollectionIndex(System::Collections::IEnumerable* collection, int64_t index) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::GetArrayIndicesFromCollectionIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "GetArrayIndicesFromCollectionIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collection), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<int>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, collection, index);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.ClipString
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::ClipString(::Il2CppString* s, int maxStringLength, int clipStart) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::ClipString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "ClipString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(maxStringLength), ::il2cpp_utils::ExtractType(clipStart)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s, maxStringLength, clipStart);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.ClipExpectedAndActual
void NUnit::Framework::Constraints::MsgUtils::ClipExpectedAndActual(::Il2CppString*& expected, ::Il2CppString*& actual, int maxDisplayLength, int mismatch) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::ClipExpectedAndActual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "ClipExpectedAndActual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(actual), ::il2cpp_utils::ExtractType(maxDisplayLength), ::il2cpp_utils::ExtractType(mismatch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, expected, actual, maxDisplayLength, mismatch);
}
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils.FindMismatchPosition
int NUnit::Framework::Constraints::MsgUtils::FindMismatchPosition(::Il2CppString* expected, ::Il2CppString* actual, int istart, bool ignoreCase) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::FindMismatchPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("NUnit.Framework.Constraints", "MsgUtils", "FindMismatchPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(expected), ::il2cpp_utils::ExtractType(actual), ::il2cpp_utils::ExtractType(istart), ::il2cpp_utils::ExtractType(ignoreCase)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, expected, actual, istart, ignoreCase);
}
// Writing MetadataGetter for method: MsgUtils::get_DefaultValueFormatter
// Il2CppName: get_DefaultValueFormatter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<NUnit::Framework::Constraints::ValueFormatter* (*)()>(&MsgUtils::get_DefaultValueFormatter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "get_DefaultValueFormatter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MsgUtils::set_DefaultValueFormatter
// Il2CppName: set_DefaultValueFormatter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(NUnit::Framework::Constraints::ValueFormatter*)>(&MsgUtils::set_DefaultValueFormatter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "set_DefaultValueFormatter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::ValueFormatter*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&MsgUtils::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MsgUtils::AddFormatter
// Il2CppName: AddFormatter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(NUnit::Framework::Constraints::ValueFormatterFactory*)>(&MsgUtils::AddFormatter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "AddFormatter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<NUnit::Framework::Constraints::ValueFormatterFactory*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::FormatValue
// Il2CppName: FormatValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppObject*)>(&MsgUtils::FormatValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "FormatValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::FormatCollection
// Il2CppName: FormatCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Collections::IEnumerable*, int64_t, int)>(&MsgUtils::FormatCollection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "FormatCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerable*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::FormatArray
// Il2CppName: FormatArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Array*)>(&MsgUtils::FormatArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "FormatArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Array*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::FormatString
// Il2CppName: FormatString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&MsgUtils::FormatString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "FormatString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::FormatDouble
// Il2CppName: FormatDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(double)>(&MsgUtils::FormatDouble)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "FormatDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::FormatFloat
// Il2CppName: FormatFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(float)>(&MsgUtils::FormatFloat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "FormatFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::FormatDecimal
// Il2CppName: FormatDecimal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Decimal)>(&MsgUtils::FormatDecimal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "FormatDecimal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Decimal>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::FormatDateTime
// Il2CppName: FormatDateTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::DateTime)>(&MsgUtils::FormatDateTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "FormatDateTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::DateTime>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::FormatDateTimeOffset
// Il2CppName: FormatDateTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::DateTimeOffset)>(&MsgUtils::FormatDateTimeOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "FormatDateTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::DateTimeOffset>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::GetTypeRepresentation
// Il2CppName: GetTypeRepresentation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppObject*)>(&MsgUtils::GetTypeRepresentation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "GetTypeRepresentation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::EscapeControlChars
// Il2CppName: EscapeControlChars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&MsgUtils::EscapeControlChars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "EscapeControlChars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::EscapeNullCharacters
// Il2CppName: EscapeNullCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&MsgUtils::EscapeNullCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "EscapeNullCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::GetArrayIndicesAsString
// Il2CppName: GetArrayIndicesAsString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Array<int>*)>(&MsgUtils::GetArrayIndicesAsString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "GetArrayIndicesAsString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::GetArrayIndicesFromCollectionIndex
// Il2CppName: GetArrayIndicesFromCollectionIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (*)(System::Collections::IEnumerable*, int64_t)>(&MsgUtils::GetArrayIndicesFromCollectionIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "GetArrayIndicesFromCollectionIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerable*>(), ::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::ClipString
// Il2CppName: ClipString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, int, int)>(&MsgUtils::ClipString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "ClipString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::ClipExpectedAndActual
// Il2CppName: ClipExpectedAndActual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*&, ::Il2CppString*&, int, int)>(&MsgUtils::ClipExpectedAndActual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "ClipExpectedAndActual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::FindMismatchPosition
// Il2CppName: FindMismatchPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, ::Il2CppString*, int, bool)>(&MsgUtils::FindMismatchPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils*), "FindMismatchPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_0
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_0.hpp"
// Including type: NUnit.Framework.Constraints.ValueFormatter
#include "NUnit/Framework/Constraints/ValueFormatter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_0.<.cctor>b__11
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_0::$_cctor$b__11(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_0::<.cctor>b__11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, val);
}
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_0::$_cctor$b__11
// Il2CppName: <.cctor>b__11
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MsgUtils::$$c__DisplayClass14_0::*)(::Il2CppObject*)>(&MsgUtils::$$c__DisplayClass14_0::$_cctor$b__11)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_0*), "<.cctor>b__11", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_0::*)()>(&MsgUtils::$$c__DisplayClass14_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_0::*)()>(&MsgUtils::$$c__DisplayClass14_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_1
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_1.hpp"
// Including type: NUnit.Framework.Constraints.ValueFormatter
#include "NUnit/Framework/Constraints/ValueFormatter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_1.<.cctor>b__12
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_1::$_cctor$b__12(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_1::<.cctor>b__12");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__12", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, val);
}
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_1::$_cctor$b__12
// Il2CppName: <.cctor>b__12
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MsgUtils::$$c__DisplayClass14_1::*)(::Il2CppObject*)>(&MsgUtils::$$c__DisplayClass14_1::$_cctor$b__12)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_1*), "<.cctor>b__12", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_1::*)()>(&MsgUtils::$$c__DisplayClass14_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_1::*)()>(&MsgUtils::$$c__DisplayClass14_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_2
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_2.hpp"
// Including type: NUnit.Framework.Constraints.ValueFormatter
#include "NUnit/Framework/Constraints/ValueFormatter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_2.<.cctor>b__13
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_2::$_cctor$b__13(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_2::<.cctor>b__13");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__13", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, val);
}
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_2::$_cctor$b__13
// Il2CppName: <.cctor>b__13
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MsgUtils::$$c__DisplayClass14_2::*)(::Il2CppObject*)>(&MsgUtils::$$c__DisplayClass14_2::$_cctor$b__13)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_2*), "<.cctor>b__13", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_2::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_2::*)()>(&MsgUtils::$$c__DisplayClass14_2::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_2::*)()>(&MsgUtils::$$c__DisplayClass14_2::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_2*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_3
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_3.hpp"
// Including type: NUnit.Framework.Constraints.ValueFormatter
#include "NUnit/Framework/Constraints/ValueFormatter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_3.<.cctor>b__14
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_3::$_cctor$b__14(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_3::<.cctor>b__14");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__14", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, val);
}
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_3::$_cctor$b__14
// Il2CppName: <.cctor>b__14
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MsgUtils::$$c__DisplayClass14_3::*)(::Il2CppObject*)>(&MsgUtils::$$c__DisplayClass14_3::$_cctor$b__14)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_3*), "<.cctor>b__14", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_3::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_3::*)()>(&MsgUtils::$$c__DisplayClass14_3::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_3*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_3::*)()>(&MsgUtils::$$c__DisplayClass14_3::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_3*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_4
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_4.hpp"
// Including type: NUnit.Framework.Constraints.ValueFormatter
#include "NUnit/Framework/Constraints/ValueFormatter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_4.<.cctor>b__15
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_4::$_cctor$b__15(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_4::<.cctor>b__15");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__15", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, val);
}
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_4::$_cctor$b__15
// Il2CppName: <.cctor>b__15
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MsgUtils::$$c__DisplayClass14_4::*)(::Il2CppObject*)>(&MsgUtils::$$c__DisplayClass14_4::$_cctor$b__15)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_4*), "<.cctor>b__15", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_4::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_4::*)()>(&MsgUtils::$$c__DisplayClass14_4::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_4*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_4::*)()>(&MsgUtils::$$c__DisplayClass14_4::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_4*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_5
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_5.hpp"
// Including type: NUnit.Framework.Constraints.ValueFormatter
#include "NUnit/Framework/Constraints/ValueFormatter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_5.<.cctor>b__16
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_5::$_cctor$b__16(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_5::<.cctor>b__16");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__16", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, val);
}
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_5::$_cctor$b__16
// Il2CppName: <.cctor>b__16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MsgUtils::$$c__DisplayClass14_5::*)(::Il2CppObject*)>(&MsgUtils::$$c__DisplayClass14_5::$_cctor$b__16)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_5*), "<.cctor>b__16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_5::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_5::*)()>(&MsgUtils::$$c__DisplayClass14_5::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_5*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_5::*)()>(&MsgUtils::$$c__DisplayClass14_5::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_5*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_6
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_6.hpp"
// Including type: NUnit.Framework.Constraints.ValueFormatter
#include "NUnit/Framework/Constraints/ValueFormatter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_6.<.cctor>b__17
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_6::$_cctor$b__17(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_6::<.cctor>b__17");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__17", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, val);
}
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_6::$_cctor$b__17
// Il2CppName: <.cctor>b__17
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MsgUtils::$$c__DisplayClass14_6::*)(::Il2CppObject*)>(&MsgUtils::$$c__DisplayClass14_6::$_cctor$b__17)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_6*), "<.cctor>b__17", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_6::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_6::*)()>(&MsgUtils::$$c__DisplayClass14_6::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_6*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_6::*)()>(&MsgUtils::$$c__DisplayClass14_6::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_6*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_7
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_7.hpp"
// Including type: NUnit.Framework.Constraints.ValueFormatter
#include "NUnit/Framework/Constraints/ValueFormatter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_7.<.cctor>b__18
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_7::$_cctor$b__18(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_7::<.cctor>b__18");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__18", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, val);
}
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_7::$_cctor$b__18
// Il2CppName: <.cctor>b__18
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MsgUtils::$$c__DisplayClass14_7::*)(::Il2CppObject*)>(&MsgUtils::$$c__DisplayClass14_7::$_cctor$b__18)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_7*), "<.cctor>b__18", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_7::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_7::*)()>(&MsgUtils::$$c__DisplayClass14_7::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_7*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_7::*)()>(&MsgUtils::$$c__DisplayClass14_7::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_7*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_8
#include "NUnit/Framework/Constraints/MsgUtils_--c__DisplayClass14_8.hpp"
// Including type: NUnit.Framework.Constraints.ValueFormatter
#include "NUnit/Framework/Constraints/ValueFormatter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NUnit.Framework.Constraints.MsgUtils/<>c__DisplayClass14_8.<.cctor>b__19
::Il2CppString* NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_8::$_cctor$b__19(::Il2CppObject* val) {
  static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::MsgUtils::$$c__DisplayClass14_8::<.cctor>b__19");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.cctor>b__19", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, val);
}
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_8::$_cctor$b__19
// Il2CppName: <.cctor>b__19
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MsgUtils::$$c__DisplayClass14_8::*)(::Il2CppObject*)>(&MsgUtils::$$c__DisplayClass14_8::$_cctor$b__19)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_8*), "<.cctor>b__19", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MsgUtils::$$c__DisplayClass14_8::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_8::*)()>(&MsgUtils::$$c__DisplayClass14_8::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_8*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MsgUtils::$$c__DisplayClass14_8::*)()>(&MsgUtils::$$c__DisplayClass14_8::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MsgUtils::$$c__DisplayClass14_8*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
