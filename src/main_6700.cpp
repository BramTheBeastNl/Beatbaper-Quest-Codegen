// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRRenderModels/_GetComponentButtonMask
#include "OVR/OpenVR/IVRRenderModels__GetComponentButtonMask.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentButtonMask.Invoke
uint64_t OVR::OpenVR::IVRRenderModels::_GetComponentButtonMask::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentButtonMask::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentButtonMask.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRRenderModels::_GetComponentButtonMask::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentButtonMask::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentButtonMask.EndInvoke
uint64_t OVR::OpenVR::IVRRenderModels::_GetComponentButtonMask::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentButtonMask::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentButtonMask::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_GetComponentButtonMask::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_GetComponentButtonMask::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentButtonMask*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_GetComponentButtonMask::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_GetComponentButtonMask::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentButtonMask*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentButtonMask::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (IVRRenderModels::_GetComponentButtonMask::*)(::Il2CppString*, ::Il2CppString*)>(&IVRRenderModels::_GetComponentButtonMask::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentButtonMask*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentButtonMask::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRRenderModels::_GetComponentButtonMask::*)(::Il2CppString*, ::Il2CppString*, System::AsyncCallback*, ::Il2CppObject*)>(&IVRRenderModels::_GetComponentButtonMask::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentButtonMask*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentButtonMask::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (IVRRenderModels::_GetComponentButtonMask::*)(System::IAsyncResult*)>(&IVRRenderModels::_GetComponentButtonMask::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentButtonMask*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRRenderModels/_GetComponentRenderModelName
#include "OVR/OpenVR/IVRRenderModels__GetComponentRenderModelName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentRenderModelName.Invoke
uint OVR::OpenVR::IVRRenderModels::_GetComponentRenderModelName::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::Text::StringBuilder* pchComponentRenderModelName, uint unComponentRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentRenderModelName::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pchComponentRenderModelName), ::il2cpp_utils::ExtractType(unComponentRenderModelNameLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentRenderModelName.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRRenderModels::_GetComponentRenderModelName::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::Text::StringBuilder* pchComponentRenderModelName, uint unComponentRenderModelNameLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentRenderModelName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pchComponentRenderModelName), ::il2cpp_utils::ExtractType(unComponentRenderModelNameLen), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentRenderModelName.EndInvoke
uint OVR::OpenVR::IVRRenderModels::_GetComponentRenderModelName::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentRenderModelName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentRenderModelName::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_GetComponentRenderModelName::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_GetComponentRenderModelName::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentRenderModelName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_GetComponentRenderModelName::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_GetComponentRenderModelName::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentRenderModelName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentRenderModelName::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRRenderModels::_GetComponentRenderModelName::*)(::Il2CppString*, ::Il2CppString*, System::Text::StringBuilder*, uint)>(&IVRRenderModels::_GetComponentRenderModelName::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentRenderModelName*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentRenderModelName::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRRenderModels::_GetComponentRenderModelName::*)(::Il2CppString*, ::Il2CppString*, System::Text::StringBuilder*, uint, System::AsyncCallback*, ::Il2CppObject*)>(&IVRRenderModels::_GetComponentRenderModelName::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentRenderModelName*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentRenderModelName::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRRenderModels::_GetComponentRenderModelName::*)(System::IAsyncResult*)>(&IVRRenderModels::_GetComponentRenderModelName::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentRenderModelName*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRRenderModels/_GetComponentStateForDevicePath
#include "OVR/OpenVR/IVRRenderModels__GetComponentStateForDevicePath.hpp"
// Including type: OVR.OpenVR.RenderModel_ControllerMode_State_t
#include "OVR/OpenVR/RenderModel_ControllerMode_State_t.hpp"
// Including type: OVR.OpenVR.RenderModel_ComponentState_t
#include "OVR/OpenVR/RenderModel_ComponentState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentStateForDevicePath.Invoke
bool OVR::OpenVR::IVRRenderModels::_GetComponentStateForDevicePath::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, uint64_t devicePath, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentStateForDevicePath::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(devicePath), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, devicePath, pState, pComponentState);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentStateForDevicePath.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRRenderModels::_GetComponentStateForDevicePath::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, uint64_t devicePath, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentStateForDevicePath::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(devicePath), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, devicePath, pState, pComponentState, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentStateForDevicePath.EndInvoke
bool OVR::OpenVR::IVRRenderModels::_GetComponentStateForDevicePath::EndInvoke(OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentStateForDevicePath::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pState, pComponentState, result);
}
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentStateForDevicePath::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_GetComponentStateForDevicePath::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_GetComponentStateForDevicePath::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentStateForDevicePath*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_GetComponentStateForDevicePath::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_GetComponentStateForDevicePath::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentStateForDevicePath*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentStateForDevicePath::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IVRRenderModels::_GetComponentStateForDevicePath::*)(::Il2CppString*, ::Il2CppString*, uint64_t, OVR::OpenVR::RenderModel_ControllerMode_State_t&, OVR::OpenVR::RenderModel_ComponentState_t&)>(&IVRRenderModels::_GetComponentStateForDevicePath::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentStateForDevicePath*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ControllerMode_State_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ComponentState_t&>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentStateForDevicePath::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRRenderModels::_GetComponentStateForDevicePath::*)(::Il2CppString*, ::Il2CppString*, uint64_t, OVR::OpenVR::RenderModel_ControllerMode_State_t&, OVR::OpenVR::RenderModel_ComponentState_t&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRRenderModels::_GetComponentStateForDevicePath::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentStateForDevicePath*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ControllerMode_State_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ComponentState_t&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentStateForDevicePath::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IVRRenderModels::_GetComponentStateForDevicePath::*)(OVR::OpenVR::RenderModel_ControllerMode_State_t&, OVR::OpenVR::RenderModel_ComponentState_t&, System::IAsyncResult*)>(&IVRRenderModels::_GetComponentStateForDevicePath::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentStateForDevicePath*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ControllerMode_State_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ComponentState_t&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRRenderModels/_GetComponentState
#include "OVR/OpenVR/IVRRenderModels__GetComponentState.hpp"
// Including type: OVR.OpenVR.VRControllerState_t
#include "OVR/OpenVR/VRControllerState_t.hpp"
// Including type: OVR.OpenVR.RenderModel_ControllerMode_State_t
#include "OVR/OpenVR/RenderModel_ControllerMode_State_t.hpp"
// Including type: OVR.OpenVR.RenderModel_ComponentState_t
#include "OVR/OpenVR/RenderModel_ComponentState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentState.Invoke
bool OVR::OpenVR::IVRRenderModels::_GetComponentState::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, OVR::OpenVR::VRControllerState_t& pControllerState, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentState::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentState.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRRenderModels::_GetComponentState::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, OVR::OpenVR::VRControllerState_t& pControllerState, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentState::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentState.EndInvoke
bool OVR::OpenVR::IVRRenderModels::_GetComponentState::EndInvoke(OVR::OpenVR::VRControllerState_t& pControllerState, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentState::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, pState, pComponentState, result);
}
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentState::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_GetComponentState::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_GetComponentState::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_GetComponentState::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_GetComponentState::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentState::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IVRRenderModels::_GetComponentState::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::VRControllerState_t&, OVR::OpenVR::RenderModel_ControllerMode_State_t&, OVR::OpenVR::RenderModel_ComponentState_t&)>(&IVRRenderModels::_GetComponentState::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentState*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRControllerState_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ControllerMode_State_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ComponentState_t&>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentState::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRRenderModels::_GetComponentState::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::VRControllerState_t&, OVR::OpenVR::RenderModel_ControllerMode_State_t&, OVR::OpenVR::RenderModel_ComponentState_t&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRRenderModels::_GetComponentState::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentState*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRControllerState_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ControllerMode_State_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ComponentState_t&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetComponentState::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IVRRenderModels::_GetComponentState::*)(OVR::OpenVR::VRControllerState_t&, OVR::OpenVR::RenderModel_ControllerMode_State_t&, OVR::OpenVR::RenderModel_ComponentState_t&, System::IAsyncResult*)>(&IVRRenderModels::_GetComponentState::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetComponentState*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRControllerState_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ControllerMode_State_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ComponentState_t&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRRenderModels/_RenderModelHasComponent
#include "OVR/OpenVR/IVRRenderModels__RenderModelHasComponent.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_RenderModelHasComponent.Invoke
bool OVR::OpenVR::IVRRenderModels::_RenderModelHasComponent::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_RenderModelHasComponent::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_RenderModelHasComponent.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRRenderModels::_RenderModelHasComponent::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_RenderModelHasComponent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_RenderModelHasComponent.EndInvoke
bool OVR::OpenVR::IVRRenderModels::_RenderModelHasComponent::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_RenderModelHasComponent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRRenderModels::_RenderModelHasComponent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_RenderModelHasComponent::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_RenderModelHasComponent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_RenderModelHasComponent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_RenderModelHasComponent::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_RenderModelHasComponent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_RenderModelHasComponent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_RenderModelHasComponent::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IVRRenderModels::_RenderModelHasComponent::*)(::Il2CppString*, ::Il2CppString*)>(&IVRRenderModels::_RenderModelHasComponent::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_RenderModelHasComponent*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_RenderModelHasComponent::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRRenderModels::_RenderModelHasComponent::*)(::Il2CppString*, ::Il2CppString*, System::AsyncCallback*, ::Il2CppObject*)>(&IVRRenderModels::_RenderModelHasComponent::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_RenderModelHasComponent*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_RenderModelHasComponent::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IVRRenderModels::_RenderModelHasComponent::*)(System::IAsyncResult*)>(&IVRRenderModels::_RenderModelHasComponent::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_RenderModelHasComponent*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRRenderModels/_GetRenderModelThumbnailURL
#include "OVR/OpenVR/IVRRenderModels__GetRenderModelThumbnailURL.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.EVRRenderModelError
#include "OVR/OpenVR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelThumbnailURL.Invoke
uint OVR::OpenVR::IVRRenderModels::_GetRenderModelThumbnailURL::Invoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, OVR::OpenVR::EVRRenderModelError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelThumbnailURL::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchThumbnailURL), ::il2cpp_utils::ExtractType(unThumbnailURLLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelThumbnailURL.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRRenderModels::_GetRenderModelThumbnailURL::BeginInvoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, OVR::OpenVR::EVRRenderModelError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelThumbnailURL::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchThumbnailURL), ::il2cpp_utils::ExtractType(unThumbnailURLLen), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelThumbnailURL.EndInvoke
uint OVR::OpenVR::IVRRenderModels::_GetRenderModelThumbnailURL::EndInvoke(OVR::OpenVR::EVRRenderModelError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelThumbnailURL::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, peError, result);
}
// Writing MetadataGetter for method: IVRRenderModels::_GetRenderModelThumbnailURL::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_GetRenderModelThumbnailURL::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_GetRenderModelThumbnailURL::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetRenderModelThumbnailURL*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_GetRenderModelThumbnailURL::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_GetRenderModelThumbnailURL::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetRenderModelThumbnailURL*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetRenderModelThumbnailURL::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRRenderModels::_GetRenderModelThumbnailURL::*)(::Il2CppString*, System::Text::StringBuilder*, uint, OVR::OpenVR::EVRRenderModelError&)>(&IVRRenderModels::_GetRenderModelThumbnailURL::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetRenderModelThumbnailURL*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRRenderModelError&>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetRenderModelThumbnailURL::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRRenderModels::_GetRenderModelThumbnailURL::*)(::Il2CppString*, System::Text::StringBuilder*, uint, OVR::OpenVR::EVRRenderModelError&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRRenderModels::_GetRenderModelThumbnailURL::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetRenderModelThumbnailURL*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRRenderModelError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetRenderModelThumbnailURL::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRRenderModels::_GetRenderModelThumbnailURL::*)(OVR::OpenVR::EVRRenderModelError&, System::IAsyncResult*)>(&IVRRenderModels::_GetRenderModelThumbnailURL::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetRenderModelThumbnailURL*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRRenderModelError&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRRenderModels/_GetRenderModelOriginalPath
#include "OVR/OpenVR/IVRRenderModels__GetRenderModelOriginalPath.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.EVRRenderModelError
#include "OVR/OpenVR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelOriginalPath.Invoke
uint OVR::OpenVR::IVRRenderModels::_GetRenderModelOriginalPath::Invoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, OVR::OpenVR::EVRRenderModelError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelOriginalPath::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchOriginalPath), ::il2cpp_utils::ExtractType(unOriginalPathLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelOriginalPath.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRRenderModels::_GetRenderModelOriginalPath::BeginInvoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, OVR::OpenVR::EVRRenderModelError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelOriginalPath::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchOriginalPath), ::il2cpp_utils::ExtractType(unOriginalPathLen), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelOriginalPath.EndInvoke
uint OVR::OpenVR::IVRRenderModels::_GetRenderModelOriginalPath::EndInvoke(OVR::OpenVR::EVRRenderModelError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelOriginalPath::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, peError, result);
}
// Writing MetadataGetter for method: IVRRenderModels::_GetRenderModelOriginalPath::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_GetRenderModelOriginalPath::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_GetRenderModelOriginalPath::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetRenderModelOriginalPath*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_GetRenderModelOriginalPath::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_GetRenderModelOriginalPath::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetRenderModelOriginalPath*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetRenderModelOriginalPath::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRRenderModels::_GetRenderModelOriginalPath::*)(::Il2CppString*, System::Text::StringBuilder*, uint, OVR::OpenVR::EVRRenderModelError&)>(&IVRRenderModels::_GetRenderModelOriginalPath::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetRenderModelOriginalPath*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRRenderModelError&>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetRenderModelOriginalPath::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRRenderModels::_GetRenderModelOriginalPath::*)(::Il2CppString*, System::Text::StringBuilder*, uint, OVR::OpenVR::EVRRenderModelError&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRRenderModels::_GetRenderModelOriginalPath::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetRenderModelOriginalPath*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRRenderModelError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetRenderModelOriginalPath::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRRenderModels::_GetRenderModelOriginalPath::*)(OVR::OpenVR::EVRRenderModelError&, System::IAsyncResult*)>(&IVRRenderModels::_GetRenderModelOriginalPath::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetRenderModelOriginalPath*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRRenderModelError&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRRenderModels/_GetRenderModelErrorNameFromEnum
#include "OVR/OpenVR/IVRRenderModels__GetRenderModelErrorNameFromEnum.hpp"
// Including type: OVR.OpenVR.EVRRenderModelError
#include "OVR/OpenVR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelErrorNameFromEnum.Invoke
System::IntPtr OVR::OpenVR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::Invoke(OVR::OpenVR::EVRRenderModelError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, error);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelErrorNameFromEnum.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::BeginInvoke(OVR::OpenVR::EVRRenderModelError error, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, error, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelErrorNameFromEnum.EndInvoke
System::IntPtr OVR::OpenVR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRRenderModels::_GetRenderModelErrorNameFromEnum::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_GetRenderModelErrorNameFromEnum::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_GetRenderModelErrorNameFromEnum::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetRenderModelErrorNameFromEnum*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRRenderModels::_GetRenderModelErrorNameFromEnum::*)(::Il2CppObject*, System::IntPtr)>(&IVRRenderModels::_GetRenderModelErrorNameFromEnum::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetRenderModelErrorNameFromEnum*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetRenderModelErrorNameFromEnum::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (IVRRenderModels::_GetRenderModelErrorNameFromEnum::*)(OVR::OpenVR::EVRRenderModelError)>(&IVRRenderModels::_GetRenderModelErrorNameFromEnum::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetRenderModelErrorNameFromEnum*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRRenderModelError>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetRenderModelErrorNameFromEnum::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRRenderModels::_GetRenderModelErrorNameFromEnum::*)(OVR::OpenVR::EVRRenderModelError, System::AsyncCallback*, ::Il2CppObject*)>(&IVRRenderModels::_GetRenderModelErrorNameFromEnum::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetRenderModelErrorNameFromEnum*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRRenderModelError>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRRenderModels::_GetRenderModelErrorNameFromEnum::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (IVRRenderModels::_GetRenderModelErrorNameFromEnum::*)(System::IAsyncResult*)>(&IVRRenderModels::_GetRenderModelErrorNameFromEnum::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRRenderModels::_GetRenderModelErrorNameFromEnum*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRNotifications/_CreateNotification
#include "OVR/OpenVR/IVRNotifications__CreateNotification.hpp"
// Including type: OVR.OpenVR.EVRNotificationError
#include "OVR/OpenVR/EVRNotificationError.hpp"
// Including type: OVR.OpenVR.EVRNotificationType
#include "OVR/OpenVR/EVRNotificationType.hpp"
// Including type: OVR.OpenVR.EVRNotificationStyle
#include "OVR/OpenVR/EVRNotificationStyle.hpp"
// Including type: OVR.OpenVR.NotificationBitmap_t
#include "OVR/OpenVR/NotificationBitmap_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRNotifications/_CreateNotification.Invoke
OVR::OpenVR::EVRNotificationError OVR::OpenVR::IVRNotifications::_CreateNotification::Invoke(uint64_t ulOverlayHandle, uint64_t ulUserValue, OVR::OpenVR::EVRNotificationType type, ::Il2CppString* pchText, OVR::OpenVR::EVRNotificationStyle style, OVR::OpenVR::NotificationBitmap_t& pImage, uint& pNotificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRNotifications::_CreateNotification::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulUserValue), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(style), ::il2cpp_utils::ExtractType(pImage), ::il2cpp_utils::ExtractType(pNotificationId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRNotificationError, false>(this, ___internal__method, ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId);
}
// Autogenerated method: OVR.OpenVR.IVRNotifications/_CreateNotification.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRNotifications::_CreateNotification::BeginInvoke(uint64_t ulOverlayHandle, uint64_t ulUserValue, OVR::OpenVR::EVRNotificationType type, ::Il2CppString* pchText, OVR::OpenVR::EVRNotificationStyle style, OVR::OpenVR::NotificationBitmap_t& pImage, uint& pNotificationId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRNotifications::_CreateNotification::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulUserValue), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(style), ::il2cpp_utils::ExtractType(pImage), ::il2cpp_utils::ExtractType(pNotificationId), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRNotifications/_CreateNotification.EndInvoke
OVR::OpenVR::EVRNotificationError OVR::OpenVR::IVRNotifications::_CreateNotification::EndInvoke(OVR::OpenVR::NotificationBitmap_t& pImage, uint& pNotificationId, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRNotifications::_CreateNotification::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pImage), ::il2cpp_utils::ExtractType(pNotificationId), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRNotificationError, false>(this, ___internal__method, pImage, pNotificationId, result);
}
// Writing MetadataGetter for method: IVRNotifications::_CreateNotification::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRNotifications::_CreateNotification::*)(::Il2CppObject*, System::IntPtr)>(&IVRNotifications::_CreateNotification::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRNotifications::_CreateNotification*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRNotifications::_CreateNotification::*)(::Il2CppObject*, System::IntPtr)>(&IVRNotifications::_CreateNotification::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRNotifications::_CreateNotification*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRNotifications::_CreateNotification::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRNotificationError (IVRNotifications::_CreateNotification::*)(uint64_t, uint64_t, OVR::OpenVR::EVRNotificationType, ::Il2CppString*, OVR::OpenVR::EVRNotificationStyle, OVR::OpenVR::NotificationBitmap_t&, uint&)>(&IVRNotifications::_CreateNotification::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRNotifications::_CreateNotification*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRNotificationType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRNotificationStyle>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::NotificationBitmap_t&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: IVRNotifications::_CreateNotification::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRNotifications::_CreateNotification::*)(uint64_t, uint64_t, OVR::OpenVR::EVRNotificationType, ::Il2CppString*, OVR::OpenVR::EVRNotificationStyle, OVR::OpenVR::NotificationBitmap_t&, uint&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRNotifications::_CreateNotification::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRNotifications::_CreateNotification*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRNotificationType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRNotificationStyle>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::NotificationBitmap_t&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRNotifications::_CreateNotification::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRNotificationError (IVRNotifications::_CreateNotification::*)(OVR::OpenVR::NotificationBitmap_t&, uint&, System::IAsyncResult*)>(&IVRNotifications::_CreateNotification::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRNotifications::_CreateNotification*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::NotificationBitmap_t&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRNotifications/_RemoveNotification
#include "OVR/OpenVR/IVRNotifications__RemoveNotification.hpp"
// Including type: OVR.OpenVR.EVRNotificationError
#include "OVR/OpenVR/EVRNotificationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRNotifications/_RemoveNotification.Invoke
OVR::OpenVR::EVRNotificationError OVR::OpenVR::IVRNotifications::_RemoveNotification::Invoke(uint notificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRNotifications::_RemoveNotification::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(notificationId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRNotificationError, false>(this, ___internal__method, notificationId);
}
// Autogenerated method: OVR.OpenVR.IVRNotifications/_RemoveNotification.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRNotifications::_RemoveNotification::BeginInvoke(uint notificationId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRNotifications::_RemoveNotification::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(notificationId), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, notificationId, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRNotifications/_RemoveNotification.EndInvoke
OVR::OpenVR::EVRNotificationError OVR::OpenVR::IVRNotifications::_RemoveNotification::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRNotifications::_RemoveNotification::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRNotificationError, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRNotifications::_RemoveNotification::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRNotifications::_RemoveNotification::*)(::Il2CppObject*, System::IntPtr)>(&IVRNotifications::_RemoveNotification::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRNotifications::_RemoveNotification*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRNotifications::_RemoveNotification::*)(::Il2CppObject*, System::IntPtr)>(&IVRNotifications::_RemoveNotification::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRNotifications::_RemoveNotification*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRNotifications::_RemoveNotification::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRNotificationError (IVRNotifications::_RemoveNotification::*)(uint)>(&IVRNotifications::_RemoveNotification::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRNotifications::_RemoveNotification*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: IVRNotifications::_RemoveNotification::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRNotifications::_RemoveNotification::*)(uint, System::AsyncCallback*, ::Il2CppObject*)>(&IVRNotifications::_RemoveNotification::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRNotifications::_RemoveNotification*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRNotifications::_RemoveNotification::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRNotificationError (IVRNotifications::_RemoveNotification::*)(System::IAsyncResult*)>(&IVRNotifications::_RemoveNotification::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRNotifications::_RemoveNotification*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_GetSettingsErrorNameFromEnum
#include "OVR/OpenVR/IVRSettings__GetSettingsErrorNameFromEnum.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetSettingsErrorNameFromEnum.Invoke
System::IntPtr OVR::OpenVR::IVRSettings::_GetSettingsErrorNameFromEnum::Invoke(OVR::OpenVR::EVRSettingsError eError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetSettingsErrorNameFromEnum::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eError)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetSettingsErrorNameFromEnum.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_GetSettingsErrorNameFromEnum::BeginInvoke(OVR::OpenVR::EVRSettingsError eError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetSettingsErrorNameFromEnum::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetSettingsErrorNameFromEnum.EndInvoke
System::IntPtr OVR::OpenVR::IVRSettings::_GetSettingsErrorNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetSettingsErrorNameFromEnum::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRSettings::_GetSettingsErrorNameFromEnum::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_GetSettingsErrorNameFromEnum::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_GetSettingsErrorNameFromEnum::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetSettingsErrorNameFromEnum*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_GetSettingsErrorNameFromEnum::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_GetSettingsErrorNameFromEnum::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetSettingsErrorNameFromEnum*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_GetSettingsErrorNameFromEnum::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (IVRSettings::_GetSettingsErrorNameFromEnum::*)(OVR::OpenVR::EVRSettingsError)>(&IVRSettings::_GetSettingsErrorNameFromEnum::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetSettingsErrorNameFromEnum*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_GetSettingsErrorNameFromEnum::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSettings::_GetSettingsErrorNameFromEnum::*)(OVR::OpenVR::EVRSettingsError, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSettings::_GetSettingsErrorNameFromEnum::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetSettingsErrorNameFromEnum*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_GetSettingsErrorNameFromEnum::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (IVRSettings::_GetSettingsErrorNameFromEnum::*)(System::IAsyncResult*)>(&IVRSettings::_GetSettingsErrorNameFromEnum::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetSettingsErrorNameFromEnum*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_Sync
#include "OVR/OpenVR/IVRSettings__Sync.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_Sync.Invoke
bool OVR::OpenVR::IVRSettings::_Sync::Invoke(bool bForce, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_Sync::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bForce), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bForce, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_Sync.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_Sync::BeginInvoke(bool bForce, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_Sync::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bForce), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, bForce, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_Sync.EndInvoke
bool OVR::OpenVR::IVRSettings::_Sync::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_Sync::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, peError, result);
}
// Writing MetadataGetter for method: IVRSettings::_Sync::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_Sync::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_Sync::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_Sync*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_Sync::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_Sync::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_Sync*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_Sync::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IVRSettings::_Sync::*)(bool, OVR::OpenVR::EVRSettingsError&)>(&IVRSettings::_Sync::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_Sync*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_Sync::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSettings::_Sync::*)(bool, OVR::OpenVR::EVRSettingsError&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSettings::_Sync::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_Sync*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_Sync::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IVRSettings::_Sync::*)(OVR::OpenVR::EVRSettingsError&, System::IAsyncResult*)>(&IVRSettings::_Sync::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_Sync*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_SetBool
#include "OVR/OpenVR/IVRSettings__SetBool.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetBool.Invoke
void OVR::OpenVR::IVRSettings::_SetBool::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, bool bValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetBool::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(bValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, bValue, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetBool.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_SetBool::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, bool bValue, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetBool::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(bValue), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, bValue, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetBool.EndInvoke
void OVR::OpenVR::IVRSettings::_SetBool::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetBool::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Writing MetadataGetter for method: IVRSettings::_SetBool::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetBool::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_SetBool::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetBool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetBool::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_SetBool::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetBool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_SetBool::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetBool::*)(::Il2CppString*, ::Il2CppString*, bool, OVR::OpenVR::EVRSettingsError&)>(&IVRSettings::_SetBool::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetBool*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_SetBool::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSettings::_SetBool::*)(::Il2CppString*, ::Il2CppString*, bool, OVR::OpenVR::EVRSettingsError&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSettings::_SetBool::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetBool*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_SetBool::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetBool::*)(OVR::OpenVR::EVRSettingsError&, System::IAsyncResult*)>(&IVRSettings::_SetBool::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetBool*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_SetInt32
#include "OVR/OpenVR/IVRSettings__SetInt32.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetInt32.Invoke
void OVR::OpenVR::IVRSettings::_SetInt32::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, int nValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetInt32::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(nValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, nValue, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetInt32.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_SetInt32::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, int nValue, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetInt32::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(nValue), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, nValue, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetInt32.EndInvoke
void OVR::OpenVR::IVRSettings::_SetInt32::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetInt32::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Writing MetadataGetter for method: IVRSettings::_SetInt32::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetInt32::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_SetInt32::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetInt32*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetInt32::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_SetInt32::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetInt32*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_SetInt32::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetInt32::*)(::Il2CppString*, ::Il2CppString*, int, OVR::OpenVR::EVRSettingsError&)>(&IVRSettings::_SetInt32::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetInt32*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_SetInt32::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSettings::_SetInt32::*)(::Il2CppString*, ::Il2CppString*, int, OVR::OpenVR::EVRSettingsError&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSettings::_SetInt32::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetInt32*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_SetInt32::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetInt32::*)(OVR::OpenVR::EVRSettingsError&, System::IAsyncResult*)>(&IVRSettings::_SetInt32::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetInt32*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_SetFloat
#include "OVR/OpenVR/IVRSettings__SetFloat.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetFloat.Invoke
void OVR::OpenVR::IVRSettings::_SetFloat::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, float flValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetFloat::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(flValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, flValue, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetFloat.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_SetFloat::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, float flValue, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetFloat::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(flValue), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, flValue, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetFloat.EndInvoke
void OVR::OpenVR::IVRSettings::_SetFloat::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetFloat::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Writing MetadataGetter for method: IVRSettings::_SetFloat::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetFloat::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_SetFloat::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetFloat*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetFloat::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_SetFloat::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetFloat*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_SetFloat::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetFloat::*)(::Il2CppString*, ::Il2CppString*, float, OVR::OpenVR::EVRSettingsError&)>(&IVRSettings::_SetFloat::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetFloat*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_SetFloat::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSettings::_SetFloat::*)(::Il2CppString*, ::Il2CppString*, float, OVR::OpenVR::EVRSettingsError&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSettings::_SetFloat::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetFloat*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_SetFloat::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetFloat::*)(OVR::OpenVR::EVRSettingsError&, System::IAsyncResult*)>(&IVRSettings::_SetFloat::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetFloat*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_SetString
#include "OVR/OpenVR/IVRSettings__SetString.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetString.Invoke
void OVR::OpenVR::IVRSettings::_SetString::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ::Il2CppString* pchValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetString::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetString.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_SetString::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ::Il2CppString* pchValue, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetString::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetString.EndInvoke
void OVR::OpenVR::IVRSettings::_SetString::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetString::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Writing MetadataGetter for method: IVRSettings::_SetString::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetString::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_SetString::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetString::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_SetString::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_SetString::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetString::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, OVR::OpenVR::EVRSettingsError&)>(&IVRSettings::_SetString::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetString*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_SetString::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSettings::_SetString::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, OVR::OpenVR::EVRSettingsError&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSettings::_SetString::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetString*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_SetString::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_SetString::*)(OVR::OpenVR::EVRSettingsError&, System::IAsyncResult*)>(&IVRSettings::_SetString::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_SetString*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_GetBool
#include "OVR/OpenVR/IVRSettings__GetBool.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetBool.Invoke
bool OVR::OpenVR::IVRSettings::_GetBool::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetBool::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetBool.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_GetBool::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetBool::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetBool.EndInvoke
bool OVR::OpenVR::IVRSettings::_GetBool::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetBool::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, peError, result);
}
// Writing MetadataGetter for method: IVRSettings::_GetBool::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_GetBool::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_GetBool::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetBool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_GetBool::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_GetBool::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetBool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_GetBool::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IVRSettings::_GetBool::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::EVRSettingsError&)>(&IVRSettings::_GetBool::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetBool*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_GetBool::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSettings::_GetBool::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::EVRSettingsError&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSettings::_GetBool::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetBool*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_GetBool::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IVRSettings::_GetBool::*)(OVR::OpenVR::EVRSettingsError&, System::IAsyncResult*)>(&IVRSettings::_GetBool::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetBool*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_GetInt32
#include "OVR/OpenVR/IVRSettings__GetInt32.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetInt32.Invoke
int OVR::OpenVR::IVRSettings::_GetInt32::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetInt32::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetInt32.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_GetInt32::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetInt32::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetInt32.EndInvoke
int OVR::OpenVR::IVRSettings::_GetInt32::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetInt32::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, peError, result);
}
// Writing MetadataGetter for method: IVRSettings::_GetInt32::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_GetInt32::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_GetInt32::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetInt32*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_GetInt32::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_GetInt32::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetInt32*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_GetInt32::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IVRSettings::_GetInt32::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::EVRSettingsError&)>(&IVRSettings::_GetInt32::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetInt32*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_GetInt32::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSettings::_GetInt32::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::EVRSettingsError&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSettings::_GetInt32::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetInt32*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_GetInt32::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IVRSettings::_GetInt32::*)(OVR::OpenVR::EVRSettingsError&, System::IAsyncResult*)>(&IVRSettings::_GetInt32::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetInt32*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_GetFloat
#include "OVR/OpenVR/IVRSettings__GetFloat.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetFloat.Invoke
float OVR::OpenVR::IVRSettings::_GetFloat::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetFloat::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetFloat.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_GetFloat::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetFloat::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetFloat.EndInvoke
float OVR::OpenVR::IVRSettings::_GetFloat::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetFloat::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, peError, result);
}
// Writing MetadataGetter for method: IVRSettings::_GetFloat::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_GetFloat::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_GetFloat::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetFloat*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_GetFloat::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_GetFloat::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetFloat*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_GetFloat::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IVRSettings::_GetFloat::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::EVRSettingsError&)>(&IVRSettings::_GetFloat::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetFloat*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_GetFloat::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSettings::_GetFloat::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::EVRSettingsError&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSettings::_GetFloat::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetFloat*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_GetFloat::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IVRSettings::_GetFloat::*)(OVR::OpenVR::EVRSettingsError&, System::IAsyncResult*)>(&IVRSettings::_GetFloat::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetFloat*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_GetString
#include "OVR/OpenVR/IVRSettings__GetString.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetString.Invoke
void OVR::OpenVR::IVRSettings::_GetString::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, System::Text::StringBuilder* pchValue, uint unValueLen, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetString::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unValueLen), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, unValueLen, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetString.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_GetString::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, System::Text::StringBuilder* pchValue, uint unValueLen, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetString::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unValueLen), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, unValueLen, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetString.EndInvoke
void OVR::OpenVR::IVRSettings::_GetString::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetString::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Writing MetadataGetter for method: IVRSettings::_GetString::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_GetString::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_GetString::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_GetString::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_GetString::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetString*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_GetString::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_GetString::*)(::Il2CppString*, ::Il2CppString*, System::Text::StringBuilder*, uint, OVR::OpenVR::EVRSettingsError&)>(&IVRSettings::_GetString::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetString*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_GetString::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSettings::_GetString::*)(::Il2CppString*, ::Il2CppString*, System::Text::StringBuilder*, uint, OVR::OpenVR::EVRSettingsError&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSettings::_GetString::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetString*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_GetString::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_GetString::*)(OVR::OpenVR::EVRSettingsError&, System::IAsyncResult*)>(&IVRSettings::_GetString::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_GetString*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_RemoveSection
#include "OVR/OpenVR/IVRSettings__RemoveSection.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_RemoveSection.Invoke
void OVR::OpenVR::IVRSettings::_RemoveSection::Invoke(::Il2CppString* pchSection, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_RemoveSection::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_RemoveSection.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_RemoveSection::BeginInvoke(::Il2CppString* pchSection, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_RemoveSection::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_RemoveSection.EndInvoke
void OVR::OpenVR::IVRSettings::_RemoveSection::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_RemoveSection::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Writing MetadataGetter for method: IVRSettings::_RemoveSection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_RemoveSection::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_RemoveSection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_RemoveSection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_RemoveSection::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_RemoveSection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_RemoveSection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_RemoveSection::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_RemoveSection::*)(::Il2CppString*, OVR::OpenVR::EVRSettingsError&)>(&IVRSettings::_RemoveSection::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_RemoveSection*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_RemoveSection::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSettings::_RemoveSection::*)(::Il2CppString*, OVR::OpenVR::EVRSettingsError&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSettings::_RemoveSection::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_RemoveSection*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_RemoveSection::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_RemoveSection::*)(OVR::OpenVR::EVRSettingsError&, System::IAsyncResult*)>(&IVRSettings::_RemoveSection::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_RemoveSection*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_RemoveKeyInSection
#include "OVR/OpenVR/IVRSettings__RemoveKeyInSection.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_RemoveKeyInSection.Invoke
void OVR::OpenVR::IVRSettings::_RemoveKeyInSection::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_RemoveKeyInSection::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_RemoveKeyInSection.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_RemoveKeyInSection::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_RemoveKeyInSection::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_RemoveKeyInSection.EndInvoke
void OVR::OpenVR::IVRSettings::_RemoveKeyInSection::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_RemoveKeyInSection::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Writing MetadataGetter for method: IVRSettings::_RemoveKeyInSection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_RemoveKeyInSection::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_RemoveKeyInSection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_RemoveKeyInSection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_RemoveKeyInSection::*)(::Il2CppObject*, System::IntPtr)>(&IVRSettings::_RemoveKeyInSection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_RemoveKeyInSection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_RemoveKeyInSection::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_RemoveKeyInSection::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::EVRSettingsError&)>(&IVRSettings::_RemoveKeyInSection::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_RemoveKeyInSection*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_RemoveKeyInSection::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSettings::_RemoveKeyInSection::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::EVRSettingsError&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSettings::_RemoveKeyInSection::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_RemoveKeyInSection*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSettings::_RemoveKeyInSection::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSettings::_RemoveKeyInSection::*)(OVR::OpenVR::EVRSettingsError&, System::IAsyncResult*)>(&IVRSettings::_RemoveKeyInSection::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSettings::_RemoveKeyInSection*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRScreenshots/_RequestScreenshot
#include "OVR/OpenVR/IVRScreenshots__RequestScreenshot.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: OVR.OpenVR.EVRScreenshotType
#include "OVR/OpenVR/EVRScreenshotType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_RequestScreenshot.Invoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_RequestScreenshot::Invoke(uint& pOutScreenshotHandle, OVR::OpenVR::EVRScreenshotType type, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_RequestScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, type, pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_RequestScreenshot.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRScreenshots::_RequestScreenshot::BeginInvoke(uint& pOutScreenshotHandle, OVR::OpenVR::EVRScreenshotType type, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_RequestScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pOutScreenshotHandle, type, pchPreviewFilename, pchVRFilename, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_RequestScreenshot.EndInvoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_RequestScreenshot::EndInvoke(uint& pOutScreenshotHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_RequestScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, result);
}
// Writing MetadataGetter for method: IVRScreenshots::_RequestScreenshot::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRScreenshots::_RequestScreenshot::*)(::Il2CppObject*, System::IntPtr)>(&IVRScreenshots::_RequestScreenshot::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_RequestScreenshot*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRScreenshots::_RequestScreenshot::*)(::Il2CppObject*, System::IntPtr)>(&IVRScreenshots::_RequestScreenshot::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_RequestScreenshot*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_RequestScreenshot::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotError (IVRScreenshots::_RequestScreenshot::*)(uint&, OVR::OpenVR::EVRScreenshotType, ::Il2CppString*, ::Il2CppString*)>(&IVRScreenshots::_RequestScreenshot::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_RequestScreenshot*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_RequestScreenshot::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRScreenshots::_RequestScreenshot::*)(uint&, OVR::OpenVR::EVRScreenshotType, ::Il2CppString*, ::Il2CppString*, System::AsyncCallback*, ::Il2CppObject*)>(&IVRScreenshots::_RequestScreenshot::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_RequestScreenshot*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_RequestScreenshot::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotError (IVRScreenshots::_RequestScreenshot::*)(uint&, System::IAsyncResult*)>(&IVRScreenshots::_RequestScreenshot::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_RequestScreenshot*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRScreenshots/_HookScreenshot
#include "OVR/OpenVR/IVRScreenshots__HookScreenshot.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_HookScreenshot.Invoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_HookScreenshot::Invoke(::Array<OVR::OpenVR::EVRScreenshotType>*& pSupportedTypes, int numTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_HookScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSupportedTypes), ::il2cpp_utils::ExtractType(numTypes)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pSupportedTypes, numTypes);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_HookScreenshot.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRScreenshots::_HookScreenshot::BeginInvoke(::Array<OVR::OpenVR::EVRScreenshotType>*& pSupportedTypes, int numTypes, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_HookScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSupportedTypes), ::il2cpp_utils::ExtractType(numTypes), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pSupportedTypes, numTypes, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_HookScreenshot.EndInvoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_HookScreenshot::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_HookScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRScreenshots::_HookScreenshot::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRScreenshots::_HookScreenshot::*)(::Il2CppObject*, System::IntPtr)>(&IVRScreenshots::_HookScreenshot::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_HookScreenshot*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRScreenshots::_HookScreenshot::*)(::Il2CppObject*, System::IntPtr)>(&IVRScreenshots::_HookScreenshot::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_HookScreenshot*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_HookScreenshot::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotError (IVRScreenshots::_HookScreenshot::*)(::Array<OVR::OpenVR::EVRScreenshotType>*&, int)>(&IVRScreenshots::_HookScreenshot::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_HookScreenshot*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::EVRScreenshotType>*&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_HookScreenshot::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRScreenshots::_HookScreenshot::*)(::Array<OVR::OpenVR::EVRScreenshotType>*&, int, System::AsyncCallback*, ::Il2CppObject*)>(&IVRScreenshots::_HookScreenshot::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_HookScreenshot*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::EVRScreenshotType>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_HookScreenshot::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotError (IVRScreenshots::_HookScreenshot::*)(System::IAsyncResult*)>(&IVRScreenshots::_HookScreenshot::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_HookScreenshot*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyType
#include "OVR/OpenVR/IVRScreenshots__GetScreenshotPropertyType.hpp"
// Including type: OVR.OpenVR.EVRScreenshotType
#include "OVR/OpenVR/EVRScreenshotType.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyType.Invoke
OVR::OpenVR::EVRScreenshotType OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyType::Invoke(uint screenshotHandle, OVR::OpenVR::EVRScreenshotError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyType::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotType, false>(this, ___internal__method, screenshotHandle, pError);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyType.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyType::BeginInvoke(uint screenshotHandle, OVR::OpenVR::EVRScreenshotError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyType::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, pError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyType.EndInvoke
OVR::OpenVR::EVRScreenshotType OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyType::EndInvoke(OVR::OpenVR::EVRScreenshotError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyType::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotType, false>(this, ___internal__method, pError, result);
}
// Writing MetadataGetter for method: IVRScreenshots::_GetScreenshotPropertyType::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRScreenshots::_GetScreenshotPropertyType::*)(::Il2CppObject*, System::IntPtr)>(&IVRScreenshots::_GetScreenshotPropertyType::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_GetScreenshotPropertyType*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRScreenshots::_GetScreenshotPropertyType::*)(::Il2CppObject*, System::IntPtr)>(&IVRScreenshots::_GetScreenshotPropertyType::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_GetScreenshotPropertyType*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_GetScreenshotPropertyType::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotType (IVRScreenshots::_GetScreenshotPropertyType::*)(uint, OVR::OpenVR::EVRScreenshotError&)>(&IVRScreenshots::_GetScreenshotPropertyType::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_GetScreenshotPropertyType*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotError&>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_GetScreenshotPropertyType::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRScreenshots::_GetScreenshotPropertyType::*)(uint, OVR::OpenVR::EVRScreenshotError&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRScreenshots::_GetScreenshotPropertyType::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_GetScreenshotPropertyType*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_GetScreenshotPropertyType::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotType (IVRScreenshots::_GetScreenshotPropertyType::*)(OVR::OpenVR::EVRScreenshotError&, System::IAsyncResult*)>(&IVRScreenshots::_GetScreenshotPropertyType::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_GetScreenshotPropertyType*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotError&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyFilename
#include "OVR/OpenVR/IVRScreenshots__GetScreenshotPropertyFilename.hpp"
// Including type: OVR.OpenVR.EVRScreenshotPropertyFilenames
#include "OVR/OpenVR/EVRScreenshotPropertyFilenames.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyFilename.Invoke
uint OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyFilename::Invoke(uint screenshotHandle, OVR::OpenVR::EVRScreenshotPropertyFilenames filenameType, System::Text::StringBuilder* pchFilename, uint cchFilename, OVR::OpenVR::EVRScreenshotError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyFilename::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(filenameType), ::il2cpp_utils::ExtractType(pchFilename), ::il2cpp_utils::ExtractType(cchFilename), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, screenshotHandle, filenameType, pchFilename, cchFilename, pError);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyFilename.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyFilename::BeginInvoke(uint screenshotHandle, OVR::OpenVR::EVRScreenshotPropertyFilenames filenameType, System::Text::StringBuilder* pchFilename, uint cchFilename, OVR::OpenVR::EVRScreenshotError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyFilename::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(filenameType), ::il2cpp_utils::ExtractType(pchFilename), ::il2cpp_utils::ExtractType(cchFilename), ::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, filenameType, pchFilename, cchFilename, pError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyFilename.EndInvoke
uint OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyFilename::EndInvoke(OVR::OpenVR::EVRScreenshotError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyFilename::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pError, result);
}
// Writing MetadataGetter for method: IVRScreenshots::_GetScreenshotPropertyFilename::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRScreenshots::_GetScreenshotPropertyFilename::*)(::Il2CppObject*, System::IntPtr)>(&IVRScreenshots::_GetScreenshotPropertyFilename::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_GetScreenshotPropertyFilename*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRScreenshots::_GetScreenshotPropertyFilename::*)(::Il2CppObject*, System::IntPtr)>(&IVRScreenshots::_GetScreenshotPropertyFilename::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_GetScreenshotPropertyFilename*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_GetScreenshotPropertyFilename::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRScreenshots::_GetScreenshotPropertyFilename::*)(uint, OVR::OpenVR::EVRScreenshotPropertyFilenames, System::Text::StringBuilder*, uint, OVR::OpenVR::EVRScreenshotError&)>(&IVRScreenshots::_GetScreenshotPropertyFilename::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_GetScreenshotPropertyFilename*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotPropertyFilenames>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotError&>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_GetScreenshotPropertyFilename::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRScreenshots::_GetScreenshotPropertyFilename::*)(uint, OVR::OpenVR::EVRScreenshotPropertyFilenames, System::Text::StringBuilder*, uint, OVR::OpenVR::EVRScreenshotError&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRScreenshots::_GetScreenshotPropertyFilename::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_GetScreenshotPropertyFilename*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotPropertyFilenames>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotError&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_GetScreenshotPropertyFilename::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRScreenshots::_GetScreenshotPropertyFilename::*)(OVR::OpenVR::EVRScreenshotError&, System::IAsyncResult*)>(&IVRScreenshots::_GetScreenshotPropertyFilename::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_GetScreenshotPropertyFilename*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotError&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRScreenshots/_UpdateScreenshotProgress
#include "OVR/OpenVR/IVRScreenshots__UpdateScreenshotProgress.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_UpdateScreenshotProgress.Invoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_UpdateScreenshotProgress::Invoke(uint screenshotHandle, float flProgress) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_UpdateScreenshotProgress::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(flProgress)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, flProgress);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_UpdateScreenshotProgress.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRScreenshots::_UpdateScreenshotProgress::BeginInvoke(uint screenshotHandle, float flProgress, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_UpdateScreenshotProgress::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(flProgress), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, flProgress, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_UpdateScreenshotProgress.EndInvoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_UpdateScreenshotProgress::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_UpdateScreenshotProgress::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRScreenshots::_UpdateScreenshotProgress::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRScreenshots::_UpdateScreenshotProgress::*)(::Il2CppObject*, System::IntPtr)>(&IVRScreenshots::_UpdateScreenshotProgress::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_UpdateScreenshotProgress*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRScreenshots::_UpdateScreenshotProgress::*)(::Il2CppObject*, System::IntPtr)>(&IVRScreenshots::_UpdateScreenshotProgress::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_UpdateScreenshotProgress*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_UpdateScreenshotProgress::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotError (IVRScreenshots::_UpdateScreenshotProgress::*)(uint, float)>(&IVRScreenshots::_UpdateScreenshotProgress::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_UpdateScreenshotProgress*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_UpdateScreenshotProgress::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRScreenshots::_UpdateScreenshotProgress::*)(uint, float, System::AsyncCallback*, ::Il2CppObject*)>(&IVRScreenshots::_UpdateScreenshotProgress::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_UpdateScreenshotProgress*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_UpdateScreenshotProgress::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotError (IVRScreenshots::_UpdateScreenshotProgress::*)(System::IAsyncResult*)>(&IVRScreenshots::_UpdateScreenshotProgress::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_UpdateScreenshotProgress*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRScreenshots/_TakeStereoScreenshot
#include "OVR/OpenVR/IVRScreenshots__TakeStereoScreenshot.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_TakeStereoScreenshot.Invoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_TakeStereoScreenshot::Invoke(uint& pOutScreenshotHandle, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_TakeStereoScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_TakeStereoScreenshot.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRScreenshots::_TakeStereoScreenshot::BeginInvoke(uint& pOutScreenshotHandle, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_TakeStereoScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pOutScreenshotHandle, pchPreviewFilename, pchVRFilename, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_TakeStereoScreenshot.EndInvoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_TakeStereoScreenshot::EndInvoke(uint& pOutScreenshotHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_TakeStereoScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, result);
}
// Writing MetadataGetter for method: IVRScreenshots::_TakeStereoScreenshot::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRScreenshots::_TakeStereoScreenshot::*)(::Il2CppObject*, System::IntPtr)>(&IVRScreenshots::_TakeStereoScreenshot::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_TakeStereoScreenshot*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRScreenshots::_TakeStereoScreenshot::*)(::Il2CppObject*, System::IntPtr)>(&IVRScreenshots::_TakeStereoScreenshot::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_TakeStereoScreenshot*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_TakeStereoScreenshot::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotError (IVRScreenshots::_TakeStereoScreenshot::*)(uint&, ::Il2CppString*, ::Il2CppString*)>(&IVRScreenshots::_TakeStereoScreenshot::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_TakeStereoScreenshot*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_TakeStereoScreenshot::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRScreenshots::_TakeStereoScreenshot::*)(uint&, ::Il2CppString*, ::Il2CppString*, System::AsyncCallback*, ::Il2CppObject*)>(&IVRScreenshots::_TakeStereoScreenshot::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_TakeStereoScreenshot*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_TakeStereoScreenshot::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotError (IVRScreenshots::_TakeStereoScreenshot::*)(uint&, System::IAsyncResult*)>(&IVRScreenshots::_TakeStereoScreenshot::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_TakeStereoScreenshot*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRScreenshots/_SubmitScreenshot
#include "OVR/OpenVR/IVRScreenshots__SubmitScreenshot.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: OVR.OpenVR.EVRScreenshotType
#include "OVR/OpenVR/EVRScreenshotType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_SubmitScreenshot.Invoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_SubmitScreenshot::Invoke(uint screenshotHandle, OVR::OpenVR::EVRScreenshotType type, ::Il2CppString* pchSourcePreviewFilename, ::Il2CppString* pchSourceVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_SubmitScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchSourcePreviewFilename), ::il2cpp_utils::ExtractType(pchSourceVRFilename)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_SubmitScreenshot.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRScreenshots::_SubmitScreenshot::BeginInvoke(uint screenshotHandle, OVR::OpenVR::EVRScreenshotType type, ::Il2CppString* pchSourcePreviewFilename, ::Il2CppString* pchSourceVRFilename, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_SubmitScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchSourcePreviewFilename), ::il2cpp_utils::ExtractType(pchSourceVRFilename), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_SubmitScreenshot.EndInvoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_SubmitScreenshot::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_SubmitScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRScreenshots::_SubmitScreenshot::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRScreenshots::_SubmitScreenshot::*)(::Il2CppObject*, System::IntPtr)>(&IVRScreenshots::_SubmitScreenshot::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_SubmitScreenshot*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRScreenshots::_SubmitScreenshot::*)(::Il2CppObject*, System::IntPtr)>(&IVRScreenshots::_SubmitScreenshot::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_SubmitScreenshot*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_SubmitScreenshot::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotError (IVRScreenshots::_SubmitScreenshot::*)(uint, OVR::OpenVR::EVRScreenshotType, ::Il2CppString*, ::Il2CppString*)>(&IVRScreenshots::_SubmitScreenshot::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_SubmitScreenshot*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_SubmitScreenshot::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRScreenshots::_SubmitScreenshot::*)(uint, OVR::OpenVR::EVRScreenshotType, ::Il2CppString*, ::Il2CppString*, System::AsyncCallback*, ::Il2CppObject*)>(&IVRScreenshots::_SubmitScreenshot::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_SubmitScreenshot*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRScreenshots::_SubmitScreenshot::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotError (IVRScreenshots::_SubmitScreenshot::*)(System::IAsyncResult*)>(&IVRScreenshots::_SubmitScreenshot::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRScreenshots::_SubmitScreenshot*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRResources/_LoadSharedResource
#include "OVR/OpenVR/IVRResources__LoadSharedResource.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRResources/_LoadSharedResource.Invoke
uint OVR::OpenVR::IVRResources::_LoadSharedResource::Invoke(::Il2CppString* pchResourceName, ::Il2CppString* pchBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRResources::_LoadSharedResource::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchBuffer), ::il2cpp_utils::ExtractType(unBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchResourceName, pchBuffer, unBufferLen);
}
// Autogenerated method: OVR.OpenVR.IVRResources/_LoadSharedResource.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRResources::_LoadSharedResource::BeginInvoke(::Il2CppString* pchResourceName, ::Il2CppString* pchBuffer, uint unBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRResources::_LoadSharedResource::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchBuffer), ::il2cpp_utils::ExtractType(unBufferLen), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchResourceName, pchBuffer, unBufferLen, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRResources/_LoadSharedResource.EndInvoke
uint OVR::OpenVR::IVRResources::_LoadSharedResource::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRResources::_LoadSharedResource::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRResources::_LoadSharedResource::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRResources::_LoadSharedResource::*)(::Il2CppObject*, System::IntPtr)>(&IVRResources::_LoadSharedResource::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRResources::_LoadSharedResource*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRResources::_LoadSharedResource::*)(::Il2CppObject*, System::IntPtr)>(&IVRResources::_LoadSharedResource::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRResources::_LoadSharedResource*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRResources::_LoadSharedResource::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRResources::_LoadSharedResource::*)(::Il2CppString*, ::Il2CppString*, uint)>(&IVRResources::_LoadSharedResource::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRResources::_LoadSharedResource*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: IVRResources::_LoadSharedResource::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRResources::_LoadSharedResource::*)(::Il2CppString*, ::Il2CppString*, uint, System::AsyncCallback*, ::Il2CppObject*)>(&IVRResources::_LoadSharedResource::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRResources::_LoadSharedResource*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRResources::_LoadSharedResource::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRResources::_LoadSharedResource::*)(System::IAsyncResult*)>(&IVRResources::_LoadSharedResource::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRResources::_LoadSharedResource*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRResources/_GetResourceFullPath
#include "OVR/OpenVR/IVRResources__GetResourceFullPath.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRResources/_GetResourceFullPath.Invoke
uint OVR::OpenVR::IVRResources::_GetResourceFullPath::Invoke(::Il2CppString* pchResourceName, ::Il2CppString* pchResourceTypeDirectory, System::Text::StringBuilder* pchPathBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRResources::_GetResourceFullPath::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchResourceTypeDirectory), ::il2cpp_utils::ExtractType(pchPathBuffer), ::il2cpp_utils::ExtractType(unBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen);
}
// Autogenerated method: OVR.OpenVR.IVRResources/_GetResourceFullPath.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRResources::_GetResourceFullPath::BeginInvoke(::Il2CppString* pchResourceName, ::Il2CppString* pchResourceTypeDirectory, System::Text::StringBuilder* pchPathBuffer, uint unBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRResources::_GetResourceFullPath::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchResourceTypeDirectory), ::il2cpp_utils::ExtractType(pchPathBuffer), ::il2cpp_utils::ExtractType(unBufferLen), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRResources/_GetResourceFullPath.EndInvoke
uint OVR::OpenVR::IVRResources::_GetResourceFullPath::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRResources::_GetResourceFullPath::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRResources::_GetResourceFullPath::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRResources::_GetResourceFullPath::*)(::Il2CppObject*, System::IntPtr)>(&IVRResources::_GetResourceFullPath::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRResources::_GetResourceFullPath*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRResources::_GetResourceFullPath::*)(::Il2CppObject*, System::IntPtr)>(&IVRResources::_GetResourceFullPath::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRResources::_GetResourceFullPath*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRResources::_GetResourceFullPath::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRResources::_GetResourceFullPath::*)(::Il2CppString*, ::Il2CppString*, System::Text::StringBuilder*, uint)>(&IVRResources::_GetResourceFullPath::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRResources::_GetResourceFullPath*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: IVRResources::_GetResourceFullPath::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRResources::_GetResourceFullPath::*)(::Il2CppString*, ::Il2CppString*, System::Text::StringBuilder*, uint, System::AsyncCallback*, ::Il2CppObject*)>(&IVRResources::_GetResourceFullPath::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRResources::_GetResourceFullPath*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRResources::_GetResourceFullPath::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRResources::_GetResourceFullPath::*)(System::IAsyncResult*)>(&IVRResources::_GetResourceFullPath::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRResources::_GetResourceFullPath*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRDriverManager/_GetDriverCount
#include "OVR/OpenVR/IVRDriverManager__GetDriverCount.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverCount.Invoke
uint OVR::OpenVR::IVRDriverManager::_GetDriverCount::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverCount::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverCount.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRDriverManager::_GetDriverCount::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverCount::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverCount.EndInvoke
uint OVR::OpenVR::IVRDriverManager::_GetDriverCount::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverCount::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRDriverManager::_GetDriverCount::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRDriverManager::_GetDriverCount::*)(::Il2CppObject*, System::IntPtr)>(&IVRDriverManager::_GetDriverCount::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRDriverManager::_GetDriverCount*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRDriverManager::_GetDriverCount::*)(::Il2CppObject*, System::IntPtr)>(&IVRDriverManager::_GetDriverCount::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRDriverManager::_GetDriverCount*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRDriverManager::_GetDriverCount::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRDriverManager::_GetDriverCount::*)()>(&IVRDriverManager::_GetDriverCount::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRDriverManager::_GetDriverCount*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IVRDriverManager::_GetDriverCount::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRDriverManager::_GetDriverCount::*)(System::AsyncCallback*, ::Il2CppObject*)>(&IVRDriverManager::_GetDriverCount::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRDriverManager::_GetDriverCount*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRDriverManager::_GetDriverCount::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRDriverManager::_GetDriverCount::*)(System::IAsyncResult*)>(&IVRDriverManager::_GetDriverCount::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRDriverManager::_GetDriverCount*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRDriverManager/_GetDriverName
#include "OVR/OpenVR/IVRDriverManager__GetDriverName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverName.Invoke
uint OVR::OpenVR::IVRDriverManager::_GetDriverName::Invoke(uint nDriver, System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverName::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDriver), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, nDriver, pchValue, unBufferSize);
}
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverName.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRDriverManager::_GetDriverName::BeginInvoke(uint nDriver, System::Text::StringBuilder* pchValue, uint unBufferSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDriver), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDriver, pchValue, unBufferSize, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverName.EndInvoke
uint OVR::OpenVR::IVRDriverManager::_GetDriverName::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRDriverManager::_GetDriverName::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRDriverManager::_GetDriverName::*)(::Il2CppObject*, System::IntPtr)>(&IVRDriverManager::_GetDriverName::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRDriverManager::_GetDriverName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRDriverManager::_GetDriverName::*)(::Il2CppObject*, System::IntPtr)>(&IVRDriverManager::_GetDriverName::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRDriverManager::_GetDriverName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRDriverManager::_GetDriverName::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRDriverManager::_GetDriverName::*)(uint, System::Text::StringBuilder*, uint)>(&IVRDriverManager::_GetDriverName::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRDriverManager::_GetDriverName*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: IVRDriverManager::_GetDriverName::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRDriverManager::_GetDriverName::*)(uint, System::Text::StringBuilder*, uint, System::AsyncCallback*, ::Il2CppObject*)>(&IVRDriverManager::_GetDriverName::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRDriverManager::_GetDriverName*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRDriverManager::_GetDriverName::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (IVRDriverManager::_GetDriverName::*)(System::IAsyncResult*)>(&IVRDriverManager::_GetDriverName::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRDriverManager::_GetDriverName*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRDriverManager/_GetDriverHandle
#include "OVR/OpenVR/IVRDriverManager__GetDriverHandle.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverHandle.Invoke
uint64_t OVR::OpenVR::IVRDriverManager::_GetDriverHandle::Invoke(::Il2CppString* pchDriverName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverHandle::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchDriverName)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchDriverName);
}
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverHandle.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRDriverManager::_GetDriverHandle::BeginInvoke(::Il2CppString* pchDriverName, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverHandle::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchDriverName), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchDriverName, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverHandle.EndInvoke
uint64_t OVR::OpenVR::IVRDriverManager::_GetDriverHandle::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverHandle::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRDriverManager::_GetDriverHandle::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRDriverManager::_GetDriverHandle::*)(::Il2CppObject*, System::IntPtr)>(&IVRDriverManager::_GetDriverHandle::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRDriverManager::_GetDriverHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRDriverManager::_GetDriverHandle::*)(::Il2CppObject*, System::IntPtr)>(&IVRDriverManager::_GetDriverHandle::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRDriverManager::_GetDriverHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRDriverManager::_GetDriverHandle::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (IVRDriverManager::_GetDriverHandle::*)(::Il2CppString*)>(&IVRDriverManager::_GetDriverHandle::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRDriverManager::_GetDriverHandle*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IVRDriverManager::_GetDriverHandle::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRDriverManager::_GetDriverHandle::*)(::Il2CppString*, System::AsyncCallback*, ::Il2CppObject*)>(&IVRDriverManager::_GetDriverHandle::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRDriverManager::_GetDriverHandle*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRDriverManager::_GetDriverHandle::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (IVRDriverManager::_GetDriverHandle::*)(System::IAsyncResult*)>(&IVRDriverManager::_GetDriverHandle::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRDriverManager::_GetDriverHandle*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_SetActionManifestPath
#include "OVR/OpenVR/IVRInput__SetActionManifestPath.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_SetActionManifestPath.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_SetActionManifestPath::Invoke(::Il2CppString* pchActionManifestPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_SetActionManifestPath::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionManifestPath)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchActionManifestPath);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_SetActionManifestPath.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_SetActionManifestPath::BeginInvoke(::Il2CppString* pchActionManifestPath, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_SetActionManifestPath::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionManifestPath), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchActionManifestPath, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_SetActionManifestPath.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_SetActionManifestPath::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_SetActionManifestPath::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRInput::_SetActionManifestPath::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_SetActionManifestPath::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_SetActionManifestPath::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_SetActionManifestPath*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_SetActionManifestPath::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_SetActionManifestPath::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_SetActionManifestPath*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_SetActionManifestPath::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_SetActionManifestPath::*)(::Il2CppString*)>(&IVRInput::_SetActionManifestPath::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_SetActionManifestPath*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_SetActionManifestPath::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_SetActionManifestPath::*)(::Il2CppString*, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_SetActionManifestPath::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_SetActionManifestPath*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_SetActionManifestPath::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_SetActionManifestPath::*)(System::IAsyncResult*)>(&IVRInput::_SetActionManifestPath::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_SetActionManifestPath*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetActionSetHandle
#include "OVR/OpenVR/IVRInput__GetActionSetHandle.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionSetHandle.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetActionSetHandle::Invoke(::Il2CppString* pchActionSetName, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionSetHandle::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionSetName), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchActionSetName, pHandle);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionSetHandle.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetActionSetHandle::BeginInvoke(::Il2CppString* pchActionSetName, uint64_t& pHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionSetHandle::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionSetName), ::il2cpp_utils::ExtractType(pHandle), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchActionSetName, pHandle, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionSetHandle.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetActionSetHandle::EndInvoke(uint64_t& pHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionSetHandle::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pHandle), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pHandle, result);
}
// Writing MetadataGetter for method: IVRInput::_GetActionSetHandle::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetActionSetHandle::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetActionSetHandle::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetActionSetHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetActionSetHandle::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetActionSetHandle::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetActionSetHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetActionSetHandle::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetActionSetHandle::*)(::Il2CppString*, uint64_t&)>(&IVRInput::_GetActionSetHandle::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetActionSetHandle*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetActionSetHandle::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_GetActionSetHandle::*)(::Il2CppString*, uint64_t&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_GetActionSetHandle::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetActionSetHandle*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetActionSetHandle::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetActionSetHandle::*)(uint64_t&, System::IAsyncResult*)>(&IVRInput::_GetActionSetHandle::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetActionSetHandle*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetActionHandle
#include "OVR/OpenVR/IVRInput__GetActionHandle.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionHandle.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetActionHandle::Invoke(::Il2CppString* pchActionName, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionHandle::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionName), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchActionName, pHandle);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionHandle.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetActionHandle::BeginInvoke(::Il2CppString* pchActionName, uint64_t& pHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionHandle::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionName), ::il2cpp_utils::ExtractType(pHandle), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchActionName, pHandle, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionHandle.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetActionHandle::EndInvoke(uint64_t& pHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionHandle::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pHandle), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pHandle, result);
}
// Writing MetadataGetter for method: IVRInput::_GetActionHandle::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetActionHandle::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetActionHandle::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetActionHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetActionHandle::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetActionHandle::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetActionHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetActionHandle::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetActionHandle::*)(::Il2CppString*, uint64_t&)>(&IVRInput::_GetActionHandle::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetActionHandle*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetActionHandle::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_GetActionHandle::*)(::Il2CppString*, uint64_t&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_GetActionHandle::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetActionHandle*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetActionHandle::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetActionHandle::*)(uint64_t&, System::IAsyncResult*)>(&IVRInput::_GetActionHandle::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetActionHandle*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetInputSourceHandle
#include "OVR/OpenVR/IVRInput__GetInputSourceHandle.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetInputSourceHandle.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetInputSourceHandle::Invoke(::Il2CppString* pchInputSourcePath, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetInputSourceHandle::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInputSourcePath), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchInputSourcePath, pHandle);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetInputSourceHandle.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetInputSourceHandle::BeginInvoke(::Il2CppString* pchInputSourcePath, uint64_t& pHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetInputSourceHandle::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInputSourcePath), ::il2cpp_utils::ExtractType(pHandle), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchInputSourcePath, pHandle, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetInputSourceHandle.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetInputSourceHandle::EndInvoke(uint64_t& pHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetInputSourceHandle::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pHandle), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pHandle, result);
}
// Writing MetadataGetter for method: IVRInput::_GetInputSourceHandle::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetInputSourceHandle::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetInputSourceHandle::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetInputSourceHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetInputSourceHandle::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetInputSourceHandle::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetInputSourceHandle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetInputSourceHandle::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetInputSourceHandle::*)(::Il2CppString*, uint64_t&)>(&IVRInput::_GetInputSourceHandle::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetInputSourceHandle*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetInputSourceHandle::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_GetInputSourceHandle::*)(::Il2CppString*, uint64_t&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_GetInputSourceHandle::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetInputSourceHandle*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetInputSourceHandle::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetInputSourceHandle::*)(uint64_t&, System::IAsyncResult*)>(&IVRInput::_GetInputSourceHandle::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetInputSourceHandle*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_UpdateActionState
#include "OVR/OpenVR/IVRInput__UpdateActionState.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_UpdateActionState.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_UpdateActionState::Invoke(::Array<OVR::OpenVR::VRActiveActionSet_t>*& pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_UpdateActionState::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSets), ::il2cpp_utils::ExtractType(unSizeOfVRSelectedActionSet_t), ::il2cpp_utils::ExtractType(unSetCount)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t, unSetCount);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_UpdateActionState.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_UpdateActionState::BeginInvoke(::Array<OVR::OpenVR::VRActiveActionSet_t>*& pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_UpdateActionState::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSets), ::il2cpp_utils::ExtractType(unSizeOfVRSelectedActionSet_t), ::il2cpp_utils::ExtractType(unSetCount), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t, unSetCount, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_UpdateActionState.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_UpdateActionState::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_UpdateActionState::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRInput::_UpdateActionState::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_UpdateActionState::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_UpdateActionState::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_UpdateActionState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_UpdateActionState::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_UpdateActionState::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_UpdateActionState*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_UpdateActionState::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_UpdateActionState::*)(::Array<OVR::OpenVR::VRActiveActionSet_t>*&, uint, uint)>(&IVRInput::_UpdateActionState::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_UpdateActionState*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::VRActiveActionSet_t>*&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_UpdateActionState::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_UpdateActionState::*)(::Array<OVR::OpenVR::VRActiveActionSet_t>*&, uint, uint, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_UpdateActionState::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_UpdateActionState*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::VRActiveActionSet_t>*&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_UpdateActionState::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_UpdateActionState::*)(System::IAsyncResult*)>(&IVRInput::_UpdateActionState::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_UpdateActionState*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetDigitalActionData
#include "OVR/OpenVR/IVRInput__GetDigitalActionData.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.InputDigitalActionData_t
#include "OVR/OpenVR/InputDigitalActionData_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetDigitalActionData.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetDigitalActionData::Invoke(uint64_t action, OVR::OpenVR::InputDigitalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetDigitalActionData::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetDigitalActionData.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetDigitalActionData::BeginInvoke(uint64_t action, OVR::OpenVR::InputDigitalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetDigitalActionData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetDigitalActionData.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetDigitalActionData::EndInvoke(OVR::OpenVR::InputDigitalActionData_t& pActionData, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetDigitalActionData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pActionData, result);
}
// Writing MetadataGetter for method: IVRInput::_GetDigitalActionData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetDigitalActionData::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetDigitalActionData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetDigitalActionData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetDigitalActionData::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetDigitalActionData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetDigitalActionData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetDigitalActionData::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetDigitalActionData::*)(uint64_t, OVR::OpenVR::InputDigitalActionData_t&, uint, uint64_t)>(&IVRInput::_GetDigitalActionData::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetDigitalActionData*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputDigitalActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetDigitalActionData::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_GetDigitalActionData::*)(uint64_t, OVR::OpenVR::InputDigitalActionData_t&, uint, uint64_t, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_GetDigitalActionData::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetDigitalActionData*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputDigitalActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetDigitalActionData::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetDigitalActionData::*)(OVR::OpenVR::InputDigitalActionData_t&, System::IAsyncResult*)>(&IVRInput::_GetDigitalActionData::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetDigitalActionData*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputDigitalActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetAnalogActionData
#include "OVR/OpenVR/IVRInput__GetAnalogActionData.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.InputAnalogActionData_t
#include "OVR/OpenVR/InputAnalogActionData_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetAnalogActionData.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetAnalogActionData::Invoke(uint64_t action, OVR::OpenVR::InputAnalogActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetAnalogActionData::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetAnalogActionData.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetAnalogActionData::BeginInvoke(uint64_t action, OVR::OpenVR::InputAnalogActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetAnalogActionData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetAnalogActionData.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetAnalogActionData::EndInvoke(OVR::OpenVR::InputAnalogActionData_t& pActionData, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetAnalogActionData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pActionData, result);
}
// Writing MetadataGetter for method: IVRInput::_GetAnalogActionData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetAnalogActionData::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetAnalogActionData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetAnalogActionData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetAnalogActionData::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetAnalogActionData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetAnalogActionData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetAnalogActionData::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetAnalogActionData::*)(uint64_t, OVR::OpenVR::InputAnalogActionData_t&, uint, uint64_t)>(&IVRInput::_GetAnalogActionData::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetAnalogActionData*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputAnalogActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetAnalogActionData::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_GetAnalogActionData::*)(uint64_t, OVR::OpenVR::InputAnalogActionData_t&, uint, uint64_t, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_GetAnalogActionData::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetAnalogActionData*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputAnalogActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetAnalogActionData::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetAnalogActionData::*)(OVR::OpenVR::InputAnalogActionData_t&, System::IAsyncResult*)>(&IVRInput::_GetAnalogActionData::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetAnalogActionData*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputAnalogActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetPoseActionData
#include "OVR/OpenVR/IVRInput__GetPoseActionData.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.InputPoseActionData_t
#include "OVR/OpenVR/InputPoseActionData_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetPoseActionData.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetPoseActionData::Invoke(uint64_t action, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, OVR::OpenVR::InputPoseActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetPoseActionData::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(fPredictedSecondsFromNow), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, eOrigin, fPredictedSecondsFromNow, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetPoseActionData.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetPoseActionData::BeginInvoke(uint64_t action, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, OVR::OpenVR::InputPoseActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetPoseActionData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(fPredictedSecondsFromNow), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, action, eOrigin, fPredictedSecondsFromNow, pActionData, unActionDataSize, ulRestrictToDevice, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetPoseActionData.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetPoseActionData::EndInvoke(OVR::OpenVR::InputPoseActionData_t& pActionData, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetPoseActionData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pActionData, result);
}
// Writing MetadataGetter for method: IVRInput::_GetPoseActionData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetPoseActionData::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetPoseActionData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetPoseActionData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetPoseActionData::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetPoseActionData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetPoseActionData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetPoseActionData::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetPoseActionData::*)(uint64_t, OVR::OpenVR::ETrackingUniverseOrigin, float, OVR::OpenVR::InputPoseActionData_t&, uint, uint64_t)>(&IVRInput::_GetPoseActionData::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetPoseActionData*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputPoseActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetPoseActionData::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_GetPoseActionData::*)(uint64_t, OVR::OpenVR::ETrackingUniverseOrigin, float, OVR::OpenVR::InputPoseActionData_t&, uint, uint64_t, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_GetPoseActionData::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetPoseActionData*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputPoseActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetPoseActionData::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetPoseActionData::*)(OVR::OpenVR::InputPoseActionData_t&, System::IAsyncResult*)>(&IVRInput::_GetPoseActionData::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetPoseActionData*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputPoseActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetSkeletalActionData
#include "OVR/OpenVR/IVRInput__GetSkeletalActionData.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.InputSkeletalActionData_t
#include "OVR/OpenVR/InputSkeletalActionData_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalActionData.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetSkeletalActionData::Invoke(uint64_t action, OVR::OpenVR::InputSkeletalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalActionData::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalActionData.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetSkeletalActionData::BeginInvoke(uint64_t action, OVR::OpenVR::InputSkeletalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalActionData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalActionData.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetSkeletalActionData::EndInvoke(OVR::OpenVR::InputSkeletalActionData_t& pActionData, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalActionData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pActionData, result);
}
// Writing MetadataGetter for method: IVRInput::_GetSkeletalActionData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetSkeletalActionData::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetSkeletalActionData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetSkeletalActionData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetSkeletalActionData::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetSkeletalActionData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetSkeletalActionData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetSkeletalActionData::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetSkeletalActionData::*)(uint64_t, OVR::OpenVR::InputSkeletalActionData_t&, uint, uint64_t)>(&IVRInput::_GetSkeletalActionData::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetSkeletalActionData*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputSkeletalActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetSkeletalActionData::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_GetSkeletalActionData::*)(uint64_t, OVR::OpenVR::InputSkeletalActionData_t&, uint, uint64_t, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_GetSkeletalActionData::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetSkeletalActionData*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputSkeletalActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetSkeletalActionData::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetSkeletalActionData::*)(OVR::OpenVR::InputSkeletalActionData_t&, System::IAsyncResult*)>(&IVRInput::_GetSkeletalActionData::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetSkeletalActionData*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputSkeletalActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetSkeletalBoneData
#include "OVR/OpenVR/IVRInput__GetSkeletalBoneData.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.EVRSkeletalTransformSpace
#include "OVR/OpenVR/EVRSkeletalTransformSpace.hpp"
// Including type: OVR.OpenVR.EVRSkeletalMotionRange
#include "OVR/OpenVR/EVRSkeletalMotionRange.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalBoneData.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetSkeletalBoneData::Invoke(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, ::Array<OVR::OpenVR::VRBoneTransform_t>*& pTransformArray, uint unTransformArrayCount, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalBoneData::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eTransformSpace), ::il2cpp_utils::ExtractType(eMotionRange), ::il2cpp_utils::ExtractType(pTransformArray), ::il2cpp_utils::ExtractType(unTransformArrayCount), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, pTransformArray, unTransformArrayCount, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalBoneData.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetSkeletalBoneData::BeginInvoke(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, ::Array<OVR::OpenVR::VRBoneTransform_t>*& pTransformArray, uint unTransformArrayCount, uint64_t ulRestrictToDevice, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalBoneData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eTransformSpace), ::il2cpp_utils::ExtractType(eMotionRange), ::il2cpp_utils::ExtractType(pTransformArray), ::il2cpp_utils::ExtractType(unTransformArrayCount), ::il2cpp_utils::ExtractType(ulRestrictToDevice), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, pTransformArray, unTransformArrayCount, ulRestrictToDevice, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalBoneData.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetSkeletalBoneData::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalBoneData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRInput::_GetSkeletalBoneData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetSkeletalBoneData::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetSkeletalBoneData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetSkeletalBoneData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetSkeletalBoneData::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetSkeletalBoneData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetSkeletalBoneData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetSkeletalBoneData::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetSkeletalBoneData::*)(uint64_t, OVR::OpenVR::EVRSkeletalTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange, ::Array<OVR::OpenVR::VRBoneTransform_t>*&, uint, uint64_t)>(&IVRInput::_GetSkeletalBoneData::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetSkeletalBoneData*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalTransformSpace>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalMotionRange>(), ::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::VRBoneTransform_t>*&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetSkeletalBoneData::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_GetSkeletalBoneData::*)(uint64_t, OVR::OpenVR::EVRSkeletalTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange, ::Array<OVR::OpenVR::VRBoneTransform_t>*&, uint, uint64_t, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_GetSkeletalBoneData::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetSkeletalBoneData*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalTransformSpace>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalMotionRange>(), ::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::VRBoneTransform_t>*&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetSkeletalBoneData::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetSkeletalBoneData::*)(System::IAsyncResult*)>(&IVRInput::_GetSkeletalBoneData::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetSkeletalBoneData*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetSkeletalBoneDataCompressed
#include "OVR/OpenVR/IVRInput__GetSkeletalBoneDataCompressed.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.EVRSkeletalTransformSpace
#include "OVR/OpenVR/EVRSkeletalTransformSpace.hpp"
// Including type: OVR.OpenVR.EVRSkeletalMotionRange
#include "OVR/OpenVR/EVRSkeletalMotionRange.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalBoneDataCompressed.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetSkeletalBoneDataCompressed::Invoke(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, System::IntPtr pvCompressedData, uint unCompressedSize, uint& punRequiredCompressedSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalBoneDataCompressed::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eTransformSpace), ::il2cpp_utils::ExtractType(eMotionRange), ::il2cpp_utils::ExtractType(pvCompressedData), ::il2cpp_utils::ExtractType(unCompressedSize), ::il2cpp_utils::ExtractType(punRequiredCompressedSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, pvCompressedData, unCompressedSize, punRequiredCompressedSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalBoneDataCompressed.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetSkeletalBoneDataCompressed::BeginInvoke(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, System::IntPtr pvCompressedData, uint unCompressedSize, uint& punRequiredCompressedSize, uint64_t ulRestrictToDevice, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalBoneDataCompressed::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eTransformSpace), ::il2cpp_utils::ExtractType(eMotionRange), ::il2cpp_utils::ExtractType(pvCompressedData), ::il2cpp_utils::ExtractType(unCompressedSize), ::il2cpp_utils::ExtractType(punRequiredCompressedSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, pvCompressedData, unCompressedSize, punRequiredCompressedSize, ulRestrictToDevice, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalBoneDataCompressed.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetSkeletalBoneDataCompressed::EndInvoke(uint& punRequiredCompressedSize, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalBoneDataCompressed::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(punRequiredCompressedSize), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, punRequiredCompressedSize, result);
}
// Writing MetadataGetter for method: IVRInput::_GetSkeletalBoneDataCompressed::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetSkeletalBoneDataCompressed::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetSkeletalBoneDataCompressed::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetSkeletalBoneDataCompressed*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetSkeletalBoneDataCompressed::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetSkeletalBoneDataCompressed::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetSkeletalBoneDataCompressed*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetSkeletalBoneDataCompressed::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetSkeletalBoneDataCompressed::*)(uint64_t, OVR::OpenVR::EVRSkeletalTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange, System::IntPtr, uint, uint&, uint64_t)>(&IVRInput::_GetSkeletalBoneDataCompressed::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetSkeletalBoneDataCompressed*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalTransformSpace>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalMotionRange>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetSkeletalBoneDataCompressed::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_GetSkeletalBoneDataCompressed::*)(uint64_t, OVR::OpenVR::EVRSkeletalTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange, System::IntPtr, uint, uint&, uint64_t, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_GetSkeletalBoneDataCompressed::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetSkeletalBoneDataCompressed*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalTransformSpace>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalMotionRange>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetSkeletalBoneDataCompressed::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetSkeletalBoneDataCompressed::*)(uint&, System::IAsyncResult*)>(&IVRInput::_GetSkeletalBoneDataCompressed::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetSkeletalBoneDataCompressed*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_DecompressSkeletalBoneData
#include "OVR/OpenVR/IVRInput__DecompressSkeletalBoneData.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.EVRSkeletalTransformSpace
#include "OVR/OpenVR/EVRSkeletalTransformSpace.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_DecompressSkeletalBoneData.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_DecompressSkeletalBoneData::Invoke(System::IntPtr pvCompressedBuffer, uint unCompressedBufferSize, OVR::OpenVR::EVRSkeletalTransformSpace& peTransformSpace, ::Array<OVR::OpenVR::VRBoneTransform_t>*& pTransformArray, uint unTransformArrayCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_DecompressSkeletalBoneData::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pvCompressedBuffer), ::il2cpp_utils::ExtractType(unCompressedBufferSize), ::il2cpp_utils::ExtractType(peTransformSpace), ::il2cpp_utils::ExtractType(pTransformArray), ::il2cpp_utils::ExtractType(unTransformArrayCount)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pvCompressedBuffer, unCompressedBufferSize, peTransformSpace, pTransformArray, unTransformArrayCount);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_DecompressSkeletalBoneData.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_DecompressSkeletalBoneData::BeginInvoke(System::IntPtr pvCompressedBuffer, uint unCompressedBufferSize, OVR::OpenVR::EVRSkeletalTransformSpace& peTransformSpace, ::Array<OVR::OpenVR::VRBoneTransform_t>*& pTransformArray, uint unTransformArrayCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_DecompressSkeletalBoneData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pvCompressedBuffer), ::il2cpp_utils::ExtractType(unCompressedBufferSize), ::il2cpp_utils::ExtractType(peTransformSpace), ::il2cpp_utils::ExtractType(pTransformArray), ::il2cpp_utils::ExtractType(unTransformArrayCount), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pvCompressedBuffer, unCompressedBufferSize, peTransformSpace, pTransformArray, unTransformArrayCount, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_DecompressSkeletalBoneData.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_DecompressSkeletalBoneData::EndInvoke(OVR::OpenVR::EVRSkeletalTransformSpace& peTransformSpace, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_DecompressSkeletalBoneData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peTransformSpace), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, peTransformSpace, result);
}
// Writing MetadataGetter for method: IVRInput::_DecompressSkeletalBoneData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_DecompressSkeletalBoneData::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_DecompressSkeletalBoneData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_DecompressSkeletalBoneData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_DecompressSkeletalBoneData::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_DecompressSkeletalBoneData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_DecompressSkeletalBoneData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_DecompressSkeletalBoneData::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_DecompressSkeletalBoneData::*)(System::IntPtr, uint, OVR::OpenVR::EVRSkeletalTransformSpace&, ::Array<OVR::OpenVR::VRBoneTransform_t>*&, uint)>(&IVRInput::_DecompressSkeletalBoneData::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_DecompressSkeletalBoneData*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalTransformSpace&>(), ::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::VRBoneTransform_t>*&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_DecompressSkeletalBoneData::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_DecompressSkeletalBoneData::*)(System::IntPtr, uint, OVR::OpenVR::EVRSkeletalTransformSpace&, ::Array<OVR::OpenVR::VRBoneTransform_t>*&, uint, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_DecompressSkeletalBoneData::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_DecompressSkeletalBoneData*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalTransformSpace&>(), ::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::VRBoneTransform_t>*&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_DecompressSkeletalBoneData::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_DecompressSkeletalBoneData::*)(OVR::OpenVR::EVRSkeletalTransformSpace&, System::IAsyncResult*)>(&IVRInput::_DecompressSkeletalBoneData::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_DecompressSkeletalBoneData*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalTransformSpace&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_TriggerHapticVibrationAction
#include "OVR/OpenVR/IVRInput__TriggerHapticVibrationAction.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_TriggerHapticVibrationAction.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_TriggerHapticVibrationAction::Invoke(uint64_t action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_TriggerHapticVibrationAction::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(fStartSecondsFromNow), ::il2cpp_utils::ExtractType(fDurationSeconds), ::il2cpp_utils::ExtractType(fFrequency), ::il2cpp_utils::ExtractType(fAmplitude), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, fStartSecondsFromNow, fDurationSeconds, fFrequency, fAmplitude, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_TriggerHapticVibrationAction.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_TriggerHapticVibrationAction::BeginInvoke(uint64_t action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, uint64_t ulRestrictToDevice, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_TriggerHapticVibrationAction::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(fStartSecondsFromNow), ::il2cpp_utils::ExtractType(fDurationSeconds), ::il2cpp_utils::ExtractType(fFrequency), ::il2cpp_utils::ExtractType(fAmplitude), ::il2cpp_utils::ExtractType(ulRestrictToDevice), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, action, fStartSecondsFromNow, fDurationSeconds, fFrequency, fAmplitude, ulRestrictToDevice, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_TriggerHapticVibrationAction.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_TriggerHapticVibrationAction::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_TriggerHapticVibrationAction::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRInput::_TriggerHapticVibrationAction::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_TriggerHapticVibrationAction::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_TriggerHapticVibrationAction::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_TriggerHapticVibrationAction*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_TriggerHapticVibrationAction::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_TriggerHapticVibrationAction::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_TriggerHapticVibrationAction*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_TriggerHapticVibrationAction::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_TriggerHapticVibrationAction::*)(uint64_t, float, float, float, float, uint64_t)>(&IVRInput::_TriggerHapticVibrationAction::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_TriggerHapticVibrationAction*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_TriggerHapticVibrationAction::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_TriggerHapticVibrationAction::*)(uint64_t, float, float, float, float, uint64_t, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_TriggerHapticVibrationAction::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_TriggerHapticVibrationAction*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_TriggerHapticVibrationAction::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_TriggerHapticVibrationAction::*)(System::IAsyncResult*)>(&IVRInput::_TriggerHapticVibrationAction::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_TriggerHapticVibrationAction*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetActionOrigins
#include "OVR/OpenVR/IVRInput__GetActionOrigins.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionOrigins.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetActionOrigins::Invoke(uint64_t actionSetHandle, uint64_t digitalActionHandle, ::Array<uint64_t>*& originsOut, uint originOutCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionOrigins::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actionSetHandle), ::il2cpp_utils::ExtractType(digitalActionHandle), ::il2cpp_utils::ExtractType(originsOut), ::il2cpp_utils::ExtractType(originOutCount)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, actionSetHandle, digitalActionHandle, originsOut, originOutCount);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionOrigins.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetActionOrigins::BeginInvoke(uint64_t actionSetHandle, uint64_t digitalActionHandle, ::Array<uint64_t>*& originsOut, uint originOutCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionOrigins::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actionSetHandle), ::il2cpp_utils::ExtractType(digitalActionHandle), ::il2cpp_utils::ExtractType(originsOut), ::il2cpp_utils::ExtractType(originOutCount), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, actionSetHandle, digitalActionHandle, originsOut, originOutCount, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionOrigins.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetActionOrigins::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionOrigins::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRInput::_GetActionOrigins::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetActionOrigins::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetActionOrigins::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetActionOrigins*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetActionOrigins::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetActionOrigins::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetActionOrigins*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetActionOrigins::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetActionOrigins::*)(uint64_t, uint64_t, ::Array<uint64_t>*&, uint)>(&IVRInput::_GetActionOrigins::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetActionOrigins*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint64_t>*&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetActionOrigins::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_GetActionOrigins::*)(uint64_t, uint64_t, ::Array<uint64_t>*&, uint, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_GetActionOrigins::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetActionOrigins*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint64_t>*&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetActionOrigins::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetActionOrigins::*)(System::IAsyncResult*)>(&IVRInput::_GetActionOrigins::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetActionOrigins*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetOriginLocalizedName
#include "OVR/OpenVR/IVRInput__GetOriginLocalizedName.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetOriginLocalizedName.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetOriginLocalizedName::Invoke(uint64_t origin, System::Text::StringBuilder* pchNameArray, uint unNameArraySize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetOriginLocalizedName::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(pchNameArray), ::il2cpp_utils::ExtractType(unNameArraySize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, origin, pchNameArray, unNameArraySize);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetOriginLocalizedName.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetOriginLocalizedName::BeginInvoke(uint64_t origin, System::Text::StringBuilder* pchNameArray, uint unNameArraySize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetOriginLocalizedName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(pchNameArray), ::il2cpp_utils::ExtractType(unNameArraySize), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, origin, pchNameArray, unNameArraySize, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetOriginLocalizedName.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetOriginLocalizedName::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetOriginLocalizedName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRInput::_GetOriginLocalizedName::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetOriginLocalizedName::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetOriginLocalizedName::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetOriginLocalizedName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetOriginLocalizedName::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetOriginLocalizedName::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetOriginLocalizedName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetOriginLocalizedName::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetOriginLocalizedName::*)(uint64_t, System::Text::StringBuilder*, uint)>(&IVRInput::_GetOriginLocalizedName::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetOriginLocalizedName*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetOriginLocalizedName::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_GetOriginLocalizedName::*)(uint64_t, System::Text::StringBuilder*, uint, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_GetOriginLocalizedName::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetOriginLocalizedName*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetOriginLocalizedName::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetOriginLocalizedName::*)(System::IAsyncResult*)>(&IVRInput::_GetOriginLocalizedName::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetOriginLocalizedName*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetOriginTrackedDeviceInfo
#include "OVR/OpenVR/IVRInput__GetOriginTrackedDeviceInfo.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.InputOriginInfo_t
#include "OVR/OpenVR/InputOriginInfo_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetOriginTrackedDeviceInfo.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetOriginTrackedDeviceInfo::Invoke(uint64_t origin, OVR::OpenVR::InputOriginInfo_t& pOriginInfo, uint unOriginInfoSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetOriginTrackedDeviceInfo::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(pOriginInfo), ::il2cpp_utils::ExtractType(unOriginInfoSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, origin, pOriginInfo, unOriginInfoSize);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetOriginTrackedDeviceInfo.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetOriginTrackedDeviceInfo::BeginInvoke(uint64_t origin, OVR::OpenVR::InputOriginInfo_t& pOriginInfo, uint unOriginInfoSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetOriginTrackedDeviceInfo::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(pOriginInfo), ::il2cpp_utils::ExtractType(unOriginInfoSize), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, origin, pOriginInfo, unOriginInfoSize, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetOriginTrackedDeviceInfo.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetOriginTrackedDeviceInfo::EndInvoke(OVR::OpenVR::InputOriginInfo_t& pOriginInfo, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetOriginTrackedDeviceInfo::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOriginInfo), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pOriginInfo, result);
}
// Writing MetadataGetter for method: IVRInput::_GetOriginTrackedDeviceInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetOriginTrackedDeviceInfo::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetOriginTrackedDeviceInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetOriginTrackedDeviceInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_GetOriginTrackedDeviceInfo::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_GetOriginTrackedDeviceInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetOriginTrackedDeviceInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetOriginTrackedDeviceInfo::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetOriginTrackedDeviceInfo::*)(uint64_t, OVR::OpenVR::InputOriginInfo_t&, uint)>(&IVRInput::_GetOriginTrackedDeviceInfo::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetOriginTrackedDeviceInfo*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputOriginInfo_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetOriginTrackedDeviceInfo::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_GetOriginTrackedDeviceInfo::*)(uint64_t, OVR::OpenVR::InputOriginInfo_t&, uint, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_GetOriginTrackedDeviceInfo::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetOriginTrackedDeviceInfo*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputOriginInfo_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_GetOriginTrackedDeviceInfo::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_GetOriginTrackedDeviceInfo::*)(OVR::OpenVR::InputOriginInfo_t&, System::IAsyncResult*)>(&IVRInput::_GetOriginTrackedDeviceInfo::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_GetOriginTrackedDeviceInfo*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputOriginInfo_t&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_ShowActionOrigins
#include "OVR/OpenVR/IVRInput__ShowActionOrigins.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_ShowActionOrigins.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_ShowActionOrigins::Invoke(uint64_t actionSetHandle, uint64_t ulActionHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_ShowActionOrigins::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actionSetHandle), ::il2cpp_utils::ExtractType(ulActionHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, actionSetHandle, ulActionHandle);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_ShowActionOrigins.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_ShowActionOrigins::BeginInvoke(uint64_t actionSetHandle, uint64_t ulActionHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_ShowActionOrigins::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actionSetHandle), ::il2cpp_utils::ExtractType(ulActionHandle), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, actionSetHandle, ulActionHandle, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_ShowActionOrigins.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_ShowActionOrigins::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_ShowActionOrigins::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRInput::_ShowActionOrigins::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_ShowActionOrigins::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_ShowActionOrigins::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_ShowActionOrigins*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_ShowActionOrigins::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_ShowActionOrigins::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_ShowActionOrigins*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_ShowActionOrigins::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_ShowActionOrigins::*)(uint64_t, uint64_t)>(&IVRInput::_ShowActionOrigins::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_ShowActionOrigins*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_ShowActionOrigins::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_ShowActionOrigins::*)(uint64_t, uint64_t, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_ShowActionOrigins::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_ShowActionOrigins*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_ShowActionOrigins::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_ShowActionOrigins::*)(System::IAsyncResult*)>(&IVRInput::_ShowActionOrigins::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_ShowActionOrigins*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_ShowBindingsForActionSet
#include "OVR/OpenVR/IVRInput__ShowBindingsForActionSet.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_ShowBindingsForActionSet.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_ShowBindingsForActionSet::Invoke(::Array<OVR::OpenVR::VRActiveActionSet_t>*& pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount, uint64_t originToHighlight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_ShowBindingsForActionSet::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSets), ::il2cpp_utils::ExtractType(unSizeOfVRSelectedActionSet_t), ::il2cpp_utils::ExtractType(unSetCount), ::il2cpp_utils::ExtractType(originToHighlight)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t, unSetCount, originToHighlight);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_ShowBindingsForActionSet.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_ShowBindingsForActionSet::BeginInvoke(::Array<OVR::OpenVR::VRActiveActionSet_t>*& pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount, uint64_t originToHighlight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_ShowBindingsForActionSet::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSets), ::il2cpp_utils::ExtractType(unSizeOfVRSelectedActionSet_t), ::il2cpp_utils::ExtractType(unSetCount), ::il2cpp_utils::ExtractType(originToHighlight), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t, unSetCount, originToHighlight, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_ShowBindingsForActionSet.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_ShowBindingsForActionSet::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_ShowBindingsForActionSet::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRInput::_ShowBindingsForActionSet::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_ShowBindingsForActionSet::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_ShowBindingsForActionSet::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_ShowBindingsForActionSet*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRInput::_ShowBindingsForActionSet::*)(::Il2CppObject*, System::IntPtr)>(&IVRInput::_ShowBindingsForActionSet::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_ShowBindingsForActionSet*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_ShowBindingsForActionSet::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_ShowBindingsForActionSet::*)(::Array<OVR::OpenVR::VRActiveActionSet_t>*&, uint, uint, uint64_t)>(&IVRInput::_ShowBindingsForActionSet::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_ShowBindingsForActionSet*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::VRActiveActionSet_t>*&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_ShowBindingsForActionSet::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRInput::_ShowBindingsForActionSet::*)(::Array<OVR::OpenVR::VRActiveActionSet_t>*&, uint, uint, uint64_t, System::AsyncCallback*, ::Il2CppObject*)>(&IVRInput::_ShowBindingsForActionSet::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_ShowBindingsForActionSet*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::VRActiveActionSet_t>*&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRInput::_ShowBindingsForActionSet::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (IVRInput::_ShowBindingsForActionSet::*)(System::IAsyncResult*)>(&IVRInput::_ShowBindingsForActionSet::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRInput::_ShowBindingsForActionSet*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRIOBuffer/_Open
#include "OVR/OpenVR/IVRIOBuffer__Open.hpp"
// Including type: OVR.OpenVR.EIOBufferError
#include "OVR/OpenVR/EIOBufferError.hpp"
// Including type: OVR.OpenVR.EIOBufferMode
#include "OVR/OpenVR/EIOBufferMode.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Open.Invoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Open::Invoke(::Il2CppString* pchPath, OVR::OpenVR::EIOBufferMode mode, uint unElementSize, uint unElements, uint64_t& pulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Open::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchPath), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(unElementSize), ::il2cpp_utils::ExtractType(unElements), ::il2cpp_utils::ExtractType(pulBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, pchPath, mode, unElementSize, unElements, pulBuffer);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Open.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRIOBuffer::_Open::BeginInvoke(::Il2CppString* pchPath, OVR::OpenVR::EIOBufferMode mode, uint unElementSize, uint unElements, uint64_t& pulBuffer, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Open::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchPath), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(unElementSize), ::il2cpp_utils::ExtractType(unElements), ::il2cpp_utils::ExtractType(pulBuffer), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchPath, mode, unElementSize, unElements, pulBuffer, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Open.EndInvoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Open::EndInvoke(uint64_t& pulBuffer, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Open::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pulBuffer), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, pulBuffer, result);
}
// Writing MetadataGetter for method: IVRIOBuffer::_Open::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRIOBuffer::_Open::*)(::Il2CppObject*, System::IntPtr)>(&IVRIOBuffer::_Open::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Open*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRIOBuffer::_Open::*)(::Il2CppObject*, System::IntPtr)>(&IVRIOBuffer::_Open::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Open*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRIOBuffer::_Open::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EIOBufferError (IVRIOBuffer::_Open::*)(::Il2CppString*, OVR::OpenVR::EIOBufferMode, uint, uint, uint64_t&)>(&IVRIOBuffer::_Open::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Open*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EIOBufferMode>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()});
  }
};
// Writing MetadataGetter for method: IVRIOBuffer::_Open::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRIOBuffer::_Open::*)(::Il2CppString*, OVR::OpenVR::EIOBufferMode, uint, uint, uint64_t&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRIOBuffer::_Open::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Open*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EIOBufferMode>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRIOBuffer::_Open::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EIOBufferError (IVRIOBuffer::_Open::*)(uint64_t&, System::IAsyncResult*)>(&IVRIOBuffer::_Open::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Open*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRIOBuffer/_Close
#include "OVR/OpenVR/IVRIOBuffer__Close.hpp"
// Including type: OVR.OpenVR.EIOBufferError
#include "OVR/OpenVR/EIOBufferError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Close.Invoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Close::Invoke(uint64_t ulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Close::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, ulBuffer);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Close.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRIOBuffer::_Close::BeginInvoke(uint64_t ulBuffer, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Close::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulBuffer, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Close.EndInvoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Close::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Close::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRIOBuffer::_Close::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRIOBuffer::_Close::*)(::Il2CppObject*, System::IntPtr)>(&IVRIOBuffer::_Close::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Close*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRIOBuffer::_Close::*)(::Il2CppObject*, System::IntPtr)>(&IVRIOBuffer::_Close::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Close*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRIOBuffer::_Close::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EIOBufferError (IVRIOBuffer::_Close::*)(uint64_t)>(&IVRIOBuffer::_Close::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Close*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: IVRIOBuffer::_Close::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRIOBuffer::_Close::*)(uint64_t, System::AsyncCallback*, ::Il2CppObject*)>(&IVRIOBuffer::_Close::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Close*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRIOBuffer::_Close::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EIOBufferError (IVRIOBuffer::_Close::*)(System::IAsyncResult*)>(&IVRIOBuffer::_Close::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Close*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRIOBuffer/_Read
#include "OVR/OpenVR/IVRIOBuffer__Read.hpp"
// Including type: OVR.OpenVR.EIOBufferError
#include "OVR/OpenVR/EIOBufferError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Read.Invoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Read::Invoke(uint64_t ulBuffer, System::IntPtr pDst, uint unBytes, uint& punRead) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Read::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(pDst), ::il2cpp_utils::ExtractType(unBytes), ::il2cpp_utils::ExtractType(punRead)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, ulBuffer, pDst, unBytes, punRead);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Read.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRIOBuffer::_Read::BeginInvoke(uint64_t ulBuffer, System::IntPtr pDst, uint unBytes, uint& punRead, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Read::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(pDst), ::il2cpp_utils::ExtractType(unBytes), ::il2cpp_utils::ExtractType(punRead), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulBuffer, pDst, unBytes, punRead, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Read.EndInvoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Read::EndInvoke(uint& punRead, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Read::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(punRead), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, punRead, result);
}
// Writing MetadataGetter for method: IVRIOBuffer::_Read::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRIOBuffer::_Read::*)(::Il2CppObject*, System::IntPtr)>(&IVRIOBuffer::_Read::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Read*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRIOBuffer::_Read::*)(::Il2CppObject*, System::IntPtr)>(&IVRIOBuffer::_Read::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Read*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRIOBuffer::_Read::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EIOBufferError (IVRIOBuffer::_Read::*)(uint64_t, System::IntPtr, uint, uint&)>(&IVRIOBuffer::_Read::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Read*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: IVRIOBuffer::_Read::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRIOBuffer::_Read::*)(uint64_t, System::IntPtr, uint, uint&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRIOBuffer::_Read::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Read*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRIOBuffer::_Read::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EIOBufferError (IVRIOBuffer::_Read::*)(uint&, System::IAsyncResult*)>(&IVRIOBuffer::_Read::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Read*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRIOBuffer/_Write
#include "OVR/OpenVR/IVRIOBuffer__Write.hpp"
// Including type: OVR.OpenVR.EIOBufferError
#include "OVR/OpenVR/EIOBufferError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Write.Invoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Write::Invoke(uint64_t ulBuffer, System::IntPtr pSrc, uint unBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Write::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(unBytes)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, ulBuffer, pSrc, unBytes);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Write.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRIOBuffer::_Write::BeginInvoke(uint64_t ulBuffer, System::IntPtr pSrc, uint unBytes, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Write::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(unBytes), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulBuffer, pSrc, unBytes, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Write.EndInvoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Write::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Write::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRIOBuffer::_Write::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRIOBuffer::_Write::*)(::Il2CppObject*, System::IntPtr)>(&IVRIOBuffer::_Write::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Write*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRIOBuffer::_Write::*)(::Il2CppObject*, System::IntPtr)>(&IVRIOBuffer::_Write::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Write*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRIOBuffer::_Write::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EIOBufferError (IVRIOBuffer::_Write::*)(uint64_t, System::IntPtr, uint)>(&IVRIOBuffer::_Write::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Write*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: IVRIOBuffer::_Write::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRIOBuffer::_Write::*)(uint64_t, System::IntPtr, uint, System::AsyncCallback*, ::Il2CppObject*)>(&IVRIOBuffer::_Write::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Write*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRIOBuffer::_Write::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EIOBufferError (IVRIOBuffer::_Write::*)(System::IAsyncResult*)>(&IVRIOBuffer::_Write::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_Write*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRIOBuffer/_PropertyContainer
#include "OVR/OpenVR/IVRIOBuffer__PropertyContainer.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_PropertyContainer.Invoke
uint64_t OVR::OpenVR::IVRIOBuffer::_PropertyContainer::Invoke(uint64_t ulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_PropertyContainer::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, ulBuffer);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_PropertyContainer.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRIOBuffer::_PropertyContainer::BeginInvoke(uint64_t ulBuffer, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_PropertyContainer::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulBuffer, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_PropertyContainer.EndInvoke
uint64_t OVR::OpenVR::IVRIOBuffer::_PropertyContainer::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_PropertyContainer::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IVRIOBuffer::_PropertyContainer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRIOBuffer::_PropertyContainer::*)(::Il2CppObject*, System::IntPtr)>(&IVRIOBuffer::_PropertyContainer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_PropertyContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRIOBuffer::_PropertyContainer::*)(::Il2CppObject*, System::IntPtr)>(&IVRIOBuffer::_PropertyContainer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_PropertyContainer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRIOBuffer::_PropertyContainer::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (IVRIOBuffer::_PropertyContainer::*)(uint64_t)>(&IVRIOBuffer::_PropertyContainer::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_PropertyContainer*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: IVRIOBuffer::_PropertyContainer::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRIOBuffer::_PropertyContainer::*)(uint64_t, System::AsyncCallback*, ::Il2CppObject*)>(&IVRIOBuffer::_PropertyContainer::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_PropertyContainer*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRIOBuffer::_PropertyContainer::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (IVRIOBuffer::_PropertyContainer::*)(System::IAsyncResult*)>(&IVRIOBuffer::_PropertyContainer::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRIOBuffer::_PropertyContainer*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromDescriptor
#include "OVR/OpenVR/IVRSpatialAnchors__CreateSpatialAnchorFromDescriptor.hpp"
// Including type: OVR.OpenVR.EVRSpatialAnchorError
#include "OVR/OpenVR/EVRSpatialAnchorError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromDescriptor.Invoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::Invoke(::Il2CppString* pchDescriptor, uint& pHandleOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchDescriptor), ::il2cpp_utils::ExtractType(pHandleOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, pchDescriptor, pHandleOut);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromDescriptor.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::BeginInvoke(::Il2CppString* pchDescriptor, uint& pHandleOut, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchDescriptor), ::il2cpp_utils::ExtractType(pHandleOut), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchDescriptor, pHandleOut, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromDescriptor.EndInvoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::EndInvoke(uint& pHandleOut, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pHandleOut), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, pHandleOut, result);
}
// Writing MetadataGetter for method: IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::*)(::Il2CppObject*, System::IntPtr)>(&IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::*)(::Il2CppObject*, System::IntPtr)>(&IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRSpatialAnchorError (IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::*)(::Il2CppString*, uint&)>(&IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::*)(::Il2CppString*, uint&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRSpatialAnchorError (IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::*)(uint&, System::IAsyncResult*)>(&IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromPose
#include "OVR/OpenVR/IVRSpatialAnchors__CreateSpatialAnchorFromPose.hpp"
// Including type: OVR.OpenVR.EVRSpatialAnchorError
#include "OVR/OpenVR/EVRSpatialAnchorError.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.SpatialAnchorPose_t
#include "OVR/OpenVR/SpatialAnchorPose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromPose.Invoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::Invoke(uint unDeviceIndex, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::SpatialAnchorPose_t& pPose, uint& pHandleOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pPose), ::il2cpp_utils::ExtractType(pHandleOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, unDeviceIndex, eOrigin, pPose, pHandleOut);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromPose.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::BeginInvoke(uint unDeviceIndex, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::SpatialAnchorPose_t& pPose, uint& pHandleOut, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pPose), ::il2cpp_utils::ExtractType(pHandleOut), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, eOrigin, pPose, pHandleOut, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromPose.EndInvoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::EndInvoke(OVR::OpenVR::SpatialAnchorPose_t& pPose, uint& pHandleOut, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pPose), ::il2cpp_utils::ExtractType(pHandleOut), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, pPose, pHandleOut, result);
}
// Writing MetadataGetter for method: IVRSpatialAnchors::_CreateSpatialAnchorFromPose::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSpatialAnchors::_CreateSpatialAnchorFromPose::*)(::Il2CppObject*, System::IntPtr)>(&IVRSpatialAnchors::_CreateSpatialAnchorFromPose::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_CreateSpatialAnchorFromPose*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSpatialAnchors::_CreateSpatialAnchorFromPose::*)(::Il2CppObject*, System::IntPtr)>(&IVRSpatialAnchors::_CreateSpatialAnchorFromPose::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_CreateSpatialAnchorFromPose*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSpatialAnchors::_CreateSpatialAnchorFromPose::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRSpatialAnchorError (IVRSpatialAnchors::_CreateSpatialAnchorFromPose::*)(uint, OVR::OpenVR::ETrackingUniverseOrigin, OVR::OpenVR::SpatialAnchorPose_t&, uint&)>(&IVRSpatialAnchors::_CreateSpatialAnchorFromPose::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_CreateSpatialAnchorFromPose*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::SpatialAnchorPose_t&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: IVRSpatialAnchors::_CreateSpatialAnchorFromPose::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSpatialAnchors::_CreateSpatialAnchorFromPose::*)(uint, OVR::OpenVR::ETrackingUniverseOrigin, OVR::OpenVR::SpatialAnchorPose_t&, uint&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSpatialAnchors::_CreateSpatialAnchorFromPose::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_CreateSpatialAnchorFromPose*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::SpatialAnchorPose_t&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSpatialAnchors::_CreateSpatialAnchorFromPose::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRSpatialAnchorError (IVRSpatialAnchors::_CreateSpatialAnchorFromPose::*)(OVR::OpenVR::SpatialAnchorPose_t&, uint&, System::IAsyncResult*)>(&IVRSpatialAnchors::_CreateSpatialAnchorFromPose::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_CreateSpatialAnchorFromPose*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::SpatialAnchorPose_t&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorPose
#include "OVR/OpenVR/IVRSpatialAnchors__GetSpatialAnchorPose.hpp"
// Including type: OVR.OpenVR.EVRSpatialAnchorError
#include "OVR/OpenVR/EVRSpatialAnchorError.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.SpatialAnchorPose_t
#include "OVR/OpenVR/SpatialAnchorPose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorPose.Invoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorPose::Invoke(uint unHandle, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::SpatialAnchorPose_t& pPoseOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorPose::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pPoseOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, unHandle, eOrigin, pPoseOut);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorPose.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorPose::BeginInvoke(uint unHandle, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::SpatialAnchorPose_t& pPoseOut, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorPose::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pPoseOut), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unHandle, eOrigin, pPoseOut, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorPose.EndInvoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorPose::EndInvoke(OVR::OpenVR::SpatialAnchorPose_t& pPoseOut, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorPose::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pPoseOut), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, pPoseOut, result);
}
// Writing MetadataGetter for method: IVRSpatialAnchors::_GetSpatialAnchorPose::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSpatialAnchors::_GetSpatialAnchorPose::*)(::Il2CppObject*, System::IntPtr)>(&IVRSpatialAnchors::_GetSpatialAnchorPose::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_GetSpatialAnchorPose*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSpatialAnchors::_GetSpatialAnchorPose::*)(::Il2CppObject*, System::IntPtr)>(&IVRSpatialAnchors::_GetSpatialAnchorPose::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_GetSpatialAnchorPose*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSpatialAnchors::_GetSpatialAnchorPose::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRSpatialAnchorError (IVRSpatialAnchors::_GetSpatialAnchorPose::*)(uint, OVR::OpenVR::ETrackingUniverseOrigin, OVR::OpenVR::SpatialAnchorPose_t&)>(&IVRSpatialAnchors::_GetSpatialAnchorPose::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_GetSpatialAnchorPose*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::SpatialAnchorPose_t&>()});
  }
};
// Writing MetadataGetter for method: IVRSpatialAnchors::_GetSpatialAnchorPose::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSpatialAnchors::_GetSpatialAnchorPose::*)(uint, OVR::OpenVR::ETrackingUniverseOrigin, OVR::OpenVR::SpatialAnchorPose_t&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSpatialAnchors::_GetSpatialAnchorPose::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_GetSpatialAnchorPose*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::SpatialAnchorPose_t&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSpatialAnchors::_GetSpatialAnchorPose::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRSpatialAnchorError (IVRSpatialAnchors::_GetSpatialAnchorPose::*)(OVR::OpenVR::SpatialAnchorPose_t&, System::IAsyncResult*)>(&IVRSpatialAnchors::_GetSpatialAnchorPose::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_GetSpatialAnchorPose*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::SpatialAnchorPose_t&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorDescriptor
#include "OVR/OpenVR/IVRSpatialAnchors__GetSpatialAnchorDescriptor.hpp"
// Including type: OVR.OpenVR.EVRSpatialAnchorError
#include "OVR/OpenVR/EVRSpatialAnchorError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorDescriptor.Invoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::Invoke(uint unHandle, System::Text::StringBuilder* pchDescriptorOut, uint& punDescriptorBufferLenInOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(pchDescriptorOut), ::il2cpp_utils::ExtractType(punDescriptorBufferLenInOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, unHandle, pchDescriptorOut, punDescriptorBufferLenInOut);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorDescriptor.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::BeginInvoke(uint unHandle, System::Text::StringBuilder* pchDescriptorOut, uint& punDescriptorBufferLenInOut, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(pchDescriptorOut), ::il2cpp_utils::ExtractType(punDescriptorBufferLenInOut), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unHandle, pchDescriptorOut, punDescriptorBufferLenInOut, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorDescriptor.EndInvoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::EndInvoke(uint& punDescriptorBufferLenInOut, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(punDescriptorBufferLenInOut), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, punDescriptorBufferLenInOut, result);
}
// Writing MetadataGetter for method: IVRSpatialAnchors::_GetSpatialAnchorDescriptor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSpatialAnchors::_GetSpatialAnchorDescriptor::*)(::Il2CppObject*, System::IntPtr)>(&IVRSpatialAnchors::_GetSpatialAnchorDescriptor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_GetSpatialAnchorDescriptor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IVRSpatialAnchors::_GetSpatialAnchorDescriptor::*)(::Il2CppObject*, System::IntPtr)>(&IVRSpatialAnchors::_GetSpatialAnchorDescriptor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_GetSpatialAnchorDescriptor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IVRSpatialAnchors::_GetSpatialAnchorDescriptor::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRSpatialAnchorError (IVRSpatialAnchors::_GetSpatialAnchorDescriptor::*)(uint, System::Text::StringBuilder*, uint&)>(&IVRSpatialAnchors::_GetSpatialAnchorDescriptor::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_GetSpatialAnchorDescriptor*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: IVRSpatialAnchors::_GetSpatialAnchorDescriptor::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IVRSpatialAnchors::_GetSpatialAnchorDescriptor::*)(uint, System::Text::StringBuilder*, uint&, System::AsyncCallback*, ::Il2CppObject*)>(&IVRSpatialAnchors::_GetSpatialAnchorDescriptor::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_GetSpatialAnchorDescriptor*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IVRSpatialAnchors::_GetSpatialAnchorDescriptor::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRSpatialAnchorError (IVRSpatialAnchors::_GetSpatialAnchorDescriptor::*)(uint&, System::IAsyncResult*)>(&IVRSpatialAnchors::_GetSpatialAnchorDescriptor::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IVRSpatialAnchors::_GetSpatialAnchorDescriptor*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRSystem
#include "OVR/OpenVR/CVRSystem.hpp"
// Including type: OVR.OpenVR.CVRSystem/_PollNextEventPacked
#include "OVR/OpenVR/CVRSystem__PollNextEventPacked.hpp"
// Including type: OVR.OpenVR.CVRSystem/PollNextEventUnion
#include "OVR/OpenVR/CVRSystem_PollNextEventUnion.hpp"
// Including type: OVR.OpenVR.CVRSystem/_GetControllerStatePacked
#include "OVR/OpenVR/CVRSystem__GetControllerStatePacked.hpp"
// Including type: OVR.OpenVR.CVRSystem/GetControllerStateUnion
#include "OVR/OpenVR/CVRSystem_GetControllerStateUnion.hpp"
// Including type: OVR.OpenVR.CVRSystem/_GetControllerStateWithPosePacked
#include "OVR/OpenVR/CVRSystem__GetControllerStateWithPosePacked.hpp"
// Including type: OVR.OpenVR.CVRSystem/GetControllerStateWithPoseUnion
#include "OVR/OpenVR/CVRSystem_GetControllerStateWithPoseUnion.hpp"
// Including type: OVR.OpenVR.HmdMatrix44_t
#include "OVR/OpenVR/HmdMatrix44_t.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
// Including type: OVR.OpenVR.DistortionCoordinates_t
#include "OVR/OpenVR/DistortionCoordinates_t.hpp"
// Including type: OVR.OpenVR.ETextureType
#include "OVR/OpenVR/ETextureType.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.ETrackedDeviceClass
#include "OVR/OpenVR/ETrackedDeviceClass.hpp"
// Including type: OVR.OpenVR.EDeviceActivityLevel
#include "OVR/OpenVR/EDeviceActivityLevel.hpp"
// Including type: OVR.OpenVR.ETrackedControllerRole
#include "OVR/OpenVR/ETrackedControllerRole.hpp"
// Including type: OVR.OpenVR.ETrackedDeviceProperty
#include "OVR/OpenVR/ETrackedDeviceProperty.hpp"
// Including type: OVR.OpenVR.ETrackedPropertyError
#include "OVR/OpenVR/ETrackedPropertyError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.VREvent_t
#include "OVR/OpenVR/VREvent_t.hpp"
// Including type: OVR.OpenVR.EVREventType
#include "OVR/OpenVR/EVREventType.hpp"
// Including type: OVR.OpenVR.HiddenAreaMesh_t
#include "OVR/OpenVR/HiddenAreaMesh_t.hpp"
// Including type: OVR.OpenVR.EHiddenAreaMeshType
#include "OVR/OpenVR/EHiddenAreaMeshType.hpp"
// Including type: OVR.OpenVR.VRControllerState_t
#include "OVR/OpenVR/VRControllerState_t.hpp"
// Including type: OVR.OpenVR.EVRButtonId
#include "OVR/OpenVR/EVRButtonId.hpp"
// Including type: OVR.OpenVR.EVRControllerAxisType
#include "OVR/OpenVR/EVRControllerAxisType.hpp"
// Including type: OVR.OpenVR.EVRFirmwareError
#include "OVR/OpenVR/EVRFirmwareError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRSystem.GetRecommendedRenderTargetSize
void OVR::OpenVR::CVRSystem::GetRecommendedRenderTargetSize(uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetRecommendedRenderTargetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRecommendedRenderTargetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnWidth, pnHeight);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetProjectionMatrix
OVR::OpenVR::HmdMatrix44_t OVR::OpenVR::CVRSystem::GetProjectionMatrix(OVR::OpenVR::EVREye eEye, float fNearZ, float fFarZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetProjectionMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProjectionMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(fNearZ), ::il2cpp_utils::ExtractType(fFarZ)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix44_t, false>(this, ___internal__method, eEye, fNearZ, fFarZ);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetProjectionRaw
void OVR::OpenVR::CVRSystem::GetProjectionRaw(OVR::OpenVR::EVREye eEye, float& pfLeft, float& pfRight, float& pfTop, float& pfBottom) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetProjectionRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProjectionRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pfLeft), ::il2cpp_utils::ExtractType(pfRight), ::il2cpp_utils::ExtractType(pfTop), ::il2cpp_utils::ExtractType(pfBottom)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eEye, pfLeft, pfRight, pfTop, pfBottom);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.ComputeDistortion
bool OVR::OpenVR::CVRSystem::ComputeDistortion(OVR::OpenVR::EVREye eEye, float fU, float fV, OVR::OpenVR::DistortionCoordinates_t& pDistortionCoordinates) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::ComputeDistortion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeDistortion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(fU), ::il2cpp_utils::ExtractType(fV), ::il2cpp_utils::ExtractType(pDistortionCoordinates)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eEye, fU, fV, pDistortionCoordinates);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetEyeToHeadTransform
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::CVRSystem::GetEyeToHeadTransform(OVR::OpenVR::EVREye eEye) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetEyeToHeadTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEyeToHeadTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method, eEye);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetTimeSinceLastVsync
bool OVR::OpenVR::CVRSystem::GetTimeSinceLastVsync(float& pfSecondsSinceLastVsync, uint64_t& pulFrameCounter) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetTimeSinceLastVsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTimeSinceLastVsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pfSecondsSinceLastVsync), ::il2cpp_utils::ExtractType(pulFrameCounter)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pfSecondsSinceLastVsync, pulFrameCounter);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetD3D9AdapterIndex
int OVR::OpenVR::CVRSystem::GetD3D9AdapterIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetD3D9AdapterIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetD3D9AdapterIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetDXGIOutputInfo
void OVR::OpenVR::CVRSystem::GetDXGIOutputInfo(int& pnAdapterIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetDXGIOutputInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDXGIOutputInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnAdapterIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetOutputDevice
void OVR::OpenVR::CVRSystem::GetOutputDevice(uint64_t& pnDevice, OVR::OpenVR::ETextureType textureType, System::IntPtr pInstance) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetOutputDevice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOutputDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnDevice), ::il2cpp_utils::ExtractType(textureType), ::il2cpp_utils::ExtractType(pInstance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnDevice, textureType, pInstance);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.IsDisplayOnDesktop
bool OVR::OpenVR::CVRSystem::IsDisplayOnDesktop() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::IsDisplayOnDesktop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDisplayOnDesktop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.SetDisplayVisibility
bool OVR::OpenVR::CVRSystem::SetDisplayVisibility(bool bIsVisibleOnDesktop) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::SetDisplayVisibility");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDisplayVisibility", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bIsVisibleOnDesktop)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bIsVisibleOnDesktop);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetDeviceToAbsoluteTrackingPose
void OVR::OpenVR::CVRSystem::GetDeviceToAbsoluteTrackingPose(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, ::Array<OVR::OpenVR::TrackedDevicePose_t>* pTrackedDevicePoseArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetDeviceToAbsoluteTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDeviceToAbsoluteTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(fPredictedSecondsToPhotonsFromNow), ::il2cpp_utils::ExtractType(pTrackedDevicePoseArray)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.ResetSeatedZeroPose
void OVR::OpenVR::CVRSystem::ResetSeatedZeroPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::ResetSeatedZeroPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetSeatedZeroPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetSeatedZeroPoseToStandingAbsoluteTrackingPose
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::CVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSeatedZeroPoseToStandingAbsoluteTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetRawZeroPoseToStandingAbsoluteTrackingPose
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::CVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRawZeroPoseToStandingAbsoluteTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetSortedTrackedDeviceIndicesOfClass
uint OVR::OpenVR::CVRSystem::GetSortedTrackedDeviceIndicesOfClass(OVR::OpenVR::ETrackedDeviceClass eTrackedDeviceClass, ::Array<uint>* punTrackedDeviceIndexArray, uint unRelativeToTrackedDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetSortedTrackedDeviceIndicesOfClass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSortedTrackedDeviceIndicesOfClass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eTrackedDeviceClass), ::il2cpp_utils::ExtractType(punTrackedDeviceIndexArray), ::il2cpp_utils::ExtractType(unRelativeToTrackedDeviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, eTrackedDeviceClass, punTrackedDeviceIndexArray, unRelativeToTrackedDeviceIndex);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetTrackedDeviceActivityLevel
OVR::OpenVR::EDeviceActivityLevel OVR::OpenVR::CVRSystem::GetTrackedDeviceActivityLevel(uint unDeviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetTrackedDeviceActivityLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackedDeviceActivityLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EDeviceActivityLevel, false>(this, ___internal__method, unDeviceId);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.ApplyTransform
void OVR::OpenVR::CVRSystem::ApplyTransform(OVR::OpenVR::TrackedDevicePose_t& pOutputPose, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose, OVR::OpenVR::HmdMatrix34_t& pTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::ApplyTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutputPose), ::il2cpp_utils::ExtractType(pTrackedDevicePose), ::il2cpp_utils::ExtractType(pTransform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pOutputPose, pTrackedDevicePose, pTransform);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetTrackedDeviceIndexForControllerRole
uint OVR::OpenVR::CVRSystem::GetTrackedDeviceIndexForControllerRole(OVR::OpenVR::ETrackedControllerRole unDeviceType) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetTrackedDeviceIndexForControllerRole");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackedDeviceIndexForControllerRole", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceType)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceType);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetControllerRoleForTrackedDeviceIndex
OVR::OpenVR::ETrackedControllerRole OVR::OpenVR::CVRSystem::GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetControllerRoleForTrackedDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControllerRoleForTrackedDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::ETrackedControllerRole, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetTrackedDeviceClass
OVR::OpenVR::ETrackedDeviceClass OVR::OpenVR::CVRSystem::GetTrackedDeviceClass(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetTrackedDeviceClass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackedDeviceClass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::ETrackedDeviceClass, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.IsTrackedDeviceConnected
bool OVR::OpenVR::CVRSystem::IsTrackedDeviceConnected(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::IsTrackedDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsTrackedDeviceConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetBoolTrackedDeviceProperty
bool OVR::OpenVR::CVRSystem::GetBoolTrackedDeviceProperty(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetBoolTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoolTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetFloatTrackedDeviceProperty
float OVR::OpenVR::CVRSystem::GetFloatTrackedDeviceProperty(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetFloatTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFloatTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetInt32TrackedDeviceProperty
int OVR::OpenVR::CVRSystem::GetInt32TrackedDeviceProperty(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetInt32TrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInt32TrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetUint64TrackedDeviceProperty
uint64_t OVR::OpenVR::CVRSystem::GetUint64TrackedDeviceProperty(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetUint64TrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUint64TrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetMatrix34TrackedDeviceProperty
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::CVRSystem::GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetMatrix34TrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMatrix34TrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetArrayTrackedDeviceProperty
uint OVR::OpenVR::CVRSystem::GetArrayTrackedDeviceProperty(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, uint propType, System::IntPtr pBuffer, uint unBufferSize, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetArrayTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetArrayTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(propType), ::il2cpp_utils::ExtractType(pBuffer), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetStringTrackedDeviceProperty
uint OVR::OpenVR::CVRSystem::GetStringTrackedDeviceProperty(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, System::Text::StringBuilder* pchValue, uint unBufferSize, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetStringTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStringTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, pchValue, unBufferSize, pError);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetPropErrorNameFromEnum
::Il2CppString* OVR::OpenVR::CVRSystem::GetPropErrorNameFromEnum(OVR::OpenVR::ETrackedPropertyError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetPropErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPropErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.PollNextEvent
bool OVR::OpenVR::CVRSystem::PollNextEvent(OVR::OpenVR::VREvent_t& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::PollNextEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollNextEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, uncbVREvent);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.PollNextEventWithPose
bool OVR::OpenVR::CVRSystem::PollNextEventWithPose(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::VREvent_t& pEvent, uint uncbVREvent, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::PollNextEventWithPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollNextEventWithPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent), ::il2cpp_utils::ExtractType(pTrackedDevicePose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, pEvent, uncbVREvent, pTrackedDevicePose);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetEventTypeNameFromEnum
::Il2CppString* OVR::OpenVR::CVRSystem::GetEventTypeNameFromEnum(OVR::OpenVR::EVREventType eType) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetEventTypeNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEventTypeNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eType)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eType);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetHiddenAreaMesh
OVR::OpenVR::HiddenAreaMesh_t OVR::OpenVR::CVRSystem::GetHiddenAreaMesh(OVR::OpenVR::EVREye eEye, OVR::OpenVR::EHiddenAreaMeshType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetHiddenAreaMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHiddenAreaMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HiddenAreaMesh_t, false>(this, ___internal__method, eEye, type);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetControllerState
bool OVR::OpenVR::CVRSystem::GetControllerState(uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t& pControllerState, uint unControllerStateSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetControllerState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControllerState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetControllerStateWithPose
bool OVR::OpenVR::CVRSystem::GetControllerStateWithPose(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t& pControllerState, uint unControllerStateSize, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetControllerStateWithPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControllerStateWithPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize), ::il2cpp_utils::ExtractType(pTrackedDevicePose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.TriggerHapticPulse
void OVR::OpenVR::CVRSystem::TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, uint16_t usDurationMicroSec) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::TriggerHapticPulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(unAxisId), ::il2cpp_utils::ExtractType(usDurationMicroSec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, unControllerDeviceIndex, unAxisId, usDurationMicroSec);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetButtonIdNameFromEnum
::Il2CppString* OVR::OpenVR::CVRSystem::GetButtonIdNameFromEnum(OVR::OpenVR::EVRButtonId eButtonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetButtonIdNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetButtonIdNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eButtonId)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eButtonId);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetControllerAxisTypeNameFromEnum
::Il2CppString* OVR::OpenVR::CVRSystem::GetControllerAxisTypeNameFromEnum(OVR::OpenVR::EVRControllerAxisType eAxisType) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetControllerAxisTypeNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControllerAxisTypeNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eAxisType)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eAxisType);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.IsInputAvailable
bool OVR::OpenVR::CVRSystem::IsInputAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::IsInputAvailable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInputAvailable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.IsSteamVRDrawingControllers
bool OVR::OpenVR::CVRSystem::IsSteamVRDrawingControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::IsSteamVRDrawingControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsSteamVRDrawingControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.ShouldApplicationPause
bool OVR::OpenVR::CVRSystem::ShouldApplicationPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::ShouldApplicationPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldApplicationPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.ShouldApplicationReduceRenderingWork
bool OVR::OpenVR::CVRSystem::ShouldApplicationReduceRenderingWork() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::ShouldApplicationReduceRenderingWork");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldApplicationReduceRenderingWork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.DriverDebugRequest
uint OVR::OpenVR::CVRSystem::DriverDebugRequest(uint unDeviceIndex, ::Il2CppString* pchRequest, System::Text::StringBuilder* pchResponseBuffer, uint unResponseBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::DriverDebugRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DriverDebugRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(pchRequest), ::il2cpp_utils::ExtractType(pchResponseBuffer), ::il2cpp_utils::ExtractType(unResponseBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.PerformFirmwareUpdate
OVR::OpenVR::EVRFirmwareError OVR::OpenVR::CVRSystem::PerformFirmwareUpdate(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::PerformFirmwareUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformFirmwareUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRFirmwareError, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.AcknowledgeQuit_Exiting
void OVR::OpenVR::CVRSystem::AcknowledgeQuit_Exiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::AcknowledgeQuit_Exiting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcknowledgeQuit_Exiting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.AcknowledgeQuit_UserPrompt
void OVR::OpenVR::CVRSystem::AcknowledgeQuit_UserPrompt() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::AcknowledgeQuit_UserPrompt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcknowledgeQuit_UserPrompt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CVRSystem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::*)(System::IntPtr)>(&CVRSystem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::*)(System::IntPtr)>(&CVRSystem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetRecommendedRenderTargetSize
// Il2CppName: GetRecommendedRenderTargetSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::*)(uint&, uint&)>(&CVRSystem::GetRecommendedRenderTargetSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetRecommendedRenderTargetSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetProjectionMatrix
// Il2CppName: GetProjectionMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::HmdMatrix44_t (CVRSystem::*)(OVR::OpenVR::EVREye, float, float)>(&CVRSystem::GetProjectionMatrix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetProjectionMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVREye>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetProjectionRaw
// Il2CppName: GetProjectionRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::*)(OVR::OpenVR::EVREye, float&, float&, float&, float&)>(&CVRSystem::GetProjectionRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetProjectionRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVREye>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::ComputeDistortion
// Il2CppName: ComputeDistortion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::*)(OVR::OpenVR::EVREye, float, float, OVR::OpenVR::DistortionCoordinates_t&)>(&CVRSystem::ComputeDistortion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "ComputeDistortion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVREye>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::DistortionCoordinates_t&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetEyeToHeadTransform
// Il2CppName: GetEyeToHeadTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::HmdMatrix34_t (CVRSystem::*)(OVR::OpenVR::EVREye)>(&CVRSystem::GetEyeToHeadTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetEyeToHeadTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVREye>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetTimeSinceLastVsync
// Il2CppName: GetTimeSinceLastVsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::*)(float&, uint64_t&)>(&CVRSystem::GetTimeSinceLastVsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetTimeSinceLastVsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetD3D9AdapterIndex
// Il2CppName: GetD3D9AdapterIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CVRSystem::*)()>(&CVRSystem::GetD3D9AdapterIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetD3D9AdapterIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetDXGIOutputInfo
// Il2CppName: GetDXGIOutputInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::*)(int&)>(&CVRSystem::GetDXGIOutputInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetDXGIOutputInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetOutputDevice
// Il2CppName: GetOutputDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::*)(uint64_t&, OVR::OpenVR::ETextureType, System::IntPtr)>(&CVRSystem::GetOutputDevice)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetOutputDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETextureType>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::IsDisplayOnDesktop
// Il2CppName: IsDisplayOnDesktop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::*)()>(&CVRSystem::IsDisplayOnDesktop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "IsDisplayOnDesktop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRSystem::SetDisplayVisibility
// Il2CppName: SetDisplayVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::*)(bool)>(&CVRSystem::SetDisplayVisibility)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "SetDisplayVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetDeviceToAbsoluteTrackingPose
// Il2CppName: GetDeviceToAbsoluteTrackingPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::*)(OVR::OpenVR::ETrackingUniverseOrigin, float, ::Array<OVR::OpenVR::TrackedDevicePose_t>*)>(&CVRSystem::GetDeviceToAbsoluteTrackingPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetDeviceToAbsoluteTrackingPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::TrackedDevicePose_t>*>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::ResetSeatedZeroPose
// Il2CppName: ResetSeatedZeroPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::*)()>(&CVRSystem::ResetSeatedZeroPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "ResetSeatedZeroPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose
// Il2CppName: GetSeatedZeroPoseToStandingAbsoluteTrackingPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::HmdMatrix34_t (CVRSystem::*)()>(&CVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetSeatedZeroPoseToStandingAbsoluteTrackingPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose
// Il2CppName: GetRawZeroPoseToStandingAbsoluteTrackingPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::HmdMatrix34_t (CVRSystem::*)()>(&CVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetRawZeroPoseToStandingAbsoluteTrackingPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetSortedTrackedDeviceIndicesOfClass
// Il2CppName: GetSortedTrackedDeviceIndicesOfClass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRSystem::*)(OVR::OpenVR::ETrackedDeviceClass, ::Array<uint>*, uint)>(&CVRSystem::GetSortedTrackedDeviceIndicesOfClass)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetSortedTrackedDeviceIndicesOfClass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedDeviceClass>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint>*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetTrackedDeviceActivityLevel
// Il2CppName: GetTrackedDeviceActivityLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EDeviceActivityLevel (CVRSystem::*)(uint)>(&CVRSystem::GetTrackedDeviceActivityLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetTrackedDeviceActivityLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::ApplyTransform
// Il2CppName: ApplyTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::*)(OVR::OpenVR::TrackedDevicePose_t&, OVR::OpenVR::TrackedDevicePose_t&, OVR::OpenVR::HmdMatrix34_t&)>(&CVRSystem::ApplyTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "ApplyTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::TrackedDevicePose_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::TrackedDevicePose_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdMatrix34_t&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetTrackedDeviceIndexForControllerRole
// Il2CppName: GetTrackedDeviceIndexForControllerRole
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRSystem::*)(OVR::OpenVR::ETrackedControllerRole)>(&CVRSystem::GetTrackedDeviceIndexForControllerRole)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetTrackedDeviceIndexForControllerRole", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedControllerRole>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetControllerRoleForTrackedDeviceIndex
// Il2CppName: GetControllerRoleForTrackedDeviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::ETrackedControllerRole (CVRSystem::*)(uint)>(&CVRSystem::GetControllerRoleForTrackedDeviceIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetControllerRoleForTrackedDeviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetTrackedDeviceClass
// Il2CppName: GetTrackedDeviceClass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::ETrackedDeviceClass (CVRSystem::*)(uint)>(&CVRSystem::GetTrackedDeviceClass)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetTrackedDeviceClass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::IsTrackedDeviceConnected
// Il2CppName: IsTrackedDeviceConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::*)(uint)>(&CVRSystem::IsTrackedDeviceConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "IsTrackedDeviceConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetBoolTrackedDeviceProperty
// Il2CppName: GetBoolTrackedDeviceProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::*)(uint, OVR::OpenVR::ETrackedDeviceProperty, OVR::OpenVR::ETrackedPropertyError&)>(&CVRSystem::GetBoolTrackedDeviceProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetBoolTrackedDeviceProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedDeviceProperty>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedPropertyError&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetFloatTrackedDeviceProperty
// Il2CppName: GetFloatTrackedDeviceProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (CVRSystem::*)(uint, OVR::OpenVR::ETrackedDeviceProperty, OVR::OpenVR::ETrackedPropertyError&)>(&CVRSystem::GetFloatTrackedDeviceProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetFloatTrackedDeviceProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedDeviceProperty>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedPropertyError&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetInt32TrackedDeviceProperty
// Il2CppName: GetInt32TrackedDeviceProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CVRSystem::*)(uint, OVR::OpenVR::ETrackedDeviceProperty, OVR::OpenVR::ETrackedPropertyError&)>(&CVRSystem::GetInt32TrackedDeviceProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetInt32TrackedDeviceProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedDeviceProperty>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedPropertyError&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetUint64TrackedDeviceProperty
// Il2CppName: GetUint64TrackedDeviceProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (CVRSystem::*)(uint, OVR::OpenVR::ETrackedDeviceProperty, OVR::OpenVR::ETrackedPropertyError&)>(&CVRSystem::GetUint64TrackedDeviceProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetUint64TrackedDeviceProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedDeviceProperty>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedPropertyError&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetMatrix34TrackedDeviceProperty
// Il2CppName: GetMatrix34TrackedDeviceProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::HmdMatrix34_t (CVRSystem::*)(uint, OVR::OpenVR::ETrackedDeviceProperty, OVR::OpenVR::ETrackedPropertyError&)>(&CVRSystem::GetMatrix34TrackedDeviceProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetMatrix34TrackedDeviceProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedDeviceProperty>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedPropertyError&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetArrayTrackedDeviceProperty
// Il2CppName: GetArrayTrackedDeviceProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRSystem::*)(uint, OVR::OpenVR::ETrackedDeviceProperty, uint, System::IntPtr, uint, OVR::OpenVR::ETrackedPropertyError&)>(&CVRSystem::GetArrayTrackedDeviceProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetArrayTrackedDeviceProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedDeviceProperty>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedPropertyError&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetStringTrackedDeviceProperty
// Il2CppName: GetStringTrackedDeviceProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRSystem::*)(uint, OVR::OpenVR::ETrackedDeviceProperty, System::Text::StringBuilder*, uint, OVR::OpenVR::ETrackedPropertyError&)>(&CVRSystem::GetStringTrackedDeviceProperty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetStringTrackedDeviceProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedDeviceProperty>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedPropertyError&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetPropErrorNameFromEnum
// Il2CppName: GetPropErrorNameFromEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CVRSystem::*)(OVR::OpenVR::ETrackedPropertyError)>(&CVRSystem::GetPropErrorNameFromEnum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetPropErrorNameFromEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackedPropertyError>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::PollNextEvent
// Il2CppName: PollNextEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::*)(OVR::OpenVR::VREvent_t&, uint)>(&CVRSystem::PollNextEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "PollNextEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VREvent_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::PollNextEventWithPose
// Il2CppName: PollNextEventWithPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::*)(OVR::OpenVR::ETrackingUniverseOrigin, OVR::OpenVR::VREvent_t&, uint, OVR::OpenVR::TrackedDevicePose_t&)>(&CVRSystem::PollNextEventWithPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "PollNextEventWithPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VREvent_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::TrackedDevicePose_t&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetEventTypeNameFromEnum
// Il2CppName: GetEventTypeNameFromEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CVRSystem::*)(OVR::OpenVR::EVREventType)>(&CVRSystem::GetEventTypeNameFromEnum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetEventTypeNameFromEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVREventType>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetHiddenAreaMesh
// Il2CppName: GetHiddenAreaMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::HiddenAreaMesh_t (CVRSystem::*)(OVR::OpenVR::EVREye, OVR::OpenVR::EHiddenAreaMeshType)>(&CVRSystem::GetHiddenAreaMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetHiddenAreaMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVREye>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EHiddenAreaMeshType>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetControllerState
// Il2CppName: GetControllerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::*)(uint, OVR::OpenVR::VRControllerState_t&, uint)>(&CVRSystem::GetControllerState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetControllerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRControllerState_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetControllerStateWithPose
// Il2CppName: GetControllerStateWithPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::*)(OVR::OpenVR::ETrackingUniverseOrigin, uint, OVR::OpenVR::VRControllerState_t&, uint, OVR::OpenVR::TrackedDevicePose_t&)>(&CVRSystem::GetControllerStateWithPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetControllerStateWithPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRControllerState_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::TrackedDevicePose_t&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::TriggerHapticPulse
// Il2CppName: TriggerHapticPulse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::*)(uint, uint, uint16_t)>(&CVRSystem::TriggerHapticPulse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "TriggerHapticPulse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint16_t>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetButtonIdNameFromEnum
// Il2CppName: GetButtonIdNameFromEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CVRSystem::*)(OVR::OpenVR::EVRButtonId)>(&CVRSystem::GetButtonIdNameFromEnum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetButtonIdNameFromEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRButtonId>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::GetControllerAxisTypeNameFromEnum
// Il2CppName: GetControllerAxisTypeNameFromEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CVRSystem::*)(OVR::OpenVR::EVRControllerAxisType)>(&CVRSystem::GetControllerAxisTypeNameFromEnum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "GetControllerAxisTypeNameFromEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRControllerAxisType>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::IsInputAvailable
// Il2CppName: IsInputAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::*)()>(&CVRSystem::IsInputAvailable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "IsInputAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRSystem::IsSteamVRDrawingControllers
// Il2CppName: IsSteamVRDrawingControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::*)()>(&CVRSystem::IsSteamVRDrawingControllers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "IsSteamVRDrawingControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRSystem::ShouldApplicationPause
// Il2CppName: ShouldApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::*)()>(&CVRSystem::ShouldApplicationPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "ShouldApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRSystem::ShouldApplicationReduceRenderingWork
// Il2CppName: ShouldApplicationReduceRenderingWork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::*)()>(&CVRSystem::ShouldApplicationReduceRenderingWork)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "ShouldApplicationReduceRenderingWork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRSystem::DriverDebugRequest
// Il2CppName: DriverDebugRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRSystem::*)(uint, ::Il2CppString*, System::Text::StringBuilder*, uint)>(&CVRSystem::DriverDebugRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "DriverDebugRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::PerformFirmwareUpdate
// Il2CppName: PerformFirmwareUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRFirmwareError (CVRSystem::*)(uint)>(&CVRSystem::PerformFirmwareUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "PerformFirmwareUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::AcknowledgeQuit_Exiting
// Il2CppName: AcknowledgeQuit_Exiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::*)()>(&CVRSystem::AcknowledgeQuit_Exiting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "AcknowledgeQuit_Exiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRSystem::AcknowledgeQuit_UserPrompt
// Il2CppName: AcknowledgeQuit_UserPrompt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::*)()>(&CVRSystem::AcknowledgeQuit_UserPrompt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem*), "AcknowledgeQuit_UserPrompt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRSystem/_PollNextEventPacked
#include "OVR/OpenVR/CVRSystem__PollNextEventPacked.hpp"
// Including type: OVR.OpenVR.VREvent_t_Packed
#include "OVR/OpenVR/VREvent_t_Packed.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRSystem/_PollNextEventPacked.Invoke
bool OVR::OpenVR::CVRSystem::_PollNextEventPacked::Invoke(OVR::OpenVR::VREvent_t_Packed& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_PollNextEventPacked::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, uncbVREvent);
}
// Autogenerated method: OVR.OpenVR.CVRSystem/_PollNextEventPacked.BeginInvoke
System::IAsyncResult* OVR::OpenVR::CVRSystem::_PollNextEventPacked::BeginInvoke(OVR::OpenVR::VREvent_t_Packed& pEvent, uint uncbVREvent, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_PollNextEventPacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pEvent, uncbVREvent, callback, object);
}
// Autogenerated method: OVR.OpenVR.CVRSystem/_PollNextEventPacked.EndInvoke
bool OVR::OpenVR::CVRSystem::_PollNextEventPacked::EndInvoke(OVR::OpenVR::VREvent_t_Packed& pEvent, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_PollNextEventPacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, result);
}
// Writing MetadataGetter for method: CVRSystem::_PollNextEventPacked::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::_PollNextEventPacked::*)(::Il2CppObject*, System::IntPtr)>(&CVRSystem::_PollNextEventPacked::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem::_PollNextEventPacked*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::_PollNextEventPacked::*)(::Il2CppObject*, System::IntPtr)>(&CVRSystem::_PollNextEventPacked::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem::_PollNextEventPacked*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::_PollNextEventPacked::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::_PollNextEventPacked::*)(OVR::OpenVR::VREvent_t_Packed&, uint)>(&CVRSystem::_PollNextEventPacked::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem::_PollNextEventPacked*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VREvent_t_Packed&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::_PollNextEventPacked::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (CVRSystem::_PollNextEventPacked::*)(OVR::OpenVR::VREvent_t_Packed&, uint, System::AsyncCallback*, ::Il2CppObject*)>(&CVRSystem::_PollNextEventPacked::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem::_PollNextEventPacked*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VREvent_t_Packed&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::_PollNextEventPacked::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::_PollNextEventPacked::*)(OVR::OpenVR::VREvent_t_Packed&, System::IAsyncResult*)>(&CVRSystem::_PollNextEventPacked::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem::_PollNextEventPacked*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VREvent_t_Packed&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRSystem/_GetControllerStatePacked
#include "OVR/OpenVR/CVRSystem__GetControllerStatePacked.hpp"
// Including type: OVR.OpenVR.VRControllerState_t_Packed
#include "OVR/OpenVR/VRControllerState_t_Packed.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRSystem/_GetControllerStatePacked.Invoke
bool OVR::OpenVR::CVRSystem::_GetControllerStatePacked::Invoke(uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t_Packed& pControllerState, uint unControllerStateSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_GetControllerStatePacked::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize);
}
// Autogenerated method: OVR.OpenVR.CVRSystem/_GetControllerStatePacked.BeginInvoke
System::IAsyncResult* OVR::OpenVR::CVRSystem::_GetControllerStatePacked::BeginInvoke(uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t_Packed& pControllerState, uint unControllerStateSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_GetControllerStatePacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize, callback, object);
}
// Autogenerated method: OVR.OpenVR.CVRSystem/_GetControllerStatePacked.EndInvoke
bool OVR::OpenVR::CVRSystem::_GetControllerStatePacked::EndInvoke(OVR::OpenVR::VRControllerState_t_Packed& pControllerState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_GetControllerStatePacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, result);
}
// Writing MetadataGetter for method: CVRSystem::_GetControllerStatePacked::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::_GetControllerStatePacked::*)(::Il2CppObject*, System::IntPtr)>(&CVRSystem::_GetControllerStatePacked::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem::_GetControllerStatePacked*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::_GetControllerStatePacked::*)(::Il2CppObject*, System::IntPtr)>(&CVRSystem::_GetControllerStatePacked::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem::_GetControllerStatePacked*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::_GetControllerStatePacked::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::_GetControllerStatePacked::*)(uint, OVR::OpenVR::VRControllerState_t_Packed&, uint)>(&CVRSystem::_GetControllerStatePacked::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem::_GetControllerStatePacked*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRControllerState_t_Packed&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::_GetControllerStatePacked::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (CVRSystem::_GetControllerStatePacked::*)(uint, OVR::OpenVR::VRControllerState_t_Packed&, uint, System::AsyncCallback*, ::Il2CppObject*)>(&CVRSystem::_GetControllerStatePacked::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem::_GetControllerStatePacked*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRControllerState_t_Packed&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::_GetControllerStatePacked::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::_GetControllerStatePacked::*)(OVR::OpenVR::VRControllerState_t_Packed&, System::IAsyncResult*)>(&CVRSystem::_GetControllerStatePacked::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem::_GetControllerStatePacked*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRControllerState_t_Packed&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRSystem/_GetControllerStateWithPosePacked
#include "OVR/OpenVR/CVRSystem__GetControllerStateWithPosePacked.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.VRControllerState_t_Packed
#include "OVR/OpenVR/VRControllerState_t_Packed.hpp"
// Including type: OVR.OpenVR.TrackedDevicePose_t
#include "OVR/OpenVR/TrackedDevicePose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRSystem/_GetControllerStateWithPosePacked.Invoke
bool OVR::OpenVR::CVRSystem::_GetControllerStateWithPosePacked::Invoke(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t_Packed& pControllerState, uint unControllerStateSize, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_GetControllerStateWithPosePacked::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize), ::il2cpp_utils::ExtractType(pTrackedDevicePose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose);
}
// Autogenerated method: OVR.OpenVR.CVRSystem/_GetControllerStateWithPosePacked.BeginInvoke
System::IAsyncResult* OVR::OpenVR::CVRSystem::_GetControllerStateWithPosePacked::BeginInvoke(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t_Packed& pControllerState, uint unControllerStateSize, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_GetControllerStateWithPosePacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize), ::il2cpp_utils::ExtractType(pTrackedDevicePose), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose, callback, object);
}
// Autogenerated method: OVR.OpenVR.CVRSystem/_GetControllerStateWithPosePacked.EndInvoke
bool OVR::OpenVR::CVRSystem::_GetControllerStateWithPosePacked::EndInvoke(OVR::OpenVR::VRControllerState_t_Packed& pControllerState, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_GetControllerStateWithPosePacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pTrackedDevicePose), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, pTrackedDevicePose, result);
}
// Writing MetadataGetter for method: CVRSystem::_GetControllerStateWithPosePacked::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::_GetControllerStateWithPosePacked::*)(::Il2CppObject*, System::IntPtr)>(&CVRSystem::_GetControllerStateWithPosePacked::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem::_GetControllerStateWithPosePacked*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSystem::_GetControllerStateWithPosePacked::*)(::Il2CppObject*, System::IntPtr)>(&CVRSystem::_GetControllerStateWithPosePacked::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem::_GetControllerStateWithPosePacked*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::_GetControllerStateWithPosePacked::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::_GetControllerStateWithPosePacked::*)(OVR::OpenVR::ETrackingUniverseOrigin, uint, OVR::OpenVR::VRControllerState_t_Packed&, uint, OVR::OpenVR::TrackedDevicePose_t&)>(&CVRSystem::_GetControllerStateWithPosePacked::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem::_GetControllerStateWithPosePacked*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRControllerState_t_Packed&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::TrackedDevicePose_t&>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::_GetControllerStateWithPosePacked::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (CVRSystem::_GetControllerStateWithPosePacked::*)(OVR::OpenVR::ETrackingUniverseOrigin, uint, OVR::OpenVR::VRControllerState_t_Packed&, uint, OVR::OpenVR::TrackedDevicePose_t&, System::AsyncCallback*, ::Il2CppObject*)>(&CVRSystem::_GetControllerStateWithPosePacked::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem::_GetControllerStateWithPosePacked*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRControllerState_t_Packed&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::TrackedDevicePose_t&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: CVRSystem::_GetControllerStateWithPosePacked::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSystem::_GetControllerStateWithPosePacked::*)(OVR::OpenVR::VRControllerState_t_Packed&, OVR::OpenVR::TrackedDevicePose_t&, System::IAsyncResult*)>(&CVRSystem::_GetControllerStateWithPosePacked::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSystem::_GetControllerStateWithPosePacked*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRControllerState_t_Packed&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::TrackedDevicePose_t&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVR.OpenVR.CVRExtendedDisplay
#include "OVR/OpenVR/CVRExtendedDisplay.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRExtendedDisplay.GetWindowBounds
void OVR::OpenVR::CVRExtendedDisplay::GetWindowBounds(int& pnX, int& pnY, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRExtendedDisplay::GetWindowBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWindowBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnX), ::il2cpp_utils::ExtractType(pnY), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnX, pnY, pnWidth, pnHeight);
}
// Autogenerated method: OVR.OpenVR.CVRExtendedDisplay.GetEyeOutputViewport
void OVR::OpenVR::CVRExtendedDisplay::GetEyeOutputViewport(OVR::OpenVR::EVREye eEye, uint& pnX, uint& pnY, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRExtendedDisplay::GetEyeOutputViewport");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEyeOutputViewport", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pnX), ::il2cpp_utils::ExtractType(pnY), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eEye, pnX, pnY, pnWidth, pnHeight);
}
// Autogenerated method: OVR.OpenVR.CVRExtendedDisplay.GetDXGIOutputInfo
void OVR::OpenVR::CVRExtendedDisplay::GetDXGIOutputInfo(int& pnAdapterIndex, int& pnAdapterOutputIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRExtendedDisplay::GetDXGIOutputInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDXGIOutputInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnAdapterIndex), ::il2cpp_utils::ExtractType(pnAdapterOutputIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex, pnAdapterOutputIndex);
}
// Writing MetadataGetter for method: CVRExtendedDisplay::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRExtendedDisplay::*)(System::IntPtr)>(&CVRExtendedDisplay::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRExtendedDisplay*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRExtendedDisplay::*)(System::IntPtr)>(&CVRExtendedDisplay::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRExtendedDisplay*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRExtendedDisplay::GetWindowBounds
// Il2CppName: GetWindowBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRExtendedDisplay::*)(int&, int&, uint&, uint&)>(&CVRExtendedDisplay::GetWindowBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRExtendedDisplay*), "GetWindowBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: CVRExtendedDisplay::GetEyeOutputViewport
// Il2CppName: GetEyeOutputViewport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRExtendedDisplay::*)(OVR::OpenVR::EVREye, uint&, uint&, uint&, uint&)>(&CVRExtendedDisplay::GetEyeOutputViewport)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRExtendedDisplay*), "GetEyeOutputViewport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVREye>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: CVRExtendedDisplay::GetDXGIOutputInfo
// Il2CppName: GetDXGIOutputInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRExtendedDisplay::*)(int&, int&)>(&CVRExtendedDisplay::GetDXGIOutputInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRExtendedDisplay*), "GetDXGIOutputInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRTrackedCamera
#include "OVR/OpenVR/CVRTrackedCamera.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraError
#include "OVR/OpenVR/EVRTrackedCameraError.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraFrameType
#include "OVR/OpenVR/EVRTrackedCameraFrameType.hpp"
// Including type: OVR.OpenVR.HmdVector2_t
#include "OVR/OpenVR/HmdVector2_t.hpp"
// Including type: OVR.OpenVR.HmdMatrix44_t
#include "OVR/OpenVR/HmdMatrix44_t.hpp"
// Including type: OVR.OpenVR.CameraVideoStreamFrameHeader_t
#include "OVR/OpenVR/CameraVideoStreamFrameHeader_t.hpp"
// Including type: OVR.OpenVR.VRTextureBounds_t
#include "OVR/OpenVR/VRTextureBounds_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetCameraErrorNameFromEnum
::Il2CppString* OVR::OpenVR::CVRTrackedCamera::GetCameraErrorNameFromEnum(OVR::OpenVR::EVRTrackedCameraError eCameraError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetCameraErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eCameraError)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eCameraError);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.HasCamera
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::HasCamera(uint nDeviceIndex, bool& pHasCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::HasCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(pHasCamera)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, pHasCamera);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetCameraFrameSize
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetCameraFrameSize(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, uint& pnWidth, uint& pnHeight, uint& pnFrameBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetCameraFrameSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraFrameSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight), ::il2cpp_utils::ExtractType(pnFrameBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pnWidth, pnHeight, pnFrameBufferSize);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetCameraIntrinsics
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetCameraIntrinsics(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, OVR::OpenVR::HmdVector2_t& pFocalLength, OVR::OpenVR::HmdVector2_t& pCenter) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetCameraIntrinsics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraIntrinsics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pFocalLength), ::il2cpp_utils::ExtractType(pCenter)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pFocalLength, pCenter);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetCameraProjection
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetCameraProjection(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, OVR::OpenVR::HmdMatrix44_t& pProjection) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetCameraProjection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraProjection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(flZNear), ::il2cpp_utils::ExtractType(flZFar), ::il2cpp_utils::ExtractType(pProjection)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, flZNear, flZFar, pProjection);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.AcquireVideoStreamingService
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::AcquireVideoStreamingService(uint nDeviceIndex, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::AcquireVideoStreamingService");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcquireVideoStreamingService", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, pHandle);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.ReleaseVideoStreamingService
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::ReleaseVideoStreamingService(uint64_t hTrackedCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::ReleaseVideoStreamingService");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseVideoStreamingService", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetVideoStreamFrameBuffer
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetVideoStreamFrameBuffer(uint64_t hTrackedCamera, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pFrameBuffer, uint nFrameBufferSize, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetVideoStreamFrameBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVideoStreamFrameBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pFrameBuffer), ::il2cpp_utils::ExtractType(nFrameBufferSize), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(nFrameHeaderSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetVideoStreamTextureSize
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetVideoStreamTextureSize(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, OVR::OpenVR::VRTextureBounds_t& pTextureBounds, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetVideoStreamTextureSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVideoStreamTextureSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pTextureBounds), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pTextureBounds, pnWidth, pnHeight);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetVideoStreamTextureD3D11
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetVideoStreamTextureD3D11(uint64_t hTrackedCamera, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetVideoStreamTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVideoStreamTextureD3D11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pD3D11DeviceOrResource), ::il2cpp_utils::ExtractType(ppD3D11ShaderResourceView), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(nFrameHeaderSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetVideoStreamTextureGL
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetVideoStreamTextureGL(uint64_t hTrackedCamera, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, uint& pglTextureId, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetVideoStreamTextureGL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVideoStreamTextureGL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pglTextureId), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(nFrameHeaderSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pglTextureId, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.ReleaseVideoStreamTextureGL
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::ReleaseVideoStreamTextureGL(uint64_t hTrackedCamera, uint glTextureId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::ReleaseVideoStreamTextureGL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseVideoStreamTextureGL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(glTextureId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, glTextureId);
}
// Writing MetadataGetter for method: CVRTrackedCamera::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRTrackedCamera::*)(System::IntPtr)>(&CVRTrackedCamera::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRTrackedCamera*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRTrackedCamera::*)(System::IntPtr)>(&CVRTrackedCamera::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRTrackedCamera*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRTrackedCamera::GetCameraErrorNameFromEnum
// Il2CppName: GetCameraErrorNameFromEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CVRTrackedCamera::*)(OVR::OpenVR::EVRTrackedCameraError)>(&CVRTrackedCamera::GetCameraErrorNameFromEnum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRTrackedCamera*), "GetCameraErrorNameFromEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRTrackedCameraError>()});
  }
};
// Writing MetadataGetter for method: CVRTrackedCamera::HasCamera
// Il2CppName: HasCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRTrackedCameraError (CVRTrackedCamera::*)(uint, bool&)>(&CVRTrackedCamera::HasCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRTrackedCamera*), "HasCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: CVRTrackedCamera::GetCameraFrameSize
// Il2CppName: GetCameraFrameSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRTrackedCameraError (CVRTrackedCamera::*)(uint, OVR::OpenVR::EVRTrackedCameraFrameType, uint&, uint&, uint&)>(&CVRTrackedCamera::GetCameraFrameSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRTrackedCamera*), "GetCameraFrameSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRTrackedCameraFrameType>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: CVRTrackedCamera::GetCameraIntrinsics
// Il2CppName: GetCameraIntrinsics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRTrackedCameraError (CVRTrackedCamera::*)(uint, OVR::OpenVR::EVRTrackedCameraFrameType, OVR::OpenVR::HmdVector2_t&, OVR::OpenVR::HmdVector2_t&)>(&CVRTrackedCamera::GetCameraIntrinsics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRTrackedCamera*), "GetCameraIntrinsics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRTrackedCameraFrameType>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdVector2_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdVector2_t&>()});
  }
};
// Writing MetadataGetter for method: CVRTrackedCamera::GetCameraProjection
// Il2CppName: GetCameraProjection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRTrackedCameraError (CVRTrackedCamera::*)(uint, OVR::OpenVR::EVRTrackedCameraFrameType, float, float, OVR::OpenVR::HmdMatrix44_t&)>(&CVRTrackedCamera::GetCameraProjection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRTrackedCamera*), "GetCameraProjection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRTrackedCameraFrameType>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdMatrix44_t&>()});
  }
};
// Writing MetadataGetter for method: CVRTrackedCamera::AcquireVideoStreamingService
// Il2CppName: AcquireVideoStreamingService
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRTrackedCameraError (CVRTrackedCamera::*)(uint, uint64_t&)>(&CVRTrackedCamera::AcquireVideoStreamingService)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRTrackedCamera*), "AcquireVideoStreamingService", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()});
  }
};
// Writing MetadataGetter for method: CVRTrackedCamera::ReleaseVideoStreamingService
// Il2CppName: ReleaseVideoStreamingService
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRTrackedCameraError (CVRTrackedCamera::*)(uint64_t)>(&CVRTrackedCamera::ReleaseVideoStreamingService)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRTrackedCamera*), "ReleaseVideoStreamingService", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVRTrackedCamera::GetVideoStreamFrameBuffer
// Il2CppName: GetVideoStreamFrameBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRTrackedCameraError (CVRTrackedCamera::*)(uint64_t, OVR::OpenVR::EVRTrackedCameraFrameType, System::IntPtr, uint, OVR::OpenVR::CameraVideoStreamFrameHeader_t&, uint)>(&CVRTrackedCamera::GetVideoStreamFrameBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRTrackedCamera*), "GetVideoStreamFrameBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRTrackedCameraFrameType>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::CameraVideoStreamFrameHeader_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRTrackedCamera::GetVideoStreamTextureSize
// Il2CppName: GetVideoStreamTextureSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRTrackedCameraError (CVRTrackedCamera::*)(uint, OVR::OpenVR::EVRTrackedCameraFrameType, OVR::OpenVR::VRTextureBounds_t&, uint&, uint&)>(&CVRTrackedCamera::GetVideoStreamTextureSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRTrackedCamera*), "GetVideoStreamTextureSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRTrackedCameraFrameType>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRTextureBounds_t&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: CVRTrackedCamera::GetVideoStreamTextureD3D11
// Il2CppName: GetVideoStreamTextureD3D11
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRTrackedCameraError (CVRTrackedCamera::*)(uint64_t, OVR::OpenVR::EVRTrackedCameraFrameType, System::IntPtr, System::IntPtr&, OVR::OpenVR::CameraVideoStreamFrameHeader_t&, uint)>(&CVRTrackedCamera::GetVideoStreamTextureD3D11)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRTrackedCamera*), "GetVideoStreamTextureD3D11", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRTrackedCameraFrameType>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::CameraVideoStreamFrameHeader_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRTrackedCamera::GetVideoStreamTextureGL
// Il2CppName: GetVideoStreamTextureGL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRTrackedCameraError (CVRTrackedCamera::*)(uint64_t, OVR::OpenVR::EVRTrackedCameraFrameType, uint&, OVR::OpenVR::CameraVideoStreamFrameHeader_t&, uint)>(&CVRTrackedCamera::GetVideoStreamTextureGL)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRTrackedCamera*), "GetVideoStreamTextureGL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRTrackedCameraFrameType>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::CameraVideoStreamFrameHeader_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRTrackedCamera::ReleaseVideoStreamTextureGL
// Il2CppName: ReleaseVideoStreamTextureGL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRTrackedCameraError (CVRTrackedCamera::*)(uint64_t, uint)>(&CVRTrackedCamera::ReleaseVideoStreamTextureGL)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRTrackedCamera*), "ReleaseVideoStreamTextureGL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRApplications
#include "OVR/OpenVR/CVRApplications.hpp"
// Including type: OVR.OpenVR.EVRApplicationError
#include "OVR/OpenVR/EVRApplicationError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.EVRApplicationProperty
#include "OVR/OpenVR/EVRApplicationProperty.hpp"
// Including type: OVR.OpenVR.EVRApplicationTransitionState
#include "OVR/OpenVR/EVRApplicationTransitionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRApplications.AddApplicationManifest
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::AddApplicationManifest(::Il2CppString* pchApplicationManifestFullPath, bool bTemporary) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::AddApplicationManifest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddApplicationManifest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchApplicationManifestFullPath), ::il2cpp_utils::ExtractType(bTemporary)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath, bTemporary);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.RemoveApplicationManifest
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::RemoveApplicationManifest(::Il2CppString* pchApplicationManifestFullPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::RemoveApplicationManifest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveApplicationManifest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchApplicationManifestFullPath)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.IsApplicationInstalled
bool OVR::OpenVR::CVRApplications::IsApplicationInstalled(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::IsApplicationInstalled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsApplicationInstalled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationCount
uint OVR::OpenVR::CVRApplications::GetApplicationCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationKeyByIndex
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::GetApplicationKeyByIndex(uint unApplicationIndex, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationKeyByIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationKeyByIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unApplicationIndex), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationKeyByProcessId
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::GetApplicationKeyByProcessId(uint unProcessId, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationKeyByProcessId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationKeyByProcessId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unProcessId), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, unProcessId, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.LaunchApplication
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::LaunchApplication(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::LaunchApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.LaunchTemplateApplication
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::LaunchTemplateApplication(::Il2CppString* pchTemplateAppKey, ::Il2CppString* pchNewAppKey, ::Array<OVR::OpenVR::AppOverrideKeys_t>* pKeys) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::LaunchTemplateApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchTemplateApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchTemplateAppKey), ::il2cpp_utils::ExtractType(pchNewAppKey), ::il2cpp_utils::ExtractType(pKeys)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchTemplateAppKey, pchNewAppKey, pKeys);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.LaunchApplicationFromMimeType
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::LaunchApplicationFromMimeType(::Il2CppString* pchMimeType, ::Il2CppString* pchArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::LaunchApplicationFromMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchApplicationFromMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchMimeType), ::il2cpp_utils::ExtractType(pchArgs)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchMimeType, pchArgs);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.LaunchDashboardOverlay
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::LaunchDashboardOverlay(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::LaunchDashboardOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchDashboardOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.CancelApplicationLaunch
bool OVR::OpenVR::CVRApplications::CancelApplicationLaunch(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::CancelApplicationLaunch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelApplicationLaunch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.IdentifyApplication
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::IdentifyApplication(uint unProcessId, ::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::IdentifyApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IdentifyApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unProcessId), ::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, unProcessId, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationProcessId
uint OVR::OpenVR::CVRApplications::GetApplicationProcessId(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationProcessId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationProcessId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationsErrorNameFromEnum
::Il2CppString* OVR::OpenVR::CVRApplications::GetApplicationsErrorNameFromEnum(OVR::OpenVR::EVRApplicationError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationsErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationsErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationPropertyString
uint OVR::OpenVR::CVRApplications::GetApplicationPropertyString(::Il2CppString* pchAppKey, OVR::OpenVR::EVRApplicationProperty eProperty, System::Text::StringBuilder* pchPropertyValueBuffer, uint unPropertyValueBufferLen, OVR::OpenVR::EVRApplicationError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationPropertyString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationPropertyString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(pchPropertyValueBuffer), ::il2cpp_utils::ExtractType(unPropertyValueBufferLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchAppKey, eProperty, pchPropertyValueBuffer, unPropertyValueBufferLen, peError);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationPropertyBool
bool OVR::OpenVR::CVRApplications::GetApplicationPropertyBool(::Il2CppString* pchAppKey, OVR::OpenVR::EVRApplicationProperty eProperty, OVR::OpenVR::EVRApplicationError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationPropertyBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationPropertyBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey, eProperty, peError);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationPropertyUint64
uint64_t OVR::OpenVR::CVRApplications::GetApplicationPropertyUint64(::Il2CppString* pchAppKey, OVR::OpenVR::EVRApplicationProperty eProperty, OVR::OpenVR::EVRApplicationError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationPropertyUint64");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationPropertyUint64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchAppKey, eProperty, peError);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.SetApplicationAutoLaunch
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::SetApplicationAutoLaunch(::Il2CppString* pchAppKey, bool bAutoLaunch) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::SetApplicationAutoLaunch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetApplicationAutoLaunch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(bAutoLaunch)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchAppKey, bAutoLaunch);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationAutoLaunch
bool OVR::OpenVR::CVRApplications::GetApplicationAutoLaunch(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationAutoLaunch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationAutoLaunch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.SetDefaultApplicationForMimeType
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::SetDefaultApplicationForMimeType(::Il2CppString* pchAppKey, ::Il2CppString* pchMimeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::SetDefaultApplicationForMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDefaultApplicationForMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(pchMimeType)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchAppKey, pchMimeType);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetDefaultApplicationForMimeType
bool OVR::OpenVR::CVRApplications::GetDefaultApplicationForMimeType(::Il2CppString* pchMimeType, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetDefaultApplicationForMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDefaultApplicationForMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchMimeType), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchMimeType, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationSupportedMimeTypes
bool OVR::OpenVR::CVRApplications::GetApplicationSupportedMimeTypes(::Il2CppString* pchAppKey, System::Text::StringBuilder* pchMimeTypesBuffer, uint unMimeTypesBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationSupportedMimeTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationSupportedMimeTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(pchMimeTypesBuffer), ::il2cpp_utils::ExtractType(unMimeTypesBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey, pchMimeTypesBuffer, unMimeTypesBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationsThatSupportMimeType
uint OVR::OpenVR::CVRApplications::GetApplicationsThatSupportMimeType(::Il2CppString* pchMimeType, System::Text::StringBuilder* pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationsThatSupportMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationsThatSupportMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchMimeType), ::il2cpp_utils::ExtractType(pchAppKeysThatSupportBuffer), ::il2cpp_utils::ExtractType(unAppKeysThatSupportBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchMimeType, pchAppKeysThatSupportBuffer, unAppKeysThatSupportBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationLaunchArguments
uint OVR::OpenVR::CVRApplications::GetApplicationLaunchArguments(uint unHandle, System::Text::StringBuilder* pchArgs, uint unArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationLaunchArguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationLaunchArguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(pchArgs), ::il2cpp_utils::ExtractType(unArgs)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unHandle, pchArgs, unArgs);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetStartingApplication
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::GetStartingApplication(System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetStartingApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStartingApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetTransitionState
OVR::OpenVR::EVRApplicationTransitionState OVR::OpenVR::CVRApplications::GetTransitionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetTransitionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTransitionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationTransitionState, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.PerformApplicationPrelaunchCheck
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::PerformApplicationPrelaunchCheck(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::PerformApplicationPrelaunchCheck");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformApplicationPrelaunchCheck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationsTransitionStateNameFromEnum
::Il2CppString* OVR::OpenVR::CVRApplications::GetApplicationsTransitionStateNameFromEnum(OVR::OpenVR::EVRApplicationTransitionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationsTransitionStateNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationsTransitionStateNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, state);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.IsQuitUserPromptRequested
bool OVR::OpenVR::CVRApplications::IsQuitUserPromptRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::IsQuitUserPromptRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsQuitUserPromptRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.LaunchInternalProcess
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::LaunchInternalProcess(::Il2CppString* pchBinaryPath, ::Il2CppString* pchArguments, ::Il2CppString* pchWorkingDirectory) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::LaunchInternalProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchInternalProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchBinaryPath), ::il2cpp_utils::ExtractType(pchArguments), ::il2cpp_utils::ExtractType(pchWorkingDirectory)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchBinaryPath, pchArguments, pchWorkingDirectory);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetCurrentSceneProcessId
uint OVR::OpenVR::CVRApplications::GetCurrentSceneProcessId() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetCurrentSceneProcessId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentSceneProcessId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CVRApplications::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRApplications::*)(System::IntPtr)>(&CVRApplications::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRApplications::*)(System::IntPtr)>(&CVRApplications::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::AddApplicationManifest
// Il2CppName: AddApplicationManifest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRApplicationError (CVRApplications::*)(::Il2CppString*, bool)>(&CVRApplications::AddApplicationManifest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "AddApplicationManifest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::RemoveApplicationManifest
// Il2CppName: RemoveApplicationManifest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRApplicationError (CVRApplications::*)(::Il2CppString*)>(&CVRApplications::RemoveApplicationManifest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "RemoveApplicationManifest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::IsApplicationInstalled
// Il2CppName: IsApplicationInstalled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRApplications::*)(::Il2CppString*)>(&CVRApplications::IsApplicationInstalled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "IsApplicationInstalled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetApplicationCount
// Il2CppName: GetApplicationCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRApplications::*)()>(&CVRApplications::GetApplicationCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetApplicationCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetApplicationKeyByIndex
// Il2CppName: GetApplicationKeyByIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRApplicationError (CVRApplications::*)(uint, System::Text::StringBuilder*, uint)>(&CVRApplications::GetApplicationKeyByIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetApplicationKeyByIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetApplicationKeyByProcessId
// Il2CppName: GetApplicationKeyByProcessId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRApplicationError (CVRApplications::*)(uint, System::Text::StringBuilder*, uint)>(&CVRApplications::GetApplicationKeyByProcessId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetApplicationKeyByProcessId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::LaunchApplication
// Il2CppName: LaunchApplication
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRApplicationError (CVRApplications::*)(::Il2CppString*)>(&CVRApplications::LaunchApplication)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "LaunchApplication", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::LaunchTemplateApplication
// Il2CppName: LaunchTemplateApplication
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRApplicationError (CVRApplications::*)(::Il2CppString*, ::Il2CppString*, ::Array<OVR::OpenVR::AppOverrideKeys_t>*)>(&CVRApplications::LaunchTemplateApplication)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "LaunchTemplateApplication", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::AppOverrideKeys_t>*>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::LaunchApplicationFromMimeType
// Il2CppName: LaunchApplicationFromMimeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRApplicationError (CVRApplications::*)(::Il2CppString*, ::Il2CppString*)>(&CVRApplications::LaunchApplicationFromMimeType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "LaunchApplicationFromMimeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::LaunchDashboardOverlay
// Il2CppName: LaunchDashboardOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRApplicationError (CVRApplications::*)(::Il2CppString*)>(&CVRApplications::LaunchDashboardOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "LaunchDashboardOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::CancelApplicationLaunch
// Il2CppName: CancelApplicationLaunch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRApplications::*)(::Il2CppString*)>(&CVRApplications::CancelApplicationLaunch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "CancelApplicationLaunch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::IdentifyApplication
// Il2CppName: IdentifyApplication
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRApplicationError (CVRApplications::*)(uint, ::Il2CppString*)>(&CVRApplications::IdentifyApplication)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "IdentifyApplication", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetApplicationProcessId
// Il2CppName: GetApplicationProcessId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRApplications::*)(::Il2CppString*)>(&CVRApplications::GetApplicationProcessId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetApplicationProcessId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetApplicationsErrorNameFromEnum
// Il2CppName: GetApplicationsErrorNameFromEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CVRApplications::*)(OVR::OpenVR::EVRApplicationError)>(&CVRApplications::GetApplicationsErrorNameFromEnum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetApplicationsErrorNameFromEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRApplicationError>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetApplicationPropertyString
// Il2CppName: GetApplicationPropertyString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRApplications::*)(::Il2CppString*, OVR::OpenVR::EVRApplicationProperty, System::Text::StringBuilder*, uint, OVR::OpenVR::EVRApplicationError&)>(&CVRApplications::GetApplicationPropertyString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetApplicationPropertyString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRApplicationProperty>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRApplicationError&>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetApplicationPropertyBool
// Il2CppName: GetApplicationPropertyBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRApplications::*)(::Il2CppString*, OVR::OpenVR::EVRApplicationProperty, OVR::OpenVR::EVRApplicationError&)>(&CVRApplications::GetApplicationPropertyBool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetApplicationPropertyBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRApplicationProperty>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRApplicationError&>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetApplicationPropertyUint64
// Il2CppName: GetApplicationPropertyUint64
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (CVRApplications::*)(::Il2CppString*, OVR::OpenVR::EVRApplicationProperty, OVR::OpenVR::EVRApplicationError&)>(&CVRApplications::GetApplicationPropertyUint64)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetApplicationPropertyUint64", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRApplicationProperty>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRApplicationError&>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::SetApplicationAutoLaunch
// Il2CppName: SetApplicationAutoLaunch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRApplicationError (CVRApplications::*)(::Il2CppString*, bool)>(&CVRApplications::SetApplicationAutoLaunch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "SetApplicationAutoLaunch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetApplicationAutoLaunch
// Il2CppName: GetApplicationAutoLaunch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRApplications::*)(::Il2CppString*)>(&CVRApplications::GetApplicationAutoLaunch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetApplicationAutoLaunch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::SetDefaultApplicationForMimeType
// Il2CppName: SetDefaultApplicationForMimeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRApplicationError (CVRApplications::*)(::Il2CppString*, ::Il2CppString*)>(&CVRApplications::SetDefaultApplicationForMimeType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "SetDefaultApplicationForMimeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetDefaultApplicationForMimeType
// Il2CppName: GetDefaultApplicationForMimeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRApplications::*)(::Il2CppString*, System::Text::StringBuilder*, uint)>(&CVRApplications::GetDefaultApplicationForMimeType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetDefaultApplicationForMimeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetApplicationSupportedMimeTypes
// Il2CppName: GetApplicationSupportedMimeTypes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRApplications::*)(::Il2CppString*, System::Text::StringBuilder*, uint)>(&CVRApplications::GetApplicationSupportedMimeTypes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetApplicationSupportedMimeTypes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetApplicationsThatSupportMimeType
// Il2CppName: GetApplicationsThatSupportMimeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRApplications::*)(::Il2CppString*, System::Text::StringBuilder*, uint)>(&CVRApplications::GetApplicationsThatSupportMimeType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetApplicationsThatSupportMimeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetApplicationLaunchArguments
// Il2CppName: GetApplicationLaunchArguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRApplications::*)(uint, System::Text::StringBuilder*, uint)>(&CVRApplications::GetApplicationLaunchArguments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetApplicationLaunchArguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetStartingApplication
// Il2CppName: GetStartingApplication
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRApplicationError (CVRApplications::*)(System::Text::StringBuilder*, uint)>(&CVRApplications::GetStartingApplication)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetStartingApplication", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetTransitionState
// Il2CppName: GetTransitionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRApplicationTransitionState (CVRApplications::*)()>(&CVRApplications::GetTransitionState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetTransitionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRApplications::PerformApplicationPrelaunchCheck
// Il2CppName: PerformApplicationPrelaunchCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRApplicationError (CVRApplications::*)(::Il2CppString*)>(&CVRApplications::PerformApplicationPrelaunchCheck)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "PerformApplicationPrelaunchCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetApplicationsTransitionStateNameFromEnum
// Il2CppName: GetApplicationsTransitionStateNameFromEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CVRApplications::*)(OVR::OpenVR::EVRApplicationTransitionState)>(&CVRApplications::GetApplicationsTransitionStateNameFromEnum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetApplicationsTransitionStateNameFromEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRApplicationTransitionState>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::IsQuitUserPromptRequested
// Il2CppName: IsQuitUserPromptRequested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRApplications::*)()>(&CVRApplications::IsQuitUserPromptRequested)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "IsQuitUserPromptRequested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRApplications::LaunchInternalProcess
// Il2CppName: LaunchInternalProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRApplicationError (CVRApplications::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&CVRApplications::LaunchInternalProcess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "LaunchInternalProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRApplications::GetCurrentSceneProcessId
// Il2CppName: GetCurrentSceneProcessId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRApplications::*)()>(&CVRApplications::GetCurrentSceneProcessId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRApplications*), "GetCurrentSceneProcessId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVR.OpenVR.CVRChaperone
#include "OVR/OpenVR/CVRChaperone.hpp"
// Including type: OVR.OpenVR.ChaperoneCalibrationState
#include "OVR/OpenVR/ChaperoneCalibrationState.hpp"
// Including type: OVR.OpenVR.HmdQuad_t
#include "OVR/OpenVR/HmdQuad_t.hpp"
// Including type: OVR.OpenVR.HmdColor_t
#include "OVR/OpenVR/HmdColor_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRChaperone.GetCalibrationState
OVR::OpenVR::ChaperoneCalibrationState OVR::OpenVR::CVRChaperone::GetCalibrationState() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::GetCalibrationState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCalibrationState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::ChaperoneCalibrationState, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.GetPlayAreaSize
bool OVR::OpenVR::CVRChaperone::GetPlayAreaSize(float& pSizeX, float& pSizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::GetPlayAreaSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayAreaSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSizeX), ::il2cpp_utils::ExtractType(pSizeZ)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pSizeX, pSizeZ);
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.GetPlayAreaRect
bool OVR::OpenVR::CVRChaperone::GetPlayAreaRect(OVR::OpenVR::HmdQuad_t& rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::GetPlayAreaRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayAreaRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rect)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, rect);
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.ReloadInfo
void OVR::OpenVR::CVRChaperone::ReloadInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::ReloadInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.SetSceneColor
void OVR::OpenVR::CVRChaperone::SetSceneColor(OVR::OpenVR::HmdColor_t color) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::SetSceneColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSceneColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.GetBoundsColor
void OVR::OpenVR::CVRChaperone::GetBoundsColor(OVR::OpenVR::HmdColor_t& pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, OVR::OpenVR::HmdColor_t& pOutputCameraColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::GetBoundsColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoundsColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutputColorArray), ::il2cpp_utils::ExtractType(nNumOutputColors), ::il2cpp_utils::ExtractType(flCollisionBoundsFadeDistance), ::il2cpp_utils::ExtractType(pOutputCameraColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pOutputColorArray, nNumOutputColors, flCollisionBoundsFadeDistance, pOutputCameraColor);
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.AreBoundsVisible
bool OVR::OpenVR::CVRChaperone::AreBoundsVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::AreBoundsVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AreBoundsVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.ForceBoundsVisible
void OVR::OpenVR::CVRChaperone::ForceBoundsVisible(bool bForce) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::ForceBoundsVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceBoundsVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bForce)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bForce);
}
// Writing MetadataGetter for method: CVRChaperone::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRChaperone::*)(System::IntPtr)>(&CVRChaperone::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRChaperone::*)(System::IntPtr)>(&CVRChaperone::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRChaperone::GetCalibrationState
// Il2CppName: GetCalibrationState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::ChaperoneCalibrationState (CVRChaperone::*)()>(&CVRChaperone::GetCalibrationState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperone*), "GetCalibrationState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRChaperone::GetPlayAreaSize
// Il2CppName: GetPlayAreaSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperone::*)(float&, float&)>(&CVRChaperone::GetPlayAreaSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperone*), "GetPlayAreaSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: CVRChaperone::GetPlayAreaRect
// Il2CppName: GetPlayAreaRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperone::*)(OVR::OpenVR::HmdQuad_t&)>(&CVRChaperone::GetPlayAreaRect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperone*), "GetPlayAreaRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdQuad_t&>()});
  }
};
// Writing MetadataGetter for method: CVRChaperone::ReloadInfo
// Il2CppName: ReloadInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRChaperone::*)()>(&CVRChaperone::ReloadInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperone*), "ReloadInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRChaperone::SetSceneColor
// Il2CppName: SetSceneColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRChaperone::*)(OVR::OpenVR::HmdColor_t)>(&CVRChaperone::SetSceneColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperone*), "SetSceneColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdColor_t>()});
  }
};
// Writing MetadataGetter for method: CVRChaperone::GetBoundsColor
// Il2CppName: GetBoundsColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRChaperone::*)(OVR::OpenVR::HmdColor_t&, int, float, OVR::OpenVR::HmdColor_t&)>(&CVRChaperone::GetBoundsColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperone*), "GetBoundsColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdColor_t&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdColor_t&>()});
  }
};
// Writing MetadataGetter for method: CVRChaperone::AreBoundsVisible
// Il2CppName: AreBoundsVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperone::*)()>(&CVRChaperone::AreBoundsVisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperone*), "AreBoundsVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRChaperone::ForceBoundsVisible
// Il2CppName: ForceBoundsVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRChaperone::*)(bool)>(&CVRChaperone::ForceBoundsVisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperone*), "ForceBoundsVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRChaperoneSetup
#include "OVR/OpenVR/CVRChaperoneSetup.hpp"
// Including type: OVR.OpenVR.EChaperoneConfigFile
#include "OVR/OpenVR/EChaperoneConfigFile.hpp"
// Including type: OVR.OpenVR.HmdMatrix34_t
#include "OVR/OpenVR/HmdMatrix34_t.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.CommitWorkingCopy
bool OVR::OpenVR::CVRChaperoneSetup::CommitWorkingCopy(OVR::OpenVR::EChaperoneConfigFile configFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::CommitWorkingCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CommitWorkingCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(configFile)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, configFile);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.RevertWorkingCopy
void OVR::OpenVR::CVRChaperoneSetup::RevertWorkingCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::RevertWorkingCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RevertWorkingCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetWorkingPlayAreaSize
bool OVR::OpenVR::CVRChaperoneSetup::GetWorkingPlayAreaSize(float& pSizeX, float& pSizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetWorkingPlayAreaSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingPlayAreaSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSizeX), ::il2cpp_utils::ExtractType(pSizeZ)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pSizeX, pSizeZ);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetWorkingPlayAreaRect
bool OVR::OpenVR::CVRChaperoneSetup::GetWorkingPlayAreaRect(OVR::OpenVR::HmdQuad_t& rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetWorkingPlayAreaRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingPlayAreaRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rect)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, rect);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetWorkingCollisionBoundsInfo
bool OVR::OpenVR::CVRChaperoneSetup::GetWorkingCollisionBoundsInfo(::Array<OVR::OpenVR::HmdQuad_t>*& pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetWorkingCollisionBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingCollisionBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::HmdQuad_t>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetLiveCollisionBoundsInfo
bool OVR::OpenVR::CVRChaperoneSetup::GetLiveCollisionBoundsInfo(::Array<OVR::OpenVR::HmdQuad_t>*& pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetLiveCollisionBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLiveCollisionBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::HmdQuad_t>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetWorkingSeatedZeroPoseToRawTrackingPose
bool OVR::OpenVR::CVRChaperoneSetup::GetWorkingSeatedZeroPoseToRawTrackingPose(OVR::OpenVR::HmdMatrix34_t& pmatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetWorkingSeatedZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pmatSeatedZeroPoseToRawTrackingPose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pmatSeatedZeroPoseToRawTrackingPose);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetWorkingStandingZeroPoseToRawTrackingPose
bool OVR::OpenVR::CVRChaperoneSetup::GetWorkingStandingZeroPoseToRawTrackingPose(OVR::OpenVR::HmdMatrix34_t& pmatStandingZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetWorkingStandingZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingStandingZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pmatStandingZeroPoseToRawTrackingPose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pmatStandingZeroPoseToRawTrackingPose);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.SetWorkingPlayAreaSize
void OVR::OpenVR::CVRChaperoneSetup::SetWorkingPlayAreaSize(float sizeX, float sizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::SetWorkingPlayAreaSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingPlayAreaSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sizeX), ::il2cpp_utils::ExtractType(sizeZ)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sizeX, sizeZ);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.SetWorkingCollisionBoundsInfo
void OVR::OpenVR::CVRChaperoneSetup::SetWorkingCollisionBoundsInfo(::Array<OVR::OpenVR::HmdQuad_t>* pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::SetWorkingCollisionBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingCollisionBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pQuadsBuffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.SetWorkingSeatedZeroPoseToRawTrackingPose
void OVR::OpenVR::CVRChaperoneSetup::SetWorkingSeatedZeroPoseToRawTrackingPose(OVR::OpenVR::HmdMatrix34_t& pMatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::SetWorkingSeatedZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pMatSeatedZeroPoseToRawTrackingPose)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pMatSeatedZeroPoseToRawTrackingPose);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.SetWorkingStandingZeroPoseToRawTrackingPose
void OVR::OpenVR::CVRChaperoneSetup::SetWorkingStandingZeroPoseToRawTrackingPose(OVR::OpenVR::HmdMatrix34_t& pMatStandingZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::SetWorkingStandingZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingStandingZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pMatStandingZeroPoseToRawTrackingPose)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pMatStandingZeroPoseToRawTrackingPose);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.ReloadFromDisk
void OVR::OpenVR::CVRChaperoneSetup::ReloadFromDisk(OVR::OpenVR::EChaperoneConfigFile configFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::ReloadFromDisk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadFromDisk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(configFile)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, configFile);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetLiveSeatedZeroPoseToRawTrackingPose
bool OVR::OpenVR::CVRChaperoneSetup::GetLiveSeatedZeroPoseToRawTrackingPose(OVR::OpenVR::HmdMatrix34_t& pmatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetLiveSeatedZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLiveSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pmatSeatedZeroPoseToRawTrackingPose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pmatSeatedZeroPoseToRawTrackingPose);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.SetWorkingCollisionBoundsTagsInfo
void OVR::OpenVR::CVRChaperoneSetup::SetWorkingCollisionBoundsTagsInfo(::Array<uint8_t>* pTagsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::SetWorkingCollisionBoundsTagsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingCollisionBoundsTagsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTagsBuffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pTagsBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetLiveCollisionBoundsTagsInfo
bool OVR::OpenVR::CVRChaperoneSetup::GetLiveCollisionBoundsTagsInfo(::Array<uint8_t>*& pTagsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetLiveCollisionBoundsTagsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLiveCollisionBoundsTagsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pTagsBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.SetWorkingPhysicalBoundsInfo
bool OVR::OpenVR::CVRChaperoneSetup::SetWorkingPhysicalBoundsInfo(::Array<OVR::OpenVR::HmdQuad_t>* pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::SetWorkingPhysicalBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingPhysicalBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pQuadsBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetLivePhysicalBoundsInfo
bool OVR::OpenVR::CVRChaperoneSetup::GetLivePhysicalBoundsInfo(::Array<OVR::OpenVR::HmdQuad_t>*& pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetLivePhysicalBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLivePhysicalBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::HmdQuad_t>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.ExportLiveToBuffer
bool OVR::OpenVR::CVRChaperoneSetup::ExportLiveToBuffer(System::Text::StringBuilder* pBuffer, uint& pnBufferLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::ExportLiveToBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExportLiveToBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pBuffer), ::il2cpp_utils::ExtractType(pnBufferLength)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pBuffer, pnBufferLength);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.ImportFromBufferToWorking
bool OVR::OpenVR::CVRChaperoneSetup::ImportFromBufferToWorking(::Il2CppString* pBuffer, uint nImportFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::ImportFromBufferToWorking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ImportFromBufferToWorking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pBuffer), ::il2cpp_utils::ExtractType(nImportFlags)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pBuffer, nImportFlags);
}
// Writing MetadataGetter for method: CVRChaperoneSetup::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRChaperoneSetup::*)(System::IntPtr)>(&CVRChaperoneSetup::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRChaperoneSetup::*)(System::IntPtr)>(&CVRChaperoneSetup::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::CommitWorkingCopy
// Il2CppName: CommitWorkingCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperoneSetup::*)(OVR::OpenVR::EChaperoneConfigFile)>(&CVRChaperoneSetup::CommitWorkingCopy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "CommitWorkingCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EChaperoneConfigFile>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::RevertWorkingCopy
// Il2CppName: RevertWorkingCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRChaperoneSetup::*)()>(&CVRChaperoneSetup::RevertWorkingCopy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "RevertWorkingCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::GetWorkingPlayAreaSize
// Il2CppName: GetWorkingPlayAreaSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperoneSetup::*)(float&, float&)>(&CVRChaperoneSetup::GetWorkingPlayAreaSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "GetWorkingPlayAreaSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::GetWorkingPlayAreaRect
// Il2CppName: GetWorkingPlayAreaRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperoneSetup::*)(OVR::OpenVR::HmdQuad_t&)>(&CVRChaperoneSetup::GetWorkingPlayAreaRect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "GetWorkingPlayAreaRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdQuad_t&>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::GetWorkingCollisionBoundsInfo
// Il2CppName: GetWorkingCollisionBoundsInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperoneSetup::*)(::Array<OVR::OpenVR::HmdQuad_t>*&)>(&CVRChaperoneSetup::GetWorkingCollisionBoundsInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "GetWorkingCollisionBoundsInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::HmdQuad_t>*&>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::GetLiveCollisionBoundsInfo
// Il2CppName: GetLiveCollisionBoundsInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperoneSetup::*)(::Array<OVR::OpenVR::HmdQuad_t>*&)>(&CVRChaperoneSetup::GetLiveCollisionBoundsInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "GetLiveCollisionBoundsInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::HmdQuad_t>*&>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::GetWorkingSeatedZeroPoseToRawTrackingPose
// Il2CppName: GetWorkingSeatedZeroPoseToRawTrackingPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperoneSetup::*)(OVR::OpenVR::HmdMatrix34_t&)>(&CVRChaperoneSetup::GetWorkingSeatedZeroPoseToRawTrackingPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "GetWorkingSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdMatrix34_t&>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::GetWorkingStandingZeroPoseToRawTrackingPose
// Il2CppName: GetWorkingStandingZeroPoseToRawTrackingPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperoneSetup::*)(OVR::OpenVR::HmdMatrix34_t&)>(&CVRChaperoneSetup::GetWorkingStandingZeroPoseToRawTrackingPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "GetWorkingStandingZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdMatrix34_t&>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::SetWorkingPlayAreaSize
// Il2CppName: SetWorkingPlayAreaSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRChaperoneSetup::*)(float, float)>(&CVRChaperoneSetup::SetWorkingPlayAreaSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "SetWorkingPlayAreaSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::SetWorkingCollisionBoundsInfo
// Il2CppName: SetWorkingCollisionBoundsInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRChaperoneSetup::*)(::Array<OVR::OpenVR::HmdQuad_t>*)>(&CVRChaperoneSetup::SetWorkingCollisionBoundsInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "SetWorkingCollisionBoundsInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::HmdQuad_t>*>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::SetWorkingSeatedZeroPoseToRawTrackingPose
// Il2CppName: SetWorkingSeatedZeroPoseToRawTrackingPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRChaperoneSetup::*)(OVR::OpenVR::HmdMatrix34_t&)>(&CVRChaperoneSetup::SetWorkingSeatedZeroPoseToRawTrackingPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "SetWorkingSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdMatrix34_t&>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::SetWorkingStandingZeroPoseToRawTrackingPose
// Il2CppName: SetWorkingStandingZeroPoseToRawTrackingPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRChaperoneSetup::*)(OVR::OpenVR::HmdMatrix34_t&)>(&CVRChaperoneSetup::SetWorkingStandingZeroPoseToRawTrackingPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "SetWorkingStandingZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdMatrix34_t&>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::ReloadFromDisk
// Il2CppName: ReloadFromDisk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRChaperoneSetup::*)(OVR::OpenVR::EChaperoneConfigFile)>(&CVRChaperoneSetup::ReloadFromDisk)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "ReloadFromDisk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EChaperoneConfigFile>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::GetLiveSeatedZeroPoseToRawTrackingPose
// Il2CppName: GetLiveSeatedZeroPoseToRawTrackingPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperoneSetup::*)(OVR::OpenVR::HmdMatrix34_t&)>(&CVRChaperoneSetup::GetLiveSeatedZeroPoseToRawTrackingPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "GetLiveSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdMatrix34_t&>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::SetWorkingCollisionBoundsTagsInfo
// Il2CppName: SetWorkingCollisionBoundsTagsInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRChaperoneSetup::*)(::Array<uint8_t>*)>(&CVRChaperoneSetup::SetWorkingCollisionBoundsTagsInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "SetWorkingCollisionBoundsTagsInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::GetLiveCollisionBoundsTagsInfo
// Il2CppName: GetLiveCollisionBoundsTagsInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperoneSetup::*)(::Array<uint8_t>*&)>(&CVRChaperoneSetup::GetLiveCollisionBoundsTagsInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "GetLiveCollisionBoundsTagsInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::SetWorkingPhysicalBoundsInfo
// Il2CppName: SetWorkingPhysicalBoundsInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperoneSetup::*)(::Array<OVR::OpenVR::HmdQuad_t>*)>(&CVRChaperoneSetup::SetWorkingPhysicalBoundsInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "SetWorkingPhysicalBoundsInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::HmdQuad_t>*>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::GetLivePhysicalBoundsInfo
// Il2CppName: GetLivePhysicalBoundsInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperoneSetup::*)(::Array<OVR::OpenVR::HmdQuad_t>*&)>(&CVRChaperoneSetup::GetLivePhysicalBoundsInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "GetLivePhysicalBoundsInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::HmdQuad_t>*&>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::ExportLiveToBuffer
// Il2CppName: ExportLiveToBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperoneSetup::*)(System::Text::StringBuilder*, uint&)>(&CVRChaperoneSetup::ExportLiveToBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "ExportLiveToBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: CVRChaperoneSetup::ImportFromBufferToWorking
// Il2CppName: ImportFromBufferToWorking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRChaperoneSetup::*)(::Il2CppString*, uint)>(&CVRChaperoneSetup::ImportFromBufferToWorking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRChaperoneSetup*), "ImportFromBufferToWorking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRCompositor
#include "OVR/OpenVR/CVRCompositor.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.EVRCompositorError
#include "OVR/OpenVR/EVRCompositorError.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.VRTextureBounds_t
#include "OVR/OpenVR/VRTextureBounds_t.hpp"
// Including type: OVR.OpenVR.EVRSubmitFlags
#include "OVR/OpenVR/EVRSubmitFlags.hpp"
// Including type: OVR.OpenVR.Compositor_FrameTiming
#include "OVR/OpenVR/Compositor_FrameTiming.hpp"
// Including type: OVR.OpenVR.Compositor_CumulativeStats
#include "OVR/OpenVR/Compositor_CumulativeStats.hpp"
// Including type: OVR.OpenVR.HmdColor_t
#include "OVR/OpenVR/HmdColor_t.hpp"
// Including type: OVR.OpenVR.EVRCompositorTimingMode
#include "OVR/OpenVR/EVRCompositorTimingMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRCompositor.SetTrackingSpace
void OVR::OpenVR::CVRCompositor::SetTrackingSpace(OVR::OpenVR::ETrackingUniverseOrigin eOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::SetTrackingSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTrackingSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eOrigin);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetTrackingSpace
OVR::OpenVR::ETrackingUniverseOrigin OVR::OpenVR::CVRCompositor::GetTrackingSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetTrackingSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackingSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::ETrackingUniverseOrigin, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.WaitGetPoses
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::WaitGetPoses(::Array<OVR::OpenVR::TrackedDevicePose_t>* pRenderPoseArray, ::Array<OVR::OpenVR::TrackedDevicePose_t>* pGamePoseArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::WaitGetPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitGetPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderPoseArray), ::il2cpp_utils::ExtractType(pGamePoseArray)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method, pRenderPoseArray, pGamePoseArray);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetLastPoses
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::GetLastPoses(::Array<OVR::OpenVR::TrackedDevicePose_t>* pRenderPoseArray, ::Array<OVR::OpenVR::TrackedDevicePose_t>* pGamePoseArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetLastPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderPoseArray), ::il2cpp_utils::ExtractType(pGamePoseArray)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method, pRenderPoseArray, pGamePoseArray);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetLastPoseForTrackedDeviceIndex
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, OVR::OpenVR::TrackedDevicePose_t& pOutputPose, OVR::OpenVR::TrackedDevicePose_t& pOutputGamePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetLastPoseForTrackedDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastPoseForTrackedDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(pOutputPose), ::il2cpp_utils::ExtractType(pOutputGamePose)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method, unDeviceIndex, pOutputPose, pOutputGamePose);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.Submit
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::Submit(OVR::OpenVR::EVREye eEye, OVR::OpenVR::Texture_t& pTexture, OVR::OpenVR::VRTextureBounds_t& pBounds, OVR::OpenVR::EVRSubmitFlags nSubmitFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::Submit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Submit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pTexture), ::il2cpp_utils::ExtractType(pBounds), ::il2cpp_utils::ExtractType(nSubmitFlags)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method, eEye, pTexture, pBounds, nSubmitFlags);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ClearLastSubmittedFrame
void OVR::OpenVR::CVRCompositor::ClearLastSubmittedFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ClearLastSubmittedFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearLastSubmittedFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.PostPresentHandoff
void OVR::OpenVR::CVRCompositor::PostPresentHandoff() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::PostPresentHandoff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PostPresentHandoff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetFrameTiming
bool OVR::OpenVR::CVRCompositor::GetFrameTiming(OVR::OpenVR::Compositor_FrameTiming& pTiming, uint unFramesAgo) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetFrameTiming");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFrameTiming", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTiming), ::il2cpp_utils::ExtractType(unFramesAgo)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pTiming, unFramesAgo);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetFrameTimings
uint OVR::OpenVR::CVRCompositor::GetFrameTimings(OVR::OpenVR::Compositor_FrameTiming& pTiming, uint nFrames) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetFrameTimings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFrameTimings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTiming), ::il2cpp_utils::ExtractType(nFrames)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pTiming, nFrames);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetFrameTimeRemaining
float OVR::OpenVR::CVRCompositor::GetFrameTimeRemaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetFrameTimeRemaining");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFrameTimeRemaining", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetCumulativeStats
void OVR::OpenVR::CVRCompositor::GetCumulativeStats(OVR::OpenVR::Compositor_CumulativeStats& pStats, uint nStatsSizeInBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetCumulativeStats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCumulativeStats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pStats), ::il2cpp_utils::ExtractType(nStatsSizeInBytes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pStats, nStatsSizeInBytes);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.FadeToColor
void OVR::OpenVR::CVRCompositor::FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::FadeToColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeToColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fSeconds), ::il2cpp_utils::ExtractType(fRed), ::il2cpp_utils::ExtractType(fGreen), ::il2cpp_utils::ExtractType(fBlue), ::il2cpp_utils::ExtractType(fAlpha), ::il2cpp_utils::ExtractType(bBackground)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fSeconds, fRed, fGreen, fBlue, fAlpha, bBackground);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetCurrentFadeColor
OVR::OpenVR::HmdColor_t OVR::OpenVR::CVRCompositor::GetCurrentFadeColor(bool bBackground) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetCurrentFadeColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentFadeColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bBackground)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdColor_t, false>(this, ___internal__method, bBackground);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.FadeGrid
void OVR::OpenVR::CVRCompositor::FadeGrid(float fSeconds, bool bFadeIn) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::FadeGrid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeGrid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fSeconds), ::il2cpp_utils::ExtractType(bFadeIn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fSeconds, bFadeIn);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetCurrentGridAlpha
float OVR::OpenVR::CVRCompositor::GetCurrentGridAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetCurrentGridAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentGridAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.SetSkyboxOverride
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::SetSkyboxOverride(::Array<OVR::OpenVR::Texture_t>* pTextures) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::SetSkyboxOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSkyboxOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTextures)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method, pTextures);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ClearSkyboxOverride
void OVR::OpenVR::CVRCompositor::ClearSkyboxOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ClearSkyboxOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSkyboxOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.CompositorBringToFront
void OVR::OpenVR::CVRCompositor::CompositorBringToFront() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::CompositorBringToFront");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorBringToFront", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.CompositorGoToBack
void OVR::OpenVR::CVRCompositor::CompositorGoToBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::CompositorGoToBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorGoToBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.CompositorQuit
void OVR::OpenVR::CVRCompositor::CompositorQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::CompositorQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.IsFullscreen
bool OVR::OpenVR::CVRCompositor::IsFullscreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::IsFullscreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsFullscreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetCurrentSceneFocusProcess
uint OVR::OpenVR::CVRCompositor::GetCurrentSceneFocusProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetCurrentSceneFocusProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentSceneFocusProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetLastFrameRenderer
uint OVR::OpenVR::CVRCompositor::GetLastFrameRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetLastFrameRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastFrameRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.CanRenderScene
bool OVR::OpenVR::CVRCompositor::CanRenderScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::CanRenderScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanRenderScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ShowMirrorWindow
void OVR::OpenVR::CVRCompositor::ShowMirrorWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ShowMirrorWindow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowMirrorWindow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.HideMirrorWindow
void OVR::OpenVR::CVRCompositor::HideMirrorWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::HideMirrorWindow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideMirrorWindow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.IsMirrorWindowVisible
bool OVR::OpenVR::CVRCompositor::IsMirrorWindowVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::IsMirrorWindowVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMirrorWindowVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.CompositorDumpImages
void OVR::OpenVR::CVRCompositor::CompositorDumpImages() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::CompositorDumpImages");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorDumpImages", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ShouldAppRenderWithLowResources
bool OVR::OpenVR::CVRCompositor::ShouldAppRenderWithLowResources() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ShouldAppRenderWithLowResources");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldAppRenderWithLowResources", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ForceInterleavedReprojectionOn
void OVR::OpenVR::CVRCompositor::ForceInterleavedReprojectionOn(bool bOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ForceInterleavedReprojectionOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceInterleavedReprojectionOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bOverride)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bOverride);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ForceReconnectProcess
void OVR::OpenVR::CVRCompositor::ForceReconnectProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ForceReconnectProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceReconnectProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.SuspendRendering
void OVR::OpenVR::CVRCompositor::SuspendRendering(bool bSuspend) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::SuspendRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SuspendRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bSuspend)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bSuspend);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetMirrorTextureD3D11
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::GetMirrorTextureD3D11(OVR::OpenVR::EVREye eEye, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetMirrorTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMirrorTextureD3D11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pD3D11DeviceOrResource), ::il2cpp_utils::ExtractType(ppD3D11ShaderResourceView)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method, eEye, pD3D11DeviceOrResource, ppD3D11ShaderResourceView);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ReleaseMirrorTextureD3D11
void OVR::OpenVR::CVRCompositor::ReleaseMirrorTextureD3D11(System::IntPtr pD3D11ShaderResourceView) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ReleaseMirrorTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseMirrorTextureD3D11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pD3D11ShaderResourceView)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pD3D11ShaderResourceView);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetMirrorTextureGL
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::GetMirrorTextureGL(OVR::OpenVR::EVREye eEye, uint& pglTextureId, System::IntPtr pglSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetMirrorTextureGL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMirrorTextureGL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pglTextureId), ::il2cpp_utils::ExtractType(pglSharedTextureHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method, eEye, pglTextureId, pglSharedTextureHandle);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ReleaseSharedGLTexture
bool OVR::OpenVR::CVRCompositor::ReleaseSharedGLTexture(uint glTextureId, System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ReleaseSharedGLTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseSharedGLTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glTextureId), ::il2cpp_utils::ExtractType(glSharedTextureHandle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, glTextureId, glSharedTextureHandle);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.LockGLSharedTextureForAccess
void OVR::OpenVR::CVRCompositor::LockGLSharedTextureForAccess(System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::LockGLSharedTextureForAccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LockGLSharedTextureForAccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glSharedTextureHandle)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, glSharedTextureHandle);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.UnlockGLSharedTextureForAccess
void OVR::OpenVR::CVRCompositor::UnlockGLSharedTextureForAccess(System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::UnlockGLSharedTextureForAccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnlockGLSharedTextureForAccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glSharedTextureHandle)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, glSharedTextureHandle);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetVulkanInstanceExtensionsRequired
uint OVR::OpenVR::CVRCompositor::GetVulkanInstanceExtensionsRequired(System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetVulkanInstanceExtensionsRequired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVulkanInstanceExtensionsRequired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchValue, unBufferSize);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetVulkanDeviceExtensionsRequired
uint OVR::OpenVR::CVRCompositor::GetVulkanDeviceExtensionsRequired(System::IntPtr pPhysicalDevice, System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetVulkanDeviceExtensionsRequired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVulkanDeviceExtensionsRequired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pPhysicalDevice), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pPhysicalDevice, pchValue, unBufferSize);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.SetExplicitTimingMode
void OVR::OpenVR::CVRCompositor::SetExplicitTimingMode(OVR::OpenVR::EVRCompositorTimingMode eTimingMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::SetExplicitTimingMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExplicitTimingMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eTimingMode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eTimingMode);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.SubmitExplicitTimingData
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::SubmitExplicitTimingData() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::SubmitExplicitTimingData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubmitExplicitTimingData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CVRCompositor::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)(System::IntPtr)>(&CVRCompositor::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)(System::IntPtr)>(&CVRCompositor::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::SetTrackingSpace
// Il2CppName: SetTrackingSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)(OVR::OpenVR::ETrackingUniverseOrigin)>(&CVRCompositor::SetTrackingSpace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "SetTrackingSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::GetTrackingSpace
// Il2CppName: GetTrackingSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::ETrackingUniverseOrigin (CVRCompositor::*)()>(&CVRCompositor::GetTrackingSpace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "GetTrackingSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::WaitGetPoses
// Il2CppName: WaitGetPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRCompositorError (CVRCompositor::*)(::Array<OVR::OpenVR::TrackedDevicePose_t>*, ::Array<OVR::OpenVR::TrackedDevicePose_t>*)>(&CVRCompositor::WaitGetPoses)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "WaitGetPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::TrackedDevicePose_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::TrackedDevicePose_t>*>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::GetLastPoses
// Il2CppName: GetLastPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRCompositorError (CVRCompositor::*)(::Array<OVR::OpenVR::TrackedDevicePose_t>*, ::Array<OVR::OpenVR::TrackedDevicePose_t>*)>(&CVRCompositor::GetLastPoses)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "GetLastPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::TrackedDevicePose_t>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::TrackedDevicePose_t>*>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::GetLastPoseForTrackedDeviceIndex
// Il2CppName: GetLastPoseForTrackedDeviceIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRCompositorError (CVRCompositor::*)(uint, OVR::OpenVR::TrackedDevicePose_t&, OVR::OpenVR::TrackedDevicePose_t&)>(&CVRCompositor::GetLastPoseForTrackedDeviceIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "GetLastPoseForTrackedDeviceIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::TrackedDevicePose_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::TrackedDevicePose_t&>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::Submit
// Il2CppName: Submit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRCompositorError (CVRCompositor::*)(OVR::OpenVR::EVREye, OVR::OpenVR::Texture_t&, OVR::OpenVR::VRTextureBounds_t&, OVR::OpenVR::EVRSubmitFlags)>(&CVRCompositor::Submit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "Submit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVREye>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::Texture_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRTextureBounds_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSubmitFlags>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::ClearLastSubmittedFrame
// Il2CppName: ClearLastSubmittedFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)()>(&CVRCompositor::ClearLastSubmittedFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "ClearLastSubmittedFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::PostPresentHandoff
// Il2CppName: PostPresentHandoff
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)()>(&CVRCompositor::PostPresentHandoff)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "PostPresentHandoff", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::GetFrameTiming
// Il2CppName: GetFrameTiming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRCompositor::*)(OVR::OpenVR::Compositor_FrameTiming&, uint)>(&CVRCompositor::GetFrameTiming)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "GetFrameTiming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::Compositor_FrameTiming&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::GetFrameTimings
// Il2CppName: GetFrameTimings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRCompositor::*)(OVR::OpenVR::Compositor_FrameTiming&, uint)>(&CVRCompositor::GetFrameTimings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "GetFrameTimings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::Compositor_FrameTiming&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::GetFrameTimeRemaining
// Il2CppName: GetFrameTimeRemaining
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (CVRCompositor::*)()>(&CVRCompositor::GetFrameTimeRemaining)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "GetFrameTimeRemaining", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::GetCumulativeStats
// Il2CppName: GetCumulativeStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)(OVR::OpenVR::Compositor_CumulativeStats&, uint)>(&CVRCompositor::GetCumulativeStats)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "GetCumulativeStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::Compositor_CumulativeStats&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::FadeToColor
// Il2CppName: FadeToColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)(float, float, float, float, float, bool)>(&CVRCompositor::FadeToColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "FadeToColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::GetCurrentFadeColor
// Il2CppName: GetCurrentFadeColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::HmdColor_t (CVRCompositor::*)(bool)>(&CVRCompositor::GetCurrentFadeColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "GetCurrentFadeColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::FadeGrid
// Il2CppName: FadeGrid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)(float, bool)>(&CVRCompositor::FadeGrid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "FadeGrid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::GetCurrentGridAlpha
// Il2CppName: GetCurrentGridAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (CVRCompositor::*)()>(&CVRCompositor::GetCurrentGridAlpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "GetCurrentGridAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::SetSkyboxOverride
// Il2CppName: SetSkyboxOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRCompositorError (CVRCompositor::*)(::Array<OVR::OpenVR::Texture_t>*)>(&CVRCompositor::SetSkyboxOverride)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "SetSkyboxOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::Texture_t>*>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::ClearSkyboxOverride
// Il2CppName: ClearSkyboxOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)()>(&CVRCompositor::ClearSkyboxOverride)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "ClearSkyboxOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::CompositorBringToFront
// Il2CppName: CompositorBringToFront
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)()>(&CVRCompositor::CompositorBringToFront)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "CompositorBringToFront", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::CompositorGoToBack
// Il2CppName: CompositorGoToBack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)()>(&CVRCompositor::CompositorGoToBack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "CompositorGoToBack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::CompositorQuit
// Il2CppName: CompositorQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)()>(&CVRCompositor::CompositorQuit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "CompositorQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::IsFullscreen
// Il2CppName: IsFullscreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRCompositor::*)()>(&CVRCompositor::IsFullscreen)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "IsFullscreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::GetCurrentSceneFocusProcess
// Il2CppName: GetCurrentSceneFocusProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRCompositor::*)()>(&CVRCompositor::GetCurrentSceneFocusProcess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "GetCurrentSceneFocusProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::GetLastFrameRenderer
// Il2CppName: GetLastFrameRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRCompositor::*)()>(&CVRCompositor::GetLastFrameRenderer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "GetLastFrameRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::CanRenderScene
// Il2CppName: CanRenderScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRCompositor::*)()>(&CVRCompositor::CanRenderScene)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "CanRenderScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::ShowMirrorWindow
// Il2CppName: ShowMirrorWindow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)()>(&CVRCompositor::ShowMirrorWindow)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "ShowMirrorWindow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::HideMirrorWindow
// Il2CppName: HideMirrorWindow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)()>(&CVRCompositor::HideMirrorWindow)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "HideMirrorWindow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::IsMirrorWindowVisible
// Il2CppName: IsMirrorWindowVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRCompositor::*)()>(&CVRCompositor::IsMirrorWindowVisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "IsMirrorWindowVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::CompositorDumpImages
// Il2CppName: CompositorDumpImages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)()>(&CVRCompositor::CompositorDumpImages)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "CompositorDumpImages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::ShouldAppRenderWithLowResources
// Il2CppName: ShouldAppRenderWithLowResources
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRCompositor::*)()>(&CVRCompositor::ShouldAppRenderWithLowResources)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "ShouldAppRenderWithLowResources", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::ForceInterleavedReprojectionOn
// Il2CppName: ForceInterleavedReprojectionOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)(bool)>(&CVRCompositor::ForceInterleavedReprojectionOn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "ForceInterleavedReprojectionOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::ForceReconnectProcess
// Il2CppName: ForceReconnectProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)()>(&CVRCompositor::ForceReconnectProcess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "ForceReconnectProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRCompositor::SuspendRendering
// Il2CppName: SuspendRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)(bool)>(&CVRCompositor::SuspendRendering)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "SuspendRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::GetMirrorTextureD3D11
// Il2CppName: GetMirrorTextureD3D11
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRCompositorError (CVRCompositor::*)(OVR::OpenVR::EVREye, System::IntPtr, System::IntPtr&)>(&CVRCompositor::GetMirrorTextureD3D11)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "GetMirrorTextureD3D11", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVREye>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::ReleaseMirrorTextureD3D11
// Il2CppName: ReleaseMirrorTextureD3D11
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)(System::IntPtr)>(&CVRCompositor::ReleaseMirrorTextureD3D11)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "ReleaseMirrorTextureD3D11", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::GetMirrorTextureGL
// Il2CppName: GetMirrorTextureGL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRCompositorError (CVRCompositor::*)(OVR::OpenVR::EVREye, uint&, System::IntPtr)>(&CVRCompositor::GetMirrorTextureGL)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "GetMirrorTextureGL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVREye>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::ReleaseSharedGLTexture
// Il2CppName: ReleaseSharedGLTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRCompositor::*)(uint, System::IntPtr)>(&CVRCompositor::ReleaseSharedGLTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "ReleaseSharedGLTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::LockGLSharedTextureForAccess
// Il2CppName: LockGLSharedTextureForAccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)(System::IntPtr)>(&CVRCompositor::LockGLSharedTextureForAccess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "LockGLSharedTextureForAccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::UnlockGLSharedTextureForAccess
// Il2CppName: UnlockGLSharedTextureForAccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)(System::IntPtr)>(&CVRCompositor::UnlockGLSharedTextureForAccess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "UnlockGLSharedTextureForAccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::GetVulkanInstanceExtensionsRequired
// Il2CppName: GetVulkanInstanceExtensionsRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRCompositor::*)(System::Text::StringBuilder*, uint)>(&CVRCompositor::GetVulkanInstanceExtensionsRequired)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "GetVulkanInstanceExtensionsRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::GetVulkanDeviceExtensionsRequired
// Il2CppName: GetVulkanDeviceExtensionsRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRCompositor::*)(System::IntPtr, System::Text::StringBuilder*, uint)>(&CVRCompositor::GetVulkanDeviceExtensionsRequired)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "GetVulkanDeviceExtensionsRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::SetExplicitTimingMode
// Il2CppName: SetExplicitTimingMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRCompositor::*)(OVR::OpenVR::EVRCompositorTimingMode)>(&CVRCompositor::SetExplicitTimingMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "SetExplicitTimingMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRCompositorTimingMode>()});
  }
};
// Writing MetadataGetter for method: CVRCompositor::SubmitExplicitTimingData
// Il2CppName: SubmitExplicitTimingData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRCompositorError (CVRCompositor::*)()>(&CVRCompositor::SubmitExplicitTimingData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRCompositor*), "SubmitExplicitTimingData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVROverlay
#include "OVR/OpenVR/CVROverlay.hpp"
// Including type: OVR.OpenVR.CVROverlay/_PollNextOverlayEventPacked
#include "OVR/OpenVR/CVROverlay__PollNextOverlayEventPacked.hpp"
// Including type: OVR.OpenVR.CVROverlay/PollNextOverlayEventUnion
#include "OVR/OpenVR/CVROverlay_PollNextOverlayEventUnion.hpp"
// Including type: OVR.OpenVR.EVROverlayError
#include "OVR/OpenVR/EVROverlayError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.VROverlayFlags
#include "OVR/OpenVR/VROverlayFlags.hpp"
// Including type: OVR.OpenVR.EColorSpace
#include "OVR/OpenVR/EColorSpace.hpp"
// Including type: OVR.OpenVR.VRTextureBounds_t
#include "OVR/OpenVR/VRTextureBounds_t.hpp"
// Including type: OVR.OpenVR.HmdColor_t
#include "OVR/OpenVR/HmdColor_t.hpp"
// Including type: OVR.OpenVR.VROverlayTransformType
#include "OVR/OpenVR/VROverlayTransformType.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.HmdMatrix34_t
#include "OVR/OpenVR/HmdMatrix34_t.hpp"
// Including type: OVR.OpenVR.HmdVector2_t
#include "OVR/OpenVR/HmdVector2_t.hpp"
// Including type: OVR.OpenVR.VREvent_t
#include "OVR/OpenVR/VREvent_t.hpp"
// Including type: OVR.OpenVR.VROverlayInputMethod
#include "OVR/OpenVR/VROverlayInputMethod.hpp"
// Including type: OVR.OpenVR.VROverlayIntersectionParams_t
#include "OVR/OpenVR/VROverlayIntersectionParams_t.hpp"
// Including type: OVR.OpenVR.VROverlayIntersectionResults_t
#include "OVR/OpenVR/VROverlayIntersectionResults_t.hpp"
// Including type: OVR.OpenVR.EOverlayDirection
#include "OVR/OpenVR/EOverlayDirection.hpp"
// Including type: OVR.OpenVR.EDualAnalogWhich
#include "OVR/OpenVR/EDualAnalogWhich.hpp"
// Including type: OVR.OpenVR.Texture_t
#include "OVR/OpenVR/Texture_t.hpp"
// Including type: OVR.OpenVR.ETextureType
#include "OVR/OpenVR/ETextureType.hpp"
// Including type: OVR.OpenVR.HmdRect2_t
#include "OVR/OpenVR/HmdRect2_t.hpp"
// Including type: OVR.OpenVR.VROverlayIntersectionMaskPrimitive_t
#include "OVR/OpenVR/VROverlayIntersectionMaskPrimitive_t.hpp"
// Including type: OVR.OpenVR.VRMessageOverlayResponse
#include "OVR/OpenVR/VRMessageOverlayResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVROverlay.FindOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::FindOverlay(::Il2CppString* pchOverlayKey, uint64_t& pOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::FindOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayKey), ::il2cpp_utils::ExtractType(pOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.CreateOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::CreateOverlay(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayName, uint64_t& pOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::CreateOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayKey), ::il2cpp_utils::ExtractType(pchOverlayName), ::il2cpp_utils::ExtractType(pOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayName, pOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.DestroyOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::DestroyOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::DestroyOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetHighQualityOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetHighQualityOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetHighQualityOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighQualityOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetHighQualityOverlay
uint64_t OVR::OpenVR::CVROverlay::GetHighQualityOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetHighQualityOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHighQualityOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayKey
uint OVR::OpenVR::CVROverlay::GetOverlayKey(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, OVR::OpenVR::EVROverlayError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, pError);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayName
uint OVR::OpenVR::CVROverlay::GetOverlayName(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, OVR::OpenVR::EVROverlayError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, pError);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayName
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayName(uint64_t ulOverlayHandle, ::Il2CppString* pchName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchName)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchName);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayImageData
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayImageData(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unBufferSize, uint& punWidth, uint& punHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayImageData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayImageData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvBuffer), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(punWidth), ::il2cpp_utils::ExtractType(punHeight)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unBufferSize, punWidth, punHeight);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayErrorNameFromEnum
::Il2CppString* OVR::OpenVR::CVROverlay::GetOverlayErrorNameFromEnum(OVR::OpenVR::EVROverlayError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayRenderingPid
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayRenderingPid(uint64_t ulOverlayHandle, uint unPID) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayRenderingPid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayRenderingPid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unPID)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unPID);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayRenderingPid
uint OVR::OpenVR::CVROverlay::GetOverlayRenderingPid(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayRenderingPid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayRenderingPid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayFlag
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayFlag(uint64_t ulOverlayHandle, OVR::OpenVR::VROverlayFlags eOverlayFlag, bool bEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayFlag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayFlag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eOverlayFlag), ::il2cpp_utils::ExtractType(bEnabled)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, bEnabled);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayFlag
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayFlag(uint64_t ulOverlayHandle, OVR::OpenVR::VROverlayFlags eOverlayFlag, bool& pbEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayFlag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayFlag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eOverlayFlag), ::il2cpp_utils::ExtractType(pbEnabled)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, pbEnabled);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayColor
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayColor(uint64_t ulOverlayHandle, float fRed, float fGreen, float fBlue) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fRed), ::il2cpp_utils::ExtractType(fGreen), ::il2cpp_utils::ExtractType(fBlue)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fRed, fGreen, fBlue);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayColor
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayColor(uint64_t ulOverlayHandle, float& pfRed, float& pfGreen, float& pfBlue) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfRed), ::il2cpp_utils::ExtractType(pfGreen), ::il2cpp_utils::ExtractType(pfBlue)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfRed, pfGreen, pfBlue);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayAlpha
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayAlpha(uint64_t ulOverlayHandle, float fAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fAlpha)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fAlpha);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayAlpha
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayAlpha(uint64_t ulOverlayHandle, float& pfAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfAlpha)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfAlpha);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTexelAspect
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTexelAspect(uint64_t ulOverlayHandle, float fTexelAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTexelAspect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTexelAspect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fTexelAspect)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fTexelAspect);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTexelAspect
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTexelAspect(uint64_t ulOverlayHandle, float& pfTexelAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTexelAspect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTexelAspect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfTexelAspect)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfTexelAspect);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlaySortOrder
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlaySortOrder(uint64_t ulOverlayHandle, uint unSortOrder) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlaySortOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlaySortOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unSortOrder)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unSortOrder);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlaySortOrder
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlaySortOrder(uint64_t ulOverlayHandle, uint& punSortOrder) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlaySortOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlaySortOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punSortOrder)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punSortOrder);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayWidthInMeters
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayWidthInMeters(uint64_t ulOverlayHandle, float fWidthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayWidthInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayWidthInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fWidthInMeters)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fWidthInMeters);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayWidthInMeters
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayWidthInMeters(uint64_t ulOverlayHandle, float& pfWidthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayWidthInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayWidthInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfWidthInMeters)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfWidthInMeters);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayAutoCurveDistanceRangeInMeters
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayAutoCurveDistanceRangeInMeters(uint64_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayAutoCurveDistanceRangeInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayAutoCurveDistanceRangeInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fMinDistanceInMeters), ::il2cpp_utils::ExtractType(fMaxDistanceInMeters)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fMinDistanceInMeters, fMaxDistanceInMeters);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayAutoCurveDistanceRangeInMeters
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayAutoCurveDistanceRangeInMeters(uint64_t ulOverlayHandle, float& pfMinDistanceInMeters, float& pfMaxDistanceInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayAutoCurveDistanceRangeInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayAutoCurveDistanceRangeInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfMinDistanceInMeters), ::il2cpp_utils::ExtractType(pfMaxDistanceInMeters)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfMinDistanceInMeters, pfMaxDistanceInMeters);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTextureColorSpace
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTextureColorSpace(uint64_t ulOverlayHandle, OVR::OpenVR::EColorSpace eTextureColorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTextureColorSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTextureColorSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eTextureColorSpace)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTextureColorSpace);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTextureColorSpace
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTextureColorSpace(uint64_t ulOverlayHandle, OVR::OpenVR::EColorSpace& peTextureColorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTextureColorSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTextureColorSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peTextureColorSpace)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peTextureColorSpace);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTextureBounds
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTextureBounds(uint64_t ulOverlayHandle, OVR::OpenVR::VRTextureBounds_t& pOverlayTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTextureBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTextureBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pOverlayTextureBounds)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pOverlayTextureBounds);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTextureBounds
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTextureBounds(uint64_t ulOverlayHandle, OVR::OpenVR::VRTextureBounds_t& pOverlayTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTextureBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTextureBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pOverlayTextureBounds)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pOverlayTextureBounds);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayRenderModel
uint OVR::OpenVR::CVROverlay::GetOverlayRenderModel(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, OVR::OpenVR::HmdColor_t& pColor, OVR::OpenVR::EVROverlayError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pColor), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, pColor, pError);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayRenderModel
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayRenderModel(uint64_t ulOverlayHandle, ::Il2CppString* pchRenderModel, OVR::OpenVR::HmdColor_t& pColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchRenderModel), ::il2cpp_utils::ExtractType(pColor)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchRenderModel, pColor);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTransformType
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTransformType(uint64_t ulOverlayHandle, OVR::OpenVR::VROverlayTransformType& peTransformType) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTransformType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peTransformType)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peTransformType);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTransformAbsolute
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTransformAbsolute(uint64_t ulOverlayHandle, OVR::OpenVR::ETrackingUniverseOrigin eTrackingOrigin, OVR::OpenVR::HmdMatrix34_t& pmatTrackingOriginToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTransformAbsolute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformAbsolute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eTrackingOrigin), ::il2cpp_utils::ExtractType(pmatTrackingOriginToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, pmatTrackingOriginToOverlayTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTransformAbsolute
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTransformAbsolute(uint64_t ulOverlayHandle, OVR::OpenVR::ETrackingUniverseOrigin& peTrackingOrigin, OVR::OpenVR::HmdMatrix34_t& pmatTrackingOriginToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTransformAbsolute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformAbsolute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peTrackingOrigin), ::il2cpp_utils::ExtractType(pmatTrackingOriginToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peTrackingOrigin, pmatTrackingOriginToOverlayTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTransformTrackedDeviceRelative
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTransformTrackedDeviceRelative(uint64_t ulOverlayHandle, uint unTrackedDevice, OVR::OpenVR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTransformTrackedDeviceRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformTrackedDeviceRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unTrackedDevice), ::il2cpp_utils::ExtractType(pmatTrackedDeviceToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unTrackedDevice, pmatTrackedDeviceToOverlayTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTransformTrackedDeviceRelative
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTransformTrackedDeviceRelative(uint64_t ulOverlayHandle, uint& punTrackedDevice, OVR::OpenVR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTransformTrackedDeviceRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformTrackedDeviceRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punTrackedDevice), ::il2cpp_utils::ExtractType(pmatTrackedDeviceToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punTrackedDevice, pmatTrackedDeviceToOverlayTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTransformTrackedDeviceComponent
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTransformTrackedDeviceComponent(uint64_t ulOverlayHandle, uint unDeviceIndex, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTransformTrackedDeviceComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformTrackedDeviceComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(pchComponentName)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unDeviceIndex, pchComponentName);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTransformTrackedDeviceComponent
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTransformTrackedDeviceComponent(uint64_t ulOverlayHandle, uint& punDeviceIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTransformTrackedDeviceComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformTrackedDeviceComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punDeviceIndex), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(unComponentNameSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punDeviceIndex, pchComponentName, unComponentNameSize);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTransformOverlayRelative
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTransformOverlayRelative(uint64_t ulOverlayHandle, uint64_t& ulOverlayHandleParent, OVR::OpenVR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTransformOverlayRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformOverlayRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulOverlayHandleParent), ::il2cpp_utils::ExtractType(pmatParentOverlayToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTransformOverlayRelative
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTransformOverlayRelative(uint64_t ulOverlayHandle, uint64_t ulOverlayHandleParent, OVR::OpenVR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTransformOverlayRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformOverlayRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulOverlayHandleParent), ::il2cpp_utils::ExtractType(pmatParentOverlayToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ShowOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::ShowOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ShowOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.HideOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::HideOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::HideOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.IsOverlayVisible
bool OVR::OpenVR::CVROverlay::IsOverlayVisible(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::IsOverlayVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsOverlayVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetTransformForOverlayCoordinates
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetTransformForOverlayCoordinates(uint64_t ulOverlayHandle, OVR::OpenVR::ETrackingUniverseOrigin eTrackingOrigin, OVR::OpenVR::HmdVector2_t coordinatesInOverlay, OVR::OpenVR::HmdMatrix34_t& pmatTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetTransformForOverlayCoordinates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTransformForOverlayCoordinates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eTrackingOrigin), ::il2cpp_utils::ExtractType(coordinatesInOverlay), ::il2cpp_utils::ExtractType(pmatTransform)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, pmatTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.PollNextOverlayEvent
bool OVR::OpenVR::CVROverlay::PollNextOverlayEvent(uint64_t ulOverlayHandle, OVR::OpenVR::VREvent_t& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::PollNextOverlayEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollNextOverlayEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, pEvent, uncbVREvent);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayInputMethod
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayInputMethod(uint64_t ulOverlayHandle, OVR::OpenVR::VROverlayInputMethod& peInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayInputMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayInputMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peInputMethod)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peInputMethod);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayInputMethod
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayInputMethod(uint64_t ulOverlayHandle, OVR::OpenVR::VROverlayInputMethod eInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayInputMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayInputMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eInputMethod)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMethod);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayMouseScale
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayMouseScale(uint64_t ulOverlayHandle, OVR::OpenVR::HmdVector2_t& pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayMouseScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayMouseScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvecMouseScale)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvecMouseScale);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayMouseScale
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayMouseScale(uint64_t ulOverlayHandle, OVR::OpenVR::HmdVector2_t& pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayMouseScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayMouseScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvecMouseScale)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvecMouseScale);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ComputeOverlayIntersection
bool OVR::OpenVR::CVROverlay::ComputeOverlayIntersection(uint64_t ulOverlayHandle, OVR::OpenVR::VROverlayIntersectionParams_t& pParams, OVR::OpenVR::VROverlayIntersectionResults_t& pResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ComputeOverlayIntersection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeOverlayIntersection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pParams), ::il2cpp_utils::ExtractType(pResults)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, pParams, pResults);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.IsHoverTargetOverlay
bool OVR::OpenVR::CVROverlay::IsHoverTargetOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::IsHoverTargetOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsHoverTargetOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetGamepadFocusOverlay
uint64_t OVR::OpenVR::CVROverlay::GetGamepadFocusOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetGamepadFocusOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGamepadFocusOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetGamepadFocusOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetGamepadFocusOverlay(uint64_t ulNewFocusOverlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetGamepadFocusOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGamepadFocusOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulNewFocusOverlay)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulNewFocusOverlay);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayNeighbor
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayNeighbor(OVR::OpenVR::EOverlayDirection eDirection, uint64_t ulFrom, uint64_t ulTo) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayNeighbor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayNeighbor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eDirection), ::il2cpp_utils::ExtractType(ulFrom), ::il2cpp_utils::ExtractType(ulTo)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom, ulTo);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.MoveGamepadFocusToNeighbor
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::MoveGamepadFocusToNeighbor(OVR::OpenVR::EOverlayDirection eDirection, uint64_t ulFrom) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::MoveGamepadFocusToNeighbor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveGamepadFocusToNeighbor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eDirection), ::il2cpp_utils::ExtractType(ulFrom)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayDualAnalogTransform
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayDualAnalogTransform(uint64_t ulOverlay, OVR::OpenVR::EDualAnalogWhich eWhich, System::IntPtr vCenter, float fRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayDualAnalogTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayDualAnalogTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlay), ::il2cpp_utils::ExtractType(eWhich), ::il2cpp_utils::ExtractType(vCenter), ::il2cpp_utils::ExtractType(fRadius)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, vCenter, fRadius);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayDualAnalogTransform
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayDualAnalogTransform(uint64_t ulOverlay, OVR::OpenVR::EDualAnalogWhich eWhich, OVR::OpenVR::HmdVector2_t& pvCenter, float& pfRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayDualAnalogTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayDualAnalogTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlay), ::il2cpp_utils::ExtractType(eWhich), ::il2cpp_utils::ExtractType(pvCenter), ::il2cpp_utils::ExtractType(pfRadius)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, pvCenter, pfRadius);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTexture
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTexture(uint64_t ulOverlayHandle, OVR::OpenVR::Texture_t& pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pTexture)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pTexture);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ClearOverlayTexture
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::ClearOverlayTexture(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ClearOverlayTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearOverlayTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayRaw
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayRaw(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvBuffer), ::il2cpp_utils::ExtractType(unWidth), ::il2cpp_utils::ExtractType(unHeight), ::il2cpp_utils::ExtractType(unDepth)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayFromFile
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayFromFile(uint64_t ulOverlayHandle, ::Il2CppString* pchFilePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayFromFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayFromFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchFilePath)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchFilePath);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTexture
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTexture(uint64_t ulOverlayHandle, System::IntPtr& pNativeTextureHandle, System::IntPtr pNativeTextureRef, uint& pWidth, uint& pHeight, uint& pNativeFormat, OVR::OpenVR::ETextureType& pAPIType, OVR::OpenVR::EColorSpace& pColorSpace, OVR::OpenVR::VRTextureBounds_t& pTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pNativeTextureHandle), ::il2cpp_utils::ExtractType(pNativeTextureRef), ::il2cpp_utils::ExtractType(pWidth), ::il2cpp_utils::ExtractType(pHeight), ::il2cpp_utils::ExtractType(pNativeFormat), ::il2cpp_utils::ExtractType(pAPIType), ::il2cpp_utils::ExtractType(pColorSpace), ::il2cpp_utils::ExtractType(pTextureBounds)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ReleaseNativeOverlayHandle
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::ReleaseNativeOverlayHandle(uint64_t ulOverlayHandle, System::IntPtr pNativeTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ReleaseNativeOverlayHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseNativeOverlayHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pNativeTextureHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTextureSize
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTextureSize(uint64_t ulOverlayHandle, uint& pWidth, uint& pHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTextureSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTextureSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pWidth), ::il2cpp_utils::ExtractType(pHeight)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pWidth, pHeight);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.CreateDashboardOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::CreateDashboardOverlay(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayFriendlyName, uint64_t& pMainHandle, uint64_t& pThumbnailHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::CreateDashboardOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateDashboardOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayKey), ::il2cpp_utils::ExtractType(pchOverlayFriendlyName), ::il2cpp_utils::ExtractType(pMainHandle), ::il2cpp_utils::ExtractType(pThumbnailHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.IsDashboardVisible
bool OVR::OpenVR::CVROverlay::IsDashboardVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::IsDashboardVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDashboardVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.IsActiveDashboardOverlay
bool OVR::OpenVR::CVROverlay::IsActiveDashboardOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::IsActiveDashboardOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsActiveDashboardOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetDashboardOverlaySceneProcess
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetDashboardOverlaySceneProcess(uint64_t ulOverlayHandle, uint unProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetDashboardOverlaySceneProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDashboardOverlaySceneProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unProcessId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unProcessId);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetDashboardOverlaySceneProcess
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetDashboardOverlaySceneProcess(uint64_t ulOverlayHandle, uint& punProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetDashboardOverlaySceneProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDashboardOverlaySceneProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punProcessId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punProcessId);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ShowDashboard
void OVR::OpenVR::CVROverlay::ShowDashboard(::Il2CppString* pchOverlayToShow) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ShowDashboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowDashboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayToShow)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchOverlayToShow);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetPrimaryDashboardDevice
uint OVR::OpenVR::CVROverlay::GetPrimaryDashboardDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetPrimaryDashboardDevice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPrimaryDashboardDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ShowKeyboard
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::ShowKeyboard(int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ShowKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eInputMode), ::il2cpp_utils::ExtractType(eLineInputMode), ::il2cpp_utils::ExtractType(pchDescription), ::il2cpp_utils::ExtractType(unCharMax), ::il2cpp_utils::ExtractType(pchExistingText), ::il2cpp_utils::ExtractType(bUseMinimalMode), ::il2cpp_utils::ExtractType(uUserValue)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ShowKeyboardForOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::ShowKeyboardForOverlay(uint64_t ulOverlayHandle, int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ShowKeyboardForOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowKeyboardForOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eInputMode), ::il2cpp_utils::ExtractType(eLineInputMode), ::il2cpp_utils::ExtractType(pchDescription), ::il2cpp_utils::ExtractType(unCharMax), ::il2cpp_utils::ExtractType(pchExistingText), ::il2cpp_utils::ExtractType(bUseMinimalMode), ::il2cpp_utils::ExtractType(uUserValue)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetKeyboardText
uint OVR::OpenVR::CVROverlay::GetKeyboardText(System::Text::StringBuilder* pchText, uint cchText) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetKeyboardText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetKeyboardText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(cchText)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchText, cchText);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.HideKeyboard
void OVR::OpenVR::CVROverlay::HideKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::HideKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetKeyboardTransformAbsolute
void OVR::OpenVR::CVROverlay::SetKeyboardTransformAbsolute(OVR::OpenVR::ETrackingUniverseOrigin eTrackingOrigin, OVR::OpenVR::HmdMatrix34_t& pmatTrackingOriginToKeyboardTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetKeyboardTransformAbsolute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKeyboardTransformAbsolute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eTrackingOrigin), ::il2cpp_utils::ExtractType(pmatTrackingOriginToKeyboardTransform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eTrackingOrigin, pmatTrackingOriginToKeyboardTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetKeyboardPositionForOverlay
void OVR::OpenVR::CVROverlay::SetKeyboardPositionForOverlay(uint64_t ulOverlayHandle, OVR::OpenVR::HmdRect2_t avoidRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetKeyboardPositionForOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKeyboardPositionForOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(avoidRect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ulOverlayHandle, avoidRect);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayIntersectionMask
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayIntersectionMask(uint64_t ulOverlayHandle, OVR::OpenVR::VROverlayIntersectionMaskPrimitive_t& pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayIntersectionMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayIntersectionMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pMaskPrimitives), ::il2cpp_utils::ExtractType(unNumMaskPrimitives), ::il2cpp_utils::ExtractType(unPrimitiveSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pMaskPrimitives, unNumMaskPrimitives, unPrimitiveSize);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayFlags
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayFlags(uint64_t ulOverlayHandle, uint& pFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pFlags)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pFlags);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ShowMessageOverlay
OVR::OpenVR::VRMessageOverlayResponse OVR::OpenVR::CVROverlay::ShowMessageOverlay(::Il2CppString* pchText, ::Il2CppString* pchCaption, ::Il2CppString* pchButton0Text, ::Il2CppString* pchButton1Text, ::Il2CppString* pchButton2Text, ::Il2CppString* pchButton3Text) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ShowMessageOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowMessageOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(pchCaption), ::il2cpp_utils::ExtractType(pchButton0Text), ::il2cpp_utils::ExtractType(pchButton1Text), ::il2cpp_utils::ExtractType(pchButton2Text), ::il2cpp_utils::ExtractType(pchButton3Text)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::VRMessageOverlayResponse, false>(this, ___internal__method, pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.CloseMessageOverlay
void OVR::OpenVR::CVROverlay::CloseMessageOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::CloseMessageOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CloseMessageOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CVROverlay::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVROverlay::*)(System::IntPtr)>(&CVROverlay::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVROverlay::*)(System::IntPtr)>(&CVROverlay::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::FindOverlay
// Il2CppName: FindOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(::Il2CppString*, uint64_t&)>(&CVROverlay::FindOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "FindOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::CreateOverlay
// Il2CppName: CreateOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(::Il2CppString*, ::Il2CppString*, uint64_t&)>(&CVROverlay::CreateOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "CreateOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::DestroyOverlay
// Il2CppName: DestroyOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t)>(&CVROverlay::DestroyOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "DestroyOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetHighQualityOverlay
// Il2CppName: SetHighQualityOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t)>(&CVROverlay::SetHighQualityOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetHighQualityOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetHighQualityOverlay
// Il2CppName: GetHighQualityOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (CVROverlay::*)()>(&CVROverlay::GetHighQualityOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetHighQualityOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayKey
// Il2CppName: GetOverlayKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVROverlay::*)(uint64_t, System::Text::StringBuilder*, uint, OVR::OpenVR::EVROverlayError&)>(&CVROverlay::GetOverlayKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVROverlayError&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayName
// Il2CppName: GetOverlayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVROverlay::*)(uint64_t, System::Text::StringBuilder*, uint, OVR::OpenVR::EVROverlayError&)>(&CVROverlay::GetOverlayName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVROverlayError&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayName
// Il2CppName: SetOverlayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, ::Il2CppString*)>(&CVROverlay::SetOverlayName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayImageData
// Il2CppName: GetOverlayImageData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, System::IntPtr, uint, uint&, uint&)>(&CVROverlay::GetOverlayImageData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayImageData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayErrorNameFromEnum
// Il2CppName: GetOverlayErrorNameFromEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CVROverlay::*)(OVR::OpenVR::EVROverlayError)>(&CVROverlay::GetOverlayErrorNameFromEnum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayErrorNameFromEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVROverlayError>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayRenderingPid
// Il2CppName: SetOverlayRenderingPid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, uint)>(&CVROverlay::SetOverlayRenderingPid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayRenderingPid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayRenderingPid
// Il2CppName: GetOverlayRenderingPid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVROverlay::*)(uint64_t)>(&CVROverlay::GetOverlayRenderingPid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayRenderingPid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayFlag
// Il2CppName: SetOverlayFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::VROverlayFlags, bool)>(&CVROverlay::SetOverlayFlag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VROverlayFlags>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayFlag
// Il2CppName: GetOverlayFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::VROverlayFlags, bool&)>(&CVROverlay::GetOverlayFlag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VROverlayFlags>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayColor
// Il2CppName: SetOverlayColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, float, float, float)>(&CVROverlay::SetOverlayColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayColor
// Il2CppName: GetOverlayColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, float&, float&, float&)>(&CVROverlay::GetOverlayColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayAlpha
// Il2CppName: SetOverlayAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, float)>(&CVROverlay::SetOverlayAlpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayAlpha
// Il2CppName: GetOverlayAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, float&)>(&CVROverlay::GetOverlayAlpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayTexelAspect
// Il2CppName: SetOverlayTexelAspect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, float)>(&CVROverlay::SetOverlayTexelAspect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayTexelAspect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayTexelAspect
// Il2CppName: GetOverlayTexelAspect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, float&)>(&CVROverlay::GetOverlayTexelAspect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayTexelAspect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlaySortOrder
// Il2CppName: SetOverlaySortOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, uint)>(&CVROverlay::SetOverlaySortOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlaySortOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlaySortOrder
// Il2CppName: GetOverlaySortOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, uint&)>(&CVROverlay::GetOverlaySortOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlaySortOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayWidthInMeters
// Il2CppName: SetOverlayWidthInMeters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, float)>(&CVROverlay::SetOverlayWidthInMeters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayWidthInMeters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayWidthInMeters
// Il2CppName: GetOverlayWidthInMeters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, float&)>(&CVROverlay::GetOverlayWidthInMeters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayWidthInMeters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayAutoCurveDistanceRangeInMeters
// Il2CppName: SetOverlayAutoCurveDistanceRangeInMeters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, float, float)>(&CVROverlay::SetOverlayAutoCurveDistanceRangeInMeters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayAutoCurveDistanceRangeInMeters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayAutoCurveDistanceRangeInMeters
// Il2CppName: GetOverlayAutoCurveDistanceRangeInMeters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, float&, float&)>(&CVROverlay::GetOverlayAutoCurveDistanceRangeInMeters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayAutoCurveDistanceRangeInMeters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayTextureColorSpace
// Il2CppName: SetOverlayTextureColorSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::EColorSpace)>(&CVROverlay::SetOverlayTextureColorSpace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayTextureColorSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EColorSpace>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayTextureColorSpace
// Il2CppName: GetOverlayTextureColorSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::EColorSpace&)>(&CVROverlay::GetOverlayTextureColorSpace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayTextureColorSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EColorSpace&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayTextureBounds
// Il2CppName: SetOverlayTextureBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::VRTextureBounds_t&)>(&CVROverlay::SetOverlayTextureBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayTextureBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRTextureBounds_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayTextureBounds
// Il2CppName: GetOverlayTextureBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::VRTextureBounds_t&)>(&CVROverlay::GetOverlayTextureBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayTextureBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRTextureBounds_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayRenderModel
// Il2CppName: GetOverlayRenderModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVROverlay::*)(uint64_t, System::Text::StringBuilder*, uint, OVR::OpenVR::HmdColor_t&, OVR::OpenVR::EVROverlayError&)>(&CVROverlay::GetOverlayRenderModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayRenderModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdColor_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVROverlayError&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayRenderModel
// Il2CppName: SetOverlayRenderModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, ::Il2CppString*, OVR::OpenVR::HmdColor_t&)>(&CVROverlay::SetOverlayRenderModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayRenderModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdColor_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayTransformType
// Il2CppName: GetOverlayTransformType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::VROverlayTransformType&)>(&CVROverlay::GetOverlayTransformType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayTransformType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VROverlayTransformType&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayTransformAbsolute
// Il2CppName: SetOverlayTransformAbsolute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::ETrackingUniverseOrigin, OVR::OpenVR::HmdMatrix34_t&)>(&CVROverlay::SetOverlayTransformAbsolute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayTransformAbsolute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdMatrix34_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayTransformAbsolute
// Il2CppName: GetOverlayTransformAbsolute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::ETrackingUniverseOrigin&, OVR::OpenVR::HmdMatrix34_t&)>(&CVROverlay::GetOverlayTransformAbsolute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayTransformAbsolute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdMatrix34_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayTransformTrackedDeviceRelative
// Il2CppName: SetOverlayTransformTrackedDeviceRelative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, uint, OVR::OpenVR::HmdMatrix34_t&)>(&CVROverlay::SetOverlayTransformTrackedDeviceRelative)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayTransformTrackedDeviceRelative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdMatrix34_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayTransformTrackedDeviceRelative
// Il2CppName: GetOverlayTransformTrackedDeviceRelative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, uint&, OVR::OpenVR::HmdMatrix34_t&)>(&CVROverlay::GetOverlayTransformTrackedDeviceRelative)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayTransformTrackedDeviceRelative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdMatrix34_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayTransformTrackedDeviceComponent
// Il2CppName: SetOverlayTransformTrackedDeviceComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, uint, ::Il2CppString*)>(&CVROverlay::SetOverlayTransformTrackedDeviceComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayTransformTrackedDeviceComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayTransformTrackedDeviceComponent
// Il2CppName: GetOverlayTransformTrackedDeviceComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, uint&, System::Text::StringBuilder*, uint)>(&CVROverlay::GetOverlayTransformTrackedDeviceComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayTransformTrackedDeviceComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayTransformOverlayRelative
// Il2CppName: GetOverlayTransformOverlayRelative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, uint64_t&, OVR::OpenVR::HmdMatrix34_t&)>(&CVROverlay::GetOverlayTransformOverlayRelative)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayTransformOverlayRelative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdMatrix34_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayTransformOverlayRelative
// Il2CppName: SetOverlayTransformOverlayRelative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, uint64_t, OVR::OpenVR::HmdMatrix34_t&)>(&CVROverlay::SetOverlayTransformOverlayRelative)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayTransformOverlayRelative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdMatrix34_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::ShowOverlay
// Il2CppName: ShowOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t)>(&CVROverlay::ShowOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "ShowOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::HideOverlay
// Il2CppName: HideOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t)>(&CVROverlay::HideOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "HideOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::IsOverlayVisible
// Il2CppName: IsOverlayVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVROverlay::*)(uint64_t)>(&CVROverlay::IsOverlayVisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "IsOverlayVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetTransformForOverlayCoordinates
// Il2CppName: GetTransformForOverlayCoordinates
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::ETrackingUniverseOrigin, OVR::OpenVR::HmdVector2_t, OVR::OpenVR::HmdMatrix34_t&)>(&CVROverlay::GetTransformForOverlayCoordinates)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetTransformForOverlayCoordinates", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdVector2_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdMatrix34_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::PollNextOverlayEvent
// Il2CppName: PollNextOverlayEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVROverlay::*)(uint64_t, OVR::OpenVR::VREvent_t&, uint)>(&CVROverlay::PollNextOverlayEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "PollNextOverlayEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VREvent_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayInputMethod
// Il2CppName: GetOverlayInputMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::VROverlayInputMethod&)>(&CVROverlay::GetOverlayInputMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayInputMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VROverlayInputMethod&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayInputMethod
// Il2CppName: SetOverlayInputMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::VROverlayInputMethod)>(&CVROverlay::SetOverlayInputMethod)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayInputMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VROverlayInputMethod>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayMouseScale
// Il2CppName: GetOverlayMouseScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::HmdVector2_t&)>(&CVROverlay::GetOverlayMouseScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayMouseScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdVector2_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayMouseScale
// Il2CppName: SetOverlayMouseScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::HmdVector2_t&)>(&CVROverlay::SetOverlayMouseScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayMouseScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdVector2_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::ComputeOverlayIntersection
// Il2CppName: ComputeOverlayIntersection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVROverlay::*)(uint64_t, OVR::OpenVR::VROverlayIntersectionParams_t&, OVR::OpenVR::VROverlayIntersectionResults_t&)>(&CVROverlay::ComputeOverlayIntersection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "ComputeOverlayIntersection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VROverlayIntersectionParams_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VROverlayIntersectionResults_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::IsHoverTargetOverlay
// Il2CppName: IsHoverTargetOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVROverlay::*)(uint64_t)>(&CVROverlay::IsHoverTargetOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "IsHoverTargetOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetGamepadFocusOverlay
// Il2CppName: GetGamepadFocusOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (CVROverlay::*)()>(&CVROverlay::GetGamepadFocusOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetGamepadFocusOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetGamepadFocusOverlay
// Il2CppName: SetGamepadFocusOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t)>(&CVROverlay::SetGamepadFocusOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetGamepadFocusOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayNeighbor
// Il2CppName: SetOverlayNeighbor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(OVR::OpenVR::EOverlayDirection, uint64_t, uint64_t)>(&CVROverlay::SetOverlayNeighbor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayNeighbor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EOverlayDirection>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::MoveGamepadFocusToNeighbor
// Il2CppName: MoveGamepadFocusToNeighbor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(OVR::OpenVR::EOverlayDirection, uint64_t)>(&CVROverlay::MoveGamepadFocusToNeighbor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "MoveGamepadFocusToNeighbor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EOverlayDirection>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayDualAnalogTransform
// Il2CppName: SetOverlayDualAnalogTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::EDualAnalogWhich, System::IntPtr, float)>(&CVROverlay::SetOverlayDualAnalogTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayDualAnalogTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EDualAnalogWhich>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayDualAnalogTransform
// Il2CppName: GetOverlayDualAnalogTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::EDualAnalogWhich, OVR::OpenVR::HmdVector2_t&, float&)>(&CVROverlay::GetOverlayDualAnalogTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayDualAnalogTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EDualAnalogWhich>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdVector2_t&>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayTexture
// Il2CppName: SetOverlayTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::Texture_t&)>(&CVROverlay::SetOverlayTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::Texture_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::ClearOverlayTexture
// Il2CppName: ClearOverlayTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t)>(&CVROverlay::ClearOverlayTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "ClearOverlayTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayRaw
// Il2CppName: SetOverlayRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, System::IntPtr, uint, uint, uint)>(&CVROverlay::SetOverlayRaw)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayFromFile
// Il2CppName: SetOverlayFromFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, ::Il2CppString*)>(&CVROverlay::SetOverlayFromFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayFromFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayTexture
// Il2CppName: GetOverlayTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, System::IntPtr&, System::IntPtr, uint&, uint&, uint&, OVR::OpenVR::ETextureType&, OVR::OpenVR::EColorSpace&, OVR::OpenVR::VRTextureBounds_t&)>(&CVROverlay::GetOverlayTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETextureType&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EColorSpace&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRTextureBounds_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::ReleaseNativeOverlayHandle
// Il2CppName: ReleaseNativeOverlayHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, System::IntPtr)>(&CVROverlay::ReleaseNativeOverlayHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "ReleaseNativeOverlayHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayTextureSize
// Il2CppName: GetOverlayTextureSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, uint&, uint&)>(&CVROverlay::GetOverlayTextureSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayTextureSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::CreateDashboardOverlay
// Il2CppName: CreateDashboardOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(::Il2CppString*, ::Il2CppString*, uint64_t&, uint64_t&)>(&CVROverlay::CreateDashboardOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "CreateDashboardOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::IsDashboardVisible
// Il2CppName: IsDashboardVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVROverlay::*)()>(&CVROverlay::IsDashboardVisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "IsDashboardVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVROverlay::IsActiveDashboardOverlay
// Il2CppName: IsActiveDashboardOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVROverlay::*)(uint64_t)>(&CVROverlay::IsActiveDashboardOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "IsActiveDashboardOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetDashboardOverlaySceneProcess
// Il2CppName: SetDashboardOverlaySceneProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, uint)>(&CVROverlay::SetDashboardOverlaySceneProcess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetDashboardOverlaySceneProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetDashboardOverlaySceneProcess
// Il2CppName: GetDashboardOverlaySceneProcess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, uint&)>(&CVROverlay::GetDashboardOverlaySceneProcess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetDashboardOverlaySceneProcess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::ShowDashboard
// Il2CppName: ShowDashboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVROverlay::*)(::Il2CppString*)>(&CVROverlay::ShowDashboard)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "ShowDashboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetPrimaryDashboardDevice
// Il2CppName: GetPrimaryDashboardDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVROverlay::*)()>(&CVROverlay::GetPrimaryDashboardDevice)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetPrimaryDashboardDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVROverlay::ShowKeyboard
// Il2CppName: ShowKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(int, int, ::Il2CppString*, uint, ::Il2CppString*, bool, uint64_t)>(&CVROverlay::ShowKeyboard)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "ShowKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::ShowKeyboardForOverlay
// Il2CppName: ShowKeyboardForOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, int, int, ::Il2CppString*, uint, ::Il2CppString*, bool, uint64_t)>(&CVROverlay::ShowKeyboardForOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "ShowKeyboardForOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetKeyboardText
// Il2CppName: GetKeyboardText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVROverlay::*)(System::Text::StringBuilder*, uint)>(&CVROverlay::GetKeyboardText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetKeyboardText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::HideKeyboard
// Il2CppName: HideKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVROverlay::*)()>(&CVROverlay::HideKeyboard)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "HideKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetKeyboardTransformAbsolute
// Il2CppName: SetKeyboardTransformAbsolute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVROverlay::*)(OVR::OpenVR::ETrackingUniverseOrigin, OVR::OpenVR::HmdMatrix34_t&)>(&CVROverlay::SetKeyboardTransformAbsolute)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetKeyboardTransformAbsolute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdMatrix34_t&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetKeyboardPositionForOverlay
// Il2CppName: SetKeyboardPositionForOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVROverlay::*)(uint64_t, OVR::OpenVR::HmdRect2_t)>(&CVROverlay::SetKeyboardPositionForOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetKeyboardPositionForOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::HmdRect2_t>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::SetOverlayIntersectionMask
// Il2CppName: SetOverlayIntersectionMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, OVR::OpenVR::VROverlayIntersectionMaskPrimitive_t&, uint, uint)>(&CVROverlay::SetOverlayIntersectionMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "SetOverlayIntersectionMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VROverlayIntersectionMaskPrimitive_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::GetOverlayFlags
// Il2CppName: GetOverlayFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVROverlayError (CVROverlay::*)(uint64_t, uint&)>(&CVROverlay::GetOverlayFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "GetOverlayFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::ShowMessageOverlay
// Il2CppName: ShowMessageOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::VRMessageOverlayResponse (CVROverlay::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*)>(&CVROverlay::ShowMessageOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "ShowMessageOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::CloseMessageOverlay
// Il2CppName: CloseMessageOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVROverlay::*)()>(&CVROverlay::CloseMessageOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay*), "CloseMessageOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVROverlay/_PollNextOverlayEventPacked
#include "OVR/OpenVR/CVROverlay__PollNextOverlayEventPacked.hpp"
// Including type: OVR.OpenVR.VREvent_t_Packed
#include "OVR/OpenVR/VREvent_t_Packed.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVROverlay/_PollNextOverlayEventPacked.Invoke
bool OVR::OpenVR::CVROverlay::_PollNextOverlayEventPacked::Invoke(uint64_t ulOverlayHandle, OVR::OpenVR::VREvent_t_Packed& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::_PollNextOverlayEventPacked::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, pEvent, uncbVREvent);
}
// Autogenerated method: OVR.OpenVR.CVROverlay/_PollNextOverlayEventPacked.BeginInvoke
System::IAsyncResult* OVR::OpenVR::CVROverlay::_PollNextOverlayEventPacked::BeginInvoke(uint64_t ulOverlayHandle, OVR::OpenVR::VREvent_t_Packed& pEvent, uint uncbVREvent, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::_PollNextOverlayEventPacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pEvent, uncbVREvent, callback, object);
}
// Autogenerated method: OVR.OpenVR.CVROverlay/_PollNextOverlayEventPacked.EndInvoke
bool OVR::OpenVR::CVROverlay::_PollNextOverlayEventPacked::EndInvoke(OVR::OpenVR::VREvent_t_Packed& pEvent, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::_PollNextOverlayEventPacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, result);
}
// Writing MetadataGetter for method: CVROverlay::_PollNextOverlayEventPacked::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVROverlay::_PollNextOverlayEventPacked::*)(::Il2CppObject*, System::IntPtr)>(&CVROverlay::_PollNextOverlayEventPacked::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay::_PollNextOverlayEventPacked*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVROverlay::_PollNextOverlayEventPacked::*)(::Il2CppObject*, System::IntPtr)>(&CVROverlay::_PollNextOverlayEventPacked::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay::_PollNextOverlayEventPacked*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::_PollNextOverlayEventPacked::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVROverlay::_PollNextOverlayEventPacked::*)(uint64_t, OVR::OpenVR::VREvent_t_Packed&, uint)>(&CVROverlay::_PollNextOverlayEventPacked::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay::_PollNextOverlayEventPacked*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VREvent_t_Packed&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::_PollNextOverlayEventPacked::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (CVROverlay::_PollNextOverlayEventPacked::*)(uint64_t, OVR::OpenVR::VREvent_t_Packed&, uint, System::AsyncCallback*, ::Il2CppObject*)>(&CVROverlay::_PollNextOverlayEventPacked::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay::_PollNextOverlayEventPacked*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VREvent_t_Packed&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: CVROverlay::_PollNextOverlayEventPacked::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVROverlay::_PollNextOverlayEventPacked::*)(OVR::OpenVR::VREvent_t_Packed&, System::IAsyncResult*)>(&CVROverlay::_PollNextOverlayEventPacked::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVROverlay::_PollNextOverlayEventPacked*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VREvent_t_Packed&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRRenderModels
#include "OVR/OpenVR/CVRRenderModels.hpp"
// Including type: OVR.OpenVR.CVRRenderModels/_GetComponentStatePacked
#include "OVR/OpenVR/CVRRenderModels__GetComponentStatePacked.hpp"
// Including type: OVR.OpenVR.CVRRenderModels/GetComponentStateUnion
#include "OVR/OpenVR/CVRRenderModels_GetComponentStateUnion.hpp"
// Including type: OVR.OpenVR.EVRRenderModelError
#include "OVR/OpenVR/EVRRenderModelError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.RenderModel_ControllerMode_State_t
#include "OVR/OpenVR/RenderModel_ControllerMode_State_t.hpp"
// Including type: OVR.OpenVR.RenderModel_ComponentState_t
#include "OVR/OpenVR/RenderModel_ComponentState_t.hpp"
// Including type: OVR.OpenVR.VRControllerState_t
#include "OVR/OpenVR/VRControllerState_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRRenderModels.LoadRenderModel_Async
OVR::OpenVR::EVRRenderModelError OVR::OpenVR::CVRRenderModels::LoadRenderModel_Async(::Il2CppString* pchRenderModelName, System::IntPtr& ppRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::LoadRenderModel_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadRenderModel_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(ppRenderModel)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRRenderModelError, false>(this, ___internal__method, pchRenderModelName, ppRenderModel);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.FreeRenderModel
void OVR::OpenVR::CVRRenderModels::FreeRenderModel(System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::FreeRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreeRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderModel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.LoadTexture_Async
OVR::OpenVR::EVRRenderModelError OVR::OpenVR::CVRRenderModels::LoadTexture_Async(int textureId, System::IntPtr& ppTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::LoadTexture_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadTexture_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textureId), ::il2cpp_utils::ExtractType(ppTexture)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRRenderModelError, false>(this, ___internal__method, textureId, ppTexture);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.FreeTexture
void OVR::OpenVR::CVRRenderModels::FreeTexture(System::IntPtr pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::FreeTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreeTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTexture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pTexture);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.LoadTextureD3D11_Async
OVR::OpenVR::EVRRenderModelError OVR::OpenVR::CVRRenderModels::LoadTextureD3D11_Async(int textureId, System::IntPtr pD3D11Device, System::IntPtr& ppD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::LoadTextureD3D11_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadTextureD3D11_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textureId), ::il2cpp_utils::ExtractType(pD3D11Device), ::il2cpp_utils::ExtractType(ppD3D11Texture2D)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRRenderModelError, false>(this, ___internal__method, textureId, pD3D11Device, ppD3D11Texture2D);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.LoadIntoTextureD3D11_Async
OVR::OpenVR::EVRRenderModelError OVR::OpenVR::CVRRenderModels::LoadIntoTextureD3D11_Async(int textureId, System::IntPtr pDstTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::LoadIntoTextureD3D11_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadIntoTextureD3D11_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textureId), ::il2cpp_utils::ExtractType(pDstTexture)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRRenderModelError, false>(this, ___internal__method, textureId, pDstTexture);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.FreeTextureD3D11
void OVR::OpenVR::CVRRenderModels::FreeTextureD3D11(System::IntPtr pD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::FreeTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreeTextureD3D11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pD3D11Texture2D)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pD3D11Texture2D);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetRenderModelName
uint OVR::OpenVR::CVRRenderModels::GetRenderModelName(uint unRenderModelIndex, System::Text::StringBuilder* pchRenderModelName, uint unRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetRenderModelName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unRenderModelIndex), ::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(unRenderModelNameLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unRenderModelIndex, pchRenderModelName, unRenderModelNameLen);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetRenderModelCount
uint OVR::OpenVR::CVRRenderModels::GetRenderModelCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetRenderModelCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetComponentCount
uint OVR::OpenVR::CVRRenderModels::GetComponentCount(::Il2CppString* pchRenderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetComponentCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetComponentName
uint OVR::OpenVR::CVRRenderModels::GetComponentName(::Il2CppString* pchRenderModelName, uint unComponentIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetComponentName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(unComponentIndex), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(unComponentNameLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetComponentButtonMask
uint64_t OVR::OpenVR::CVRRenderModels::GetComponentButtonMask(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetComponentButtonMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentButtonMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetComponentRenderModelName
uint OVR::OpenVR::CVRRenderModels::GetComponentRenderModelName(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::Text::StringBuilder* pchComponentRenderModelName, uint unComponentRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetComponentRenderModelName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentRenderModelName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pchComponentRenderModelName), ::il2cpp_utils::ExtractType(unComponentRenderModelNameLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetComponentStateForDevicePath
bool OVR::OpenVR::CVRRenderModels::GetComponentStateForDevicePath(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, uint64_t devicePath, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetComponentStateForDevicePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentStateForDevicePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(devicePath), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, devicePath, pState, pComponentState);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetComponentState
bool OVR::OpenVR::CVRRenderModels::GetComponentState(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, OVR::OpenVR::VRControllerState_t& pControllerState, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetComponentState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.RenderModelHasComponent
bool OVR::OpenVR::CVRRenderModels::RenderModelHasComponent(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::RenderModelHasComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderModelHasComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetRenderModelThumbnailURL
uint OVR::OpenVR::CVRRenderModels::GetRenderModelThumbnailURL(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, OVR::OpenVR::EVRRenderModelError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetRenderModelThumbnailURL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelThumbnailURL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchThumbnailURL), ::il2cpp_utils::ExtractType(unThumbnailURLLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetRenderModelOriginalPath
uint OVR::OpenVR::CVRRenderModels::GetRenderModelOriginalPath(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, OVR::OpenVR::EVRRenderModelError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetRenderModelOriginalPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelOriginalPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchOriginalPath), ::il2cpp_utils::ExtractType(unOriginalPathLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetRenderModelErrorNameFromEnum
::Il2CppString* OVR::OpenVR::CVRRenderModels::GetRenderModelErrorNameFromEnum(OVR::OpenVR::EVRRenderModelError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetRenderModelErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Writing MetadataGetter for method: CVRRenderModels::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRRenderModels::*)(System::IntPtr)>(&CVRRenderModels::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRRenderModels::*)(System::IntPtr)>(&CVRRenderModels::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::LoadRenderModel_Async
// Il2CppName: LoadRenderModel_Async
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRRenderModelError (CVRRenderModels::*)(::Il2CppString*, System::IntPtr&)>(&CVRRenderModels::LoadRenderModel_Async)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "LoadRenderModel_Async", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::FreeRenderModel
// Il2CppName: FreeRenderModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRRenderModels::*)(System::IntPtr)>(&CVRRenderModels::FreeRenderModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "FreeRenderModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::LoadTexture_Async
// Il2CppName: LoadTexture_Async
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRRenderModelError (CVRRenderModels::*)(int, System::IntPtr&)>(&CVRRenderModels::LoadTexture_Async)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "LoadTexture_Async", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::FreeTexture
// Il2CppName: FreeTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRRenderModels::*)(System::IntPtr)>(&CVRRenderModels::FreeTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "FreeTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::LoadTextureD3D11_Async
// Il2CppName: LoadTextureD3D11_Async
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRRenderModelError (CVRRenderModels::*)(int, System::IntPtr, System::IntPtr&)>(&CVRRenderModels::LoadTextureD3D11_Async)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "LoadTextureD3D11_Async", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr&>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::LoadIntoTextureD3D11_Async
// Il2CppName: LoadIntoTextureD3D11_Async
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRRenderModelError (CVRRenderModels::*)(int, System::IntPtr)>(&CVRRenderModels::LoadIntoTextureD3D11_Async)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "LoadIntoTextureD3D11_Async", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::FreeTextureD3D11
// Il2CppName: FreeTextureD3D11
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRRenderModels::*)(System::IntPtr)>(&CVRRenderModels::FreeTextureD3D11)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "FreeTextureD3D11", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::GetRenderModelName
// Il2CppName: GetRenderModelName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRRenderModels::*)(uint, System::Text::StringBuilder*, uint)>(&CVRRenderModels::GetRenderModelName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "GetRenderModelName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::GetRenderModelCount
// Il2CppName: GetRenderModelCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRRenderModels::*)()>(&CVRRenderModels::GetRenderModelCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "GetRenderModelCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::GetComponentCount
// Il2CppName: GetComponentCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRRenderModels::*)(::Il2CppString*)>(&CVRRenderModels::GetComponentCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "GetComponentCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::GetComponentName
// Il2CppName: GetComponentName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRRenderModels::*)(::Il2CppString*, uint, System::Text::StringBuilder*, uint)>(&CVRRenderModels::GetComponentName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "GetComponentName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::GetComponentButtonMask
// Il2CppName: GetComponentButtonMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (CVRRenderModels::*)(::Il2CppString*, ::Il2CppString*)>(&CVRRenderModels::GetComponentButtonMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "GetComponentButtonMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::GetComponentRenderModelName
// Il2CppName: GetComponentRenderModelName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRRenderModels::*)(::Il2CppString*, ::Il2CppString*, System::Text::StringBuilder*, uint)>(&CVRRenderModels::GetComponentRenderModelName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "GetComponentRenderModelName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::GetComponentStateForDevicePath
// Il2CppName: GetComponentStateForDevicePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRRenderModels::*)(::Il2CppString*, ::Il2CppString*, uint64_t, OVR::OpenVR::RenderModel_ControllerMode_State_t&, OVR::OpenVR::RenderModel_ComponentState_t&)>(&CVRRenderModels::GetComponentStateForDevicePath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "GetComponentStateForDevicePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ControllerMode_State_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ComponentState_t&>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::GetComponentState
// Il2CppName: GetComponentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRRenderModels::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::VRControllerState_t&, OVR::OpenVR::RenderModel_ControllerMode_State_t&, OVR::OpenVR::RenderModel_ComponentState_t&)>(&CVRRenderModels::GetComponentState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "GetComponentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRControllerState_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ControllerMode_State_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ComponentState_t&>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::RenderModelHasComponent
// Il2CppName: RenderModelHasComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRRenderModels::*)(::Il2CppString*, ::Il2CppString*)>(&CVRRenderModels::RenderModelHasComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "RenderModelHasComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::GetRenderModelThumbnailURL
// Il2CppName: GetRenderModelThumbnailURL
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRRenderModels::*)(::Il2CppString*, System::Text::StringBuilder*, uint, OVR::OpenVR::EVRRenderModelError&)>(&CVRRenderModels::GetRenderModelThumbnailURL)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "GetRenderModelThumbnailURL", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRRenderModelError&>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::GetRenderModelOriginalPath
// Il2CppName: GetRenderModelOriginalPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRRenderModels::*)(::Il2CppString*, System::Text::StringBuilder*, uint, OVR::OpenVR::EVRRenderModelError&)>(&CVRRenderModels::GetRenderModelOriginalPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "GetRenderModelOriginalPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRRenderModelError&>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::GetRenderModelErrorNameFromEnum
// Il2CppName: GetRenderModelErrorNameFromEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CVRRenderModels::*)(OVR::OpenVR::EVRRenderModelError)>(&CVRRenderModels::GetRenderModelErrorNameFromEnum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels*), "GetRenderModelErrorNameFromEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRRenderModelError>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRRenderModels/_GetComponentStatePacked
#include "OVR/OpenVR/CVRRenderModels__GetComponentStatePacked.hpp"
// Including type: OVR.OpenVR.VRControllerState_t_Packed
#include "OVR/OpenVR/VRControllerState_t_Packed.hpp"
// Including type: OVR.OpenVR.RenderModel_ControllerMode_State_t
#include "OVR/OpenVR/RenderModel_ControllerMode_State_t.hpp"
// Including type: OVR.OpenVR.RenderModel_ComponentState_t
#include "OVR/OpenVR/RenderModel_ComponentState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRRenderModels/_GetComponentStatePacked.Invoke
bool OVR::OpenVR::CVRRenderModels::_GetComponentStatePacked::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, OVR::OpenVR::VRControllerState_t_Packed& pControllerState, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::_GetComponentStatePacked::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels/_GetComponentStatePacked.BeginInvoke
System::IAsyncResult* OVR::OpenVR::CVRRenderModels::_GetComponentStatePacked::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, OVR::OpenVR::VRControllerState_t_Packed& pControllerState, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::_GetComponentStatePacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState, callback, object);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels/_GetComponentStatePacked.EndInvoke
bool OVR::OpenVR::CVRRenderModels::_GetComponentStatePacked::EndInvoke(OVR::OpenVR::VRControllerState_t_Packed& pControllerState, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::_GetComponentStatePacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, pState, pComponentState, result);
}
// Writing MetadataGetter for method: CVRRenderModels::_GetComponentStatePacked::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRRenderModels::_GetComponentStatePacked::*)(::Il2CppObject*, System::IntPtr)>(&CVRRenderModels::_GetComponentStatePacked::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels::_GetComponentStatePacked*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRRenderModels::_GetComponentStatePacked::*)(::Il2CppObject*, System::IntPtr)>(&CVRRenderModels::_GetComponentStatePacked::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels::_GetComponentStatePacked*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::_GetComponentStatePacked::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRRenderModels::_GetComponentStatePacked::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::VRControllerState_t_Packed&, OVR::OpenVR::RenderModel_ControllerMode_State_t&, OVR::OpenVR::RenderModel_ComponentState_t&)>(&CVRRenderModels::_GetComponentStatePacked::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels::_GetComponentStatePacked*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRControllerState_t_Packed&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ControllerMode_State_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ComponentState_t&>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::_GetComponentStatePacked::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (CVRRenderModels::_GetComponentStatePacked::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::VRControllerState_t_Packed&, OVR::OpenVR::RenderModel_ControllerMode_State_t&, OVR::OpenVR::RenderModel_ComponentState_t&, System::AsyncCallback*, ::Il2CppObject*)>(&CVRRenderModels::_GetComponentStatePacked::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels::_GetComponentStatePacked*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRControllerState_t_Packed&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ControllerMode_State_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ComponentState_t&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: CVRRenderModels::_GetComponentStatePacked::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRRenderModels::_GetComponentStatePacked::*)(OVR::OpenVR::VRControllerState_t_Packed&, OVR::OpenVR::RenderModel_ControllerMode_State_t&, OVR::OpenVR::RenderModel_ComponentState_t&, System::IAsyncResult*)>(&CVRRenderModels::_GetComponentStatePacked::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRRenderModels::_GetComponentStatePacked*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::VRControllerState_t_Packed&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ControllerMode_State_t&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::RenderModel_ComponentState_t&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRNotifications
#include "OVR/OpenVR/CVRNotifications.hpp"
// Including type: OVR.OpenVR.EVRNotificationError
#include "OVR/OpenVR/EVRNotificationError.hpp"
// Including type: OVR.OpenVR.EVRNotificationType
#include "OVR/OpenVR/EVRNotificationType.hpp"
// Including type: OVR.OpenVR.EVRNotificationStyle
#include "OVR/OpenVR/EVRNotificationStyle.hpp"
// Including type: OVR.OpenVR.NotificationBitmap_t
#include "OVR/OpenVR/NotificationBitmap_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRNotifications.CreateNotification
OVR::OpenVR::EVRNotificationError OVR::OpenVR::CVRNotifications::CreateNotification(uint64_t ulOverlayHandle, uint64_t ulUserValue, OVR::OpenVR::EVRNotificationType type, ::Il2CppString* pchText, OVR::OpenVR::EVRNotificationStyle style, OVR::OpenVR::NotificationBitmap_t& pImage, uint& pNotificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRNotifications::CreateNotification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateNotification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulUserValue), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(style), ::il2cpp_utils::ExtractType(pImage), ::il2cpp_utils::ExtractType(pNotificationId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRNotificationError, false>(this, ___internal__method, ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId);
}
// Autogenerated method: OVR.OpenVR.CVRNotifications.RemoveNotification
OVR::OpenVR::EVRNotificationError OVR::OpenVR::CVRNotifications::RemoveNotification(uint notificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRNotifications::RemoveNotification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveNotification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(notificationId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRNotificationError, false>(this, ___internal__method, notificationId);
}
// Writing MetadataGetter for method: CVRNotifications::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRNotifications::*)(System::IntPtr)>(&CVRNotifications::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRNotifications*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRNotifications::*)(System::IntPtr)>(&CVRNotifications::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRNotifications*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRNotifications::CreateNotification
// Il2CppName: CreateNotification
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRNotificationError (CVRNotifications::*)(uint64_t, uint64_t, OVR::OpenVR::EVRNotificationType, ::Il2CppString*, OVR::OpenVR::EVRNotificationStyle, OVR::OpenVR::NotificationBitmap_t&, uint&)>(&CVRNotifications::CreateNotification)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRNotifications*), "CreateNotification", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRNotificationType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRNotificationStyle>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::NotificationBitmap_t&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: CVRNotifications::RemoveNotification
// Il2CppName: RemoveNotification
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRNotificationError (CVRNotifications::*)(uint)>(&CVRNotifications::RemoveNotification)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRNotifications*), "RemoveNotification", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRSettings
#include "OVR/OpenVR/CVRSettings.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRSettings.GetSettingsErrorNameFromEnum
::Il2CppString* OVR::OpenVR::CVRSettings::GetSettingsErrorNameFromEnum(OVR::OpenVR::EVRSettingsError eError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::GetSettingsErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSettingsErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eError)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.Sync
bool OVR::OpenVR::CVRSettings::Sync(bool bForce, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::Sync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Sync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bForce), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bForce, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.SetBool
void OVR::OpenVR::CVRSettings::SetBool(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, bool bValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::SetBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(bValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, bValue, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.SetInt32
void OVR::OpenVR::CVRSettings::SetInt32(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, int nValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::SetInt32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInt32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(nValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, nValue, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.SetFloat
void OVR::OpenVR::CVRSettings::SetFloat(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, float flValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::SetFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(flValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, flValue, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.SetString
void OVR::OpenVR::CVRSettings::SetString(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ::Il2CppString* pchValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::SetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.GetBool
bool OVR::OpenVR::CVRSettings::GetBool(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::GetBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.GetInt32
int OVR::OpenVR::CVRSettings::GetInt32(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::GetInt32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInt32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.GetFloat
float OVR::OpenVR::CVRSettings::GetFloat(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::GetFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.GetString
void OVR::OpenVR::CVRSettings::GetString(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, System::Text::StringBuilder* pchValue, uint unValueLen, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::GetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unValueLen), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, unValueLen, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.RemoveSection
void OVR::OpenVR::CVRSettings::RemoveSection(::Il2CppString* pchSection, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::RemoveSection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.RemoveKeyInSection
void OVR::OpenVR::CVRSettings::RemoveKeyInSection(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::RemoveKeyInSection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyInSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Writing MetadataGetter for method: CVRSettings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSettings::*)(System::IntPtr)>(&CVRSettings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSettings::*)(System::IntPtr)>(&CVRSettings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSettings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRSettings::GetSettingsErrorNameFromEnum
// Il2CppName: GetSettingsErrorNameFromEnum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CVRSettings::*)(OVR::OpenVR::EVRSettingsError)>(&CVRSettings::GetSettingsErrorNameFromEnum)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSettings*), "GetSettingsErrorNameFromEnum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError>()});
  }
};
// Writing MetadataGetter for method: CVRSettings::Sync
// Il2CppName: Sync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSettings::*)(bool, OVR::OpenVR::EVRSettingsError&)>(&CVRSettings::Sync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSettings*), "Sync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: CVRSettings::SetBool
// Il2CppName: SetBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSettings::*)(::Il2CppString*, ::Il2CppString*, bool, OVR::OpenVR::EVRSettingsError&)>(&CVRSettings::SetBool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSettings*), "SetBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: CVRSettings::SetInt32
// Il2CppName: SetInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSettings::*)(::Il2CppString*, ::Il2CppString*, int, OVR::OpenVR::EVRSettingsError&)>(&CVRSettings::SetInt32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSettings*), "SetInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: CVRSettings::SetFloat
// Il2CppName: SetFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSettings::*)(::Il2CppString*, ::Il2CppString*, float, OVR::OpenVR::EVRSettingsError&)>(&CVRSettings::SetFloat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSettings*), "SetFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: CVRSettings::SetString
// Il2CppName: SetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSettings::*)(::Il2CppString*, ::Il2CppString*, ::Il2CppString*, OVR::OpenVR::EVRSettingsError&)>(&CVRSettings::SetString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSettings*), "SetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: CVRSettings::GetBool
// Il2CppName: GetBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CVRSettings::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::EVRSettingsError&)>(&CVRSettings::GetBool)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSettings*), "GetBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: CVRSettings::GetInt32
// Il2CppName: GetInt32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CVRSettings::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::EVRSettingsError&)>(&CVRSettings::GetInt32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSettings*), "GetInt32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: CVRSettings::GetFloat
// Il2CppName: GetFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (CVRSettings::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::EVRSettingsError&)>(&CVRSettings::GetFloat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSettings*), "GetFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: CVRSettings::GetString
// Il2CppName: GetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSettings::*)(::Il2CppString*, ::Il2CppString*, System::Text::StringBuilder*, uint, OVR::OpenVR::EVRSettingsError&)>(&CVRSettings::GetString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSettings*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: CVRSettings::RemoveSection
// Il2CppName: RemoveSection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSettings::*)(::Il2CppString*, OVR::OpenVR::EVRSettingsError&)>(&CVRSettings::RemoveSection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSettings*), "RemoveSection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Writing MetadataGetter for method: CVRSettings::RemoveKeyInSection
// Il2CppName: RemoveKeyInSection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSettings::*)(::Il2CppString*, ::Il2CppString*, OVR::OpenVR::EVRSettingsError&)>(&CVRSettings::RemoveKeyInSection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSettings*), "RemoveKeyInSection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSettingsError&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRScreenshots
#include "OVR/OpenVR/CVRScreenshots.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: OVR.OpenVR.EVRScreenshotPropertyFilenames
#include "OVR/OpenVR/EVRScreenshotPropertyFilenames.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRScreenshots.RequestScreenshot
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::CVRScreenshots::RequestScreenshot(uint& pOutScreenshotHandle, OVR::OpenVR::EVRScreenshotType type, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRScreenshots::RequestScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, type, pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: OVR.OpenVR.CVRScreenshots.HookScreenshot
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::CVRScreenshots::HookScreenshot(::Array<OVR::OpenVR::EVRScreenshotType>* pSupportedTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRScreenshots::HookScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HookScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSupportedTypes)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pSupportedTypes);
}
// Autogenerated method: OVR.OpenVR.CVRScreenshots.GetScreenshotPropertyType
OVR::OpenVR::EVRScreenshotType OVR::OpenVR::CVRScreenshots::GetScreenshotPropertyType(uint screenshotHandle, OVR::OpenVR::EVRScreenshotError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRScreenshots::GetScreenshotPropertyType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScreenshotPropertyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotType, false>(this, ___internal__method, screenshotHandle, pError);
}
// Autogenerated method: OVR.OpenVR.CVRScreenshots.GetScreenshotPropertyFilename
uint OVR::OpenVR::CVRScreenshots::GetScreenshotPropertyFilename(uint screenshotHandle, OVR::OpenVR::EVRScreenshotPropertyFilenames filenameType, System::Text::StringBuilder* pchFilename, uint cchFilename, OVR::OpenVR::EVRScreenshotError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRScreenshots::GetScreenshotPropertyFilename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScreenshotPropertyFilename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(filenameType), ::il2cpp_utils::ExtractType(pchFilename), ::il2cpp_utils::ExtractType(cchFilename), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, screenshotHandle, filenameType, pchFilename, cchFilename, pError);
}
// Autogenerated method: OVR.OpenVR.CVRScreenshots.UpdateScreenshotProgress
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::CVRScreenshots::UpdateScreenshotProgress(uint screenshotHandle, float flProgress) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRScreenshots::UpdateScreenshotProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateScreenshotProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(flProgress)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, flProgress);
}
// Autogenerated method: OVR.OpenVR.CVRScreenshots.TakeStereoScreenshot
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::CVRScreenshots::TakeStereoScreenshot(uint& pOutScreenshotHandle, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRScreenshots::TakeStereoScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TakeStereoScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: OVR.OpenVR.CVRScreenshots.SubmitScreenshot
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::CVRScreenshots::SubmitScreenshot(uint screenshotHandle, OVR::OpenVR::EVRScreenshotType type, ::Il2CppString* pchSourcePreviewFilename, ::Il2CppString* pchSourceVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRScreenshots::SubmitScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubmitScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchSourcePreviewFilename), ::il2cpp_utils::ExtractType(pchSourceVRFilename)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename);
}
// Writing MetadataGetter for method: CVRScreenshots::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRScreenshots::*)(System::IntPtr)>(&CVRScreenshots::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRScreenshots*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRScreenshots::*)(System::IntPtr)>(&CVRScreenshots::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRScreenshots*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRScreenshots::RequestScreenshot
// Il2CppName: RequestScreenshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotError (CVRScreenshots::*)(uint&, OVR::OpenVR::EVRScreenshotType, ::Il2CppString*, ::Il2CppString*)>(&CVRScreenshots::RequestScreenshot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRScreenshots*), "RequestScreenshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRScreenshots::HookScreenshot
// Il2CppName: HookScreenshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotError (CVRScreenshots::*)(::Array<OVR::OpenVR::EVRScreenshotType>*)>(&CVRScreenshots::HookScreenshot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRScreenshots*), "HookScreenshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::EVRScreenshotType>*>()});
  }
};
// Writing MetadataGetter for method: CVRScreenshots::GetScreenshotPropertyType
// Il2CppName: GetScreenshotPropertyType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotType (CVRScreenshots::*)(uint, OVR::OpenVR::EVRScreenshotError&)>(&CVRScreenshots::GetScreenshotPropertyType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRScreenshots*), "GetScreenshotPropertyType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotError&>()});
  }
};
// Writing MetadataGetter for method: CVRScreenshots::GetScreenshotPropertyFilename
// Il2CppName: GetScreenshotPropertyFilename
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRScreenshots::*)(uint, OVR::OpenVR::EVRScreenshotPropertyFilenames, System::Text::StringBuilder*, uint, OVR::OpenVR::EVRScreenshotError&)>(&CVRScreenshots::GetScreenshotPropertyFilename)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRScreenshots*), "GetScreenshotPropertyFilename", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotPropertyFilenames>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotError&>()});
  }
};
// Writing MetadataGetter for method: CVRScreenshots::UpdateScreenshotProgress
// Il2CppName: UpdateScreenshotProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotError (CVRScreenshots::*)(uint, float)>(&CVRScreenshots::UpdateScreenshotProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRScreenshots*), "UpdateScreenshotProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CVRScreenshots::TakeStereoScreenshot
// Il2CppName: TakeStereoScreenshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotError (CVRScreenshots::*)(uint&, ::Il2CppString*, ::Il2CppString*)>(&CVRScreenshots::TakeStereoScreenshot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRScreenshots*), "TakeStereoScreenshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRScreenshots::SubmitScreenshot
// Il2CppName: SubmitScreenshot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRScreenshotError (CVRScreenshots::*)(uint, OVR::OpenVR::EVRScreenshotType, ::Il2CppString*, ::Il2CppString*)>(&CVRScreenshots::SubmitScreenshot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRScreenshots*), "SubmitScreenshot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRScreenshotType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRResources
#include "OVR/OpenVR/CVRResources.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRResources.LoadSharedResource
uint OVR::OpenVR::CVRResources::LoadSharedResource(::Il2CppString* pchResourceName, ::Il2CppString* pchBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRResources::LoadSharedResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSharedResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchBuffer), ::il2cpp_utils::ExtractType(unBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchResourceName, pchBuffer, unBufferLen);
}
// Autogenerated method: OVR.OpenVR.CVRResources.GetResourceFullPath
uint OVR::OpenVR::CVRResources::GetResourceFullPath(::Il2CppString* pchResourceName, ::Il2CppString* pchResourceTypeDirectory, System::Text::StringBuilder* pchPathBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRResources::GetResourceFullPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetResourceFullPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchResourceTypeDirectory), ::il2cpp_utils::ExtractType(pchPathBuffer), ::il2cpp_utils::ExtractType(unBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen);
}
// Writing MetadataGetter for method: CVRResources::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRResources::*)(System::IntPtr)>(&CVRResources::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRResources*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRResources::*)(System::IntPtr)>(&CVRResources::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRResources*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRResources::LoadSharedResource
// Il2CppName: LoadSharedResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRResources::*)(::Il2CppString*, ::Il2CppString*, uint)>(&CVRResources::LoadSharedResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRResources*), "LoadSharedResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRResources::GetResourceFullPath
// Il2CppName: GetResourceFullPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRResources::*)(::Il2CppString*, ::Il2CppString*, System::Text::StringBuilder*, uint)>(&CVRResources::GetResourceFullPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRResources*), "GetResourceFullPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRDriverManager
#include "OVR/OpenVR/CVRDriverManager.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRDriverManager.GetDriverCount
uint OVR::OpenVR::CVRDriverManager::GetDriverCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRDriverManager::GetDriverCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDriverCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRDriverManager.GetDriverName
uint OVR::OpenVR::CVRDriverManager::GetDriverName(uint nDriver, System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRDriverManager::GetDriverName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDriverName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDriver), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, nDriver, pchValue, unBufferSize);
}
// Autogenerated method: OVR.OpenVR.CVRDriverManager.GetDriverHandle
uint64_t OVR::OpenVR::CVRDriverManager::GetDriverHandle(::Il2CppString* pchDriverName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRDriverManager::GetDriverHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDriverHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchDriverName)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchDriverName);
}
// Writing MetadataGetter for method: CVRDriverManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRDriverManager::*)(System::IntPtr)>(&CVRDriverManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRDriverManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRDriverManager::*)(System::IntPtr)>(&CVRDriverManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRDriverManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRDriverManager::GetDriverCount
// Il2CppName: GetDriverCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRDriverManager::*)()>(&CVRDriverManager::GetDriverCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRDriverManager*), "GetDriverCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CVRDriverManager::GetDriverName
// Il2CppName: GetDriverName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (CVRDriverManager::*)(uint, System::Text::StringBuilder*, uint)>(&CVRDriverManager::GetDriverName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRDriverManager*), "GetDriverName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRDriverManager::GetDriverHandle
// Il2CppName: GetDriverHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (CVRDriverManager::*)(::Il2CppString*)>(&CVRDriverManager::GetDriverHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRDriverManager*), "GetDriverHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRInput
#include "OVR/OpenVR/CVRInput.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.InputDigitalActionData_t
#include "OVR/OpenVR/InputDigitalActionData_t.hpp"
// Including type: OVR.OpenVR.InputAnalogActionData_t
#include "OVR/OpenVR/InputAnalogActionData_t.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.InputPoseActionData_t
#include "OVR/OpenVR/InputPoseActionData_t.hpp"
// Including type: OVR.OpenVR.InputSkeletalActionData_t
#include "OVR/OpenVR/InputSkeletalActionData_t.hpp"
// Including type: OVR.OpenVR.EVRSkeletalTransformSpace
#include "OVR/OpenVR/EVRSkeletalTransformSpace.hpp"
// Including type: OVR.OpenVR.EVRSkeletalMotionRange
#include "OVR/OpenVR/EVRSkeletalMotionRange.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.InputOriginInfo_t
#include "OVR/OpenVR/InputOriginInfo_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRInput.SetActionManifestPath
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::SetActionManifestPath(::Il2CppString* pchActionManifestPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::SetActionManifestPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActionManifestPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionManifestPath)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchActionManifestPath);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetActionSetHandle
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetActionSetHandle(::Il2CppString* pchActionSetName, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetActionSetHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetActionSetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionSetName), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchActionSetName, pHandle);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetActionHandle
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetActionHandle(::Il2CppString* pchActionName, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetActionHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetActionHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionName), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchActionName, pHandle);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetInputSourceHandle
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetInputSourceHandle(::Il2CppString* pchInputSourcePath, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetInputSourceHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInputSourceHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInputSourcePath), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchInputSourcePath, pHandle);
}
// Autogenerated method: OVR.OpenVR.CVRInput.UpdateActionState
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::UpdateActionState(::Array<OVR::OpenVR::VRActiveActionSet_t>* pSets, uint unSizeOfVRSelectedActionSet_t) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::UpdateActionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateActionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSets), ::il2cpp_utils::ExtractType(unSizeOfVRSelectedActionSet_t)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetDigitalActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetDigitalActionData(uint64_t action, OVR::OpenVR::InputDigitalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetDigitalActionData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDigitalActionData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetAnalogActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetAnalogActionData(uint64_t action, OVR::OpenVR::InputAnalogActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetAnalogActionData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAnalogActionData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetPoseActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetPoseActionData(uint64_t action, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, OVR::OpenVR::InputPoseActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetPoseActionData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoseActionData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(fPredictedSecondsFromNow), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, eOrigin, fPredictedSecondsFromNow, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetSkeletalActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetSkeletalActionData(uint64_t action, OVR::OpenVR::InputSkeletalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetSkeletalActionData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkeletalActionData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetSkeletalBoneData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetSkeletalBoneData(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, ::Array<OVR::OpenVR::VRBoneTransform_t>* pTransformArray, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetSkeletalBoneData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkeletalBoneData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eTransformSpace), ::il2cpp_utils::ExtractType(eMotionRange), ::il2cpp_utils::ExtractType(pTransformArray), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, pTransformArray, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetSkeletalBoneDataCompressed
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetSkeletalBoneDataCompressed(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, System::IntPtr pvCompressedData, uint unCompressedSize, uint& punRequiredCompressedSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetSkeletalBoneDataCompressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkeletalBoneDataCompressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eTransformSpace), ::il2cpp_utils::ExtractType(eMotionRange), ::il2cpp_utils::ExtractType(pvCompressedData), ::il2cpp_utils::ExtractType(unCompressedSize), ::il2cpp_utils::ExtractType(punRequiredCompressedSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, pvCompressedData, unCompressedSize, punRequiredCompressedSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.DecompressSkeletalBoneData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::DecompressSkeletalBoneData(System::IntPtr pvCompressedBuffer, uint unCompressedBufferSize, OVR::OpenVR::EVRSkeletalTransformSpace& peTransformSpace, ::Array<OVR::OpenVR::VRBoneTransform_t>* pTransformArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::DecompressSkeletalBoneData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecompressSkeletalBoneData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pvCompressedBuffer), ::il2cpp_utils::ExtractType(unCompressedBufferSize), ::il2cpp_utils::ExtractType(peTransformSpace), ::il2cpp_utils::ExtractType(pTransformArray)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pvCompressedBuffer, unCompressedBufferSize, peTransformSpace, pTransformArray);
}
// Autogenerated method: OVR.OpenVR.CVRInput.TriggerHapticVibrationAction
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::TriggerHapticVibrationAction(uint64_t action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::TriggerHapticVibrationAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticVibrationAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(fStartSecondsFromNow), ::il2cpp_utils::ExtractType(fDurationSeconds), ::il2cpp_utils::ExtractType(fFrequency), ::il2cpp_utils::ExtractType(fAmplitude), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, fStartSecondsFromNow, fDurationSeconds, fFrequency, fAmplitude, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetActionOrigins
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetActionOrigins(uint64_t actionSetHandle, uint64_t digitalActionHandle, ::Array<uint64_t>* originsOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetActionOrigins");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetActionOrigins", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actionSetHandle), ::il2cpp_utils::ExtractType(digitalActionHandle), ::il2cpp_utils::ExtractType(originsOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, actionSetHandle, digitalActionHandle, originsOut);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetOriginLocalizedName
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetOriginLocalizedName(uint64_t origin, System::Text::StringBuilder* pchNameArray, uint unNameArraySize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetOriginLocalizedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOriginLocalizedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(pchNameArray), ::il2cpp_utils::ExtractType(unNameArraySize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, origin, pchNameArray, unNameArraySize);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetOriginTrackedDeviceInfo
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetOriginTrackedDeviceInfo(uint64_t origin, OVR::OpenVR::InputOriginInfo_t& pOriginInfo, uint unOriginInfoSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetOriginTrackedDeviceInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOriginTrackedDeviceInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(pOriginInfo), ::il2cpp_utils::ExtractType(unOriginInfoSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, origin, pOriginInfo, unOriginInfoSize);
}
// Autogenerated method: OVR.OpenVR.CVRInput.ShowActionOrigins
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::ShowActionOrigins(uint64_t actionSetHandle, uint64_t ulActionHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::ShowActionOrigins");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowActionOrigins", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actionSetHandle), ::il2cpp_utils::ExtractType(ulActionHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, actionSetHandle, ulActionHandle);
}
// Autogenerated method: OVR.OpenVR.CVRInput.ShowBindingsForActionSet
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::ShowBindingsForActionSet(::Array<OVR::OpenVR::VRActiveActionSet_t>* pSets, uint unSizeOfVRSelectedActionSet_t, uint64_t originToHighlight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::ShowBindingsForActionSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowBindingsForActionSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSets), ::il2cpp_utils::ExtractType(unSizeOfVRSelectedActionSet_t), ::il2cpp_utils::ExtractType(originToHighlight)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t, originToHighlight);
}
// Writing MetadataGetter for method: CVRInput::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRInput::*)(System::IntPtr)>(&CVRInput::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRInput::*)(System::IntPtr)>(&CVRInput::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRInput::SetActionManifestPath
// Il2CppName: SetActionManifestPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(::Il2CppString*)>(&CVRInput::SetActionManifestPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "SetActionManifestPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CVRInput::GetActionSetHandle
// Il2CppName: GetActionSetHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(::Il2CppString*, uint64_t&)>(&CVRInput::GetActionSetHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "GetActionSetHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()});
  }
};
// Writing MetadataGetter for method: CVRInput::GetActionHandle
// Il2CppName: GetActionHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(::Il2CppString*, uint64_t&)>(&CVRInput::GetActionHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "GetActionHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()});
  }
};
// Writing MetadataGetter for method: CVRInput::GetInputSourceHandle
// Il2CppName: GetInputSourceHandle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(::Il2CppString*, uint64_t&)>(&CVRInput::GetInputSourceHandle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "GetInputSourceHandle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()});
  }
};
// Writing MetadataGetter for method: CVRInput::UpdateActionState
// Il2CppName: UpdateActionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(::Array<OVR::OpenVR::VRActiveActionSet_t>*, uint)>(&CVRInput::UpdateActionState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "UpdateActionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::VRActiveActionSet_t>*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRInput::GetDigitalActionData
// Il2CppName: GetDigitalActionData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(uint64_t, OVR::OpenVR::InputDigitalActionData_t&, uint, uint64_t)>(&CVRInput::GetDigitalActionData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "GetDigitalActionData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputDigitalActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVRInput::GetAnalogActionData
// Il2CppName: GetAnalogActionData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(uint64_t, OVR::OpenVR::InputAnalogActionData_t&, uint, uint64_t)>(&CVRInput::GetAnalogActionData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "GetAnalogActionData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputAnalogActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVRInput::GetPoseActionData
// Il2CppName: GetPoseActionData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(uint64_t, OVR::OpenVR::ETrackingUniverseOrigin, float, OVR::OpenVR::InputPoseActionData_t&, uint, uint64_t)>(&CVRInput::GetPoseActionData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "GetPoseActionData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputPoseActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVRInput::GetSkeletalActionData
// Il2CppName: GetSkeletalActionData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(uint64_t, OVR::OpenVR::InputSkeletalActionData_t&, uint, uint64_t)>(&CVRInput::GetSkeletalActionData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "GetSkeletalActionData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputSkeletalActionData_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVRInput::GetSkeletalBoneData
// Il2CppName: GetSkeletalBoneData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(uint64_t, OVR::OpenVR::EVRSkeletalTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange, ::Array<OVR::OpenVR::VRBoneTransform_t>*, uint64_t)>(&CVRInput::GetSkeletalBoneData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "GetSkeletalBoneData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalTransformSpace>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalMotionRange>(), ::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::VRBoneTransform_t>*>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVRInput::GetSkeletalBoneDataCompressed
// Il2CppName: GetSkeletalBoneDataCompressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(uint64_t, OVR::OpenVR::EVRSkeletalTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange, System::IntPtr, uint, uint&, uint64_t)>(&CVRInput::GetSkeletalBoneDataCompressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "GetSkeletalBoneDataCompressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalTransformSpace>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalMotionRange>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint&>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVRInput::DecompressSkeletalBoneData
// Il2CppName: DecompressSkeletalBoneData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(System::IntPtr, uint, OVR::OpenVR::EVRSkeletalTransformSpace&, ::Array<OVR::OpenVR::VRBoneTransform_t>*)>(&CVRInput::DecompressSkeletalBoneData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "DecompressSkeletalBoneData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRSkeletalTransformSpace&>(), ::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::VRBoneTransform_t>*>()});
  }
};
// Writing MetadataGetter for method: CVRInput::TriggerHapticVibrationAction
// Il2CppName: TriggerHapticVibrationAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(uint64_t, float, float, float, float, uint64_t)>(&CVRInput::TriggerHapticVibrationAction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "TriggerHapticVibrationAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVRInput::GetActionOrigins
// Il2CppName: GetActionOrigins
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(uint64_t, uint64_t, ::Array<uint64_t>*)>(&CVRInput::GetActionOrigins)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "GetActionOrigins", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint64_t>*>()});
  }
};
// Writing MetadataGetter for method: CVRInput::GetOriginLocalizedName
// Il2CppName: GetOriginLocalizedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(uint64_t, System::Text::StringBuilder*, uint)>(&CVRInput::GetOriginLocalizedName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "GetOriginLocalizedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRInput::GetOriginTrackedDeviceInfo
// Il2CppName: GetOriginTrackedDeviceInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(uint64_t, OVR::OpenVR::InputOriginInfo_t&, uint)>(&CVRInput::GetOriginTrackedDeviceInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "GetOriginTrackedDeviceInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::InputOriginInfo_t&>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRInput::ShowActionOrigins
// Il2CppName: ShowActionOrigins
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(uint64_t, uint64_t)>(&CVRInput::ShowActionOrigins)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "ShowActionOrigins", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVRInput::ShowBindingsForActionSet
// Il2CppName: ShowBindingsForActionSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRInputError (CVRInput::*)(::Array<OVR::OpenVR::VRActiveActionSet_t>*, uint, uint64_t)>(&CVRInput::ShowBindingsForActionSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRInput*), "ShowBindingsForActionSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::VRActiveActionSet_t>*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRIOBuffer
#include "OVR/OpenVR/CVRIOBuffer.hpp"
// Including type: OVR.OpenVR.EIOBufferError
#include "OVR/OpenVR/EIOBufferError.hpp"
// Including type: OVR.OpenVR.EIOBufferMode
#include "OVR/OpenVR/EIOBufferMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRIOBuffer.Open
OVR::OpenVR::EIOBufferError OVR::OpenVR::CVRIOBuffer::Open(::Il2CppString* pchPath, OVR::OpenVR::EIOBufferMode mode, uint unElementSize, uint unElements, uint64_t& pulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRIOBuffer::Open");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Open", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchPath), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(unElementSize), ::il2cpp_utils::ExtractType(unElements), ::il2cpp_utils::ExtractType(pulBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, pchPath, mode, unElementSize, unElements, pulBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRIOBuffer.Close
OVR::OpenVR::EIOBufferError OVR::OpenVR::CVRIOBuffer::Close(uint64_t ulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRIOBuffer::Close");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, ulBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRIOBuffer.Read
OVR::OpenVR::EIOBufferError OVR::OpenVR::CVRIOBuffer::Read(uint64_t ulBuffer, System::IntPtr pDst, uint unBytes, uint& punRead) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRIOBuffer::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(pDst), ::il2cpp_utils::ExtractType(unBytes), ::il2cpp_utils::ExtractType(punRead)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, ulBuffer, pDst, unBytes, punRead);
}
// Autogenerated method: OVR.OpenVR.CVRIOBuffer.Write
OVR::OpenVR::EIOBufferError OVR::OpenVR::CVRIOBuffer::Write(uint64_t ulBuffer, System::IntPtr pSrc, uint unBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRIOBuffer::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(unBytes)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, ulBuffer, pSrc, unBytes);
}
// Autogenerated method: OVR.OpenVR.CVRIOBuffer.PropertyContainer
uint64_t OVR::OpenVR::CVRIOBuffer::PropertyContainer(uint64_t ulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRIOBuffer::PropertyContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PropertyContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, ulBuffer);
}
// Writing MetadataGetter for method: CVRIOBuffer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRIOBuffer::*)(System::IntPtr)>(&CVRIOBuffer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRIOBuffer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRIOBuffer::*)(System::IntPtr)>(&CVRIOBuffer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRIOBuffer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRIOBuffer::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EIOBufferError (CVRIOBuffer::*)(::Il2CppString*, OVR::OpenVR::EIOBufferMode, uint, uint, uint64_t&)>(&CVRIOBuffer::Open)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRIOBuffer*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EIOBufferMode>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint64_t&>()});
  }
};
// Writing MetadataGetter for method: CVRIOBuffer::Close
// Il2CppName: Close
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EIOBufferError (CVRIOBuffer::*)(uint64_t)>(&CVRIOBuffer::Close)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRIOBuffer*), "Close", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Writing MetadataGetter for method: CVRIOBuffer::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EIOBufferError (CVRIOBuffer::*)(uint64_t, System::IntPtr, uint, uint&)>(&CVRIOBuffer::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRIOBuffer*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: CVRIOBuffer::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EIOBufferError (CVRIOBuffer::*)(uint64_t, System::IntPtr, uint)>(&CVRIOBuffer::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRIOBuffer*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: CVRIOBuffer::PropertyContainer
// Il2CppName: PropertyContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (CVRIOBuffer::*)(uint64_t)>(&CVRIOBuffer::PropertyContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRIOBuffer*), "PropertyContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint64_t>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRSpatialAnchors
#include "OVR/OpenVR/CVRSpatialAnchors.hpp"
// Including type: OVR.OpenVR.EVRSpatialAnchorError
#include "OVR/OpenVR/EVRSpatialAnchorError.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.SpatialAnchorPose_t
#include "OVR/OpenVR/SpatialAnchorPose_t.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRSpatialAnchors.CreateSpatialAnchorFromDescriptor
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::CVRSpatialAnchors::CreateSpatialAnchorFromDescriptor(::Il2CppString* pchDescriptor, uint& pHandleOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSpatialAnchors::CreateSpatialAnchorFromDescriptor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSpatialAnchorFromDescriptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchDescriptor), ::il2cpp_utils::ExtractType(pHandleOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, pchDescriptor, pHandleOut);
}
// Autogenerated method: OVR.OpenVR.CVRSpatialAnchors.CreateSpatialAnchorFromPose
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::CVRSpatialAnchors::CreateSpatialAnchorFromPose(uint unDeviceIndex, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::SpatialAnchorPose_t& pPose, uint& pHandleOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSpatialAnchors::CreateSpatialAnchorFromPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSpatialAnchorFromPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pPose), ::il2cpp_utils::ExtractType(pHandleOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, unDeviceIndex, eOrigin, pPose, pHandleOut);
}
// Autogenerated method: OVR.OpenVR.CVRSpatialAnchors.GetSpatialAnchorPose
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::CVRSpatialAnchors::GetSpatialAnchorPose(uint unHandle, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::SpatialAnchorPose_t& pPoseOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSpatialAnchors::GetSpatialAnchorPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpatialAnchorPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pPoseOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, unHandle, eOrigin, pPoseOut);
}
// Autogenerated method: OVR.OpenVR.CVRSpatialAnchors.GetSpatialAnchorDescriptor
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::CVRSpatialAnchors::GetSpatialAnchorDescriptor(uint unHandle, System::Text::StringBuilder* pchDescriptorOut, uint& punDescriptorBufferLenInOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSpatialAnchors::GetSpatialAnchorDescriptor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpatialAnchorDescriptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(pchDescriptorOut), ::il2cpp_utils::ExtractType(punDescriptorBufferLenInOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, unHandle, pchDescriptorOut, punDescriptorBufferLenInOut);
}
// Writing MetadataGetter for method: CVRSpatialAnchors::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSpatialAnchors::*)(System::IntPtr)>(&CVRSpatialAnchors::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSpatialAnchors*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CVRSpatialAnchors::*)(System::IntPtr)>(&CVRSpatialAnchors::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSpatialAnchors*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: CVRSpatialAnchors::CreateSpatialAnchorFromDescriptor
// Il2CppName: CreateSpatialAnchorFromDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRSpatialAnchorError (CVRSpatialAnchors::*)(::Il2CppString*, uint&)>(&CVRSpatialAnchors::CreateSpatialAnchorFromDescriptor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSpatialAnchors*), "CreateSpatialAnchorFromDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: CVRSpatialAnchors::CreateSpatialAnchorFromPose
// Il2CppName: CreateSpatialAnchorFromPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRSpatialAnchorError (CVRSpatialAnchors::*)(uint, OVR::OpenVR::ETrackingUniverseOrigin, OVR::OpenVR::SpatialAnchorPose_t&, uint&)>(&CVRSpatialAnchors::CreateSpatialAnchorFromPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSpatialAnchors*), "CreateSpatialAnchorFromPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::SpatialAnchorPose_t&>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Writing MetadataGetter for method: CVRSpatialAnchors::GetSpatialAnchorPose
// Il2CppName: GetSpatialAnchorPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRSpatialAnchorError (CVRSpatialAnchors::*)(uint, OVR::OpenVR::ETrackingUniverseOrigin, OVR::OpenVR::SpatialAnchorPose_t&)>(&CVRSpatialAnchors::GetSpatialAnchorPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSpatialAnchors*), "GetSpatialAnchorPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::ETrackingUniverseOrigin>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::SpatialAnchorPose_t&>()});
  }
};
// Writing MetadataGetter for method: CVRSpatialAnchors::GetSpatialAnchorDescriptor
// Il2CppName: GetSpatialAnchorDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<OVR::OpenVR::EVRSpatialAnchorError (CVRSpatialAnchors::*)(uint, System::Text::StringBuilder*, uint&)>(&CVRSpatialAnchors::GetSpatialAnchorDescriptor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CVRSpatialAnchors*), "GetSpatialAnchorDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<uint&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.OpenVRInterop
#include "OVR/OpenVR/OpenVRInterop.hpp"
// Including type: OVR.OpenVR.EVRInitError
#include "OVR/OpenVR/EVRInitError.hpp"
// Including type: OVR.OpenVR.EVRApplicationType
#include "OVR/OpenVR/EVRApplicationType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.OpenVRInterop.InitInternal
uint OVR::OpenVR::OpenVRInterop::InitInternal(OVR::OpenVR::EVRInitError& peError, OVR::OpenVR::EVRApplicationType eApplicationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::InitInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "InitInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(eApplicationType)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, peError, eApplicationType);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.InitInternal2
uint OVR::OpenVR::OpenVRInterop::InitInternal2(OVR::OpenVR::EVRInitError& peError, OVR::OpenVR::EVRApplicationType eApplicationType, ::Il2CppString*& pStartupInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::InitInternal2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "InitInternal2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(eApplicationType), ::il2cpp_utils::ExtractType(pStartupInfo)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, peError, eApplicationType, pStartupInfo);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.ShutdownInternal
void OVR::OpenVR::OpenVRInterop::ShutdownInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::ShutdownInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "ShutdownInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.IsHmdPresent
bool OVR::OpenVR::OpenVRInterop::IsHmdPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::IsHmdPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "IsHmdPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.IsRuntimeInstalled
bool OVR::OpenVR::OpenVRInterop::IsRuntimeInstalled() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::IsRuntimeInstalled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "IsRuntimeInstalled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.GetStringForHmdError
System::IntPtr OVR::OpenVR::OpenVRInterop::GetStringForHmdError(OVR::OpenVR::EVRInitError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::GetStringForHmdError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "GetStringForHmdError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, error);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.GetGenericInterface
System::IntPtr OVR::OpenVR::OpenVRInterop::GetGenericInterface(::Il2CppString*& pchInterfaceVersion, OVR::OpenVR::EVRInitError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::GetGenericInterface");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "GetGenericInterface", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInterfaceVersion), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pchInterfaceVersion, peError);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.IsInterfaceVersionValid
bool OVR::OpenVR::OpenVRInterop::IsInterfaceVersionValid(::Il2CppString*& pchInterfaceVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::IsInterfaceVersionValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "IsInterfaceVersionValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInterfaceVersion)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pchInterfaceVersion);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.GetInitToken
uint OVR::OpenVR::OpenVRInterop::GetInitToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::GetInitToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "GetInitToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: OpenVRInterop::InitInternal
// Il2CppName: InitInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(OVR::OpenVR::EVRInitError&, OVR::OpenVR::EVRApplicationType)>(&OpenVRInterop::InitInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRInterop*), "InitInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRInitError&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRApplicationType>()});
  }
};
// Writing MetadataGetter for method: OpenVRInterop::InitInternal2
// Il2CppName: InitInternal2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(OVR::OpenVR::EVRInitError&, OVR::OpenVR::EVRApplicationType, ::Il2CppString*&)>(&OpenVRInterop::InitInternal2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRInterop*), "InitInternal2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRInitError&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRApplicationType>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: OpenVRInterop::ShutdownInternal
// Il2CppName: ShutdownInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&OpenVRInterop::ShutdownInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRInterop*), "ShutdownInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRInterop::IsHmdPresent
// Il2CppName: IsHmdPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&OpenVRInterop::IsHmdPresent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRInterop*), "IsHmdPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRInterop::IsRuntimeInstalled
// Il2CppName: IsRuntimeInstalled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&OpenVRInterop::IsRuntimeInstalled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRInterop*), "IsRuntimeInstalled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRInterop::GetStringForHmdError
// Il2CppName: GetStringForHmdError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)(OVR::OpenVR::EVRInitError)>(&OpenVRInterop::GetStringForHmdError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRInterop*), "GetStringForHmdError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRInitError>()});
  }
};
// Writing MetadataGetter for method: OpenVRInterop::GetGenericInterface
// Il2CppName: GetGenericInterface
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)(::Il2CppString*&, OVR::OpenVR::EVRInitError&)>(&OpenVRInterop::GetGenericInterface)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRInterop*), "GetGenericInterface", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<OVR::OpenVR::EVRInitError&>()});
  }
};
// Writing MetadataGetter for method: OpenVRInterop::IsInterfaceVersionValid
// Il2CppName: IsInterfaceVersionValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*&)>(&OpenVRInterop::IsInterfaceVersionValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRInterop*), "IsInterfaceVersionValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: OpenVRInterop::GetInitToken
// Il2CppName: GetInitToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)()>(&OpenVRInterop::GetInitToken)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRInterop*), "GetInitToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OpenVRInterop::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRInterop::*)()>(&OpenVRInterop::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRInterop*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OpenVRInterop::*)()>(&OpenVRInterop::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OpenVRInterop*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.EVREye Eye_Left
OVR::OpenVR::EVREye OVR::OpenVR::EVREye::_get_Eye_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EVREye::_get_Eye_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::EVREye>("OVR.OpenVR", "EVREye", "Eye_Left"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.EVREye Eye_Left
void OVR::OpenVR::EVREye::_set_Eye_Left(OVR::OpenVR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EVREye::_set_Eye_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "EVREye", "Eye_Left", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.EVREye Eye_Right
OVR::OpenVR::EVREye OVR::OpenVR::EVREye::_get_Eye_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EVREye::_get_Eye_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::EVREye>("OVR.OpenVR", "EVREye", "Eye_Right"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.EVREye Eye_Right
void OVR::OpenVR::EVREye::_set_Eye_Right(OVR::OpenVR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EVREye::_set_Eye_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "EVREye", "Eye_Right", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVR.OpenVR.ETextureType
#include "OVR/OpenVR/ETextureType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType Invalid
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType Invalid
void OVR::OpenVR::ETextureType::_set_Invalid(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType DirectX
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_DirectX() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_DirectX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "DirectX"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType DirectX
void OVR::OpenVR::ETextureType::_set_DirectX(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_DirectX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "DirectX", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType OpenGL
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_OpenGL() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_OpenGL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "OpenGL"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType OpenGL
void OVR::OpenVR::ETextureType::_set_OpenGL(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_OpenGL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "OpenGL", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType Vulkan
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_Vulkan() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_Vulkan");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "Vulkan"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType Vulkan
void OVR::OpenVR::ETextureType::_set_Vulkan(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_Vulkan");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "Vulkan", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType IOSurface
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_IOSurface() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_IOSurface");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "IOSurface"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType IOSurface
void OVR::OpenVR::ETextureType::_set_IOSurface(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_IOSurface");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "IOSurface", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType DirectX12
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_DirectX12() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_DirectX12");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "DirectX12"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType DirectX12
void OVR::OpenVR::ETextureType::_set_DirectX12(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_DirectX12");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "DirectX12", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType DXGISharedHandle
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_DXGISharedHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_DXGISharedHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "DXGISharedHandle"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType DXGISharedHandle
void OVR::OpenVR::ETextureType::_set_DXGISharedHandle(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_DXGISharedHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "DXGISharedHandle", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType Metal
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_Metal() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_Metal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "Metal"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType Metal
void OVR::OpenVR::ETextureType::_set_Metal(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_Metal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "Metal", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVR.OpenVR.EColorSpace
#include "OVR/OpenVR/EColorSpace.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.EColorSpace Auto
OVR::OpenVR::EColorSpace OVR::OpenVR::EColorSpace::_get_Auto() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EColorSpace::_get_Auto");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::EColorSpace>("OVR.OpenVR", "EColorSpace", "Auto"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.EColorSpace Auto
void OVR::OpenVR::EColorSpace::_set_Auto(OVR::OpenVR::EColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EColorSpace::_set_Auto");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "EColorSpace", "Auto", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.EColorSpace Gamma
OVR::OpenVR::EColorSpace OVR::OpenVR::EColorSpace::_get_Gamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EColorSpace::_get_Gamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::EColorSpace>("OVR.OpenVR", "EColorSpace", "Gamma"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.EColorSpace Gamma
void OVR::OpenVR::EColorSpace::_set_Gamma(OVR::OpenVR::EColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EColorSpace::_set_Gamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "EColorSpace", "Gamma", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.EColorSpace Linear
OVR::OpenVR::EColorSpace OVR::OpenVR::EColorSpace::_get_Linear() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EColorSpace::_get_Linear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::EColorSpace>("OVR.OpenVR", "EColorSpace", "Linear"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.EColorSpace Linear
void OVR::OpenVR::EColorSpace::_set_Linear(OVR::OpenVR::EColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EColorSpace::_set_Linear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "EColorSpace", "Linear", value));
}
