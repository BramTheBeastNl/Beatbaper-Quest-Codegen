// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRRenderModels/_GetComponentStateForDevicePath
#include "OVR/OpenVR/IVRRenderModels__GetComponentStateForDevicePath.hpp"
// Including type: OVR.OpenVR.RenderModel_ControllerMode_State_t
#include "OVR/OpenVR/RenderModel_ControllerMode_State_t.hpp"
// Including type: OVR.OpenVR.RenderModel_ComponentState_t
#include "OVR/OpenVR/RenderModel_ComponentState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentStateForDevicePath.Invoke
bool OVR::OpenVR::IVRRenderModels::_GetComponentStateForDevicePath::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, uint64_t devicePath, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentStateForDevicePath::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(devicePath), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, devicePath, pState, pComponentState);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentStateForDevicePath.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRRenderModels::_GetComponentStateForDevicePath::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, uint64_t devicePath, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentStateForDevicePath::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(devicePath), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, devicePath, pState, pComponentState, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentStateForDevicePath.EndInvoke
bool OVR::OpenVR::IVRRenderModels::_GetComponentStateForDevicePath::EndInvoke(OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentStateForDevicePath::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pState, pComponentState, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRRenderModels/_GetComponentState
#include "OVR/OpenVR/IVRRenderModels__GetComponentState.hpp"
// Including type: OVR.OpenVR.VRControllerState_t
#include "OVR/OpenVR/VRControllerState_t.hpp"
// Including type: OVR.OpenVR.RenderModel_ControllerMode_State_t
#include "OVR/OpenVR/RenderModel_ControllerMode_State_t.hpp"
// Including type: OVR.OpenVR.RenderModel_ComponentState_t
#include "OVR/OpenVR/RenderModel_ComponentState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentState.Invoke
bool OVR::OpenVR::IVRRenderModels::_GetComponentState::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, OVR::OpenVR::VRControllerState_t& pControllerState, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentState::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentState.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRRenderModels::_GetComponentState::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, OVR::OpenVR::VRControllerState_t& pControllerState, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentState::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetComponentState.EndInvoke
bool OVR::OpenVR::IVRRenderModels::_GetComponentState::EndInvoke(OVR::OpenVR::VRControllerState_t& pControllerState, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetComponentState::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, pState, pComponentState, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRRenderModels/_RenderModelHasComponent
#include "OVR/OpenVR/IVRRenderModels__RenderModelHasComponent.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_RenderModelHasComponent.Invoke
bool OVR::OpenVR::IVRRenderModels::_RenderModelHasComponent::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_RenderModelHasComponent::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_RenderModelHasComponent.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRRenderModels::_RenderModelHasComponent::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_RenderModelHasComponent::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_RenderModelHasComponent.EndInvoke
bool OVR::OpenVR::IVRRenderModels::_RenderModelHasComponent::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_RenderModelHasComponent::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRRenderModels/_GetRenderModelThumbnailURL
#include "OVR/OpenVR/IVRRenderModels__GetRenderModelThumbnailURL.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.EVRRenderModelError
#include "OVR/OpenVR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelThumbnailURL.Invoke
uint OVR::OpenVR::IVRRenderModels::_GetRenderModelThumbnailURL::Invoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, OVR::OpenVR::EVRRenderModelError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelThumbnailURL::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchThumbnailURL), ::il2cpp_utils::ExtractType(unThumbnailURLLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelThumbnailURL.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRRenderModels::_GetRenderModelThumbnailURL::BeginInvoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, OVR::OpenVR::EVRRenderModelError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelThumbnailURL::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchThumbnailURL), ::il2cpp_utils::ExtractType(unThumbnailURLLen), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelThumbnailURL.EndInvoke
uint OVR::OpenVR::IVRRenderModels::_GetRenderModelThumbnailURL::EndInvoke(OVR::OpenVR::EVRRenderModelError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelThumbnailURL::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRRenderModels/_GetRenderModelOriginalPath
#include "OVR/OpenVR/IVRRenderModels__GetRenderModelOriginalPath.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.EVRRenderModelError
#include "OVR/OpenVR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelOriginalPath.Invoke
uint OVR::OpenVR::IVRRenderModels::_GetRenderModelOriginalPath::Invoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, OVR::OpenVR::EVRRenderModelError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelOriginalPath::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchOriginalPath), ::il2cpp_utils::ExtractType(unOriginalPathLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelOriginalPath.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRRenderModels::_GetRenderModelOriginalPath::BeginInvoke(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, OVR::OpenVR::EVRRenderModelError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelOriginalPath::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchOriginalPath), ::il2cpp_utils::ExtractType(unOriginalPathLen), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelOriginalPath.EndInvoke
uint OVR::OpenVR::IVRRenderModels::_GetRenderModelOriginalPath::EndInvoke(OVR::OpenVR::EVRRenderModelError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelOriginalPath::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRRenderModels/_GetRenderModelErrorNameFromEnum
#include "OVR/OpenVR/IVRRenderModels__GetRenderModelErrorNameFromEnum.hpp"
// Including type: OVR.OpenVR.EVRRenderModelError
#include "OVR/OpenVR/EVRRenderModelError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelErrorNameFromEnum.Invoke
System::IntPtr OVR::OpenVR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::Invoke(OVR::OpenVR::EVRRenderModelError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, error);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelErrorNameFromEnum.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::BeginInvoke(OVR::OpenVR::EVRRenderModelError error, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, error, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRRenderModels/_GetRenderModelErrorNameFromEnum.EndInvoke
System::IntPtr OVR::OpenVR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRRenderModels::_GetRenderModelErrorNameFromEnum::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRNotifications/_CreateNotification
#include "OVR/OpenVR/IVRNotifications__CreateNotification.hpp"
// Including type: OVR.OpenVR.EVRNotificationError
#include "OVR/OpenVR/EVRNotificationError.hpp"
// Including type: OVR.OpenVR.EVRNotificationType
#include "OVR/OpenVR/EVRNotificationType.hpp"
// Including type: OVR.OpenVR.EVRNotificationStyle
#include "OVR/OpenVR/EVRNotificationStyle.hpp"
// Including type: OVR.OpenVR.NotificationBitmap_t
#include "OVR/OpenVR/NotificationBitmap_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRNotifications/_CreateNotification.Invoke
OVR::OpenVR::EVRNotificationError OVR::OpenVR::IVRNotifications::_CreateNotification::Invoke(uint64_t ulOverlayHandle, uint64_t ulUserValue, OVR::OpenVR::EVRNotificationType type, ::Il2CppString* pchText, OVR::OpenVR::EVRNotificationStyle style, OVR::OpenVR::NotificationBitmap_t& pImage, uint& pNotificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRNotifications::_CreateNotification::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulUserValue), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(style), ::il2cpp_utils::ExtractType(pImage), ::il2cpp_utils::ExtractType(pNotificationId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRNotificationError, false>(this, ___internal__method, ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId);
}
// Autogenerated method: OVR.OpenVR.IVRNotifications/_CreateNotification.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRNotifications::_CreateNotification::BeginInvoke(uint64_t ulOverlayHandle, uint64_t ulUserValue, OVR::OpenVR::EVRNotificationType type, ::Il2CppString* pchText, OVR::OpenVR::EVRNotificationStyle style, OVR::OpenVR::NotificationBitmap_t& pImage, uint& pNotificationId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRNotifications::_CreateNotification::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulUserValue), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(style), ::il2cpp_utils::ExtractType(pImage), ::il2cpp_utils::ExtractType(pNotificationId), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRNotifications/_CreateNotification.EndInvoke
OVR::OpenVR::EVRNotificationError OVR::OpenVR::IVRNotifications::_CreateNotification::EndInvoke(OVR::OpenVR::NotificationBitmap_t& pImage, uint& pNotificationId, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRNotifications::_CreateNotification::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pImage), ::il2cpp_utils::ExtractType(pNotificationId), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRNotificationError, false>(this, ___internal__method, pImage, pNotificationId, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRNotifications/_RemoveNotification
#include "OVR/OpenVR/IVRNotifications__RemoveNotification.hpp"
// Including type: OVR.OpenVR.EVRNotificationError
#include "OVR/OpenVR/EVRNotificationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRNotifications/_RemoveNotification.Invoke
OVR::OpenVR::EVRNotificationError OVR::OpenVR::IVRNotifications::_RemoveNotification::Invoke(uint notificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRNotifications::_RemoveNotification::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(notificationId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRNotificationError, false>(this, ___internal__method, notificationId);
}
// Autogenerated method: OVR.OpenVR.IVRNotifications/_RemoveNotification.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRNotifications::_RemoveNotification::BeginInvoke(uint notificationId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRNotifications::_RemoveNotification::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(notificationId), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, notificationId, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRNotifications/_RemoveNotification.EndInvoke
OVR::OpenVR::EVRNotificationError OVR::OpenVR::IVRNotifications::_RemoveNotification::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRNotifications::_RemoveNotification::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRNotificationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_GetSettingsErrorNameFromEnum
#include "OVR/OpenVR/IVRSettings__GetSettingsErrorNameFromEnum.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetSettingsErrorNameFromEnum.Invoke
System::IntPtr OVR::OpenVR::IVRSettings::_GetSettingsErrorNameFromEnum::Invoke(OVR::OpenVR::EVRSettingsError eError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetSettingsErrorNameFromEnum::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eError)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetSettingsErrorNameFromEnum.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_GetSettingsErrorNameFromEnum::BeginInvoke(OVR::OpenVR::EVRSettingsError eError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetSettingsErrorNameFromEnum::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetSettingsErrorNameFromEnum.EndInvoke
System::IntPtr OVR::OpenVR::IVRSettings::_GetSettingsErrorNameFromEnum::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetSettingsErrorNameFromEnum::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_Sync
#include "OVR/OpenVR/IVRSettings__Sync.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_Sync.Invoke
bool OVR::OpenVR::IVRSettings::_Sync::Invoke(bool bForce, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_Sync::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bForce), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bForce, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_Sync.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_Sync::BeginInvoke(bool bForce, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_Sync::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bForce), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, bForce, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_Sync.EndInvoke
bool OVR::OpenVR::IVRSettings::_Sync::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_Sync::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_SetBool
#include "OVR/OpenVR/IVRSettings__SetBool.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetBool.Invoke
void OVR::OpenVR::IVRSettings::_SetBool::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, bool bValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetBool::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(bValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, bValue, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetBool.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_SetBool::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, bool bValue, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetBool::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(bValue), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, bValue, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetBool.EndInvoke
void OVR::OpenVR::IVRSettings::_SetBool::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetBool::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_SetInt32
#include "OVR/OpenVR/IVRSettings__SetInt32.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetInt32.Invoke
void OVR::OpenVR::IVRSettings::_SetInt32::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, int nValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetInt32::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(nValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, nValue, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetInt32.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_SetInt32::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, int nValue, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetInt32::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(nValue), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, nValue, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetInt32.EndInvoke
void OVR::OpenVR::IVRSettings::_SetInt32::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetInt32::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_SetFloat
#include "OVR/OpenVR/IVRSettings__SetFloat.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetFloat.Invoke
void OVR::OpenVR::IVRSettings::_SetFloat::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, float flValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetFloat::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(flValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, flValue, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetFloat.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_SetFloat::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, float flValue, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetFloat::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(flValue), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, flValue, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetFloat.EndInvoke
void OVR::OpenVR::IVRSettings::_SetFloat::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetFloat::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_SetString
#include "OVR/OpenVR/IVRSettings__SetString.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetString.Invoke
void OVR::OpenVR::IVRSettings::_SetString::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ::Il2CppString* pchValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetString::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetString.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_SetString::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ::Il2CppString* pchValue, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetString::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_SetString.EndInvoke
void OVR::OpenVR::IVRSettings::_SetString::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_SetString::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_GetBool
#include "OVR/OpenVR/IVRSettings__GetBool.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetBool.Invoke
bool OVR::OpenVR::IVRSettings::_GetBool::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetBool::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetBool.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_GetBool::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetBool::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetBool.EndInvoke
bool OVR::OpenVR::IVRSettings::_GetBool::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetBool::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_GetInt32
#include "OVR/OpenVR/IVRSettings__GetInt32.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetInt32.Invoke
int OVR::OpenVR::IVRSettings::_GetInt32::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetInt32::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetInt32.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_GetInt32::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetInt32::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetInt32.EndInvoke
int OVR::OpenVR::IVRSettings::_GetInt32::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetInt32::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_GetFloat
#include "OVR/OpenVR/IVRSettings__GetFloat.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetFloat.Invoke
float OVR::OpenVR::IVRSettings::_GetFloat::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetFloat::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetFloat.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_GetFloat::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetFloat::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetFloat.EndInvoke
float OVR::OpenVR::IVRSettings::_GetFloat::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetFloat::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_GetString
#include "OVR/OpenVR/IVRSettings__GetString.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetString.Invoke
void OVR::OpenVR::IVRSettings::_GetString::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, System::Text::StringBuilder* pchValue, uint unValueLen, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetString::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unValueLen), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, unValueLen, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetString.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_GetString::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, System::Text::StringBuilder* pchValue, uint unValueLen, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetString::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unValueLen), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, unValueLen, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_GetString.EndInvoke
void OVR::OpenVR::IVRSettings::_GetString::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_GetString::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_RemoveSection
#include "OVR/OpenVR/IVRSettings__RemoveSection.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_RemoveSection.Invoke
void OVR::OpenVR::IVRSettings::_RemoveSection::Invoke(::Il2CppString* pchSection, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_RemoveSection::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_RemoveSection.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_RemoveSection::BeginInvoke(::Il2CppString* pchSection, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_RemoveSection::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_RemoveSection.EndInvoke
void OVR::OpenVR::IVRSettings::_RemoveSection::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_RemoveSection::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSettings/_RemoveKeyInSection
#include "OVR/OpenVR/IVRSettings__RemoveKeyInSection.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSettings/_RemoveKeyInSection.Invoke
void OVR::OpenVR::IVRSettings::_RemoveKeyInSection::Invoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_RemoveKeyInSection::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_RemoveKeyInSection.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSettings::_RemoveKeyInSection::BeginInvoke(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_RemoveKeyInSection::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchSection, pchSettingsKey, peError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSettings/_RemoveKeyInSection.EndInvoke
void OVR::OpenVR::IVRSettings::_RemoveKeyInSection::EndInvoke(OVR::OpenVR::EVRSettingsError& peError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSettings::_RemoveKeyInSection::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, peError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRScreenshots/_RequestScreenshot
#include "OVR/OpenVR/IVRScreenshots__RequestScreenshot.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: OVR.OpenVR.EVRScreenshotType
#include "OVR/OpenVR/EVRScreenshotType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_RequestScreenshot.Invoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_RequestScreenshot::Invoke(uint& pOutScreenshotHandle, OVR::OpenVR::EVRScreenshotType type, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_RequestScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, type, pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_RequestScreenshot.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRScreenshots::_RequestScreenshot::BeginInvoke(uint& pOutScreenshotHandle, OVR::OpenVR::EVRScreenshotType type, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_RequestScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pOutScreenshotHandle, type, pchPreviewFilename, pchVRFilename, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_RequestScreenshot.EndInvoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_RequestScreenshot::EndInvoke(uint& pOutScreenshotHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_RequestScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRScreenshots/_HookScreenshot
#include "OVR/OpenVR/IVRScreenshots__HookScreenshot.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_HookScreenshot.Invoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_HookScreenshot::Invoke(::Array<OVR::OpenVR::EVRScreenshotType>*& pSupportedTypes, int numTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_HookScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSupportedTypes), ::il2cpp_utils::ExtractType(numTypes)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pSupportedTypes, numTypes);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_HookScreenshot.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRScreenshots::_HookScreenshot::BeginInvoke(::Array<OVR::OpenVR::EVRScreenshotType>*& pSupportedTypes, int numTypes, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_HookScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSupportedTypes), ::il2cpp_utils::ExtractType(numTypes), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pSupportedTypes, numTypes, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_HookScreenshot.EndInvoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_HookScreenshot::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_HookScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyType
#include "OVR/OpenVR/IVRScreenshots__GetScreenshotPropertyType.hpp"
// Including type: OVR.OpenVR.EVRScreenshotType
#include "OVR/OpenVR/EVRScreenshotType.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyType.Invoke
OVR::OpenVR::EVRScreenshotType OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyType::Invoke(uint screenshotHandle, OVR::OpenVR::EVRScreenshotError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyType::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotType, false>(this, ___internal__method, screenshotHandle, pError);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyType.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyType::BeginInvoke(uint screenshotHandle, OVR::OpenVR::EVRScreenshotError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyType::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, pError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyType.EndInvoke
OVR::OpenVR::EVRScreenshotType OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyType::EndInvoke(OVR::OpenVR::EVRScreenshotError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyType::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotType, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyFilename
#include "OVR/OpenVR/IVRScreenshots__GetScreenshotPropertyFilename.hpp"
// Including type: OVR.OpenVR.EVRScreenshotPropertyFilenames
#include "OVR/OpenVR/EVRScreenshotPropertyFilenames.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyFilename.Invoke
uint OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyFilename::Invoke(uint screenshotHandle, OVR::OpenVR::EVRScreenshotPropertyFilenames filenameType, System::Text::StringBuilder* pchFilename, uint cchFilename, OVR::OpenVR::EVRScreenshotError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyFilename::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(filenameType), ::il2cpp_utils::ExtractType(pchFilename), ::il2cpp_utils::ExtractType(cchFilename), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, screenshotHandle, filenameType, pchFilename, cchFilename, pError);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyFilename.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyFilename::BeginInvoke(uint screenshotHandle, OVR::OpenVR::EVRScreenshotPropertyFilenames filenameType, System::Text::StringBuilder* pchFilename, uint cchFilename, OVR::OpenVR::EVRScreenshotError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyFilename::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(filenameType), ::il2cpp_utils::ExtractType(pchFilename), ::il2cpp_utils::ExtractType(cchFilename), ::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, filenameType, pchFilename, cchFilename, pError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_GetScreenshotPropertyFilename.EndInvoke
uint OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyFilename::EndInvoke(OVR::OpenVR::EVRScreenshotError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_GetScreenshotPropertyFilename::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pError), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRScreenshots/_UpdateScreenshotProgress
#include "OVR/OpenVR/IVRScreenshots__UpdateScreenshotProgress.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_UpdateScreenshotProgress.Invoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_UpdateScreenshotProgress::Invoke(uint screenshotHandle, float flProgress) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_UpdateScreenshotProgress::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(flProgress)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, flProgress);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_UpdateScreenshotProgress.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRScreenshots::_UpdateScreenshotProgress::BeginInvoke(uint screenshotHandle, float flProgress, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_UpdateScreenshotProgress::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(flProgress), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, flProgress, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_UpdateScreenshotProgress.EndInvoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_UpdateScreenshotProgress::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_UpdateScreenshotProgress::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRScreenshots/_TakeStereoScreenshot
#include "OVR/OpenVR/IVRScreenshots__TakeStereoScreenshot.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_TakeStereoScreenshot.Invoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_TakeStereoScreenshot::Invoke(uint& pOutScreenshotHandle, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_TakeStereoScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_TakeStereoScreenshot.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRScreenshots::_TakeStereoScreenshot::BeginInvoke(uint& pOutScreenshotHandle, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_TakeStereoScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pOutScreenshotHandle, pchPreviewFilename, pchVRFilename, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_TakeStereoScreenshot.EndInvoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_TakeStereoScreenshot::EndInvoke(uint& pOutScreenshotHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_TakeStereoScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRScreenshots/_SubmitScreenshot
#include "OVR/OpenVR/IVRScreenshots__SubmitScreenshot.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: OVR.OpenVR.EVRScreenshotType
#include "OVR/OpenVR/EVRScreenshotType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_SubmitScreenshot.Invoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_SubmitScreenshot::Invoke(uint screenshotHandle, OVR::OpenVR::EVRScreenshotType type, ::Il2CppString* pchSourcePreviewFilename, ::Il2CppString* pchSourceVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_SubmitScreenshot::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchSourcePreviewFilename), ::il2cpp_utils::ExtractType(pchSourceVRFilename)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_SubmitScreenshot.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRScreenshots::_SubmitScreenshot::BeginInvoke(uint screenshotHandle, OVR::OpenVR::EVRScreenshotType type, ::Il2CppString* pchSourcePreviewFilename, ::Il2CppString* pchSourceVRFilename, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_SubmitScreenshot::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchSourcePreviewFilename), ::il2cpp_utils::ExtractType(pchSourceVRFilename), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRScreenshots/_SubmitScreenshot.EndInvoke
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::IVRScreenshots::_SubmitScreenshot::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRScreenshots::_SubmitScreenshot::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRResources/_LoadSharedResource
#include "OVR/OpenVR/IVRResources__LoadSharedResource.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRResources/_LoadSharedResource.Invoke
uint OVR::OpenVR::IVRResources::_LoadSharedResource::Invoke(::Il2CppString* pchResourceName, ::Il2CppString* pchBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRResources::_LoadSharedResource::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchBuffer), ::il2cpp_utils::ExtractType(unBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchResourceName, pchBuffer, unBufferLen);
}
// Autogenerated method: OVR.OpenVR.IVRResources/_LoadSharedResource.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRResources::_LoadSharedResource::BeginInvoke(::Il2CppString* pchResourceName, ::Il2CppString* pchBuffer, uint unBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRResources::_LoadSharedResource::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchBuffer), ::il2cpp_utils::ExtractType(unBufferLen), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchResourceName, pchBuffer, unBufferLen, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRResources/_LoadSharedResource.EndInvoke
uint OVR::OpenVR::IVRResources::_LoadSharedResource::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRResources::_LoadSharedResource::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRResources/_GetResourceFullPath
#include "OVR/OpenVR/IVRResources__GetResourceFullPath.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRResources/_GetResourceFullPath.Invoke
uint OVR::OpenVR::IVRResources::_GetResourceFullPath::Invoke(::Il2CppString* pchResourceName, ::Il2CppString* pchResourceTypeDirectory, System::Text::StringBuilder* pchPathBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRResources::_GetResourceFullPath::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchResourceTypeDirectory), ::il2cpp_utils::ExtractType(pchPathBuffer), ::il2cpp_utils::ExtractType(unBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen);
}
// Autogenerated method: OVR.OpenVR.IVRResources/_GetResourceFullPath.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRResources::_GetResourceFullPath::BeginInvoke(::Il2CppString* pchResourceName, ::Il2CppString* pchResourceTypeDirectory, System::Text::StringBuilder* pchPathBuffer, uint unBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRResources::_GetResourceFullPath::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchResourceTypeDirectory), ::il2cpp_utils::ExtractType(pchPathBuffer), ::il2cpp_utils::ExtractType(unBufferLen), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRResources/_GetResourceFullPath.EndInvoke
uint OVR::OpenVR::IVRResources::_GetResourceFullPath::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRResources::_GetResourceFullPath::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRDriverManager/_GetDriverCount
#include "OVR/OpenVR/IVRDriverManager__GetDriverCount.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverCount.Invoke
uint OVR::OpenVR::IVRDriverManager::_GetDriverCount::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverCount::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverCount.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRDriverManager::_GetDriverCount::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverCount::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverCount.EndInvoke
uint OVR::OpenVR::IVRDriverManager::_GetDriverCount::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverCount::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRDriverManager/_GetDriverName
#include "OVR/OpenVR/IVRDriverManager__GetDriverName.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverName.Invoke
uint OVR::OpenVR::IVRDriverManager::_GetDriverName::Invoke(uint nDriver, System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverName::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDriver), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, nDriver, pchValue, unBufferSize);
}
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverName.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRDriverManager::_GetDriverName::BeginInvoke(uint nDriver, System::Text::StringBuilder* pchValue, uint unBufferSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDriver), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDriver, pchValue, unBufferSize, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverName.EndInvoke
uint OVR::OpenVR::IVRDriverManager::_GetDriverName::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRDriverManager/_GetDriverHandle
#include "OVR/OpenVR/IVRDriverManager__GetDriverHandle.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverHandle.Invoke
uint64_t OVR::OpenVR::IVRDriverManager::_GetDriverHandle::Invoke(::Il2CppString* pchDriverName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverHandle::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchDriverName)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchDriverName);
}
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverHandle.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRDriverManager::_GetDriverHandle::BeginInvoke(::Il2CppString* pchDriverName, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverHandle::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchDriverName), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchDriverName, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRDriverManager/_GetDriverHandle.EndInvoke
uint64_t OVR::OpenVR::IVRDriverManager::_GetDriverHandle::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRDriverManager::_GetDriverHandle::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_SetActionManifestPath
#include "OVR/OpenVR/IVRInput__SetActionManifestPath.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_SetActionManifestPath.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_SetActionManifestPath::Invoke(::Il2CppString* pchActionManifestPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_SetActionManifestPath::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionManifestPath)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchActionManifestPath);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_SetActionManifestPath.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_SetActionManifestPath::BeginInvoke(::Il2CppString* pchActionManifestPath, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_SetActionManifestPath::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionManifestPath), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchActionManifestPath, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_SetActionManifestPath.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_SetActionManifestPath::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_SetActionManifestPath::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetActionSetHandle
#include "OVR/OpenVR/IVRInput__GetActionSetHandle.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionSetHandle.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetActionSetHandle::Invoke(::Il2CppString* pchActionSetName, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionSetHandle::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionSetName), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchActionSetName, pHandle);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionSetHandle.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetActionSetHandle::BeginInvoke(::Il2CppString* pchActionSetName, uint64_t& pHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionSetHandle::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionSetName), ::il2cpp_utils::ExtractType(pHandle), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchActionSetName, pHandle, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionSetHandle.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetActionSetHandle::EndInvoke(uint64_t& pHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionSetHandle::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pHandle), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetActionHandle
#include "OVR/OpenVR/IVRInput__GetActionHandle.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionHandle.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetActionHandle::Invoke(::Il2CppString* pchActionName, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionHandle::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionName), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchActionName, pHandle);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionHandle.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetActionHandle::BeginInvoke(::Il2CppString* pchActionName, uint64_t& pHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionHandle::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionName), ::il2cpp_utils::ExtractType(pHandle), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchActionName, pHandle, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionHandle.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetActionHandle::EndInvoke(uint64_t& pHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionHandle::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pHandle), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetInputSourceHandle
#include "OVR/OpenVR/IVRInput__GetInputSourceHandle.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetInputSourceHandle.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetInputSourceHandle::Invoke(::Il2CppString* pchInputSourcePath, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetInputSourceHandle::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInputSourcePath), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchInputSourcePath, pHandle);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetInputSourceHandle.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetInputSourceHandle::BeginInvoke(::Il2CppString* pchInputSourcePath, uint64_t& pHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetInputSourceHandle::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInputSourcePath), ::il2cpp_utils::ExtractType(pHandle), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchInputSourcePath, pHandle, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetInputSourceHandle.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetInputSourceHandle::EndInvoke(uint64_t& pHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetInputSourceHandle::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pHandle), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_UpdateActionState
#include "OVR/OpenVR/IVRInput__UpdateActionState.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_UpdateActionState.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_UpdateActionState::Invoke(::Array<OVR::OpenVR::VRActiveActionSet_t>*& pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_UpdateActionState::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSets), ::il2cpp_utils::ExtractType(unSizeOfVRSelectedActionSet_t), ::il2cpp_utils::ExtractType(unSetCount)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t, unSetCount);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_UpdateActionState.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_UpdateActionState::BeginInvoke(::Array<OVR::OpenVR::VRActiveActionSet_t>*& pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_UpdateActionState::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSets), ::il2cpp_utils::ExtractType(unSizeOfVRSelectedActionSet_t), ::il2cpp_utils::ExtractType(unSetCount), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t, unSetCount, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_UpdateActionState.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_UpdateActionState::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_UpdateActionState::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetDigitalActionData
#include "OVR/OpenVR/IVRInput__GetDigitalActionData.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.InputDigitalActionData_t
#include "OVR/OpenVR/InputDigitalActionData_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetDigitalActionData.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetDigitalActionData::Invoke(uint64_t action, OVR::OpenVR::InputDigitalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetDigitalActionData::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetDigitalActionData.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetDigitalActionData::BeginInvoke(uint64_t action, OVR::OpenVR::InputDigitalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetDigitalActionData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetDigitalActionData.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetDigitalActionData::EndInvoke(OVR::OpenVR::InputDigitalActionData_t& pActionData, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetDigitalActionData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pActionData, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetAnalogActionData
#include "OVR/OpenVR/IVRInput__GetAnalogActionData.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.InputAnalogActionData_t
#include "OVR/OpenVR/InputAnalogActionData_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetAnalogActionData.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetAnalogActionData::Invoke(uint64_t action, OVR::OpenVR::InputAnalogActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetAnalogActionData::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetAnalogActionData.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetAnalogActionData::BeginInvoke(uint64_t action, OVR::OpenVR::InputAnalogActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetAnalogActionData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetAnalogActionData.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetAnalogActionData::EndInvoke(OVR::OpenVR::InputAnalogActionData_t& pActionData, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetAnalogActionData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pActionData, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetPoseActionData
#include "OVR/OpenVR/IVRInput__GetPoseActionData.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.InputPoseActionData_t
#include "OVR/OpenVR/InputPoseActionData_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetPoseActionData.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetPoseActionData::Invoke(uint64_t action, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, OVR::OpenVR::InputPoseActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetPoseActionData::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(fPredictedSecondsFromNow), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, eOrigin, fPredictedSecondsFromNow, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetPoseActionData.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetPoseActionData::BeginInvoke(uint64_t action, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, OVR::OpenVR::InputPoseActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetPoseActionData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(fPredictedSecondsFromNow), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, action, eOrigin, fPredictedSecondsFromNow, pActionData, unActionDataSize, ulRestrictToDevice, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetPoseActionData.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetPoseActionData::EndInvoke(OVR::OpenVR::InputPoseActionData_t& pActionData, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetPoseActionData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pActionData, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetSkeletalActionData
#include "OVR/OpenVR/IVRInput__GetSkeletalActionData.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.InputSkeletalActionData_t
#include "OVR/OpenVR/InputSkeletalActionData_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalActionData.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetSkeletalActionData::Invoke(uint64_t action, OVR::OpenVR::InputSkeletalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalActionData::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalActionData.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetSkeletalActionData::BeginInvoke(uint64_t action, OVR::OpenVR::InputSkeletalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalActionData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalActionData.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetSkeletalActionData::EndInvoke(OVR::OpenVR::InputSkeletalActionData_t& pActionData, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalActionData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pActionData, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetSkeletalBoneData
#include "OVR/OpenVR/IVRInput__GetSkeletalBoneData.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.EVRSkeletalTransformSpace
#include "OVR/OpenVR/EVRSkeletalTransformSpace.hpp"
// Including type: OVR.OpenVR.EVRSkeletalMotionRange
#include "OVR/OpenVR/EVRSkeletalMotionRange.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalBoneData.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetSkeletalBoneData::Invoke(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, ::Array<OVR::OpenVR::VRBoneTransform_t>*& pTransformArray, uint unTransformArrayCount, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalBoneData::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eTransformSpace), ::il2cpp_utils::ExtractType(eMotionRange), ::il2cpp_utils::ExtractType(pTransformArray), ::il2cpp_utils::ExtractType(unTransformArrayCount), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, pTransformArray, unTransformArrayCount, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalBoneData.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetSkeletalBoneData::BeginInvoke(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, ::Array<OVR::OpenVR::VRBoneTransform_t>*& pTransformArray, uint unTransformArrayCount, uint64_t ulRestrictToDevice, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalBoneData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eTransformSpace), ::il2cpp_utils::ExtractType(eMotionRange), ::il2cpp_utils::ExtractType(pTransformArray), ::il2cpp_utils::ExtractType(unTransformArrayCount), ::il2cpp_utils::ExtractType(ulRestrictToDevice), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, pTransformArray, unTransformArrayCount, ulRestrictToDevice, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalBoneData.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetSkeletalBoneData::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalBoneData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetSkeletalBoneDataCompressed
#include "OVR/OpenVR/IVRInput__GetSkeletalBoneDataCompressed.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.EVRSkeletalTransformSpace
#include "OVR/OpenVR/EVRSkeletalTransformSpace.hpp"
// Including type: OVR.OpenVR.EVRSkeletalMotionRange
#include "OVR/OpenVR/EVRSkeletalMotionRange.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalBoneDataCompressed.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetSkeletalBoneDataCompressed::Invoke(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, System::IntPtr pvCompressedData, uint unCompressedSize, uint& punRequiredCompressedSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalBoneDataCompressed::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eTransformSpace), ::il2cpp_utils::ExtractType(eMotionRange), ::il2cpp_utils::ExtractType(pvCompressedData), ::il2cpp_utils::ExtractType(unCompressedSize), ::il2cpp_utils::ExtractType(punRequiredCompressedSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, pvCompressedData, unCompressedSize, punRequiredCompressedSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalBoneDataCompressed.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetSkeletalBoneDataCompressed::BeginInvoke(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, System::IntPtr pvCompressedData, uint unCompressedSize, uint& punRequiredCompressedSize, uint64_t ulRestrictToDevice, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalBoneDataCompressed::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eTransformSpace), ::il2cpp_utils::ExtractType(eMotionRange), ::il2cpp_utils::ExtractType(pvCompressedData), ::il2cpp_utils::ExtractType(unCompressedSize), ::il2cpp_utils::ExtractType(punRequiredCompressedSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, pvCompressedData, unCompressedSize, punRequiredCompressedSize, ulRestrictToDevice, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetSkeletalBoneDataCompressed.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetSkeletalBoneDataCompressed::EndInvoke(uint& punRequiredCompressedSize, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetSkeletalBoneDataCompressed::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(punRequiredCompressedSize), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, punRequiredCompressedSize, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_DecompressSkeletalBoneData
#include "OVR/OpenVR/IVRInput__DecompressSkeletalBoneData.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.EVRSkeletalTransformSpace
#include "OVR/OpenVR/EVRSkeletalTransformSpace.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_DecompressSkeletalBoneData.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_DecompressSkeletalBoneData::Invoke(System::IntPtr pvCompressedBuffer, uint unCompressedBufferSize, OVR::OpenVR::EVRSkeletalTransformSpace& peTransformSpace, ::Array<OVR::OpenVR::VRBoneTransform_t>*& pTransformArray, uint unTransformArrayCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_DecompressSkeletalBoneData::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pvCompressedBuffer), ::il2cpp_utils::ExtractType(unCompressedBufferSize), ::il2cpp_utils::ExtractType(peTransformSpace), ::il2cpp_utils::ExtractType(pTransformArray), ::il2cpp_utils::ExtractType(unTransformArrayCount)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pvCompressedBuffer, unCompressedBufferSize, peTransformSpace, pTransformArray, unTransformArrayCount);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_DecompressSkeletalBoneData.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_DecompressSkeletalBoneData::BeginInvoke(System::IntPtr pvCompressedBuffer, uint unCompressedBufferSize, OVR::OpenVR::EVRSkeletalTransformSpace& peTransformSpace, ::Array<OVR::OpenVR::VRBoneTransform_t>*& pTransformArray, uint unTransformArrayCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_DecompressSkeletalBoneData::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pvCompressedBuffer), ::il2cpp_utils::ExtractType(unCompressedBufferSize), ::il2cpp_utils::ExtractType(peTransformSpace), ::il2cpp_utils::ExtractType(pTransformArray), ::il2cpp_utils::ExtractType(unTransformArrayCount), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pvCompressedBuffer, unCompressedBufferSize, peTransformSpace, pTransformArray, unTransformArrayCount, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_DecompressSkeletalBoneData.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_DecompressSkeletalBoneData::EndInvoke(OVR::OpenVR::EVRSkeletalTransformSpace& peTransformSpace, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_DecompressSkeletalBoneData::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peTransformSpace), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, peTransformSpace, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_TriggerHapticVibrationAction
#include "OVR/OpenVR/IVRInput__TriggerHapticVibrationAction.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_TriggerHapticVibrationAction.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_TriggerHapticVibrationAction::Invoke(uint64_t action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_TriggerHapticVibrationAction::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(fStartSecondsFromNow), ::il2cpp_utils::ExtractType(fDurationSeconds), ::il2cpp_utils::ExtractType(fFrequency), ::il2cpp_utils::ExtractType(fAmplitude), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, fStartSecondsFromNow, fDurationSeconds, fFrequency, fAmplitude, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_TriggerHapticVibrationAction.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_TriggerHapticVibrationAction::BeginInvoke(uint64_t action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, uint64_t ulRestrictToDevice, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_TriggerHapticVibrationAction::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(fStartSecondsFromNow), ::il2cpp_utils::ExtractType(fDurationSeconds), ::il2cpp_utils::ExtractType(fFrequency), ::il2cpp_utils::ExtractType(fAmplitude), ::il2cpp_utils::ExtractType(ulRestrictToDevice), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, action, fStartSecondsFromNow, fDurationSeconds, fFrequency, fAmplitude, ulRestrictToDevice, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_TriggerHapticVibrationAction.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_TriggerHapticVibrationAction::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_TriggerHapticVibrationAction::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetActionOrigins
#include "OVR/OpenVR/IVRInput__GetActionOrigins.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionOrigins.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetActionOrigins::Invoke(uint64_t actionSetHandle, uint64_t digitalActionHandle, ::Array<uint64_t>*& originsOut, uint originOutCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionOrigins::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actionSetHandle), ::il2cpp_utils::ExtractType(digitalActionHandle), ::il2cpp_utils::ExtractType(originsOut), ::il2cpp_utils::ExtractType(originOutCount)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, actionSetHandle, digitalActionHandle, originsOut, originOutCount);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionOrigins.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetActionOrigins::BeginInvoke(uint64_t actionSetHandle, uint64_t digitalActionHandle, ::Array<uint64_t>*& originsOut, uint originOutCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionOrigins::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actionSetHandle), ::il2cpp_utils::ExtractType(digitalActionHandle), ::il2cpp_utils::ExtractType(originsOut), ::il2cpp_utils::ExtractType(originOutCount), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, actionSetHandle, digitalActionHandle, originsOut, originOutCount, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetActionOrigins.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetActionOrigins::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetActionOrigins::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetOriginLocalizedName
#include "OVR/OpenVR/IVRInput__GetOriginLocalizedName.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetOriginLocalizedName.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetOriginLocalizedName::Invoke(uint64_t origin, System::Text::StringBuilder* pchNameArray, uint unNameArraySize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetOriginLocalizedName::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(pchNameArray), ::il2cpp_utils::ExtractType(unNameArraySize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, origin, pchNameArray, unNameArraySize);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetOriginLocalizedName.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetOriginLocalizedName::BeginInvoke(uint64_t origin, System::Text::StringBuilder* pchNameArray, uint unNameArraySize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetOriginLocalizedName::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(pchNameArray), ::il2cpp_utils::ExtractType(unNameArraySize), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, origin, pchNameArray, unNameArraySize, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetOriginLocalizedName.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetOriginLocalizedName::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetOriginLocalizedName::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_GetOriginTrackedDeviceInfo
#include "OVR/OpenVR/IVRInput__GetOriginTrackedDeviceInfo.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.InputOriginInfo_t
#include "OVR/OpenVR/InputOriginInfo_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_GetOriginTrackedDeviceInfo.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetOriginTrackedDeviceInfo::Invoke(uint64_t origin, OVR::OpenVR::InputOriginInfo_t& pOriginInfo, uint unOriginInfoSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetOriginTrackedDeviceInfo::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(pOriginInfo), ::il2cpp_utils::ExtractType(unOriginInfoSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, origin, pOriginInfo, unOriginInfoSize);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetOriginTrackedDeviceInfo.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_GetOriginTrackedDeviceInfo::BeginInvoke(uint64_t origin, OVR::OpenVR::InputOriginInfo_t& pOriginInfo, uint unOriginInfoSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetOriginTrackedDeviceInfo::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(pOriginInfo), ::il2cpp_utils::ExtractType(unOriginInfoSize), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, origin, pOriginInfo, unOriginInfoSize, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_GetOriginTrackedDeviceInfo.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_GetOriginTrackedDeviceInfo::EndInvoke(OVR::OpenVR::InputOriginInfo_t& pOriginInfo, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_GetOriginTrackedDeviceInfo::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOriginInfo), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pOriginInfo, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_ShowActionOrigins
#include "OVR/OpenVR/IVRInput__ShowActionOrigins.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_ShowActionOrigins.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_ShowActionOrigins::Invoke(uint64_t actionSetHandle, uint64_t ulActionHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_ShowActionOrigins::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actionSetHandle), ::il2cpp_utils::ExtractType(ulActionHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, actionSetHandle, ulActionHandle);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_ShowActionOrigins.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_ShowActionOrigins::BeginInvoke(uint64_t actionSetHandle, uint64_t ulActionHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_ShowActionOrigins::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actionSetHandle), ::il2cpp_utils::ExtractType(ulActionHandle), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, actionSetHandle, ulActionHandle, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_ShowActionOrigins.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_ShowActionOrigins::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_ShowActionOrigins::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRInput/_ShowBindingsForActionSet
#include "OVR/OpenVR/IVRInput__ShowBindingsForActionSet.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRInput/_ShowBindingsForActionSet.Invoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_ShowBindingsForActionSet::Invoke(::Array<OVR::OpenVR::VRActiveActionSet_t>*& pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount, uint64_t originToHighlight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_ShowBindingsForActionSet::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSets), ::il2cpp_utils::ExtractType(unSizeOfVRSelectedActionSet_t), ::il2cpp_utils::ExtractType(unSetCount), ::il2cpp_utils::ExtractType(originToHighlight)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t, unSetCount, originToHighlight);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_ShowBindingsForActionSet.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRInput::_ShowBindingsForActionSet::BeginInvoke(::Array<OVR::OpenVR::VRActiveActionSet_t>*& pSets, uint unSizeOfVRSelectedActionSet_t, uint unSetCount, uint64_t originToHighlight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_ShowBindingsForActionSet::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSets), ::il2cpp_utils::ExtractType(unSizeOfVRSelectedActionSet_t), ::il2cpp_utils::ExtractType(unSetCount), ::il2cpp_utils::ExtractType(originToHighlight), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t, unSetCount, originToHighlight, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRInput/_ShowBindingsForActionSet.EndInvoke
OVR::OpenVR::EVRInputError OVR::OpenVR::IVRInput::_ShowBindingsForActionSet::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRInput::_ShowBindingsForActionSet::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRIOBuffer/_Open
#include "OVR/OpenVR/IVRIOBuffer__Open.hpp"
// Including type: OVR.OpenVR.EIOBufferError
#include "OVR/OpenVR/EIOBufferError.hpp"
// Including type: OVR.OpenVR.EIOBufferMode
#include "OVR/OpenVR/EIOBufferMode.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Open.Invoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Open::Invoke(::Il2CppString* pchPath, OVR::OpenVR::EIOBufferMode mode, uint unElementSize, uint unElements, uint64_t& pulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Open::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchPath), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(unElementSize), ::il2cpp_utils::ExtractType(unElements), ::il2cpp_utils::ExtractType(pulBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, pchPath, mode, unElementSize, unElements, pulBuffer);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Open.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRIOBuffer::_Open::BeginInvoke(::Il2CppString* pchPath, OVR::OpenVR::EIOBufferMode mode, uint unElementSize, uint unElements, uint64_t& pulBuffer, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Open::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchPath), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(unElementSize), ::il2cpp_utils::ExtractType(unElements), ::il2cpp_utils::ExtractType(pulBuffer), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchPath, mode, unElementSize, unElements, pulBuffer, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Open.EndInvoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Open::EndInvoke(uint64_t& pulBuffer, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Open::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pulBuffer), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, pulBuffer, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRIOBuffer/_Close
#include "OVR/OpenVR/IVRIOBuffer__Close.hpp"
// Including type: OVR.OpenVR.EIOBufferError
#include "OVR/OpenVR/EIOBufferError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Close.Invoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Close::Invoke(uint64_t ulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Close::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, ulBuffer);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Close.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRIOBuffer::_Close::BeginInvoke(uint64_t ulBuffer, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Close::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulBuffer, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Close.EndInvoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Close::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Close::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRIOBuffer/_Read
#include "OVR/OpenVR/IVRIOBuffer__Read.hpp"
// Including type: OVR.OpenVR.EIOBufferError
#include "OVR/OpenVR/EIOBufferError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Read.Invoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Read::Invoke(uint64_t ulBuffer, System::IntPtr pDst, uint unBytes, uint& punRead) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Read::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(pDst), ::il2cpp_utils::ExtractType(unBytes), ::il2cpp_utils::ExtractType(punRead)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, ulBuffer, pDst, unBytes, punRead);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Read.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRIOBuffer::_Read::BeginInvoke(uint64_t ulBuffer, System::IntPtr pDst, uint unBytes, uint& punRead, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Read::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(pDst), ::il2cpp_utils::ExtractType(unBytes), ::il2cpp_utils::ExtractType(punRead), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulBuffer, pDst, unBytes, punRead, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Read.EndInvoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Read::EndInvoke(uint& punRead, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Read::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(punRead), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, punRead, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRIOBuffer/_Write
#include "OVR/OpenVR/IVRIOBuffer__Write.hpp"
// Including type: OVR.OpenVR.EIOBufferError
#include "OVR/OpenVR/EIOBufferError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Write.Invoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Write::Invoke(uint64_t ulBuffer, System::IntPtr pSrc, uint unBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Write::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(unBytes)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, ulBuffer, pSrc, unBytes);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Write.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRIOBuffer::_Write::BeginInvoke(uint64_t ulBuffer, System::IntPtr pSrc, uint unBytes, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Write::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(unBytes), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulBuffer, pSrc, unBytes, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_Write.EndInvoke
OVR::OpenVR::EIOBufferError OVR::OpenVR::IVRIOBuffer::_Write::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_Write::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRIOBuffer/_PropertyContainer
#include "OVR/OpenVR/IVRIOBuffer__PropertyContainer.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_PropertyContainer.Invoke
uint64_t OVR::OpenVR::IVRIOBuffer::_PropertyContainer::Invoke(uint64_t ulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_PropertyContainer::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, ulBuffer);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_PropertyContainer.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRIOBuffer::_PropertyContainer::BeginInvoke(uint64_t ulBuffer, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_PropertyContainer::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulBuffer, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRIOBuffer/_PropertyContainer.EndInvoke
uint64_t OVR::OpenVR::IVRIOBuffer::_PropertyContainer::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRIOBuffer::_PropertyContainer::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromDescriptor
#include "OVR/OpenVR/IVRSpatialAnchors__CreateSpatialAnchorFromDescriptor.hpp"
// Including type: OVR.OpenVR.EVRSpatialAnchorError
#include "OVR/OpenVR/EVRSpatialAnchorError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromDescriptor.Invoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::Invoke(::Il2CppString* pchDescriptor, uint& pHandleOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchDescriptor), ::il2cpp_utils::ExtractType(pHandleOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, pchDescriptor, pHandleOut);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromDescriptor.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::BeginInvoke(::Il2CppString* pchDescriptor, uint& pHandleOut, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchDescriptor), ::il2cpp_utils::ExtractType(pHandleOut), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchDescriptor, pHandleOut, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromDescriptor.EndInvoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::EndInvoke(uint& pHandleOut, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromDescriptor::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pHandleOut), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, pHandleOut, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromPose
#include "OVR/OpenVR/IVRSpatialAnchors__CreateSpatialAnchorFromPose.hpp"
// Including type: OVR.OpenVR.EVRSpatialAnchorError
#include "OVR/OpenVR/EVRSpatialAnchorError.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.SpatialAnchorPose_t
#include "OVR/OpenVR/SpatialAnchorPose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromPose.Invoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::Invoke(uint unDeviceIndex, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::SpatialAnchorPose_t& pPose, uint& pHandleOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pPose), ::il2cpp_utils::ExtractType(pHandleOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, unDeviceIndex, eOrigin, pPose, pHandleOut);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromPose.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::BeginInvoke(uint unDeviceIndex, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::SpatialAnchorPose_t& pPose, uint& pHandleOut, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pPose), ::il2cpp_utils::ExtractType(pHandleOut), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, eOrigin, pPose, pHandleOut, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_CreateSpatialAnchorFromPose.EndInvoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::EndInvoke(OVR::OpenVR::SpatialAnchorPose_t& pPose, uint& pHandleOut, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_CreateSpatialAnchorFromPose::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pPose), ::il2cpp_utils::ExtractType(pHandleOut), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, pPose, pHandleOut, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorPose
#include "OVR/OpenVR/IVRSpatialAnchors__GetSpatialAnchorPose.hpp"
// Including type: OVR.OpenVR.EVRSpatialAnchorError
#include "OVR/OpenVR/EVRSpatialAnchorError.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.SpatialAnchorPose_t
#include "OVR/OpenVR/SpatialAnchorPose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorPose.Invoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorPose::Invoke(uint unHandle, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::SpatialAnchorPose_t& pPoseOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorPose::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pPoseOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, unHandle, eOrigin, pPoseOut);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorPose.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorPose::BeginInvoke(uint unHandle, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::SpatialAnchorPose_t& pPoseOut, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorPose::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pPoseOut), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unHandle, eOrigin, pPoseOut, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorPose.EndInvoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorPose::EndInvoke(OVR::OpenVR::SpatialAnchorPose_t& pPoseOut, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorPose::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pPoseOut), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, pPoseOut, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorDescriptor
#include "OVR/OpenVR/IVRSpatialAnchors__GetSpatialAnchorDescriptor.hpp"
// Including type: OVR.OpenVR.EVRSpatialAnchorError
#include "OVR/OpenVR/EVRSpatialAnchorError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorDescriptor.Invoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::Invoke(uint unHandle, System::Text::StringBuilder* pchDescriptorOut, uint& punDescriptorBufferLenInOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(pchDescriptorOut), ::il2cpp_utils::ExtractType(punDescriptorBufferLenInOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, unHandle, pchDescriptorOut, punDescriptorBufferLenInOut);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorDescriptor.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::BeginInvoke(uint unHandle, System::Text::StringBuilder* pchDescriptorOut, uint& punDescriptorBufferLenInOut, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(pchDescriptorOut), ::il2cpp_utils::ExtractType(punDescriptorBufferLenInOut), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unHandle, pchDescriptorOut, punDescriptorBufferLenInOut, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSpatialAnchors/_GetSpatialAnchorDescriptor.EndInvoke
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::EndInvoke(uint& punDescriptorBufferLenInOut, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSpatialAnchors::_GetSpatialAnchorDescriptor::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(punDescriptorBufferLenInOut), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, punDescriptorBufferLenInOut, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRSystem
#include "OVR/OpenVR/CVRSystem.hpp"
// Including type: OVR.OpenVR.CVRSystem/_PollNextEventPacked
#include "OVR/OpenVR/CVRSystem__PollNextEventPacked.hpp"
// Including type: OVR.OpenVR.CVRSystem/PollNextEventUnion
#include "OVR/OpenVR/CVRSystem_PollNextEventUnion.hpp"
// Including type: OVR.OpenVR.CVRSystem/_GetControllerStatePacked
#include "OVR/OpenVR/CVRSystem__GetControllerStatePacked.hpp"
// Including type: OVR.OpenVR.CVRSystem/GetControllerStateUnion
#include "OVR/OpenVR/CVRSystem_GetControllerStateUnion.hpp"
// Including type: OVR.OpenVR.CVRSystem/_GetControllerStateWithPosePacked
#include "OVR/OpenVR/CVRSystem__GetControllerStateWithPosePacked.hpp"
// Including type: OVR.OpenVR.CVRSystem/GetControllerStateWithPoseUnion
#include "OVR/OpenVR/CVRSystem_GetControllerStateWithPoseUnion.hpp"
// Including type: OVR.OpenVR.HmdMatrix44_t
#include "OVR/OpenVR/HmdMatrix44_t.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
// Including type: OVR.OpenVR.DistortionCoordinates_t
#include "OVR/OpenVR/DistortionCoordinates_t.hpp"
// Including type: OVR.OpenVR.ETextureType
#include "OVR/OpenVR/ETextureType.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.ETrackedDeviceClass
#include "OVR/OpenVR/ETrackedDeviceClass.hpp"
// Including type: OVR.OpenVR.EDeviceActivityLevel
#include "OVR/OpenVR/EDeviceActivityLevel.hpp"
// Including type: OVR.OpenVR.ETrackedControllerRole
#include "OVR/OpenVR/ETrackedControllerRole.hpp"
// Including type: OVR.OpenVR.ETrackedDeviceProperty
#include "OVR/OpenVR/ETrackedDeviceProperty.hpp"
// Including type: OVR.OpenVR.ETrackedPropertyError
#include "OVR/OpenVR/ETrackedPropertyError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.VREvent_t
#include "OVR/OpenVR/VREvent_t.hpp"
// Including type: OVR.OpenVR.EVREventType
#include "OVR/OpenVR/EVREventType.hpp"
// Including type: OVR.OpenVR.HiddenAreaMesh_t
#include "OVR/OpenVR/HiddenAreaMesh_t.hpp"
// Including type: OVR.OpenVR.EHiddenAreaMeshType
#include "OVR/OpenVR/EHiddenAreaMeshType.hpp"
// Including type: OVR.OpenVR.VRControllerState_t
#include "OVR/OpenVR/VRControllerState_t.hpp"
// Including type: OVR.OpenVR.EVRButtonId
#include "OVR/OpenVR/EVRButtonId.hpp"
// Including type: OVR.OpenVR.EVRControllerAxisType
#include "OVR/OpenVR/EVRControllerAxisType.hpp"
// Including type: OVR.OpenVR.EVRFirmwareError
#include "OVR/OpenVR/EVRFirmwareError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRSystem.GetRecommendedRenderTargetSize
void OVR::OpenVR::CVRSystem::GetRecommendedRenderTargetSize(uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetRecommendedRenderTargetSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRecommendedRenderTargetSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnWidth, pnHeight);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetProjectionMatrix
OVR::OpenVR::HmdMatrix44_t OVR::OpenVR::CVRSystem::GetProjectionMatrix(OVR::OpenVR::EVREye eEye, float fNearZ, float fFarZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetProjectionMatrix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProjectionMatrix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(fNearZ), ::il2cpp_utils::ExtractType(fFarZ)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix44_t, false>(this, ___internal__method, eEye, fNearZ, fFarZ);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetProjectionRaw
void OVR::OpenVR::CVRSystem::GetProjectionRaw(OVR::OpenVR::EVREye eEye, float& pfLeft, float& pfRight, float& pfTop, float& pfBottom) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetProjectionRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProjectionRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pfLeft), ::il2cpp_utils::ExtractType(pfRight), ::il2cpp_utils::ExtractType(pfTop), ::il2cpp_utils::ExtractType(pfBottom)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eEye, pfLeft, pfRight, pfTop, pfBottom);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.ComputeDistortion
bool OVR::OpenVR::CVRSystem::ComputeDistortion(OVR::OpenVR::EVREye eEye, float fU, float fV, OVR::OpenVR::DistortionCoordinates_t& pDistortionCoordinates) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::ComputeDistortion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeDistortion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(fU), ::il2cpp_utils::ExtractType(fV), ::il2cpp_utils::ExtractType(pDistortionCoordinates)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eEye, fU, fV, pDistortionCoordinates);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetEyeToHeadTransform
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::CVRSystem::GetEyeToHeadTransform(OVR::OpenVR::EVREye eEye) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetEyeToHeadTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEyeToHeadTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method, eEye);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetTimeSinceLastVsync
bool OVR::OpenVR::CVRSystem::GetTimeSinceLastVsync(float& pfSecondsSinceLastVsync, uint64_t& pulFrameCounter) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetTimeSinceLastVsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTimeSinceLastVsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pfSecondsSinceLastVsync), ::il2cpp_utils::ExtractType(pulFrameCounter)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pfSecondsSinceLastVsync, pulFrameCounter);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetD3D9AdapterIndex
int OVR::OpenVR::CVRSystem::GetD3D9AdapterIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetD3D9AdapterIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetD3D9AdapterIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetDXGIOutputInfo
void OVR::OpenVR::CVRSystem::GetDXGIOutputInfo(int& pnAdapterIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetDXGIOutputInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDXGIOutputInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnAdapterIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetOutputDevice
void OVR::OpenVR::CVRSystem::GetOutputDevice(uint64_t& pnDevice, OVR::OpenVR::ETextureType textureType, System::IntPtr pInstance) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetOutputDevice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOutputDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnDevice), ::il2cpp_utils::ExtractType(textureType), ::il2cpp_utils::ExtractType(pInstance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnDevice, textureType, pInstance);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.IsDisplayOnDesktop
bool OVR::OpenVR::CVRSystem::IsDisplayOnDesktop() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::IsDisplayOnDesktop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDisplayOnDesktop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.SetDisplayVisibility
bool OVR::OpenVR::CVRSystem::SetDisplayVisibility(bool bIsVisibleOnDesktop) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::SetDisplayVisibility");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDisplayVisibility", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bIsVisibleOnDesktop)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bIsVisibleOnDesktop);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetDeviceToAbsoluteTrackingPose
void OVR::OpenVR::CVRSystem::GetDeviceToAbsoluteTrackingPose(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, ::Array<OVR::OpenVR::TrackedDevicePose_t>* pTrackedDevicePoseArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetDeviceToAbsoluteTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDeviceToAbsoluteTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(fPredictedSecondsToPhotonsFromNow), ::il2cpp_utils::ExtractType(pTrackedDevicePoseArray)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.ResetSeatedZeroPose
void OVR::OpenVR::CVRSystem::ResetSeatedZeroPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::ResetSeatedZeroPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetSeatedZeroPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetSeatedZeroPoseToStandingAbsoluteTrackingPose
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::CVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSeatedZeroPoseToStandingAbsoluteTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetRawZeroPoseToStandingAbsoluteTrackingPose
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::CVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRawZeroPoseToStandingAbsoluteTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetSortedTrackedDeviceIndicesOfClass
uint OVR::OpenVR::CVRSystem::GetSortedTrackedDeviceIndicesOfClass(OVR::OpenVR::ETrackedDeviceClass eTrackedDeviceClass, ::Array<uint>* punTrackedDeviceIndexArray, uint unRelativeToTrackedDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetSortedTrackedDeviceIndicesOfClass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSortedTrackedDeviceIndicesOfClass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eTrackedDeviceClass), ::il2cpp_utils::ExtractType(punTrackedDeviceIndexArray), ::il2cpp_utils::ExtractType(unRelativeToTrackedDeviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, eTrackedDeviceClass, punTrackedDeviceIndexArray, unRelativeToTrackedDeviceIndex);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetTrackedDeviceActivityLevel
OVR::OpenVR::EDeviceActivityLevel OVR::OpenVR::CVRSystem::GetTrackedDeviceActivityLevel(uint unDeviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetTrackedDeviceActivityLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackedDeviceActivityLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EDeviceActivityLevel, false>(this, ___internal__method, unDeviceId);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.ApplyTransform
void OVR::OpenVR::CVRSystem::ApplyTransform(OVR::OpenVR::TrackedDevicePose_t& pOutputPose, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose, OVR::OpenVR::HmdMatrix34_t& pTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::ApplyTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutputPose), ::il2cpp_utils::ExtractType(pTrackedDevicePose), ::il2cpp_utils::ExtractType(pTransform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pOutputPose, pTrackedDevicePose, pTransform);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetTrackedDeviceIndexForControllerRole
uint OVR::OpenVR::CVRSystem::GetTrackedDeviceIndexForControllerRole(OVR::OpenVR::ETrackedControllerRole unDeviceType) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetTrackedDeviceIndexForControllerRole");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackedDeviceIndexForControllerRole", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceType)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceType);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetControllerRoleForTrackedDeviceIndex
OVR::OpenVR::ETrackedControllerRole OVR::OpenVR::CVRSystem::GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetControllerRoleForTrackedDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControllerRoleForTrackedDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::ETrackedControllerRole, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetTrackedDeviceClass
OVR::OpenVR::ETrackedDeviceClass OVR::OpenVR::CVRSystem::GetTrackedDeviceClass(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetTrackedDeviceClass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackedDeviceClass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::ETrackedDeviceClass, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.IsTrackedDeviceConnected
bool OVR::OpenVR::CVRSystem::IsTrackedDeviceConnected(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::IsTrackedDeviceConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsTrackedDeviceConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetBoolTrackedDeviceProperty
bool OVR::OpenVR::CVRSystem::GetBoolTrackedDeviceProperty(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetBoolTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoolTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetFloatTrackedDeviceProperty
float OVR::OpenVR::CVRSystem::GetFloatTrackedDeviceProperty(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetFloatTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFloatTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetInt32TrackedDeviceProperty
int OVR::OpenVR::CVRSystem::GetInt32TrackedDeviceProperty(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetInt32TrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInt32TrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetUint64TrackedDeviceProperty
uint64_t OVR::OpenVR::CVRSystem::GetUint64TrackedDeviceProperty(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetUint64TrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUint64TrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetMatrix34TrackedDeviceProperty
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::CVRSystem::GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetMatrix34TrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMatrix34TrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetArrayTrackedDeviceProperty
uint OVR::OpenVR::CVRSystem::GetArrayTrackedDeviceProperty(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, uint propType, System::IntPtr pBuffer, uint unBufferSize, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetArrayTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetArrayTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(propType), ::il2cpp_utils::ExtractType(pBuffer), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetStringTrackedDeviceProperty
uint OVR::OpenVR::CVRSystem::GetStringTrackedDeviceProperty(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, System::Text::StringBuilder* pchValue, uint unBufferSize, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetStringTrackedDeviceProperty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStringTrackedDeviceProperty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(prop), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, pchValue, unBufferSize, pError);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetPropErrorNameFromEnum
::Il2CppString* OVR::OpenVR::CVRSystem::GetPropErrorNameFromEnum(OVR::OpenVR::ETrackedPropertyError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetPropErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPropErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.PollNextEvent
bool OVR::OpenVR::CVRSystem::PollNextEvent(OVR::OpenVR::VREvent_t& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::PollNextEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollNextEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, uncbVREvent);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.PollNextEventWithPose
bool OVR::OpenVR::CVRSystem::PollNextEventWithPose(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::VREvent_t& pEvent, uint uncbVREvent, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::PollNextEventWithPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollNextEventWithPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent), ::il2cpp_utils::ExtractType(pTrackedDevicePose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, pEvent, uncbVREvent, pTrackedDevicePose);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetEventTypeNameFromEnum
::Il2CppString* OVR::OpenVR::CVRSystem::GetEventTypeNameFromEnum(OVR::OpenVR::EVREventType eType) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetEventTypeNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEventTypeNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eType)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eType);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetHiddenAreaMesh
OVR::OpenVR::HiddenAreaMesh_t OVR::OpenVR::CVRSystem::GetHiddenAreaMesh(OVR::OpenVR::EVREye eEye, OVR::OpenVR::EHiddenAreaMeshType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetHiddenAreaMesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHiddenAreaMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HiddenAreaMesh_t, false>(this, ___internal__method, eEye, type);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetControllerState
bool OVR::OpenVR::CVRSystem::GetControllerState(uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t& pControllerState, uint unControllerStateSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetControllerState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControllerState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetControllerStateWithPose
bool OVR::OpenVR::CVRSystem::GetControllerStateWithPose(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t& pControllerState, uint unControllerStateSize, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetControllerStateWithPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControllerStateWithPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize), ::il2cpp_utils::ExtractType(pTrackedDevicePose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.TriggerHapticPulse
void OVR::OpenVR::CVRSystem::TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, uint16_t usDurationMicroSec) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::TriggerHapticPulse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticPulse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(unAxisId), ::il2cpp_utils::ExtractType(usDurationMicroSec)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, unControllerDeviceIndex, unAxisId, usDurationMicroSec);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetButtonIdNameFromEnum
::Il2CppString* OVR::OpenVR::CVRSystem::GetButtonIdNameFromEnum(OVR::OpenVR::EVRButtonId eButtonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetButtonIdNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetButtonIdNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eButtonId)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eButtonId);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.GetControllerAxisTypeNameFromEnum
::Il2CppString* OVR::OpenVR::CVRSystem::GetControllerAxisTypeNameFromEnum(OVR::OpenVR::EVRControllerAxisType eAxisType) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::GetControllerAxisTypeNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetControllerAxisTypeNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eAxisType)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eAxisType);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.IsInputAvailable
bool OVR::OpenVR::CVRSystem::IsInputAvailable() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::IsInputAvailable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInputAvailable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.IsSteamVRDrawingControllers
bool OVR::OpenVR::CVRSystem::IsSteamVRDrawingControllers() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::IsSteamVRDrawingControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsSteamVRDrawingControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.ShouldApplicationPause
bool OVR::OpenVR::CVRSystem::ShouldApplicationPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::ShouldApplicationPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldApplicationPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.ShouldApplicationReduceRenderingWork
bool OVR::OpenVR::CVRSystem::ShouldApplicationReduceRenderingWork() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::ShouldApplicationReduceRenderingWork");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldApplicationReduceRenderingWork", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.DriverDebugRequest
uint OVR::OpenVR::CVRSystem::DriverDebugRequest(uint unDeviceIndex, ::Il2CppString* pchRequest, System::Text::StringBuilder* pchResponseBuffer, uint unResponseBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::DriverDebugRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DriverDebugRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(pchRequest), ::il2cpp_utils::ExtractType(pchResponseBuffer), ::il2cpp_utils::ExtractType(unResponseBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.PerformFirmwareUpdate
OVR::OpenVR::EVRFirmwareError OVR::OpenVR::CVRSystem::PerformFirmwareUpdate(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::PerformFirmwareUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformFirmwareUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRFirmwareError, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.AcknowledgeQuit_Exiting
void OVR::OpenVR::CVRSystem::AcknowledgeQuit_Exiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::AcknowledgeQuit_Exiting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcknowledgeQuit_Exiting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRSystem.AcknowledgeQuit_UserPrompt
void OVR::OpenVR::CVRSystem::AcknowledgeQuit_UserPrompt() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::AcknowledgeQuit_UserPrompt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcknowledgeQuit_UserPrompt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRSystem/_PollNextEventPacked
#include "OVR/OpenVR/CVRSystem__PollNextEventPacked.hpp"
// Including type: OVR.OpenVR.VREvent_t_Packed
#include "OVR/OpenVR/VREvent_t_Packed.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRSystem/_PollNextEventPacked.Invoke
bool OVR::OpenVR::CVRSystem::_PollNextEventPacked::Invoke(OVR::OpenVR::VREvent_t_Packed& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_PollNextEventPacked::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, uncbVREvent);
}
// Autogenerated method: OVR.OpenVR.CVRSystem/_PollNextEventPacked.BeginInvoke
System::IAsyncResult* OVR::OpenVR::CVRSystem::_PollNextEventPacked::BeginInvoke(OVR::OpenVR::VREvent_t_Packed& pEvent, uint uncbVREvent, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_PollNextEventPacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pEvent, uncbVREvent, callback, object);
}
// Autogenerated method: OVR.OpenVR.CVRSystem/_PollNextEventPacked.EndInvoke
bool OVR::OpenVR::CVRSystem::_PollNextEventPacked::EndInvoke(OVR::OpenVR::VREvent_t_Packed& pEvent, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_PollNextEventPacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRSystem/_GetControllerStatePacked
#include "OVR/OpenVR/CVRSystem__GetControllerStatePacked.hpp"
// Including type: OVR.OpenVR.VRControllerState_t_Packed
#include "OVR/OpenVR/VRControllerState_t_Packed.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRSystem/_GetControllerStatePacked.Invoke
bool OVR::OpenVR::CVRSystem::_GetControllerStatePacked::Invoke(uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t_Packed& pControllerState, uint unControllerStateSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_GetControllerStatePacked::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize);
}
// Autogenerated method: OVR.OpenVR.CVRSystem/_GetControllerStatePacked.BeginInvoke
System::IAsyncResult* OVR::OpenVR::CVRSystem::_GetControllerStatePacked::BeginInvoke(uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t_Packed& pControllerState, uint unControllerStateSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_GetControllerStatePacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize, callback, object);
}
// Autogenerated method: OVR.OpenVR.CVRSystem/_GetControllerStatePacked.EndInvoke
bool OVR::OpenVR::CVRSystem::_GetControllerStatePacked::EndInvoke(OVR::OpenVR::VRControllerState_t_Packed& pControllerState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_GetControllerStatePacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRSystem/_GetControllerStateWithPosePacked
#include "OVR/OpenVR/CVRSystem__GetControllerStateWithPosePacked.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.VRControllerState_t_Packed
#include "OVR/OpenVR/VRControllerState_t_Packed.hpp"
// Including type: OVR.OpenVR.TrackedDevicePose_t
#include "OVR/OpenVR/TrackedDevicePose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRSystem/_GetControllerStateWithPosePacked.Invoke
bool OVR::OpenVR::CVRSystem::_GetControllerStateWithPosePacked::Invoke(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t_Packed& pControllerState, uint unControllerStateSize, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_GetControllerStateWithPosePacked::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize), ::il2cpp_utils::ExtractType(pTrackedDevicePose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose);
}
// Autogenerated method: OVR.OpenVR.CVRSystem/_GetControllerStateWithPosePacked.BeginInvoke
System::IAsyncResult* OVR::OpenVR::CVRSystem::_GetControllerStateWithPosePacked::BeginInvoke(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t_Packed& pControllerState, uint unControllerStateSize, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_GetControllerStateWithPosePacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(unControllerDeviceIndex), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(unControllerStateSize), ::il2cpp_utils::ExtractType(pTrackedDevicePose), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose, callback, object);
}
// Autogenerated method: OVR.OpenVR.CVRSystem/_GetControllerStateWithPosePacked.EndInvoke
bool OVR::OpenVR::CVRSystem::_GetControllerStateWithPosePacked::EndInvoke(OVR::OpenVR::VRControllerState_t_Packed& pControllerState, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSystem::_GetControllerStateWithPosePacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pTrackedDevicePose), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, pTrackedDevicePose, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVR.OpenVR.CVRExtendedDisplay
#include "OVR/OpenVR/CVRExtendedDisplay.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRExtendedDisplay.GetWindowBounds
void OVR::OpenVR::CVRExtendedDisplay::GetWindowBounds(int& pnX, int& pnY, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRExtendedDisplay::GetWindowBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWindowBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnX), ::il2cpp_utils::ExtractType(pnY), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnX, pnY, pnWidth, pnHeight);
}
// Autogenerated method: OVR.OpenVR.CVRExtendedDisplay.GetEyeOutputViewport
void OVR::OpenVR::CVRExtendedDisplay::GetEyeOutputViewport(OVR::OpenVR::EVREye eEye, uint& pnX, uint& pnY, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRExtendedDisplay::GetEyeOutputViewport");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEyeOutputViewport", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pnX), ::il2cpp_utils::ExtractType(pnY), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eEye, pnX, pnY, pnWidth, pnHeight);
}
// Autogenerated method: OVR.OpenVR.CVRExtendedDisplay.GetDXGIOutputInfo
void OVR::OpenVR::CVRExtendedDisplay::GetDXGIOutputInfo(int& pnAdapterIndex, int& pnAdapterOutputIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRExtendedDisplay::GetDXGIOutputInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDXGIOutputInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pnAdapterIndex), ::il2cpp_utils::ExtractType(pnAdapterOutputIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex, pnAdapterOutputIndex);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRTrackedCamera
#include "OVR/OpenVR/CVRTrackedCamera.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraError
#include "OVR/OpenVR/EVRTrackedCameraError.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraFrameType
#include "OVR/OpenVR/EVRTrackedCameraFrameType.hpp"
// Including type: OVR.OpenVR.HmdVector2_t
#include "OVR/OpenVR/HmdVector2_t.hpp"
// Including type: OVR.OpenVR.HmdMatrix44_t
#include "OVR/OpenVR/HmdMatrix44_t.hpp"
// Including type: OVR.OpenVR.CameraVideoStreamFrameHeader_t
#include "OVR/OpenVR/CameraVideoStreamFrameHeader_t.hpp"
// Including type: OVR.OpenVR.VRTextureBounds_t
#include "OVR/OpenVR/VRTextureBounds_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetCameraErrorNameFromEnum
::Il2CppString* OVR::OpenVR::CVRTrackedCamera::GetCameraErrorNameFromEnum(OVR::OpenVR::EVRTrackedCameraError eCameraError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetCameraErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eCameraError)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eCameraError);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.HasCamera
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::HasCamera(uint nDeviceIndex, bool& pHasCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::HasCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(pHasCamera)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, pHasCamera);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetCameraFrameSize
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetCameraFrameSize(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, uint& pnWidth, uint& pnHeight, uint& pnFrameBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetCameraFrameSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraFrameSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight), ::il2cpp_utils::ExtractType(pnFrameBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pnWidth, pnHeight, pnFrameBufferSize);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetCameraIntrinsics
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetCameraIntrinsics(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, OVR::OpenVR::HmdVector2_t& pFocalLength, OVR::OpenVR::HmdVector2_t& pCenter) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetCameraIntrinsics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraIntrinsics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pFocalLength), ::il2cpp_utils::ExtractType(pCenter)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pFocalLength, pCenter);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetCameraProjection
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetCameraProjection(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, OVR::OpenVR::HmdMatrix44_t& pProjection) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetCameraProjection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCameraProjection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(flZNear), ::il2cpp_utils::ExtractType(flZFar), ::il2cpp_utils::ExtractType(pProjection)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, flZNear, flZFar, pProjection);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.AcquireVideoStreamingService
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::AcquireVideoStreamingService(uint nDeviceIndex, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::AcquireVideoStreamingService");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AcquireVideoStreamingService", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, pHandle);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.ReleaseVideoStreamingService
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::ReleaseVideoStreamingService(uint64_t hTrackedCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::ReleaseVideoStreamingService");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseVideoStreamingService", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetVideoStreamFrameBuffer
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetVideoStreamFrameBuffer(uint64_t hTrackedCamera, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pFrameBuffer, uint nFrameBufferSize, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetVideoStreamFrameBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVideoStreamFrameBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pFrameBuffer), ::il2cpp_utils::ExtractType(nFrameBufferSize), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(nFrameHeaderSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetVideoStreamTextureSize
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetVideoStreamTextureSize(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, OVR::OpenVR::VRTextureBounds_t& pTextureBounds, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetVideoStreamTextureSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVideoStreamTextureSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDeviceIndex), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pTextureBounds), ::il2cpp_utils::ExtractType(pnWidth), ::il2cpp_utils::ExtractType(pnHeight)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pTextureBounds, pnWidth, pnHeight);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetVideoStreamTextureD3D11
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetVideoStreamTextureD3D11(uint64_t hTrackedCamera, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetVideoStreamTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVideoStreamTextureD3D11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pD3D11DeviceOrResource), ::il2cpp_utils::ExtractType(ppD3D11ShaderResourceView), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(nFrameHeaderSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetVideoStreamTextureGL
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetVideoStreamTextureGL(uint64_t hTrackedCamera, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, uint& pglTextureId, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::GetVideoStreamTextureGL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVideoStreamTextureGL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(eFrameType), ::il2cpp_utils::ExtractType(pglTextureId), ::il2cpp_utils::ExtractType(pFrameHeader), ::il2cpp_utils::ExtractType(nFrameHeaderSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pglTextureId, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.ReleaseVideoStreamTextureGL
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::ReleaseVideoStreamTextureGL(uint64_t hTrackedCamera, uint glTextureId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRTrackedCamera::ReleaseVideoStreamTextureGL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseVideoStreamTextureGL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hTrackedCamera), ::il2cpp_utils::ExtractType(glTextureId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, glTextureId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRApplications
#include "OVR/OpenVR/CVRApplications.hpp"
// Including type: OVR.OpenVR.EVRApplicationError
#include "OVR/OpenVR/EVRApplicationError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.EVRApplicationProperty
#include "OVR/OpenVR/EVRApplicationProperty.hpp"
// Including type: OVR.OpenVR.EVRApplicationTransitionState
#include "OVR/OpenVR/EVRApplicationTransitionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRApplications.AddApplicationManifest
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::AddApplicationManifest(::Il2CppString* pchApplicationManifestFullPath, bool bTemporary) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::AddApplicationManifest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddApplicationManifest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchApplicationManifestFullPath), ::il2cpp_utils::ExtractType(bTemporary)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath, bTemporary);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.RemoveApplicationManifest
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::RemoveApplicationManifest(::Il2CppString* pchApplicationManifestFullPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::RemoveApplicationManifest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveApplicationManifest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchApplicationManifestFullPath)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.IsApplicationInstalled
bool OVR::OpenVR::CVRApplications::IsApplicationInstalled(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::IsApplicationInstalled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsApplicationInstalled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationCount
uint OVR::OpenVR::CVRApplications::GetApplicationCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationKeyByIndex
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::GetApplicationKeyByIndex(uint unApplicationIndex, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationKeyByIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationKeyByIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unApplicationIndex), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationKeyByProcessId
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::GetApplicationKeyByProcessId(uint unProcessId, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationKeyByProcessId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationKeyByProcessId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unProcessId), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, unProcessId, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.LaunchApplication
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::LaunchApplication(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::LaunchApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.LaunchTemplateApplication
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::LaunchTemplateApplication(::Il2CppString* pchTemplateAppKey, ::Il2CppString* pchNewAppKey, ::Array<OVR::OpenVR::AppOverrideKeys_t>* pKeys) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::LaunchTemplateApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchTemplateApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchTemplateAppKey), ::il2cpp_utils::ExtractType(pchNewAppKey), ::il2cpp_utils::ExtractType(pKeys)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchTemplateAppKey, pchNewAppKey, pKeys);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.LaunchApplicationFromMimeType
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::LaunchApplicationFromMimeType(::Il2CppString* pchMimeType, ::Il2CppString* pchArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::LaunchApplicationFromMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchApplicationFromMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchMimeType), ::il2cpp_utils::ExtractType(pchArgs)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchMimeType, pchArgs);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.LaunchDashboardOverlay
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::LaunchDashboardOverlay(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::LaunchDashboardOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchDashboardOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.CancelApplicationLaunch
bool OVR::OpenVR::CVRApplications::CancelApplicationLaunch(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::CancelApplicationLaunch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelApplicationLaunch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.IdentifyApplication
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::IdentifyApplication(uint unProcessId, ::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::IdentifyApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IdentifyApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unProcessId), ::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, unProcessId, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationProcessId
uint OVR::OpenVR::CVRApplications::GetApplicationProcessId(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationProcessId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationProcessId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationsErrorNameFromEnum
::Il2CppString* OVR::OpenVR::CVRApplications::GetApplicationsErrorNameFromEnum(OVR::OpenVR::EVRApplicationError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationsErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationsErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationPropertyString
uint OVR::OpenVR::CVRApplications::GetApplicationPropertyString(::Il2CppString* pchAppKey, OVR::OpenVR::EVRApplicationProperty eProperty, System::Text::StringBuilder* pchPropertyValueBuffer, uint unPropertyValueBufferLen, OVR::OpenVR::EVRApplicationError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationPropertyString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationPropertyString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(pchPropertyValueBuffer), ::il2cpp_utils::ExtractType(unPropertyValueBufferLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchAppKey, eProperty, pchPropertyValueBuffer, unPropertyValueBufferLen, peError);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationPropertyBool
bool OVR::OpenVR::CVRApplications::GetApplicationPropertyBool(::Il2CppString* pchAppKey, OVR::OpenVR::EVRApplicationProperty eProperty, OVR::OpenVR::EVRApplicationError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationPropertyBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationPropertyBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey, eProperty, peError);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationPropertyUint64
uint64_t OVR::OpenVR::CVRApplications::GetApplicationPropertyUint64(::Il2CppString* pchAppKey, OVR::OpenVR::EVRApplicationProperty eProperty, OVR::OpenVR::EVRApplicationError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationPropertyUint64");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationPropertyUint64", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(eProperty), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchAppKey, eProperty, peError);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.SetApplicationAutoLaunch
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::SetApplicationAutoLaunch(::Il2CppString* pchAppKey, bool bAutoLaunch) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::SetApplicationAutoLaunch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetApplicationAutoLaunch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(bAutoLaunch)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchAppKey, bAutoLaunch);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationAutoLaunch
bool OVR::OpenVR::CVRApplications::GetApplicationAutoLaunch(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationAutoLaunch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationAutoLaunch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.SetDefaultApplicationForMimeType
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::SetDefaultApplicationForMimeType(::Il2CppString* pchAppKey, ::Il2CppString* pchMimeType) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::SetDefaultApplicationForMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDefaultApplicationForMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(pchMimeType)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchAppKey, pchMimeType);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetDefaultApplicationForMimeType
bool OVR::OpenVR::CVRApplications::GetDefaultApplicationForMimeType(::Il2CppString* pchMimeType, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetDefaultApplicationForMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDefaultApplicationForMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchMimeType), ::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchMimeType, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationSupportedMimeTypes
bool OVR::OpenVR::CVRApplications::GetApplicationSupportedMimeTypes(::Il2CppString* pchAppKey, System::Text::StringBuilder* pchMimeTypesBuffer, uint unMimeTypesBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationSupportedMimeTypes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationSupportedMimeTypes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey), ::il2cpp_utils::ExtractType(pchMimeTypesBuffer), ::il2cpp_utils::ExtractType(unMimeTypesBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey, pchMimeTypesBuffer, unMimeTypesBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationsThatSupportMimeType
uint OVR::OpenVR::CVRApplications::GetApplicationsThatSupportMimeType(::Il2CppString* pchMimeType, System::Text::StringBuilder* pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationsThatSupportMimeType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationsThatSupportMimeType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchMimeType), ::il2cpp_utils::ExtractType(pchAppKeysThatSupportBuffer), ::il2cpp_utils::ExtractType(unAppKeysThatSupportBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchMimeType, pchAppKeysThatSupportBuffer, unAppKeysThatSupportBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationLaunchArguments
uint OVR::OpenVR::CVRApplications::GetApplicationLaunchArguments(uint unHandle, System::Text::StringBuilder* pchArgs, uint unArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationLaunchArguments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationLaunchArguments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(pchArgs), ::il2cpp_utils::ExtractType(unArgs)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unHandle, pchArgs, unArgs);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetStartingApplication
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::GetStartingApplication(System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetStartingApplication");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStartingApplication", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKeyBuffer), ::il2cpp_utils::ExtractType(unAppKeyBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetTransitionState
OVR::OpenVR::EVRApplicationTransitionState OVR::OpenVR::CVRApplications::GetTransitionState() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetTransitionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTransitionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationTransitionState, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.PerformApplicationPrelaunchCheck
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::PerformApplicationPrelaunchCheck(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::PerformApplicationPrelaunchCheck");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PerformApplicationPrelaunchCheck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchAppKey)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetApplicationsTransitionStateNameFromEnum
::Il2CppString* OVR::OpenVR::CVRApplications::GetApplicationsTransitionStateNameFromEnum(OVR::OpenVR::EVRApplicationTransitionState state) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetApplicationsTransitionStateNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetApplicationsTransitionStateNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, state);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.IsQuitUserPromptRequested
bool OVR::OpenVR::CVRApplications::IsQuitUserPromptRequested() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::IsQuitUserPromptRequested");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsQuitUserPromptRequested", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.LaunchInternalProcess
OVR::OpenVR::EVRApplicationError OVR::OpenVR::CVRApplications::LaunchInternalProcess(::Il2CppString* pchBinaryPath, ::Il2CppString* pchArguments, ::Il2CppString* pchWorkingDirectory) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::LaunchInternalProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LaunchInternalProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchBinaryPath), ::il2cpp_utils::ExtractType(pchArguments), ::il2cpp_utils::ExtractType(pchWorkingDirectory)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchBinaryPath, pchArguments, pchWorkingDirectory);
}
// Autogenerated method: OVR.OpenVR.CVRApplications.GetCurrentSceneProcessId
uint OVR::OpenVR::CVRApplications::GetCurrentSceneProcessId() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRApplications::GetCurrentSceneProcessId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentSceneProcessId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVR.OpenVR.CVRChaperone
#include "OVR/OpenVR/CVRChaperone.hpp"
// Including type: OVR.OpenVR.ChaperoneCalibrationState
#include "OVR/OpenVR/ChaperoneCalibrationState.hpp"
// Including type: OVR.OpenVR.HmdQuad_t
#include "OVR/OpenVR/HmdQuad_t.hpp"
// Including type: OVR.OpenVR.HmdColor_t
#include "OVR/OpenVR/HmdColor_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRChaperone.GetCalibrationState
OVR::OpenVR::ChaperoneCalibrationState OVR::OpenVR::CVRChaperone::GetCalibrationState() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::GetCalibrationState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCalibrationState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::ChaperoneCalibrationState, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.GetPlayAreaSize
bool OVR::OpenVR::CVRChaperone::GetPlayAreaSize(float& pSizeX, float& pSizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::GetPlayAreaSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayAreaSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSizeX), ::il2cpp_utils::ExtractType(pSizeZ)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pSizeX, pSizeZ);
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.GetPlayAreaRect
bool OVR::OpenVR::CVRChaperone::GetPlayAreaRect(OVR::OpenVR::HmdQuad_t& rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::GetPlayAreaRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlayAreaRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rect)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, rect);
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.ReloadInfo
void OVR::OpenVR::CVRChaperone::ReloadInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::ReloadInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.SetSceneColor
void OVR::OpenVR::CVRChaperone::SetSceneColor(OVR::OpenVR::HmdColor_t color) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::SetSceneColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSceneColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.GetBoundsColor
void OVR::OpenVR::CVRChaperone::GetBoundsColor(OVR::OpenVR::HmdColor_t& pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, OVR::OpenVR::HmdColor_t& pOutputCameraColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::GetBoundsColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoundsColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutputColorArray), ::il2cpp_utils::ExtractType(nNumOutputColors), ::il2cpp_utils::ExtractType(flCollisionBoundsFadeDistance), ::il2cpp_utils::ExtractType(pOutputCameraColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pOutputColorArray, nNumOutputColors, flCollisionBoundsFadeDistance, pOutputCameraColor);
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.AreBoundsVisible
bool OVR::OpenVR::CVRChaperone::AreBoundsVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::AreBoundsVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AreBoundsVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.ForceBoundsVisible
void OVR::OpenVR::CVRChaperone::ForceBoundsVisible(bool bForce) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperone::ForceBoundsVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceBoundsVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bForce)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bForce);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRChaperoneSetup
#include "OVR/OpenVR/CVRChaperoneSetup.hpp"
// Including type: OVR.OpenVR.EChaperoneConfigFile
#include "OVR/OpenVR/EChaperoneConfigFile.hpp"
// Including type: OVR.OpenVR.HmdMatrix34_t
#include "OVR/OpenVR/HmdMatrix34_t.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.CommitWorkingCopy
bool OVR::OpenVR::CVRChaperoneSetup::CommitWorkingCopy(OVR::OpenVR::EChaperoneConfigFile configFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::CommitWorkingCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CommitWorkingCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(configFile)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, configFile);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.RevertWorkingCopy
void OVR::OpenVR::CVRChaperoneSetup::RevertWorkingCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::RevertWorkingCopy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RevertWorkingCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetWorkingPlayAreaSize
bool OVR::OpenVR::CVRChaperoneSetup::GetWorkingPlayAreaSize(float& pSizeX, float& pSizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetWorkingPlayAreaSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingPlayAreaSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSizeX), ::il2cpp_utils::ExtractType(pSizeZ)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pSizeX, pSizeZ);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetWorkingPlayAreaRect
bool OVR::OpenVR::CVRChaperoneSetup::GetWorkingPlayAreaRect(OVR::OpenVR::HmdQuad_t& rect) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetWorkingPlayAreaRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingPlayAreaRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rect)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, rect);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetWorkingCollisionBoundsInfo
bool OVR::OpenVR::CVRChaperoneSetup::GetWorkingCollisionBoundsInfo(::Array<OVR::OpenVR::HmdQuad_t>*& pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetWorkingCollisionBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingCollisionBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::HmdQuad_t>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetLiveCollisionBoundsInfo
bool OVR::OpenVR::CVRChaperoneSetup::GetLiveCollisionBoundsInfo(::Array<OVR::OpenVR::HmdQuad_t>*& pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetLiveCollisionBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLiveCollisionBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::HmdQuad_t>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetWorkingSeatedZeroPoseToRawTrackingPose
bool OVR::OpenVR::CVRChaperoneSetup::GetWorkingSeatedZeroPoseToRawTrackingPose(OVR::OpenVR::HmdMatrix34_t& pmatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetWorkingSeatedZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pmatSeatedZeroPoseToRawTrackingPose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pmatSeatedZeroPoseToRawTrackingPose);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetWorkingStandingZeroPoseToRawTrackingPose
bool OVR::OpenVR::CVRChaperoneSetup::GetWorkingStandingZeroPoseToRawTrackingPose(OVR::OpenVR::HmdMatrix34_t& pmatStandingZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetWorkingStandingZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWorkingStandingZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pmatStandingZeroPoseToRawTrackingPose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pmatStandingZeroPoseToRawTrackingPose);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.SetWorkingPlayAreaSize
void OVR::OpenVR::CVRChaperoneSetup::SetWorkingPlayAreaSize(float sizeX, float sizeZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::SetWorkingPlayAreaSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingPlayAreaSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sizeX), ::il2cpp_utils::ExtractType(sizeZ)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sizeX, sizeZ);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.SetWorkingCollisionBoundsInfo
void OVR::OpenVR::CVRChaperoneSetup::SetWorkingCollisionBoundsInfo(::Array<OVR::OpenVR::HmdQuad_t>* pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::SetWorkingCollisionBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingCollisionBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pQuadsBuffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.SetWorkingSeatedZeroPoseToRawTrackingPose
void OVR::OpenVR::CVRChaperoneSetup::SetWorkingSeatedZeroPoseToRawTrackingPose(OVR::OpenVR::HmdMatrix34_t& pMatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::SetWorkingSeatedZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pMatSeatedZeroPoseToRawTrackingPose)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pMatSeatedZeroPoseToRawTrackingPose);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.SetWorkingStandingZeroPoseToRawTrackingPose
void OVR::OpenVR::CVRChaperoneSetup::SetWorkingStandingZeroPoseToRawTrackingPose(OVR::OpenVR::HmdMatrix34_t& pMatStandingZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::SetWorkingStandingZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingStandingZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pMatStandingZeroPoseToRawTrackingPose)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pMatStandingZeroPoseToRawTrackingPose);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.ReloadFromDisk
void OVR::OpenVR::CVRChaperoneSetup::ReloadFromDisk(OVR::OpenVR::EChaperoneConfigFile configFile) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::ReloadFromDisk");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReloadFromDisk", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(configFile)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, configFile);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetLiveSeatedZeroPoseToRawTrackingPose
bool OVR::OpenVR::CVRChaperoneSetup::GetLiveSeatedZeroPoseToRawTrackingPose(OVR::OpenVR::HmdMatrix34_t& pmatSeatedZeroPoseToRawTrackingPose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetLiveSeatedZeroPoseToRawTrackingPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLiveSeatedZeroPoseToRawTrackingPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pmatSeatedZeroPoseToRawTrackingPose)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pmatSeatedZeroPoseToRawTrackingPose);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.SetWorkingCollisionBoundsTagsInfo
void OVR::OpenVR::CVRChaperoneSetup::SetWorkingCollisionBoundsTagsInfo(::Array<uint8_t>* pTagsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::SetWorkingCollisionBoundsTagsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingCollisionBoundsTagsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTagsBuffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pTagsBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetLiveCollisionBoundsTagsInfo
bool OVR::OpenVR::CVRChaperoneSetup::GetLiveCollisionBoundsTagsInfo(::Array<uint8_t>*& pTagsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetLiveCollisionBoundsTagsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLiveCollisionBoundsTagsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pTagsBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.SetWorkingPhysicalBoundsInfo
bool OVR::OpenVR::CVRChaperoneSetup::SetWorkingPhysicalBoundsInfo(::Array<OVR::OpenVR::HmdQuad_t>* pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::SetWorkingPhysicalBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetWorkingPhysicalBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pQuadsBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.GetLivePhysicalBoundsInfo
bool OVR::OpenVR::CVRChaperoneSetup::GetLivePhysicalBoundsInfo(::Array<OVR::OpenVR::HmdQuad_t>*& pQuadsBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::GetLivePhysicalBoundsInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLivePhysicalBoundsInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<OVR::OpenVR::HmdQuad_t>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pQuadsBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.ExportLiveToBuffer
bool OVR::OpenVR::CVRChaperoneSetup::ExportLiveToBuffer(System::Text::StringBuilder* pBuffer, uint& pnBufferLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::ExportLiveToBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ExportLiveToBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pBuffer), ::il2cpp_utils::ExtractType(pnBufferLength)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pBuffer, pnBufferLength);
}
// Autogenerated method: OVR.OpenVR.CVRChaperoneSetup.ImportFromBufferToWorking
bool OVR::OpenVR::CVRChaperoneSetup::ImportFromBufferToWorking(::Il2CppString* pBuffer, uint nImportFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRChaperoneSetup::ImportFromBufferToWorking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ImportFromBufferToWorking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pBuffer), ::il2cpp_utils::ExtractType(nImportFlags)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pBuffer, nImportFlags);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRCompositor
#include "OVR/OpenVR/CVRCompositor.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.EVRCompositorError
#include "OVR/OpenVR/EVRCompositorError.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.VRTextureBounds_t
#include "OVR/OpenVR/VRTextureBounds_t.hpp"
// Including type: OVR.OpenVR.EVRSubmitFlags
#include "OVR/OpenVR/EVRSubmitFlags.hpp"
// Including type: OVR.OpenVR.Compositor_FrameTiming
#include "OVR/OpenVR/Compositor_FrameTiming.hpp"
// Including type: OVR.OpenVR.Compositor_CumulativeStats
#include "OVR/OpenVR/Compositor_CumulativeStats.hpp"
// Including type: OVR.OpenVR.HmdColor_t
#include "OVR/OpenVR/HmdColor_t.hpp"
// Including type: OVR.OpenVR.EVRCompositorTimingMode
#include "OVR/OpenVR/EVRCompositorTimingMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRCompositor.SetTrackingSpace
void OVR::OpenVR::CVRCompositor::SetTrackingSpace(OVR::OpenVR::ETrackingUniverseOrigin eOrigin) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::SetTrackingSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTrackingSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eOrigin)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eOrigin);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetTrackingSpace
OVR::OpenVR::ETrackingUniverseOrigin OVR::OpenVR::CVRCompositor::GetTrackingSpace() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetTrackingSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTrackingSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::ETrackingUniverseOrigin, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.WaitGetPoses
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::WaitGetPoses(::Array<OVR::OpenVR::TrackedDevicePose_t>* pRenderPoseArray, ::Array<OVR::OpenVR::TrackedDevicePose_t>* pGamePoseArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::WaitGetPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WaitGetPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderPoseArray), ::il2cpp_utils::ExtractType(pGamePoseArray)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method, pRenderPoseArray, pGamePoseArray);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetLastPoses
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::GetLastPoses(::Array<OVR::OpenVR::TrackedDevicePose_t>* pRenderPoseArray, ::Array<OVR::OpenVR::TrackedDevicePose_t>* pGamePoseArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetLastPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderPoseArray), ::il2cpp_utils::ExtractType(pGamePoseArray)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method, pRenderPoseArray, pGamePoseArray);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetLastPoseForTrackedDeviceIndex
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, OVR::OpenVR::TrackedDevicePose_t& pOutputPose, OVR::OpenVR::TrackedDevicePose_t& pOutputGamePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetLastPoseForTrackedDeviceIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastPoseForTrackedDeviceIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(pOutputPose), ::il2cpp_utils::ExtractType(pOutputGamePose)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method, unDeviceIndex, pOutputPose, pOutputGamePose);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.Submit
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::Submit(OVR::OpenVR::EVREye eEye, OVR::OpenVR::Texture_t& pTexture, OVR::OpenVR::VRTextureBounds_t& pBounds, OVR::OpenVR::EVRSubmitFlags nSubmitFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::Submit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Submit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pTexture), ::il2cpp_utils::ExtractType(pBounds), ::il2cpp_utils::ExtractType(nSubmitFlags)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method, eEye, pTexture, pBounds, nSubmitFlags);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ClearLastSubmittedFrame
void OVR::OpenVR::CVRCompositor::ClearLastSubmittedFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ClearLastSubmittedFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearLastSubmittedFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.PostPresentHandoff
void OVR::OpenVR::CVRCompositor::PostPresentHandoff() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::PostPresentHandoff");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PostPresentHandoff", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetFrameTiming
bool OVR::OpenVR::CVRCompositor::GetFrameTiming(OVR::OpenVR::Compositor_FrameTiming& pTiming, uint unFramesAgo) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetFrameTiming");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFrameTiming", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTiming), ::il2cpp_utils::ExtractType(unFramesAgo)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pTiming, unFramesAgo);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetFrameTimings
uint OVR::OpenVR::CVRCompositor::GetFrameTimings(OVR::OpenVR::Compositor_FrameTiming& pTiming, uint nFrames) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetFrameTimings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFrameTimings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTiming), ::il2cpp_utils::ExtractType(nFrames)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pTiming, nFrames);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetFrameTimeRemaining
float OVR::OpenVR::CVRCompositor::GetFrameTimeRemaining() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetFrameTimeRemaining");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFrameTimeRemaining", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetCumulativeStats
void OVR::OpenVR::CVRCompositor::GetCumulativeStats(OVR::OpenVR::Compositor_CumulativeStats& pStats, uint nStatsSizeInBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetCumulativeStats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCumulativeStats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pStats), ::il2cpp_utils::ExtractType(nStatsSizeInBytes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pStats, nStatsSizeInBytes);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.FadeToColor
void OVR::OpenVR::CVRCompositor::FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::FadeToColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeToColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fSeconds), ::il2cpp_utils::ExtractType(fRed), ::il2cpp_utils::ExtractType(fGreen), ::il2cpp_utils::ExtractType(fBlue), ::il2cpp_utils::ExtractType(fAlpha), ::il2cpp_utils::ExtractType(bBackground)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fSeconds, fRed, fGreen, fBlue, fAlpha, bBackground);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetCurrentFadeColor
OVR::OpenVR::HmdColor_t OVR::OpenVR::CVRCompositor::GetCurrentFadeColor(bool bBackground) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetCurrentFadeColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentFadeColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bBackground)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdColor_t, false>(this, ___internal__method, bBackground);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.FadeGrid
void OVR::OpenVR::CVRCompositor::FadeGrid(float fSeconds, bool bFadeIn) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::FadeGrid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeGrid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fSeconds), ::il2cpp_utils::ExtractType(bFadeIn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fSeconds, bFadeIn);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetCurrentGridAlpha
float OVR::OpenVR::CVRCompositor::GetCurrentGridAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetCurrentGridAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentGridAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.SetSkyboxOverride
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::SetSkyboxOverride(::Array<OVR::OpenVR::Texture_t>* pTextures) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::SetSkyboxOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSkyboxOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTextures)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method, pTextures);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ClearSkyboxOverride
void OVR::OpenVR::CVRCompositor::ClearSkyboxOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ClearSkyboxOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSkyboxOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.CompositorBringToFront
void OVR::OpenVR::CVRCompositor::CompositorBringToFront() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::CompositorBringToFront");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorBringToFront", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.CompositorGoToBack
void OVR::OpenVR::CVRCompositor::CompositorGoToBack() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::CompositorGoToBack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorGoToBack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.CompositorQuit
void OVR::OpenVR::CVRCompositor::CompositorQuit() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::CompositorQuit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorQuit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.IsFullscreen
bool OVR::OpenVR::CVRCompositor::IsFullscreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::IsFullscreen");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsFullscreen", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetCurrentSceneFocusProcess
uint OVR::OpenVR::CVRCompositor::GetCurrentSceneFocusProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetCurrentSceneFocusProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCurrentSceneFocusProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetLastFrameRenderer
uint OVR::OpenVR::CVRCompositor::GetLastFrameRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetLastFrameRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastFrameRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.CanRenderScene
bool OVR::OpenVR::CVRCompositor::CanRenderScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::CanRenderScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanRenderScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ShowMirrorWindow
void OVR::OpenVR::CVRCompositor::ShowMirrorWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ShowMirrorWindow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowMirrorWindow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.HideMirrorWindow
void OVR::OpenVR::CVRCompositor::HideMirrorWindow() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::HideMirrorWindow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideMirrorWindow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.IsMirrorWindowVisible
bool OVR::OpenVR::CVRCompositor::IsMirrorWindowVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::IsMirrorWindowVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMirrorWindowVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.CompositorDumpImages
void OVR::OpenVR::CVRCompositor::CompositorDumpImages() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::CompositorDumpImages");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompositorDumpImages", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ShouldAppRenderWithLowResources
bool OVR::OpenVR::CVRCompositor::ShouldAppRenderWithLowResources() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ShouldAppRenderWithLowResources");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShouldAppRenderWithLowResources", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ForceInterleavedReprojectionOn
void OVR::OpenVR::CVRCompositor::ForceInterleavedReprojectionOn(bool bOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ForceInterleavedReprojectionOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceInterleavedReprojectionOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bOverride)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bOverride);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ForceReconnectProcess
void OVR::OpenVR::CVRCompositor::ForceReconnectProcess() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ForceReconnectProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceReconnectProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.SuspendRendering
void OVR::OpenVR::CVRCompositor::SuspendRendering(bool bSuspend) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::SuspendRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SuspendRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bSuspend)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bSuspend);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetMirrorTextureD3D11
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::GetMirrorTextureD3D11(OVR::OpenVR::EVREye eEye, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetMirrorTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMirrorTextureD3D11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pD3D11DeviceOrResource), ::il2cpp_utils::ExtractType(ppD3D11ShaderResourceView)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method, eEye, pD3D11DeviceOrResource, ppD3D11ShaderResourceView);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ReleaseMirrorTextureD3D11
void OVR::OpenVR::CVRCompositor::ReleaseMirrorTextureD3D11(System::IntPtr pD3D11ShaderResourceView) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ReleaseMirrorTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseMirrorTextureD3D11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pD3D11ShaderResourceView)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pD3D11ShaderResourceView);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetMirrorTextureGL
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::GetMirrorTextureGL(OVR::OpenVR::EVREye eEye, uint& pglTextureId, System::IntPtr pglSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetMirrorTextureGL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMirrorTextureGL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eEye), ::il2cpp_utils::ExtractType(pglTextureId), ::il2cpp_utils::ExtractType(pglSharedTextureHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method, eEye, pglTextureId, pglSharedTextureHandle);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ReleaseSharedGLTexture
bool OVR::OpenVR::CVRCompositor::ReleaseSharedGLTexture(uint glTextureId, System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::ReleaseSharedGLTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseSharedGLTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glTextureId), ::il2cpp_utils::ExtractType(glSharedTextureHandle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, glTextureId, glSharedTextureHandle);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.LockGLSharedTextureForAccess
void OVR::OpenVR::CVRCompositor::LockGLSharedTextureForAccess(System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::LockGLSharedTextureForAccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LockGLSharedTextureForAccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glSharedTextureHandle)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, glSharedTextureHandle);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.UnlockGLSharedTextureForAccess
void OVR::OpenVR::CVRCompositor::UnlockGLSharedTextureForAccess(System::IntPtr glSharedTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::UnlockGLSharedTextureForAccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnlockGLSharedTextureForAccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glSharedTextureHandle)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, glSharedTextureHandle);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetVulkanInstanceExtensionsRequired
uint OVR::OpenVR::CVRCompositor::GetVulkanInstanceExtensionsRequired(System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetVulkanInstanceExtensionsRequired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVulkanInstanceExtensionsRequired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchValue, unBufferSize);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetVulkanDeviceExtensionsRequired
uint OVR::OpenVR::CVRCompositor::GetVulkanDeviceExtensionsRequired(System::IntPtr pPhysicalDevice, System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::GetVulkanDeviceExtensionsRequired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVulkanDeviceExtensionsRequired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pPhysicalDevice), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pPhysicalDevice, pchValue, unBufferSize);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.SetExplicitTimingMode
void OVR::OpenVR::CVRCompositor::SetExplicitTimingMode(OVR::OpenVR::EVRCompositorTimingMode eTimingMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::SetExplicitTimingMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetExplicitTimingMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eTimingMode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eTimingMode);
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.SubmitExplicitTimingData
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::SubmitExplicitTimingData() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRCompositor::SubmitExplicitTimingData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubmitExplicitTimingData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRCompositorError, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVROverlay
#include "OVR/OpenVR/CVROverlay.hpp"
// Including type: OVR.OpenVR.CVROverlay/_PollNextOverlayEventPacked
#include "OVR/OpenVR/CVROverlay__PollNextOverlayEventPacked.hpp"
// Including type: OVR.OpenVR.CVROverlay/PollNextOverlayEventUnion
#include "OVR/OpenVR/CVROverlay_PollNextOverlayEventUnion.hpp"
// Including type: OVR.OpenVR.EVROverlayError
#include "OVR/OpenVR/EVROverlayError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.VROverlayFlags
#include "OVR/OpenVR/VROverlayFlags.hpp"
// Including type: OVR.OpenVR.EColorSpace
#include "OVR/OpenVR/EColorSpace.hpp"
// Including type: OVR.OpenVR.VRTextureBounds_t
#include "OVR/OpenVR/VRTextureBounds_t.hpp"
// Including type: OVR.OpenVR.HmdColor_t
#include "OVR/OpenVR/HmdColor_t.hpp"
// Including type: OVR.OpenVR.VROverlayTransformType
#include "OVR/OpenVR/VROverlayTransformType.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.HmdMatrix34_t
#include "OVR/OpenVR/HmdMatrix34_t.hpp"
// Including type: OVR.OpenVR.HmdVector2_t
#include "OVR/OpenVR/HmdVector2_t.hpp"
// Including type: OVR.OpenVR.VREvent_t
#include "OVR/OpenVR/VREvent_t.hpp"
// Including type: OVR.OpenVR.VROverlayInputMethod
#include "OVR/OpenVR/VROverlayInputMethod.hpp"
// Including type: OVR.OpenVR.VROverlayIntersectionParams_t
#include "OVR/OpenVR/VROverlayIntersectionParams_t.hpp"
// Including type: OVR.OpenVR.VROverlayIntersectionResults_t
#include "OVR/OpenVR/VROverlayIntersectionResults_t.hpp"
// Including type: OVR.OpenVR.EOverlayDirection
#include "OVR/OpenVR/EOverlayDirection.hpp"
// Including type: OVR.OpenVR.EDualAnalogWhich
#include "OVR/OpenVR/EDualAnalogWhich.hpp"
// Including type: OVR.OpenVR.Texture_t
#include "OVR/OpenVR/Texture_t.hpp"
// Including type: OVR.OpenVR.ETextureType
#include "OVR/OpenVR/ETextureType.hpp"
// Including type: OVR.OpenVR.HmdRect2_t
#include "OVR/OpenVR/HmdRect2_t.hpp"
// Including type: OVR.OpenVR.VROverlayIntersectionMaskPrimitive_t
#include "OVR/OpenVR/VROverlayIntersectionMaskPrimitive_t.hpp"
// Including type: OVR.OpenVR.VRMessageOverlayResponse
#include "OVR/OpenVR/VRMessageOverlayResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVROverlay.FindOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::FindOverlay(::Il2CppString* pchOverlayKey, uint64_t& pOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::FindOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayKey), ::il2cpp_utils::ExtractType(pOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.CreateOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::CreateOverlay(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayName, uint64_t& pOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::CreateOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayKey), ::il2cpp_utils::ExtractType(pchOverlayName), ::il2cpp_utils::ExtractType(pOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayName, pOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.DestroyOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::DestroyOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::DestroyOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetHighQualityOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetHighQualityOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetHighQualityOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighQualityOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetHighQualityOverlay
uint64_t OVR::OpenVR::CVROverlay::GetHighQualityOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetHighQualityOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHighQualityOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayKey
uint OVR::OpenVR::CVROverlay::GetOverlayKey(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, OVR::OpenVR::EVROverlayError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, pError);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayName
uint OVR::OpenVR::CVROverlay::GetOverlayName(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, OVR::OpenVR::EVROverlayError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, pError);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayName
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayName(uint64_t ulOverlayHandle, ::Il2CppString* pchName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchName)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchName);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayImageData
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayImageData(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unBufferSize, uint& punWidth, uint& punHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayImageData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayImageData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvBuffer), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(punWidth), ::il2cpp_utils::ExtractType(punHeight)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unBufferSize, punWidth, punHeight);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayErrorNameFromEnum
::Il2CppString* OVR::OpenVR::CVROverlay::GetOverlayErrorNameFromEnum(OVR::OpenVR::EVROverlayError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayRenderingPid
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayRenderingPid(uint64_t ulOverlayHandle, uint unPID) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayRenderingPid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayRenderingPid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unPID)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unPID);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayRenderingPid
uint OVR::OpenVR::CVROverlay::GetOverlayRenderingPid(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayRenderingPid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayRenderingPid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayFlag
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayFlag(uint64_t ulOverlayHandle, OVR::OpenVR::VROverlayFlags eOverlayFlag, bool bEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayFlag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayFlag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eOverlayFlag), ::il2cpp_utils::ExtractType(bEnabled)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, bEnabled);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayFlag
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayFlag(uint64_t ulOverlayHandle, OVR::OpenVR::VROverlayFlags eOverlayFlag, bool& pbEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayFlag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayFlag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eOverlayFlag), ::il2cpp_utils::ExtractType(pbEnabled)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eOverlayFlag, pbEnabled);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayColor
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayColor(uint64_t ulOverlayHandle, float fRed, float fGreen, float fBlue) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fRed), ::il2cpp_utils::ExtractType(fGreen), ::il2cpp_utils::ExtractType(fBlue)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fRed, fGreen, fBlue);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayColor
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayColor(uint64_t ulOverlayHandle, float& pfRed, float& pfGreen, float& pfBlue) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfRed), ::il2cpp_utils::ExtractType(pfGreen), ::il2cpp_utils::ExtractType(pfBlue)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfRed, pfGreen, pfBlue);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayAlpha
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayAlpha(uint64_t ulOverlayHandle, float fAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fAlpha)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fAlpha);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayAlpha
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayAlpha(uint64_t ulOverlayHandle, float& pfAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfAlpha)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfAlpha);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTexelAspect
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTexelAspect(uint64_t ulOverlayHandle, float fTexelAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTexelAspect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTexelAspect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fTexelAspect)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fTexelAspect);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTexelAspect
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTexelAspect(uint64_t ulOverlayHandle, float& pfTexelAspect) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTexelAspect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTexelAspect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfTexelAspect)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfTexelAspect);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlaySortOrder
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlaySortOrder(uint64_t ulOverlayHandle, uint unSortOrder) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlaySortOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlaySortOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unSortOrder)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unSortOrder);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlaySortOrder
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlaySortOrder(uint64_t ulOverlayHandle, uint& punSortOrder) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlaySortOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlaySortOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punSortOrder)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punSortOrder);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayWidthInMeters
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayWidthInMeters(uint64_t ulOverlayHandle, float fWidthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayWidthInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayWidthInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fWidthInMeters)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fWidthInMeters);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayWidthInMeters
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayWidthInMeters(uint64_t ulOverlayHandle, float& pfWidthInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayWidthInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayWidthInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfWidthInMeters)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfWidthInMeters);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayAutoCurveDistanceRangeInMeters
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayAutoCurveDistanceRangeInMeters(uint64_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayAutoCurveDistanceRangeInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayAutoCurveDistanceRangeInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(fMinDistanceInMeters), ::il2cpp_utils::ExtractType(fMaxDistanceInMeters)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, fMinDistanceInMeters, fMaxDistanceInMeters);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayAutoCurveDistanceRangeInMeters
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayAutoCurveDistanceRangeInMeters(uint64_t ulOverlayHandle, float& pfMinDistanceInMeters, float& pfMaxDistanceInMeters) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayAutoCurveDistanceRangeInMeters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayAutoCurveDistanceRangeInMeters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pfMinDistanceInMeters), ::il2cpp_utils::ExtractType(pfMaxDistanceInMeters)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pfMinDistanceInMeters, pfMaxDistanceInMeters);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTextureColorSpace
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTextureColorSpace(uint64_t ulOverlayHandle, OVR::OpenVR::EColorSpace eTextureColorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTextureColorSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTextureColorSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eTextureColorSpace)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTextureColorSpace);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTextureColorSpace
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTextureColorSpace(uint64_t ulOverlayHandle, OVR::OpenVR::EColorSpace& peTextureColorSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTextureColorSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTextureColorSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peTextureColorSpace)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peTextureColorSpace);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTextureBounds
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTextureBounds(uint64_t ulOverlayHandle, OVR::OpenVR::VRTextureBounds_t& pOverlayTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTextureBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTextureBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pOverlayTextureBounds)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pOverlayTextureBounds);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTextureBounds
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTextureBounds(uint64_t ulOverlayHandle, OVR::OpenVR::VRTextureBounds_t& pOverlayTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTextureBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTextureBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pOverlayTextureBounds)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pOverlayTextureBounds);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayRenderModel
uint OVR::OpenVR::CVROverlay::GetOverlayRenderModel(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, OVR::OpenVR::HmdColor_t& pColor, OVR::OpenVR::EVROverlayError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize), ::il2cpp_utils::ExtractType(pColor), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, ulOverlayHandle, pchValue, unBufferSize, pColor, pError);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayRenderModel
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayRenderModel(uint64_t ulOverlayHandle, ::Il2CppString* pchRenderModel, OVR::OpenVR::HmdColor_t& pColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchRenderModel), ::il2cpp_utils::ExtractType(pColor)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchRenderModel, pColor);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTransformType
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTransformType(uint64_t ulOverlayHandle, OVR::OpenVR::VROverlayTransformType& peTransformType) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTransformType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peTransformType)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peTransformType);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTransformAbsolute
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTransformAbsolute(uint64_t ulOverlayHandle, OVR::OpenVR::ETrackingUniverseOrigin eTrackingOrigin, OVR::OpenVR::HmdMatrix34_t& pmatTrackingOriginToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTransformAbsolute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformAbsolute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eTrackingOrigin), ::il2cpp_utils::ExtractType(pmatTrackingOriginToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, pmatTrackingOriginToOverlayTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTransformAbsolute
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTransformAbsolute(uint64_t ulOverlayHandle, OVR::OpenVR::ETrackingUniverseOrigin& peTrackingOrigin, OVR::OpenVR::HmdMatrix34_t& pmatTrackingOriginToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTransformAbsolute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformAbsolute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peTrackingOrigin), ::il2cpp_utils::ExtractType(pmatTrackingOriginToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peTrackingOrigin, pmatTrackingOriginToOverlayTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTransformTrackedDeviceRelative
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTransformTrackedDeviceRelative(uint64_t ulOverlayHandle, uint unTrackedDevice, OVR::OpenVR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTransformTrackedDeviceRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformTrackedDeviceRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unTrackedDevice), ::il2cpp_utils::ExtractType(pmatTrackedDeviceToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unTrackedDevice, pmatTrackedDeviceToOverlayTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTransformTrackedDeviceRelative
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTransformTrackedDeviceRelative(uint64_t ulOverlayHandle, uint& punTrackedDevice, OVR::OpenVR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTransformTrackedDeviceRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformTrackedDeviceRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punTrackedDevice), ::il2cpp_utils::ExtractType(pmatTrackedDeviceToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punTrackedDevice, pmatTrackedDeviceToOverlayTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTransformTrackedDeviceComponent
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTransformTrackedDeviceComponent(uint64_t ulOverlayHandle, uint unDeviceIndex, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTransformTrackedDeviceComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformTrackedDeviceComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(pchComponentName)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unDeviceIndex, pchComponentName);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTransformTrackedDeviceComponent
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTransformTrackedDeviceComponent(uint64_t ulOverlayHandle, uint& punDeviceIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTransformTrackedDeviceComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformTrackedDeviceComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punDeviceIndex), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(unComponentNameSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punDeviceIndex, pchComponentName, unComponentNameSize);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTransformOverlayRelative
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTransformOverlayRelative(uint64_t ulOverlayHandle, uint64_t& ulOverlayHandleParent, OVR::OpenVR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTransformOverlayRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTransformOverlayRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulOverlayHandleParent), ::il2cpp_utils::ExtractType(pmatParentOverlayToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTransformOverlayRelative
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTransformOverlayRelative(uint64_t ulOverlayHandle, uint64_t ulOverlayHandleParent, OVR::OpenVR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTransformOverlayRelative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTransformOverlayRelative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulOverlayHandleParent), ::il2cpp_utils::ExtractType(pmatParentOverlayToOverlayTransform)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ShowOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::ShowOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ShowOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.HideOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::HideOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::HideOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.IsOverlayVisible
bool OVR::OpenVR::CVROverlay::IsOverlayVisible(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::IsOverlayVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsOverlayVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetTransformForOverlayCoordinates
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetTransformForOverlayCoordinates(uint64_t ulOverlayHandle, OVR::OpenVR::ETrackingUniverseOrigin eTrackingOrigin, OVR::OpenVR::HmdVector2_t coordinatesInOverlay, OVR::OpenVR::HmdMatrix34_t& pmatTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetTransformForOverlayCoordinates");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTransformForOverlayCoordinates", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eTrackingOrigin), ::il2cpp_utils::ExtractType(coordinatesInOverlay), ::il2cpp_utils::ExtractType(pmatTransform)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, pmatTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.PollNextOverlayEvent
bool OVR::OpenVR::CVROverlay::PollNextOverlayEvent(uint64_t ulOverlayHandle, OVR::OpenVR::VREvent_t& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::PollNextOverlayEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PollNextOverlayEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, pEvent, uncbVREvent);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayInputMethod
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayInputMethod(uint64_t ulOverlayHandle, OVR::OpenVR::VROverlayInputMethod& peInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayInputMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayInputMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(peInputMethod)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, peInputMethod);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayInputMethod
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayInputMethod(uint64_t ulOverlayHandle, OVR::OpenVR::VROverlayInputMethod eInputMethod) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayInputMethod");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayInputMethod", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eInputMethod)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMethod);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayMouseScale
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayMouseScale(uint64_t ulOverlayHandle, OVR::OpenVR::HmdVector2_t& pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayMouseScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayMouseScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvecMouseScale)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvecMouseScale);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayMouseScale
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayMouseScale(uint64_t ulOverlayHandle, OVR::OpenVR::HmdVector2_t& pvecMouseScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayMouseScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayMouseScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvecMouseScale)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvecMouseScale);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ComputeOverlayIntersection
bool OVR::OpenVR::CVROverlay::ComputeOverlayIntersection(uint64_t ulOverlayHandle, OVR::OpenVR::VROverlayIntersectionParams_t& pParams, OVR::OpenVR::VROverlayIntersectionResults_t& pResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ComputeOverlayIntersection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeOverlayIntersection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pParams), ::il2cpp_utils::ExtractType(pResults)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, pParams, pResults);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.IsHoverTargetOverlay
bool OVR::OpenVR::CVROverlay::IsHoverTargetOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::IsHoverTargetOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsHoverTargetOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetGamepadFocusOverlay
uint64_t OVR::OpenVR::CVROverlay::GetGamepadFocusOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetGamepadFocusOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGamepadFocusOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetGamepadFocusOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetGamepadFocusOverlay(uint64_t ulNewFocusOverlay) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetGamepadFocusOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGamepadFocusOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulNewFocusOverlay)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulNewFocusOverlay);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayNeighbor
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayNeighbor(OVR::OpenVR::EOverlayDirection eDirection, uint64_t ulFrom, uint64_t ulTo) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayNeighbor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayNeighbor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eDirection), ::il2cpp_utils::ExtractType(ulFrom), ::il2cpp_utils::ExtractType(ulTo)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom, ulTo);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.MoveGamepadFocusToNeighbor
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::MoveGamepadFocusToNeighbor(OVR::OpenVR::EOverlayDirection eDirection, uint64_t ulFrom) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::MoveGamepadFocusToNeighbor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveGamepadFocusToNeighbor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eDirection), ::il2cpp_utils::ExtractType(ulFrom)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, eDirection, ulFrom);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayDualAnalogTransform
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayDualAnalogTransform(uint64_t ulOverlay, OVR::OpenVR::EDualAnalogWhich eWhich, System::IntPtr vCenter, float fRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayDualAnalogTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayDualAnalogTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlay), ::il2cpp_utils::ExtractType(eWhich), ::il2cpp_utils::ExtractType(vCenter), ::il2cpp_utils::ExtractType(fRadius)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, vCenter, fRadius);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayDualAnalogTransform
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayDualAnalogTransform(uint64_t ulOverlay, OVR::OpenVR::EDualAnalogWhich eWhich, OVR::OpenVR::HmdVector2_t& pvCenter, float& pfRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayDualAnalogTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayDualAnalogTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlay), ::il2cpp_utils::ExtractType(eWhich), ::il2cpp_utils::ExtractType(pvCenter), ::il2cpp_utils::ExtractType(pfRadius)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlay, eWhich, pvCenter, pfRadius);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayTexture
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayTexture(uint64_t ulOverlayHandle, OVR::OpenVR::Texture_t& pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pTexture)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pTexture);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ClearOverlayTexture
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::ClearOverlayTexture(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ClearOverlayTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearOverlayTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayRaw
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayRaw(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayRaw");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayRaw", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pvBuffer), ::il2cpp_utils::ExtractType(unWidth), ::il2cpp_utils::ExtractType(unHeight), ::il2cpp_utils::ExtractType(unDepth)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayFromFile
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayFromFile(uint64_t ulOverlayHandle, ::Il2CppString* pchFilePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayFromFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayFromFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pchFilePath)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pchFilePath);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTexture
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTexture(uint64_t ulOverlayHandle, System::IntPtr& pNativeTextureHandle, System::IntPtr pNativeTextureRef, uint& pWidth, uint& pHeight, uint& pNativeFormat, OVR::OpenVR::ETextureType& pAPIType, OVR::OpenVR::EColorSpace& pColorSpace, OVR::OpenVR::VRTextureBounds_t& pTextureBounds) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pNativeTextureHandle), ::il2cpp_utils::ExtractType(pNativeTextureRef), ::il2cpp_utils::ExtractType(pWidth), ::il2cpp_utils::ExtractType(pHeight), ::il2cpp_utils::ExtractType(pNativeFormat), ::il2cpp_utils::ExtractType(pAPIType), ::il2cpp_utils::ExtractType(pColorSpace), ::il2cpp_utils::ExtractType(pTextureBounds)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ReleaseNativeOverlayHandle
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::ReleaseNativeOverlayHandle(uint64_t ulOverlayHandle, System::IntPtr pNativeTextureHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ReleaseNativeOverlayHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseNativeOverlayHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pNativeTextureHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pNativeTextureHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayTextureSize
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayTextureSize(uint64_t ulOverlayHandle, uint& pWidth, uint& pHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayTextureSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayTextureSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pWidth), ::il2cpp_utils::ExtractType(pHeight)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pWidth, pHeight);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.CreateDashboardOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::CreateDashboardOverlay(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayFriendlyName, uint64_t& pMainHandle, uint64_t& pThumbnailHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::CreateDashboardOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateDashboardOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayKey), ::il2cpp_utils::ExtractType(pchOverlayFriendlyName), ::il2cpp_utils::ExtractType(pMainHandle), ::il2cpp_utils::ExtractType(pThumbnailHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.IsDashboardVisible
bool OVR::OpenVR::CVROverlay::IsDashboardVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::IsDashboardVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDashboardVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.IsActiveDashboardOverlay
bool OVR::OpenVR::CVROverlay::IsActiveDashboardOverlay(uint64_t ulOverlayHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::IsActiveDashboardOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsActiveDashboardOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetDashboardOverlaySceneProcess
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetDashboardOverlaySceneProcess(uint64_t ulOverlayHandle, uint unProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetDashboardOverlaySceneProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDashboardOverlaySceneProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(unProcessId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, unProcessId);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetDashboardOverlaySceneProcess
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetDashboardOverlaySceneProcess(uint64_t ulOverlayHandle, uint& punProcessId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetDashboardOverlaySceneProcess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDashboardOverlaySceneProcess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(punProcessId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, punProcessId);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ShowDashboard
void OVR::OpenVR::CVROverlay::ShowDashboard(::Il2CppString* pchOverlayToShow) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ShowDashboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowDashboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchOverlayToShow)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchOverlayToShow);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetPrimaryDashboardDevice
uint OVR::OpenVR::CVROverlay::GetPrimaryDashboardDevice() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetPrimaryDashboardDevice");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPrimaryDashboardDevice", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ShowKeyboard
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::ShowKeyboard(int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ShowKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eInputMode), ::il2cpp_utils::ExtractType(eLineInputMode), ::il2cpp_utils::ExtractType(pchDescription), ::il2cpp_utils::ExtractType(unCharMax), ::il2cpp_utils::ExtractType(pchExistingText), ::il2cpp_utils::ExtractType(bUseMinimalMode), ::il2cpp_utils::ExtractType(uUserValue)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ShowKeyboardForOverlay
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::ShowKeyboardForOverlay(uint64_t ulOverlayHandle, int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ShowKeyboardForOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowKeyboardForOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(eInputMode), ::il2cpp_utils::ExtractType(eLineInputMode), ::il2cpp_utils::ExtractType(pchDescription), ::il2cpp_utils::ExtractType(unCharMax), ::il2cpp_utils::ExtractType(pchExistingText), ::il2cpp_utils::ExtractType(bUseMinimalMode), ::il2cpp_utils::ExtractType(uUserValue)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetKeyboardText
uint OVR::OpenVR::CVROverlay::GetKeyboardText(System::Text::StringBuilder* pchText, uint cchText) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetKeyboardText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetKeyboardText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(cchText)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchText, cchText);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.HideKeyboard
void OVR::OpenVR::CVROverlay::HideKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::HideKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetKeyboardTransformAbsolute
void OVR::OpenVR::CVROverlay::SetKeyboardTransformAbsolute(OVR::OpenVR::ETrackingUniverseOrigin eTrackingOrigin, OVR::OpenVR::HmdMatrix34_t& pmatTrackingOriginToKeyboardTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetKeyboardTransformAbsolute");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKeyboardTransformAbsolute", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eTrackingOrigin), ::il2cpp_utils::ExtractType(pmatTrackingOriginToKeyboardTransform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eTrackingOrigin, pmatTrackingOriginToKeyboardTransform);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetKeyboardPositionForOverlay
void OVR::OpenVR::CVROverlay::SetKeyboardPositionForOverlay(uint64_t ulOverlayHandle, OVR::OpenVR::HmdRect2_t avoidRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetKeyboardPositionForOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKeyboardPositionForOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(avoidRect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ulOverlayHandle, avoidRect);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.SetOverlayIntersectionMask
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::SetOverlayIntersectionMask(uint64_t ulOverlayHandle, OVR::OpenVR::VROverlayIntersectionMaskPrimitive_t& pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::SetOverlayIntersectionMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverlayIntersectionMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pMaskPrimitives), ::il2cpp_utils::ExtractType(unNumMaskPrimitives), ::il2cpp_utils::ExtractType(unPrimitiveSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pMaskPrimitives, unNumMaskPrimitives, unPrimitiveSize);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.GetOverlayFlags
OVR::OpenVR::EVROverlayError OVR::OpenVR::CVROverlay::GetOverlayFlags(uint64_t ulOverlayHandle, uint& pFlags) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::GetOverlayFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOverlayFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pFlags)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVROverlayError, false>(this, ___internal__method, ulOverlayHandle, pFlags);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.ShowMessageOverlay
OVR::OpenVR::VRMessageOverlayResponse OVR::OpenVR::CVROverlay::ShowMessageOverlay(::Il2CppString* pchText, ::Il2CppString* pchCaption, ::Il2CppString* pchButton0Text, ::Il2CppString* pchButton1Text, ::Il2CppString* pchButton2Text, ::Il2CppString* pchButton3Text) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::ShowMessageOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowMessageOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(pchCaption), ::il2cpp_utils::ExtractType(pchButton0Text), ::il2cpp_utils::ExtractType(pchButton1Text), ::il2cpp_utils::ExtractType(pchButton2Text), ::il2cpp_utils::ExtractType(pchButton3Text)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::VRMessageOverlayResponse, false>(this, ___internal__method, pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text);
}
// Autogenerated method: OVR.OpenVR.CVROverlay.CloseMessageOverlay
void OVR::OpenVR::CVROverlay::CloseMessageOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::CloseMessageOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CloseMessageOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVROverlay/_PollNextOverlayEventPacked
#include "OVR/OpenVR/CVROverlay__PollNextOverlayEventPacked.hpp"
// Including type: OVR.OpenVR.VREvent_t_Packed
#include "OVR/OpenVR/VREvent_t_Packed.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVROverlay/_PollNextOverlayEventPacked.Invoke
bool OVR::OpenVR::CVROverlay::_PollNextOverlayEventPacked::Invoke(uint64_t ulOverlayHandle, OVR::OpenVR::VREvent_t_Packed& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::_PollNextOverlayEventPacked::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ulOverlayHandle, pEvent, uncbVREvent);
}
// Autogenerated method: OVR.OpenVR.CVROverlay/_PollNextOverlayEventPacked.BeginInvoke
System::IAsyncResult* OVR::OpenVR::CVROverlay::_PollNextOverlayEventPacked::BeginInvoke(uint64_t ulOverlayHandle, OVR::OpenVR::VREvent_t_Packed& pEvent, uint uncbVREvent, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::_PollNextOverlayEventPacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(uncbVREvent), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, ulOverlayHandle, pEvent, uncbVREvent, callback, object);
}
// Autogenerated method: OVR.OpenVR.CVROverlay/_PollNextOverlayEventPacked.EndInvoke
bool OVR::OpenVR::CVROverlay::_PollNextOverlayEventPacked::EndInvoke(OVR::OpenVR::VREvent_t_Packed& pEvent, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVROverlay::_PollNextOverlayEventPacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pEvent), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRRenderModels
#include "OVR/OpenVR/CVRRenderModels.hpp"
// Including type: OVR.OpenVR.CVRRenderModels/_GetComponentStatePacked
#include "OVR/OpenVR/CVRRenderModels__GetComponentStatePacked.hpp"
// Including type: OVR.OpenVR.CVRRenderModels/GetComponentStateUnion
#include "OVR/OpenVR/CVRRenderModels_GetComponentStateUnion.hpp"
// Including type: OVR.OpenVR.EVRRenderModelError
#include "OVR/OpenVR/EVRRenderModelError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.RenderModel_ControllerMode_State_t
#include "OVR/OpenVR/RenderModel_ControllerMode_State_t.hpp"
// Including type: OVR.OpenVR.RenderModel_ComponentState_t
#include "OVR/OpenVR/RenderModel_ComponentState_t.hpp"
// Including type: OVR.OpenVR.VRControllerState_t
#include "OVR/OpenVR/VRControllerState_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRRenderModels.LoadRenderModel_Async
OVR::OpenVR::EVRRenderModelError OVR::OpenVR::CVRRenderModels::LoadRenderModel_Async(::Il2CppString* pchRenderModelName, System::IntPtr& ppRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::LoadRenderModel_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadRenderModel_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(ppRenderModel)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRRenderModelError, false>(this, ___internal__method, pchRenderModelName, ppRenderModel);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.FreeRenderModel
void OVR::OpenVR::CVRRenderModels::FreeRenderModel(System::IntPtr pRenderModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::FreeRenderModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreeRenderModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pRenderModel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pRenderModel);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.LoadTexture_Async
OVR::OpenVR::EVRRenderModelError OVR::OpenVR::CVRRenderModels::LoadTexture_Async(int textureId, System::IntPtr& ppTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::LoadTexture_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadTexture_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textureId), ::il2cpp_utils::ExtractType(ppTexture)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRRenderModelError, false>(this, ___internal__method, textureId, ppTexture);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.FreeTexture
void OVR::OpenVR::CVRRenderModels::FreeTexture(System::IntPtr pTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::FreeTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreeTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pTexture)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pTexture);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.LoadTextureD3D11_Async
OVR::OpenVR::EVRRenderModelError OVR::OpenVR::CVRRenderModels::LoadTextureD3D11_Async(int textureId, System::IntPtr pD3D11Device, System::IntPtr& ppD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::LoadTextureD3D11_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadTextureD3D11_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textureId), ::il2cpp_utils::ExtractType(pD3D11Device), ::il2cpp_utils::ExtractType(ppD3D11Texture2D)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRRenderModelError, false>(this, ___internal__method, textureId, pD3D11Device, ppD3D11Texture2D);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.LoadIntoTextureD3D11_Async
OVR::OpenVR::EVRRenderModelError OVR::OpenVR::CVRRenderModels::LoadIntoTextureD3D11_Async(int textureId, System::IntPtr pDstTexture) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::LoadIntoTextureD3D11_Async");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadIntoTextureD3D11_Async", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textureId), ::il2cpp_utils::ExtractType(pDstTexture)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRRenderModelError, false>(this, ___internal__method, textureId, pDstTexture);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.FreeTextureD3D11
void OVR::OpenVR::CVRRenderModels::FreeTextureD3D11(System::IntPtr pD3D11Texture2D) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::FreeTextureD3D11");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FreeTextureD3D11", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pD3D11Texture2D)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pD3D11Texture2D);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetRenderModelName
uint OVR::OpenVR::CVRRenderModels::GetRenderModelName(uint unRenderModelIndex, System::Text::StringBuilder* pchRenderModelName, uint unRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetRenderModelName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unRenderModelIndex), ::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(unRenderModelNameLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unRenderModelIndex, pchRenderModelName, unRenderModelNameLen);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetRenderModelCount
uint OVR::OpenVR::CVRRenderModels::GetRenderModelCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetRenderModelCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetComponentCount
uint OVR::OpenVR::CVRRenderModels::GetComponentCount(::Il2CppString* pchRenderModelName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetComponentCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetComponentName
uint OVR::OpenVR::CVRRenderModels::GetComponentName(::Il2CppString* pchRenderModelName, uint unComponentIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetComponentName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(unComponentIndex), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(unComponentNameLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetComponentButtonMask
uint64_t OVR::OpenVR::CVRRenderModels::GetComponentButtonMask(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetComponentButtonMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentButtonMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetComponentRenderModelName
uint OVR::OpenVR::CVRRenderModels::GetComponentRenderModelName(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::Text::StringBuilder* pchComponentRenderModelName, uint unComponentRenderModelNameLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetComponentRenderModelName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentRenderModelName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pchComponentRenderModelName), ::il2cpp_utils::ExtractType(unComponentRenderModelNameLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetComponentStateForDevicePath
bool OVR::OpenVR::CVRRenderModels::GetComponentStateForDevicePath(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, uint64_t devicePath, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetComponentStateForDevicePath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentStateForDevicePath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(devicePath), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, devicePath, pState, pComponentState);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetComponentState
bool OVR::OpenVR::CVRRenderModels::GetComponentState(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, OVR::OpenVR::VRControllerState_t& pControllerState, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetComponentState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.RenderModelHasComponent
bool OVR::OpenVR::CVRRenderModels::RenderModelHasComponent(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::RenderModelHasComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RenderModelHasComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetRenderModelThumbnailURL
uint OVR::OpenVR::CVRRenderModels::GetRenderModelThumbnailURL(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, OVR::OpenVR::EVRRenderModelError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetRenderModelThumbnailURL");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelThumbnailURL", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchThumbnailURL), ::il2cpp_utils::ExtractType(unThumbnailURLLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetRenderModelOriginalPath
uint OVR::OpenVR::CVRRenderModels::GetRenderModelOriginalPath(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, OVR::OpenVR::EVRRenderModelError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetRenderModelOriginalPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelOriginalPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchOriginalPath), ::il2cpp_utils::ExtractType(unOriginalPathLen), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels.GetRenderModelErrorNameFromEnum
::Il2CppString* OVR::OpenVR::CVRRenderModels::GetRenderModelErrorNameFromEnum(OVR::OpenVR::EVRRenderModelError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::GetRenderModelErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderModelErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, error);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRRenderModels/_GetComponentStatePacked
#include "OVR/OpenVR/CVRRenderModels__GetComponentStatePacked.hpp"
// Including type: OVR.OpenVR.VRControllerState_t_Packed
#include "OVR/OpenVR/VRControllerState_t_Packed.hpp"
// Including type: OVR.OpenVR.RenderModel_ControllerMode_State_t
#include "OVR/OpenVR/RenderModel_ControllerMode_State_t.hpp"
// Including type: OVR.OpenVR.RenderModel_ComponentState_t
#include "OVR/OpenVR/RenderModel_ComponentState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRRenderModels/_GetComponentStatePacked.Invoke
bool OVR::OpenVR::CVRRenderModels::_GetComponentStatePacked::Invoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, OVR::OpenVR::VRControllerState_t_Packed& pControllerState, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::_GetComponentStatePacked::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels/_GetComponentStatePacked.BeginInvoke
System::IAsyncResult* OVR::OpenVR::CVRRenderModels::_GetComponentStatePacked::BeginInvoke(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, OVR::OpenVR::VRControllerState_t_Packed& pControllerState, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::_GetComponentStatePacked::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchRenderModelName), ::il2cpp_utils::ExtractType(pchComponentName), ::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState, callback, object);
}
// Autogenerated method: OVR.OpenVR.CVRRenderModels/_GetComponentStatePacked.EndInvoke
bool OVR::OpenVR::CVRRenderModels::_GetComponentStatePacked::EndInvoke(OVR::OpenVR::VRControllerState_t_Packed& pControllerState, OVR::OpenVR::RenderModel_ControllerMode_State_t& pState, OVR::OpenVR::RenderModel_ComponentState_t& pComponentState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRRenderModels::_GetComponentStatePacked::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pControllerState), ::il2cpp_utils::ExtractType(pState), ::il2cpp_utils::ExtractType(pComponentState), ::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, pState, pComponentState, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRNotifications
#include "OVR/OpenVR/CVRNotifications.hpp"
// Including type: OVR.OpenVR.EVRNotificationError
#include "OVR/OpenVR/EVRNotificationError.hpp"
// Including type: OVR.OpenVR.EVRNotificationType
#include "OVR/OpenVR/EVRNotificationType.hpp"
// Including type: OVR.OpenVR.EVRNotificationStyle
#include "OVR/OpenVR/EVRNotificationStyle.hpp"
// Including type: OVR.OpenVR.NotificationBitmap_t
#include "OVR/OpenVR/NotificationBitmap_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRNotifications.CreateNotification
OVR::OpenVR::EVRNotificationError OVR::OpenVR::CVRNotifications::CreateNotification(uint64_t ulOverlayHandle, uint64_t ulUserValue, OVR::OpenVR::EVRNotificationType type, ::Il2CppString* pchText, OVR::OpenVR::EVRNotificationStyle style, OVR::OpenVR::NotificationBitmap_t& pImage, uint& pNotificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRNotifications::CreateNotification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateNotification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulOverlayHandle), ::il2cpp_utils::ExtractType(ulUserValue), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchText), ::il2cpp_utils::ExtractType(style), ::il2cpp_utils::ExtractType(pImage), ::il2cpp_utils::ExtractType(pNotificationId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRNotificationError, false>(this, ___internal__method, ulOverlayHandle, ulUserValue, type, pchText, style, pImage, pNotificationId);
}
// Autogenerated method: OVR.OpenVR.CVRNotifications.RemoveNotification
OVR::OpenVR::EVRNotificationError OVR::OpenVR::CVRNotifications::RemoveNotification(uint notificationId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRNotifications::RemoveNotification");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveNotification", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(notificationId)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRNotificationError, false>(this, ___internal__method, notificationId);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRSettings
#include "OVR/OpenVR/CVRSettings.hpp"
// Including type: OVR.OpenVR.EVRSettingsError
#include "OVR/OpenVR/EVRSettingsError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRSettings.GetSettingsErrorNameFromEnum
::Il2CppString* OVR::OpenVR::CVRSettings::GetSettingsErrorNameFromEnum(OVR::OpenVR::EVRSettingsError eError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::GetSettingsErrorNameFromEnum");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSettingsErrorNameFromEnum", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eError)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, eError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.Sync
bool OVR::OpenVR::CVRSettings::Sync(bool bForce, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::Sync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Sync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bForce), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bForce, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.SetBool
void OVR::OpenVR::CVRSettings::SetBool(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, bool bValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::SetBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(bValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, bValue, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.SetInt32
void OVR::OpenVR::CVRSettings::SetInt32(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, int nValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::SetInt32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInt32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(nValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, nValue, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.SetFloat
void OVR::OpenVR::CVRSettings::SetFloat(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, float flValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::SetFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(flValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, flValue, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.SetString
void OVR::OpenVR::CVRSettings::SetString(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, ::Il2CppString* pchValue, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::SetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.GetBool
bool OVR::OpenVR::CVRSettings::GetBool(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::GetBool");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.GetInt32
int OVR::OpenVR::CVRSettings::GetInt32(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::GetInt32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInt32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.GetFloat
float OVR::OpenVR::CVRSettings::GetFloat(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::GetFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.GetString
void OVR::OpenVR::CVRSettings::GetString(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, System::Text::StringBuilder* pchValue, uint unValueLen, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::GetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unValueLen), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, pchValue, unValueLen, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.RemoveSection
void OVR::OpenVR::CVRSettings::RemoveSection(::Il2CppString* pchSection, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::RemoveSection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, peError);
}
// Autogenerated method: OVR.OpenVR.CVRSettings.RemoveKeyInSection
void OVR::OpenVR::CVRSettings::RemoveKeyInSection(::Il2CppString* pchSection, ::Il2CppString* pchSettingsKey, OVR::OpenVR::EVRSettingsError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSettings::RemoveKeyInSection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKeyInSection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchSection), ::il2cpp_utils::ExtractType(pchSettingsKey), ::il2cpp_utils::ExtractType(peError)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pchSection, pchSettingsKey, peError);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRScreenshots
#include "OVR/OpenVR/CVRScreenshots.hpp"
// Including type: OVR.OpenVR.EVRScreenshotError
#include "OVR/OpenVR/EVRScreenshotError.hpp"
// Including type: OVR.OpenVR.EVRScreenshotPropertyFilenames
#include "OVR/OpenVR/EVRScreenshotPropertyFilenames.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRScreenshots.RequestScreenshot
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::CVRScreenshots::RequestScreenshot(uint& pOutScreenshotHandle, OVR::OpenVR::EVRScreenshotType type, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRScreenshots::RequestScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RequestScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, type, pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: OVR.OpenVR.CVRScreenshots.HookScreenshot
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::CVRScreenshots::HookScreenshot(::Array<OVR::OpenVR::EVRScreenshotType>* pSupportedTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRScreenshots::HookScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HookScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSupportedTypes)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pSupportedTypes);
}
// Autogenerated method: OVR.OpenVR.CVRScreenshots.GetScreenshotPropertyType
OVR::OpenVR::EVRScreenshotType OVR::OpenVR::CVRScreenshots::GetScreenshotPropertyType(uint screenshotHandle, OVR::OpenVR::EVRScreenshotError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRScreenshots::GetScreenshotPropertyType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScreenshotPropertyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotType, false>(this, ___internal__method, screenshotHandle, pError);
}
// Autogenerated method: OVR.OpenVR.CVRScreenshots.GetScreenshotPropertyFilename
uint OVR::OpenVR::CVRScreenshots::GetScreenshotPropertyFilename(uint screenshotHandle, OVR::OpenVR::EVRScreenshotPropertyFilenames filenameType, System::Text::StringBuilder* pchFilename, uint cchFilename, OVR::OpenVR::EVRScreenshotError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRScreenshots::GetScreenshotPropertyFilename");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScreenshotPropertyFilename", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(filenameType), ::il2cpp_utils::ExtractType(pchFilename), ::il2cpp_utils::ExtractType(cchFilename), ::il2cpp_utils::ExtractType(pError)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, screenshotHandle, filenameType, pchFilename, cchFilename, pError);
}
// Autogenerated method: OVR.OpenVR.CVRScreenshots.UpdateScreenshotProgress
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::CVRScreenshots::UpdateScreenshotProgress(uint screenshotHandle, float flProgress) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRScreenshots::UpdateScreenshotProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateScreenshotProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(flProgress)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, flProgress);
}
// Autogenerated method: OVR.OpenVR.CVRScreenshots.TakeStereoScreenshot
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::CVRScreenshots::TakeStereoScreenshot(uint& pOutScreenshotHandle, ::Il2CppString* pchPreviewFilename, ::Il2CppString* pchVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRScreenshots::TakeStereoScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TakeStereoScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pOutScreenshotHandle), ::il2cpp_utils::ExtractType(pchPreviewFilename), ::il2cpp_utils::ExtractType(pchVRFilename)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, pOutScreenshotHandle, pchPreviewFilename, pchVRFilename);
}
// Autogenerated method: OVR.OpenVR.CVRScreenshots.SubmitScreenshot
OVR::OpenVR::EVRScreenshotError OVR::OpenVR::CVRScreenshots::SubmitScreenshot(uint screenshotHandle, OVR::OpenVR::EVRScreenshotType type, ::Il2CppString* pchSourcePreviewFilename, ::Il2CppString* pchSourceVRFilename) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRScreenshots::SubmitScreenshot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SubmitScreenshot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(screenshotHandle), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(pchSourcePreviewFilename), ::il2cpp_utils::ExtractType(pchSourceVRFilename)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRScreenshotError, false>(this, ___internal__method, screenshotHandle, type, pchSourcePreviewFilename, pchSourceVRFilename);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRResources
#include "OVR/OpenVR/CVRResources.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRResources.LoadSharedResource
uint OVR::OpenVR::CVRResources::LoadSharedResource(::Il2CppString* pchResourceName, ::Il2CppString* pchBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRResources::LoadSharedResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadSharedResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchBuffer), ::il2cpp_utils::ExtractType(unBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchResourceName, pchBuffer, unBufferLen);
}
// Autogenerated method: OVR.OpenVR.CVRResources.GetResourceFullPath
uint OVR::OpenVR::CVRResources::GetResourceFullPath(::Il2CppString* pchResourceName, ::Il2CppString* pchResourceTypeDirectory, System::Text::StringBuilder* pchPathBuffer, uint unBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRResources::GetResourceFullPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetResourceFullPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchResourceName), ::il2cpp_utils::ExtractType(pchResourceTypeDirectory), ::il2cpp_utils::ExtractType(pchPathBuffer), ::il2cpp_utils::ExtractType(unBufferLen)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pchResourceName, pchResourceTypeDirectory, pchPathBuffer, unBufferLen);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRDriverManager
#include "OVR/OpenVR/CVRDriverManager.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRDriverManager.GetDriverCount
uint OVR::OpenVR::CVRDriverManager::GetDriverCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRDriverManager::GetDriverCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDriverCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.CVRDriverManager.GetDriverName
uint OVR::OpenVR::CVRDriverManager::GetDriverName(uint nDriver, System::Text::StringBuilder* pchValue, uint unBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRDriverManager::GetDriverName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDriverName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nDriver), ::il2cpp_utils::ExtractType(pchValue), ::il2cpp_utils::ExtractType(unBufferSize)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, nDriver, pchValue, unBufferSize);
}
// Autogenerated method: OVR.OpenVR.CVRDriverManager.GetDriverHandle
uint64_t OVR::OpenVR::CVRDriverManager::GetDriverHandle(::Il2CppString* pchDriverName) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRDriverManager::GetDriverHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDriverHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchDriverName)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pchDriverName);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRInput
#include "OVR/OpenVR/CVRInput.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.InputDigitalActionData_t
#include "OVR/OpenVR/InputDigitalActionData_t.hpp"
// Including type: OVR.OpenVR.InputAnalogActionData_t
#include "OVR/OpenVR/InputAnalogActionData_t.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.InputPoseActionData_t
#include "OVR/OpenVR/InputPoseActionData_t.hpp"
// Including type: OVR.OpenVR.InputSkeletalActionData_t
#include "OVR/OpenVR/InputSkeletalActionData_t.hpp"
// Including type: OVR.OpenVR.EVRSkeletalTransformSpace
#include "OVR/OpenVR/EVRSkeletalTransformSpace.hpp"
// Including type: OVR.OpenVR.EVRSkeletalMotionRange
#include "OVR/OpenVR/EVRSkeletalMotionRange.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.InputOriginInfo_t
#include "OVR/OpenVR/InputOriginInfo_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRInput.SetActionManifestPath
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::SetActionManifestPath(::Il2CppString* pchActionManifestPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::SetActionManifestPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActionManifestPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionManifestPath)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchActionManifestPath);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetActionSetHandle
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetActionSetHandle(::Il2CppString* pchActionSetName, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetActionSetHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetActionSetHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionSetName), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchActionSetName, pHandle);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetActionHandle
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetActionHandle(::Il2CppString* pchActionName, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetActionHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetActionHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchActionName), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchActionName, pHandle);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetInputSourceHandle
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetInputSourceHandle(::Il2CppString* pchInputSourcePath, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetInputSourceHandle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInputSourceHandle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInputSourcePath), ::il2cpp_utils::ExtractType(pHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchInputSourcePath, pHandle);
}
// Autogenerated method: OVR.OpenVR.CVRInput.UpdateActionState
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::UpdateActionState(::Array<OVR::OpenVR::VRActiveActionSet_t>* pSets, uint unSizeOfVRSelectedActionSet_t) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::UpdateActionState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateActionState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSets), ::il2cpp_utils::ExtractType(unSizeOfVRSelectedActionSet_t)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetDigitalActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetDigitalActionData(uint64_t action, OVR::OpenVR::InputDigitalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetDigitalActionData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDigitalActionData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetAnalogActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetAnalogActionData(uint64_t action, OVR::OpenVR::InputAnalogActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetAnalogActionData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAnalogActionData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetPoseActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetPoseActionData(uint64_t action, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, OVR::OpenVR::InputPoseActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetPoseActionData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoseActionData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(fPredictedSecondsFromNow), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, eOrigin, fPredictedSecondsFromNow, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetSkeletalActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetSkeletalActionData(uint64_t action, OVR::OpenVR::InputSkeletalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetSkeletalActionData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkeletalActionData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(pActionData), ::il2cpp_utils::ExtractType(unActionDataSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetSkeletalBoneData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetSkeletalBoneData(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, ::Array<OVR::OpenVR::VRBoneTransform_t>* pTransformArray, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetSkeletalBoneData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkeletalBoneData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eTransformSpace), ::il2cpp_utils::ExtractType(eMotionRange), ::il2cpp_utils::ExtractType(pTransformArray), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, pTransformArray, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetSkeletalBoneDataCompressed
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetSkeletalBoneDataCompressed(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, System::IntPtr pvCompressedData, uint unCompressedSize, uint& punRequiredCompressedSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetSkeletalBoneDataCompressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSkeletalBoneDataCompressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(eTransformSpace), ::il2cpp_utils::ExtractType(eMotionRange), ::il2cpp_utils::ExtractType(pvCompressedData), ::il2cpp_utils::ExtractType(unCompressedSize), ::il2cpp_utils::ExtractType(punRequiredCompressedSize), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, pvCompressedData, unCompressedSize, punRequiredCompressedSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.DecompressSkeletalBoneData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::DecompressSkeletalBoneData(System::IntPtr pvCompressedBuffer, uint unCompressedBufferSize, OVR::OpenVR::EVRSkeletalTransformSpace& peTransformSpace, ::Array<OVR::OpenVR::VRBoneTransform_t>* pTransformArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::DecompressSkeletalBoneData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DecompressSkeletalBoneData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pvCompressedBuffer), ::il2cpp_utils::ExtractType(unCompressedBufferSize), ::il2cpp_utils::ExtractType(peTransformSpace), ::il2cpp_utils::ExtractType(pTransformArray)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pvCompressedBuffer, unCompressedBufferSize, peTransformSpace, pTransformArray);
}
// Autogenerated method: OVR.OpenVR.CVRInput.TriggerHapticVibrationAction
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::TriggerHapticVibrationAction(uint64_t action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::TriggerHapticVibrationAction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerHapticVibrationAction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(action), ::il2cpp_utils::ExtractType(fStartSecondsFromNow), ::il2cpp_utils::ExtractType(fDurationSeconds), ::il2cpp_utils::ExtractType(fFrequency), ::il2cpp_utils::ExtractType(fAmplitude), ::il2cpp_utils::ExtractType(ulRestrictToDevice)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, fStartSecondsFromNow, fDurationSeconds, fFrequency, fAmplitude, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetActionOrigins
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetActionOrigins(uint64_t actionSetHandle, uint64_t digitalActionHandle, ::Array<uint64_t>* originsOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetActionOrigins");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetActionOrigins", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actionSetHandle), ::il2cpp_utils::ExtractType(digitalActionHandle), ::il2cpp_utils::ExtractType(originsOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, actionSetHandle, digitalActionHandle, originsOut);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetOriginLocalizedName
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetOriginLocalizedName(uint64_t origin, System::Text::StringBuilder* pchNameArray, uint unNameArraySize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetOriginLocalizedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOriginLocalizedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(pchNameArray), ::il2cpp_utils::ExtractType(unNameArraySize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, origin, pchNameArray, unNameArraySize);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetOriginTrackedDeviceInfo
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetOriginTrackedDeviceInfo(uint64_t origin, OVR::OpenVR::InputOriginInfo_t& pOriginInfo, uint unOriginInfoSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::GetOriginTrackedDeviceInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOriginTrackedDeviceInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(pOriginInfo), ::il2cpp_utils::ExtractType(unOriginInfoSize)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, origin, pOriginInfo, unOriginInfoSize);
}
// Autogenerated method: OVR.OpenVR.CVRInput.ShowActionOrigins
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::ShowActionOrigins(uint64_t actionSetHandle, uint64_t ulActionHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::ShowActionOrigins");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowActionOrigins", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(actionSetHandle), ::il2cpp_utils::ExtractType(ulActionHandle)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, actionSetHandle, ulActionHandle);
}
// Autogenerated method: OVR.OpenVR.CVRInput.ShowBindingsForActionSet
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::ShowBindingsForActionSet(::Array<OVR::OpenVR::VRActiveActionSet_t>* pSets, uint unSizeOfVRSelectedActionSet_t, uint64_t originToHighlight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRInput::ShowBindingsForActionSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowBindingsForActionSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pSets), ::il2cpp_utils::ExtractType(unSizeOfVRSelectedActionSet_t), ::il2cpp_utils::ExtractType(originToHighlight)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t, originToHighlight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRIOBuffer
#include "OVR/OpenVR/CVRIOBuffer.hpp"
// Including type: OVR.OpenVR.EIOBufferError
#include "OVR/OpenVR/EIOBufferError.hpp"
// Including type: OVR.OpenVR.EIOBufferMode
#include "OVR/OpenVR/EIOBufferMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRIOBuffer.Open
OVR::OpenVR::EIOBufferError OVR::OpenVR::CVRIOBuffer::Open(::Il2CppString* pchPath, OVR::OpenVR::EIOBufferMode mode, uint unElementSize, uint unElements, uint64_t& pulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRIOBuffer::Open");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Open", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchPath), ::il2cpp_utils::ExtractType(mode), ::il2cpp_utils::ExtractType(unElementSize), ::il2cpp_utils::ExtractType(unElements), ::il2cpp_utils::ExtractType(pulBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, pchPath, mode, unElementSize, unElements, pulBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRIOBuffer.Close
OVR::OpenVR::EIOBufferError OVR::OpenVR::CVRIOBuffer::Close(uint64_t ulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRIOBuffer::Close");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Close", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, ulBuffer);
}
// Autogenerated method: OVR.OpenVR.CVRIOBuffer.Read
OVR::OpenVR::EIOBufferError OVR::OpenVR::CVRIOBuffer::Read(uint64_t ulBuffer, System::IntPtr pDst, uint unBytes, uint& punRead) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRIOBuffer::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(pDst), ::il2cpp_utils::ExtractType(unBytes), ::il2cpp_utils::ExtractType(punRead)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, ulBuffer, pDst, unBytes, punRead);
}
// Autogenerated method: OVR.OpenVR.CVRIOBuffer.Write
OVR::OpenVR::EIOBufferError OVR::OpenVR::CVRIOBuffer::Write(uint64_t ulBuffer, System::IntPtr pSrc, uint unBytes) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRIOBuffer::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer), ::il2cpp_utils::ExtractType(pSrc), ::il2cpp_utils::ExtractType(unBytes)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EIOBufferError, false>(this, ___internal__method, ulBuffer, pSrc, unBytes);
}
// Autogenerated method: OVR.OpenVR.CVRIOBuffer.PropertyContainer
uint64_t OVR::OpenVR::CVRIOBuffer::PropertyContainer(uint64_t ulBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRIOBuffer::PropertyContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PropertyContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ulBuffer)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, ulBuffer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRSpatialAnchors
#include "OVR/OpenVR/CVRSpatialAnchors.hpp"
// Including type: OVR.OpenVR.EVRSpatialAnchorError
#include "OVR/OpenVR/EVRSpatialAnchorError.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.SpatialAnchorPose_t
#include "OVR/OpenVR/SpatialAnchorPose_t.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRSpatialAnchors.CreateSpatialAnchorFromDescriptor
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::CVRSpatialAnchors::CreateSpatialAnchorFromDescriptor(::Il2CppString* pchDescriptor, uint& pHandleOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSpatialAnchors::CreateSpatialAnchorFromDescriptor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSpatialAnchorFromDescriptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchDescriptor), ::il2cpp_utils::ExtractType(pHandleOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, pchDescriptor, pHandleOut);
}
// Autogenerated method: OVR.OpenVR.CVRSpatialAnchors.CreateSpatialAnchorFromPose
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::CVRSpatialAnchors::CreateSpatialAnchorFromPose(uint unDeviceIndex, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::SpatialAnchorPose_t& pPose, uint& pHandleOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSpatialAnchors::CreateSpatialAnchorFromPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateSpatialAnchorFromPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unDeviceIndex), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pPose), ::il2cpp_utils::ExtractType(pHandleOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, unDeviceIndex, eOrigin, pPose, pHandleOut);
}
// Autogenerated method: OVR.OpenVR.CVRSpatialAnchors.GetSpatialAnchorPose
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::CVRSpatialAnchors::GetSpatialAnchorPose(uint unHandle, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::SpatialAnchorPose_t& pPoseOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSpatialAnchors::GetSpatialAnchorPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpatialAnchorPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(eOrigin), ::il2cpp_utils::ExtractType(pPoseOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, unHandle, eOrigin, pPoseOut);
}
// Autogenerated method: OVR.OpenVR.CVRSpatialAnchors.GetSpatialAnchorDescriptor
OVR::OpenVR::EVRSpatialAnchorError OVR::OpenVR::CVRSpatialAnchors::GetSpatialAnchorDescriptor(uint unHandle, System::Text::StringBuilder* pchDescriptorOut, uint& punDescriptorBufferLenInOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRSpatialAnchors::GetSpatialAnchorDescriptor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpatialAnchorDescriptor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unHandle), ::il2cpp_utils::ExtractType(pchDescriptorOut), ::il2cpp_utils::ExtractType(punDescriptorBufferLenInOut)})));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRSpatialAnchorError, false>(this, ___internal__method, unHandle, pchDescriptorOut, punDescriptorBufferLenInOut);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.OpenVRInterop
#include "OVR/OpenVR/OpenVRInterop.hpp"
// Including type: OVR.OpenVR.EVRInitError
#include "OVR/OpenVR/EVRInitError.hpp"
// Including type: OVR.OpenVR.EVRApplicationType
#include "OVR/OpenVR/EVRApplicationType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.OpenVRInterop.InitInternal
uint OVR::OpenVR::OpenVRInterop::InitInternal(OVR::OpenVR::EVRInitError& peError, OVR::OpenVR::EVRApplicationType eApplicationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::InitInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "InitInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(eApplicationType)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, peError, eApplicationType);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.InitInternal2
uint OVR::OpenVR::OpenVRInterop::InitInternal2(OVR::OpenVR::EVRInitError& peError, OVR::OpenVR::EVRApplicationType eApplicationType, ::Il2CppString*& pStartupInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::InitInternal2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "InitInternal2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(peError), ::il2cpp_utils::ExtractType(eApplicationType), ::il2cpp_utils::ExtractType(pStartupInfo)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, peError, eApplicationType, pStartupInfo);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.ShutdownInternal
void OVR::OpenVR::OpenVRInterop::ShutdownInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::ShutdownInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "ShutdownInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.IsHmdPresent
bool OVR::OpenVR::OpenVRInterop::IsHmdPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::IsHmdPresent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "IsHmdPresent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.IsRuntimeInstalled
bool OVR::OpenVR::OpenVRInterop::IsRuntimeInstalled() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::IsRuntimeInstalled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "IsRuntimeInstalled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.GetStringForHmdError
System::IntPtr OVR::OpenVR::OpenVRInterop::GetStringForHmdError(OVR::OpenVR::EVRInitError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::GetStringForHmdError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "GetStringForHmdError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(error)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, error);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.GetGenericInterface
System::IntPtr OVR::OpenVR::OpenVRInterop::GetGenericInterface(::Il2CppString*& pchInterfaceVersion, OVR::OpenVR::EVRInitError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::GetGenericInterface");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "GetGenericInterface", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInterfaceVersion), ::il2cpp_utils::ExtractType(peError)})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pchInterfaceVersion, peError);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.IsInterfaceVersionValid
bool OVR::OpenVR::OpenVRInterop::IsInterfaceVersionValid(::Il2CppString*& pchInterfaceVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::IsInterfaceVersionValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "IsInterfaceVersionValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pchInterfaceVersion)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pchInterfaceVersion);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.GetInitToken
uint OVR::OpenVR::OpenVRInterop::GetInitToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::OpenVRInterop::GetInitToken");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "GetInitToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.EVREye Eye_Left
OVR::OpenVR::EVREye OVR::OpenVR::EVREye::_get_Eye_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EVREye::_get_Eye_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::EVREye>("OVR.OpenVR", "EVREye", "Eye_Left"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.EVREye Eye_Left
void OVR::OpenVR::EVREye::_set_Eye_Left(OVR::OpenVR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EVREye::_set_Eye_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "EVREye", "Eye_Left", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.EVREye Eye_Right
OVR::OpenVR::EVREye OVR::OpenVR::EVREye::_get_Eye_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EVREye::_get_Eye_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::EVREye>("OVR.OpenVR", "EVREye", "Eye_Right"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.EVREye Eye_Right
void OVR::OpenVR::EVREye::_set_Eye_Right(OVR::OpenVR::EVREye value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EVREye::_set_Eye_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "EVREye", "Eye_Right", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVR.OpenVR.ETextureType
#include "OVR/OpenVR/ETextureType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType Invalid
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType Invalid
void OVR::OpenVR::ETextureType::_set_Invalid(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType DirectX
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_DirectX() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_DirectX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "DirectX"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType DirectX
void OVR::OpenVR::ETextureType::_set_DirectX(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_DirectX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "DirectX", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType OpenGL
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_OpenGL() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_OpenGL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "OpenGL"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType OpenGL
void OVR::OpenVR::ETextureType::_set_OpenGL(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_OpenGL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "OpenGL", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType Vulkan
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_Vulkan() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_Vulkan");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "Vulkan"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType Vulkan
void OVR::OpenVR::ETextureType::_set_Vulkan(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_Vulkan");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "Vulkan", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType IOSurface
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_IOSurface() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_IOSurface");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "IOSurface"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType IOSurface
void OVR::OpenVR::ETextureType::_set_IOSurface(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_IOSurface");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "IOSurface", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType DirectX12
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_DirectX12() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_DirectX12");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "DirectX12"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType DirectX12
void OVR::OpenVR::ETextureType::_set_DirectX12(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_DirectX12");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "DirectX12", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType DXGISharedHandle
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_DXGISharedHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_DXGISharedHandle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "DXGISharedHandle"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType DXGISharedHandle
void OVR::OpenVR::ETextureType::_set_DXGISharedHandle(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_DXGISharedHandle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "DXGISharedHandle", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETextureType Metal
OVR::OpenVR::ETextureType OVR::OpenVR::ETextureType::_get_Metal() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_get_Metal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETextureType>("OVR.OpenVR", "ETextureType", "Metal"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETextureType Metal
void OVR::OpenVR::ETextureType::_set_Metal(OVR::OpenVR::ETextureType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETextureType::_set_Metal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETextureType", "Metal", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVR.OpenVR.EColorSpace
#include "OVR/OpenVR/EColorSpace.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.EColorSpace Auto
OVR::OpenVR::EColorSpace OVR::OpenVR::EColorSpace::_get_Auto() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EColorSpace::_get_Auto");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::EColorSpace>("OVR.OpenVR", "EColorSpace", "Auto"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.EColorSpace Auto
void OVR::OpenVR::EColorSpace::_set_Auto(OVR::OpenVR::EColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EColorSpace::_set_Auto");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "EColorSpace", "Auto", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.EColorSpace Gamma
OVR::OpenVR::EColorSpace OVR::OpenVR::EColorSpace::_get_Gamma() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EColorSpace::_get_Gamma");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::EColorSpace>("OVR.OpenVR", "EColorSpace", "Gamma"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.EColorSpace Gamma
void OVR::OpenVR::EColorSpace::_set_Gamma(OVR::OpenVR::EColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EColorSpace::_set_Gamma");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "EColorSpace", "Gamma", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.EColorSpace Linear
OVR::OpenVR::EColorSpace OVR::OpenVR::EColorSpace::_get_Linear() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EColorSpace::_get_Linear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::EColorSpace>("OVR.OpenVR", "EColorSpace", "Linear"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.EColorSpace Linear
void OVR::OpenVR::EColorSpace::_set_Linear(OVR::OpenVR::EColorSpace value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::EColorSpace::_set_Linear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "EColorSpace", "Linear", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVR.OpenVR.ETrackingResult
#include "OVR/OpenVR/ETrackingResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETrackingResult Uninitialized
OVR::OpenVR::ETrackingResult OVR::OpenVR::ETrackingResult::_get_Uninitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackingResult::_get_Uninitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETrackingResult>("OVR.OpenVR", "ETrackingResult", "Uninitialized"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETrackingResult Uninitialized
void OVR::OpenVR::ETrackingResult::_set_Uninitialized(OVR::OpenVR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackingResult::_set_Uninitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETrackingResult", "Uninitialized", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETrackingResult Calibrating_InProgress
OVR::OpenVR::ETrackingResult OVR::OpenVR::ETrackingResult::_get_Calibrating_InProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackingResult::_get_Calibrating_InProgress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETrackingResult>("OVR.OpenVR", "ETrackingResult", "Calibrating_InProgress"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETrackingResult Calibrating_InProgress
void OVR::OpenVR::ETrackingResult::_set_Calibrating_InProgress(OVR::OpenVR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackingResult::_set_Calibrating_InProgress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETrackingResult", "Calibrating_InProgress", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETrackingResult Calibrating_OutOfRange
OVR::OpenVR::ETrackingResult OVR::OpenVR::ETrackingResult::_get_Calibrating_OutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackingResult::_get_Calibrating_OutOfRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETrackingResult>("OVR.OpenVR", "ETrackingResult", "Calibrating_OutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETrackingResult Calibrating_OutOfRange
void OVR::OpenVR::ETrackingResult::_set_Calibrating_OutOfRange(OVR::OpenVR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackingResult::_set_Calibrating_OutOfRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETrackingResult", "Calibrating_OutOfRange", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETrackingResult Running_OK
OVR::OpenVR::ETrackingResult OVR::OpenVR::ETrackingResult::_get_Running_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackingResult::_get_Running_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETrackingResult>("OVR.OpenVR", "ETrackingResult", "Running_OK"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETrackingResult Running_OK
void OVR::OpenVR::ETrackingResult::_set_Running_OK(OVR::OpenVR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackingResult::_set_Running_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETrackingResult", "Running_OK", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETrackingResult Running_OutOfRange
OVR::OpenVR::ETrackingResult OVR::OpenVR::ETrackingResult::_get_Running_OutOfRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackingResult::_get_Running_OutOfRange");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETrackingResult>("OVR.OpenVR", "ETrackingResult", "Running_OutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETrackingResult Running_OutOfRange
void OVR::OpenVR::ETrackingResult::_set_Running_OutOfRange(OVR::OpenVR::ETrackingResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackingResult::_set_Running_OutOfRange");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETrackingResult", "Running_OutOfRange", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVR.OpenVR.ETrackedDeviceClass
#include "OVR/OpenVR/ETrackedDeviceClass.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETrackedDeviceClass Invalid
OVR::OpenVR::ETrackedDeviceClass OVR::OpenVR::ETrackedDeviceClass::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackedDeviceClass::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETrackedDeviceClass>("OVR.OpenVR", "ETrackedDeviceClass", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETrackedDeviceClass Invalid
void OVR::OpenVR::ETrackedDeviceClass::_set_Invalid(OVR::OpenVR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackedDeviceClass::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETrackedDeviceClass", "Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETrackedDeviceClass HMD
OVR::OpenVR::ETrackedDeviceClass OVR::OpenVR::ETrackedDeviceClass::_get_HMD() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackedDeviceClass::_get_HMD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETrackedDeviceClass>("OVR.OpenVR", "ETrackedDeviceClass", "HMD"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETrackedDeviceClass HMD
void OVR::OpenVR::ETrackedDeviceClass::_set_HMD(OVR::OpenVR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackedDeviceClass::_set_HMD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETrackedDeviceClass", "HMD", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETrackedDeviceClass Controller
OVR::OpenVR::ETrackedDeviceClass OVR::OpenVR::ETrackedDeviceClass::_get_Controller() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackedDeviceClass::_get_Controller");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETrackedDeviceClass>("OVR.OpenVR", "ETrackedDeviceClass", "Controller"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETrackedDeviceClass Controller
void OVR::OpenVR::ETrackedDeviceClass::_set_Controller(OVR::OpenVR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackedDeviceClass::_set_Controller");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETrackedDeviceClass", "Controller", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETrackedDeviceClass GenericTracker
OVR::OpenVR::ETrackedDeviceClass OVR::OpenVR::ETrackedDeviceClass::_get_GenericTracker() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackedDeviceClass::_get_GenericTracker");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETrackedDeviceClass>("OVR.OpenVR", "ETrackedDeviceClass", "GenericTracker"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETrackedDeviceClass GenericTracker
void OVR::OpenVR::ETrackedDeviceClass::_set_GenericTracker(OVR::OpenVR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackedDeviceClass::_set_GenericTracker");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETrackedDeviceClass", "GenericTracker", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETrackedDeviceClass TrackingReference
OVR::OpenVR::ETrackedDeviceClass OVR::OpenVR::ETrackedDeviceClass::_get_TrackingReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackedDeviceClass::_get_TrackingReference");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETrackedDeviceClass>("OVR.OpenVR", "ETrackedDeviceClass", "TrackingReference"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETrackedDeviceClass TrackingReference
void OVR::OpenVR::ETrackedDeviceClass::_set_TrackingReference(OVR::OpenVR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackedDeviceClass::_set_TrackingReference");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETrackedDeviceClass", "TrackingReference", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETrackedDeviceClass DisplayRedirect
OVR::OpenVR::ETrackedDeviceClass OVR::OpenVR::ETrackedDeviceClass::_get_DisplayRedirect() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackedDeviceClass::_get_DisplayRedirect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETrackedDeviceClass>("OVR.OpenVR", "ETrackedDeviceClass", "DisplayRedirect"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETrackedDeviceClass DisplayRedirect
void OVR::OpenVR::ETrackedDeviceClass::_set_DisplayRedirect(OVR::OpenVR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackedDeviceClass::_set_DisplayRedirect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETrackedDeviceClass", "DisplayRedirect", value));
}
// Autogenerated static field getter
// Get static field: static public OVR.OpenVR.ETrackedDeviceClass Max
OVR::OpenVR::ETrackedDeviceClass OVR::OpenVR::ETrackedDeviceClass::_get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackedDeviceClass::_get_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<OVR::OpenVR::ETrackedDeviceClass>("OVR.OpenVR", "ETrackedDeviceClass", "Max"));
}
// Autogenerated static field setter
// Set static field: static public OVR.OpenVR.ETrackedDeviceClass Max
void OVR::OpenVR::ETrackedDeviceClass::_set_Max(OVR::OpenVR::ETrackedDeviceClass value) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::ETrackedDeviceClass::_set_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("OVR.OpenVR", "ETrackedDeviceClass", "Max", value));
}
