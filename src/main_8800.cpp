// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_Dropdown/DropdownEvent
#include "TMPro/TMP_Dropdown_DropdownEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TMP_Dropdown::DropdownEvent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Dropdown::DropdownEvent::*)()>(&TMP_Dropdown::DropdownEvent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Dropdown::DropdownEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Dropdown::DropdownEvent::*)()>(&TMP_Dropdown::DropdownEvent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Dropdown::DropdownEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_Dropdown/<>c__DisplayClass60_0
#include "TMPro/TMP_Dropdown_--c__DisplayClass60_0.hpp"
// Including type: TMPro.TMP_Dropdown/DropdownItem
#include "TMPro/TMP_Dropdown_DropdownItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_Dropdown/<>c__DisplayClass60_0.<Show>b__0
void TMPro::TMP_Dropdown::$$c__DisplayClass60_0::$Show$b__0(bool x) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Dropdown::$$c__DisplayClass60_0::<Show>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Show>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: TMP_Dropdown::$$c__DisplayClass60_0::$Show$b__0
// Il2CppName: <Show>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Dropdown::$$c__DisplayClass60_0::*)(bool)>(&TMP_Dropdown::$$c__DisplayClass60_0::$Show$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Dropdown::$$c__DisplayClass60_0*), "<Show>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Dropdown::$$c__DisplayClass60_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Dropdown::$$c__DisplayClass60_0::*)()>(&TMP_Dropdown::$$c__DisplayClass60_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Dropdown::$$c__DisplayClass60_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Dropdown::$$c__DisplayClass60_0::*)()>(&TMP_Dropdown::$$c__DisplayClass60_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Dropdown::$$c__DisplayClass60_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_Dropdown/<DelayedDestroyDropdownList>d__72
#include "TMPro/TMP_Dropdown_-DelayedDestroyDropdownList-d__72.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_Dropdown/<DelayedDestroyDropdownList>d__72.System.IDisposable.Dispose
void TMPro::TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Dropdown/<DelayedDestroyDropdownList>d__72.MoveNext
bool TMPro::TMP_Dropdown::$DelayedDestroyDropdownList$d__72::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Dropdown::$DelayedDestroyDropdownList$d__72::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Dropdown/<DelayedDestroyDropdownList>d__72.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* TMPro::TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Dropdown/<DelayedDestroyDropdownList>d__72.System.Collections.IEnumerator.Reset
void TMPro::TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Dropdown/<DelayedDestroyDropdownList>d__72.System.Collections.IEnumerator.get_Current
::Il2CppObject* TMPro::TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TMP_Dropdown::$DelayedDestroyDropdownList$d__72::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Dropdown::$DelayedDestroyDropdownList$d__72::*)(int)>(&TMP_Dropdown::$DelayedDestroyDropdownList$d__72::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Dropdown::$DelayedDestroyDropdownList$d__72*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Dropdown::$DelayedDestroyDropdownList$d__72::*)(int)>(&TMP_Dropdown::$DelayedDestroyDropdownList$d__72::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Dropdown::$DelayedDestroyDropdownList$d__72*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Dropdown::$DelayedDestroyDropdownList$d__72::*)()>(&TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Dropdown::$DelayedDestroyDropdownList$d__72*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Dropdown::$DelayedDestroyDropdownList$d__72::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Dropdown::$DelayedDestroyDropdownList$d__72::*)()>(&TMP_Dropdown::$DelayedDestroyDropdownList$d__72::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Dropdown::$DelayedDestroyDropdownList$d__72*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TMP_Dropdown::$DelayedDestroyDropdownList$d__72::*)()>(&TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Dropdown::$DelayedDestroyDropdownList$d__72*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Dropdown::$DelayedDestroyDropdownList$d__72::*)()>(&TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Dropdown::$DelayedDestroyDropdownList$d__72*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TMP_Dropdown::$DelayedDestroyDropdownList$d__72::*)()>(&TMP_Dropdown::$DelayedDestroyDropdownList$d__72::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Dropdown::$DelayedDestroyDropdownList$d__72*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.AtlasPopulationMode
#include "TMPro/AtlasPopulationMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.AtlasPopulationMode Static
TMPro::AtlasPopulationMode TMPro::AtlasPopulationMode::_get_Static() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::AtlasPopulationMode::_get_Static");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::AtlasPopulationMode>("TMPro", "AtlasPopulationMode", "Static"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.AtlasPopulationMode Static
void TMPro::AtlasPopulationMode::_set_Static(TMPro::AtlasPopulationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::AtlasPopulationMode::_set_Static");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "AtlasPopulationMode", "Static", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.AtlasPopulationMode Dynamic
TMPro::AtlasPopulationMode TMPro::AtlasPopulationMode::_get_Dynamic() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::AtlasPopulationMode::_get_Dynamic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::AtlasPopulationMode>("TMPro", "AtlasPopulationMode", "Dynamic"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.AtlasPopulationMode Dynamic
void TMPro::AtlasPopulationMode::_set_Dynamic(TMPro::AtlasPopulationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::AtlasPopulationMode::_set_Dynamic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "AtlasPopulationMode", "Dynamic", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_FontAsset
#include "TMPro/TMP_FontAsset.hpp"
// Including type: TMPro.TMP_FontAsset/<>c
#include "TMPro/TMP_FontAsset_--c.hpp"
// Including type: UnityEngine.Font
#include "UnityEngine/Font.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.TextCore.Glyph
#include "UnityEngine/TextCore/Glyph.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: TMPro.TMP_Character
#include "TMPro/TMP_Character.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
// Including type: TMPro.FaceInfo_Legacy
#include "TMPro/FaceInfo_Legacy.hpp"
// Including type: TMPro.TMP_Glyph
#include "TMPro/TMP_Glyph.hpp"
// Including type: TMPro.KerningTable
#include "TMPro/KerningTable.hpp"
// Including type: TMPro.TMP_FontFeatureTable
#include "TMPro/TMP_FontFeatureTable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.UInt32[] s_GlyphIndexArray
::Array<uint>* TMPro::TMP_FontAsset::_get_s_GlyphIndexArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::_get_s_GlyphIndexArray");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint>*>("TMPro", "TMP_FontAsset", "s_GlyphIndexArray"));
}
// Autogenerated static field setter
// Set static field: static System.UInt32[] s_GlyphIndexArray
void TMPro::TMP_FontAsset::_set_s_GlyphIndexArray(::Array<uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::_set_s_GlyphIndexArray");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_FontAsset", "s_GlyphIndexArray", value));
}
// Autogenerated static field getter
// Get static field: static System.Collections.Generic.List`1<System.UInt32> s_MissingCharacterList
System::Collections::Generic::List_1<uint>* TMPro::TMP_FontAsset::_get_s_MissingCharacterList() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::_get_s_MissingCharacterList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<uint>*>("TMPro", "TMP_FontAsset", "s_MissingCharacterList"));
}
// Autogenerated static field setter
// Set static field: static System.Collections.Generic.List`1<System.UInt32> s_MissingCharacterList
void TMPro::TMP_FontAsset::_set_s_MissingCharacterList(System::Collections::Generic::List_1<uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::_set_s_MissingCharacterList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_FontAsset", "s_MissingCharacterList", value));
}
// Autogenerated method: TMPro.TMP_FontAsset.get_version
::Il2CppString* TMPro::TMP_FontAsset::get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_version");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_version
void TMPro::TMP_FontAsset::set_version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_version");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_sourceFontFile
UnityEngine::Font* TMPro::TMP_FontAsset::get_sourceFontFile() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_sourceFontFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sourceFontFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Font*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_sourceFontFile
void TMPro::TMP_FontAsset::set_sourceFontFile(UnityEngine::Font* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_sourceFontFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sourceFontFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_atlasPopulationMode
TMPro::AtlasPopulationMode TMPro::TMP_FontAsset::get_atlasPopulationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_atlasPopulationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_atlasPopulationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::AtlasPopulationMode, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_atlasPopulationMode
void TMPro::TMP_FontAsset::set_atlasPopulationMode(TMPro::AtlasPopulationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_atlasPopulationMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_atlasPopulationMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_faceInfo
UnityEngine::TextCore::FaceInfo TMPro::TMP_FontAsset::get_faceInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_faceInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_faceInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::TextCore::FaceInfo, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_faceInfo
void TMPro::TMP_FontAsset::set_faceInfo(UnityEngine::TextCore::FaceInfo value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_faceInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_faceInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_glyphTable
System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>* TMPro::TMP_FontAsset::get_glyphTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_glyphTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_glyphTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_glyphTable
void TMPro::TMP_FontAsset::set_glyphTable(System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_glyphTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_glyphTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_glyphLookupTable
System::Collections::Generic::Dictionary_2<uint, UnityEngine::TextCore::Glyph*>* TMPro::TMP_FontAsset::get_glyphLookupTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_glyphLookupTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_glyphLookupTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::Dictionary_2<uint, UnityEngine::TextCore::Glyph*>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_characterTable
System::Collections::Generic::List_1<TMPro::TMP_Character*>* TMPro::TMP_FontAsset::get_characterTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_characterTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_characterTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<TMPro::TMP_Character*>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_characterTable
void TMPro::TMP_FontAsset::set_characterTable(System::Collections::Generic::List_1<TMPro::TMP_Character*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_characterTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_characterTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_characterLookupTable
System::Collections::Generic::Dictionary_2<uint, TMPro::TMP_Character*>* TMPro::TMP_FontAsset::get_characterLookupTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_characterLookupTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_characterLookupTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::Dictionary_2<uint, TMPro::TMP_Character*>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_atlasTexture
UnityEngine::Texture2D* TMPro::TMP_FontAsset::get_atlasTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_atlasTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_atlasTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture2D*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_atlasTextures
::Array<UnityEngine::Texture2D*>* TMPro::TMP_FontAsset::get_atlasTextures() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_atlasTextures");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_atlasTextures", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Texture2D*>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_atlasTextures
void TMPro::TMP_FontAsset::set_atlasTextures(::Array<UnityEngine::Texture2D*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_atlasTextures");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_atlasTextures", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_usedGlyphRects
System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* TMPro::TMP_FontAsset::get_usedGlyphRects() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_usedGlyphRects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_usedGlyphRects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_usedGlyphRects
void TMPro::TMP_FontAsset::set_usedGlyphRects(System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_usedGlyphRects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_usedGlyphRects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_freeGlyphRects
System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* TMPro::TMP_FontAsset::get_freeGlyphRects() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_freeGlyphRects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_freeGlyphRects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_freeGlyphRects
void TMPro::TMP_FontAsset::set_freeGlyphRects(System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_freeGlyphRects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_freeGlyphRects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_fontInfo
TMPro::FaceInfo_Legacy* TMPro::TMP_FontAsset::get_fontInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_fontInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::FaceInfo_Legacy*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_atlasWidth
int TMPro::TMP_FontAsset::get_atlasWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_atlasWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_atlasWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_atlasWidth
void TMPro::TMP_FontAsset::set_atlasWidth(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_atlasWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_atlasWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_atlasHeight
int TMPro::TMP_FontAsset::get_atlasHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_atlasHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_atlasHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_atlasHeight
void TMPro::TMP_FontAsset::set_atlasHeight(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_atlasHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_atlasHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_atlasPadding
int TMPro::TMP_FontAsset::get_atlasPadding() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_atlasPadding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_atlasPadding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_atlasPadding
void TMPro::TMP_FontAsset::set_atlasPadding(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_atlasPadding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_atlasPadding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_atlasRenderMode
UnityEngine::TextCore::LowLevel::GlyphRenderMode TMPro::TMP_FontAsset::get_atlasRenderMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_atlasRenderMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_atlasRenderMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::TextCore::LowLevel::GlyphRenderMode, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_atlasRenderMode
void TMPro::TMP_FontAsset::set_atlasRenderMode(UnityEngine::TextCore::LowLevel::GlyphRenderMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_atlasRenderMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_atlasRenderMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_fontFeatureTable
TMPro::TMP_FontFeatureTable* TMPro::TMP_FontAsset::get_fontFeatureTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_fontFeatureTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontFeatureTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_FontFeatureTable*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_fontFeatureTable
void TMPro::TMP_FontAsset::set_fontFeatureTable(TMPro::TMP_FontFeatureTable* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_fontFeatureTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontFeatureTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_fallbackFontAssetTable
System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* TMPro::TMP_FontAsset::get_fallbackFontAssetTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_fallbackFontAssetTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fallbackFontAssetTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_fallbackFontAssetTable
void TMPro::TMP_FontAsset::set_fallbackFontAssetTable(System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_fallbackFontAssetTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fallbackFontAssetTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_creationSettings
TMPro::FontAssetCreationSettings TMPro::TMP_FontAsset::get_creationSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_creationSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_creationSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::FontAssetCreationSettings, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_creationSettings
void TMPro::TMP_FontAsset::set_creationSettings(TMPro::FontAssetCreationSettings value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_creationSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_creationSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.get_fontWeightTable
::Array<TMPro::TMP_FontWeightPair>* TMPro::TMP_FontAsset::get_fontWeightTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::get_fontWeightTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontWeightTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<TMPro::TMP_FontWeightPair>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.set_fontWeightTable
void TMPro::TMP_FontAsset::set_fontWeightTable(::Array<TMPro::TMP_FontWeightPair>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::set_fontWeightTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontWeightTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontAsset.CreateFontAsset
TMPro::TMP_FontAsset* TMPro::TMP_FontAsset::CreateFontAsset(UnityEngine::Font* font) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::CreateFontAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontAsset", "CreateFontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(font)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_FontAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, font);
}
// Autogenerated method: TMPro.TMP_FontAsset.CreateFontAsset
TMPro::TMP_FontAsset* TMPro::TMP_FontAsset::CreateFontAsset(UnityEngine::Font* font, int samplingPointSize, int atlasPadding, UnityEngine::TextCore::LowLevel::GlyphRenderMode renderMode, int atlasWidth, int atlasHeight, TMPro::AtlasPopulationMode atlasPopulationMode) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::CreateFontAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontAsset", "CreateFontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(font), ::il2cpp_utils::ExtractType(samplingPointSize), ::il2cpp_utils::ExtractType(atlasPadding), ::il2cpp_utils::ExtractType(renderMode), ::il2cpp_utils::ExtractType(atlasWidth), ::il2cpp_utils::ExtractType(atlasHeight), ::il2cpp_utils::ExtractType(atlasPopulationMode)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_FontAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, font, samplingPointSize, atlasPadding, renderMode, atlasWidth, atlasHeight, atlasPopulationMode);
}
// Autogenerated method: TMPro.TMP_FontAsset.Awake
void TMPro::TMP_FontAsset::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.InitializeDictionaryLookupTables
void TMPro::TMP_FontAsset::InitializeDictionaryLookupTables() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::InitializeDictionaryLookupTables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitializeDictionaryLookupTables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.ReadFontAssetDefinition
void TMPro::TMP_FontAsset::ReadFontAssetDefinition() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::ReadFontAssetDefinition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadFontAssetDefinition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.SortCharacterTable
void TMPro::TMP_FontAsset::SortCharacterTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::SortCharacterTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SortCharacterTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.SortGlyphTable
void TMPro::TMP_FontAsset::SortGlyphTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::SortGlyphTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SortGlyphTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.SortGlyphAndCharacterTables
void TMPro::TMP_FontAsset::SortGlyphAndCharacterTables() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::SortGlyphAndCharacterTables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SortGlyphAndCharacterTables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.HasCharacter
bool TMPro::TMP_FontAsset::HasCharacter(int character) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::HasCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, character);
}
// Autogenerated method: TMPro.TMP_FontAsset.HasCharacter
bool TMPro::TMP_FontAsset::HasCharacter(::Il2CppChar character) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::HasCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, character);
}
// Autogenerated method: TMPro.TMP_FontAsset.HasCharacter
bool TMPro::TMP_FontAsset::HasCharacter(::Il2CppChar character, bool searchFallbacks) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::HasCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character), ::il2cpp_utils::ExtractType(searchFallbacks)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, character, searchFallbacks);
}
// Autogenerated method: TMPro.TMP_FontAsset.HasCharacter_Internal
bool TMPro::TMP_FontAsset::HasCharacter_Internal(::Il2CppChar character, bool searchFallbacks) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::HasCharacter_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasCharacter_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character), ::il2cpp_utils::ExtractType(searchFallbacks)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, character, searchFallbacks);
}
// Autogenerated method: TMPro.TMP_FontAsset.HasCharacters
bool TMPro::TMP_FontAsset::HasCharacters(::Il2CppString* text, System::Collections::Generic::List_1<::Il2CppChar>*& missingCharacters) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::HasCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppChar>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, text, missingCharacters);
}
// Autogenerated method: TMPro.TMP_FontAsset.HasCharacters
bool TMPro::TMP_FontAsset::HasCharacters(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::HasCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, text);
}
// Autogenerated method: TMPro.TMP_FontAsset.GetCharacters
::Il2CppString* TMPro::TMP_FontAsset::GetCharacters(TMPro::TMP_FontAsset* fontAsset) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::GetCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontAsset", "GetCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fontAsset)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fontAsset);
}
// Autogenerated method: TMPro.TMP_FontAsset.GetCharactersArray
::Array<int>* TMPro::TMP_FontAsset::GetCharactersArray(TMPro::TMP_FontAsset* fontAsset) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::GetCharactersArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontAsset", "GetCharactersArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fontAsset)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<int>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fontAsset);
}
// Autogenerated method: TMPro.TMP_FontAsset.TryAddCharacters
bool TMPro::TMP_FontAsset::TryAddCharacters(::Array<uint>* unicodes) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::TryAddCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryAddCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unicodes)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unicodes);
}
// Autogenerated method: TMPro.TMP_FontAsset.TryAddCharacters
bool TMPro::TMP_FontAsset::TryAddCharacters(::Array<uint>* unicodes, ::Array<uint>*& missingUnicodes) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::TryAddCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryAddCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unicodes), ::il2cpp_utils::ExtractIndependentType<::Array<uint>*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unicodes, missingUnicodes);
}
// Autogenerated method: TMPro.TMP_FontAsset.TryAddCharacters
bool TMPro::TMP_FontAsset::TryAddCharacters(::Il2CppString* characters) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::TryAddCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryAddCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(characters)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, characters);
}
// Autogenerated method: TMPro.TMP_FontAsset.TryAddCharacters
bool TMPro::TMP_FontAsset::TryAddCharacters(::Il2CppString* characters, ::Il2CppString*& missingCharacters) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::TryAddCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryAddCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(characters), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, characters, missingCharacters);
}
// Autogenerated method: TMPro.TMP_FontAsset.TryAddCharacter_Internal
bool TMPro::TMP_FontAsset::TryAddCharacter_Internal(uint unicode) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::TryAddCharacter_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryAddCharacter_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unicode)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unicode);
}
// Autogenerated method: TMPro.TMP_FontAsset.AddCharacter_Internal
TMPro::TMP_Character* TMPro::TMP_FontAsset::AddCharacter_Internal(uint unicode, UnityEngine::TextCore::Glyph* glyph) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::AddCharacter_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCharacter_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unicode), ::il2cpp_utils::ExtractType(glyph)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_Character*, false>(this, ___internal__method, unicode, glyph);
}
// Autogenerated method: TMPro.TMP_FontAsset.TryAddCharacterInternal
bool TMPro::TMP_FontAsset::TryAddCharacterInternal(uint unicode, TMPro::TMP_Character*& character) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::TryAddCharacterInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryAddCharacterInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unicode), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Character*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unicode, character);
}
// Autogenerated method: TMPro.TMP_FontAsset.GetGlyphIndex
uint TMPro::TMP_FontAsset::GetGlyphIndex(uint unicode) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::GetGlyphIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetGlyphIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unicode)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unicode);
}
// Autogenerated method: TMPro.TMP_FontAsset.UpdateAtlasTexture
void TMPro::TMP_FontAsset::UpdateAtlasTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::UpdateAtlasTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAtlasTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.UpdateGlyphAdjustmentRecords
void TMPro::TMP_FontAsset::UpdateGlyphAdjustmentRecords(uint unicode, uint glyphIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::UpdateGlyphAdjustmentRecords");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateGlyphAdjustmentRecords", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unicode), ::il2cpp_utils::ExtractType(glyphIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, unicode, glyphIndex);
}
// Autogenerated method: TMPro.TMP_FontAsset.ClearFontAssetData
void TMPro::TMP_FontAsset::ClearFontAssetData(bool setAtlasSizeToZero) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::ClearFontAssetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearFontAssetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(setAtlasSizeToZero)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, setAtlasSizeToZero);
}
// Autogenerated method: TMPro.TMP_FontAsset.UpgradeFontAsset
void TMPro::TMP_FontAsset::UpgradeFontAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::UpgradeFontAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpgradeFontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset.UpgradeGlyphAdjustmentTableToFontFeatureTable
void TMPro::TMP_FontAsset::UpgradeGlyphAdjustmentTableToFontFeatureTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::UpgradeGlyphAdjustmentTableToFontFeatureTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpgradeGlyphAdjustmentTableToFontFeatureTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset..cctor
void TMPro::TMP_FontAsset::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontAsset", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TMP_FontAsset::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMP_FontAsset::*)()>(&TMP_FontAsset::get_version)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_version
// Il2CppName: set_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(::Il2CppString*)>(&TMP_FontAsset::set_version)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_sourceFontFile
// Il2CppName: get_sourceFontFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Font* (TMP_FontAsset::*)()>(&TMP_FontAsset::get_sourceFontFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_sourceFontFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_sourceFontFile
// Il2CppName: set_sourceFontFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(UnityEngine::Font*)>(&TMP_FontAsset::set_sourceFontFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_sourceFontFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Font*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_atlasPopulationMode
// Il2CppName: get_atlasPopulationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::AtlasPopulationMode (TMP_FontAsset::*)()>(&TMP_FontAsset::get_atlasPopulationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_atlasPopulationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_atlasPopulationMode
// Il2CppName: set_atlasPopulationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(TMPro::AtlasPopulationMode)>(&TMP_FontAsset::set_atlasPopulationMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_atlasPopulationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::AtlasPopulationMode>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_faceInfo
// Il2CppName: get_faceInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::TextCore::FaceInfo (TMP_FontAsset::*)()>(&TMP_FontAsset::get_faceInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_faceInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_faceInfo
// Il2CppName: set_faceInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(UnityEngine::TextCore::FaceInfo)>(&TMP_FontAsset::set_faceInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_faceInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::FaceInfo>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_glyphTable
// Il2CppName: get_glyphTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>* (TMP_FontAsset::*)()>(&TMP_FontAsset::get_glyphTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_glyphTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_glyphTable
// Il2CppName: set_glyphTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>*)>(&TMP_FontAsset::set_glyphTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_glyphTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::TextCore::Glyph*>*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_glyphLookupTable
// Il2CppName: get_glyphLookupTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::Dictionary_2<uint, UnityEngine::TextCore::Glyph*>* (TMP_FontAsset::*)()>(&TMP_FontAsset::get_glyphLookupTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_glyphLookupTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_characterTable
// Il2CppName: get_characterTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<TMPro::TMP_Character*>* (TMP_FontAsset::*)()>(&TMP_FontAsset::get_characterTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_characterTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_characterTable
// Il2CppName: set_characterTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(System::Collections::Generic::List_1<TMPro::TMP_Character*>*)>(&TMP_FontAsset::set_characterTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_characterTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<TMPro::TMP_Character*>*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_characterLookupTable
// Il2CppName: get_characterLookupTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::Dictionary_2<uint, TMPro::TMP_Character*>* (TMP_FontAsset::*)()>(&TMP_FontAsset::get_characterLookupTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_characterLookupTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_atlasTexture
// Il2CppName: get_atlasTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture2D* (TMP_FontAsset::*)()>(&TMP_FontAsset::get_atlasTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_atlasTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_atlasTextures
// Il2CppName: get_atlasTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Texture2D*>* (TMP_FontAsset::*)()>(&TMP_FontAsset::get_atlasTextures)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_atlasTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_atlasTextures
// Il2CppName: set_atlasTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(::Array<UnityEngine::Texture2D*>*)>(&TMP_FontAsset::set_atlasTextures)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_atlasTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Texture2D*>*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_usedGlyphRects
// Il2CppName: get_usedGlyphRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* (TMP_FontAsset::*)()>(&TMP_FontAsset::get_usedGlyphRects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_usedGlyphRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_usedGlyphRects
// Il2CppName: set_usedGlyphRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>*)>(&TMP_FontAsset::set_usedGlyphRects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_usedGlyphRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_freeGlyphRects
// Il2CppName: get_freeGlyphRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>* (TMP_FontAsset::*)()>(&TMP_FontAsset::get_freeGlyphRects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_freeGlyphRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_freeGlyphRects
// Il2CppName: set_freeGlyphRects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>*)>(&TMP_FontAsset::set_freeGlyphRects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_freeGlyphRects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::TextCore::GlyphRect>*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_fontInfo
// Il2CppName: get_fontInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::FaceInfo_Legacy* (TMP_FontAsset::*)()>(&TMP_FontAsset::get_fontInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_fontInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_atlasWidth
// Il2CppName: get_atlasWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_FontAsset::*)()>(&TMP_FontAsset::get_atlasWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_atlasWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_atlasWidth
// Il2CppName: set_atlasWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(int)>(&TMP_FontAsset::set_atlasWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_atlasWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_atlasHeight
// Il2CppName: get_atlasHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_FontAsset::*)()>(&TMP_FontAsset::get_atlasHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_atlasHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_atlasHeight
// Il2CppName: set_atlasHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(int)>(&TMP_FontAsset::set_atlasHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_atlasHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_atlasPadding
// Il2CppName: get_atlasPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_FontAsset::*)()>(&TMP_FontAsset::get_atlasPadding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_atlasPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_atlasPadding
// Il2CppName: set_atlasPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(int)>(&TMP_FontAsset::set_atlasPadding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_atlasPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_atlasRenderMode
// Il2CppName: get_atlasRenderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::TextCore::LowLevel::GlyphRenderMode (TMP_FontAsset::*)()>(&TMP_FontAsset::get_atlasRenderMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_atlasRenderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_atlasRenderMode
// Il2CppName: set_atlasRenderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(UnityEngine::TextCore::LowLevel::GlyphRenderMode)>(&TMP_FontAsset::set_atlasRenderMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_atlasRenderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::LowLevel::GlyphRenderMode>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_fontFeatureTable
// Il2CppName: get_fontFeatureTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontFeatureTable* (TMP_FontAsset::*)()>(&TMP_FontAsset::get_fontFeatureTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_fontFeatureTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_fontFeatureTable
// Il2CppName: set_fontFeatureTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(TMPro::TMP_FontFeatureTable*)>(&TMP_FontAsset::set_fontFeatureTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_fontFeatureTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontFeatureTable*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_fallbackFontAssetTable
// Il2CppName: get_fallbackFontAssetTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* (TMP_FontAsset::*)()>(&TMP_FontAsset::get_fallbackFontAssetTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_fallbackFontAssetTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_fallbackFontAssetTable
// Il2CppName: set_fallbackFontAssetTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*)>(&TMP_FontAsset::set_fallbackFontAssetTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_fallbackFontAssetTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_creationSettings
// Il2CppName: get_creationSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::FontAssetCreationSettings (TMP_FontAsset::*)()>(&TMP_FontAsset::get_creationSettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_creationSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_creationSettings
// Il2CppName: set_creationSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(TMPro::FontAssetCreationSettings)>(&TMP_FontAsset::set_creationSettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_creationSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::FontAssetCreationSettings>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::get_fontWeightTable
// Il2CppName: get_fontWeightTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<TMPro::TMP_FontWeightPair>* (TMP_FontAsset::*)()>(&TMP_FontAsset::get_fontWeightTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "get_fontWeightTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::set_fontWeightTable
// Il2CppName: set_fontWeightTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(::Array<TMPro::TMP_FontWeightPair>*)>(&TMP_FontAsset::set_fontWeightTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "set_fontWeightTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_FontWeightPair>*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::CreateFontAsset
// Il2CppName: CreateFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (*)(UnityEngine::Font*)>(&TMP_FontAsset::CreateFontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "CreateFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Font*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::CreateFontAsset
// Il2CppName: CreateFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (*)(UnityEngine::Font*, int, int, UnityEngine::TextCore::LowLevel::GlyphRenderMode, int, int, TMPro::AtlasPopulationMode)>(&TMP_FontAsset::CreateFontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "CreateFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Font*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::LowLevel::GlyphRenderMode>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<TMPro::AtlasPopulationMode>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)()>(&TMP_FontAsset::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::InitializeDictionaryLookupTables
// Il2CppName: InitializeDictionaryLookupTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)()>(&TMP_FontAsset::InitializeDictionaryLookupTables)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "InitializeDictionaryLookupTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::ReadFontAssetDefinition
// Il2CppName: ReadFontAssetDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)()>(&TMP_FontAsset::ReadFontAssetDefinition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "ReadFontAssetDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::SortCharacterTable
// Il2CppName: SortCharacterTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)()>(&TMP_FontAsset::SortCharacterTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "SortCharacterTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::SortGlyphTable
// Il2CppName: SortGlyphTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)()>(&TMP_FontAsset::SortGlyphTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "SortGlyphTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::SortGlyphAndCharacterTables
// Il2CppName: SortGlyphAndCharacterTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)()>(&TMP_FontAsset::SortGlyphAndCharacterTables)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "SortGlyphAndCharacterTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::HasCharacter
// Il2CppName: HasCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_FontAsset::*)(int)>(&TMP_FontAsset::HasCharacter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "HasCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::HasCharacter
// Il2CppName: HasCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_FontAsset::*)(::Il2CppChar)>(&TMP_FontAsset::HasCharacter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "HasCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::HasCharacter
// Il2CppName: HasCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_FontAsset::*)(::Il2CppChar, bool)>(&TMP_FontAsset::HasCharacter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "HasCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::HasCharacter_Internal
// Il2CppName: HasCharacter_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_FontAsset::*)(::Il2CppChar, bool)>(&TMP_FontAsset::HasCharacter_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "HasCharacter_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::HasCharacters
// Il2CppName: HasCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_FontAsset::*)(::Il2CppString*, System::Collections::Generic::List_1<::Il2CppChar>*&)>(&TMP_FontAsset::HasCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "HasCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<::Il2CppChar>*&>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::HasCharacters
// Il2CppName: HasCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_FontAsset::*)(::Il2CppString*)>(&TMP_FontAsset::HasCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "HasCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::GetCharacters
// Il2CppName: GetCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(TMPro::TMP_FontAsset*)>(&TMP_FontAsset::GetCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "GetCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::GetCharactersArray
// Il2CppName: GetCharactersArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (*)(TMPro::TMP_FontAsset*)>(&TMP_FontAsset::GetCharactersArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "GetCharactersArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::TryAddCharacters
// Il2CppName: TryAddCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_FontAsset::*)(::Array<uint>*)>(&TMP_FontAsset::TryAddCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "TryAddCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint>*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::TryAddCharacters
// Il2CppName: TryAddCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_FontAsset::*)(::Array<uint>*, ::Array<uint>*&)>(&TMP_FontAsset::TryAddCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "TryAddCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint>*&>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::TryAddCharacters
// Il2CppName: TryAddCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_FontAsset::*)(::Il2CppString*)>(&TMP_FontAsset::TryAddCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "TryAddCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::TryAddCharacters
// Il2CppName: TryAddCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_FontAsset::*)(::Il2CppString*, ::Il2CppString*&)>(&TMP_FontAsset::TryAddCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "TryAddCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::TryAddCharacter_Internal
// Il2CppName: TryAddCharacter_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_FontAsset::*)(uint)>(&TMP_FontAsset::TryAddCharacter_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "TryAddCharacter_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::AddCharacter_Internal
// Il2CppName: AddCharacter_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Character* (TMP_FontAsset::*)(uint, UnityEngine::TextCore::Glyph*)>(&TMP_FontAsset::AddCharacter_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "AddCharacter_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::Glyph*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::TryAddCharacterInternal
// Il2CppName: TryAddCharacterInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_FontAsset::*)(uint, TMPro::TMP_Character*&)>(&TMP_FontAsset::TryAddCharacterInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "TryAddCharacterInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Character*&>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::GetGlyphIndex
// Il2CppName: GetGlyphIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (TMP_FontAsset::*)(uint)>(&TMP_FontAsset::GetGlyphIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "GetGlyphIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::UpdateAtlasTexture
// Il2CppName: UpdateAtlasTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)()>(&TMP_FontAsset::UpdateAtlasTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "UpdateAtlasTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::UpdateGlyphAdjustmentRecords
// Il2CppName: UpdateGlyphAdjustmentRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(uint, uint)>(&TMP_FontAsset::UpdateGlyphAdjustmentRecords)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "UpdateGlyphAdjustmentRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::ClearFontAssetData
// Il2CppName: ClearFontAssetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)(bool)>(&TMP_FontAsset::ClearFontAssetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "ClearFontAssetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::UpgradeFontAsset
// Il2CppName: UpgradeFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)()>(&TMP_FontAsset::UpgradeFontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "UpgradeFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::UpgradeGlyphAdjustmentTableToFontFeatureTable
// Il2CppName: UpgradeGlyphAdjustmentTableToFontFeatureTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)()>(&TMP_FontAsset::UpgradeGlyphAdjustmentTableToFontFeatureTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), "UpgradeGlyphAdjustmentTableToFontFeatureTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)()>(&TMP_FontAsset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::*)()>(&TMP_FontAsset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_FontAsset::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_FontAsset/<>c
#include "TMPro/TMP_FontAsset_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: TMPro.TMP_Character
#include "TMPro/TMP_Character.hpp"
// Including type: UnityEngine.TextCore.Glyph
#include "UnityEngine/TextCore/Glyph.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly TMPro.TMP_FontAsset/<>c <>9
TMPro::TMP_FontAsset::$$c* TMPro::TMP_FontAsset::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<TMPro::TMP_FontAsset::$$c*>("TMPro", "TMP_FontAsset/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.TMP_FontAsset/<>c <>9
void TMPro::TMP_FontAsset::$$c::_set_$$9(TMPro::TMP_FontAsset::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("TMPro", "TMP_FontAsset/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<TMPro.TMP_Character,System.UInt32> <>9__100_0
System::Func_2<TMPro::TMP_Character*, uint>* TMPro::TMP_FontAsset::$$c::_get_$$9__100_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::$$c::_get_$$9__100_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<TMPro::TMP_Character*, uint>*>("TMPro", "TMP_FontAsset/<>c", "<>9__100_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<TMPro.TMP_Character,System.UInt32> <>9__100_0
void TMPro::TMP_FontAsset::$$c::_set_$$9__100_0(System::Func_2<TMPro::TMP_Character*, uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::$$c::_set_$$9__100_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("TMPro", "TMP_FontAsset/<>c", "<>9__100_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<UnityEngine.TextCore.Glyph,System.UInt32> <>9__101_0
System::Func_2<UnityEngine::TextCore::Glyph*, uint>* TMPro::TMP_FontAsset::$$c::_get_$$9__101_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::$$c::_get_$$9__101_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<UnityEngine::TextCore::Glyph*, uint>*>("TMPro", "TMP_FontAsset/<>c", "<>9__101_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<UnityEngine.TextCore.Glyph,System.UInt32> <>9__101_0
void TMPro::TMP_FontAsset::$$c::_set_$$9__101_0(System::Func_2<UnityEngine::TextCore::Glyph*, uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::$$c::_set_$$9__101_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("TMPro", "TMP_FontAsset/<>c", "<>9__101_0", value)));
}
// Autogenerated method: TMPro.TMP_FontAsset/<>c..cctor
void TMPro::TMP_FontAsset::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontAsset/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAsset/<>c.<SortCharacterTable>b__100_0
uint TMPro::TMP_FontAsset::$$c::$SortCharacterTable$b__100_0(TMPro::TMP_Character* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::$$c::<SortCharacterTable>b__100_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SortCharacterTable>b__100_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_FontAsset/<>c.<SortGlyphTable>b__101_0
uint TMPro::TMP_FontAsset::$$c::$SortGlyphTable$b__101_0(UnityEngine::TextCore::Glyph* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAsset::$$c::<SortGlyphTable>b__101_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SortGlyphTable>b__101_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, c);
}
// Writing MetadataGetter for method: TMP_FontAsset::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_FontAsset::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::$$c::$SortCharacterTable$b__100_0
// Il2CppName: <SortCharacterTable>b__100_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (TMP_FontAsset::$$c::*)(TMPro::TMP_Character*)>(&TMP_FontAsset::$$c::$SortCharacterTable$b__100_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset::$$c*), "<SortCharacterTable>b__100_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Character*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::$$c::$SortGlyphTable$b__101_0
// Il2CppName: <SortGlyphTable>b__101_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (TMP_FontAsset::$$c::*)(UnityEngine::TextCore::Glyph*)>(&TMP_FontAsset::$$c::$SortGlyphTable$b__101_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset::$$c*), "<SortGlyphTable>b__101_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::Glyph*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAsset::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::$$c::*)()>(&TMP_FontAsset::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAsset::$$c::*)()>(&TMP_FontAsset::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAsset::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.FaceInfo_Legacy
#include "TMPro/FaceInfo_Legacy.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: FaceInfo_Legacy::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FaceInfo_Legacy::*)()>(&FaceInfo_Legacy::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FaceInfo_Legacy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FaceInfo_Legacy::*)()>(&FaceInfo_Legacy::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FaceInfo_Legacy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_Glyph
#include "TMPro/TMP_Glyph.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_Glyph.Clone
TMPro::TMP_Glyph* TMPro::TMP_Glyph::Clone(TMPro::TMP_Glyph* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Glyph::Clone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Glyph", "Clone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_Glyph*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, source);
}
// Writing MetadataGetter for method: TMP_Glyph::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Glyph* (*)(TMPro::TMP_Glyph*)>(&TMP_Glyph::Clone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Glyph*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Glyph*>()});
  }
};
// Writing MetadataGetter for method: TMP_Glyph::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Glyph::*)()>(&TMP_Glyph::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Glyph*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Glyph::*)()>(&TMP_Glyph::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Glyph*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.FontAssetCreationSettings
#include "TMPro/FontAssetCreationSettings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: FontAssetCreationSettings::FontAssetCreationSettings
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontAssetCreationSettings::*)(::Il2CppString*, int, int, int, int, int, int, int, ::Il2CppString*, int)>(&FontAssetCreationSettings::FontAssetCreationSettings<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FontAssetCreationSettings), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FontAssetCreationSettings::*)(::Il2CppString*, int, int, int, int, int, int, int, ::Il2CppString*, int)>(&FontAssetCreationSettings::FontAssetCreationSettings<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FontAssetCreationSettings), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.KerningPairKey
#include "TMPro/KerningPairKey.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: KerningPairKey::KerningPairKey
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningPairKey::*)(uint, uint)>(&KerningPairKey::KerningPairKey<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPairKey), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningPairKey::*)(uint, uint)>(&KerningPairKey::KerningPairKey<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPairKey), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.GlyphValueRecord_Legacy
#include "TMPro/GlyphValueRecord_Legacy.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.GlyphValueRecord_Legacy.op_Addition
TMPro::GlyphValueRecord_Legacy TMPro::operator+(const TMPro::GlyphValueRecord_Legacy& a, const TMPro::GlyphValueRecord_Legacy& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::GlyphValueRecord_Legacy::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "GlyphValueRecord_Legacy", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::GlyphValueRecord_Legacy, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Writing MetadataGetter for method: GlyphValueRecord_Legacy::GlyphValueRecord_Legacy
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlyphValueRecord_Legacy::*)(UnityEngine::TextCore::LowLevel::GlyphValueRecord)>(&GlyphValueRecord_Legacy::GlyphValueRecord_Legacy<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlyphValueRecord_Legacy), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::LowLevel::GlyphValueRecord>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlyphValueRecord_Legacy::*)(UnityEngine::TextCore::LowLevel::GlyphValueRecord)>(&GlyphValueRecord_Legacy::GlyphValueRecord_Legacy<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlyphValueRecord_Legacy), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::LowLevel::GlyphValueRecord>()});
  }
};
// Writing MetadataGetter for method: GlyphValueRecord_Legacy::operator+
// Il2CppName: op_Addition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::GlyphValueRecord_Legacy (*)(const TMPro::GlyphValueRecord_Legacy&, const TMPro::GlyphValueRecord_Legacy&)>(&GlyphValueRecord_Legacy::operator+)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlyphValueRecord_Legacy), "op_Addition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const TMPro::GlyphValueRecord_Legacy&>(), ::il2cpp_utils::ExtractIndependentType<const TMPro::GlyphValueRecord_Legacy&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.KerningPair
#include "TMPro/KerningPair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static TMPro.KerningPair empty
TMPro::KerningPair* TMPro::KerningPair::_get_empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningPair::_get_empty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::KerningPair*>("TMPro", "KerningPair", "empty"));
}
// Autogenerated static field setter
// Set static field: static TMPro.KerningPair empty
void TMPro::KerningPair::_set_empty(TMPro::KerningPair* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningPair::_set_empty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "KerningPair", "empty", value));
}
// Autogenerated method: TMPro.KerningPair.get_firstGlyph
uint TMPro::KerningPair::get_firstGlyph() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningPair::get_firstGlyph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_firstGlyph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.KerningPair.set_firstGlyph
void TMPro::KerningPair::set_firstGlyph(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningPair::set_firstGlyph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_firstGlyph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.KerningPair.get_firstGlyphAdjustments
TMPro::GlyphValueRecord_Legacy TMPro::KerningPair::get_firstGlyphAdjustments() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningPair::get_firstGlyphAdjustments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_firstGlyphAdjustments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::GlyphValueRecord_Legacy, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.KerningPair.get_secondGlyph
uint TMPro::KerningPair::get_secondGlyph() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningPair::get_secondGlyph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_secondGlyph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.KerningPair.set_secondGlyph
void TMPro::KerningPair::set_secondGlyph(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningPair::set_secondGlyph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_secondGlyph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.KerningPair.get_secondGlyphAdjustments
TMPro::GlyphValueRecord_Legacy TMPro::KerningPair::get_secondGlyphAdjustments() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningPair::get_secondGlyphAdjustments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_secondGlyphAdjustments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::GlyphValueRecord_Legacy, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.KerningPair.get_ignoreSpacingAdjustments
bool TMPro::KerningPair::get_ignoreSpacingAdjustments() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningPair::get_ignoreSpacingAdjustments");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ignoreSpacingAdjustments", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.KerningPair.ConvertLegacyKerningData
void TMPro::KerningPair::ConvertLegacyKerningData() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningPair::ConvertLegacyKerningData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConvertLegacyKerningData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.KerningPair..cctor
void TMPro::KerningPair::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningPair::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "KerningPair", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: KerningPair::get_firstGlyph
// Il2CppName: get_firstGlyph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (KerningPair::*)()>(&KerningPair::get_firstGlyph)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPair*), "get_firstGlyph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KerningPair::set_firstGlyph
// Il2CppName: set_firstGlyph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningPair::*)(uint)>(&KerningPair::set_firstGlyph)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPair*), "set_firstGlyph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: KerningPair::get_firstGlyphAdjustments
// Il2CppName: get_firstGlyphAdjustments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::GlyphValueRecord_Legacy (KerningPair::*)()>(&KerningPair::get_firstGlyphAdjustments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPair*), "get_firstGlyphAdjustments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KerningPair::get_secondGlyph
// Il2CppName: get_secondGlyph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (KerningPair::*)()>(&KerningPair::get_secondGlyph)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPair*), "get_secondGlyph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KerningPair::set_secondGlyph
// Il2CppName: set_secondGlyph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningPair::*)(uint)>(&KerningPair::set_secondGlyph)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPair*), "set_secondGlyph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: KerningPair::get_secondGlyphAdjustments
// Il2CppName: get_secondGlyphAdjustments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::GlyphValueRecord_Legacy (KerningPair::*)()>(&KerningPair::get_secondGlyphAdjustments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPair*), "get_secondGlyphAdjustments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KerningPair::get_ignoreSpacingAdjustments
// Il2CppName: get_ignoreSpacingAdjustments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (KerningPair::*)()>(&KerningPair::get_ignoreSpacingAdjustments)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPair*), "get_ignoreSpacingAdjustments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KerningPair::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningPair::*)(uint, uint, float)>(&KerningPair::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningPair::*)(uint, uint, float)>(&KerningPair::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: KerningPair::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningPair::*)(uint, TMPro::GlyphValueRecord_Legacy, uint, TMPro::GlyphValueRecord_Legacy)>(&KerningPair::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::GlyphValueRecord_Legacy>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::GlyphValueRecord_Legacy>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningPair::*)(uint, TMPro::GlyphValueRecord_Legacy, uint, TMPro::GlyphValueRecord_Legacy)>(&KerningPair::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::GlyphValueRecord_Legacy>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::GlyphValueRecord_Legacy>()});
  }
};
// Writing MetadataGetter for method: KerningPair::ConvertLegacyKerningData
// Il2CppName: ConvertLegacyKerningData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningPair::*)()>(&KerningPair::ConvertLegacyKerningData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPair*), "ConvertLegacyKerningData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KerningPair::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&KerningPair::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPair*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KerningPair::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningPair::*)()>(&KerningPair::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningPair::*)()>(&KerningPair::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningPair*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.KerningTable
#include "TMPro/KerningTable.hpp"
// Including type: TMPro.KerningTable/<>c__DisplayClass3_0
#include "TMPro/KerningTable_--c__DisplayClass3_0.hpp"
// Including type: TMPro.KerningTable/<>c__DisplayClass4_0
#include "TMPro/KerningTable_--c__DisplayClass4_0.hpp"
// Including type: TMPro.KerningTable/<>c__DisplayClass5_0
#include "TMPro/KerningTable_--c__DisplayClass5_0.hpp"
// Including type: TMPro.KerningTable/<>c
#include "TMPro/KerningTable_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: TMPro.KerningPair
#include "TMPro/KerningPair.hpp"
// Including type: TMPro.GlyphValueRecord_Legacy
#include "TMPro/GlyphValueRecord_Legacy.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.KerningTable.AddKerningPair
void TMPro::KerningTable::AddKerningPair() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::AddKerningPair");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKerningPair", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.KerningTable.AddKerningPair
int TMPro::KerningTable::AddKerningPair(uint first, uint second, float offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::AddKerningPair");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKerningPair", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(first), ::il2cpp_utils::ExtractType(second), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, first, second, offset);
}
// Autogenerated method: TMPro.KerningTable.AddGlyphPairAdjustmentRecord
int TMPro::KerningTable::AddGlyphPairAdjustmentRecord(uint first, TMPro::GlyphValueRecord_Legacy firstAdjustments, uint second, TMPro::GlyphValueRecord_Legacy secondAdjustments) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::AddGlyphPairAdjustmentRecord");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddGlyphPairAdjustmentRecord", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(first), ::il2cpp_utils::ExtractType(firstAdjustments), ::il2cpp_utils::ExtractType(second), ::il2cpp_utils::ExtractType(secondAdjustments)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, first, firstAdjustments, second, secondAdjustments);
}
// Autogenerated method: TMPro.KerningTable.RemoveKerningPair
void TMPro::KerningTable::RemoveKerningPair(int left, int right) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::RemoveKerningPair");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKerningPair", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, left, right);
}
// Autogenerated method: TMPro.KerningTable.RemoveKerningPair
void TMPro::KerningTable::RemoveKerningPair(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::RemoveKerningPair");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveKerningPair", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: TMPro.KerningTable.SortKerningPairs
void TMPro::KerningTable::SortKerningPairs() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::SortKerningPairs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SortKerningPairs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: KerningTable::AddKerningPair
// Il2CppName: AddKerningPair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningTable::*)()>(&KerningTable::AddKerningPair)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable*), "AddKerningPair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KerningTable::AddKerningPair
// Il2CppName: AddKerningPair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (KerningTable::*)(uint, uint, float)>(&KerningTable::AddKerningPair)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable*), "AddKerningPair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: KerningTable::AddGlyphPairAdjustmentRecord
// Il2CppName: AddGlyphPairAdjustmentRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (KerningTable::*)(uint, TMPro::GlyphValueRecord_Legacy, uint, TMPro::GlyphValueRecord_Legacy)>(&KerningTable::AddGlyphPairAdjustmentRecord)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable*), "AddGlyphPairAdjustmentRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::GlyphValueRecord_Legacy>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::GlyphValueRecord_Legacy>()});
  }
};
// Writing MetadataGetter for method: KerningTable::RemoveKerningPair
// Il2CppName: RemoveKerningPair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningTable::*)(int, int)>(&KerningTable::RemoveKerningPair)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable*), "RemoveKerningPair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: KerningTable::RemoveKerningPair
// Il2CppName: RemoveKerningPair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningTable::*)(int)>(&KerningTable::RemoveKerningPair)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable*), "RemoveKerningPair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: KerningTable::SortKerningPairs
// Il2CppName: SortKerningPairs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningTable::*)()>(&KerningTable::SortKerningPairs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable*), "SortKerningPairs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KerningTable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningTable::*)()>(&KerningTable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningTable::*)()>(&KerningTable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.KerningTable/<>c__DisplayClass3_0
#include "TMPro/KerningTable_--c__DisplayClass3_0.hpp"
// Including type: TMPro.KerningPair
#include "TMPro/KerningPair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.KerningTable/<>c__DisplayClass3_0.<AddKerningPair>b__0
bool TMPro::KerningTable::$$c__DisplayClass3_0::$AddKerningPair$b__0(TMPro::KerningPair* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::$$c__DisplayClass3_0::<AddKerningPair>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AddKerningPair>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item);
}
// Writing MetadataGetter for method: KerningTable::$$c__DisplayClass3_0::$AddKerningPair$b__0
// Il2CppName: <AddKerningPair>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (KerningTable::$$c__DisplayClass3_0::*)(TMPro::KerningPair*)>(&KerningTable::$$c__DisplayClass3_0::$AddKerningPair$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable::$$c__DisplayClass3_0*), "<AddKerningPair>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::KerningPair*>()});
  }
};
// Writing MetadataGetter for method: KerningTable::$$c__DisplayClass3_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningTable::$$c__DisplayClass3_0::*)()>(&KerningTable::$$c__DisplayClass3_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable::$$c__DisplayClass3_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningTable::$$c__DisplayClass3_0::*)()>(&KerningTable::$$c__DisplayClass3_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable::$$c__DisplayClass3_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.KerningTable/<>c__DisplayClass4_0
#include "TMPro/KerningTable_--c__DisplayClass4_0.hpp"
// Including type: TMPro.KerningPair
#include "TMPro/KerningPair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.KerningTable/<>c__DisplayClass4_0.<AddGlyphPairAdjustmentRecord>b__0
bool TMPro::KerningTable::$$c__DisplayClass4_0::$AddGlyphPairAdjustmentRecord$b__0(TMPro::KerningPair* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::$$c__DisplayClass4_0::<AddGlyphPairAdjustmentRecord>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AddGlyphPairAdjustmentRecord>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item);
}
// Writing MetadataGetter for method: KerningTable::$$c__DisplayClass4_0::$AddGlyphPairAdjustmentRecord$b__0
// Il2CppName: <AddGlyphPairAdjustmentRecord>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (KerningTable::$$c__DisplayClass4_0::*)(TMPro::KerningPair*)>(&KerningTable::$$c__DisplayClass4_0::$AddGlyphPairAdjustmentRecord$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable::$$c__DisplayClass4_0*), "<AddGlyphPairAdjustmentRecord>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::KerningPair*>()});
  }
};
// Writing MetadataGetter for method: KerningTable::$$c__DisplayClass4_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningTable::$$c__DisplayClass4_0::*)()>(&KerningTable::$$c__DisplayClass4_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable::$$c__DisplayClass4_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningTable::$$c__DisplayClass4_0::*)()>(&KerningTable::$$c__DisplayClass4_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable::$$c__DisplayClass4_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.KerningTable/<>c__DisplayClass5_0
#include "TMPro/KerningTable_--c__DisplayClass5_0.hpp"
// Including type: TMPro.KerningPair
#include "TMPro/KerningPair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.KerningTable/<>c__DisplayClass5_0.<RemoveKerningPair>b__0
bool TMPro::KerningTable::$$c__DisplayClass5_0::$RemoveKerningPair$b__0(TMPro::KerningPair* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::$$c__DisplayClass5_0::<RemoveKerningPair>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RemoveKerningPair>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item);
}
// Writing MetadataGetter for method: KerningTable::$$c__DisplayClass5_0::$RemoveKerningPair$b__0
// Il2CppName: <RemoveKerningPair>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (KerningTable::$$c__DisplayClass5_0::*)(TMPro::KerningPair*)>(&KerningTable::$$c__DisplayClass5_0::$RemoveKerningPair$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable::$$c__DisplayClass5_0*), "<RemoveKerningPair>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::KerningPair*>()});
  }
};
// Writing MetadataGetter for method: KerningTable::$$c__DisplayClass5_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningTable::$$c__DisplayClass5_0::*)()>(&KerningTable::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningTable::$$c__DisplayClass5_0::*)()>(&KerningTable::$$c__DisplayClass5_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable::$$c__DisplayClass5_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.KerningTable/<>c
#include "TMPro/KerningTable_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: TMPro.KerningPair
#include "TMPro/KerningPair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly TMPro.KerningTable/<>c <>9
TMPro::KerningTable::$$c* TMPro::KerningTable::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<TMPro::KerningTable::$$c*>("TMPro", "KerningTable/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.KerningTable/<>c <>9
void TMPro::KerningTable::$$c::_set_$$9(TMPro::KerningTable::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("TMPro", "KerningTable/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<TMPro.KerningPair,System.UInt32> <>9__7_0
System::Func_2<TMPro::KerningPair*, uint>* TMPro::KerningTable::$$c::_get_$$9__7_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::$$c::_get_$$9__7_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<TMPro::KerningPair*, uint>*>("TMPro", "KerningTable/<>c", "<>9__7_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<TMPro.KerningPair,System.UInt32> <>9__7_0
void TMPro::KerningTable::$$c::_set_$$9__7_0(System::Func_2<TMPro::KerningPair*, uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::$$c::_set_$$9__7_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("TMPro", "KerningTable/<>c", "<>9__7_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<TMPro.KerningPair,System.UInt32> <>9__7_1
System::Func_2<TMPro::KerningPair*, uint>* TMPro::KerningTable::$$c::_get_$$9__7_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::$$c::_get_$$9__7_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<TMPro::KerningPair*, uint>*>("TMPro", "KerningTable/<>c", "<>9__7_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<TMPro.KerningPair,System.UInt32> <>9__7_1
void TMPro::KerningTable::$$c::_set_$$9__7_1(System::Func_2<TMPro::KerningPair*, uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::$$c::_set_$$9__7_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("TMPro", "KerningTable/<>c", "<>9__7_1", value)));
}
// Autogenerated method: TMPro.KerningTable/<>c..cctor
void TMPro::KerningTable::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "KerningTable/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.KerningTable/<>c.<SortKerningPairs>b__7_0
uint TMPro::KerningTable::$$c::$SortKerningPairs$b__7_0(TMPro::KerningPair* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::$$c::<SortKerningPairs>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SortKerningPairs>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, s);
}
// Autogenerated method: TMPro.KerningTable/<>c.<SortKerningPairs>b__7_1
uint TMPro::KerningTable::$$c::$SortKerningPairs$b__7_1(TMPro::KerningPair* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::KerningTable::$$c::<SortKerningPairs>b__7_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SortKerningPairs>b__7_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, s);
}
// Writing MetadataGetter for method: KerningTable::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&KerningTable::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: KerningTable::$$c::$SortKerningPairs$b__7_0
// Il2CppName: <SortKerningPairs>b__7_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (KerningTable::$$c::*)(TMPro::KerningPair*)>(&KerningTable::$$c::$SortKerningPairs$b__7_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable::$$c*), "<SortKerningPairs>b__7_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::KerningPair*>()});
  }
};
// Writing MetadataGetter for method: KerningTable::$$c::$SortKerningPairs$b__7_1
// Il2CppName: <SortKerningPairs>b__7_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (KerningTable::$$c::*)(TMPro::KerningPair*)>(&KerningTable::$$c::$SortKerningPairs$b__7_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable::$$c*), "<SortKerningPairs>b__7_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::KerningPair*>()});
  }
};
// Writing MetadataGetter for method: KerningTable::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningTable::$$c::*)()>(&KerningTable::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (KerningTable::$$c::*)()>(&KerningTable::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(KerningTable::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_FontUtilities
#include "TMPro/TMP_FontUtilities.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: TMPro.TMP_FontAsset
#include "TMPro/TMP_FontAsset.hpp"
// Including type: TMPro.TMP_Character
#include "TMPro/TMP_Character.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<System.Int32> k_searchedFontAssets
System::Collections::Generic::List_1<int>* TMPro::TMP_FontUtilities::_get_k_searchedFontAssets() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontUtilities::_get_k_searchedFontAssets");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<int>*>("TMPro", "TMP_FontUtilities", "k_searchedFontAssets"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<System.Int32> k_searchedFontAssets
void TMPro::TMP_FontUtilities::_set_k_searchedFontAssets(System::Collections::Generic::List_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontUtilities::_set_k_searchedFontAssets");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_FontUtilities", "k_searchedFontAssets", value));
}
// Autogenerated method: TMPro.TMP_FontUtilities.SearchForCharacter
TMPro::TMP_FontAsset* TMPro::TMP_FontUtilities::SearchForCharacter(TMPro::TMP_FontAsset* font, uint unicode, TMPro::TMP_Character*& character) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontUtilities::SearchForCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontUtilities", "SearchForCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(font), ::il2cpp_utils::ExtractType(unicode), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Character*&>()})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_FontAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, font, unicode, character);
}
// Autogenerated method: TMPro.TMP_FontUtilities.SearchForCharacter
TMPro::TMP_FontAsset* TMPro::TMP_FontUtilities::SearchForCharacter(System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* fonts, uint unicode, TMPro::TMP_Character*& character) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontUtilities::SearchForCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontUtilities", "SearchForCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fonts), ::il2cpp_utils::ExtractType(unicode), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Character*&>()})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_FontAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fonts, unicode, character);
}
// Autogenerated method: TMPro.TMP_FontUtilities.SearchForCharacterInternal
TMPro::TMP_FontAsset* TMPro::TMP_FontUtilities::SearchForCharacterInternal(TMPro::TMP_FontAsset* font, uint unicode, TMPro::TMP_Character*& character) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontUtilities::SearchForCharacterInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontUtilities", "SearchForCharacterInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(font), ::il2cpp_utils::ExtractType(unicode), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Character*&>()})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_FontAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, font, unicode, character);
}
// Autogenerated method: TMPro.TMP_FontUtilities.SearchForCharacterInternal
TMPro::TMP_FontAsset* TMPro::TMP_FontUtilities::SearchForCharacterInternal(System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* fonts, uint unicode, TMPro::TMP_Character*& character) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontUtilities::SearchForCharacterInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontUtilities", "SearchForCharacterInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fonts), ::il2cpp_utils::ExtractType(unicode), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Character*&>()})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_FontAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fonts, unicode, character);
}
// Writing MetadataGetter for method: TMP_FontUtilities::SearchForCharacter
// Il2CppName: SearchForCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (*)(TMPro::TMP_FontAsset*, uint, TMPro::TMP_Character*&)>(&TMP_FontUtilities::SearchForCharacter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontUtilities*), "SearchForCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Character*&>()});
  }
};
// Writing MetadataGetter for method: TMP_FontUtilities::SearchForCharacter
// Il2CppName: SearchForCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (*)(System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*, uint, TMPro::TMP_Character*&)>(&TMP_FontUtilities::SearchForCharacter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontUtilities*), "SearchForCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Character*&>()});
  }
};
// Writing MetadataGetter for method: TMP_FontUtilities::SearchForCharacterInternal
// Il2CppName: SearchForCharacterInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (*)(TMPro::TMP_FontAsset*, uint, TMPro::TMP_Character*&)>(&TMP_FontUtilities::SearchForCharacterInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontUtilities*), "SearchForCharacterInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Character*&>()});
  }
};
// Writing MetadataGetter for method: TMP_FontUtilities::SearchForCharacterInternal
// Il2CppName: SearchForCharacterInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (*)(System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*, uint, TMPro::TMP_Character*&)>(&TMP_FontUtilities::SearchForCharacterInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontUtilities*), "SearchForCharacterInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Character*&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_FontAssetUtilities
#include "TMPro/TMP_FontAssetUtilities.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: TMPro.TMP_Character
#include "TMPro/TMP_Character.hpp"
// Including type: TMPro.TMP_FontAsset
#include "TMPro/TMP_FontAsset.hpp"
// Including type: TMPro.FontStyles
#include "TMPro/FontStyles.hpp"
// Including type: TMPro.FontWeight
#include "TMPro/FontWeight.hpp"
// Including type: UnityEngine.TextCore.Glyph
#include "UnityEngine/TextCore/Glyph.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly TMPro.TMP_FontAssetUtilities s_Instance
TMPro::TMP_FontAssetUtilities* TMPro::TMP_FontAssetUtilities::_get_s_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAssetUtilities::_get_s_Instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_FontAssetUtilities*>("TMPro", "TMP_FontAssetUtilities", "s_Instance"));
}
// Autogenerated static field setter
// Set static field: static private readonly TMPro.TMP_FontAssetUtilities s_Instance
void TMPro::TMP_FontAssetUtilities::_set_s_Instance(TMPro::TMP_FontAssetUtilities* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAssetUtilities::_set_s_Instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_FontAssetUtilities", "s_Instance", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<System.Int32> k_SearchedFontAssets
System::Collections::Generic::List_1<int>* TMPro::TMP_FontAssetUtilities::_get_k_SearchedFontAssets() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAssetUtilities::_get_k_SearchedFontAssets");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<int>*>("TMPro", "TMP_FontAssetUtilities", "k_SearchedFontAssets"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<System.Int32> k_SearchedFontAssets
void TMPro::TMP_FontAssetUtilities::_set_k_SearchedFontAssets(System::Collections::Generic::List_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAssetUtilities::_set_k_SearchedFontAssets");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_FontAssetUtilities", "k_SearchedFontAssets", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean k_IsFontEngineInitialized
bool TMPro::TMP_FontAssetUtilities::_get_k_IsFontEngineInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAssetUtilities::_get_k_IsFontEngineInitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("TMPro", "TMP_FontAssetUtilities", "k_IsFontEngineInitialized"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean k_IsFontEngineInitialized
void TMPro::TMP_FontAssetUtilities::_set_k_IsFontEngineInitialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAssetUtilities::_set_k_IsFontEngineInitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_FontAssetUtilities", "k_IsFontEngineInitialized", value));
}
// Autogenerated method: TMPro.TMP_FontAssetUtilities..cctor
void TMPro::TMP_FontAssetUtilities::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAssetUtilities::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontAssetUtilities", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAssetUtilities.get_instance
TMPro::TMP_FontAssetUtilities* TMPro::TMP_FontAssetUtilities::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAssetUtilities::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontAssetUtilities", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_FontAssetUtilities*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontAssetUtilities.GetCharacterFromFontAsset
TMPro::TMP_Character* TMPro::TMP_FontAssetUtilities::GetCharacterFromFontAsset(uint unicode, TMPro::TMP_FontAsset* sourceFontAsset, bool includeFallbacks, TMPro::FontStyles fontStyle, TMPro::FontWeight fontWeight, bool& isAlternativeTypeface, TMPro::TMP_FontAsset*& fontAsset) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAssetUtilities::GetCharacterFromFontAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontAssetUtilities", "GetCharacterFromFontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unicode), ::il2cpp_utils::ExtractType(sourceFontAsset), ::il2cpp_utils::ExtractType(includeFallbacks), ::il2cpp_utils::ExtractType(fontStyle), ::il2cpp_utils::ExtractType(fontWeight), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*&>()})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_Character*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, unicode, sourceFontAsset, includeFallbacks, fontStyle, fontWeight, isAlternativeTypeface, fontAsset);
}
// Autogenerated method: TMPro.TMP_FontAssetUtilities.GetCharacterFromFontAsset_Internal
TMPro::TMP_Character* TMPro::TMP_FontAssetUtilities::GetCharacterFromFontAsset_Internal(uint unicode, TMPro::TMP_FontAsset* sourceFontAsset, bool includeFallbacks, TMPro::FontStyles fontStyle, TMPro::FontWeight fontWeight, bool& isAlternativeTypeface, TMPro::TMP_FontAsset*& fontAsset) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAssetUtilities::GetCharacterFromFontAsset_Internal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontAssetUtilities", "GetCharacterFromFontAsset_Internal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unicode), ::il2cpp_utils::ExtractType(sourceFontAsset), ::il2cpp_utils::ExtractType(includeFallbacks), ::il2cpp_utils::ExtractType(fontStyle), ::il2cpp_utils::ExtractType(fontWeight), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*&>()})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_Character*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, unicode, sourceFontAsset, includeFallbacks, fontStyle, fontWeight, isAlternativeTypeface, fontAsset);
}
// Autogenerated method: TMPro.TMP_FontAssetUtilities.GetCharacterFromFontAssets
TMPro::TMP_Character* TMPro::TMP_FontAssetUtilities::GetCharacterFromFontAssets(uint unicode, System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* fontAssets, bool includeFallbacks, TMPro::FontStyles fontStyle, TMPro::FontWeight fontWeight, bool& isAlternativeTypeface, TMPro::TMP_FontAsset*& fontAsset) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAssetUtilities::GetCharacterFromFontAssets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontAssetUtilities", "GetCharacterFromFontAssets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unicode), ::il2cpp_utils::ExtractType(fontAssets), ::il2cpp_utils::ExtractType(includeFallbacks), ::il2cpp_utils::ExtractType(fontStyle), ::il2cpp_utils::ExtractType(fontWeight), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*&>()})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_Character*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, unicode, fontAssets, includeFallbacks, fontStyle, fontWeight, isAlternativeTypeface, fontAsset);
}
// Autogenerated method: TMPro.TMP_FontAssetUtilities.TryGetCharacterFromFontFile
bool TMPro::TMP_FontAssetUtilities::TryGetCharacterFromFontFile(uint unicode, TMPro::TMP_FontAsset* fontAsset, TMPro::TMP_Character*& character) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAssetUtilities::TryGetCharacterFromFontFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontAssetUtilities", "TryGetCharacterFromFontFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unicode), ::il2cpp_utils::ExtractType(fontAsset), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Character*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, unicode, fontAsset, character);
}
// Autogenerated method: TMPro.TMP_FontAssetUtilities.TryGetGlyphFromFontFile
bool TMPro::TMP_FontAssetUtilities::TryGetGlyphFromFontFile(uint glyphIndex, TMPro::TMP_FontAsset* fontAsset, UnityEngine::TextCore::Glyph*& glyph) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontAssetUtilities::TryGetGlyphFromFontFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontAssetUtilities", "TryGetGlyphFromFontFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(glyphIndex), ::il2cpp_utils::ExtractType(fontAsset), ::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::Glyph*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, glyphIndex, fontAsset, glyph);
}
// Writing MetadataGetter for method: TMP_FontAssetUtilities::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_FontAssetUtilities::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAssetUtilities*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAssetUtilities::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAssetUtilities* (*)()>(&TMP_FontAssetUtilities::get_instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAssetUtilities*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontAssetUtilities::GetCharacterFromFontAsset
// Il2CppName: GetCharacterFromFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Character* (*)(uint, TMPro::TMP_FontAsset*, bool, TMPro::FontStyles, TMPro::FontWeight, bool&, TMPro::TMP_FontAsset*&)>(&TMP_FontAssetUtilities::GetCharacterFromFontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAssetUtilities*), "GetCharacterFromFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<TMPro::FontStyles>(), ::il2cpp_utils::ExtractIndependentType<TMPro::FontWeight>(), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*&>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAssetUtilities::GetCharacterFromFontAsset_Internal
// Il2CppName: GetCharacterFromFontAsset_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Character* (*)(uint, TMPro::TMP_FontAsset*, bool, TMPro::FontStyles, TMPro::FontWeight, bool&, TMPro::TMP_FontAsset*&)>(&TMP_FontAssetUtilities::GetCharacterFromFontAsset_Internal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAssetUtilities*), "GetCharacterFromFontAsset_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<TMPro::FontStyles>(), ::il2cpp_utils::ExtractIndependentType<TMPro::FontWeight>(), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*&>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAssetUtilities::GetCharacterFromFontAssets
// Il2CppName: GetCharacterFromFontAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Character* (*)(uint, System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*, bool, TMPro::FontStyles, TMPro::FontWeight, bool&, TMPro::TMP_FontAsset*&)>(&TMP_FontAssetUtilities::GetCharacterFromFontAssets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAssetUtilities*), "GetCharacterFromFontAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<TMPro::FontStyles>(), ::il2cpp_utils::ExtractIndependentType<TMPro::FontWeight>(), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*&>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAssetUtilities::TryGetCharacterFromFontFile
// Il2CppName: TryGetCharacterFromFontFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint, TMPro::TMP_FontAsset*, TMPro::TMP_Character*&)>(&TMP_FontAssetUtilities::TryGetCharacterFromFontFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAssetUtilities*), "TryGetCharacterFromFontFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Character*&>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAssetUtilities::TryGetGlyphFromFontFile
// Il2CppName: TryGetGlyphFromFontFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint, TMPro::TMP_FontAsset*, UnityEngine::TextCore::Glyph*&)>(&TMP_FontAssetUtilities::TryGetGlyphFromFontFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAssetUtilities*), "TryGetGlyphFromFontFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::Glyph*&>()});
  }
};
// Writing MetadataGetter for method: TMP_FontAssetUtilities::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAssetUtilities::*)()>(&TMP_FontAssetUtilities::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAssetUtilities*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontAssetUtilities::*)()>(&TMP_FontAssetUtilities::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontAssetUtilities*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_FontFeatureTable
#include "TMPro/TMP_FontFeatureTable.hpp"
// Including type: TMPro.TMP_FontFeatureTable/<>c
#include "TMPro/TMP_FontFeatureTable_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: TMPro.TMP_GlyphPairAdjustmentRecord
#include "TMPro/TMP_GlyphPairAdjustmentRecord.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_FontFeatureTable.get_glyphPairAdjustmentRecords
System::Collections::Generic::List_1<TMPro::TMP_GlyphPairAdjustmentRecord*>* TMPro::TMP_FontFeatureTable::get_glyphPairAdjustmentRecords() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontFeatureTable::get_glyphPairAdjustmentRecords");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_glyphPairAdjustmentRecords", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<TMPro::TMP_GlyphPairAdjustmentRecord*>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontFeatureTable.set_glyphPairAdjustmentRecords
void TMPro::TMP_FontFeatureTable::set_glyphPairAdjustmentRecords(System::Collections::Generic::List_1<TMPro::TMP_GlyphPairAdjustmentRecord*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontFeatureTable::set_glyphPairAdjustmentRecords");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_glyphPairAdjustmentRecords", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_FontFeatureTable.SortGlyphPairAdjustmentRecords
void TMPro::TMP_FontFeatureTable::SortGlyphPairAdjustmentRecords() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontFeatureTable::SortGlyphPairAdjustmentRecords");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SortGlyphPairAdjustmentRecords", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TMP_FontFeatureTable::get_glyphPairAdjustmentRecords
// Il2CppName: get_glyphPairAdjustmentRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<TMPro::TMP_GlyphPairAdjustmentRecord*>* (TMP_FontFeatureTable::*)()>(&TMP_FontFeatureTable::get_glyphPairAdjustmentRecords)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontFeatureTable*), "get_glyphPairAdjustmentRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontFeatureTable::set_glyphPairAdjustmentRecords
// Il2CppName: set_glyphPairAdjustmentRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontFeatureTable::*)(System::Collections::Generic::List_1<TMPro::TMP_GlyphPairAdjustmentRecord*>*)>(&TMP_FontFeatureTable::set_glyphPairAdjustmentRecords)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontFeatureTable*), "set_glyphPairAdjustmentRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<TMPro::TMP_GlyphPairAdjustmentRecord*>*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontFeatureTable::SortGlyphPairAdjustmentRecords
// Il2CppName: SortGlyphPairAdjustmentRecords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontFeatureTable::*)()>(&TMP_FontFeatureTable::SortGlyphPairAdjustmentRecords)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontFeatureTable*), "SortGlyphPairAdjustmentRecords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontFeatureTable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontFeatureTable::*)()>(&TMP_FontFeatureTable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontFeatureTable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontFeatureTable::*)()>(&TMP_FontFeatureTable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontFeatureTable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_FontFeatureTable/<>c
#include "TMPro/TMP_FontFeatureTable_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: TMPro.TMP_GlyphPairAdjustmentRecord
#include "TMPro/TMP_GlyphPairAdjustmentRecord.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly TMPro.TMP_FontFeatureTable/<>c <>9
TMPro::TMP_FontFeatureTable::$$c* TMPro::TMP_FontFeatureTable::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontFeatureTable::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<TMPro::TMP_FontFeatureTable::$$c*>("TMPro", "TMP_FontFeatureTable/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.TMP_FontFeatureTable/<>c <>9
void TMPro::TMP_FontFeatureTable::$$c::_set_$$9(TMPro::TMP_FontFeatureTable::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontFeatureTable::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("TMPro", "TMP_FontFeatureTable/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<TMPro.TMP_GlyphPairAdjustmentRecord,System.UInt32> <>9__6_0
System::Func_2<TMPro::TMP_GlyphPairAdjustmentRecord*, uint>* TMPro::TMP_FontFeatureTable::$$c::_get_$$9__6_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontFeatureTable::$$c::_get_$$9__6_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<TMPro::TMP_GlyphPairAdjustmentRecord*, uint>*>("TMPro", "TMP_FontFeatureTable/<>c", "<>9__6_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<TMPro.TMP_GlyphPairAdjustmentRecord,System.UInt32> <>9__6_0
void TMPro::TMP_FontFeatureTable::$$c::_set_$$9__6_0(System::Func_2<TMPro::TMP_GlyphPairAdjustmentRecord*, uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontFeatureTable::$$c::_set_$$9__6_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("TMPro", "TMP_FontFeatureTable/<>c", "<>9__6_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<TMPro.TMP_GlyphPairAdjustmentRecord,System.UInt32> <>9__6_1
System::Func_2<TMPro::TMP_GlyphPairAdjustmentRecord*, uint>* TMPro::TMP_FontFeatureTable::$$c::_get_$$9__6_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontFeatureTable::$$c::_get_$$9__6_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<TMPro::TMP_GlyphPairAdjustmentRecord*, uint>*>("TMPro", "TMP_FontFeatureTable/<>c", "<>9__6_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<TMPro.TMP_GlyphPairAdjustmentRecord,System.UInt32> <>9__6_1
void TMPro::TMP_FontFeatureTable::$$c::_set_$$9__6_1(System::Func_2<TMPro::TMP_GlyphPairAdjustmentRecord*, uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontFeatureTable::$$c::_set_$$9__6_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("TMPro", "TMP_FontFeatureTable/<>c", "<>9__6_1", value)));
}
// Autogenerated method: TMPro.TMP_FontFeatureTable/<>c..cctor
void TMPro::TMP_FontFeatureTable::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontFeatureTable::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_FontFeatureTable/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontFeatureTable/<>c.<SortGlyphPairAdjustmentRecords>b__6_0
uint TMPro::TMP_FontFeatureTable::$$c::$SortGlyphPairAdjustmentRecords$b__6_0(TMPro::TMP_GlyphPairAdjustmentRecord* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontFeatureTable::$$c::<SortGlyphPairAdjustmentRecords>b__6_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SortGlyphPairAdjustmentRecords>b__6_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, s);
}
// Autogenerated method: TMPro.TMP_FontFeatureTable/<>c.<SortGlyphPairAdjustmentRecords>b__6_1
uint TMPro::TMP_FontFeatureTable::$$c::$SortGlyphPairAdjustmentRecords$b__6_1(TMPro::TMP_GlyphPairAdjustmentRecord* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontFeatureTable::$$c::<SortGlyphPairAdjustmentRecords>b__6_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SortGlyphPairAdjustmentRecords>b__6_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, s);
}
// Writing MetadataGetter for method: TMP_FontFeatureTable::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_FontFeatureTable::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontFeatureTable::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontFeatureTable::$$c::$SortGlyphPairAdjustmentRecords$b__6_0
// Il2CppName: <SortGlyphPairAdjustmentRecords>b__6_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (TMP_FontFeatureTable::$$c::*)(TMPro::TMP_GlyphPairAdjustmentRecord*)>(&TMP_FontFeatureTable::$$c::$SortGlyphPairAdjustmentRecords$b__6_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontFeatureTable::$$c*), "<SortGlyphPairAdjustmentRecords>b__6_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_GlyphPairAdjustmentRecord*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontFeatureTable::$$c::$SortGlyphPairAdjustmentRecords$b__6_1
// Il2CppName: <SortGlyphPairAdjustmentRecords>b__6_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (TMP_FontFeatureTable::$$c::*)(TMPro::TMP_GlyphPairAdjustmentRecord*)>(&TMP_FontFeatureTable::$$c::$SortGlyphPairAdjustmentRecords$b__6_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontFeatureTable::$$c*), "<SortGlyphPairAdjustmentRecords>b__6_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_GlyphPairAdjustmentRecord*>()});
  }
};
// Writing MetadataGetter for method: TMP_FontFeatureTable::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontFeatureTable::$$c::*)()>(&TMP_FontFeatureTable::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontFeatureTable::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontFeatureTable::$$c::*)()>(&TMP_FontFeatureTable::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontFeatureTable::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.FontFeatureLookupFlags
#include "TMPro/FontFeatureLookupFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.FontFeatureLookupFlags IgnoreLigatures
TMPro::FontFeatureLookupFlags TMPro::FontFeatureLookupFlags::_get_IgnoreLigatures() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontFeatureLookupFlags::_get_IgnoreLigatures");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontFeatureLookupFlags>("TMPro", "FontFeatureLookupFlags", "IgnoreLigatures"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontFeatureLookupFlags IgnoreLigatures
void TMPro::FontFeatureLookupFlags::_set_IgnoreLigatures(TMPro::FontFeatureLookupFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontFeatureLookupFlags::_set_IgnoreLigatures");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontFeatureLookupFlags", "IgnoreLigatures", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontFeatureLookupFlags IgnoreSpacingAdjustments
TMPro::FontFeatureLookupFlags TMPro::FontFeatureLookupFlags::_get_IgnoreSpacingAdjustments() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontFeatureLookupFlags::_get_IgnoreSpacingAdjustments");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontFeatureLookupFlags>("TMPro", "FontFeatureLookupFlags", "IgnoreSpacingAdjustments"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontFeatureLookupFlags IgnoreSpacingAdjustments
void TMPro::FontFeatureLookupFlags::_set_IgnoreSpacingAdjustments(TMPro::FontFeatureLookupFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontFeatureLookupFlags::_set_IgnoreSpacingAdjustments");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontFeatureLookupFlags", "IgnoreSpacingAdjustments", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_GlyphValueRecord
#include "TMPro/TMP_GlyphValueRecord.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_GlyphValueRecord.get_xPlacement
float TMPro::TMP_GlyphValueRecord::get_xPlacement() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphValueRecord::get_xPlacement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_xPlacement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_GlyphValueRecord.set_xPlacement
void TMPro::TMP_GlyphValueRecord::set_xPlacement(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphValueRecord::set_xPlacement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_xPlacement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_GlyphValueRecord.get_yPlacement
float TMPro::TMP_GlyphValueRecord::get_yPlacement() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphValueRecord::get_yPlacement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_yPlacement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_GlyphValueRecord.set_yPlacement
void TMPro::TMP_GlyphValueRecord::set_yPlacement(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphValueRecord::set_yPlacement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_yPlacement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_GlyphValueRecord.get_xAdvance
float TMPro::TMP_GlyphValueRecord::get_xAdvance() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphValueRecord::get_xAdvance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_xAdvance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_GlyphValueRecord.set_xAdvance
void TMPro::TMP_GlyphValueRecord::set_xAdvance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphValueRecord::set_xAdvance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_xAdvance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_GlyphValueRecord.get_yAdvance
float TMPro::TMP_GlyphValueRecord::get_yAdvance() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphValueRecord::get_yAdvance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_yAdvance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_GlyphValueRecord.set_yAdvance
void TMPro::TMP_GlyphValueRecord::set_yAdvance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphValueRecord::set_yAdvance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_yAdvance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_GlyphValueRecord.op_Addition
TMPro::TMP_GlyphValueRecord TMPro::operator+(const TMPro::TMP_GlyphValueRecord& a, const TMPro::TMP_GlyphValueRecord& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphValueRecord::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_GlyphValueRecord", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_GlyphValueRecord, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Writing MetadataGetter for method: TMP_GlyphValueRecord::get_xPlacement
// Il2CppName: get_xPlacement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_GlyphValueRecord::*)()>(&TMP_GlyphValueRecord::get_xPlacement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphValueRecord), "get_xPlacement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_GlyphValueRecord::set_xPlacement
// Il2CppName: set_xPlacement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphValueRecord::*)(float)>(&TMP_GlyphValueRecord::set_xPlacement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphValueRecord), "set_xPlacement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_GlyphValueRecord::get_yPlacement
// Il2CppName: get_yPlacement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_GlyphValueRecord::*)()>(&TMP_GlyphValueRecord::get_yPlacement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphValueRecord), "get_yPlacement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_GlyphValueRecord::set_yPlacement
// Il2CppName: set_yPlacement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphValueRecord::*)(float)>(&TMP_GlyphValueRecord::set_yPlacement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphValueRecord), "set_yPlacement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_GlyphValueRecord::get_xAdvance
// Il2CppName: get_xAdvance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_GlyphValueRecord::*)()>(&TMP_GlyphValueRecord::get_xAdvance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphValueRecord), "get_xAdvance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_GlyphValueRecord::set_xAdvance
// Il2CppName: set_xAdvance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphValueRecord::*)(float)>(&TMP_GlyphValueRecord::set_xAdvance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphValueRecord), "set_xAdvance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_GlyphValueRecord::get_yAdvance
// Il2CppName: get_yAdvance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_GlyphValueRecord::*)()>(&TMP_GlyphValueRecord::get_yAdvance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphValueRecord), "get_yAdvance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_GlyphValueRecord::set_yAdvance
// Il2CppName: set_yAdvance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphValueRecord::*)(float)>(&TMP_GlyphValueRecord::set_yAdvance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphValueRecord), "set_yAdvance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_GlyphValueRecord::TMP_GlyphValueRecord
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphValueRecord::*)(float, float, float, float)>(&TMP_GlyphValueRecord::TMP_GlyphValueRecord<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphValueRecord), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphValueRecord::*)(float, float, float, float)>(&TMP_GlyphValueRecord::TMP_GlyphValueRecord<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphValueRecord), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_GlyphValueRecord::TMP_GlyphValueRecord
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphValueRecord::*)(TMPro::GlyphValueRecord_Legacy)>(&TMP_GlyphValueRecord::TMP_GlyphValueRecord<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphValueRecord), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::GlyphValueRecord_Legacy>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphValueRecord::*)(TMPro::GlyphValueRecord_Legacy)>(&TMP_GlyphValueRecord::TMP_GlyphValueRecord<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphValueRecord), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::GlyphValueRecord_Legacy>()});
  }
};
// Writing MetadataGetter for method: TMP_GlyphValueRecord::TMP_GlyphValueRecord
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphValueRecord::*)(UnityEngine::TextCore::LowLevel::GlyphValueRecord)>(&TMP_GlyphValueRecord::TMP_GlyphValueRecord<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphValueRecord), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::LowLevel::GlyphValueRecord>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphValueRecord::*)(UnityEngine::TextCore::LowLevel::GlyphValueRecord)>(&TMP_GlyphValueRecord::TMP_GlyphValueRecord<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphValueRecord), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::LowLevel::GlyphValueRecord>()});
  }
};
// Writing MetadataGetter for method: TMP_GlyphValueRecord::operator+
// Il2CppName: op_Addition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_GlyphValueRecord (*)(const TMPro::TMP_GlyphValueRecord&, const TMPro::TMP_GlyphValueRecord&)>(&TMP_GlyphValueRecord::operator+)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphValueRecord), "op_Addition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const TMPro::TMP_GlyphValueRecord&>(), ::il2cpp_utils::ExtractIndependentType<const TMPro::TMP_GlyphValueRecord&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_GlyphAdjustmentRecord
#include "TMPro/TMP_GlyphAdjustmentRecord.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_GlyphAdjustmentRecord.get_glyphIndex
uint TMPro::TMP_GlyphAdjustmentRecord::get_glyphIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphAdjustmentRecord::get_glyphIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_glyphIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(*this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_GlyphAdjustmentRecord.set_glyphIndex
void TMPro::TMP_GlyphAdjustmentRecord::set_glyphIndex(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphAdjustmentRecord::set_glyphIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_glyphIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_GlyphAdjustmentRecord.get_glyphValueRecord
TMPro::TMP_GlyphValueRecord TMPro::TMP_GlyphAdjustmentRecord::get_glyphValueRecord() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphAdjustmentRecord::get_glyphValueRecord");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_glyphValueRecord", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_GlyphValueRecord, false>(*this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_GlyphAdjustmentRecord.set_glyphValueRecord
void TMPro::TMP_GlyphAdjustmentRecord::set_glyphValueRecord(TMPro::TMP_GlyphValueRecord value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphAdjustmentRecord::set_glyphValueRecord");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_glyphValueRecord", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Writing MetadataGetter for method: TMP_GlyphAdjustmentRecord::get_glyphIndex
// Il2CppName: get_glyphIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (TMP_GlyphAdjustmentRecord::*)()>(&TMP_GlyphAdjustmentRecord::get_glyphIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphAdjustmentRecord), "get_glyphIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_GlyphAdjustmentRecord::set_glyphIndex
// Il2CppName: set_glyphIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphAdjustmentRecord::*)(uint)>(&TMP_GlyphAdjustmentRecord::set_glyphIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphAdjustmentRecord), "set_glyphIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: TMP_GlyphAdjustmentRecord::get_glyphValueRecord
// Il2CppName: get_glyphValueRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_GlyphValueRecord (TMP_GlyphAdjustmentRecord::*)()>(&TMP_GlyphAdjustmentRecord::get_glyphValueRecord)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphAdjustmentRecord), "get_glyphValueRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_GlyphAdjustmentRecord::set_glyphValueRecord
// Il2CppName: set_glyphValueRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphAdjustmentRecord::*)(TMPro::TMP_GlyphValueRecord)>(&TMP_GlyphAdjustmentRecord::set_glyphValueRecord)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphAdjustmentRecord), "set_glyphValueRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_GlyphValueRecord>()});
  }
};
// Writing MetadataGetter for method: TMP_GlyphAdjustmentRecord::TMP_GlyphAdjustmentRecord
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphAdjustmentRecord::*)(uint, TMPro::TMP_GlyphValueRecord)>(&TMP_GlyphAdjustmentRecord::TMP_GlyphAdjustmentRecord<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphAdjustmentRecord), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_GlyphValueRecord>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphAdjustmentRecord::*)(uint, TMPro::TMP_GlyphValueRecord)>(&TMP_GlyphAdjustmentRecord::TMP_GlyphAdjustmentRecord<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphAdjustmentRecord), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_GlyphValueRecord>()});
  }
};
// Writing MetadataGetter for method: TMP_GlyphAdjustmentRecord::TMP_GlyphAdjustmentRecord
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphAdjustmentRecord::*)(UnityEngine::TextCore::LowLevel::GlyphAdjustmentRecord)>(&TMP_GlyphAdjustmentRecord::TMP_GlyphAdjustmentRecord<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphAdjustmentRecord), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::LowLevel::GlyphAdjustmentRecord>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphAdjustmentRecord::*)(UnityEngine::TextCore::LowLevel::GlyphAdjustmentRecord)>(&TMP_GlyphAdjustmentRecord::TMP_GlyphAdjustmentRecord<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphAdjustmentRecord), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::LowLevel::GlyphAdjustmentRecord>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_GlyphPairAdjustmentRecord
#include "TMPro/TMP_GlyphPairAdjustmentRecord.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_GlyphPairAdjustmentRecord.get_firstAdjustmentRecord
TMPro::TMP_GlyphAdjustmentRecord TMPro::TMP_GlyphPairAdjustmentRecord::get_firstAdjustmentRecord() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphPairAdjustmentRecord::get_firstAdjustmentRecord");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_firstAdjustmentRecord", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_GlyphAdjustmentRecord, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_GlyphPairAdjustmentRecord.set_firstAdjustmentRecord
void TMPro::TMP_GlyphPairAdjustmentRecord::set_firstAdjustmentRecord(TMPro::TMP_GlyphAdjustmentRecord value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphPairAdjustmentRecord::set_firstAdjustmentRecord");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_firstAdjustmentRecord", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_GlyphPairAdjustmentRecord.get_secondAdjustmentRecord
TMPro::TMP_GlyphAdjustmentRecord TMPro::TMP_GlyphPairAdjustmentRecord::get_secondAdjustmentRecord() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphPairAdjustmentRecord::get_secondAdjustmentRecord");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_secondAdjustmentRecord", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_GlyphAdjustmentRecord, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_GlyphPairAdjustmentRecord.set_secondAdjustmentRecord
void TMPro::TMP_GlyphPairAdjustmentRecord::set_secondAdjustmentRecord(TMPro::TMP_GlyphAdjustmentRecord value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphPairAdjustmentRecord::set_secondAdjustmentRecord");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_secondAdjustmentRecord", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_GlyphPairAdjustmentRecord.get_featureLookupFlags
TMPro::FontFeatureLookupFlags TMPro::TMP_GlyphPairAdjustmentRecord::get_featureLookupFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphPairAdjustmentRecord::get_featureLookupFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_featureLookupFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::FontFeatureLookupFlags, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_GlyphPairAdjustmentRecord.set_featureLookupFlags
void TMPro::TMP_GlyphPairAdjustmentRecord::set_featureLookupFlags(TMPro::FontFeatureLookupFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_GlyphPairAdjustmentRecord::set_featureLookupFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_featureLookupFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: TMP_GlyphPairAdjustmentRecord::get_firstAdjustmentRecord
// Il2CppName: get_firstAdjustmentRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_GlyphAdjustmentRecord (TMP_GlyphPairAdjustmentRecord::*)()>(&TMP_GlyphPairAdjustmentRecord::get_firstAdjustmentRecord)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphPairAdjustmentRecord*), "get_firstAdjustmentRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_GlyphPairAdjustmentRecord::set_firstAdjustmentRecord
// Il2CppName: set_firstAdjustmentRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphPairAdjustmentRecord::*)(TMPro::TMP_GlyphAdjustmentRecord)>(&TMP_GlyphPairAdjustmentRecord::set_firstAdjustmentRecord)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphPairAdjustmentRecord*), "set_firstAdjustmentRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_GlyphAdjustmentRecord>()});
  }
};
// Writing MetadataGetter for method: TMP_GlyphPairAdjustmentRecord::get_secondAdjustmentRecord
// Il2CppName: get_secondAdjustmentRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_GlyphAdjustmentRecord (TMP_GlyphPairAdjustmentRecord::*)()>(&TMP_GlyphPairAdjustmentRecord::get_secondAdjustmentRecord)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphPairAdjustmentRecord*), "get_secondAdjustmentRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_GlyphPairAdjustmentRecord::set_secondAdjustmentRecord
// Il2CppName: set_secondAdjustmentRecord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphPairAdjustmentRecord::*)(TMPro::TMP_GlyphAdjustmentRecord)>(&TMP_GlyphPairAdjustmentRecord::set_secondAdjustmentRecord)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphPairAdjustmentRecord*), "set_secondAdjustmentRecord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_GlyphAdjustmentRecord>()});
  }
};
// Writing MetadataGetter for method: TMP_GlyphPairAdjustmentRecord::get_featureLookupFlags
// Il2CppName: get_featureLookupFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::FontFeatureLookupFlags (TMP_GlyphPairAdjustmentRecord::*)()>(&TMP_GlyphPairAdjustmentRecord::get_featureLookupFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphPairAdjustmentRecord*), "get_featureLookupFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_GlyphPairAdjustmentRecord::set_featureLookupFlags
// Il2CppName: set_featureLookupFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphPairAdjustmentRecord::*)(TMPro::FontFeatureLookupFlags)>(&TMP_GlyphPairAdjustmentRecord::set_featureLookupFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphPairAdjustmentRecord*), "set_featureLookupFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::FontFeatureLookupFlags>()});
  }
};
// Writing MetadataGetter for method: TMP_GlyphPairAdjustmentRecord::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphPairAdjustmentRecord::*)(TMPro::TMP_GlyphAdjustmentRecord, TMPro::TMP_GlyphAdjustmentRecord)>(&TMP_GlyphPairAdjustmentRecord::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphPairAdjustmentRecord*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_GlyphAdjustmentRecord>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_GlyphAdjustmentRecord>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphPairAdjustmentRecord::*)(TMPro::TMP_GlyphAdjustmentRecord, TMPro::TMP_GlyphAdjustmentRecord)>(&TMP_GlyphPairAdjustmentRecord::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphPairAdjustmentRecord*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_GlyphAdjustmentRecord>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_GlyphAdjustmentRecord>()});
  }
};
// Writing MetadataGetter for method: TMP_GlyphPairAdjustmentRecord::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphPairAdjustmentRecord::*)(UnityEngine::TextCore::LowLevel::GlyphPairAdjustmentRecord)>(&TMP_GlyphPairAdjustmentRecord::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphPairAdjustmentRecord*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::LowLevel::GlyphPairAdjustmentRecord>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_GlyphPairAdjustmentRecord::*)(UnityEngine::TextCore::LowLevel::GlyphPairAdjustmentRecord)>(&TMP_GlyphPairAdjustmentRecord::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_GlyphPairAdjustmentRecord*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::LowLevel::GlyphPairAdjustmentRecord>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.GlyphPairKey
#include "TMPro/GlyphPairKey.hpp"
// Including type: TMPro.TMP_GlyphPairAdjustmentRecord
#include "TMPro/TMP_GlyphPairAdjustmentRecord.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GlyphPairKey::GlyphPairKey
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlyphPairKey::*)(uint, uint)>(&GlyphPairKey::GlyphPairKey<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlyphPairKey), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlyphPairKey::*)(uint, uint)>(&GlyphPairKey::GlyphPairKey<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlyphPairKey), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: GlyphPairKey::GlyphPairKey
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlyphPairKey::*)(TMPro::TMP_GlyphPairAdjustmentRecord*)>(&GlyphPairKey::GlyphPairKey<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlyphPairKey), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_GlyphPairAdjustmentRecord*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlyphPairKey::*)(TMPro::TMP_GlyphPairAdjustmentRecord*)>(&GlyphPairKey::GlyphPairKey<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlyphPairKey), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_GlyphPairAdjustmentRecord*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_InputField
#include "TMPro/TMP_InputField.hpp"
// Including type: UnityEngine.WaitForSecondsRealtime
#include "UnityEngine/WaitForSecondsRealtime.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: UnityEngine.CanvasRenderer
#include "UnityEngine/CanvasRenderer.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: TMPro.TMP_InputField/OnValidateInput
#include "TMPro/TMP_InputField_OnValidateInput.hpp"
// Including type: TMPro.TMP_InputField/SubmitEvent
#include "TMPro/TMP_InputField_SubmitEvent.hpp"
// Including type: TMPro.TMP_InputField/OnChangeEvent
#include "TMPro/TMP_InputField_OnChangeEvent.hpp"
// Including type: TMPro.TMP_InputField/SelectionEvent
#include "TMPro/TMP_InputField_SelectionEvent.hpp"
// Including type: TMPro.TMP_InputField/TextSelectionEvent
#include "TMPro/TMP_InputField_TextSelectionEvent.hpp"
// Including type: TMPro.TMP_InputField/TouchScreenKeyboardEvent
#include "TMPro/TMP_InputField_TouchScreenKeyboardEvent.hpp"
// Including type: TMPro.TMP_InputField/EditState
#include "TMPro/TMP_InputField_EditState.hpp"
// Including type: TMPro.TMP_InputField/<CaretBlink>d__267
#include "TMPro/TMP_InputField_-CaretBlink-d__267.hpp"
// Including type: TMPro.TMP_InputField/<MouseDragOutsideRect>d__285
#include "TMPro/TMP_InputField_-MouseDragOutsideRect-d__285.hpp"
// Including type: UnityEngine.TouchScreenKeyboard
#include "UnityEngine/TouchScreenKeyboard.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
// Including type: UnityEngine.UI.Graphic
#include "UnityEngine/UI/Graphic.hpp"
// Including type: UnityEngine.UI.Scrollbar
#include "UnityEngine/UI/Scrollbar.hpp"
// Including type: TMPro.TMP_ScrollbarEventHandler
#include "TMPro/TMP_ScrollbarEventHandler.hpp"
// Including type: TMPro.TMP_FontAsset
#include "TMPro/TMP_FontAsset.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: TMPro.TMP_InputValidator
#include "TMPro/TMP_InputValidator.hpp"
// Including type: UnityEngine.Event
#include "UnityEngine/Event.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.EventSystems.BaseInput
#include "UnityEngine/EventSystems/BaseInput.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.EventSystems.BaseEventData
#include "UnityEngine/EventSystems/BaseEventData.hpp"
// Including type: UnityEngine.UI.CanvasUpdate
#include "UnityEngine/UI/CanvasUpdate.hpp"
// Including type: UnityEngine.UI.VertexHelper
#include "UnityEngine/UI/VertexHelper.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.UI.Selectable/SelectionState
#include "UnityEngine/UI/Selectable_SelectionState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Char[] kSeparators
::Array<::Il2CppChar>* TMPro::TMP_InputField::_get_kSeparators() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::_get_kSeparators");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<::Il2CppChar>*>("TMPro", "TMP_InputField", "kSeparators"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Char[] kSeparators
void TMPro::TMP_InputField::_set_kSeparators(::Array<::Il2CppChar>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::_set_kSeparators");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField", "kSeparators", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kHScrollSpeed
float TMPro::TMP_InputField::_get_kHScrollSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::_get_kHScrollSpeed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("TMPro", "TMP_InputField", "kHScrollSpeed"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kHScrollSpeed
void TMPro::TMP_InputField::_set_kHScrollSpeed(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::_set_kHScrollSpeed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField", "kHScrollSpeed", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kVScrollSpeed
float TMPro::TMP_InputField::_get_kVScrollSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::_get_kVScrollSpeed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("TMPro", "TMP_InputField", "kVScrollSpeed"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kVScrollSpeed
void TMPro::TMP_InputField::_set_kVScrollSpeed(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::_set_kVScrollSpeed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField", "kVScrollSpeed", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kEmailSpecialCharacters
::Il2CppString* TMPro::TMP_InputField::_get_kEmailSpecialCharacters() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::_get_kEmailSpecialCharacters");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("TMPro", "TMP_InputField", "kEmailSpecialCharacters"));
}
// Autogenerated static field setter
// Set static field: static private System.String kEmailSpecialCharacters
void TMPro::TMP_InputField::_set_kEmailSpecialCharacters(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::_set_kEmailSpecialCharacters");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField", "kEmailSpecialCharacters", value));
}
// Autogenerated method: TMPro.TMP_InputField.get_inputSystem
UnityEngine::EventSystems::BaseInput* TMPro::TMP_InputField::get_inputSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_inputSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inputSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::EventSystems::BaseInput*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.get_compositionString
::Il2CppString* TMPro::TMP_InputField::get_compositionString() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_compositionString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_compositionString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.get_mesh
UnityEngine::Mesh* TMPro::TMP_InputField::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.get_shouldHideMobileInput
bool TMPro::TMP_InputField::get_shouldHideMobileInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_shouldHideMobileInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shouldHideMobileInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_shouldHideMobileInput
void TMPro::TMP_InputField::set_shouldHideMobileInput(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_shouldHideMobileInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_shouldHideMobileInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_shouldHideSoftKeyboard
bool TMPro::TMP_InputField::get_shouldHideSoftKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_shouldHideSoftKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shouldHideSoftKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_shouldHideSoftKeyboard
void TMPro::TMP_InputField::set_shouldHideSoftKeyboard(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_shouldHideSoftKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_shouldHideSoftKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.isKeyboardUsingEvents
bool TMPro::TMP_InputField::isKeyboardUsingEvents() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::isKeyboardUsingEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "isKeyboardUsingEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.get_text
::Il2CppString* TMPro::TMP_InputField::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_text
void TMPro::TMP_InputField::set_text(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.SetTextWithoutNotify
void TMPro::TMP_InputField::SetTextWithoutNotify(::Il2CppString* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SetTextWithoutNotify");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTextWithoutNotify", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input);
}
// Autogenerated method: TMPro.TMP_InputField.SetText
void TMPro::TMP_InputField::SetText(::Il2CppString* value, bool sendCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(sendCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value, sendCallback);
}
// Autogenerated method: TMPro.TMP_InputField.get_isFocused
bool TMPro::TMP_InputField::get_isFocused() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_isFocused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFocused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.get_caretBlinkRate
float TMPro::TMP_InputField::get_caretBlinkRate() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_caretBlinkRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_caretBlinkRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_caretBlinkRate
void TMPro::TMP_InputField::set_caretBlinkRate(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_caretBlinkRate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_caretBlinkRate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_caretWidth
int TMPro::TMP_InputField::get_caretWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_caretWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_caretWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_caretWidth
void TMPro::TMP_InputField::set_caretWidth(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_caretWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_caretWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_textViewport
UnityEngine::RectTransform* TMPro::TMP_InputField::get_textViewport() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_textViewport");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textViewport", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_textViewport
void TMPro::TMP_InputField::set_textViewport(UnityEngine::RectTransform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_textViewport");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_textViewport", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_textComponent
TMPro::TMP_Text* TMPro::TMP_InputField::get_textComponent() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_textComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_Text*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_textComponent
void TMPro::TMP_InputField::set_textComponent(TMPro::TMP_Text* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_textComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_textComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_placeholder
UnityEngine::UI::Graphic* TMPro::TMP_InputField::get_placeholder() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_placeholder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_placeholder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::Graphic*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_placeholder
void TMPro::TMP_InputField::set_placeholder(UnityEngine::UI::Graphic* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_placeholder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_placeholder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_verticalScrollbar
UnityEngine::UI::Scrollbar* TMPro::TMP_InputField::get_verticalScrollbar() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_verticalScrollbar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_verticalScrollbar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::Scrollbar*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_verticalScrollbar
void TMPro::TMP_InputField::set_verticalScrollbar(UnityEngine::UI::Scrollbar* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_verticalScrollbar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_verticalScrollbar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_scrollSensitivity
float TMPro::TMP_InputField::get_scrollSensitivity() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_scrollSensitivity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scrollSensitivity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_scrollSensitivity
void TMPro::TMP_InputField::set_scrollSensitivity(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_scrollSensitivity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_scrollSensitivity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_caretColor
UnityEngine::Color TMPro::TMP_InputField::get_caretColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_caretColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_caretColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_caretColor
void TMPro::TMP_InputField::set_caretColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_caretColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_caretColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_customCaretColor
bool TMPro::TMP_InputField::get_customCaretColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_customCaretColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_customCaretColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_customCaretColor
void TMPro::TMP_InputField::set_customCaretColor(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_customCaretColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_customCaretColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_selectionColor
UnityEngine::Color TMPro::TMP_InputField::get_selectionColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_selectionColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_selectionColor
void TMPro::TMP_InputField::set_selectionColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_selectionColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_selectionColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_onEndEdit
TMPro::TMP_InputField::SubmitEvent* TMPro::TMP_InputField::get_onEndEdit() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_onEndEdit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onEndEdit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_InputField::SubmitEvent*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_onEndEdit
void TMPro::TMP_InputField::set_onEndEdit(TMPro::TMP_InputField::SubmitEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_onEndEdit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_onEndEdit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_onSubmit
TMPro::TMP_InputField::SubmitEvent* TMPro::TMP_InputField::get_onSubmit() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_onSubmit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onSubmit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_InputField::SubmitEvent*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_onSubmit
void TMPro::TMP_InputField::set_onSubmit(TMPro::TMP_InputField::SubmitEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_onSubmit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_onSubmit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_onSelect
TMPro::TMP_InputField::SelectionEvent* TMPro::TMP_InputField::get_onSelect() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_onSelect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onSelect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_InputField::SelectionEvent*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_onSelect
void TMPro::TMP_InputField::set_onSelect(TMPro::TMP_InputField::SelectionEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_onSelect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_onSelect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_onDeselect
TMPro::TMP_InputField::SelectionEvent* TMPro::TMP_InputField::get_onDeselect() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_onDeselect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onDeselect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_InputField::SelectionEvent*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_onDeselect
void TMPro::TMP_InputField::set_onDeselect(TMPro::TMP_InputField::SelectionEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_onDeselect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_onDeselect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_onTextSelection
TMPro::TMP_InputField::TextSelectionEvent* TMPro::TMP_InputField::get_onTextSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_onTextSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onTextSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_InputField::TextSelectionEvent*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_onTextSelection
void TMPro::TMP_InputField::set_onTextSelection(TMPro::TMP_InputField::TextSelectionEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_onTextSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_onTextSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_onEndTextSelection
TMPro::TMP_InputField::TextSelectionEvent* TMPro::TMP_InputField::get_onEndTextSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_onEndTextSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onEndTextSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_InputField::TextSelectionEvent*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_onEndTextSelection
void TMPro::TMP_InputField::set_onEndTextSelection(TMPro::TMP_InputField::TextSelectionEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_onEndTextSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_onEndTextSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_onValueChanged
TMPro::TMP_InputField::OnChangeEvent* TMPro::TMP_InputField::get_onValueChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_onValueChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_InputField::OnChangeEvent*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_onValueChanged
void TMPro::TMP_InputField::set_onValueChanged(TMPro::TMP_InputField::OnChangeEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_onValueChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_onValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_onTouchScreenKeyboardStatusChanged
TMPro::TMP_InputField::TouchScreenKeyboardEvent* TMPro::TMP_InputField::get_onTouchScreenKeyboardStatusChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_onTouchScreenKeyboardStatusChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onTouchScreenKeyboardStatusChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_InputField::TouchScreenKeyboardEvent*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_onTouchScreenKeyboardStatusChanged
void TMPro::TMP_InputField::set_onTouchScreenKeyboardStatusChanged(TMPro::TMP_InputField::TouchScreenKeyboardEvent* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_onTouchScreenKeyboardStatusChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_onTouchScreenKeyboardStatusChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_onValidateInput
TMPro::TMP_InputField::OnValidateInput* TMPro::TMP_InputField::get_onValidateInput() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_onValidateInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onValidateInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_InputField::OnValidateInput*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_onValidateInput
void TMPro::TMP_InputField::set_onValidateInput(TMPro::TMP_InputField::OnValidateInput* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_onValidateInput");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_onValidateInput", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_characterLimit
int TMPro::TMP_InputField::get_characterLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_characterLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_characterLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_characterLimit
void TMPro::TMP_InputField::set_characterLimit(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_characterLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_characterLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_pointSize
float TMPro::TMP_InputField::get_pointSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_pointSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pointSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_pointSize
void TMPro::TMP_InputField::set_pointSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_pointSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pointSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_fontAsset
TMPro::TMP_FontAsset* TMPro::TMP_InputField::get_fontAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_fontAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_FontAsset*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_fontAsset
void TMPro::TMP_InputField::set_fontAsset(TMPro::TMP_FontAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_fontAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_onFocusSelectAll
bool TMPro::TMP_InputField::get_onFocusSelectAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_onFocusSelectAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_onFocusSelectAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_onFocusSelectAll
void TMPro::TMP_InputField::set_onFocusSelectAll(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_onFocusSelectAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_onFocusSelectAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_resetOnDeActivation
bool TMPro::TMP_InputField::get_resetOnDeActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_resetOnDeActivation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resetOnDeActivation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_resetOnDeActivation
void TMPro::TMP_InputField::set_resetOnDeActivation(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_resetOnDeActivation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_resetOnDeActivation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_restoreOriginalTextOnEscape
bool TMPro::TMP_InputField::get_restoreOriginalTextOnEscape() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_restoreOriginalTextOnEscape");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_restoreOriginalTextOnEscape", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_restoreOriginalTextOnEscape
void TMPro::TMP_InputField::set_restoreOriginalTextOnEscape(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_restoreOriginalTextOnEscape");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_restoreOriginalTextOnEscape", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_isRichTextEditingAllowed
bool TMPro::TMP_InputField::get_isRichTextEditingAllowed() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_isRichTextEditingAllowed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRichTextEditingAllowed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_isRichTextEditingAllowed
void TMPro::TMP_InputField::set_isRichTextEditingAllowed(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_isRichTextEditingAllowed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isRichTextEditingAllowed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_contentType
TMPro::TMP_InputField::ContentType TMPro::TMP_InputField::get_contentType() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_contentType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_contentType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_InputField::ContentType, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_contentType
void TMPro::TMP_InputField::set_contentType(TMPro::TMP_InputField::ContentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_contentType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_contentType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_lineType
TMPro::TMP_InputField::LineType TMPro::TMP_InputField::get_lineType() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_lineType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lineType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_InputField::LineType, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_lineType
void TMPro::TMP_InputField::set_lineType(TMPro::TMP_InputField::LineType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_lineType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lineType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_lineLimit
int TMPro::TMP_InputField::get_lineLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_lineLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lineLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_lineLimit
void TMPro::TMP_InputField::set_lineLimit(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_lineLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lineLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_inputType
TMPro::TMP_InputField::InputType TMPro::TMP_InputField::get_inputType() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_inputType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inputType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_InputField::InputType, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_inputType
void TMPro::TMP_InputField::set_inputType(TMPro::TMP_InputField::InputType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_inputType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_inputType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_keyboardType
UnityEngine::TouchScreenKeyboardType TMPro::TMP_InputField::get_keyboardType() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_keyboardType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_keyboardType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::TouchScreenKeyboardType, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_keyboardType
void TMPro::TMP_InputField::set_keyboardType(UnityEngine::TouchScreenKeyboardType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_keyboardType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_keyboardType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_characterValidation
TMPro::TMP_InputField::CharacterValidation TMPro::TMP_InputField::get_characterValidation() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_characterValidation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_characterValidation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_InputField::CharacterValidation, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_characterValidation
void TMPro::TMP_InputField::set_characterValidation(TMPro::TMP_InputField::CharacterValidation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_characterValidation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_characterValidation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_inputValidator
TMPro::TMP_InputValidator* TMPro::TMP_InputField::get_inputValidator() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_inputValidator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inputValidator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_InputValidator*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_inputValidator
void TMPro::TMP_InputField::set_inputValidator(TMPro::TMP_InputValidator* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_inputValidator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_inputValidator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_readOnly
bool TMPro::TMP_InputField::get_readOnly() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_readOnly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_readOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_readOnly
void TMPro::TMP_InputField::set_readOnly(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_readOnly");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_readOnly", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_richText
bool TMPro::TMP_InputField::get_richText() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_richText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_richText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_richText
void TMPro::TMP_InputField::set_richText(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_richText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_richText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_multiLine
bool TMPro::TMP_InputField::get_multiLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_multiLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_multiLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.get_asteriskChar
::Il2CppChar TMPro::TMP_InputField::get_asteriskChar() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_asteriskChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_asteriskChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_asteriskChar
void TMPro::TMP_InputField::set_asteriskChar(::Il2CppChar value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_asteriskChar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_asteriskChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_wasCanceled
bool TMPro::TMP_InputField::get_wasCanceled() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_wasCanceled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_wasCanceled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.ClampStringPos
void TMPro::TMP_InputField::ClampStringPos(int& pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ClampStringPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClampStringPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated method: TMPro.TMP_InputField.ClampCaretPos
void TMPro::TMP_InputField::ClampCaretPos(int& pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ClampCaretPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClampCaretPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos);
}
// Autogenerated method: TMPro.TMP_InputField.get_caretPositionInternal
int TMPro::TMP_InputField::get_caretPositionInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_caretPositionInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_caretPositionInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_caretPositionInternal
void TMPro::TMP_InputField::set_caretPositionInternal(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_caretPositionInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_caretPositionInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_stringPositionInternal
int TMPro::TMP_InputField::get_stringPositionInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_stringPositionInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stringPositionInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_stringPositionInternal
void TMPro::TMP_InputField::set_stringPositionInternal(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_stringPositionInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_stringPositionInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_caretSelectPositionInternal
int TMPro::TMP_InputField::get_caretSelectPositionInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_caretSelectPositionInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_caretSelectPositionInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_caretSelectPositionInternal
void TMPro::TMP_InputField::set_caretSelectPositionInternal(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_caretSelectPositionInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_caretSelectPositionInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_stringSelectPositionInternal
int TMPro::TMP_InputField::get_stringSelectPositionInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_stringSelectPositionInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stringSelectPositionInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_stringSelectPositionInternal
void TMPro::TMP_InputField::set_stringSelectPositionInternal(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_stringSelectPositionInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_stringSelectPositionInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_caretPosition
int TMPro::TMP_InputField::get_caretPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_caretPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_caretPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_caretPosition
void TMPro::TMP_InputField::set_caretPosition(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_caretPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_caretPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_selectionAnchorPosition
int TMPro::TMP_InputField::get_selectionAnchorPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_selectionAnchorPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionAnchorPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_selectionAnchorPosition
void TMPro::TMP_InputField::set_selectionAnchorPosition(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_selectionAnchorPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_selectionAnchorPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_selectionFocusPosition
int TMPro::TMP_InputField::get_selectionFocusPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_selectionFocusPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionFocusPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_selectionFocusPosition
void TMPro::TMP_InputField::set_selectionFocusPosition(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_selectionFocusPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_selectionFocusPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_stringPosition
int TMPro::TMP_InputField::get_stringPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_stringPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stringPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_stringPosition
void TMPro::TMP_InputField::set_stringPosition(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_stringPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_stringPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_selectionStringAnchorPosition
int TMPro::TMP_InputField::get_selectionStringAnchorPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_selectionStringAnchorPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionStringAnchorPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_selectionStringAnchorPosition
void TMPro::TMP_InputField::set_selectionStringAnchorPosition(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_selectionStringAnchorPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_selectionStringAnchorPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.get_selectionStringFocusPosition
int TMPro::TMP_InputField::get_selectionStringFocusPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_selectionStringFocusPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectionStringFocusPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_selectionStringFocusPosition
void TMPro::TMP_InputField::set_selectionStringFocusPosition(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_selectionStringFocusPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_selectionStringFocusPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.ON_TEXT_CHANGED
void TMPro::TMP_InputField::ON_TEXT_CHANGED(UnityEngine::Object* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ON_TEXT_CHANGED");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ON_TEXT_CHANGED", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: TMPro.TMP_InputField.CaretBlink
System::Collections::IEnumerator* TMPro::TMP_InputField::CaretBlink() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CaretBlink");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CaretBlink", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SetCaretVisible
void TMPro::TMP_InputField::SetCaretVisible() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SetCaretVisible");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCaretVisible", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SetCaretActive
void TMPro::TMP_InputField::SetCaretActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SetCaretActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCaretActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.OnFocus
void TMPro::TMP_InputField::OnFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SelectAll
void TMPro::TMP_InputField::SelectAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SelectAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.MoveTextEnd
void TMPro::TMP_InputField::MoveTextEnd(bool shift) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MoveTextEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveTextEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shift)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shift);
}
// Autogenerated method: TMPro.TMP_InputField.MoveTextStart
void TMPro::TMP_InputField::MoveTextStart(bool shift) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MoveTextStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveTextStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shift)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shift);
}
// Autogenerated method: TMPro.TMP_InputField.MoveToEndOfLine
void TMPro::TMP_InputField::MoveToEndOfLine(bool shift, bool ctrl) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MoveToEndOfLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveToEndOfLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shift), ::il2cpp_utils::ExtractType(ctrl)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shift, ctrl);
}
// Autogenerated method: TMPro.TMP_InputField.MoveToStartOfLine
void TMPro::TMP_InputField::MoveToStartOfLine(bool shift, bool ctrl) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MoveToStartOfLine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveToStartOfLine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shift), ::il2cpp_utils::ExtractType(ctrl)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shift, ctrl);
}
// Autogenerated method: TMPro.TMP_InputField.get_clipboard
::Il2CppString* TMPro::TMP_InputField::get_clipboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_clipboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_InputField", "get_clipboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.set_clipboard
void TMPro::TMP_InputField::set_clipboard(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::set_clipboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_InputField", "set_clipboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.InPlaceEditing
bool TMPro::TMP_InputField::InPlaceEditing() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::InPlaceEditing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InPlaceEditing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.UpdateStringPositionFromKeyboard
void TMPro::TMP_InputField::UpdateStringPositionFromKeyboard() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::UpdateStringPositionFromKeyboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStringPositionFromKeyboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.LateUpdate
void TMPro::TMP_InputField::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::LateUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.MayDrag
bool TMPro::TMP_InputField::MayDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MayDrag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MayDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eventData);
}
// Autogenerated method: TMPro.TMP_InputField.OnBeginDrag
void TMPro::TMP_InputField::OnBeginDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnBeginDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeginDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: TMPro.TMP_InputField.OnDrag
void TMPro::TMP_InputField::OnDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: TMPro.TMP_InputField.MouseDragOutsideRect
System::Collections::IEnumerator* TMPro::TMP_InputField::MouseDragOutsideRect(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MouseDragOutsideRect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MouseDragOutsideRect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, eventData);
}
// Autogenerated method: TMPro.TMP_InputField.OnEndDrag
void TMPro::TMP_InputField::OnEndDrag(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnEndDrag");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEndDrag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: TMPro.TMP_InputField.KeyPressed
TMPro::TMP_InputField::EditState TMPro::TMP_InputField::KeyPressed(UnityEngine::Event* evt) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::KeyPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "KeyPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(evt)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_InputField::EditState, false>(this, ___internal__method, evt);
}
// Autogenerated method: TMPro.TMP_InputField.IsValidChar
bool TMPro::TMP_InputField::IsValidChar(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::IsValidChar");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValidChar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_InputField.ProcessEvent
void TMPro::TMP_InputField::ProcessEvent(UnityEngine::Event* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ProcessEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, e);
}
// Autogenerated method: TMPro.TMP_InputField.OnUpdateSelected
void TMPro::TMP_InputField::OnUpdateSelected(UnityEngine::EventSystems::BaseEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnUpdateSelected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdateSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: TMPro.TMP_InputField.OnScroll
void TMPro::TMP_InputField::OnScroll(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnScroll");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnScroll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: TMPro.TMP_InputField.GetSelectedString
::Il2CppString* TMPro::TMP_InputField::GetSelectedString() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::GetSelectedString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSelectedString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.FindNextWordBegin
int TMPro::TMP_InputField::FindNextWordBegin() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::FindNextWordBegin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindNextWordBegin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.MoveRight
void TMPro::TMP_InputField::MoveRight(bool shift, bool ctrl) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MoveRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shift), ::il2cpp_utils::ExtractType(ctrl)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shift, ctrl);
}
// Autogenerated method: TMPro.TMP_InputField.FindPrevWordBegin
int TMPro::TMP_InputField::FindPrevWordBegin() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::FindPrevWordBegin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindPrevWordBegin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.MoveLeft
void TMPro::TMP_InputField::MoveLeft(bool shift, bool ctrl) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MoveLeft");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveLeft", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shift), ::il2cpp_utils::ExtractType(ctrl)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shift, ctrl);
}
// Autogenerated method: TMPro.TMP_InputField.LineUpCharacterPosition
int TMPro::TMP_InputField::LineUpCharacterPosition(int originalPos, bool goToFirstChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::LineUpCharacterPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LineUpCharacterPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(originalPos), ::il2cpp_utils::ExtractType(goToFirstChar)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, originalPos, goToFirstChar);
}
// Autogenerated method: TMPro.TMP_InputField.LineDownCharacterPosition
int TMPro::TMP_InputField::LineDownCharacterPosition(int originalPos, bool goToLastChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::LineDownCharacterPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LineDownCharacterPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(originalPos), ::il2cpp_utils::ExtractType(goToLastChar)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, originalPos, goToLastChar);
}
// Autogenerated method: TMPro.TMP_InputField.PageUpCharacterPosition
int TMPro::TMP_InputField::PageUpCharacterPosition(int originalPos, bool goToFirstChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::PageUpCharacterPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PageUpCharacterPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(originalPos), ::il2cpp_utils::ExtractType(goToFirstChar)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, originalPos, goToFirstChar);
}
// Autogenerated method: TMPro.TMP_InputField.PageDownCharacterPosition
int TMPro::TMP_InputField::PageDownCharacterPosition(int originalPos, bool goToLastChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::PageDownCharacterPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PageDownCharacterPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(originalPos), ::il2cpp_utils::ExtractType(goToLastChar)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, originalPos, goToLastChar);
}
// Autogenerated method: TMPro.TMP_InputField.MoveDown
void TMPro::TMP_InputField::MoveDown(bool shift) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MoveDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shift)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shift);
}
// Autogenerated method: TMPro.TMP_InputField.MoveDown
void TMPro::TMP_InputField::MoveDown(bool shift, bool goToLastChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MoveDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shift), ::il2cpp_utils::ExtractType(goToLastChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shift, goToLastChar);
}
// Autogenerated method: TMPro.TMP_InputField.MoveUp
void TMPro::TMP_InputField::MoveUp(bool shift) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MoveUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shift)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shift);
}
// Autogenerated method: TMPro.TMP_InputField.MoveUp
void TMPro::TMP_InputField::MoveUp(bool shift, bool goToFirstChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MoveUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shift), ::il2cpp_utils::ExtractType(goToFirstChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shift, goToFirstChar);
}
// Autogenerated method: TMPro.TMP_InputField.MovePageUp
void TMPro::TMP_InputField::MovePageUp(bool shift) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MovePageUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MovePageUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shift)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shift);
}
// Autogenerated method: TMPro.TMP_InputField.MovePageUp
void TMPro::TMP_InputField::MovePageUp(bool shift, bool goToFirstChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MovePageUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MovePageUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shift), ::il2cpp_utils::ExtractType(goToFirstChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shift, goToFirstChar);
}
// Autogenerated method: TMPro.TMP_InputField.MovePageDown
void TMPro::TMP_InputField::MovePageDown(bool shift) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MovePageDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MovePageDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shift)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shift);
}
// Autogenerated method: TMPro.TMP_InputField.MovePageDown
void TMPro::TMP_InputField::MovePageDown(bool shift, bool goToLastChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MovePageDown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MovePageDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shift), ::il2cpp_utils::ExtractType(goToLastChar)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shift, goToLastChar);
}
// Autogenerated method: TMPro.TMP_InputField.Delete
void TMPro::TMP_InputField::Delete() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::Delete");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Delete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.DeleteKey
void TMPro::TMP_InputField::DeleteKey() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::DeleteKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeleteKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.Backspace
void TMPro::TMP_InputField::Backspace() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::Backspace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Backspace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.Append
void TMPro::TMP_InputField::Append(::Il2CppString* input) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::Append");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input);
}
// Autogenerated method: TMPro.TMP_InputField.Append
void TMPro::TMP_InputField::Append(::Il2CppChar input) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::Append");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Append", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(input)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input);
}
// Autogenerated method: TMPro.TMP_InputField.Insert
void TMPro::TMP_InputField::Insert(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::Insert");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Insert", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_InputField.UpdateTouchKeyboardFromEditChanges
void TMPro::TMP_InputField::UpdateTouchKeyboardFromEditChanges() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::UpdateTouchKeyboardFromEditChanges");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTouchKeyboardFromEditChanges", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SendOnValueChangedAndUpdateLabel
void TMPro::TMP_InputField::SendOnValueChangedAndUpdateLabel() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SendOnValueChangedAndUpdateLabel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendOnValueChangedAndUpdateLabel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SendOnValueChanged
void TMPro::TMP_InputField::SendOnValueChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SendOnValueChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendOnValueChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SendOnEndEdit
void TMPro::TMP_InputField::SendOnEndEdit() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SendOnEndEdit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendOnEndEdit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SendOnSubmit
void TMPro::TMP_InputField::SendOnSubmit() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SendOnSubmit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendOnSubmit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SendOnFocus
void TMPro::TMP_InputField::SendOnFocus() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SendOnFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendOnFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SendOnFocusLost
void TMPro::TMP_InputField::SendOnFocusLost() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SendOnFocusLost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendOnFocusLost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SendOnTextSelection
void TMPro::TMP_InputField::SendOnTextSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SendOnTextSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendOnTextSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SendOnEndTextSelection
void TMPro::TMP_InputField::SendOnEndTextSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SendOnEndTextSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendOnEndTextSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SendTouchScreenKeyboardStatusChanged
void TMPro::TMP_InputField::SendTouchScreenKeyboardStatusChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SendTouchScreenKeyboardStatusChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendTouchScreenKeyboardStatusChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.UpdateLabel
void TMPro::TMP_InputField::UpdateLabel() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::UpdateLabel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLabel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.UpdateScrollbar
void TMPro::TMP_InputField::UpdateScrollbar() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::UpdateScrollbar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateScrollbar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.OnScrollbarValueChange
void TMPro::TMP_InputField::OnScrollbarValueChange(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnScrollbarValueChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnScrollbarValueChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_InputField.AdjustTextPositionRelativeToViewport
void TMPro::TMP_InputField::AdjustTextPositionRelativeToViewport(float relativePosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::AdjustTextPositionRelativeToViewport");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustTextPositionRelativeToViewport", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(relativePosition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, relativePosition);
}
// Autogenerated method: TMPro.TMP_InputField.GetCaretPositionFromStringIndex
int TMPro::TMP_InputField::GetCaretPositionFromStringIndex(int stringIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::GetCaretPositionFromStringIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCaretPositionFromStringIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stringIndex)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, stringIndex);
}
// Autogenerated method: TMPro.TMP_InputField.GetMinCaretPositionFromStringIndex
int TMPro::TMP_InputField::GetMinCaretPositionFromStringIndex(int stringIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::GetMinCaretPositionFromStringIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMinCaretPositionFromStringIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stringIndex)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, stringIndex);
}
// Autogenerated method: TMPro.TMP_InputField.GetMaxCaretPositionFromStringIndex
int TMPro::TMP_InputField::GetMaxCaretPositionFromStringIndex(int stringIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::GetMaxCaretPositionFromStringIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaxCaretPositionFromStringIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stringIndex)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, stringIndex);
}
// Autogenerated method: TMPro.TMP_InputField.GetStringIndexFromCaretPosition
int TMPro::TMP_InputField::GetStringIndexFromCaretPosition(int caretPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::GetStringIndexFromCaretPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStringIndexFromCaretPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(caretPosition)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, caretPosition);
}
// Autogenerated method: TMPro.TMP_InputField.ForceLabelUpdate
void TMPro::TMP_InputField::ForceLabelUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ForceLabelUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceLabelUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.MarkGeometryAsDirty
void TMPro::TMP_InputField::MarkGeometryAsDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::MarkGeometryAsDirty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MarkGeometryAsDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.Rebuild
void TMPro::TMP_InputField::Rebuild(UnityEngine::UI::CanvasUpdate update) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::Rebuild");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(update)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, update);
}
// Autogenerated method: TMPro.TMP_InputField.LayoutComplete
void TMPro::TMP_InputField::LayoutComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::LayoutComplete");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LayoutComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.GraphicUpdateComplete
void TMPro::TMP_InputField::GraphicUpdateComplete() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::GraphicUpdateComplete");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GraphicUpdateComplete", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.UpdateGeometry
void TMPro::TMP_InputField::UpdateGeometry() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::UpdateGeometry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateGeometry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.AssignPositioningIfNeeded
void TMPro::TMP_InputField::AssignPositioningIfNeeded() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::AssignPositioningIfNeeded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AssignPositioningIfNeeded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.OnFillVBO
void TMPro::TMP_InputField::OnFillVBO(UnityEngine::Mesh* vbo) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnFillVBO");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFillVBO", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vbo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vbo);
}
// Autogenerated method: TMPro.TMP_InputField.GenerateCaret
void TMPro::TMP_InputField::GenerateCaret(UnityEngine::UI::VertexHelper* vbo, UnityEngine::Vector2 roundingOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::GenerateCaret");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateCaret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vbo), ::il2cpp_utils::ExtractType(roundingOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vbo, roundingOffset);
}
// Autogenerated method: TMPro.TMP_InputField.CreateCursorVerts
void TMPro::TMP_InputField::CreateCursorVerts() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CreateCursorVerts");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCursorVerts", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.GenerateHightlight
void TMPro::TMP_InputField::GenerateHightlight(UnityEngine::UI::VertexHelper* vbo, UnityEngine::Vector2 roundingOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::GenerateHightlight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateHightlight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vbo), ::il2cpp_utils::ExtractType(roundingOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vbo, roundingOffset);
}
// Autogenerated method: TMPro.TMP_InputField.AdjustRectTransformRelativeToViewport
void TMPro::TMP_InputField::AdjustRectTransformRelativeToViewport(UnityEngine::Vector2 startPosition, float height, bool isCharVisible) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::AdjustRectTransformRelativeToViewport");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustRectTransformRelativeToViewport", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startPosition), ::il2cpp_utils::ExtractType(height), ::il2cpp_utils::ExtractType(isCharVisible)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startPosition, height, isCharVisible);
}
// Autogenerated method: TMPro.TMP_InputField.Validate
::Il2CppChar TMPro::TMP_InputField::Validate(::Il2CppString* text, int pos, ::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::Validate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Validate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(ch)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar, false>(this, ___internal__method, text, pos, ch);
}
// Autogenerated method: TMPro.TMP_InputField.ActivateInputField
void TMPro::TMP_InputField::ActivateInputField() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ActivateInputField");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateInputField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.ActivateInputFieldInternal
void TMPro::TMP_InputField::ActivateInputFieldInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ActivateInputFieldInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateInputFieldInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.OnPointerClick
void TMPro::TMP_InputField::OnPointerClick(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnPointerClick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerClick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: TMPro.TMP_InputField.OnControlClick
void TMPro::TMP_InputField::OnControlClick() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnControlClick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnControlClick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.ReleaseSelection
void TMPro::TMP_InputField::ReleaseSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ReleaseSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReleaseSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.DeactivateInputField
void TMPro::TMP_InputField::DeactivateInputField(bool clearSelection) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::DeactivateInputField");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeactivateInputField", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clearSelection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clearSelection);
}
// Autogenerated method: TMPro.TMP_InputField.OnSubmit
void TMPro::TMP_InputField::OnSubmit(UnityEngine::EventSystems::BaseEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnSubmit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSubmit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: TMPro.TMP_InputField.EnforceContentType
void TMPro::TMP_InputField::EnforceContentType() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::EnforceContentType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnforceContentType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SetTextComponentWrapMode
void TMPro::TMP_InputField::SetTextComponentWrapMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SetTextComponentWrapMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTextComponentWrapMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SetTextComponentRichTextMode
void TMPro::TMP_InputField::SetTextComponentRichTextMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SetTextComponentRichTextMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTextComponentRichTextMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SetToCustomIfContentTypeIsNot
void TMPro::TMP_InputField::SetToCustomIfContentTypeIsNot(::Array<TMPro::TMP_InputField::ContentType>* allowedContentTypes) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SetToCustomIfContentTypeIsNot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToCustomIfContentTypeIsNot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allowedContentTypes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, allowedContentTypes);
}
// Creating initializer_list -> params proxy for: System.Void SetToCustomIfContentTypeIsNot(params TMPro.TMP_InputField/ContentType[] allowedContentTypes)
void TMPro::TMP_InputField::SetToCustomIfContentTypeIsNot(std::initializer_list<TMPro::TMP_InputField::ContentType> allowedContentTypes) {
  TMPro::TMP_InputField::SetToCustomIfContentTypeIsNot(::Array<TMPro::TMP_InputField::ContentType>::New(allowedContentTypes));
}
// Autogenerated method: TMPro.TMP_InputField.SetToCustom
void TMPro::TMP_InputField::SetToCustom() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SetToCustom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToCustom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SetToCustom
void TMPro::TMP_InputField::SetToCustom(TMPro::TMP_InputField::CharacterValidation characterValidation) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SetToCustom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToCustom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(characterValidation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, characterValidation);
}
// Autogenerated method: TMPro.TMP_InputField.CalculateLayoutInputHorizontal
void TMPro::TMP_InputField::CalculateLayoutInputHorizontal() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CalculateLayoutInputHorizontal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateLayoutInputHorizontal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.CalculateLayoutInputVertical
void TMPro::TMP_InputField::CalculateLayoutInputVertical() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CalculateLayoutInputVertical");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateLayoutInputVertical", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.get_minWidth
float TMPro::TMP_InputField::get_minWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_minWidth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_minWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.get_preferredWidth
float TMPro::TMP_InputField::get_preferredWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_preferredWidth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_preferredWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.get_flexibleWidth
float TMPro::TMP_InputField::get_flexibleWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_flexibleWidth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flexibleWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.get_minHeight
float TMPro::TMP_InputField::get_minHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_minHeight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_minHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.get_preferredHeight
float TMPro::TMP_InputField::get_preferredHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_preferredHeight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_preferredHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.get_flexibleHeight
float TMPro::TMP_InputField::get_flexibleHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_flexibleHeight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flexibleHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.get_layoutPriority
int TMPro::TMP_InputField::get_layoutPriority() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_layoutPriority");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_layoutPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.SetGlobalPointSize
void TMPro::TMP_InputField::SetGlobalPointSize(float pointSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SetGlobalPointSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGlobalPointSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointSize)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pointSize);
}
// Autogenerated method: TMPro.TMP_InputField.SetGlobalFontAsset
void TMPro::TMP_InputField::SetGlobalFontAsset(TMPro::TMP_FontAsset* fontAsset) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::SetGlobalFontAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGlobalFontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fontAsset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fontAsset);
}
// Autogenerated method: TMPro.TMP_InputField.UnityEngine.UI.ICanvasElement.get_transform
UnityEngine::Transform* TMPro::TMP_InputField::UnityEngine_UI_ICanvasElement_get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::UnityEngine.UI.ICanvasElement.get_transform");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.UI.ICanvasElement.get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.get_hasSelection
bool TMPro::TMP_InputField::get_hasSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::get_hasSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.OnEnable
void TMPro::TMP_InputField::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.OnDisable
void TMPro::TMP_InputField::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField.OnPointerDown
void TMPro::TMP_InputField::OnPointerDown(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnPointerDown");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerDown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: TMPro.TMP_InputField.OnSelect
void TMPro::TMP_InputField::OnSelect(UnityEngine::EventSystems::BaseEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnSelect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSelect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: TMPro.TMP_InputField.OnDeselect
void TMPro::TMP_InputField::OnDeselect(UnityEngine::EventSystems::BaseEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnDeselect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeselect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: TMPro.TMP_InputField.DoStateTransition
void TMPro::TMP_InputField::DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::DoStateTransition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoStateTransition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(instant)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, instant);
}
// Autogenerated method: TMPro.TMP_InputField..cctor
void TMPro::TMP_InputField::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_InputField", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TMP_InputField::get_inputSystem
// Il2CppName: get_inputSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::EventSystems::BaseInput* (TMP_InputField::*)()>(&TMP_InputField::get_inputSystem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_inputSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_compositionString
// Il2CppName: get_compositionString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMP_InputField::*)()>(&TMP_InputField::get_compositionString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_compositionString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_mesh
// Il2CppName: get_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Mesh* (TMP_InputField::*)()>(&TMP_InputField::get_mesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_shouldHideMobileInput
// Il2CppName: get_shouldHideMobileInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)()>(&TMP_InputField::get_shouldHideMobileInput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_shouldHideMobileInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_shouldHideMobileInput
// Il2CppName: set_shouldHideMobileInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::set_shouldHideMobileInput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_shouldHideMobileInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_shouldHideSoftKeyboard
// Il2CppName: get_shouldHideSoftKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)()>(&TMP_InputField::get_shouldHideSoftKeyboard)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_shouldHideSoftKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_shouldHideSoftKeyboard
// Il2CppName: set_shouldHideSoftKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::set_shouldHideSoftKeyboard)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_shouldHideSoftKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::isKeyboardUsingEvents
// Il2CppName: isKeyboardUsingEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)()>(&TMP_InputField::isKeyboardUsingEvents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "isKeyboardUsingEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMP_InputField::*)()>(&TMP_InputField::get_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_text
// Il2CppName: set_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(::Il2CppString*)>(&TMP_InputField::set_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SetTextWithoutNotify
// Il2CppName: SetTextWithoutNotify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(::Il2CppString*)>(&TMP_InputField::SetTextWithoutNotify)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SetTextWithoutNotify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(::Il2CppString*, bool)>(&TMP_InputField::SetText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_isFocused
// Il2CppName: get_isFocused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)()>(&TMP_InputField::get_isFocused)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_isFocused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_caretBlinkRate
// Il2CppName: get_caretBlinkRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_InputField::*)()>(&TMP_InputField::get_caretBlinkRate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_caretBlinkRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_caretBlinkRate
// Il2CppName: set_caretBlinkRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(float)>(&TMP_InputField::set_caretBlinkRate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_caretBlinkRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_caretWidth
// Il2CppName: get_caretWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::get_caretWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_caretWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_caretWidth
// Il2CppName: set_caretWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(int)>(&TMP_InputField::set_caretWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_caretWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_textViewport
// Il2CppName: get_textViewport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RectTransform* (TMP_InputField::*)()>(&TMP_InputField::get_textViewport)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_textViewport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_textViewport
// Il2CppName: set_textViewport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::RectTransform*)>(&TMP_InputField::set_textViewport)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_textViewport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RectTransform*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_textComponent
// Il2CppName: get_textComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Text* (TMP_InputField::*)()>(&TMP_InputField::get_textComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_textComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_textComponent
// Il2CppName: set_textComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_Text*)>(&TMP_InputField::set_textComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_textComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_placeholder
// Il2CppName: get_placeholder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Graphic* (TMP_InputField::*)()>(&TMP_InputField::get_placeholder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_placeholder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_placeholder
// Il2CppName: set_placeholder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::UI::Graphic*)>(&TMP_InputField::set_placeholder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_placeholder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::Graphic*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_verticalScrollbar
// Il2CppName: get_verticalScrollbar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Scrollbar* (TMP_InputField::*)()>(&TMP_InputField::get_verticalScrollbar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_verticalScrollbar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_verticalScrollbar
// Il2CppName: set_verticalScrollbar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::UI::Scrollbar*)>(&TMP_InputField::set_verticalScrollbar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_verticalScrollbar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::Scrollbar*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_scrollSensitivity
// Il2CppName: get_scrollSensitivity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_InputField::*)()>(&TMP_InputField::get_scrollSensitivity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_scrollSensitivity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_scrollSensitivity
// Il2CppName: set_scrollSensitivity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(float)>(&TMP_InputField::set_scrollSensitivity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_scrollSensitivity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_caretColor
// Il2CppName: get_caretColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (TMP_InputField::*)()>(&TMP_InputField::get_caretColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_caretColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_caretColor
// Il2CppName: set_caretColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::Color)>(&TMP_InputField::set_caretColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_caretColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_customCaretColor
// Il2CppName: get_customCaretColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)()>(&TMP_InputField::get_customCaretColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_customCaretColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_customCaretColor
// Il2CppName: set_customCaretColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::set_customCaretColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_customCaretColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_selectionColor
// Il2CppName: get_selectionColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (TMP_InputField::*)()>(&TMP_InputField::get_selectionColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_selectionColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_selectionColor
// Il2CppName: set_selectionColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::Color)>(&TMP_InputField::set_selectionColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_selectionColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_onEndEdit
// Il2CppName: get_onEndEdit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_InputField::SubmitEvent* (TMP_InputField::*)()>(&TMP_InputField::get_onEndEdit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_onEndEdit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_onEndEdit
// Il2CppName: set_onEndEdit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_InputField::SubmitEvent*)>(&TMP_InputField::set_onEndEdit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_onEndEdit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_InputField::SubmitEvent*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_onSubmit
// Il2CppName: get_onSubmit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_InputField::SubmitEvent* (TMP_InputField::*)()>(&TMP_InputField::get_onSubmit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_onSubmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_onSubmit
// Il2CppName: set_onSubmit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_InputField::SubmitEvent*)>(&TMP_InputField::set_onSubmit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_onSubmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_InputField::SubmitEvent*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_onSelect
// Il2CppName: get_onSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_InputField::SelectionEvent* (TMP_InputField::*)()>(&TMP_InputField::get_onSelect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_onSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_onSelect
// Il2CppName: set_onSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_InputField::SelectionEvent*)>(&TMP_InputField::set_onSelect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_onSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_InputField::SelectionEvent*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_onDeselect
// Il2CppName: get_onDeselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_InputField::SelectionEvent* (TMP_InputField::*)()>(&TMP_InputField::get_onDeselect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_onDeselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_onDeselect
// Il2CppName: set_onDeselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_InputField::SelectionEvent*)>(&TMP_InputField::set_onDeselect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_onDeselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_InputField::SelectionEvent*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_onTextSelection
// Il2CppName: get_onTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_InputField::TextSelectionEvent* (TMP_InputField::*)()>(&TMP_InputField::get_onTextSelection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_onTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_onTextSelection
// Il2CppName: set_onTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_InputField::TextSelectionEvent*)>(&TMP_InputField::set_onTextSelection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_onTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_InputField::TextSelectionEvent*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_onEndTextSelection
// Il2CppName: get_onEndTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_InputField::TextSelectionEvent* (TMP_InputField::*)()>(&TMP_InputField::get_onEndTextSelection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_onEndTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_onEndTextSelection
// Il2CppName: set_onEndTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_InputField::TextSelectionEvent*)>(&TMP_InputField::set_onEndTextSelection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_onEndTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_InputField::TextSelectionEvent*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_onValueChanged
// Il2CppName: get_onValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_InputField::OnChangeEvent* (TMP_InputField::*)()>(&TMP_InputField::get_onValueChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_onValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_onValueChanged
// Il2CppName: set_onValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_InputField::OnChangeEvent*)>(&TMP_InputField::set_onValueChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_onValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_InputField::OnChangeEvent*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_onTouchScreenKeyboardStatusChanged
// Il2CppName: get_onTouchScreenKeyboardStatusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_InputField::TouchScreenKeyboardEvent* (TMP_InputField::*)()>(&TMP_InputField::get_onTouchScreenKeyboardStatusChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_onTouchScreenKeyboardStatusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_onTouchScreenKeyboardStatusChanged
// Il2CppName: set_onTouchScreenKeyboardStatusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_InputField::TouchScreenKeyboardEvent*)>(&TMP_InputField::set_onTouchScreenKeyboardStatusChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_onTouchScreenKeyboardStatusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_InputField::TouchScreenKeyboardEvent*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_onValidateInput
// Il2CppName: get_onValidateInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_InputField::OnValidateInput* (TMP_InputField::*)()>(&TMP_InputField::get_onValidateInput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_onValidateInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_onValidateInput
// Il2CppName: set_onValidateInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_InputField::OnValidateInput*)>(&TMP_InputField::set_onValidateInput)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_onValidateInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_InputField::OnValidateInput*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_characterLimit
// Il2CppName: get_characterLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::get_characterLimit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_characterLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_characterLimit
// Il2CppName: set_characterLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(int)>(&TMP_InputField::set_characterLimit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_characterLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_pointSize
// Il2CppName: get_pointSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_InputField::*)()>(&TMP_InputField::get_pointSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_pointSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_pointSize
// Il2CppName: set_pointSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(float)>(&TMP_InputField::set_pointSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_pointSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_fontAsset
// Il2CppName: get_fontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (TMP_InputField::*)()>(&TMP_InputField::get_fontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_fontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_fontAsset
// Il2CppName: set_fontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_FontAsset*)>(&TMP_InputField::set_fontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_fontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_onFocusSelectAll
// Il2CppName: get_onFocusSelectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)()>(&TMP_InputField::get_onFocusSelectAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_onFocusSelectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_onFocusSelectAll
// Il2CppName: set_onFocusSelectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::set_onFocusSelectAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_onFocusSelectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_resetOnDeActivation
// Il2CppName: get_resetOnDeActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)()>(&TMP_InputField::get_resetOnDeActivation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_resetOnDeActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_resetOnDeActivation
// Il2CppName: set_resetOnDeActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::set_resetOnDeActivation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_resetOnDeActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_restoreOriginalTextOnEscape
// Il2CppName: get_restoreOriginalTextOnEscape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)()>(&TMP_InputField::get_restoreOriginalTextOnEscape)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_restoreOriginalTextOnEscape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_restoreOriginalTextOnEscape
// Il2CppName: set_restoreOriginalTextOnEscape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::set_restoreOriginalTextOnEscape)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_restoreOriginalTextOnEscape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_isRichTextEditingAllowed
// Il2CppName: get_isRichTextEditingAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)()>(&TMP_InputField::get_isRichTextEditingAllowed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_isRichTextEditingAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_isRichTextEditingAllowed
// Il2CppName: set_isRichTextEditingAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::set_isRichTextEditingAllowed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_isRichTextEditingAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_contentType
// Il2CppName: get_contentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_InputField::ContentType (TMP_InputField::*)()>(&TMP_InputField::get_contentType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_contentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_contentType
// Il2CppName: set_contentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_InputField::ContentType)>(&TMP_InputField::set_contentType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_contentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_InputField::ContentType>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_lineType
// Il2CppName: get_lineType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_InputField::LineType (TMP_InputField::*)()>(&TMP_InputField::get_lineType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_lineType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_lineType
// Il2CppName: set_lineType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_InputField::LineType)>(&TMP_InputField::set_lineType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_lineType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_InputField::LineType>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_lineLimit
// Il2CppName: get_lineLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::get_lineLimit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_lineLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_lineLimit
// Il2CppName: set_lineLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(int)>(&TMP_InputField::set_lineLimit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_lineLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_inputType
// Il2CppName: get_inputType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_InputField::InputType (TMP_InputField::*)()>(&TMP_InputField::get_inputType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_inputType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_inputType
// Il2CppName: set_inputType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_InputField::InputType)>(&TMP_InputField::set_inputType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_inputType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_InputField::InputType>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_keyboardType
// Il2CppName: get_keyboardType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::TouchScreenKeyboardType (TMP_InputField::*)()>(&TMP_InputField::get_keyboardType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_keyboardType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_keyboardType
// Il2CppName: set_keyboardType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::TouchScreenKeyboardType)>(&TMP_InputField::set_keyboardType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_keyboardType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TouchScreenKeyboardType>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_characterValidation
// Il2CppName: get_characterValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_InputField::CharacterValidation (TMP_InputField::*)()>(&TMP_InputField::get_characterValidation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_characterValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_characterValidation
// Il2CppName: set_characterValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_InputField::CharacterValidation)>(&TMP_InputField::set_characterValidation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_characterValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_InputField::CharacterValidation>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_inputValidator
// Il2CppName: get_inputValidator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_InputValidator* (TMP_InputField::*)()>(&TMP_InputField::get_inputValidator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_inputValidator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_inputValidator
// Il2CppName: set_inputValidator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_InputValidator*)>(&TMP_InputField::set_inputValidator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_inputValidator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_InputValidator*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_readOnly
// Il2CppName: get_readOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)()>(&TMP_InputField::get_readOnly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_readOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_readOnly
// Il2CppName: set_readOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::set_readOnly)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_readOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_richText
// Il2CppName: get_richText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)()>(&TMP_InputField::get_richText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_richText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_richText
// Il2CppName: set_richText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::set_richText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_richText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_multiLine
// Il2CppName: get_multiLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)()>(&TMP_InputField::get_multiLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_multiLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_asteriskChar
// Il2CppName: get_asteriskChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (TMP_InputField::*)()>(&TMP_InputField::get_asteriskChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_asteriskChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_asteriskChar
// Il2CppName: set_asteriskChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(::Il2CppChar)>(&TMP_InputField::set_asteriskChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_asteriskChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_wasCanceled
// Il2CppName: get_wasCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)()>(&TMP_InputField::get_wasCanceled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_wasCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::ClampStringPos
// Il2CppName: ClampStringPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(int&)>(&TMP_InputField::ClampStringPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "ClampStringPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::ClampCaretPos
// Il2CppName: ClampCaretPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(int&)>(&TMP_InputField::ClampCaretPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "ClampCaretPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_caretPositionInternal
// Il2CppName: get_caretPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::get_caretPositionInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_caretPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_caretPositionInternal
// Il2CppName: set_caretPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(int)>(&TMP_InputField::set_caretPositionInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_caretPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_stringPositionInternal
// Il2CppName: get_stringPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::get_stringPositionInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_stringPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_stringPositionInternal
// Il2CppName: set_stringPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(int)>(&TMP_InputField::set_stringPositionInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_stringPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_caretSelectPositionInternal
// Il2CppName: get_caretSelectPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::get_caretSelectPositionInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_caretSelectPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_caretSelectPositionInternal
// Il2CppName: set_caretSelectPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(int)>(&TMP_InputField::set_caretSelectPositionInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_caretSelectPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_stringSelectPositionInternal
// Il2CppName: get_stringSelectPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::get_stringSelectPositionInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_stringSelectPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_stringSelectPositionInternal
// Il2CppName: set_stringSelectPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(int)>(&TMP_InputField::set_stringSelectPositionInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_stringSelectPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_caretPosition
// Il2CppName: get_caretPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::get_caretPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_caretPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_caretPosition
// Il2CppName: set_caretPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(int)>(&TMP_InputField::set_caretPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_caretPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_selectionAnchorPosition
// Il2CppName: get_selectionAnchorPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::get_selectionAnchorPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_selectionAnchorPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_selectionAnchorPosition
// Il2CppName: set_selectionAnchorPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(int)>(&TMP_InputField::set_selectionAnchorPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_selectionAnchorPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_selectionFocusPosition
// Il2CppName: get_selectionFocusPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::get_selectionFocusPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_selectionFocusPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_selectionFocusPosition
// Il2CppName: set_selectionFocusPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(int)>(&TMP_InputField::set_selectionFocusPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_selectionFocusPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_stringPosition
// Il2CppName: get_stringPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::get_stringPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_stringPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_stringPosition
// Il2CppName: set_stringPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(int)>(&TMP_InputField::set_stringPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_stringPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_selectionStringAnchorPosition
// Il2CppName: get_selectionStringAnchorPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::get_selectionStringAnchorPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_selectionStringAnchorPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_selectionStringAnchorPosition
// Il2CppName: set_selectionStringAnchorPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(int)>(&TMP_InputField::set_selectionStringAnchorPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_selectionStringAnchorPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_selectionStringFocusPosition
// Il2CppName: get_selectionStringFocusPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::get_selectionStringFocusPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_selectionStringFocusPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_selectionStringFocusPosition
// Il2CppName: set_selectionStringFocusPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(int)>(&TMP_InputField::set_selectionStringFocusPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_selectionStringFocusPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::ON_TEXT_CHANGED
// Il2CppName: ON_TEXT_CHANGED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::Object*)>(&TMP_InputField::ON_TEXT_CHANGED)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "ON_TEXT_CHANGED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::CaretBlink
// Il2CppName: CaretBlink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (TMP_InputField::*)()>(&TMP_InputField::CaretBlink)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "CaretBlink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SetCaretVisible
// Il2CppName: SetCaretVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::SetCaretVisible)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SetCaretVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SetCaretActive
// Il2CppName: SetCaretActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::SetCaretActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SetCaretActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnFocus
// Il2CppName: OnFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::OnFocus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SelectAll
// Il2CppName: SelectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::SelectAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SelectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MoveTextEnd
// Il2CppName: MoveTextEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::MoveTextEnd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MoveTextEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MoveTextStart
// Il2CppName: MoveTextStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::MoveTextStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MoveTextStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MoveToEndOfLine
// Il2CppName: MoveToEndOfLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool, bool)>(&TMP_InputField::MoveToEndOfLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MoveToEndOfLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MoveToStartOfLine
// Il2CppName: MoveToStartOfLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool, bool)>(&TMP_InputField::MoveToStartOfLine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MoveToStartOfLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_clipboard
// Il2CppName: get_clipboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&TMP_InputField::get_clipboard)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_clipboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::set_clipboard
// Il2CppName: set_clipboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&TMP_InputField::set_clipboard)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "set_clipboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::InPlaceEditing
// Il2CppName: InPlaceEditing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)()>(&TMP_InputField::InPlaceEditing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "InPlaceEditing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::UpdateStringPositionFromKeyboard
// Il2CppName: UpdateStringPositionFromKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::UpdateStringPositionFromKeyboard)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "UpdateStringPositionFromKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MayDrag
// Il2CppName: MayDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)(UnityEngine::EventSystems::PointerEventData*)>(&TMP_InputField::MayDrag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MayDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnBeginDrag
// Il2CppName: OnBeginDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::EventSystems::PointerEventData*)>(&TMP_InputField::OnBeginDrag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnBeginDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnDrag
// Il2CppName: OnDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::EventSystems::PointerEventData*)>(&TMP_InputField::OnDrag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MouseDragOutsideRect
// Il2CppName: MouseDragOutsideRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (TMP_InputField::*)(UnityEngine::EventSystems::PointerEventData*)>(&TMP_InputField::MouseDragOutsideRect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MouseDragOutsideRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnEndDrag
// Il2CppName: OnEndDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::EventSystems::PointerEventData*)>(&TMP_InputField::OnEndDrag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnEndDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::KeyPressed
// Il2CppName: KeyPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_InputField::EditState (TMP_InputField::*)(UnityEngine::Event*)>(&TMP_InputField::KeyPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "KeyPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Event*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::IsValidChar
// Il2CppName: IsValidChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)(::Il2CppChar)>(&TMP_InputField::IsValidChar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "IsValidChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::ProcessEvent
// Il2CppName: ProcessEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::Event*)>(&TMP_InputField::ProcessEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "ProcessEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Event*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnUpdateSelected
// Il2CppName: OnUpdateSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::EventSystems::BaseEventData*)>(&TMP_InputField::OnUpdateSelected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnUpdateSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::BaseEventData*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnScroll
// Il2CppName: OnScroll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::EventSystems::PointerEventData*)>(&TMP_InputField::OnScroll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnScroll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::GetSelectedString
// Il2CppName: GetSelectedString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMP_InputField::*)()>(&TMP_InputField::GetSelectedString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "GetSelectedString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::FindNextWordBegin
// Il2CppName: FindNextWordBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::FindNextWordBegin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "FindNextWordBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MoveRight
// Il2CppName: MoveRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool, bool)>(&TMP_InputField::MoveRight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MoveRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::FindPrevWordBegin
// Il2CppName: FindPrevWordBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::FindPrevWordBegin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "FindPrevWordBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MoveLeft
// Il2CppName: MoveLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool, bool)>(&TMP_InputField::MoveLeft)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MoveLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::LineUpCharacterPosition
// Il2CppName: LineUpCharacterPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)(int, bool)>(&TMP_InputField::LineUpCharacterPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "LineUpCharacterPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::LineDownCharacterPosition
// Il2CppName: LineDownCharacterPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)(int, bool)>(&TMP_InputField::LineDownCharacterPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "LineDownCharacterPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::PageUpCharacterPosition
// Il2CppName: PageUpCharacterPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)(int, bool)>(&TMP_InputField::PageUpCharacterPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "PageUpCharacterPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::PageDownCharacterPosition
// Il2CppName: PageDownCharacterPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)(int, bool)>(&TMP_InputField::PageDownCharacterPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "PageDownCharacterPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MoveDown
// Il2CppName: MoveDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::MoveDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MoveDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MoveDown
// Il2CppName: MoveDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool, bool)>(&TMP_InputField::MoveDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MoveDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MoveUp
// Il2CppName: MoveUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::MoveUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MoveUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MoveUp
// Il2CppName: MoveUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool, bool)>(&TMP_InputField::MoveUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MoveUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MovePageUp
// Il2CppName: MovePageUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::MovePageUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MovePageUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MovePageUp
// Il2CppName: MovePageUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool, bool)>(&TMP_InputField::MovePageUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MovePageUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MovePageDown
// Il2CppName: MovePageDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::MovePageDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MovePageDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MovePageDown
// Il2CppName: MovePageDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool, bool)>(&TMP_InputField::MovePageDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MovePageDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::Delete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::DeleteKey
// Il2CppName: DeleteKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::DeleteKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "DeleteKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::Backspace
// Il2CppName: Backspace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::Backspace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "Backspace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(::Il2CppString*)>(&TMP_InputField::Append)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(::Il2CppChar)>(&TMP_InputField::Append)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(::Il2CppChar)>(&TMP_InputField::Insert)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::UpdateTouchKeyboardFromEditChanges
// Il2CppName: UpdateTouchKeyboardFromEditChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::UpdateTouchKeyboardFromEditChanges)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "UpdateTouchKeyboardFromEditChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SendOnValueChangedAndUpdateLabel
// Il2CppName: SendOnValueChangedAndUpdateLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::SendOnValueChangedAndUpdateLabel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SendOnValueChangedAndUpdateLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SendOnValueChanged
// Il2CppName: SendOnValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::SendOnValueChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SendOnValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SendOnEndEdit
// Il2CppName: SendOnEndEdit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::SendOnEndEdit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SendOnEndEdit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SendOnSubmit
// Il2CppName: SendOnSubmit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::SendOnSubmit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SendOnSubmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SendOnFocus
// Il2CppName: SendOnFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::SendOnFocus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SendOnFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SendOnFocusLost
// Il2CppName: SendOnFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::SendOnFocusLost)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SendOnFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SendOnTextSelection
// Il2CppName: SendOnTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::SendOnTextSelection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SendOnTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SendOnEndTextSelection
// Il2CppName: SendOnEndTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::SendOnEndTextSelection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SendOnEndTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SendTouchScreenKeyboardStatusChanged
// Il2CppName: SendTouchScreenKeyboardStatusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::SendTouchScreenKeyboardStatusChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SendTouchScreenKeyboardStatusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::UpdateLabel
// Il2CppName: UpdateLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::UpdateLabel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "UpdateLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::UpdateScrollbar
// Il2CppName: UpdateScrollbar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::UpdateScrollbar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "UpdateScrollbar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnScrollbarValueChange
// Il2CppName: OnScrollbarValueChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(float)>(&TMP_InputField::OnScrollbarValueChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnScrollbarValueChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::AdjustTextPositionRelativeToViewport
// Il2CppName: AdjustTextPositionRelativeToViewport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(float)>(&TMP_InputField::AdjustTextPositionRelativeToViewport)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "AdjustTextPositionRelativeToViewport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::GetCaretPositionFromStringIndex
// Il2CppName: GetCaretPositionFromStringIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)(int)>(&TMP_InputField::GetCaretPositionFromStringIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "GetCaretPositionFromStringIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::GetMinCaretPositionFromStringIndex
// Il2CppName: GetMinCaretPositionFromStringIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)(int)>(&TMP_InputField::GetMinCaretPositionFromStringIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "GetMinCaretPositionFromStringIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::GetMaxCaretPositionFromStringIndex
// Il2CppName: GetMaxCaretPositionFromStringIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)(int)>(&TMP_InputField::GetMaxCaretPositionFromStringIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "GetMaxCaretPositionFromStringIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::GetStringIndexFromCaretPosition
// Il2CppName: GetStringIndexFromCaretPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)(int)>(&TMP_InputField::GetStringIndexFromCaretPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "GetStringIndexFromCaretPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::ForceLabelUpdate
// Il2CppName: ForceLabelUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::ForceLabelUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "ForceLabelUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::MarkGeometryAsDirty
// Il2CppName: MarkGeometryAsDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::MarkGeometryAsDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "MarkGeometryAsDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::Rebuild
// Il2CppName: Rebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::UI::CanvasUpdate)>(&TMP_InputField::Rebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::CanvasUpdate>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::LayoutComplete
// Il2CppName: LayoutComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::LayoutComplete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "LayoutComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::GraphicUpdateComplete
// Il2CppName: GraphicUpdateComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::GraphicUpdateComplete)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "GraphicUpdateComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::UpdateGeometry
// Il2CppName: UpdateGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::UpdateGeometry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "UpdateGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::AssignPositioningIfNeeded
// Il2CppName: AssignPositioningIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::AssignPositioningIfNeeded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "AssignPositioningIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnFillVBO
// Il2CppName: OnFillVBO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::Mesh*)>(&TMP_InputField::OnFillVBO)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnFillVBO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::GenerateCaret
// Il2CppName: GenerateCaret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::UI::VertexHelper*, UnityEngine::Vector2)>(&TMP_InputField::GenerateCaret)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "GenerateCaret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::VertexHelper*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::CreateCursorVerts
// Il2CppName: CreateCursorVerts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::CreateCursorVerts)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "CreateCursorVerts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::GenerateHightlight
// Il2CppName: GenerateHightlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::UI::VertexHelper*, UnityEngine::Vector2)>(&TMP_InputField::GenerateHightlight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "GenerateHightlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::VertexHelper*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::AdjustRectTransformRelativeToViewport
// Il2CppName: AdjustRectTransformRelativeToViewport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::Vector2, float, bool)>(&TMP_InputField::AdjustRectTransformRelativeToViewport)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "AdjustRectTransformRelativeToViewport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (TMP_InputField::*)(::Il2CppString*, int, ::Il2CppChar)>(&TMP_InputField::Validate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::ActivateInputField
// Il2CppName: ActivateInputField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::ActivateInputField)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "ActivateInputField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::ActivateInputFieldInternal
// Il2CppName: ActivateInputFieldInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::ActivateInputFieldInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "ActivateInputFieldInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnPointerClick
// Il2CppName: OnPointerClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::EventSystems::PointerEventData*)>(&TMP_InputField::OnPointerClick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnPointerClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnControlClick
// Il2CppName: OnControlClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::OnControlClick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnControlClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::ReleaseSelection
// Il2CppName: ReleaseSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::ReleaseSelection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "ReleaseSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::DeactivateInputField
// Il2CppName: DeactivateInputField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(bool)>(&TMP_InputField::DeactivateInputField)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "DeactivateInputField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnSubmit
// Il2CppName: OnSubmit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::EventSystems::BaseEventData*)>(&TMP_InputField::OnSubmit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnSubmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::BaseEventData*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::EnforceContentType
// Il2CppName: EnforceContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::EnforceContentType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "EnforceContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SetTextComponentWrapMode
// Il2CppName: SetTextComponentWrapMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::SetTextComponentWrapMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SetTextComponentWrapMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SetTextComponentRichTextMode
// Il2CppName: SetTextComponentRichTextMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::SetTextComponentRichTextMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SetTextComponentRichTextMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SetToCustomIfContentTypeIsNot
// Il2CppName: SetToCustomIfContentTypeIsNot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(::Array<TMPro::TMP_InputField::ContentType>*)>(&TMP_InputField::SetToCustomIfContentTypeIsNot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SetToCustomIfContentTypeIsNot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_InputField::ContentType>*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SetToCustom
// Il2CppName: SetToCustom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::SetToCustom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SetToCustom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SetToCustom
// Il2CppName: SetToCustom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_InputField::CharacterValidation)>(&TMP_InputField::SetToCustom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SetToCustom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_InputField::CharacterValidation>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::CalculateLayoutInputHorizontal
// Il2CppName: CalculateLayoutInputHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::CalculateLayoutInputHorizontal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "CalculateLayoutInputHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::CalculateLayoutInputVertical
// Il2CppName: CalculateLayoutInputVertical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::CalculateLayoutInputVertical)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "CalculateLayoutInputVertical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_minWidth
// Il2CppName: get_minWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_InputField::*)()>(&TMP_InputField::get_minWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_minWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_preferredWidth
// Il2CppName: get_preferredWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_InputField::*)()>(&TMP_InputField::get_preferredWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_preferredWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_flexibleWidth
// Il2CppName: get_flexibleWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_InputField::*)()>(&TMP_InputField::get_flexibleWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_flexibleWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_minHeight
// Il2CppName: get_minHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_InputField::*)()>(&TMP_InputField::get_minHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_minHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_preferredHeight
// Il2CppName: get_preferredHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_InputField::*)()>(&TMP_InputField::get_preferredHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_preferredHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_flexibleHeight
// Il2CppName: get_flexibleHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_InputField::*)()>(&TMP_InputField::get_flexibleHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_flexibleHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_layoutPriority
// Il2CppName: get_layoutPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_InputField::*)()>(&TMP_InputField::get_layoutPriority)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_layoutPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SetGlobalPointSize
// Il2CppName: SetGlobalPointSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(float)>(&TMP_InputField::SetGlobalPointSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SetGlobalPointSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::SetGlobalFontAsset
// Il2CppName: SetGlobalFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(TMPro::TMP_FontAsset*)>(&TMP_InputField::SetGlobalFontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "SetGlobalFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::UnityEngine_UI_ICanvasElement_get_transform
// Il2CppName: UnityEngine.UI.ICanvasElement.get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (TMP_InputField::*)()>(&TMP_InputField::UnityEngine_UI_ICanvasElement_get_transform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "UnityEngine.UI.ICanvasElement.get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::get_hasSelection
// Il2CppName: get_hasSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::*)()>(&TMP_InputField::get_hasSelection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "get_hasSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)()>(&TMP_InputField::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnPointerDown
// Il2CppName: OnPointerDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::EventSystems::PointerEventData*)>(&TMP_InputField::OnPointerDown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnPointerDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnSelect
// Il2CppName: OnSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::EventSystems::BaseEventData*)>(&TMP_InputField::OnSelect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::BaseEventData*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnDeselect
// Il2CppName: OnDeselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::EventSystems::BaseEventData*)>(&TMP_InputField::OnDeselect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "OnDeselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::BaseEventData*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::DoStateTransition
// Il2CppName: DoStateTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::*)(UnityEngine::UI::Selectable::SelectionState, bool)>(&TMP_InputField::DoStateTransition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), "DoStateTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::Selectable::SelectionState>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_InputField::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_InputField/ContentType
#include "TMPro/TMP_InputField.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/ContentType Standard
TMPro::TMP_InputField::ContentType TMPro::TMP_InputField::ContentType::_get_Standard() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_get_Standard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::ContentType>("TMPro", "TMP_InputField/ContentType", "Standard"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/ContentType Standard
void TMPro::TMP_InputField::ContentType::_set_Standard(TMPro::TMP_InputField::ContentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_set_Standard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/ContentType", "Standard", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/ContentType Autocorrected
TMPro::TMP_InputField::ContentType TMPro::TMP_InputField::ContentType::_get_Autocorrected() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_get_Autocorrected");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::ContentType>("TMPro", "TMP_InputField/ContentType", "Autocorrected"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/ContentType Autocorrected
void TMPro::TMP_InputField::ContentType::_set_Autocorrected(TMPro::TMP_InputField::ContentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_set_Autocorrected");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/ContentType", "Autocorrected", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/ContentType IntegerNumber
TMPro::TMP_InputField::ContentType TMPro::TMP_InputField::ContentType::_get_IntegerNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_get_IntegerNumber");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::ContentType>("TMPro", "TMP_InputField/ContentType", "IntegerNumber"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/ContentType IntegerNumber
void TMPro::TMP_InputField::ContentType::_set_IntegerNumber(TMPro::TMP_InputField::ContentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_set_IntegerNumber");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/ContentType", "IntegerNumber", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/ContentType DecimalNumber
TMPro::TMP_InputField::ContentType TMPro::TMP_InputField::ContentType::_get_DecimalNumber() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_get_DecimalNumber");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::ContentType>("TMPro", "TMP_InputField/ContentType", "DecimalNumber"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/ContentType DecimalNumber
void TMPro::TMP_InputField::ContentType::_set_DecimalNumber(TMPro::TMP_InputField::ContentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_set_DecimalNumber");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/ContentType", "DecimalNumber", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/ContentType Alphanumeric
TMPro::TMP_InputField::ContentType TMPro::TMP_InputField::ContentType::_get_Alphanumeric() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_get_Alphanumeric");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::ContentType>("TMPro", "TMP_InputField/ContentType", "Alphanumeric"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/ContentType Alphanumeric
void TMPro::TMP_InputField::ContentType::_set_Alphanumeric(TMPro::TMP_InputField::ContentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_set_Alphanumeric");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/ContentType", "Alphanumeric", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/ContentType Name
TMPro::TMP_InputField::ContentType TMPro::TMP_InputField::ContentType::_get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_get_Name");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::ContentType>("TMPro", "TMP_InputField/ContentType", "Name"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/ContentType Name
void TMPro::TMP_InputField::ContentType::_set_Name(TMPro::TMP_InputField::ContentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_set_Name");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/ContentType", "Name", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/ContentType EmailAddress
TMPro::TMP_InputField::ContentType TMPro::TMP_InputField::ContentType::_get_EmailAddress() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_get_EmailAddress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::ContentType>("TMPro", "TMP_InputField/ContentType", "EmailAddress"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/ContentType EmailAddress
void TMPro::TMP_InputField::ContentType::_set_EmailAddress(TMPro::TMP_InputField::ContentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_set_EmailAddress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/ContentType", "EmailAddress", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/ContentType Password
TMPro::TMP_InputField::ContentType TMPro::TMP_InputField::ContentType::_get_Password() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_get_Password");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::ContentType>("TMPro", "TMP_InputField/ContentType", "Password"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/ContentType Password
void TMPro::TMP_InputField::ContentType::_set_Password(TMPro::TMP_InputField::ContentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_set_Password");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/ContentType", "Password", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/ContentType Pin
TMPro::TMP_InputField::ContentType TMPro::TMP_InputField::ContentType::_get_Pin() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_get_Pin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::ContentType>("TMPro", "TMP_InputField/ContentType", "Pin"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/ContentType Pin
void TMPro::TMP_InputField::ContentType::_set_Pin(TMPro::TMP_InputField::ContentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_set_Pin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/ContentType", "Pin", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/ContentType Custom
TMPro::TMP_InputField::ContentType TMPro::TMP_InputField::ContentType::_get_Custom() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_get_Custom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::ContentType>("TMPro", "TMP_InputField/ContentType", "Custom"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/ContentType Custom
void TMPro::TMP_InputField::ContentType::_set_Custom(TMPro::TMP_InputField::ContentType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::ContentType::_set_Custom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/ContentType", "Custom", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_InputField/InputType
#include "TMPro/TMP_InputField.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/InputType Standard
TMPro::TMP_InputField::InputType TMPro::TMP_InputField::InputType::_get_Standard() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::InputType::_get_Standard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::InputType>("TMPro", "TMP_InputField/InputType", "Standard"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/InputType Standard
void TMPro::TMP_InputField::InputType::_set_Standard(TMPro::TMP_InputField::InputType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::InputType::_set_Standard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/InputType", "Standard", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/InputType AutoCorrect
TMPro::TMP_InputField::InputType TMPro::TMP_InputField::InputType::_get_AutoCorrect() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::InputType::_get_AutoCorrect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::InputType>("TMPro", "TMP_InputField/InputType", "AutoCorrect"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/InputType AutoCorrect
void TMPro::TMP_InputField::InputType::_set_AutoCorrect(TMPro::TMP_InputField::InputType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::InputType::_set_AutoCorrect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/InputType", "AutoCorrect", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/InputType Password
TMPro::TMP_InputField::InputType TMPro::TMP_InputField::InputType::_get_Password() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::InputType::_get_Password");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::InputType>("TMPro", "TMP_InputField/InputType", "Password"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/InputType Password
void TMPro::TMP_InputField::InputType::_set_Password(TMPro::TMP_InputField::InputType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::InputType::_set_Password");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/InputType", "Password", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_InputField/CharacterValidation
#include "TMPro/TMP_InputField.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/CharacterValidation None
TMPro::TMP_InputField::CharacterValidation TMPro::TMP_InputField::CharacterValidation::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::CharacterValidation>("TMPro", "TMP_InputField/CharacterValidation", "None"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/CharacterValidation None
void TMPro::TMP_InputField::CharacterValidation::_set_None(TMPro::TMP_InputField::CharacterValidation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/CharacterValidation", "None", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/CharacterValidation Digit
TMPro::TMP_InputField::CharacterValidation TMPro::TMP_InputField::CharacterValidation::_get_Digit() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_get_Digit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::CharacterValidation>("TMPro", "TMP_InputField/CharacterValidation", "Digit"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/CharacterValidation Digit
void TMPro::TMP_InputField::CharacterValidation::_set_Digit(TMPro::TMP_InputField::CharacterValidation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_set_Digit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/CharacterValidation", "Digit", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/CharacterValidation Integer
TMPro::TMP_InputField::CharacterValidation TMPro::TMP_InputField::CharacterValidation::_get_Integer() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_get_Integer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::CharacterValidation>("TMPro", "TMP_InputField/CharacterValidation", "Integer"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/CharacterValidation Integer
void TMPro::TMP_InputField::CharacterValidation::_set_Integer(TMPro::TMP_InputField::CharacterValidation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_set_Integer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/CharacterValidation", "Integer", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/CharacterValidation Decimal
TMPro::TMP_InputField::CharacterValidation TMPro::TMP_InputField::CharacterValidation::_get_Decimal() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_get_Decimal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::CharacterValidation>("TMPro", "TMP_InputField/CharacterValidation", "Decimal"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/CharacterValidation Decimal
void TMPro::TMP_InputField::CharacterValidation::_set_Decimal(TMPro::TMP_InputField::CharacterValidation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_set_Decimal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/CharacterValidation", "Decimal", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/CharacterValidation Alphanumeric
TMPro::TMP_InputField::CharacterValidation TMPro::TMP_InputField::CharacterValidation::_get_Alphanumeric() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_get_Alphanumeric");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::CharacterValidation>("TMPro", "TMP_InputField/CharacterValidation", "Alphanumeric"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/CharacterValidation Alphanumeric
void TMPro::TMP_InputField::CharacterValidation::_set_Alphanumeric(TMPro::TMP_InputField::CharacterValidation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_set_Alphanumeric");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/CharacterValidation", "Alphanumeric", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/CharacterValidation Name
TMPro::TMP_InputField::CharacterValidation TMPro::TMP_InputField::CharacterValidation::_get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_get_Name");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::CharacterValidation>("TMPro", "TMP_InputField/CharacterValidation", "Name"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/CharacterValidation Name
void TMPro::TMP_InputField::CharacterValidation::_set_Name(TMPro::TMP_InputField::CharacterValidation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_set_Name");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/CharacterValidation", "Name", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/CharacterValidation Regex
TMPro::TMP_InputField::CharacterValidation TMPro::TMP_InputField::CharacterValidation::_get_Regex() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_get_Regex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::CharacterValidation>("TMPro", "TMP_InputField/CharacterValidation", "Regex"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/CharacterValidation Regex
void TMPro::TMP_InputField::CharacterValidation::_set_Regex(TMPro::TMP_InputField::CharacterValidation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_set_Regex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/CharacterValidation", "Regex", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/CharacterValidation EmailAddress
TMPro::TMP_InputField::CharacterValidation TMPro::TMP_InputField::CharacterValidation::_get_EmailAddress() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_get_EmailAddress");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::CharacterValidation>("TMPro", "TMP_InputField/CharacterValidation", "EmailAddress"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/CharacterValidation EmailAddress
void TMPro::TMP_InputField::CharacterValidation::_set_EmailAddress(TMPro::TMP_InputField::CharacterValidation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_set_EmailAddress");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/CharacterValidation", "EmailAddress", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/CharacterValidation CustomValidator
TMPro::TMP_InputField::CharacterValidation TMPro::TMP_InputField::CharacterValidation::_get_CustomValidator() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_get_CustomValidator");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::CharacterValidation>("TMPro", "TMP_InputField/CharacterValidation", "CustomValidator"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/CharacterValidation CustomValidator
void TMPro::TMP_InputField::CharacterValidation::_set_CustomValidator(TMPro::TMP_InputField::CharacterValidation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::CharacterValidation::_set_CustomValidator");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/CharacterValidation", "CustomValidator", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_InputField/LineType
#include "TMPro/TMP_InputField.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/LineType SingleLine
TMPro::TMP_InputField::LineType TMPro::TMP_InputField::LineType::_get_SingleLine() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::LineType::_get_SingleLine");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::LineType>("TMPro", "TMP_InputField/LineType", "SingleLine"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/LineType SingleLine
void TMPro::TMP_InputField::LineType::_set_SingleLine(TMPro::TMP_InputField::LineType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::LineType::_set_SingleLine");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/LineType", "SingleLine", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/LineType MultiLineSubmit
TMPro::TMP_InputField::LineType TMPro::TMP_InputField::LineType::_get_MultiLineSubmit() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::LineType::_get_MultiLineSubmit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::LineType>("TMPro", "TMP_InputField/LineType", "MultiLineSubmit"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/LineType MultiLineSubmit
void TMPro::TMP_InputField::LineType::_set_MultiLineSubmit(TMPro::TMP_InputField::LineType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::LineType::_set_MultiLineSubmit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/LineType", "MultiLineSubmit", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/LineType MultiLineNewline
TMPro::TMP_InputField::LineType TMPro::TMP_InputField::LineType::_get_MultiLineNewline() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::LineType::_get_MultiLineNewline");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::LineType>("TMPro", "TMP_InputField/LineType", "MultiLineNewline"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/LineType MultiLineNewline
void TMPro::TMP_InputField::LineType::_set_MultiLineNewline(TMPro::TMP_InputField::LineType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::LineType::_set_MultiLineNewline");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/LineType", "MultiLineNewline", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_InputField/OnValidateInput
#include "TMPro/TMP_InputField_OnValidateInput.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_InputField/OnValidateInput.Invoke
::Il2CppChar TMPro::TMP_InputField::OnValidateInput::Invoke(::Il2CppString* text, int charIndex, ::Il2CppChar addedChar) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnValidateInput::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(charIndex), ::il2cpp_utils::ExtractType(addedChar)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar, false>(this, ___internal__method, text, charIndex, addedChar);
}
// Autogenerated method: TMPro.TMP_InputField/OnValidateInput.BeginInvoke
System::IAsyncResult* TMPro::TMP_InputField::OnValidateInput::BeginInvoke(::Il2CppString* text, int charIndex, ::Il2CppChar addedChar, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnValidateInput::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(charIndex), ::il2cpp_utils::ExtractType(addedChar), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, text, charIndex, addedChar, callback, object);
}
// Autogenerated method: TMPro.TMP_InputField/OnValidateInput.EndInvoke
::Il2CppChar TMPro::TMP_InputField::OnValidateInput::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::OnValidateInput::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: TMP_InputField::OnValidateInput::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::OnValidateInput::*)(::Il2CppObject*, System::IntPtr)>(&TMP_InputField::OnValidateInput::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::OnValidateInput*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::OnValidateInput::*)(::Il2CppObject*, System::IntPtr)>(&TMP_InputField::OnValidateInput::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::OnValidateInput*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnValidateInput::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (TMP_InputField::OnValidateInput::*)(::Il2CppString*, int, ::Il2CppChar)>(&TMP_InputField::OnValidateInput::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::OnValidateInput*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnValidateInput::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (TMP_InputField::OnValidateInput::*)(::Il2CppString*, int, ::Il2CppChar, System::AsyncCallback*, ::Il2CppObject*)>(&TMP_InputField::OnValidateInput::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::OnValidateInput*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::OnValidateInput::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (TMP_InputField::OnValidateInput::*)(System::IAsyncResult*)>(&TMP_InputField::OnValidateInput::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::OnValidateInput*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_InputField/SubmitEvent
#include "TMPro/TMP_InputField_SubmitEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TMP_InputField::SubmitEvent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::SubmitEvent::*)()>(&TMP_InputField::SubmitEvent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::SubmitEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::SubmitEvent::*)()>(&TMP_InputField::SubmitEvent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::SubmitEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_InputField/OnChangeEvent
#include "TMPro/TMP_InputField_OnChangeEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TMP_InputField::OnChangeEvent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::OnChangeEvent::*)()>(&TMP_InputField::OnChangeEvent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::OnChangeEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::OnChangeEvent::*)()>(&TMP_InputField::OnChangeEvent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::OnChangeEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_InputField/SelectionEvent
#include "TMPro/TMP_InputField_SelectionEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TMP_InputField::SelectionEvent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::SelectionEvent::*)()>(&TMP_InputField::SelectionEvent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::SelectionEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::SelectionEvent::*)()>(&TMP_InputField::SelectionEvent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::SelectionEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_InputField/TextSelectionEvent
#include "TMPro/TMP_InputField_TextSelectionEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TMP_InputField::TextSelectionEvent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::TextSelectionEvent::*)()>(&TMP_InputField::TextSelectionEvent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::TextSelectionEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::TextSelectionEvent::*)()>(&TMP_InputField::TextSelectionEvent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::TextSelectionEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_InputField/TouchScreenKeyboardEvent
#include "TMPro/TMP_InputField_TouchScreenKeyboardEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TMP_InputField::TouchScreenKeyboardEvent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::TouchScreenKeyboardEvent::*)()>(&TMP_InputField::TouchScreenKeyboardEvent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::TouchScreenKeyboardEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::TouchScreenKeyboardEvent::*)()>(&TMP_InputField::TouchScreenKeyboardEvent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::TouchScreenKeyboardEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_InputField/EditState
#include "TMPro/TMP_InputField_EditState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/EditState Continue
TMPro::TMP_InputField::EditState TMPro::TMP_InputField::EditState::_get_Continue() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::EditState::_get_Continue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::EditState>("TMPro", "TMP_InputField/EditState", "Continue"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/EditState Continue
void TMPro::TMP_InputField::EditState::_set_Continue(TMPro::TMP_InputField::EditState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::EditState::_set_Continue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/EditState", "Continue", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_InputField/EditState Finish
TMPro::TMP_InputField::EditState TMPro::TMP_InputField::EditState::_get_Finish() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::EditState::_get_Finish");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_InputField::EditState>("TMPro", "TMP_InputField/EditState", "Finish"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_InputField/EditState Finish
void TMPro::TMP_InputField::EditState::_set_Finish(TMPro::TMP_InputField::EditState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::EditState::_set_Finish");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_InputField/EditState", "Finish", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_InputField/<CaretBlink>d__267
#include "TMPro/TMP_InputField_-CaretBlink-d__267.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_InputField/<CaretBlink>d__267.System.IDisposable.Dispose
void TMPro::TMP_InputField::$CaretBlink$d__267::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::$CaretBlink$d__267::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField/<CaretBlink>d__267.MoveNext
bool TMPro::TMP_InputField::$CaretBlink$d__267::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::$CaretBlink$d__267::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField/<CaretBlink>d__267.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* TMPro::TMP_InputField::$CaretBlink$d__267::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::$CaretBlink$d__267::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField/<CaretBlink>d__267.System.Collections.IEnumerator.Reset
void TMPro::TMP_InputField::$CaretBlink$d__267::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::$CaretBlink$d__267::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField/<CaretBlink>d__267.System.Collections.IEnumerator.get_Current
::Il2CppObject* TMPro::TMP_InputField::$CaretBlink$d__267::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::$CaretBlink$d__267::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TMP_InputField::$CaretBlink$d__267::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::$CaretBlink$d__267::*)(int)>(&TMP_InputField::$CaretBlink$d__267::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::$CaretBlink$d__267*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::$CaretBlink$d__267::*)(int)>(&TMP_InputField::$CaretBlink$d__267::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::$CaretBlink$d__267*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::$CaretBlink$d__267::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::$CaretBlink$d__267::*)()>(&TMP_InputField::$CaretBlink$d__267::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::$CaretBlink$d__267*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::$CaretBlink$d__267::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::$CaretBlink$d__267::*)()>(&TMP_InputField::$CaretBlink$d__267::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::$CaretBlink$d__267*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::$CaretBlink$d__267::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TMP_InputField::$CaretBlink$d__267::*)()>(&TMP_InputField::$CaretBlink$d__267::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::$CaretBlink$d__267*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::$CaretBlink$d__267::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::$CaretBlink$d__267::*)()>(&TMP_InputField::$CaretBlink$d__267::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::$CaretBlink$d__267*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::$CaretBlink$d__267::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TMP_InputField::$CaretBlink$d__267::*)()>(&TMP_InputField::$CaretBlink$d__267::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::$CaretBlink$d__267*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_InputField/<MouseDragOutsideRect>d__285
#include "TMPro/TMP_InputField_-MouseDragOutsideRect-d__285.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_InputField/<MouseDragOutsideRect>d__285.System.IDisposable.Dispose
void TMPro::TMP_InputField::$MouseDragOutsideRect$d__285::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::$MouseDragOutsideRect$d__285::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField/<MouseDragOutsideRect>d__285.MoveNext
bool TMPro::TMP_InputField::$MouseDragOutsideRect$d__285::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::$MouseDragOutsideRect$d__285::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField/<MouseDragOutsideRect>d__285.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* TMPro::TMP_InputField::$MouseDragOutsideRect$d__285::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::$MouseDragOutsideRect$d__285::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField/<MouseDragOutsideRect>d__285.System.Collections.IEnumerator.Reset
void TMPro::TMP_InputField::$MouseDragOutsideRect$d__285::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::$MouseDragOutsideRect$d__285::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_InputField/<MouseDragOutsideRect>d__285.System.Collections.IEnumerator.get_Current
::Il2CppObject* TMPro::TMP_InputField::$MouseDragOutsideRect$d__285::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::$MouseDragOutsideRect$d__285::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TMP_InputField::$MouseDragOutsideRect$d__285::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::$MouseDragOutsideRect$d__285::*)(int)>(&TMP_InputField::$MouseDragOutsideRect$d__285::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::$MouseDragOutsideRect$d__285*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::$MouseDragOutsideRect$d__285::*)(int)>(&TMP_InputField::$MouseDragOutsideRect$d__285::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::$MouseDragOutsideRect$d__285*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_InputField::$MouseDragOutsideRect$d__285::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::$MouseDragOutsideRect$d__285::*)()>(&TMP_InputField::$MouseDragOutsideRect$d__285::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::$MouseDragOutsideRect$d__285*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::$MouseDragOutsideRect$d__285::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_InputField::$MouseDragOutsideRect$d__285::*)()>(&TMP_InputField::$MouseDragOutsideRect$d__285::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::$MouseDragOutsideRect$d__285*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::$MouseDragOutsideRect$d__285::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TMP_InputField::$MouseDragOutsideRect$d__285::*)()>(&TMP_InputField::$MouseDragOutsideRect$d__285::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::$MouseDragOutsideRect$d__285*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::$MouseDragOutsideRect$d__285::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputField::$MouseDragOutsideRect$d__285::*)()>(&TMP_InputField::$MouseDragOutsideRect$d__285::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::$MouseDragOutsideRect$d__285*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_InputField::$MouseDragOutsideRect$d__285::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TMP_InputField::$MouseDragOutsideRect$d__285::*)()>(&TMP_InputField::$MouseDragOutsideRect$d__285::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputField::$MouseDragOutsideRect$d__285*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.SetPropertyUtility
#include "TMPro/SetPropertyUtility.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.SetPropertyUtility.SetColor
bool TMPro::SetPropertyUtility::SetColor(UnityEngine::Color& currentValue, UnityEngine::Color newValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::SetPropertyUtility::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "SetPropertyUtility", "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentValue), ::il2cpp_utils::ExtractType(newValue)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, currentValue, newValue);
}
// Writing MetadataGetter for method: SetPropertyUtility::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Color&, UnityEngine::Color)>(&SetPropertyUtility::SetColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetPropertyUtility*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: SetPropertyUtility::SetEquatableStruct
// Il2CppName: SetEquatableStruct
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: SetPropertyUtility::SetStruct
// Il2CppName: SetStruct
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: SetPropertyUtility::SetClass
// Il2CppName: SetClass
// Cannot write MetadataGetter for generic methods!
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_InputValidator
#include "TMPro/TMP_InputValidator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_InputValidator.Validate
::Il2CppChar TMPro::TMP_InputValidator::Validate(::Il2CppString*& text, int& pos, ::Il2CppChar ch) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputValidator::Validate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Validate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(ch)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar, false>(this, ___internal__method, text, pos, ch);
}
// Writing MetadataGetter for method: TMP_InputValidator::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (TMP_InputValidator::*)(::Il2CppString*&, int&, ::Il2CppChar)>(&TMP_InputValidator::Validate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputValidator*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TMP_InputValidator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputValidator::*)()>(&TMP_InputValidator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputValidator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_InputValidator::*)()>(&TMP_InputValidator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_InputValidator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_MaterialManager
#include "TMPro/TMP_MaterialManager.hpp"
// Including type: TMPro.TMP_MaterialManager/FallbackMaterial
#include "TMPro/TMP_MaterialManager_FallbackMaterial.hpp"
// Including type: TMPro.TMP_MaterialManager/MaskingMaterial
#include "TMPro/TMP_MaterialManager_MaskingMaterial.hpp"
// Including type: TMPro.TMP_MaterialManager/<>c__DisplayClass10_0
#include "TMPro/TMP_MaterialManager_--c__DisplayClass10_0.hpp"
// Including type: TMPro.TMP_MaterialManager/<>c__DisplayClass12_0
#include "TMPro/TMP_MaterialManager_--c__DisplayClass12_0.hpp"
// Including type: TMPro.TMP_MaterialManager/<>c__DisplayClass13_0
#include "TMPro/TMP_MaterialManager_--c__DisplayClass13_0.hpp"
// Including type: TMPro.TMP_MaterialManager/<>c__DisplayClass14_0
#include "TMPro/TMP_MaterialManager_--c__DisplayClass14_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.UI.MaskableGraphic
#include "UnityEngine/UI/MaskableGraphic.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<TMPro.TMP_MaterialManager/MaskingMaterial> m_materialList
System::Collections::Generic::List_1<TMPro::TMP_MaterialManager::MaskingMaterial*>* TMPro::TMP_MaterialManager::_get_m_materialList() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::_get_m_materialList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<TMPro::TMP_MaterialManager::MaskingMaterial*>*>("TMPro", "TMP_MaterialManager", "m_materialList"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<TMPro.TMP_MaterialManager/MaskingMaterial> m_materialList
void TMPro::TMP_MaterialManager::_set_m_materialList(System::Collections::Generic::List_1<TMPro::TMP_MaterialManager::MaskingMaterial*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::_set_m_materialList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_MaterialManager", "m_materialList", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<System.Int64,TMPro.TMP_MaterialManager/FallbackMaterial> m_fallbackMaterials
System::Collections::Generic::Dictionary_2<int64_t, TMPro::TMP_MaterialManager::FallbackMaterial*>* TMPro::TMP_MaterialManager::_get_m_fallbackMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::_get_m_fallbackMaterials");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<int64_t, TMPro::TMP_MaterialManager::FallbackMaterial*>*>("TMPro", "TMP_MaterialManager", "m_fallbackMaterials")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<System.Int64,TMPro.TMP_MaterialManager/FallbackMaterial> m_fallbackMaterials
void TMPro::TMP_MaterialManager::_set_m_fallbackMaterials(System::Collections::Generic::Dictionary_2<int64_t, TMPro::TMP_MaterialManager::FallbackMaterial*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::_set_m_fallbackMaterials");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_MaterialManager", "m_fallbackMaterials", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.Int64> m_fallbackMaterialLookup
System::Collections::Generic::Dictionary_2<int, int64_t>* TMPro::TMP_MaterialManager::_get_m_fallbackMaterialLookup() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::_get_m_fallbackMaterialLookup");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<int, int64_t>*>("TMPro", "TMP_MaterialManager", "m_fallbackMaterialLookup")));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.Int64> m_fallbackMaterialLookup
void TMPro::TMP_MaterialManager::_set_m_fallbackMaterialLookup(System::Collections::Generic::Dictionary_2<int, int64_t>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::_set_m_fallbackMaterialLookup");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_MaterialManager", "m_fallbackMaterialLookup", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<TMPro.TMP_MaterialManager/FallbackMaterial> m_fallbackCleanupList
System::Collections::Generic::List_1<TMPro::TMP_MaterialManager::FallbackMaterial*>* TMPro::TMP_MaterialManager::_get_m_fallbackCleanupList() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::_get_m_fallbackCleanupList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<TMPro::TMP_MaterialManager::FallbackMaterial*>*>("TMPro", "TMP_MaterialManager", "m_fallbackCleanupList"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<TMPro.TMP_MaterialManager/FallbackMaterial> m_fallbackCleanupList
void TMPro::TMP_MaterialManager::_set_m_fallbackCleanupList(System::Collections::Generic::List_1<TMPro::TMP_MaterialManager::FallbackMaterial*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::_set_m_fallbackCleanupList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_MaterialManager", "m_fallbackCleanupList", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean isFallbackListDirty
bool TMPro::TMP_MaterialManager::_get_isFallbackListDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::_get_isFallbackListDirty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("TMPro", "TMP_MaterialManager", "isFallbackListDirty"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean isFallbackListDirty
void TMPro::TMP_MaterialManager::_set_isFallbackListDirty(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::_set_isFallbackListDirty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_MaterialManager", "isFallbackListDirty", value));
}
// Autogenerated method: TMPro.TMP_MaterialManager..cctor
void TMPro::TMP_MaterialManager::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_MaterialManager.OnPreRender
void TMPro::TMP_MaterialManager::OnPreRender(UnityEngine::Camera* cam) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::OnPreRender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "OnPreRender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cam)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cam);
}
// Autogenerated method: TMPro.TMP_MaterialManager.OnPreRenderCanvas
void TMPro::TMP_MaterialManager::OnPreRenderCanvas() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::OnPreRenderCanvas");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "OnPreRenderCanvas", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_MaterialManager.GetStencilMaterial
UnityEngine::Material* TMPro::TMP_MaterialManager::GetStencilMaterial(UnityEngine::Material* baseMaterial, int stencilID) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::GetStencilMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "GetStencilMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(baseMaterial), ::il2cpp_utils::ExtractType(stencilID)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, baseMaterial, stencilID);
}
// Autogenerated method: TMPro.TMP_MaterialManager.ReleaseStencilMaterial
void TMPro::TMP_MaterialManager::ReleaseStencilMaterial(UnityEngine::Material* stencilMaterial) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::ReleaseStencilMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "ReleaseStencilMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stencilMaterial)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stencilMaterial);
}
// Autogenerated method: TMPro.TMP_MaterialManager.GetBaseMaterial
UnityEngine::Material* TMPro::TMP_MaterialManager::GetBaseMaterial(UnityEngine::Material* stencilMaterial) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::GetBaseMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "GetBaseMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stencilMaterial)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stencilMaterial);
}
// Autogenerated method: TMPro.TMP_MaterialManager.SetStencil
UnityEngine::Material* TMPro::TMP_MaterialManager::SetStencil(UnityEngine::Material* material, int stencilID) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::SetStencil");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "SetStencil", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(material), ::il2cpp_utils::ExtractType(stencilID)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, material, stencilID);
}
// Autogenerated method: TMPro.TMP_MaterialManager.AddMaskingMaterial
void TMPro::TMP_MaterialManager::AddMaskingMaterial(UnityEngine::Material* baseMaterial, UnityEngine::Material* stencilMaterial, int stencilID) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::AddMaskingMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "AddMaskingMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(baseMaterial), ::il2cpp_utils::ExtractType(stencilMaterial), ::il2cpp_utils::ExtractType(stencilID)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, baseMaterial, stencilMaterial, stencilID);
}
// Autogenerated method: TMPro.TMP_MaterialManager.RemoveStencilMaterial
void TMPro::TMP_MaterialManager::RemoveStencilMaterial(UnityEngine::Material* stencilMaterial) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::RemoveStencilMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "RemoveStencilMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stencilMaterial)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stencilMaterial);
}
// Autogenerated method: TMPro.TMP_MaterialManager.ReleaseBaseMaterial
void TMPro::TMP_MaterialManager::ReleaseBaseMaterial(UnityEngine::Material* baseMaterial) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::ReleaseBaseMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "ReleaseBaseMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(baseMaterial)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, baseMaterial);
}
// Autogenerated method: TMPro.TMP_MaterialManager.ClearMaterials
void TMPro::TMP_MaterialManager::ClearMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::ClearMaterials");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "ClearMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_MaterialManager.GetStencilID
int TMPro::TMP_MaterialManager::GetStencilID(UnityEngine::GameObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::GetStencilID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "GetStencilID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: TMPro.TMP_MaterialManager.GetMaterialForRendering
UnityEngine::Material* TMPro::TMP_MaterialManager::GetMaterialForRendering(UnityEngine::UI::MaskableGraphic* graphic, UnityEngine::Material* baseMaterial) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::GetMaterialForRendering");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "GetMaterialForRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graphic), ::il2cpp_utils::ExtractType(baseMaterial)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graphic, baseMaterial);
}
// Autogenerated method: TMPro.TMP_MaterialManager.FindRootSortOverrideCanvas
UnityEngine::Transform* TMPro::TMP_MaterialManager::FindRootSortOverrideCanvas(UnityEngine::Transform* start) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::FindRootSortOverrideCanvas");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "FindRootSortOverrideCanvas", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, start);
}
// Autogenerated method: TMPro.TMP_MaterialManager.GetFallbackMaterial
UnityEngine::Material* TMPro::TMP_MaterialManager::GetFallbackMaterial(UnityEngine::Material* sourceMaterial, UnityEngine::Material* targetMaterial) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::GetFallbackMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "GetFallbackMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceMaterial), ::il2cpp_utils::ExtractType(targetMaterial)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, sourceMaterial, targetMaterial);
}
// Autogenerated method: TMPro.TMP_MaterialManager.AddFallbackMaterialReference
void TMPro::TMP_MaterialManager::AddFallbackMaterialReference(UnityEngine::Material* targetMaterial) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::AddFallbackMaterialReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "AddFallbackMaterialReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetMaterial)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, targetMaterial);
}
// Autogenerated method: TMPro.TMP_MaterialManager.RemoveFallbackMaterialReference
void TMPro::TMP_MaterialManager::RemoveFallbackMaterialReference(UnityEngine::Material* targetMaterial) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::RemoveFallbackMaterialReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "RemoveFallbackMaterialReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetMaterial)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, targetMaterial);
}
// Autogenerated method: TMPro.TMP_MaterialManager.CleanupFallbackMaterials
void TMPro::TMP_MaterialManager::CleanupFallbackMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::CleanupFallbackMaterials");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "CleanupFallbackMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_MaterialManager.ReleaseFallbackMaterial
void TMPro::TMP_MaterialManager::ReleaseFallbackMaterial(UnityEngine::Material* fallackMaterial) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::ReleaseFallbackMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "ReleaseFallbackMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fallackMaterial)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fallackMaterial);
}
// Autogenerated method: TMPro.TMP_MaterialManager.CopyMaterialPresetProperties
void TMPro::TMP_MaterialManager::CopyMaterialPresetProperties(UnityEngine::Material* source, UnityEngine::Material* destination) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::CopyMaterialPresetProperties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MaterialManager", "CopyMaterialPresetProperties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source), ::il2cpp_utils::ExtractType(destination)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, source, destination);
}
// Writing MetadataGetter for method: TMP_MaterialManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_MaterialManager::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::OnPreRender
// Il2CppName: OnPreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Camera*)>(&TMP_MaterialManager::OnPreRender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "OnPreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Camera*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::OnPreRenderCanvas
// Il2CppName: OnPreRenderCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_MaterialManager::OnPreRenderCanvas)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "OnPreRenderCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::GetStencilMaterial
// Il2CppName: GetStencilMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (*)(UnityEngine::Material*, int)>(&TMP_MaterialManager::GetStencilMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "GetStencilMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::ReleaseStencilMaterial
// Il2CppName: ReleaseStencilMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Material*)>(&TMP_MaterialManager::ReleaseStencilMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "ReleaseStencilMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::GetBaseMaterial
// Il2CppName: GetBaseMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (*)(UnityEngine::Material*)>(&TMP_MaterialManager::GetBaseMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "GetBaseMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::SetStencil
// Il2CppName: SetStencil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (*)(UnityEngine::Material*, int)>(&TMP_MaterialManager::SetStencil)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "SetStencil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::AddMaskingMaterial
// Il2CppName: AddMaskingMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Material*, UnityEngine::Material*, int)>(&TMP_MaterialManager::AddMaskingMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "AddMaskingMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::RemoveStencilMaterial
// Il2CppName: RemoveStencilMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Material*)>(&TMP_MaterialManager::RemoveStencilMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "RemoveStencilMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::ReleaseBaseMaterial
// Il2CppName: ReleaseBaseMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Material*)>(&TMP_MaterialManager::ReleaseBaseMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "ReleaseBaseMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::ClearMaterials
// Il2CppName: ClearMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_MaterialManager::ClearMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "ClearMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::GetStencilID
// Il2CppName: GetStencilID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(UnityEngine::GameObject*)>(&TMP_MaterialManager::GetStencilID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "GetStencilID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::GetMaterialForRendering
// Il2CppName: GetMaterialForRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (*)(UnityEngine::UI::MaskableGraphic*, UnityEngine::Material*)>(&TMP_MaterialManager::GetMaterialForRendering)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "GetMaterialForRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::MaskableGraphic*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::FindRootSortOverrideCanvas
// Il2CppName: FindRootSortOverrideCanvas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (*)(UnityEngine::Transform*)>(&TMP_MaterialManager::FindRootSortOverrideCanvas)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "FindRootSortOverrideCanvas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::GetFallbackMaterial
// Il2CppName: GetFallbackMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (*)(UnityEngine::Material*, UnityEngine::Material*)>(&TMP_MaterialManager::GetFallbackMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "GetFallbackMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::AddFallbackMaterialReference
// Il2CppName: AddFallbackMaterialReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Material*)>(&TMP_MaterialManager::AddFallbackMaterialReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "AddFallbackMaterialReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::RemoveFallbackMaterialReference
// Il2CppName: RemoveFallbackMaterialReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Material*)>(&TMP_MaterialManager::RemoveFallbackMaterialReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "RemoveFallbackMaterialReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::CleanupFallbackMaterials
// Il2CppName: CleanupFallbackMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_MaterialManager::CleanupFallbackMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "CleanupFallbackMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::ReleaseFallbackMaterial
// Il2CppName: ReleaseFallbackMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Material*)>(&TMP_MaterialManager::ReleaseFallbackMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "ReleaseFallbackMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::CopyMaterialPresetProperties
// Il2CppName: CopyMaterialPresetProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Material*, UnityEngine::Material*)>(&TMP_MaterialManager::CopyMaterialPresetProperties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager*), "CopyMaterialPresetProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_MaterialManager/FallbackMaterial
#include "TMPro/TMP_MaterialManager_FallbackMaterial.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TMP_MaterialManager::FallbackMaterial::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MaterialManager::FallbackMaterial::*)()>(&TMP_MaterialManager::FallbackMaterial::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::FallbackMaterial*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MaterialManager::FallbackMaterial::*)()>(&TMP_MaterialManager::FallbackMaterial::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::FallbackMaterial*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_MaterialManager/MaskingMaterial
#include "TMPro/TMP_MaterialManager_MaskingMaterial.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TMP_MaterialManager::MaskingMaterial::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MaterialManager::MaskingMaterial::*)()>(&TMP_MaterialManager::MaskingMaterial::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::MaskingMaterial*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MaterialManager::MaskingMaterial::*)()>(&TMP_MaterialManager::MaskingMaterial::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::MaskingMaterial*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_MaterialManager/<>c__DisplayClass10_0
#include "TMPro/TMP_MaterialManager_--c__DisplayClass10_0.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: TMPro.TMP_MaterialManager/MaskingMaterial
#include "TMPro/TMP_MaterialManager_MaskingMaterial.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_MaterialManager/<>c__DisplayClass10_0.<GetBaseMaterial>b__0
bool TMPro::TMP_MaterialManager::$$c__DisplayClass10_0::$GetBaseMaterial$b__0(TMPro::TMP_MaterialManager::MaskingMaterial* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::$$c__DisplayClass10_0::<GetBaseMaterial>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<GetBaseMaterial>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item);
}
// Writing MetadataGetter for method: TMP_MaterialManager::$$c__DisplayClass10_0::$GetBaseMaterial$b__0
// Il2CppName: <GetBaseMaterial>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_MaterialManager::$$c__DisplayClass10_0::*)(TMPro::TMP_MaterialManager::MaskingMaterial*)>(&TMP_MaterialManager::$$c__DisplayClass10_0::$GetBaseMaterial$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::$$c__DisplayClass10_0*), "<GetBaseMaterial>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_MaterialManager::MaskingMaterial*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::$$c__DisplayClass10_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MaterialManager::$$c__DisplayClass10_0::*)()>(&TMP_MaterialManager::$$c__DisplayClass10_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::$$c__DisplayClass10_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MaterialManager::$$c__DisplayClass10_0::*)()>(&TMP_MaterialManager::$$c__DisplayClass10_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::$$c__DisplayClass10_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_MaterialManager/<>c__DisplayClass12_0
#include "TMPro/TMP_MaterialManager_--c__DisplayClass12_0.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: TMPro.TMP_MaterialManager/MaskingMaterial
#include "TMPro/TMP_MaterialManager_MaskingMaterial.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_MaterialManager/<>c__DisplayClass12_0.<AddMaskingMaterial>b__0
bool TMPro::TMP_MaterialManager::$$c__DisplayClass12_0::$AddMaskingMaterial$b__0(TMPro::TMP_MaterialManager::MaskingMaterial* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::$$c__DisplayClass12_0::<AddMaskingMaterial>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AddMaskingMaterial>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item);
}
// Writing MetadataGetter for method: TMP_MaterialManager::$$c__DisplayClass12_0::$AddMaskingMaterial$b__0
// Il2CppName: <AddMaskingMaterial>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_MaterialManager::$$c__DisplayClass12_0::*)(TMPro::TMP_MaterialManager::MaskingMaterial*)>(&TMP_MaterialManager::$$c__DisplayClass12_0::$AddMaskingMaterial$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::$$c__DisplayClass12_0*), "<AddMaskingMaterial>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_MaterialManager::MaskingMaterial*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::$$c__DisplayClass12_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MaterialManager::$$c__DisplayClass12_0::*)()>(&TMP_MaterialManager::$$c__DisplayClass12_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::$$c__DisplayClass12_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MaterialManager::$$c__DisplayClass12_0::*)()>(&TMP_MaterialManager::$$c__DisplayClass12_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::$$c__DisplayClass12_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_MaterialManager/<>c__DisplayClass13_0
#include "TMPro/TMP_MaterialManager_--c__DisplayClass13_0.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: TMPro.TMP_MaterialManager/MaskingMaterial
#include "TMPro/TMP_MaterialManager_MaskingMaterial.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_MaterialManager/<>c__DisplayClass13_0.<RemoveStencilMaterial>b__0
bool TMPro::TMP_MaterialManager::$$c__DisplayClass13_0::$RemoveStencilMaterial$b__0(TMPro::TMP_MaterialManager::MaskingMaterial* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::$$c__DisplayClass13_0::<RemoveStencilMaterial>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RemoveStencilMaterial>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item);
}
// Writing MetadataGetter for method: TMP_MaterialManager::$$c__DisplayClass13_0::$RemoveStencilMaterial$b__0
// Il2CppName: <RemoveStencilMaterial>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_MaterialManager::$$c__DisplayClass13_0::*)(TMPro::TMP_MaterialManager::MaskingMaterial*)>(&TMP_MaterialManager::$$c__DisplayClass13_0::$RemoveStencilMaterial$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::$$c__DisplayClass13_0*), "<RemoveStencilMaterial>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_MaterialManager::MaskingMaterial*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::$$c__DisplayClass13_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MaterialManager::$$c__DisplayClass13_0::*)()>(&TMP_MaterialManager::$$c__DisplayClass13_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::$$c__DisplayClass13_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MaterialManager::$$c__DisplayClass13_0::*)()>(&TMP_MaterialManager::$$c__DisplayClass13_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::$$c__DisplayClass13_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_MaterialManager/<>c__DisplayClass14_0
#include "TMPro/TMP_MaterialManager_--c__DisplayClass14_0.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: TMPro.TMP_MaterialManager/MaskingMaterial
#include "TMPro/TMP_MaterialManager_MaskingMaterial.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_MaterialManager/<>c__DisplayClass14_0.<ReleaseBaseMaterial>b__0
bool TMPro::TMP_MaterialManager::$$c__DisplayClass14_0::$ReleaseBaseMaterial$b__0(TMPro::TMP_MaterialManager::MaskingMaterial* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::$$c__DisplayClass14_0::<ReleaseBaseMaterial>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ReleaseBaseMaterial>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item);
}
// Writing MetadataGetter for method: TMP_MaterialManager::$$c__DisplayClass14_0::$ReleaseBaseMaterial$b__0
// Il2CppName: <ReleaseBaseMaterial>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_MaterialManager::$$c__DisplayClass14_0::*)(TMPro::TMP_MaterialManager::MaskingMaterial*)>(&TMP_MaterialManager::$$c__DisplayClass14_0::$ReleaseBaseMaterial$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::$$c__DisplayClass14_0*), "<ReleaseBaseMaterial>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_MaterialManager::MaskingMaterial*>()});
  }
};
// Writing MetadataGetter for method: TMP_MaterialManager::$$c__DisplayClass14_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MaterialManager::$$c__DisplayClass14_0::*)()>(&TMP_MaterialManager::$$c__DisplayClass14_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::$$c__DisplayClass14_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MaterialManager::$$c__DisplayClass14_0::*)()>(&TMP_MaterialManager::$$c__DisplayClass14_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MaterialManager::$$c__DisplayClass14_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.VertexSortingOrder
#include "TMPro/VertexSortingOrder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.VertexSortingOrder Normal
TMPro::VertexSortingOrder TMPro::VertexSortingOrder::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::VertexSortingOrder::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::VertexSortingOrder>("TMPro", "VertexSortingOrder", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.VertexSortingOrder Normal
void TMPro::VertexSortingOrder::_set_Normal(TMPro::VertexSortingOrder value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::VertexSortingOrder::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "VertexSortingOrder", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.VertexSortingOrder Reverse
TMPro::VertexSortingOrder TMPro::VertexSortingOrder::_get_Reverse() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::VertexSortingOrder::_get_Reverse");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::VertexSortingOrder>("TMPro", "VertexSortingOrder", "Reverse"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.VertexSortingOrder Reverse
void TMPro::VertexSortingOrder::_set_Reverse(TMPro::VertexSortingOrder value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::VertexSortingOrder::_set_Reverse");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "VertexSortingOrder", "Reverse", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_MeshInfo
#include "TMPro/TMP_MeshInfo.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: TMPro.VertexSortingOrder
#include "TMPro/VertexSortingOrder.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Color32 s_DefaultColor
UnityEngine::Color32 TMPro::TMP_MeshInfo::_get_s_DefaultColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::_get_s_DefaultColor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Color32>("TMPro", "TMP_MeshInfo", "s_DefaultColor"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Color32 s_DefaultColor
void TMPro::TMP_MeshInfo::_set_s_DefaultColor(UnityEngine::Color32 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::_set_s_DefaultColor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_MeshInfo", "s_DefaultColor", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 s_DefaultNormal
UnityEngine::Vector3 TMPro::TMP_MeshInfo::_get_s_DefaultNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::_get_s_DefaultNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("TMPro", "TMP_MeshInfo", "s_DefaultNormal"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 s_DefaultNormal
void TMPro::TMP_MeshInfo::_set_s_DefaultNormal(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::_set_s_DefaultNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_MeshInfo", "s_DefaultNormal", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector4 s_DefaultTangent
UnityEngine::Vector4 TMPro::TMP_MeshInfo::_get_s_DefaultTangent() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::_get_s_DefaultTangent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector4>("TMPro", "TMP_MeshInfo", "s_DefaultTangent"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector4 s_DefaultTangent
void TMPro::TMP_MeshInfo::_set_s_DefaultTangent(UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::_set_s_DefaultTangent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_MeshInfo", "s_DefaultTangent", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Bounds s_DefaultBounds
UnityEngine::Bounds TMPro::TMP_MeshInfo::_get_s_DefaultBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::_get_s_DefaultBounds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Bounds>("TMPro", "TMP_MeshInfo", "s_DefaultBounds"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Bounds s_DefaultBounds
void TMPro::TMP_MeshInfo::_set_s_DefaultBounds(UnityEngine::Bounds value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::_set_s_DefaultBounds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_MeshInfo", "s_DefaultBounds", value));
}
// Autogenerated method: TMPro.TMP_MeshInfo.ResizeMeshInfo
void TMPro::TMP_MeshInfo::ResizeMeshInfo(int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::ResizeMeshInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ResizeMeshInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, size);
}
// Autogenerated method: TMPro.TMP_MeshInfo.ResizeMeshInfo
void TMPro::TMP_MeshInfo::ResizeMeshInfo(int size, bool isVolumetric) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::ResizeMeshInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ResizeMeshInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size), ::il2cpp_utils::ExtractType(isVolumetric)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, size, isVolumetric);
}
// Autogenerated method: TMPro.TMP_MeshInfo.Clear
void TMPro::TMP_MeshInfo::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_MeshInfo.Clear
void TMPro::TMP_MeshInfo::Clear(bool uploadChanges) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uploadChanges)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, uploadChanges);
}
// Autogenerated method: TMPro.TMP_MeshInfo.ClearUnusedVertices
void TMPro::TMP_MeshInfo::ClearUnusedVertices() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::ClearUnusedVertices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ClearUnusedVertices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_MeshInfo.ClearUnusedVertices
void TMPro::TMP_MeshInfo::ClearUnusedVertices(int startIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::ClearUnusedVertices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ClearUnusedVertices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, startIndex);
}
// Autogenerated method: TMPro.TMP_MeshInfo.ClearUnusedVertices
void TMPro::TMP_MeshInfo::ClearUnusedVertices(int startIndex, bool updateMesh) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::ClearUnusedVertices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ClearUnusedVertices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(updateMesh)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, startIndex, updateMesh);
}
// Autogenerated method: TMPro.TMP_MeshInfo.SortGeometry
void TMPro::TMP_MeshInfo::SortGeometry(TMPro::VertexSortingOrder order) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::SortGeometry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SortGeometry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(order)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, order);
}
// Autogenerated method: TMPro.TMP_MeshInfo.SortGeometry
void TMPro::TMP_MeshInfo::SortGeometry(System::Collections::Generic::IList_1<int>* sortingOrder) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::SortGeometry");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SortGeometry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sortingOrder)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, sortingOrder);
}
// Autogenerated method: TMPro.TMP_MeshInfo.SwapVertexData
void TMPro::TMP_MeshInfo::SwapVertexData(int src, int dst) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::SwapVertexData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SwapVertexData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dst)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, src, dst);
}
// Autogenerated method: TMPro.TMP_MeshInfo..cctor
void TMPro::TMP_MeshInfo::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MeshInfo::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_MeshInfo", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TMP_MeshInfo::TMP_MeshInfo
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MeshInfo::*)(UnityEngine::Mesh*, int)>(&TMP_MeshInfo::TMP_MeshInfo<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MeshInfo), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MeshInfo::*)(UnityEngine::Mesh*, int)>(&TMP_MeshInfo::TMP_MeshInfo<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MeshInfo), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_MeshInfo::TMP_MeshInfo
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MeshInfo::*)(UnityEngine::Mesh*, int, bool)>(&TMP_MeshInfo::TMP_MeshInfo<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MeshInfo), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MeshInfo::*)(UnityEngine::Mesh*, int, bool)>(&TMP_MeshInfo::TMP_MeshInfo<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MeshInfo), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_MeshInfo::ResizeMeshInfo
// Il2CppName: ResizeMeshInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MeshInfo::*)(int)>(&TMP_MeshInfo::ResizeMeshInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MeshInfo), "ResizeMeshInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_MeshInfo::ResizeMeshInfo
// Il2CppName: ResizeMeshInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MeshInfo::*)(int, bool)>(&TMP_MeshInfo::ResizeMeshInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MeshInfo), "ResizeMeshInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_MeshInfo::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MeshInfo::*)()>(&TMP_MeshInfo::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MeshInfo), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_MeshInfo::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MeshInfo::*)(bool)>(&TMP_MeshInfo::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MeshInfo), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_MeshInfo::ClearUnusedVertices
// Il2CppName: ClearUnusedVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MeshInfo::*)()>(&TMP_MeshInfo::ClearUnusedVertices)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MeshInfo), "ClearUnusedVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_MeshInfo::ClearUnusedVertices
// Il2CppName: ClearUnusedVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MeshInfo::*)(int)>(&TMP_MeshInfo::ClearUnusedVertices)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MeshInfo), "ClearUnusedVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_MeshInfo::ClearUnusedVertices
// Il2CppName: ClearUnusedVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MeshInfo::*)(int, bool)>(&TMP_MeshInfo::ClearUnusedVertices)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MeshInfo), "ClearUnusedVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_MeshInfo::SortGeometry
// Il2CppName: SortGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MeshInfo::*)(TMPro::VertexSortingOrder)>(&TMP_MeshInfo::SortGeometry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MeshInfo), "SortGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::VertexSortingOrder>()});
  }
};
// Writing MetadataGetter for method: TMP_MeshInfo::SortGeometry
// Il2CppName: SortGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MeshInfo::*)(System::Collections::Generic::IList_1<int>*)>(&TMP_MeshInfo::SortGeometry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MeshInfo), "SortGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IList_1<int>*>()});
  }
};
// Writing MetadataGetter for method: TMP_MeshInfo::SwapVertexData
// Il2CppName: SwapVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_MeshInfo::*)(int, int)>(&TMP_MeshInfo::SwapVertexData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MeshInfo), "SwapVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_MeshInfo::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_MeshInfo::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_MeshInfo), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_FontStyleStack
#include "TMPro/TMP_FontStyleStack.hpp"
// Including type: TMPro.FontStyles
#include "TMPro/FontStyles.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_FontStyleStack.Clear
void TMPro::TMP_FontStyleStack::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontStyleStack::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_FontStyleStack.Add
uint8_t TMPro::TMP_FontStyleStack::Add(TMPro::FontStyles style) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontStyleStack::Add");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Add", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(style)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(*this, ___internal__method, style);
}
// Autogenerated method: TMPro.TMP_FontStyleStack.Remove
uint8_t TMPro::TMP_FontStyleStack::Remove(TMPro::FontStyles style) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_FontStyleStack::Remove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Remove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(style)})));
  return ::il2cpp_utils::RunMethodThrow<uint8_t, false>(*this, ___internal__method, style);
}
// Writing MetadataGetter for method: TMP_FontStyleStack::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_FontStyleStack::*)()>(&TMP_FontStyleStack::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontStyleStack), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_FontStyleStack::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (TMP_FontStyleStack::*)(TMPro::FontStyles)>(&TMP_FontStyleStack::Add)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontStyleStack), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::FontStyles>()});
  }
};
// Writing MetadataGetter for method: TMP_FontStyleStack::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (TMP_FontStyleStack::*)(TMPro::FontStyles)>(&TMP_FontStyleStack::Remove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_FontStyleStack), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::FontStyles>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.RichTextTag
#include "TMPro/RichTextTag.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag BOLD
TMPro::RichTextTag TMPro::RichTextTag::_get_BOLD() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_BOLD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "BOLD"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag BOLD
void TMPro::RichTextTag::_set_BOLD(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_BOLD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "BOLD", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag SLASH_BOLD
TMPro::RichTextTag TMPro::RichTextTag::_get_SLASH_BOLD() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_SLASH_BOLD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "SLASH_BOLD"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag SLASH_BOLD
void TMPro::RichTextTag::_set_SLASH_BOLD(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_SLASH_BOLD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "SLASH_BOLD", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag ITALIC
TMPro::RichTextTag TMPro::RichTextTag::_get_ITALIC() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_ITALIC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "ITALIC"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag ITALIC
void TMPro::RichTextTag::_set_ITALIC(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_ITALIC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "ITALIC", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag SLASH_ITALIC
TMPro::RichTextTag TMPro::RichTextTag::_get_SLASH_ITALIC() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_SLASH_ITALIC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "SLASH_ITALIC"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag SLASH_ITALIC
void TMPro::RichTextTag::_set_SLASH_ITALIC(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_SLASH_ITALIC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "SLASH_ITALIC", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag UNDERLINE
TMPro::RichTextTag TMPro::RichTextTag::_get_UNDERLINE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_UNDERLINE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "UNDERLINE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag UNDERLINE
void TMPro::RichTextTag::_set_UNDERLINE(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_UNDERLINE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "UNDERLINE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag SLASH_UNDERLINE
TMPro::RichTextTag TMPro::RichTextTag::_get_SLASH_UNDERLINE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_SLASH_UNDERLINE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "SLASH_UNDERLINE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag SLASH_UNDERLINE
void TMPro::RichTextTag::_set_SLASH_UNDERLINE(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_SLASH_UNDERLINE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "SLASH_UNDERLINE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag STRIKETHROUGH
TMPro::RichTextTag TMPro::RichTextTag::_get_STRIKETHROUGH() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_STRIKETHROUGH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "STRIKETHROUGH"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag STRIKETHROUGH
void TMPro::RichTextTag::_set_STRIKETHROUGH(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_STRIKETHROUGH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "STRIKETHROUGH", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag SLASH_STRIKETHROUGH
TMPro::RichTextTag TMPro::RichTextTag::_get_SLASH_STRIKETHROUGH() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_SLASH_STRIKETHROUGH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "SLASH_STRIKETHROUGH"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag SLASH_STRIKETHROUGH
void TMPro::RichTextTag::_set_SLASH_STRIKETHROUGH(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_SLASH_STRIKETHROUGH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "SLASH_STRIKETHROUGH", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag COLOR
TMPro::RichTextTag TMPro::RichTextTag::_get_COLOR() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_COLOR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "COLOR"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag COLOR
void TMPro::RichTextTag::_set_COLOR(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_COLOR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "COLOR", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag SLASH_COLOR
TMPro::RichTextTag TMPro::RichTextTag::_get_SLASH_COLOR() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_SLASH_COLOR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "SLASH_COLOR"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag SLASH_COLOR
void TMPro::RichTextTag::_set_SLASH_COLOR(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_SLASH_COLOR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "SLASH_COLOR", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag SIZE
TMPro::RichTextTag TMPro::RichTextTag::_get_SIZE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_SIZE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "SIZE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag SIZE
void TMPro::RichTextTag::_set_SIZE(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_SIZE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "SIZE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag SLASH_SIZE
TMPro::RichTextTag TMPro::RichTextTag::_get_SLASH_SIZE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_SLASH_SIZE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "SLASH_SIZE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag SLASH_SIZE
void TMPro::RichTextTag::_set_SLASH_SIZE(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_SLASH_SIZE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "SLASH_SIZE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag SPRITE
TMPro::RichTextTag TMPro::RichTextTag::_get_SPRITE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_SPRITE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "SPRITE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag SPRITE
void TMPro::RichTextTag::_set_SPRITE(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_SPRITE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "SPRITE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag BR
TMPro::RichTextTag TMPro::RichTextTag::_get_BR() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_BR");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "BR"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag BR
void TMPro::RichTextTag::_set_BR(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_BR");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "BR", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag STYLE
TMPro::RichTextTag TMPro::RichTextTag::_get_STYLE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_STYLE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "STYLE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag STYLE
void TMPro::RichTextTag::_set_STYLE(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_STYLE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "STYLE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag SLASH_STYLE
TMPro::RichTextTag TMPro::RichTextTag::_get_SLASH_STYLE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_SLASH_STYLE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "SLASH_STYLE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag SLASH_STYLE
void TMPro::RichTextTag::_set_SLASH_STYLE(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_SLASH_STYLE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "SLASH_STYLE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag FONT
TMPro::RichTextTag TMPro::RichTextTag::_get_FONT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_FONT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "FONT"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag FONT
void TMPro::RichTextTag::_set_FONT(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_FONT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "FONT", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag SLASH_FONT
TMPro::RichTextTag TMPro::RichTextTag::_get_SLASH_FONT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_SLASH_FONT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "SLASH_FONT"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag SLASH_FONT
void TMPro::RichTextTag::_set_SLASH_FONT(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_SLASH_FONT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "SLASH_FONT", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag LINK
TMPro::RichTextTag TMPro::RichTextTag::_get_LINK() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_LINK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "LINK"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag LINK
void TMPro::RichTextTag::_set_LINK(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_LINK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "LINK", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag SLASH_LINK
TMPro::RichTextTag TMPro::RichTextTag::_get_SLASH_LINK() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_SLASH_LINK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "SLASH_LINK"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag SLASH_LINK
void TMPro::RichTextTag::_set_SLASH_LINK(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_SLASH_LINK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "SLASH_LINK", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag FONT_WEIGHT
TMPro::RichTextTag TMPro::RichTextTag::_get_FONT_WEIGHT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_FONT_WEIGHT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "FONT_WEIGHT"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag FONT_WEIGHT
void TMPro::RichTextTag::_set_FONT_WEIGHT(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_FONT_WEIGHT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "FONT_WEIGHT", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag SLASH_FONT_WEIGHT
TMPro::RichTextTag TMPro::RichTextTag::_get_SLASH_FONT_WEIGHT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_SLASH_FONT_WEIGHT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "SLASH_FONT_WEIGHT"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag SLASH_FONT_WEIGHT
void TMPro::RichTextTag::_set_SLASH_FONT_WEIGHT(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_SLASH_FONT_WEIGHT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "SLASH_FONT_WEIGHT", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag LIGA
TMPro::RichTextTag TMPro::RichTextTag::_get_LIGA() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_LIGA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "LIGA"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag LIGA
void TMPro::RichTextTag::_set_LIGA(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_LIGA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "LIGA", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag SLASH_LIGA
TMPro::RichTextTag TMPro::RichTextTag::_get_SLASH_LIGA() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_SLASH_LIGA");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "SLASH_LIGA"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag SLASH_LIGA
void TMPro::RichTextTag::_set_SLASH_LIGA(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_SLASH_LIGA");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "SLASH_LIGA", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag FRAC
TMPro::RichTextTag TMPro::RichTextTag::_get_FRAC() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_FRAC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "FRAC"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag FRAC
void TMPro::RichTextTag::_set_FRAC(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_FRAC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "FRAC", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag SLASH_FRAC
TMPro::RichTextTag TMPro::RichTextTag::_get_SLASH_FRAC() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_SLASH_FRAC");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "SLASH_FRAC"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag SLASH_FRAC
void TMPro::RichTextTag::_set_SLASH_FRAC(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_SLASH_FRAC");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "SLASH_FRAC", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag NAME
TMPro::RichTextTag TMPro::RichTextTag::_get_NAME() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_NAME");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "NAME"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag NAME
void TMPro::RichTextTag::_set_NAME(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_NAME");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "NAME", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag INDEX
TMPro::RichTextTag TMPro::RichTextTag::_get_INDEX() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_INDEX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "INDEX"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag INDEX
void TMPro::RichTextTag::_set_INDEX(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_INDEX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "INDEX", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag TINT
TMPro::RichTextTag TMPro::RichTextTag::_get_TINT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_TINT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "TINT"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag TINT
void TMPro::RichTextTag::_set_TINT(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_TINT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "TINT", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag ANIM
TMPro::RichTextTag TMPro::RichTextTag::_get_ANIM() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_ANIM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "ANIM"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag ANIM
void TMPro::RichTextTag::_set_ANIM(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_ANIM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "ANIM", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag MATERIAL
TMPro::RichTextTag TMPro::RichTextTag::_get_MATERIAL() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_MATERIAL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "MATERIAL"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag MATERIAL
void TMPro::RichTextTag::_set_MATERIAL(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_MATERIAL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "MATERIAL", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag RED
TMPro::RichTextTag TMPro::RichTextTag::_get_RED() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_RED");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "RED"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag RED
void TMPro::RichTextTag::_set_RED(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_RED");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "RED", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag GREEN
TMPro::RichTextTag TMPro::RichTextTag::_get_GREEN() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_GREEN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "GREEN"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag GREEN
void TMPro::RichTextTag::_set_GREEN(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_GREEN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "GREEN", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag BLUE
TMPro::RichTextTag TMPro::RichTextTag::_get_BLUE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_BLUE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "BLUE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag BLUE
void TMPro::RichTextTag::_set_BLUE(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_BLUE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "BLUE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag YELLOW
TMPro::RichTextTag TMPro::RichTextTag::_get_YELLOW() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_YELLOW");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "YELLOW"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag YELLOW
void TMPro::RichTextTag::_set_YELLOW(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_YELLOW");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "YELLOW", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag ORANGE
TMPro::RichTextTag TMPro::RichTextTag::_get_ORANGE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_ORANGE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "ORANGE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag ORANGE
void TMPro::RichTextTag::_set_ORANGE(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_ORANGE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "ORANGE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag PLUS
TMPro::RichTextTag TMPro::RichTextTag::_get_PLUS() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_PLUS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "PLUS"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag PLUS
void TMPro::RichTextTag::_set_PLUS(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_PLUS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "PLUS", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag MINUS
TMPro::RichTextTag TMPro::RichTextTag::_get_MINUS() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_MINUS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "MINUS"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag MINUS
void TMPro::RichTextTag::_set_MINUS(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_MINUS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "MINUS", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag PX
TMPro::RichTextTag TMPro::RichTextTag::_get_PX() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_PX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "PX"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag PX
void TMPro::RichTextTag::_set_PX(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_PX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "PX", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag PLUS_PX
TMPro::RichTextTag TMPro::RichTextTag::_get_PLUS_PX() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_PLUS_PX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "PLUS_PX"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag PLUS_PX
void TMPro::RichTextTag::_set_PLUS_PX(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_PLUS_PX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "PLUS_PX", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag MINUS_PX
TMPro::RichTextTag TMPro::RichTextTag::_get_MINUS_PX() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_MINUS_PX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "MINUS_PX"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag MINUS_PX
void TMPro::RichTextTag::_set_MINUS_PX(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_MINUS_PX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "MINUS_PX", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag EM
TMPro::RichTextTag TMPro::RichTextTag::_get_EM() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_EM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "EM"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag EM
void TMPro::RichTextTag::_set_EM(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_EM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "EM", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag PLUS_EM
TMPro::RichTextTag TMPro::RichTextTag::_get_PLUS_EM() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_PLUS_EM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "PLUS_EM"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag PLUS_EM
void TMPro::RichTextTag::_set_PLUS_EM(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_PLUS_EM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "PLUS_EM", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag MINUS_EM
TMPro::RichTextTag TMPro::RichTextTag::_get_MINUS_EM() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_MINUS_EM");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "MINUS_EM"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag MINUS_EM
void TMPro::RichTextTag::_set_MINUS_EM(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_MINUS_EM");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "MINUS_EM", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag PCT
TMPro::RichTextTag TMPro::RichTextTag::_get_PCT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_PCT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "PCT"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag PCT
void TMPro::RichTextTag::_set_PCT(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_PCT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "PCT", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag PLUS_PCT
TMPro::RichTextTag TMPro::RichTextTag::_get_PLUS_PCT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_PLUS_PCT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "PLUS_PCT"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag PLUS_PCT
void TMPro::RichTextTag::_set_PLUS_PCT(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_PLUS_PCT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "PLUS_PCT", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag MINUS_PCT
TMPro::RichTextTag TMPro::RichTextTag::_get_MINUS_PCT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_MINUS_PCT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "MINUS_PCT"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag MINUS_PCT
void TMPro::RichTextTag::_set_MINUS_PCT(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_MINUS_PCT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "MINUS_PCT", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag PERCENTAGE
TMPro::RichTextTag TMPro::RichTextTag::_get_PERCENTAGE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_PERCENTAGE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "PERCENTAGE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag PERCENTAGE
void TMPro::RichTextTag::_set_PERCENTAGE(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_PERCENTAGE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "PERCENTAGE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag PLUS_PERCENTAGE
TMPro::RichTextTag TMPro::RichTextTag::_get_PLUS_PERCENTAGE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_PLUS_PERCENTAGE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "PLUS_PERCENTAGE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag PLUS_PERCENTAGE
void TMPro::RichTextTag::_set_PLUS_PERCENTAGE(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_PLUS_PERCENTAGE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "PLUS_PERCENTAGE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag MINUS_PERCENTAGE
TMPro::RichTextTag TMPro::RichTextTag::_get_MINUS_PERCENTAGE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_MINUS_PERCENTAGE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "MINUS_PERCENTAGE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag MINUS_PERCENTAGE
void TMPro::RichTextTag::_set_MINUS_PERCENTAGE(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_MINUS_PERCENTAGE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "MINUS_PERCENTAGE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag TRUE
TMPro::RichTextTag TMPro::RichTextTag::_get_TRUE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_TRUE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "TRUE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag TRUE
void TMPro::RichTextTag::_set_TRUE(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_TRUE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "TRUE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag FALSE
TMPro::RichTextTag TMPro::RichTextTag::_get_FALSE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_FALSE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "FALSE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag FALSE
void TMPro::RichTextTag::_set_FALSE(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_FALSE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "FALSE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.RichTextTag DEFAULT
TMPro::RichTextTag TMPro::RichTextTag::_get_DEFAULT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_get_DEFAULT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::RichTextTag>("TMPro", "RichTextTag", "DEFAULT"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.RichTextTag DEFAULT
void TMPro::RichTextTag::_set_DEFAULT(TMPro::RichTextTag value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::RichTextTag::_set_DEFAULT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "RichTextTag", "DEFAULT", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TagValueType
#include "TMPro/TagValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TagValueType None
TMPro::TagValueType TMPro::TagValueType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TagValueType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TagValueType>("TMPro", "TagValueType", "None"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TagValueType None
void TMPro::TagValueType::_set_None(TMPro::TagValueType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TagValueType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TagValueType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TagValueType NumericalValue
TMPro::TagValueType TMPro::TagValueType::_get_NumericalValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TagValueType::_get_NumericalValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TagValueType>("TMPro", "TagValueType", "NumericalValue"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TagValueType NumericalValue
void TMPro::TagValueType::_set_NumericalValue(TMPro::TagValueType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TagValueType::_set_NumericalValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TagValueType", "NumericalValue", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TagValueType StringValue
TMPro::TagValueType TMPro::TagValueType::_get_StringValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TagValueType::_get_StringValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TagValueType>("TMPro", "TagValueType", "StringValue"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TagValueType StringValue
void TMPro::TagValueType::_set_StringValue(TMPro::TagValueType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TagValueType::_set_StringValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TagValueType", "StringValue", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TagValueType ColorValue
TMPro::TagValueType TMPro::TagValueType::_get_ColorValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TagValueType::_get_ColorValue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TagValueType>("TMPro", "TagValueType", "ColorValue"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TagValueType ColorValue
void TMPro::TagValueType::_set_ColorValue(TMPro::TagValueType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TagValueType::_set_ColorValue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TagValueType", "ColorValue", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TagUnitType
#include "TMPro/TagUnitType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TagUnitType Pixels
TMPro::TagUnitType TMPro::TagUnitType::_get_Pixels() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TagUnitType::_get_Pixels");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TagUnitType>("TMPro", "TagUnitType", "Pixels"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TagUnitType Pixels
void TMPro::TagUnitType::_set_Pixels(TMPro::TagUnitType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TagUnitType::_set_Pixels");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TagUnitType", "Pixels", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TagUnitType FontUnits
TMPro::TagUnitType TMPro::TagUnitType::_get_FontUnits() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TagUnitType::_get_FontUnits");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TagUnitType>("TMPro", "TagUnitType", "FontUnits"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TagUnitType FontUnits
void TMPro::TagUnitType::_set_FontUnits(TMPro::TagUnitType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TagUnitType::_set_FontUnits");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TagUnitType", "FontUnits", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TagUnitType Percentage
TMPro::TagUnitType TMPro::TagUnitType::_get_Percentage() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TagUnitType::_get_Percentage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TagUnitType>("TMPro", "TagUnitType", "Percentage"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TagUnitType Percentage
void TMPro::TagUnitType::_set_Percentage(TMPro::TagUnitType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TagUnitType::_set_Percentage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TagUnitType", "Percentage", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.UnicodeCharacter
#include "TMPro/UnicodeCharacter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.UnicodeCharacter HYPHEN_MINUS
TMPro::UnicodeCharacter TMPro::UnicodeCharacter::_get_HYPHEN_MINUS() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_get_HYPHEN_MINUS");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::UnicodeCharacter>("TMPro", "UnicodeCharacter", "HYPHEN_MINUS"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.UnicodeCharacter HYPHEN_MINUS
void TMPro::UnicodeCharacter::_set_HYPHEN_MINUS(TMPro::UnicodeCharacter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_set_HYPHEN_MINUS");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "UnicodeCharacter", "HYPHEN_MINUS", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.UnicodeCharacter SOFT_HYPHEN
TMPro::UnicodeCharacter TMPro::UnicodeCharacter::_get_SOFT_HYPHEN() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_get_SOFT_HYPHEN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::UnicodeCharacter>("TMPro", "UnicodeCharacter", "SOFT_HYPHEN"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.UnicodeCharacter SOFT_HYPHEN
void TMPro::UnicodeCharacter::_set_SOFT_HYPHEN(TMPro::UnicodeCharacter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_set_SOFT_HYPHEN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "UnicodeCharacter", "SOFT_HYPHEN", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.UnicodeCharacter HYPHEN
TMPro::UnicodeCharacter TMPro::UnicodeCharacter::_get_HYPHEN() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_get_HYPHEN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::UnicodeCharacter>("TMPro", "UnicodeCharacter", "HYPHEN"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.UnicodeCharacter HYPHEN
void TMPro::UnicodeCharacter::_set_HYPHEN(TMPro::UnicodeCharacter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_set_HYPHEN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "UnicodeCharacter", "HYPHEN", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.UnicodeCharacter NON_BREAKING_HYPHEN
TMPro::UnicodeCharacter TMPro::UnicodeCharacter::_get_NON_BREAKING_HYPHEN() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_get_NON_BREAKING_HYPHEN");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::UnicodeCharacter>("TMPro", "UnicodeCharacter", "NON_BREAKING_HYPHEN"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.UnicodeCharacter NON_BREAKING_HYPHEN
void TMPro::UnicodeCharacter::_set_NON_BREAKING_HYPHEN(TMPro::UnicodeCharacter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_set_NON_BREAKING_HYPHEN");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "UnicodeCharacter", "NON_BREAKING_HYPHEN", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.UnicodeCharacter ZERO_WIDTH_SPACE
TMPro::UnicodeCharacter TMPro::UnicodeCharacter::_get_ZERO_WIDTH_SPACE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_get_ZERO_WIDTH_SPACE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::UnicodeCharacter>("TMPro", "UnicodeCharacter", "ZERO_WIDTH_SPACE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.UnicodeCharacter ZERO_WIDTH_SPACE
void TMPro::UnicodeCharacter::_set_ZERO_WIDTH_SPACE(TMPro::UnicodeCharacter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_set_ZERO_WIDTH_SPACE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "UnicodeCharacter", "ZERO_WIDTH_SPACE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.UnicodeCharacter RIGHT_SINGLE_QUOTATION
TMPro::UnicodeCharacter TMPro::UnicodeCharacter::_get_RIGHT_SINGLE_QUOTATION() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_get_RIGHT_SINGLE_QUOTATION");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::UnicodeCharacter>("TMPro", "UnicodeCharacter", "RIGHT_SINGLE_QUOTATION"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.UnicodeCharacter RIGHT_SINGLE_QUOTATION
void TMPro::UnicodeCharacter::_set_RIGHT_SINGLE_QUOTATION(TMPro::UnicodeCharacter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_set_RIGHT_SINGLE_QUOTATION");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "UnicodeCharacter", "RIGHT_SINGLE_QUOTATION", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.UnicodeCharacter APOSTROPHE
TMPro::UnicodeCharacter TMPro::UnicodeCharacter::_get_APOSTROPHE() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_get_APOSTROPHE");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::UnicodeCharacter>("TMPro", "UnicodeCharacter", "APOSTROPHE"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.UnicodeCharacter APOSTROPHE
void TMPro::UnicodeCharacter::_set_APOSTROPHE(TMPro::UnicodeCharacter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_set_APOSTROPHE");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "UnicodeCharacter", "APOSTROPHE", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.UnicodeCharacter WORD_JOINER
TMPro::UnicodeCharacter TMPro::UnicodeCharacter::_get_WORD_JOINER() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_get_WORD_JOINER");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::UnicodeCharacter>("TMPro", "UnicodeCharacter", "WORD_JOINER"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.UnicodeCharacter WORD_JOINER
void TMPro::UnicodeCharacter::_set_WORD_JOINER(TMPro::UnicodeCharacter value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::UnicodeCharacter::_set_WORD_JOINER");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "UnicodeCharacter", "WORD_JOINER", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_ScrollbarEventHandler
#include "TMPro/TMP_ScrollbarEventHandler.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.EventSystems.BaseEventData
#include "UnityEngine/EventSystems/BaseEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_ScrollbarEventHandler.OnPointerClick
void TMPro::TMP_ScrollbarEventHandler::OnPointerClick(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_ScrollbarEventHandler::OnPointerClick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerClick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: TMPro.TMP_ScrollbarEventHandler.OnSelect
void TMPro::TMP_ScrollbarEventHandler::OnSelect(UnityEngine::EventSystems::BaseEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_ScrollbarEventHandler::OnSelect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSelect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: TMPro.TMP_ScrollbarEventHandler.OnDeselect
void TMPro::TMP_ScrollbarEventHandler::OnDeselect(UnityEngine::EventSystems::BaseEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_ScrollbarEventHandler::OnDeselect");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDeselect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Writing MetadataGetter for method: TMP_ScrollbarEventHandler::OnPointerClick
// Il2CppName: OnPointerClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_ScrollbarEventHandler::*)(UnityEngine::EventSystems::PointerEventData*)>(&TMP_ScrollbarEventHandler::OnPointerClick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_ScrollbarEventHandler*), "OnPointerClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: TMP_ScrollbarEventHandler::OnSelect
// Il2CppName: OnSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_ScrollbarEventHandler::*)(UnityEngine::EventSystems::BaseEventData*)>(&TMP_ScrollbarEventHandler::OnSelect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_ScrollbarEventHandler*), "OnSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::BaseEventData*>()});
  }
};
// Writing MetadataGetter for method: TMP_ScrollbarEventHandler::OnDeselect
// Il2CppName: OnDeselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_ScrollbarEventHandler::*)(UnityEngine::EventSystems::BaseEventData*)>(&TMP_ScrollbarEventHandler::OnDeselect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_ScrollbarEventHandler*), "OnDeselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::BaseEventData*>()});
  }
};
// Writing MetadataGetter for method: TMP_ScrollbarEventHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_ScrollbarEventHandler::*)()>(&TMP_ScrollbarEventHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_ScrollbarEventHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_ScrollbarEventHandler::*)()>(&TMP_ScrollbarEventHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_ScrollbarEventHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_SelectionCaret
#include "TMPro/TMP_SelectionCaret.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_SelectionCaret.Cull
void TMPro::TMP_SelectionCaret::Cull(UnityEngine::Rect clipRect, bool validRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SelectionCaret::Cull");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clipRect), ::il2cpp_utils::ExtractType(validRect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clipRect, validRect);
}
// Writing MetadataGetter for method: TMP_SelectionCaret::Cull
// Il2CppName: Cull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SelectionCaret::*)(UnityEngine::Rect, bool)>(&TMP_SelectionCaret::Cull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SelectionCaret*), "Cull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_SelectionCaret::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SelectionCaret::*)()>(&TMP_SelectionCaret::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SelectionCaret*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SelectionCaret::*)()>(&TMP_SelectionCaret::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SelectionCaret*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_Settings
#include "TMPro/TMP_Settings.hpp"
// Including type: TMPro.TMP_Settings/LineBreakingTable
#include "TMPro/TMP_Settings_LineBreakingTable.hpp"
// Including type: TMPro.TMP_FontAsset
#include "TMPro/TMP_FontAsset.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: TMPro.TMP_SpriteAsset
#include "TMPro/TMP_SpriteAsset.hpp"
// Including type: TMPro.TMP_StyleSheet
#include "TMPro/TMP_StyleSheet.hpp"
// Including type: UnityEngine.TextAsset
#include "UnityEngine/TextAsset.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private TMPro.TMP_Settings s_Instance
TMPro::TMP_Settings* TMPro::TMP_Settings::_get_s_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::_get_s_Instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_Settings*>("TMPro", "TMP_Settings", "s_Instance"));
}
// Autogenerated static field setter
// Set static field: static private TMPro.TMP_Settings s_Instance
void TMPro::TMP_Settings::_set_s_Instance(TMPro::TMP_Settings* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::_set_s_Instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Settings", "s_Instance", value));
}
// Autogenerated method: TMPro.TMP_Settings.get_version
::Il2CppString* TMPro::TMP_Settings::get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_version");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_enableWordWrapping
bool TMPro::TMP_Settings::get_enableWordWrapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_enableWordWrapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_enableWordWrapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_enableKerning
bool TMPro::TMP_Settings::get_enableKerning() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_enableKerning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_enableKerning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_enableExtraPadding
bool TMPro::TMP_Settings::get_enableExtraPadding() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_enableExtraPadding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_enableExtraPadding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_enableTintAllSprites
bool TMPro::TMP_Settings::get_enableTintAllSprites() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_enableTintAllSprites");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_enableTintAllSprites", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_enableParseEscapeCharacters
bool TMPro::TMP_Settings::get_enableParseEscapeCharacters() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_enableParseEscapeCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_enableParseEscapeCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_enableRaycastTarget
bool TMPro::TMP_Settings::get_enableRaycastTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_enableRaycastTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_enableRaycastTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_getFontFeaturesAtRuntime
bool TMPro::TMP_Settings::get_getFontFeaturesAtRuntime() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_getFontFeaturesAtRuntime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_getFontFeaturesAtRuntime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_missingGlyphCharacter
int TMPro::TMP_Settings::get_missingGlyphCharacter() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_missingGlyphCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_missingGlyphCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.set_missingGlyphCharacter
void TMPro::TMP_Settings::set_missingGlyphCharacter(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::set_missingGlyphCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "set_missingGlyphCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Settings.get_warningsDisabled
bool TMPro::TMP_Settings::get_warningsDisabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_warningsDisabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_warningsDisabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_defaultFontAsset
TMPro::TMP_FontAsset* TMPro::TMP_Settings::get_defaultFontAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_defaultFontAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_defaultFontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_FontAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_defaultFontAssetPath
::Il2CppString* TMPro::TMP_Settings::get_defaultFontAssetPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_defaultFontAssetPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_defaultFontAssetPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_defaultFontSize
float TMPro::TMP_Settings::get_defaultFontSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_defaultFontSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_defaultFontSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_defaultTextAutoSizingMinRatio
float TMPro::TMP_Settings::get_defaultTextAutoSizingMinRatio() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_defaultTextAutoSizingMinRatio");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_defaultTextAutoSizingMinRatio", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_defaultTextAutoSizingMaxRatio
float TMPro::TMP_Settings::get_defaultTextAutoSizingMaxRatio() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_defaultTextAutoSizingMaxRatio");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_defaultTextAutoSizingMaxRatio", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_defaultTextMeshProTextContainerSize
UnityEngine::Vector2 TMPro::TMP_Settings::get_defaultTextMeshProTextContainerSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_defaultTextMeshProTextContainerSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_defaultTextMeshProTextContainerSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_defaultTextMeshProUITextContainerSize
UnityEngine::Vector2 TMPro::TMP_Settings::get_defaultTextMeshProUITextContainerSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_defaultTextMeshProUITextContainerSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_defaultTextMeshProUITextContainerSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_autoSizeTextContainer
bool TMPro::TMP_Settings::get_autoSizeTextContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_autoSizeTextContainer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_autoSizeTextContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_fallbackFontAssets
System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* TMPro::TMP_Settings::get_fallbackFontAssets() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_fallbackFontAssets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_fallbackFontAssets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_matchMaterialPreset
bool TMPro::TMP_Settings::get_matchMaterialPreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_matchMaterialPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_matchMaterialPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_defaultSpriteAsset
TMPro::TMP_SpriteAsset* TMPro::TMP_Settings::get_defaultSpriteAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_defaultSpriteAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_defaultSpriteAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_SpriteAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_defaultSpriteAssetPath
::Il2CppString* TMPro::TMP_Settings::get_defaultSpriteAssetPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_defaultSpriteAssetPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_defaultSpriteAssetPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_defaultColorGradientPresetsPath
::Il2CppString* TMPro::TMP_Settings::get_defaultColorGradientPresetsPath() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_defaultColorGradientPresetsPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_defaultColorGradientPresetsPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_enableEmojiSupport
bool TMPro::TMP_Settings::get_enableEmojiSupport() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_enableEmojiSupport");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_enableEmojiSupport", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.set_enableEmojiSupport
void TMPro::TMP_Settings::set_enableEmojiSupport(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::set_enableEmojiSupport");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "set_enableEmojiSupport", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Settings.get_defaultStyleSheet
TMPro::TMP_StyleSheet* TMPro::TMP_Settings::get_defaultStyleSheet() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_defaultStyleSheet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_defaultStyleSheet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_StyleSheet*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_leadingCharacters
UnityEngine::TextAsset* TMPro::TMP_Settings::get_leadingCharacters() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_leadingCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_leadingCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::TextAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_followingCharacters
UnityEngine::TextAsset* TMPro::TMP_Settings::get_followingCharacters() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_followingCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_followingCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::TextAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_linebreakingRules
TMPro::TMP_Settings::LineBreakingTable* TMPro::TMP_Settings::get_linebreakingRules() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_linebreakingRules");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_linebreakingRules", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_Settings::LineBreakingTable*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.get_instance
TMPro::TMP_Settings* TMPro::TMP_Settings::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_Settings*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.LoadDefaultSettings
TMPro::TMP_Settings* TMPro::TMP_Settings::LoadDefaultSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::LoadDefaultSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "LoadDefaultSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_Settings*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.GetSettings
TMPro::TMP_Settings* TMPro::TMP_Settings::GetSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::GetSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "GetSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_Settings*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.GetFontAsset
TMPro::TMP_FontAsset* TMPro::TMP_Settings::GetFontAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::GetFontAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "GetFontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_FontAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.GetSpriteAsset
TMPro::TMP_SpriteAsset* TMPro::TMP_Settings::GetSpriteAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::GetSpriteAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "GetSpriteAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_SpriteAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.GetStyleSheet
TMPro::TMP_StyleSheet* TMPro::TMP_Settings::GetStyleSheet() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::GetStyleSheet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "GetStyleSheet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_StyleSheet*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.LoadLinebreakingRules
void TMPro::TMP_Settings::LoadLinebreakingRules() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::LoadLinebreakingRules");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "LoadLinebreakingRules", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_Settings.GetCharacters
System::Collections::Generic::Dictionary_2<int, ::Il2CppChar>* TMPro::TMP_Settings::GetCharacters(UnityEngine::TextAsset* file) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Settings::GetCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Settings", "GetCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(file)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::Dictionary_2<int, ::Il2CppChar>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, file);
}
// Writing MetadataGetter for method: TMP_Settings::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&TMP_Settings::get_version)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_enableWordWrapping
// Il2CppName: get_enableWordWrapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_enableWordWrapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_enableWordWrapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_enableKerning
// Il2CppName: get_enableKerning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_enableKerning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_enableKerning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_enableExtraPadding
// Il2CppName: get_enableExtraPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_enableExtraPadding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_enableExtraPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_enableTintAllSprites
// Il2CppName: get_enableTintAllSprites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_enableTintAllSprites)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_enableTintAllSprites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_enableParseEscapeCharacters
// Il2CppName: get_enableParseEscapeCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_enableParseEscapeCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_enableParseEscapeCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_enableRaycastTarget
// Il2CppName: get_enableRaycastTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_enableRaycastTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_enableRaycastTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_getFontFeaturesAtRuntime
// Il2CppName: get_getFontFeaturesAtRuntime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_getFontFeaturesAtRuntime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_getFontFeaturesAtRuntime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_missingGlyphCharacter
// Il2CppName: get_missingGlyphCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&TMP_Settings::get_missingGlyphCharacter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_missingGlyphCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::set_missingGlyphCharacter
// Il2CppName: set_missingGlyphCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&TMP_Settings::set_missingGlyphCharacter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "set_missingGlyphCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_warningsDisabled
// Il2CppName: get_warningsDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_warningsDisabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_warningsDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_defaultFontAsset
// Il2CppName: get_defaultFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (*)()>(&TMP_Settings::get_defaultFontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_defaultFontAssetPath
// Il2CppName: get_defaultFontAssetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&TMP_Settings::get_defaultFontAssetPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultFontAssetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_defaultFontSize
// Il2CppName: get_defaultFontSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&TMP_Settings::get_defaultFontSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultFontSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_defaultTextAutoSizingMinRatio
// Il2CppName: get_defaultTextAutoSizingMinRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&TMP_Settings::get_defaultTextAutoSizingMinRatio)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultTextAutoSizingMinRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_defaultTextAutoSizingMaxRatio
// Il2CppName: get_defaultTextAutoSizingMaxRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&TMP_Settings::get_defaultTextAutoSizingMaxRatio)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultTextAutoSizingMaxRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_defaultTextMeshProTextContainerSize
// Il2CppName: get_defaultTextMeshProTextContainerSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)()>(&TMP_Settings::get_defaultTextMeshProTextContainerSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultTextMeshProTextContainerSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_defaultTextMeshProUITextContainerSize
// Il2CppName: get_defaultTextMeshProUITextContainerSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)()>(&TMP_Settings::get_defaultTextMeshProUITextContainerSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultTextMeshProUITextContainerSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_autoSizeTextContainer
// Il2CppName: get_autoSizeTextContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_autoSizeTextContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_autoSizeTextContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_fallbackFontAssets
// Il2CppName: get_fallbackFontAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<TMPro::TMP_FontAsset*>* (*)()>(&TMP_Settings::get_fallbackFontAssets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_fallbackFontAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_matchMaterialPreset
// Il2CppName: get_matchMaterialPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_matchMaterialPreset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_matchMaterialPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_defaultSpriteAsset
// Il2CppName: get_defaultSpriteAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SpriteAsset* (*)()>(&TMP_Settings::get_defaultSpriteAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultSpriteAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_defaultSpriteAssetPath
// Il2CppName: get_defaultSpriteAssetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&TMP_Settings::get_defaultSpriteAssetPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultSpriteAssetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_defaultColorGradientPresetsPath
// Il2CppName: get_defaultColorGradientPresetsPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&TMP_Settings::get_defaultColorGradientPresetsPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultColorGradientPresetsPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_enableEmojiSupport
// Il2CppName: get_enableEmojiSupport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&TMP_Settings::get_enableEmojiSupport)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_enableEmojiSupport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::set_enableEmojiSupport
// Il2CppName: set_enableEmojiSupport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&TMP_Settings::set_enableEmojiSupport)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "set_enableEmojiSupport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_defaultStyleSheet
// Il2CppName: get_defaultStyleSheet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_StyleSheet* (*)()>(&TMP_Settings::get_defaultStyleSheet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_defaultStyleSheet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_leadingCharacters
// Il2CppName: get_leadingCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::TextAsset* (*)()>(&TMP_Settings::get_leadingCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_leadingCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_followingCharacters
// Il2CppName: get_followingCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::TextAsset* (*)()>(&TMP_Settings::get_followingCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_followingCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_linebreakingRules
// Il2CppName: get_linebreakingRules
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Settings::LineBreakingTable* (*)()>(&TMP_Settings::get_linebreakingRules)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_linebreakingRules", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Settings* (*)()>(&TMP_Settings::get_instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::LoadDefaultSettings
// Il2CppName: LoadDefaultSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Settings* (*)()>(&TMP_Settings::LoadDefaultSettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "LoadDefaultSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::GetSettings
// Il2CppName: GetSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Settings* (*)()>(&TMP_Settings::GetSettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "GetSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::GetFontAsset
// Il2CppName: GetFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (*)()>(&TMP_Settings::GetFontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "GetFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::GetSpriteAsset
// Il2CppName: GetSpriteAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SpriteAsset* (*)()>(&TMP_Settings::GetSpriteAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "GetSpriteAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::GetStyleSheet
// Il2CppName: GetStyleSheet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_StyleSheet* (*)()>(&TMP_Settings::GetStyleSheet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "GetStyleSheet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::LoadLinebreakingRules
// Il2CppName: LoadLinebreakingRules
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_Settings::LoadLinebreakingRules)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "LoadLinebreakingRules", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Settings::GetCharacters
// Il2CppName: GetCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::Dictionary_2<int, ::Il2CppChar>* (*)(UnityEngine::TextAsset*)>(&TMP_Settings::GetCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), "GetCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextAsset*>()});
  }
};
// Writing MetadataGetter for method: TMP_Settings::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Settings::*)()>(&TMP_Settings::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Settings::*)()>(&TMP_Settings::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_Settings/LineBreakingTable
#include "TMPro/TMP_Settings_LineBreakingTable.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TMP_Settings::LineBreakingTable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Settings::LineBreakingTable::*)()>(&TMP_Settings::LineBreakingTable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings::LineBreakingTable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Settings::LineBreakingTable::*)()>(&TMP_Settings::LineBreakingTable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Settings::LineBreakingTable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.ShaderUtilities
#include "TMPro/ShaderUtilities.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_MainTex
int TMPro::ShaderUtilities::_get_ID_MainTex() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_MainTex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_MainTex"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_MainTex
void TMPro::ShaderUtilities::_set_ID_MainTex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_MainTex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_MainTex", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_FaceTex
int TMPro::ShaderUtilities::_get_ID_FaceTex() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_FaceTex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_FaceTex"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_FaceTex
void TMPro::ShaderUtilities::_set_ID_FaceTex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_FaceTex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_FaceTex", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_FaceColor
int TMPro::ShaderUtilities::_get_ID_FaceColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_FaceColor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_FaceColor"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_FaceColor
void TMPro::ShaderUtilities::_set_ID_FaceColor(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_FaceColor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_FaceColor", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_FaceDilate
int TMPro::ShaderUtilities::_get_ID_FaceDilate() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_FaceDilate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_FaceDilate"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_FaceDilate
void TMPro::ShaderUtilities::_set_ID_FaceDilate(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_FaceDilate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_FaceDilate", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_Shininess
int TMPro::ShaderUtilities::_get_ID_Shininess() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_Shininess");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_Shininess"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_Shininess
void TMPro::ShaderUtilities::_set_ID_Shininess(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_Shininess");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_Shininess", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_UnderlayColor
int TMPro::ShaderUtilities::_get_ID_UnderlayColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_UnderlayColor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_UnderlayColor"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_UnderlayColor
void TMPro::ShaderUtilities::_set_ID_UnderlayColor(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_UnderlayColor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_UnderlayColor", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_UnderlayOffsetX
int TMPro::ShaderUtilities::_get_ID_UnderlayOffsetX() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_UnderlayOffsetX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_UnderlayOffsetX"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_UnderlayOffsetX
void TMPro::ShaderUtilities::_set_ID_UnderlayOffsetX(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_UnderlayOffsetX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_UnderlayOffsetX", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_UnderlayOffsetY
int TMPro::ShaderUtilities::_get_ID_UnderlayOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_UnderlayOffsetY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_UnderlayOffsetY"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_UnderlayOffsetY
void TMPro::ShaderUtilities::_set_ID_UnderlayOffsetY(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_UnderlayOffsetY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_UnderlayOffsetY", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_UnderlayDilate
int TMPro::ShaderUtilities::_get_ID_UnderlayDilate() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_UnderlayDilate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_UnderlayDilate"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_UnderlayDilate
void TMPro::ShaderUtilities::_set_ID_UnderlayDilate(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_UnderlayDilate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_UnderlayDilate", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_UnderlaySoftness
int TMPro::ShaderUtilities::_get_ID_UnderlaySoftness() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_UnderlaySoftness");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_UnderlaySoftness"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_UnderlaySoftness
void TMPro::ShaderUtilities::_set_ID_UnderlaySoftness(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_UnderlaySoftness");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_UnderlaySoftness", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_WeightNormal
int TMPro::ShaderUtilities::_get_ID_WeightNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_WeightNormal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_WeightNormal"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_WeightNormal
void TMPro::ShaderUtilities::_set_ID_WeightNormal(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_WeightNormal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_WeightNormal", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_WeightBold
int TMPro::ShaderUtilities::_get_ID_WeightBold() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_WeightBold");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_WeightBold"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_WeightBold
void TMPro::ShaderUtilities::_set_ID_WeightBold(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_WeightBold");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_WeightBold", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_OutlineTex
int TMPro::ShaderUtilities::_get_ID_OutlineTex() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_OutlineTex");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_OutlineTex"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_OutlineTex
void TMPro::ShaderUtilities::_set_ID_OutlineTex(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_OutlineTex");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_OutlineTex", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_OutlineWidth
int TMPro::ShaderUtilities::_get_ID_OutlineWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_OutlineWidth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_OutlineWidth"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_OutlineWidth
void TMPro::ShaderUtilities::_set_ID_OutlineWidth(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_OutlineWidth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_OutlineWidth", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_OutlineSoftness
int TMPro::ShaderUtilities::_get_ID_OutlineSoftness() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_OutlineSoftness");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_OutlineSoftness"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_OutlineSoftness
void TMPro::ShaderUtilities::_set_ID_OutlineSoftness(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_OutlineSoftness");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_OutlineSoftness", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_OutlineColor
int TMPro::ShaderUtilities::_get_ID_OutlineColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_OutlineColor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_OutlineColor"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_OutlineColor
void TMPro::ShaderUtilities::_set_ID_OutlineColor(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_OutlineColor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_OutlineColor", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_Padding
int TMPro::ShaderUtilities::_get_ID_Padding() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_Padding");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_Padding"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_Padding
void TMPro::ShaderUtilities::_set_ID_Padding(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_Padding");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_Padding", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_GradientScale
int TMPro::ShaderUtilities::_get_ID_GradientScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_GradientScale");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_GradientScale"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_GradientScale
void TMPro::ShaderUtilities::_set_ID_GradientScale(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_GradientScale");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_GradientScale", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_ScaleX
int TMPro::ShaderUtilities::_get_ID_ScaleX() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_ScaleX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_ScaleX"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_ScaleX
void TMPro::ShaderUtilities::_set_ID_ScaleX(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_ScaleX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_ScaleX", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_ScaleY
int TMPro::ShaderUtilities::_get_ID_ScaleY() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_ScaleY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_ScaleY"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_ScaleY
void TMPro::ShaderUtilities::_set_ID_ScaleY(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_ScaleY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_ScaleY", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_PerspectiveFilter
int TMPro::ShaderUtilities::_get_ID_PerspectiveFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_PerspectiveFilter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_PerspectiveFilter"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_PerspectiveFilter
void TMPro::ShaderUtilities::_set_ID_PerspectiveFilter(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_PerspectiveFilter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_PerspectiveFilter", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_Sharpness
int TMPro::ShaderUtilities::_get_ID_Sharpness() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_Sharpness");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_Sharpness"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_Sharpness
void TMPro::ShaderUtilities::_set_ID_Sharpness(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_Sharpness");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_Sharpness", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_TextureWidth
int TMPro::ShaderUtilities::_get_ID_TextureWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_TextureWidth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_TextureWidth"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_TextureWidth
void TMPro::ShaderUtilities::_set_ID_TextureWidth(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_TextureWidth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_TextureWidth", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_TextureHeight
int TMPro::ShaderUtilities::_get_ID_TextureHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_TextureHeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_TextureHeight"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_TextureHeight
void TMPro::ShaderUtilities::_set_ID_TextureHeight(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_TextureHeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_TextureHeight", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_BevelAmount
int TMPro::ShaderUtilities::_get_ID_BevelAmount() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_BevelAmount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_BevelAmount"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_BevelAmount
void TMPro::ShaderUtilities::_set_ID_BevelAmount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_BevelAmount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_BevelAmount", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_GlowColor
int TMPro::ShaderUtilities::_get_ID_GlowColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_GlowColor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_GlowColor"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_GlowColor
void TMPro::ShaderUtilities::_set_ID_GlowColor(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_GlowColor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_GlowColor", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_GlowOffset
int TMPro::ShaderUtilities::_get_ID_GlowOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_GlowOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_GlowOffset"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_GlowOffset
void TMPro::ShaderUtilities::_set_ID_GlowOffset(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_GlowOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_GlowOffset", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_GlowPower
int TMPro::ShaderUtilities::_get_ID_GlowPower() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_GlowPower");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_GlowPower"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_GlowPower
void TMPro::ShaderUtilities::_set_ID_GlowPower(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_GlowPower");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_GlowPower", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_GlowOuter
int TMPro::ShaderUtilities::_get_ID_GlowOuter() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_GlowOuter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_GlowOuter"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_GlowOuter
void TMPro::ShaderUtilities::_set_ID_GlowOuter(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_GlowOuter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_GlowOuter", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_LightAngle
int TMPro::ShaderUtilities::_get_ID_LightAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_LightAngle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_LightAngle"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_LightAngle
void TMPro::ShaderUtilities::_set_ID_LightAngle(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_LightAngle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_LightAngle", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_EnvMap
int TMPro::ShaderUtilities::_get_ID_EnvMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_EnvMap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_EnvMap"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_EnvMap
void TMPro::ShaderUtilities::_set_ID_EnvMap(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_EnvMap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_EnvMap", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_EnvMatrix
int TMPro::ShaderUtilities::_get_ID_EnvMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_EnvMatrix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_EnvMatrix"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_EnvMatrix
void TMPro::ShaderUtilities::_set_ID_EnvMatrix(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_EnvMatrix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_EnvMatrix", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_EnvMatrixRotation
int TMPro::ShaderUtilities::_get_ID_EnvMatrixRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_EnvMatrixRotation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_EnvMatrixRotation"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_EnvMatrixRotation
void TMPro::ShaderUtilities::_set_ID_EnvMatrixRotation(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_EnvMatrixRotation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_EnvMatrixRotation", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_MaskCoord
int TMPro::ShaderUtilities::_get_ID_MaskCoord() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_MaskCoord");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_MaskCoord"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_MaskCoord
void TMPro::ShaderUtilities::_set_ID_MaskCoord(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_MaskCoord");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_MaskCoord", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_ClipRect
int TMPro::ShaderUtilities::_get_ID_ClipRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_ClipRect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_ClipRect"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_ClipRect
void TMPro::ShaderUtilities::_set_ID_ClipRect(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_ClipRect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_ClipRect", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_MaskSoftnessX
int TMPro::ShaderUtilities::_get_ID_MaskSoftnessX() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_MaskSoftnessX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_MaskSoftnessX"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_MaskSoftnessX
void TMPro::ShaderUtilities::_set_ID_MaskSoftnessX(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_MaskSoftnessX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_MaskSoftnessX", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_MaskSoftnessY
int TMPro::ShaderUtilities::_get_ID_MaskSoftnessY() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_MaskSoftnessY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_MaskSoftnessY"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_MaskSoftnessY
void TMPro::ShaderUtilities::_set_ID_MaskSoftnessY(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_MaskSoftnessY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_MaskSoftnessY", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_VertexOffsetX
int TMPro::ShaderUtilities::_get_ID_VertexOffsetX() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_VertexOffsetX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_VertexOffsetX"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_VertexOffsetX
void TMPro::ShaderUtilities::_set_ID_VertexOffsetX(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_VertexOffsetX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_VertexOffsetX", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_VertexOffsetY
int TMPro::ShaderUtilities::_get_ID_VertexOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_VertexOffsetY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_VertexOffsetY"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_VertexOffsetY
void TMPro::ShaderUtilities::_set_ID_VertexOffsetY(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_VertexOffsetY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_VertexOffsetY", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_UseClipRect
int TMPro::ShaderUtilities::_get_ID_UseClipRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_UseClipRect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_UseClipRect"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_UseClipRect
void TMPro::ShaderUtilities::_set_ID_UseClipRect(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_UseClipRect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_UseClipRect", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_StencilID
int TMPro::ShaderUtilities::_get_ID_StencilID() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_StencilID");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_StencilID"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_StencilID
void TMPro::ShaderUtilities::_set_ID_StencilID(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_StencilID");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_StencilID", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_StencilOp
int TMPro::ShaderUtilities::_get_ID_StencilOp() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_StencilOp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_StencilOp"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_StencilOp
void TMPro::ShaderUtilities::_set_ID_StencilOp(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_StencilOp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_StencilOp", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_StencilComp
int TMPro::ShaderUtilities::_get_ID_StencilComp() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_StencilComp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_StencilComp"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_StencilComp
void TMPro::ShaderUtilities::_set_ID_StencilComp(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_StencilComp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_StencilComp", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_StencilReadMask
int TMPro::ShaderUtilities::_get_ID_StencilReadMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_StencilReadMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_StencilReadMask"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_StencilReadMask
void TMPro::ShaderUtilities::_set_ID_StencilReadMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_StencilReadMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_StencilReadMask", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_StencilWriteMask
int TMPro::ShaderUtilities::_get_ID_StencilWriteMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_StencilWriteMask");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_StencilWriteMask"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_StencilWriteMask
void TMPro::ShaderUtilities::_set_ID_StencilWriteMask(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_StencilWriteMask");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_StencilWriteMask", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_ShaderFlags
int TMPro::ShaderUtilities::_get_ID_ShaderFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_ShaderFlags");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_ShaderFlags"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_ShaderFlags
void TMPro::ShaderUtilities::_set_ID_ShaderFlags(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_ShaderFlags");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_ShaderFlags", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_ScaleRatio_A
int TMPro::ShaderUtilities::_get_ID_ScaleRatio_A() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_ScaleRatio_A");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_ScaleRatio_A"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_ScaleRatio_A
void TMPro::ShaderUtilities::_set_ID_ScaleRatio_A(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_ScaleRatio_A");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_ScaleRatio_A", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_ScaleRatio_B
int TMPro::ShaderUtilities::_get_ID_ScaleRatio_B() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_ScaleRatio_B");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_ScaleRatio_B"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_ScaleRatio_B
void TMPro::ShaderUtilities::_set_ID_ScaleRatio_B(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_ScaleRatio_B");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_ScaleRatio_B", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 ID_ScaleRatio_C
int TMPro::ShaderUtilities::_get_ID_ScaleRatio_C() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ID_ScaleRatio_C");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "ShaderUtilities", "ID_ScaleRatio_C"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 ID_ScaleRatio_C
void TMPro::ShaderUtilities::_set_ID_ScaleRatio_C(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ID_ScaleRatio_C");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ID_ScaleRatio_C", value));
}
// Autogenerated static field getter
// Get static field: static public System.String Keyword_Bevel
::Il2CppString* TMPro::ShaderUtilities::_get_Keyword_Bevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_Keyword_Bevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("TMPro", "ShaderUtilities", "Keyword_Bevel"));
}
// Autogenerated static field setter
// Set static field: static public System.String Keyword_Bevel
void TMPro::ShaderUtilities::_set_Keyword_Bevel(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_Keyword_Bevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "Keyword_Bevel", value));
}
// Autogenerated static field getter
// Get static field: static public System.String Keyword_Glow
::Il2CppString* TMPro::ShaderUtilities::_get_Keyword_Glow() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_Keyword_Glow");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("TMPro", "ShaderUtilities", "Keyword_Glow"));
}
// Autogenerated static field setter
// Set static field: static public System.String Keyword_Glow
void TMPro::ShaderUtilities::_set_Keyword_Glow(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_Keyword_Glow");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "Keyword_Glow", value));
}
// Autogenerated static field getter
// Get static field: static public System.String Keyword_Underlay
::Il2CppString* TMPro::ShaderUtilities::_get_Keyword_Underlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_Keyword_Underlay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("TMPro", "ShaderUtilities", "Keyword_Underlay"));
}
// Autogenerated static field setter
// Set static field: static public System.String Keyword_Underlay
void TMPro::ShaderUtilities::_set_Keyword_Underlay(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_Keyword_Underlay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "Keyword_Underlay", value));
}
// Autogenerated static field getter
// Get static field: static public System.String Keyword_Ratios
::Il2CppString* TMPro::ShaderUtilities::_get_Keyword_Ratios() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_Keyword_Ratios");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("TMPro", "ShaderUtilities", "Keyword_Ratios"));
}
// Autogenerated static field setter
// Set static field: static public System.String Keyword_Ratios
void TMPro::ShaderUtilities::_set_Keyword_Ratios(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_Keyword_Ratios");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "Keyword_Ratios", value));
}
// Autogenerated static field getter
// Get static field: static public System.String Keyword_MASK_SOFT
::Il2CppString* TMPro::ShaderUtilities::_get_Keyword_MASK_SOFT() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_Keyword_MASK_SOFT");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("TMPro", "ShaderUtilities", "Keyword_MASK_SOFT"));
}
// Autogenerated static field setter
// Set static field: static public System.String Keyword_MASK_SOFT
void TMPro::ShaderUtilities::_set_Keyword_MASK_SOFT(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_Keyword_MASK_SOFT");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "Keyword_MASK_SOFT", value));
}
// Autogenerated static field getter
// Get static field: static public System.String Keyword_MASK_HARD
::Il2CppString* TMPro::ShaderUtilities::_get_Keyword_MASK_HARD() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_Keyword_MASK_HARD");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("TMPro", "ShaderUtilities", "Keyword_MASK_HARD"));
}
// Autogenerated static field setter
// Set static field: static public System.String Keyword_MASK_HARD
void TMPro::ShaderUtilities::_set_Keyword_MASK_HARD(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_Keyword_MASK_HARD");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "Keyword_MASK_HARD", value));
}
// Autogenerated static field getter
// Get static field: static public System.String Keyword_MASK_TEX
::Il2CppString* TMPro::ShaderUtilities::_get_Keyword_MASK_TEX() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_Keyword_MASK_TEX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("TMPro", "ShaderUtilities", "Keyword_MASK_TEX"));
}
// Autogenerated static field setter
// Set static field: static public System.String Keyword_MASK_TEX
void TMPro::ShaderUtilities::_set_Keyword_MASK_TEX(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_Keyword_MASK_TEX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "Keyword_MASK_TEX", value));
}
// Autogenerated static field getter
// Get static field: static public System.String Keyword_Outline
::Il2CppString* TMPro::ShaderUtilities::_get_Keyword_Outline() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_Keyword_Outline");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("TMPro", "ShaderUtilities", "Keyword_Outline"));
}
// Autogenerated static field setter
// Set static field: static public System.String Keyword_Outline
void TMPro::ShaderUtilities::_set_Keyword_Outline(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_Keyword_Outline");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "Keyword_Outline", value));
}
// Autogenerated static field getter
// Get static field: static public System.String ShaderTag_ZTestMode
::Il2CppString* TMPro::ShaderUtilities::_get_ShaderTag_ZTestMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ShaderTag_ZTestMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("TMPro", "ShaderUtilities", "ShaderTag_ZTestMode"));
}
// Autogenerated static field setter
// Set static field: static public System.String ShaderTag_ZTestMode
void TMPro::ShaderUtilities::_set_ShaderTag_ZTestMode(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ShaderTag_ZTestMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ShaderTag_ZTestMode", value));
}
// Autogenerated static field getter
// Get static field: static public System.String ShaderTag_CullMode
::Il2CppString* TMPro::ShaderUtilities::_get_ShaderTag_CullMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_ShaderTag_CullMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("TMPro", "ShaderUtilities", "ShaderTag_CullMode"));
}
// Autogenerated static field setter
// Set static field: static public System.String ShaderTag_CullMode
void TMPro::ShaderUtilities::_set_ShaderTag_CullMode(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_ShaderTag_CullMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "ShaderTag_CullMode", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single m_clamp
float TMPro::ShaderUtilities::_get_m_clamp() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_m_clamp");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("TMPro", "ShaderUtilities", "m_clamp"));
}
// Autogenerated static field setter
// Set static field: static private System.Single m_clamp
void TMPro::ShaderUtilities::_set_m_clamp(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_m_clamp");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "m_clamp", value));
}
// Autogenerated static field getter
// Get static field: static public System.Boolean isInitialized
bool TMPro::ShaderUtilities::_get_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_isInitialized");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("TMPro", "ShaderUtilities", "isInitialized"));
}
// Autogenerated static field setter
// Set static field: static public System.Boolean isInitialized
void TMPro::ShaderUtilities::_set_isInitialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_isInitialized");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "isInitialized", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Shader k_ShaderRef_MobileSDF
UnityEngine::Shader* TMPro::ShaderUtilities::_get_k_ShaderRef_MobileSDF() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_k_ShaderRef_MobileSDF");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Shader*>("TMPro", "ShaderUtilities", "k_ShaderRef_MobileSDF"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Shader k_ShaderRef_MobileSDF
void TMPro::ShaderUtilities::_set_k_ShaderRef_MobileSDF(UnityEngine::Shader* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_k_ShaderRef_MobileSDF");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "k_ShaderRef_MobileSDF", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Shader k_ShaderRef_MobileBitmap
UnityEngine::Shader* TMPro::ShaderUtilities::_get_k_ShaderRef_MobileBitmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_get_k_ShaderRef_MobileBitmap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Shader*>("TMPro", "ShaderUtilities", "k_ShaderRef_MobileBitmap"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Shader k_ShaderRef_MobileBitmap
void TMPro::ShaderUtilities::_set_k_ShaderRef_MobileBitmap(UnityEngine::Shader* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::_set_k_ShaderRef_MobileBitmap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "ShaderUtilities", "k_ShaderRef_MobileBitmap", value));
}
// Autogenerated method: TMPro.ShaderUtilities.get_ShaderRef_MobileSDF
UnityEngine::Shader* TMPro::ShaderUtilities::get_ShaderRef_MobileSDF() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::get_ShaderRef_MobileSDF");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "ShaderUtilities", "get_ShaderRef_MobileSDF", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Shader*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.ShaderUtilities.get_ShaderRef_MobileBitmap
UnityEngine::Shader* TMPro::ShaderUtilities::get_ShaderRef_MobileBitmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::get_ShaderRef_MobileBitmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "ShaderUtilities", "get_ShaderRef_MobileBitmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Shader*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.ShaderUtilities..cctor
void TMPro::ShaderUtilities::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "ShaderUtilities", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.ShaderUtilities.GetShaderPropertyIDs
void TMPro::ShaderUtilities::GetShaderPropertyIDs() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::GetShaderPropertyIDs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "ShaderUtilities", "GetShaderPropertyIDs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.ShaderUtilities.UpdateShaderRatios
void TMPro::ShaderUtilities::UpdateShaderRatios(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::UpdateShaderRatios");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "ShaderUtilities", "UpdateShaderRatios", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mat);
}
// Autogenerated method: TMPro.ShaderUtilities.GetFontExtent
UnityEngine::Vector4 TMPro::ShaderUtilities::GetFontExtent(UnityEngine::Material* material) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::GetFontExtent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "ShaderUtilities", "GetFontExtent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(material)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, material);
}
// Autogenerated method: TMPro.ShaderUtilities.IsMaskingEnabled
bool TMPro::ShaderUtilities::IsMaskingEnabled(UnityEngine::Material* material) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::IsMaskingEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "ShaderUtilities", "IsMaskingEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(material)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, material);
}
// Autogenerated method: TMPro.ShaderUtilities.GetPadding
float TMPro::ShaderUtilities::GetPadding(UnityEngine::Material* material, bool enableExtraPadding, bool isBold) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::GetPadding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "ShaderUtilities", "GetPadding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(material), ::il2cpp_utils::ExtractType(enableExtraPadding), ::il2cpp_utils::ExtractType(isBold)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, material, enableExtraPadding, isBold);
}
// Autogenerated method: TMPro.ShaderUtilities.GetPadding
float TMPro::ShaderUtilities::GetPadding(::Array<UnityEngine::Material*>* materials, bool enableExtraPadding, bool isBold) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ShaderUtilities::GetPadding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "ShaderUtilities", "GetPadding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materials), ::il2cpp_utils::ExtractType(enableExtraPadding), ::il2cpp_utils::ExtractType(isBold)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, materials, enableExtraPadding, isBold);
}
// Writing MetadataGetter for method: ShaderUtilities::get_ShaderRef_MobileSDF
// Il2CppName: get_ShaderRef_MobileSDF
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Shader* (*)()>(&ShaderUtilities::get_ShaderRef_MobileSDF)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderUtilities*), "get_ShaderRef_MobileSDF", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShaderUtilities::get_ShaderRef_MobileBitmap
// Il2CppName: get_ShaderRef_MobileBitmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Shader* (*)()>(&ShaderUtilities::get_ShaderRef_MobileBitmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderUtilities*), "get_ShaderRef_MobileBitmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShaderUtilities::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ShaderUtilities::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderUtilities*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShaderUtilities::GetShaderPropertyIDs
// Il2CppName: GetShaderPropertyIDs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ShaderUtilities::GetShaderPropertyIDs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderUtilities*), "GetShaderPropertyIDs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShaderUtilities::UpdateShaderRatios
// Il2CppName: UpdateShaderRatios
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Material*)>(&ShaderUtilities::UpdateShaderRatios)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderUtilities*), "UpdateShaderRatios", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: ShaderUtilities::GetFontExtent
// Il2CppName: GetFontExtent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector4 (*)(UnityEngine::Material*)>(&ShaderUtilities::GetFontExtent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderUtilities*), "GetFontExtent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: ShaderUtilities::IsMaskingEnabled
// Il2CppName: IsMaskingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Material*)>(&ShaderUtilities::IsMaskingEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderUtilities*), "IsMaskingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: ShaderUtilities::GetPadding
// Il2CppName: GetPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Material*, bool, bool)>(&ShaderUtilities::GetPadding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderUtilities*), "GetPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ShaderUtilities::GetPadding
// Il2CppName: GetPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Array<UnityEngine::Material*>*, bool, bool)>(&ShaderUtilities::GetPadding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShaderUtilities*), "GetPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Material*>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_Sprite
#include "TMPro/TMP_Sprite.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TMP_Sprite::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Sprite::*)()>(&TMP_Sprite::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Sprite*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Sprite::*)()>(&TMP_Sprite::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Sprite*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_SpriteAnimator
#include "TMPro/TMP_SpriteAnimator.hpp"
// Including type: TMPro.TMP_SpriteAnimator/<DoSpriteAnimationInternal>d__7
#include "TMPro/TMP_SpriteAnimator_-DoSpriteAnimationInternal-d__7.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
// Including type: TMPro.TMP_SpriteAsset
#include "TMPro/TMP_SpriteAsset.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_SpriteAnimator.Awake
void TMPro::TMP_SpriteAnimator::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAnimator::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAnimator.OnEnable
void TMPro::TMP_SpriteAnimator::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAnimator::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAnimator.OnDisable
void TMPro::TMP_SpriteAnimator::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAnimator::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAnimator.StopAllAnimations
void TMPro::TMP_SpriteAnimator::StopAllAnimations() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAnimator::StopAllAnimations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopAllAnimations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAnimator.DoSpriteAnimation
void TMPro::TMP_SpriteAnimator::DoSpriteAnimation(int currentCharacter, TMPro::TMP_SpriteAsset* spriteAsset, int start, int end, int framerate) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAnimator::DoSpriteAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoSpriteAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentCharacter), ::il2cpp_utils::ExtractType(spriteAsset), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(framerate)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, currentCharacter, spriteAsset, start, end, framerate);
}
// Autogenerated method: TMPro.TMP_SpriteAnimator.DoSpriteAnimationInternal
System::Collections::IEnumerator* TMPro::TMP_SpriteAnimator::DoSpriteAnimationInternal(int currentCharacter, TMPro::TMP_SpriteAsset* spriteAsset, int start, int end, int framerate) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAnimator::DoSpriteAnimationInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DoSpriteAnimationInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentCharacter), ::il2cpp_utils::ExtractType(spriteAsset), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(framerate)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, currentCharacter, spriteAsset, start, end, framerate);
}
// Writing MetadataGetter for method: TMP_SpriteAnimator::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAnimator::*)()>(&TMP_SpriteAnimator::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAnimator*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAnimator::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAnimator::*)()>(&TMP_SpriteAnimator::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAnimator*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAnimator::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAnimator::*)()>(&TMP_SpriteAnimator::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAnimator*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAnimator::StopAllAnimations
// Il2CppName: StopAllAnimations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAnimator::*)()>(&TMP_SpriteAnimator::StopAllAnimations)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAnimator*), "StopAllAnimations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAnimator::DoSpriteAnimation
// Il2CppName: DoSpriteAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAnimator::*)(int, TMPro::TMP_SpriteAsset*, int, int, int)>(&TMP_SpriteAnimator::DoSpriteAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAnimator*), "DoSpriteAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_SpriteAsset*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAnimator::DoSpriteAnimationInternal
// Il2CppName: DoSpriteAnimationInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (TMP_SpriteAnimator::*)(int, TMPro::TMP_SpriteAsset*, int, int, int)>(&TMP_SpriteAnimator::DoSpriteAnimationInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAnimator*), "DoSpriteAnimationInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_SpriteAsset*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAnimator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAnimator::*)()>(&TMP_SpriteAnimator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAnimator::*)()>(&TMP_SpriteAnimator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_SpriteAnimator/<DoSpriteAnimationInternal>d__7
#include "TMPro/TMP_SpriteAnimator_-DoSpriteAnimationInternal-d__7.hpp"
// Including type: TMPro.TMP_SpriteAsset
#include "TMPro/TMP_SpriteAsset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_SpriteAnimator/<DoSpriteAnimationInternal>d__7.System.IDisposable.Dispose
void TMPro::TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAnimator/<DoSpriteAnimationInternal>d__7.MoveNext
bool TMPro::TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAnimator/<DoSpriteAnimationInternal>d__7.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* TMPro::TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAnimator/<DoSpriteAnimationInternal>d__7.System.Collections.IEnumerator.Reset
void TMPro::TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAnimator/<DoSpriteAnimationInternal>d__7.System.Collections.IEnumerator.get_Current
::Il2CppObject* TMPro::TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::*)(int)>(&TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::*)(int)>(&TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::*)()>(&TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::*)()>(&TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::*)()>(&TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::*)()>(&TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::*)()>(&TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAnimator::$DoSpriteAnimationInternal$d__7*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_SpriteAsset
#include "TMPro/TMP_SpriteAsset.hpp"
// Including type: TMPro.TMP_SpriteAsset/<>c
#include "TMPro/TMP_SpriteAsset_--c.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: TMPro.TMP_SpriteCharacter
#include "TMPro/TMP_SpriteCharacter.hpp"
// Including type: TMPro.TMP_SpriteGlyph
#include "TMPro/TMP_SpriteGlyph.hpp"
// Including type: TMPro.TMP_Sprite
#include "TMPro/TMP_Sprite.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.List`1<System.Int32> k_searchedSpriteAssets
System::Collections::Generic::List_1<int>* TMPro::TMP_SpriteAsset::_get_k_searchedSpriteAssets() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::_get_k_searchedSpriteAssets");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<int>*>("TMPro", "TMP_SpriteAsset", "k_searchedSpriteAssets"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.List`1<System.Int32> k_searchedSpriteAssets
void TMPro::TMP_SpriteAsset::_set_k_searchedSpriteAssets(System::Collections::Generic::List_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::_set_k_searchedSpriteAssets");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_SpriteAsset", "k_searchedSpriteAssets", value));
}
// Autogenerated method: TMPro.TMP_SpriteAsset.get_version
::Il2CppString* TMPro::TMP_SpriteAsset::get_version() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::get_version");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.set_version
void TMPro::TMP_SpriteAsset::set_version(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::set_version");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_version", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.get_spriteCharacterTable
System::Collections::Generic::List_1<TMPro::TMP_SpriteCharacter*>* TMPro::TMP_SpriteAsset::get_spriteCharacterTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::get_spriteCharacterTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spriteCharacterTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<TMPro::TMP_SpriteCharacter*>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.set_spriteCharacterTable
void TMPro::TMP_SpriteAsset::set_spriteCharacterTable(System::Collections::Generic::List_1<TMPro::TMP_SpriteCharacter*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::set_spriteCharacterTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_spriteCharacterTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.get_spriteGlyphTable
System::Collections::Generic::List_1<TMPro::TMP_SpriteGlyph*>* TMPro::TMP_SpriteAsset::get_spriteGlyphTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::get_spriteGlyphTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spriteGlyphTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<TMPro::TMP_SpriteGlyph*>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.set_spriteGlyphTable
void TMPro::TMP_SpriteAsset::set_spriteGlyphTable(System::Collections::Generic::List_1<TMPro::TMP_SpriteGlyph*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::set_spriteGlyphTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_spriteGlyphTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.Awake
void TMPro::TMP_SpriteAsset::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.GetDefaultSpriteMaterial
UnityEngine::Material* TMPro::TMP_SpriteAsset::GetDefaultSpriteMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::GetDefaultSpriteMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDefaultSpriteMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.UpdateLookupTables
void TMPro::TMP_SpriteAsset::UpdateLookupTables() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::UpdateLookupTables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLookupTables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.GetSpriteIndexFromHashcode
int TMPro::TMP_SpriteAsset::GetSpriteIndexFromHashcode(int hashCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::GetSpriteIndexFromHashcode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpriteIndexFromHashcode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hashCode)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, hashCode);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.GetSpriteIndexFromUnicode
int TMPro::TMP_SpriteAsset::GetSpriteIndexFromUnicode(uint unicode) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::GetSpriteIndexFromUnicode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpriteIndexFromUnicode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(unicode)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, unicode);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.GetSpriteIndexFromName
int TMPro::TMP_SpriteAsset::GetSpriteIndexFromName(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::GetSpriteIndexFromName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpriteIndexFromName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, name);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.SearchForSpriteByUnicode
TMPro::TMP_SpriteAsset* TMPro::TMP_SpriteAsset::SearchForSpriteByUnicode(TMPro::TMP_SpriteAsset* spriteAsset, uint unicode, bool includeFallbacks, int& spriteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::SearchForSpriteByUnicode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_SpriteAsset", "SearchForSpriteByUnicode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spriteAsset), ::il2cpp_utils::ExtractType(unicode), ::il2cpp_utils::ExtractType(includeFallbacks), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_SpriteAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, spriteAsset, unicode, includeFallbacks, spriteIndex);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.SearchForSpriteByUnicodeInternal
TMPro::TMP_SpriteAsset* TMPro::TMP_SpriteAsset::SearchForSpriteByUnicodeInternal(System::Collections::Generic::List_1<TMPro::TMP_SpriteAsset*>* spriteAssets, uint unicode, bool includeFallbacks, int& spriteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::SearchForSpriteByUnicodeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_SpriteAsset", "SearchForSpriteByUnicodeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spriteAssets), ::il2cpp_utils::ExtractType(unicode), ::il2cpp_utils::ExtractType(includeFallbacks), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_SpriteAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, spriteAssets, unicode, includeFallbacks, spriteIndex);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.SearchForSpriteByUnicodeInternal
TMPro::TMP_SpriteAsset* TMPro::TMP_SpriteAsset::SearchForSpriteByUnicodeInternal(TMPro::TMP_SpriteAsset* spriteAsset, uint unicode, bool includeFallbacks, int& spriteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::SearchForSpriteByUnicodeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_SpriteAsset", "SearchForSpriteByUnicodeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spriteAsset), ::il2cpp_utils::ExtractType(unicode), ::il2cpp_utils::ExtractType(includeFallbacks), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_SpriteAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, spriteAsset, unicode, includeFallbacks, spriteIndex);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.SearchForSpriteByHashCode
TMPro::TMP_SpriteAsset* TMPro::TMP_SpriteAsset::SearchForSpriteByHashCode(TMPro::TMP_SpriteAsset* spriteAsset, int hashCode, bool includeFallbacks, int& spriteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::SearchForSpriteByHashCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_SpriteAsset", "SearchForSpriteByHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spriteAsset), ::il2cpp_utils::ExtractType(hashCode), ::il2cpp_utils::ExtractType(includeFallbacks), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_SpriteAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, spriteAsset, hashCode, includeFallbacks, spriteIndex);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.SearchForSpriteByHashCodeInternal
TMPro::TMP_SpriteAsset* TMPro::TMP_SpriteAsset::SearchForSpriteByHashCodeInternal(System::Collections::Generic::List_1<TMPro::TMP_SpriteAsset*>* spriteAssets, int hashCode, bool searchFallbacks, int& spriteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::SearchForSpriteByHashCodeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_SpriteAsset", "SearchForSpriteByHashCodeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spriteAssets), ::il2cpp_utils::ExtractType(hashCode), ::il2cpp_utils::ExtractType(searchFallbacks), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_SpriteAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, spriteAssets, hashCode, searchFallbacks, spriteIndex);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.SearchForSpriteByHashCodeInternal
TMPro::TMP_SpriteAsset* TMPro::TMP_SpriteAsset::SearchForSpriteByHashCodeInternal(TMPro::TMP_SpriteAsset* spriteAsset, int hashCode, bool searchFallbacks, int& spriteIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::SearchForSpriteByHashCodeInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_SpriteAsset", "SearchForSpriteByHashCodeInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spriteAsset), ::il2cpp_utils::ExtractType(hashCode), ::il2cpp_utils::ExtractType(searchFallbacks), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_SpriteAsset*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, spriteAsset, hashCode, searchFallbacks, spriteIndex);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.SortGlyphTable
void TMPro::TMP_SpriteAsset::SortGlyphTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::SortGlyphTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SortGlyphTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.SortCharacterTable
void TMPro::TMP_SpriteAsset::SortCharacterTable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::SortCharacterTable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SortCharacterTable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.SortGlyphAndCharacterTables
void TMPro::TMP_SpriteAsset::SortGlyphAndCharacterTables() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::SortGlyphAndCharacterTables");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SortGlyphAndCharacterTables", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAsset.UpgradeSpriteAsset
void TMPro::TMP_SpriteAsset::UpgradeSpriteAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::UpgradeSpriteAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpgradeSpriteAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TMP_SpriteAsset::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMP_SpriteAsset::*)()>(&TMP_SpriteAsset::get_version)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::set_version
// Il2CppName: set_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAsset::*)(::Il2CppString*)>(&TMP_SpriteAsset::set_version)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "set_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::get_spriteCharacterTable
// Il2CppName: get_spriteCharacterTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<TMPro::TMP_SpriteCharacter*>* (TMP_SpriteAsset::*)()>(&TMP_SpriteAsset::get_spriteCharacterTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "get_spriteCharacterTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::set_spriteCharacterTable
// Il2CppName: set_spriteCharacterTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAsset::*)(System::Collections::Generic::List_1<TMPro::TMP_SpriteCharacter*>*)>(&TMP_SpriteAsset::set_spriteCharacterTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "set_spriteCharacterTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<TMPro::TMP_SpriteCharacter*>*>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::get_spriteGlyphTable
// Il2CppName: get_spriteGlyphTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<TMPro::TMP_SpriteGlyph*>* (TMP_SpriteAsset::*)()>(&TMP_SpriteAsset::get_spriteGlyphTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "get_spriteGlyphTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::set_spriteGlyphTable
// Il2CppName: set_spriteGlyphTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAsset::*)(System::Collections::Generic::List_1<TMPro::TMP_SpriteGlyph*>*)>(&TMP_SpriteAsset::set_spriteGlyphTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "set_spriteGlyphTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<TMPro::TMP_SpriteGlyph*>*>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAsset::*)()>(&TMP_SpriteAsset::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::GetDefaultSpriteMaterial
// Il2CppName: GetDefaultSpriteMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SpriteAsset::*)()>(&TMP_SpriteAsset::GetDefaultSpriteMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "GetDefaultSpriteMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::UpdateLookupTables
// Il2CppName: UpdateLookupTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAsset::*)()>(&TMP_SpriteAsset::UpdateLookupTables)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "UpdateLookupTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::GetSpriteIndexFromHashcode
// Il2CppName: GetSpriteIndexFromHashcode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_SpriteAsset::*)(int)>(&TMP_SpriteAsset::GetSpriteIndexFromHashcode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "GetSpriteIndexFromHashcode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::GetSpriteIndexFromUnicode
// Il2CppName: GetSpriteIndexFromUnicode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_SpriteAsset::*)(uint)>(&TMP_SpriteAsset::GetSpriteIndexFromUnicode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "GetSpriteIndexFromUnicode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::GetSpriteIndexFromName
// Il2CppName: GetSpriteIndexFromName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_SpriteAsset::*)(::Il2CppString*)>(&TMP_SpriteAsset::GetSpriteIndexFromName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "GetSpriteIndexFromName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::SearchForSpriteByUnicode
// Il2CppName: SearchForSpriteByUnicode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SpriteAsset* (*)(TMPro::TMP_SpriteAsset*, uint, bool, int&)>(&TMP_SpriteAsset::SearchForSpriteByUnicode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "SearchForSpriteByUnicode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_SpriteAsset*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::SearchForSpriteByUnicodeInternal
// Il2CppName: SearchForSpriteByUnicodeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SpriteAsset* (*)(System::Collections::Generic::List_1<TMPro::TMP_SpriteAsset*>*, uint, bool, int&)>(&TMP_SpriteAsset::SearchForSpriteByUnicodeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "SearchForSpriteByUnicodeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<TMPro::TMP_SpriteAsset*>*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::SearchForSpriteByUnicodeInternal
// Il2CppName: SearchForSpriteByUnicodeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SpriteAsset* (*)(TMPro::TMP_SpriteAsset*, uint, bool, int&)>(&TMP_SpriteAsset::SearchForSpriteByUnicodeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "SearchForSpriteByUnicodeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_SpriteAsset*>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::SearchForSpriteByHashCode
// Il2CppName: SearchForSpriteByHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SpriteAsset* (*)(TMPro::TMP_SpriteAsset*, int, bool, int&)>(&TMP_SpriteAsset::SearchForSpriteByHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "SearchForSpriteByHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_SpriteAsset*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::SearchForSpriteByHashCodeInternal
// Il2CppName: SearchForSpriteByHashCodeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SpriteAsset* (*)(System::Collections::Generic::List_1<TMPro::TMP_SpriteAsset*>*, int, bool, int&)>(&TMP_SpriteAsset::SearchForSpriteByHashCodeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "SearchForSpriteByHashCodeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<TMPro::TMP_SpriteAsset*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::SearchForSpriteByHashCodeInternal
// Il2CppName: SearchForSpriteByHashCodeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SpriteAsset* (*)(TMPro::TMP_SpriteAsset*, int, bool, int&)>(&TMP_SpriteAsset::SearchForSpriteByHashCodeInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "SearchForSpriteByHashCodeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_SpriteAsset*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::SortGlyphTable
// Il2CppName: SortGlyphTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAsset::*)()>(&TMP_SpriteAsset::SortGlyphTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "SortGlyphTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::SortCharacterTable
// Il2CppName: SortCharacterTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAsset::*)()>(&TMP_SpriteAsset::SortCharacterTable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "SortCharacterTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::SortGlyphAndCharacterTables
// Il2CppName: SortGlyphAndCharacterTables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAsset::*)()>(&TMP_SpriteAsset::SortGlyphAndCharacterTables)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "SortGlyphAndCharacterTables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::UpgradeSpriteAsset
// Il2CppName: UpgradeSpriteAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAsset::*)()>(&TMP_SpriteAsset::UpgradeSpriteAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), "UpgradeSpriteAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAsset::*)()>(&TMP_SpriteAsset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAsset::*)()>(&TMP_SpriteAsset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_SpriteAsset/<>c
#include "TMPro/TMP_SpriteAsset_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: TMPro.TMP_SpriteGlyph
#include "TMPro/TMP_SpriteGlyph.hpp"
// Including type: TMPro.TMP_SpriteCharacter
#include "TMPro/TMP_SpriteCharacter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly TMPro.TMP_SpriteAsset/<>c <>9
TMPro::TMP_SpriteAsset::$$c* TMPro::TMP_SpriteAsset::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<TMPro::TMP_SpriteAsset::$$c*>("TMPro", "TMP_SpriteAsset/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly TMPro.TMP_SpriteAsset/<>c <>9
void TMPro::TMP_SpriteAsset::$$c::_set_$$9(TMPro::TMP_SpriteAsset::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("TMPro", "TMP_SpriteAsset/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<TMPro.TMP_SpriteGlyph,System.UInt32> <>9__32_0
System::Func_2<TMPro::TMP_SpriteGlyph*, uint>* TMPro::TMP_SpriteAsset::$$c::_get_$$9__32_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::$$c::_get_$$9__32_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<TMPro::TMP_SpriteGlyph*, uint>*>("TMPro", "TMP_SpriteAsset/<>c", "<>9__32_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<TMPro.TMP_SpriteGlyph,System.UInt32> <>9__32_0
void TMPro::TMP_SpriteAsset::$$c::_set_$$9__32_0(System::Func_2<TMPro::TMP_SpriteGlyph*, uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::$$c::_set_$$9__32_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("TMPro", "TMP_SpriteAsset/<>c", "<>9__32_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<TMPro.TMP_SpriteCharacter,System.UInt32> <>9__33_0
System::Func_2<TMPro::TMP_SpriteCharacter*, uint>* TMPro::TMP_SpriteAsset::$$c::_get_$$9__33_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::$$c::_get_$$9__33_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<TMPro::TMP_SpriteCharacter*, uint>*>("TMPro", "TMP_SpriteAsset/<>c", "<>9__33_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<TMPro.TMP_SpriteCharacter,System.UInt32> <>9__33_0
void TMPro::TMP_SpriteAsset::$$c::_set_$$9__33_0(System::Func_2<TMPro::TMP_SpriteCharacter*, uint>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::$$c::_set_$$9__33_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("TMPro", "TMP_SpriteAsset/<>c", "<>9__33_0", value)));
}
// Autogenerated method: TMPro.TMP_SpriteAsset/<>c..cctor
void TMPro::TMP_SpriteAsset::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_SpriteAsset/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteAsset/<>c.<SortGlyphTable>b__32_0
uint TMPro::TMP_SpriteAsset::$$c::$SortGlyphTable$b__32_0(TMPro::TMP_SpriteGlyph* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::$$c::<SortGlyphTable>b__32_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SortGlyphTable>b__32_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, item);
}
// Autogenerated method: TMPro.TMP_SpriteAsset/<>c.<SortCharacterTable>b__33_0
uint TMPro::TMP_SpriteAsset::$$c::$SortCharacterTable$b__33_0(TMPro::TMP_SpriteCharacter* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteAsset::$$c::<SortCharacterTable>b__33_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SortCharacterTable>b__33_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, c);
}
// Writing MetadataGetter for method: TMP_SpriteAsset::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_SpriteAsset::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::$$c::$SortGlyphTable$b__32_0
// Il2CppName: <SortGlyphTable>b__32_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (TMP_SpriteAsset::$$c::*)(TMPro::TMP_SpriteGlyph*)>(&TMP_SpriteAsset::$$c::$SortGlyphTable$b__32_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset::$$c*), "<SortGlyphTable>b__32_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_SpriteGlyph*>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::$$c::$SortCharacterTable$b__33_0
// Il2CppName: <SortCharacterTable>b__33_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (TMP_SpriteAsset::$$c::*)(TMPro::TMP_SpriteCharacter*)>(&TMP_SpriteAsset::$$c::$SortCharacterTable$b__33_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset::$$c*), "<SortCharacterTable>b__33_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_SpriteCharacter*>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteAsset::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAsset::$$c::*)()>(&TMP_SpriteAsset::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteAsset::$$c::*)()>(&TMP_SpriteAsset::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteAsset::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_SpriteCharacter
#include "TMPro/TMP_SpriteCharacter.hpp"
// Including type: TMPro.TMP_SpriteGlyph
#include "TMPro/TMP_SpriteGlyph.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_SpriteCharacter.get_name
::Il2CppString* TMPro::TMP_SpriteCharacter::get_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteCharacter::get_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SpriteCharacter.set_name
void TMPro::TMP_SpriteCharacter::set_name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteCharacter::set_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SpriteCharacter.get_hashCode
int TMPro::TMP_SpriteCharacter::get_hashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SpriteCharacter::get_hashCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TMP_SpriteCharacter::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMP_SpriteCharacter::*)()>(&TMP_SpriteCharacter::get_name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteCharacter*), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteCharacter::set_name
// Il2CppName: set_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteCharacter::*)(::Il2CppString*)>(&TMP_SpriteCharacter::set_name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteCharacter*), "set_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteCharacter::get_hashCode
// Il2CppName: get_hashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_SpriteCharacter::*)()>(&TMP_SpriteCharacter::get_hashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteCharacter*), "get_hashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteCharacter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteCharacter::*)(uint, TMPro::TMP_SpriteGlyph*)>(&TMP_SpriteCharacter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteCharacter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_SpriteGlyph*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteCharacter::*)(uint, TMPro::TMP_SpriteGlyph*)>(&TMP_SpriteCharacter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteCharacter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<TMPro::TMP_SpriteGlyph*>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteCharacter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteCharacter::*)()>(&TMP_SpriteCharacter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteCharacter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteCharacter::*)()>(&TMP_SpriteCharacter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteCharacter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_SpriteGlyph
#include "TMPro/TMP_SpriteGlyph.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TMP_SpriteGlyph::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteGlyph::*)(uint, UnityEngine::TextCore::GlyphMetrics, UnityEngine::TextCore::GlyphRect, float, int, UnityEngine::Sprite*)>(&TMP_SpriteGlyph::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteGlyph*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::GlyphMetrics>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::GlyphRect>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Sprite*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteGlyph::*)(uint, UnityEngine::TextCore::GlyphMetrics, UnityEngine::TextCore::GlyphRect, float, int, UnityEngine::Sprite*)>(&TMP_SpriteGlyph::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteGlyph*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::GlyphMetrics>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::GlyphRect>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Sprite*>()});
  }
};
// Writing MetadataGetter for method: TMP_SpriteGlyph::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteGlyph::*)()>(&TMP_SpriteGlyph::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteGlyph*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteGlyph::*)()>(&TMP_SpriteGlyph::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteGlyph*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SpriteGlyph::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteGlyph::*)(uint, UnityEngine::TextCore::GlyphMetrics, UnityEngine::TextCore::GlyphRect, float, int)>(&TMP_SpriteGlyph::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteGlyph*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::GlyphMetrics>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::GlyphRect>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SpriteGlyph::*)(uint, UnityEngine::TextCore::GlyphMetrics, UnityEngine::TextCore::GlyphRect, float, int)>(&TMP_SpriteGlyph::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SpriteGlyph*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::GlyphMetrics>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::GlyphRect>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_Style
#include "TMPro/TMP_Style.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_Style.get_name
::Il2CppString* TMPro::TMP_Style::get_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Style::get_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Style.set_name
void TMPro::TMP_Style::set_name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Style::set_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Style.get_hashCode
int TMPro::TMP_Style::get_hashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Style::get_hashCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Style.set_hashCode
void TMPro::TMP_Style::set_hashCode(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Style::set_hashCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Style.get_styleOpeningDefinition
::Il2CppString* TMPro::TMP_Style::get_styleOpeningDefinition() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Style::get_styleOpeningDefinition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_styleOpeningDefinition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Style.get_styleClosingDefinition
::Il2CppString* TMPro::TMP_Style::get_styleClosingDefinition() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Style::get_styleClosingDefinition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_styleClosingDefinition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Style.get_styleOpeningTagArray
::Array<int>* TMPro::TMP_Style::get_styleOpeningTagArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Style::get_styleOpeningTagArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_styleOpeningTagArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<int>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Style.get_styleClosingTagArray
::Array<int>* TMPro::TMP_Style::get_styleClosingTagArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Style::get_styleClosingTagArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_styleClosingTagArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<int>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Style.RefreshStyle
void TMPro::TMP_Style::RefreshStyle() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Style::RefreshStyle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshStyle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TMP_Style::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMP_Style::*)()>(&TMP_Style::get_name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Style*), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Style::set_name
// Il2CppName: set_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Style::*)(::Il2CppString*)>(&TMP_Style::set_name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Style*), "set_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_Style::get_hashCode
// Il2CppName: get_hashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Style::*)()>(&TMP_Style::get_hashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Style*), "get_hashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Style::set_hashCode
// Il2CppName: set_hashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Style::*)(int)>(&TMP_Style::set_hashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Style*), "set_hashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Style::get_styleOpeningDefinition
// Il2CppName: get_styleOpeningDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMP_Style::*)()>(&TMP_Style::get_styleOpeningDefinition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Style*), "get_styleOpeningDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Style::get_styleClosingDefinition
// Il2CppName: get_styleClosingDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMP_Style::*)()>(&TMP_Style::get_styleClosingDefinition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Style*), "get_styleClosingDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Style::get_styleOpeningTagArray
// Il2CppName: get_styleOpeningTagArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (TMP_Style::*)()>(&TMP_Style::get_styleOpeningTagArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Style*), "get_styleOpeningTagArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Style::get_styleClosingTagArray
// Il2CppName: get_styleClosingTagArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<int>* (TMP_Style::*)()>(&TMP_Style::get_styleClosingTagArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Style*), "get_styleClosingTagArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Style::RefreshStyle
// Il2CppName: RefreshStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Style::*)()>(&TMP_Style::RefreshStyle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Style*), "RefreshStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Style::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Style::*)()>(&TMP_Style::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Style*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Style::*)()>(&TMP_Style::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Style*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_StyleSheet
#include "TMPro/TMP_StyleSheet.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: TMPro.TMP_Style
#include "TMPro/TMP_Style.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private TMPro.TMP_StyleSheet s_Instance
TMPro::TMP_StyleSheet* TMPro::TMP_StyleSheet::_get_s_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_StyleSheet::_get_s_Instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_StyleSheet*>("TMPro", "TMP_StyleSheet", "s_Instance"));
}
// Autogenerated static field setter
// Set static field: static private TMPro.TMP_StyleSheet s_Instance
void TMPro::TMP_StyleSheet::_set_s_Instance(TMPro::TMP_StyleSheet* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_StyleSheet::_set_s_Instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_StyleSheet", "s_Instance", value));
}
// Autogenerated method: TMPro.TMP_StyleSheet.get_instance
TMPro::TMP_StyleSheet* TMPro::TMP_StyleSheet::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_StyleSheet::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_StyleSheet", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_StyleSheet*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_StyleSheet.LoadDefaultStyleSheet
TMPro::TMP_StyleSheet* TMPro::TMP_StyleSheet::LoadDefaultStyleSheet() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_StyleSheet::LoadDefaultStyleSheet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_StyleSheet", "LoadDefaultStyleSheet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_StyleSheet*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_StyleSheet.GetStyle
TMPro::TMP_Style* TMPro::TMP_StyleSheet::GetStyle(int hashCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_StyleSheet::GetStyle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_StyleSheet", "GetStyle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hashCode)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_Style*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hashCode);
}
// Autogenerated method: TMPro.TMP_StyleSheet.GetStyleInternal
TMPro::TMP_Style* TMPro::TMP_StyleSheet::GetStyleInternal(int hashCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_StyleSheet::GetStyleInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetStyleInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hashCode)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_Style*, false>(this, ___internal__method, hashCode);
}
// Autogenerated method: TMPro.TMP_StyleSheet.UpdateStyleDictionaryKey
void TMPro::TMP_StyleSheet::UpdateStyleDictionaryKey(int old_key, int new_key) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_StyleSheet::UpdateStyleDictionaryKey");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStyleDictionaryKey", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(old_key), ::il2cpp_utils::ExtractType(new_key)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, old_key, new_key);
}
// Autogenerated method: TMPro.TMP_StyleSheet.UpdateStyleSheet
void TMPro::TMP_StyleSheet::UpdateStyleSheet() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_StyleSheet::UpdateStyleSheet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_StyleSheet", "UpdateStyleSheet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_StyleSheet.RefreshStyles
void TMPro::TMP_StyleSheet::RefreshStyles() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_StyleSheet::RefreshStyles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_StyleSheet", "RefreshStyles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_StyleSheet.LoadStyleDictionaryInternal
void TMPro::TMP_StyleSheet::LoadStyleDictionaryInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_StyleSheet::LoadStyleDictionaryInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadStyleDictionaryInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TMP_StyleSheet::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_StyleSheet* (*)()>(&TMP_StyleSheet::get_instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_StyleSheet*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_StyleSheet::LoadDefaultStyleSheet
// Il2CppName: LoadDefaultStyleSheet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_StyleSheet* (*)()>(&TMP_StyleSheet::LoadDefaultStyleSheet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_StyleSheet*), "LoadDefaultStyleSheet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_StyleSheet::GetStyle
// Il2CppName: GetStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Style* (*)(int)>(&TMP_StyleSheet::GetStyle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_StyleSheet*), "GetStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_StyleSheet::GetStyleInternal
// Il2CppName: GetStyleInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Style* (TMP_StyleSheet::*)(int)>(&TMP_StyleSheet::GetStyleInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_StyleSheet*), "GetStyleInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_StyleSheet::UpdateStyleDictionaryKey
// Il2CppName: UpdateStyleDictionaryKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_StyleSheet::*)(int, int)>(&TMP_StyleSheet::UpdateStyleDictionaryKey)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_StyleSheet*), "UpdateStyleDictionaryKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_StyleSheet::UpdateStyleSheet
// Il2CppName: UpdateStyleSheet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_StyleSheet::UpdateStyleSheet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_StyleSheet*), "UpdateStyleSheet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_StyleSheet::RefreshStyles
// Il2CppName: RefreshStyles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_StyleSheet::RefreshStyles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_StyleSheet*), "RefreshStyles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_StyleSheet::LoadStyleDictionaryInternal
// Il2CppName: LoadStyleDictionaryInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_StyleSheet::*)()>(&TMP_StyleSheet::LoadStyleDictionaryInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_StyleSheet*), "LoadStyleDictionaryInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_StyleSheet::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_StyleSheet::*)()>(&TMP_StyleSheet::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_StyleSheet*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_StyleSheet::*)()>(&TMP_StyleSheet::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_StyleSheet*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_SubMesh
#include "TMPro/TMP_SubMesh.hpp"
// Including type: TMPro.TMP_FontAsset
#include "TMPro/TMP_FontAsset.hpp"
// Including type: TMPro.TMP_SpriteAsset
#include "TMPro/TMP_SpriteAsset.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: TMPro.TextMeshPro
#include "TMPro/TextMeshPro.hpp"
// Including type: TMPro.MaterialReference
#include "TMPro/MaterialReference.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_SubMesh.get_fontAsset
TMPro::TMP_FontAsset* TMPro::TMP_SubMesh::get_fontAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::get_fontAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_FontAsset*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.set_fontAsset
void TMPro::TMP_SubMesh::set_fontAsset(TMPro::TMP_FontAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::set_fontAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMesh.get_spriteAsset
TMPro::TMP_SpriteAsset* TMPro::TMP_SubMesh::get_spriteAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::get_spriteAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spriteAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_SpriteAsset*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.set_spriteAsset
void TMPro::TMP_SubMesh::set_spriteAsset(TMPro::TMP_SpriteAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::set_spriteAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_spriteAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMesh.get_material
UnityEngine::Material* TMPro::TMP_SubMesh::get_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::get_material");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_material", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.set_material
void TMPro::TMP_SubMesh::set_material(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::set_material");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_material", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMesh.get_sharedMaterial
UnityEngine::Material* TMPro::TMP_SubMesh::get_sharedMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::get_sharedMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sharedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.set_sharedMaterial
void TMPro::TMP_SubMesh::set_sharedMaterial(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::set_sharedMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sharedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMesh.get_fallbackMaterial
UnityEngine::Material* TMPro::TMP_SubMesh::get_fallbackMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::get_fallbackMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fallbackMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.set_fallbackMaterial
void TMPro::TMP_SubMesh::set_fallbackMaterial(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::set_fallbackMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fallbackMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMesh.get_fallbackSourceMaterial
UnityEngine::Material* TMPro::TMP_SubMesh::get_fallbackSourceMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::get_fallbackSourceMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fallbackSourceMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.set_fallbackSourceMaterial
void TMPro::TMP_SubMesh::set_fallbackSourceMaterial(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::set_fallbackSourceMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fallbackSourceMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMesh.get_isDefaultMaterial
bool TMPro::TMP_SubMesh::get_isDefaultMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::get_isDefaultMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDefaultMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.set_isDefaultMaterial
void TMPro::TMP_SubMesh::set_isDefaultMaterial(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::set_isDefaultMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isDefaultMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMesh.get_padding
float TMPro::TMP_SubMesh::get_padding() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::get_padding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_padding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.set_padding
void TMPro::TMP_SubMesh::set_padding(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::set_padding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_padding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMesh.get_renderer
UnityEngine::Renderer* TMPro::TMP_SubMesh::get_renderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::get_renderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Renderer*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.get_meshFilter
UnityEngine::MeshFilter* TMPro::TMP_SubMesh::get_meshFilter() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::get_meshFilter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_meshFilter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::MeshFilter*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.get_mesh
UnityEngine::Mesh* TMPro::TMP_SubMesh::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::get_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.set_mesh
void TMPro::TMP_SubMesh::set_mesh(UnityEngine::Mesh* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::set_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMesh.OnEnable
void TMPro::TMP_SubMesh::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.OnDisable
void TMPro::TMP_SubMesh::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.OnDestroy
void TMPro::TMP_SubMesh::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.AddSubTextObject
TMPro::TMP_SubMesh* TMPro::TMP_SubMesh::AddSubTextObject(TMPro::TextMeshPro* textComponent, TMPro::MaterialReference materialReference) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::AddSubTextObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_SubMesh", "AddSubTextObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textComponent), ::il2cpp_utils::ExtractType(materialReference)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_SubMesh*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, textComponent, materialReference);
}
// Autogenerated method: TMPro.TMP_SubMesh.DestroySelf
void TMPro::TMP_SubMesh::DestroySelf() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::DestroySelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroySelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.GetMaterial
UnityEngine::Material* TMPro::TMP_SubMesh::GetMaterial(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::GetMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method, mat);
}
// Autogenerated method: TMPro.TMP_SubMesh.CreateMaterialInstance
UnityEngine::Material* TMPro::TMP_SubMesh::CreateMaterialInstance(UnityEngine::Material* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::CreateMaterialInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMaterialInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method, source);
}
// Autogenerated method: TMPro.TMP_SubMesh.GetSharedMaterial
UnityEngine::Material* TMPro::TMP_SubMesh::GetSharedMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::GetSharedMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSharedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.SetSharedMaterial
void TMPro::TMP_SubMesh::SetSharedMaterial(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::SetSharedMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSharedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mat);
}
// Autogenerated method: TMPro.TMP_SubMesh.GetPaddingForMaterial
float TMPro::TMP_SubMesh::GetPaddingForMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::GetPaddingForMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPaddingForMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.UpdateMeshPadding
void TMPro::TMP_SubMesh::UpdateMeshPadding(bool isExtraPadding, bool isUsingBold) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::UpdateMeshPadding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMeshPadding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isExtraPadding), ::il2cpp_utils::ExtractType(isUsingBold)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isExtraPadding, isUsingBold);
}
// Autogenerated method: TMPro.TMP_SubMesh.SetVerticesDirty
void TMPro::TMP_SubMesh::SetVerticesDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::SetVerticesDirty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVerticesDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.SetMaterialDirty
void TMPro::TMP_SubMesh::SetMaterialDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::SetMaterialDirty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMaterialDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMesh.UpdateMaterial
void TMPro::TMP_SubMesh::UpdateMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::UpdateMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TMP_SubMesh::get_fontAsset
// Il2CppName: get_fontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (TMP_SubMesh::*)()>(&TMP_SubMesh::get_fontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "get_fontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::set_fontAsset
// Il2CppName: set_fontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)(TMPro::TMP_FontAsset*)>(&TMP_SubMesh::set_fontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "set_fontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::get_spriteAsset
// Il2CppName: get_spriteAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SpriteAsset* (TMP_SubMesh::*)()>(&TMP_SubMesh::get_spriteAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "get_spriteAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::set_spriteAsset
// Il2CppName: set_spriteAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)(TMPro::TMP_SpriteAsset*)>(&TMP_SubMesh::set_spriteAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "set_spriteAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_SpriteAsset*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::get_material
// Il2CppName: get_material
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMesh::*)()>(&TMP_SubMesh::get_material)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "get_material", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::set_material
// Il2CppName: set_material
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)(UnityEngine::Material*)>(&TMP_SubMesh::set_material)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "set_material", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::get_sharedMaterial
// Il2CppName: get_sharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMesh::*)()>(&TMP_SubMesh::get_sharedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "get_sharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::set_sharedMaterial
// Il2CppName: set_sharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)(UnityEngine::Material*)>(&TMP_SubMesh::set_sharedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "set_sharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::get_fallbackMaterial
// Il2CppName: get_fallbackMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMesh::*)()>(&TMP_SubMesh::get_fallbackMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "get_fallbackMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::set_fallbackMaterial
// Il2CppName: set_fallbackMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)(UnityEngine::Material*)>(&TMP_SubMesh::set_fallbackMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "set_fallbackMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::get_fallbackSourceMaterial
// Il2CppName: get_fallbackSourceMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMesh::*)()>(&TMP_SubMesh::get_fallbackSourceMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "get_fallbackSourceMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::set_fallbackSourceMaterial
// Il2CppName: set_fallbackSourceMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)(UnityEngine::Material*)>(&TMP_SubMesh::set_fallbackSourceMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "set_fallbackSourceMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::get_isDefaultMaterial
// Il2CppName: get_isDefaultMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_SubMesh::*)()>(&TMP_SubMesh::get_isDefaultMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "get_isDefaultMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::set_isDefaultMaterial
// Il2CppName: set_isDefaultMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)(bool)>(&TMP_SubMesh::set_isDefaultMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "set_isDefaultMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::get_padding
// Il2CppName: get_padding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_SubMesh::*)()>(&TMP_SubMesh::get_padding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "get_padding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::set_padding
// Il2CppName: set_padding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)(float)>(&TMP_SubMesh::set_padding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "set_padding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::get_renderer
// Il2CppName: get_renderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Renderer* (TMP_SubMesh::*)()>(&TMP_SubMesh::get_renderer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "get_renderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::get_meshFilter
// Il2CppName: get_meshFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::MeshFilter* (TMP_SubMesh::*)()>(&TMP_SubMesh::get_meshFilter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "get_meshFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::get_mesh
// Il2CppName: get_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Mesh* (TMP_SubMesh::*)()>(&TMP_SubMesh::get_mesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "get_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::set_mesh
// Il2CppName: set_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)(UnityEngine::Mesh*)>(&TMP_SubMesh::set_mesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "set_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)()>(&TMP_SubMesh::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)()>(&TMP_SubMesh::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)()>(&TMP_SubMesh::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::AddSubTextObject
// Il2CppName: AddSubTextObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SubMesh* (*)(TMPro::TextMeshPro*, TMPro::MaterialReference)>(&TMP_SubMesh::AddSubTextObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "AddSubTextObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextMeshPro*>(), ::il2cpp_utils::ExtractIndependentType<TMPro::MaterialReference>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::DestroySelf
// Il2CppName: DestroySelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)()>(&TMP_SubMesh::DestroySelf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "DestroySelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::GetMaterial
// Il2CppName: GetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMesh::*)(UnityEngine::Material*)>(&TMP_SubMesh::GetMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "GetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::CreateMaterialInstance
// Il2CppName: CreateMaterialInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMesh::*)(UnityEngine::Material*)>(&TMP_SubMesh::CreateMaterialInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "CreateMaterialInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::GetSharedMaterial
// Il2CppName: GetSharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMesh::*)()>(&TMP_SubMesh::GetSharedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "GetSharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::SetSharedMaterial
// Il2CppName: SetSharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)(UnityEngine::Material*)>(&TMP_SubMesh::SetSharedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "SetSharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::GetPaddingForMaterial
// Il2CppName: GetPaddingForMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_SubMesh::*)()>(&TMP_SubMesh::GetPaddingForMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "GetPaddingForMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::UpdateMeshPadding
// Il2CppName: UpdateMeshPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)(bool, bool)>(&TMP_SubMesh::UpdateMeshPadding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "UpdateMeshPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::SetVerticesDirty
// Il2CppName: SetVerticesDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)()>(&TMP_SubMesh::SetVerticesDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "SetVerticesDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::SetMaterialDirty
// Il2CppName: SetMaterialDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)()>(&TMP_SubMesh::SetMaterialDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "SetMaterialDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::UpdateMaterial
// Il2CppName: UpdateMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)()>(&TMP_SubMesh::UpdateMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), "UpdateMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMesh::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)()>(&TMP_SubMesh::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMesh::*)()>(&TMP_SubMesh::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMesh*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_SubMeshUI
#include "TMPro/TMP_SubMeshUI.hpp"
// Including type: TMPro.TMP_FontAsset
#include "TMPro/TMP_FontAsset.hpp"
// Including type: TMPro.TMP_SpriteAsset
#include "TMPro/TMP_SpriteAsset.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.CanvasRenderer
#include "UnityEngine/CanvasRenderer.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: TMPro.MaterialReference
#include "TMPro/MaterialReference.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.UI.CanvasUpdate
#include "UnityEngine/UI/CanvasUpdate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_SubMeshUI.get_fontAsset
TMPro::TMP_FontAsset* TMPro::TMP_SubMeshUI::get_fontAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::get_fontAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_FontAsset*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.set_fontAsset
void TMPro::TMP_SubMeshUI::set_fontAsset(TMPro::TMP_FontAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::set_fontAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.get_spriteAsset
TMPro::TMP_SpriteAsset* TMPro::TMP_SubMeshUI::get_spriteAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::get_spriteAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spriteAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_SpriteAsset*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.set_spriteAsset
void TMPro::TMP_SubMeshUI::set_spriteAsset(TMPro::TMP_SpriteAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::set_spriteAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_spriteAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.get_sharedMaterial
UnityEngine::Material* TMPro::TMP_SubMeshUI::get_sharedMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::get_sharedMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sharedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.set_sharedMaterial
void TMPro::TMP_SubMeshUI::set_sharedMaterial(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::set_sharedMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sharedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.get_fallbackMaterial
UnityEngine::Material* TMPro::TMP_SubMeshUI::get_fallbackMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::get_fallbackMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fallbackMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.set_fallbackMaterial
void TMPro::TMP_SubMeshUI::set_fallbackMaterial(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::set_fallbackMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fallbackMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.get_fallbackSourceMaterial
UnityEngine::Material* TMPro::TMP_SubMeshUI::get_fallbackSourceMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::get_fallbackSourceMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fallbackSourceMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.set_fallbackSourceMaterial
void TMPro::TMP_SubMeshUI::set_fallbackSourceMaterial(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::set_fallbackSourceMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fallbackSourceMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.get_isDefaultMaterial
bool TMPro::TMP_SubMeshUI::get_isDefaultMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::get_isDefaultMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDefaultMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.set_isDefaultMaterial
void TMPro::TMP_SubMeshUI::set_isDefaultMaterial(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::set_isDefaultMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isDefaultMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.get_padding
float TMPro::TMP_SubMeshUI::get_padding() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::get_padding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_padding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.set_padding
void TMPro::TMP_SubMeshUI::set_padding(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::set_padding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_padding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.get_mesh
UnityEngine::Mesh* TMPro::TMP_SubMeshUI::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::get_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.set_mesh
void TMPro::TMP_SubMeshUI::set_mesh(UnityEngine::Mesh* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::set_mesh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.AddSubTextObject
TMPro::TMP_SubMeshUI* TMPro::TMP_SubMeshUI::AddSubTextObject(TMPro::TextMeshProUGUI* textComponent, TMPro::MaterialReference materialReference) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::AddSubTextObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_SubMeshUI", "AddSubTextObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textComponent), ::il2cpp_utils::ExtractType(materialReference)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_SubMeshUI*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, textComponent, materialReference);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.GetPaddingForMaterial
float TMPro::TMP_SubMeshUI::GetPaddingForMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::GetPaddingForMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPaddingForMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.GetPaddingForMaterial
float TMPro::TMP_SubMeshUI::GetPaddingForMaterial(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::GetPaddingForMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPaddingForMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, mat);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.UpdateMeshPadding
void TMPro::TMP_SubMeshUI::UpdateMeshPadding(bool isExtraPadding, bool isUsingBold) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::UpdateMeshPadding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMeshPadding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isExtraPadding), ::il2cpp_utils::ExtractType(isUsingBold)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isExtraPadding, isUsingBold);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.SetPivotDirty
void TMPro::TMP_SubMeshUI::SetPivotDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::SetPivotDirty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPivotDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.RefreshMaterial
void TMPro::TMP_SubMeshUI::RefreshMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::RefreshMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.GetMaterial
UnityEngine::Material* TMPro::TMP_SubMeshUI::GetMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::GetMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.GetMaterial
UnityEngine::Material* TMPro::TMP_SubMeshUI::GetMaterial(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::GetMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method, mat);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.CreateMaterialInstance
UnityEngine::Material* TMPro::TMP_SubMeshUI::CreateMaterialInstance(UnityEngine::Material* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::CreateMaterialInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMaterialInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method, source);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.GetSharedMaterial
UnityEngine::Material* TMPro::TMP_SubMeshUI::GetSharedMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::GetSharedMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSharedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.SetSharedMaterial
void TMPro::TMP_SubMeshUI::SetSharedMaterial(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::SetSharedMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSharedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mat);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.get_mainTexture
UnityEngine::Texture* TMPro::TMP_SubMeshUI::get_mainTexture() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::get_mainTexture");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mainTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.get_material
UnityEngine::Material* TMPro::TMP_SubMeshUI::get_material() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::get_material");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_material", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.set_material
void TMPro::TMP_SubMeshUI::set_material(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::set_material");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_material", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.get_materialForRendering
UnityEngine::Material* TMPro::TMP_SubMeshUI::get_materialForRendering() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::get_materialForRendering");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_materialForRendering", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.get_canvasRenderer
UnityEngine::CanvasRenderer* TMPro::TMP_SubMeshUI::get_canvasRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::get_canvasRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_canvasRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::CanvasRenderer*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.OnEnable
void TMPro::TMP_SubMeshUI::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.OnDisable
void TMPro::TMP_SubMeshUI::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::OnDisable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.OnDestroy
void TMPro::TMP_SubMeshUI::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.OnTransformParentChanged
void TMPro::TMP_SubMeshUI::OnTransformParentChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::OnTransformParentChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTransformParentChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.GetModifiedMaterial
UnityEngine::Material* TMPro::TMP_SubMeshUI::GetModifiedMaterial(UnityEngine::Material* baseMaterial) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::GetModifiedMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetModifiedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(baseMaterial)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method, baseMaterial);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.SetAllDirty
void TMPro::TMP_SubMeshUI::SetAllDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::SetAllDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAllDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.SetVerticesDirty
void TMPro::TMP_SubMeshUI::SetVerticesDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::SetVerticesDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVerticesDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.SetLayoutDirty
void TMPro::TMP_SubMeshUI::SetLayoutDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::SetLayoutDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLayoutDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.SetMaterialDirty
void TMPro::TMP_SubMeshUI::SetMaterialDirty() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::SetMaterialDirty");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMaterialDirty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.Cull
void TMPro::TMP_SubMeshUI::Cull(UnityEngine::Rect clipRect, bool validRect) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::Cull");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(clipRect), ::il2cpp_utils::ExtractType(validRect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clipRect, validRect);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.UpdateGeometry
void TMPro::TMP_SubMeshUI::UpdateGeometry() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::UpdateGeometry");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateGeometry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.Rebuild
void TMPro::TMP_SubMeshUI::Rebuild(UnityEngine::UI::CanvasUpdate update) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::Rebuild");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(update)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, update);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.UpdateMaterial
void TMPro::TMP_SubMeshUI::UpdateMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::UpdateMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.RecalculateClipping
void TMPro::TMP_SubMeshUI::RecalculateClipping() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::RecalculateClipping");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecalculateClipping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_SubMeshUI.RecalculateMasking
void TMPro::TMP_SubMeshUI::RecalculateMasking() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMeshUI::RecalculateMasking");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecalculateMasking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TMP_SubMeshUI::get_fontAsset
// Il2CppName: get_fontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::get_fontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "get_fontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::set_fontAsset
// Il2CppName: set_fontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)(TMPro::TMP_FontAsset*)>(&TMP_SubMeshUI::set_fontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "set_fontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::get_spriteAsset
// Il2CppName: get_spriteAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SpriteAsset* (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::get_spriteAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "get_spriteAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::set_spriteAsset
// Il2CppName: set_spriteAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)(TMPro::TMP_SpriteAsset*)>(&TMP_SubMeshUI::set_spriteAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "set_spriteAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_SpriteAsset*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::get_sharedMaterial
// Il2CppName: get_sharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::get_sharedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "get_sharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::set_sharedMaterial
// Il2CppName: set_sharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)(UnityEngine::Material*)>(&TMP_SubMeshUI::set_sharedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "set_sharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::get_fallbackMaterial
// Il2CppName: get_fallbackMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::get_fallbackMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "get_fallbackMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::set_fallbackMaterial
// Il2CppName: set_fallbackMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)(UnityEngine::Material*)>(&TMP_SubMeshUI::set_fallbackMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "set_fallbackMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::get_fallbackSourceMaterial
// Il2CppName: get_fallbackSourceMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::get_fallbackSourceMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "get_fallbackSourceMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::set_fallbackSourceMaterial
// Il2CppName: set_fallbackSourceMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)(UnityEngine::Material*)>(&TMP_SubMeshUI::set_fallbackSourceMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "set_fallbackSourceMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::get_isDefaultMaterial
// Il2CppName: get_isDefaultMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::get_isDefaultMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "get_isDefaultMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::set_isDefaultMaterial
// Il2CppName: set_isDefaultMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)(bool)>(&TMP_SubMeshUI::set_isDefaultMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "set_isDefaultMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::get_padding
// Il2CppName: get_padding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::get_padding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "get_padding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::set_padding
// Il2CppName: set_padding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)(float)>(&TMP_SubMeshUI::set_padding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "set_padding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::get_mesh
// Il2CppName: get_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Mesh* (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::get_mesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "get_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::set_mesh
// Il2CppName: set_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)(UnityEngine::Mesh*)>(&TMP_SubMeshUI::set_mesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "set_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::AddSubTextObject
// Il2CppName: AddSubTextObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SubMeshUI* (*)(TMPro::TextMeshProUGUI*, TMPro::MaterialReference)>(&TMP_SubMeshUI::AddSubTextObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "AddSubTextObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextMeshProUGUI*>(), ::il2cpp_utils::ExtractIndependentType<TMPro::MaterialReference>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::GetPaddingForMaterial
// Il2CppName: GetPaddingForMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::GetPaddingForMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "GetPaddingForMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::GetPaddingForMaterial
// Il2CppName: GetPaddingForMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_SubMeshUI::*)(UnityEngine::Material*)>(&TMP_SubMeshUI::GetPaddingForMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "GetPaddingForMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::UpdateMeshPadding
// Il2CppName: UpdateMeshPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)(bool, bool)>(&TMP_SubMeshUI::UpdateMeshPadding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "UpdateMeshPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::SetPivotDirty
// Il2CppName: SetPivotDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::SetPivotDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "SetPivotDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::RefreshMaterial
// Il2CppName: RefreshMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::RefreshMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "RefreshMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::GetMaterial
// Il2CppName: GetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::GetMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "GetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::GetMaterial
// Il2CppName: GetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMeshUI::*)(UnityEngine::Material*)>(&TMP_SubMeshUI::GetMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "GetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::CreateMaterialInstance
// Il2CppName: CreateMaterialInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMeshUI::*)(UnityEngine::Material*)>(&TMP_SubMeshUI::CreateMaterialInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "CreateMaterialInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::GetSharedMaterial
// Il2CppName: GetSharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::GetSharedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "GetSharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::SetSharedMaterial
// Il2CppName: SetSharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)(UnityEngine::Material*)>(&TMP_SubMeshUI::SetSharedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "SetSharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::get_mainTexture
// Il2CppName: get_mainTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture* (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::get_mainTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "get_mainTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::get_material
// Il2CppName: get_material
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::get_material)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "get_material", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::set_material
// Il2CppName: set_material
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)(UnityEngine::Material*)>(&TMP_SubMeshUI::set_material)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "set_material", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::get_materialForRendering
// Il2CppName: get_materialForRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::get_materialForRendering)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "get_materialForRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::get_canvasRenderer
// Il2CppName: get_canvasRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::CanvasRenderer* (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::get_canvasRenderer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "get_canvasRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::OnTransformParentChanged
// Il2CppName: OnTransformParentChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::OnTransformParentChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "OnTransformParentChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::GetModifiedMaterial
// Il2CppName: GetModifiedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_SubMeshUI::*)(UnityEngine::Material*)>(&TMP_SubMeshUI::GetModifiedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "GetModifiedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::SetAllDirty
// Il2CppName: SetAllDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::SetAllDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "SetAllDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::SetVerticesDirty
// Il2CppName: SetVerticesDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::SetVerticesDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "SetVerticesDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::SetLayoutDirty
// Il2CppName: SetLayoutDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::SetLayoutDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "SetLayoutDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::SetMaterialDirty
// Il2CppName: SetMaterialDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::SetMaterialDirty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "SetMaterialDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::Cull
// Il2CppName: Cull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)(UnityEngine::Rect, bool)>(&TMP_SubMeshUI::Cull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "Cull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Rect>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::UpdateGeometry
// Il2CppName: UpdateGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::UpdateGeometry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "UpdateGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::Rebuild
// Il2CppName: Rebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)(UnityEngine::UI::CanvasUpdate)>(&TMP_SubMeshUI::Rebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::CanvasUpdate>()});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::UpdateMaterial
// Il2CppName: UpdateMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::UpdateMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "UpdateMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::RecalculateClipping
// Il2CppName: RecalculateClipping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::RecalculateClipping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "RecalculateClipping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::RecalculateMasking
// Il2CppName: RecalculateMasking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::RecalculateMasking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), "RecalculateMasking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_SubMeshUI::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_SubMeshUI::*)()>(&TMP_SubMeshUI::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_SubMeshUI*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.ITextElement
#include "TMPro/ITextElement.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.UI.CanvasUpdate
#include "UnityEngine/UI/CanvasUpdate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.ITextElement.get_sharedMaterial
UnityEngine::Material* TMPro::ITextElement::get_sharedMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ITextElement::get_sharedMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sharedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.ITextElement.Rebuild
void TMPro::ITextElement::Rebuild(UnityEngine::UI::CanvasUpdate update) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ITextElement::Rebuild");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Rebuild", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(update)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, update);
}
// Autogenerated method: TMPro.ITextElement.GetInstanceID
int TMPro::ITextElement::GetInstanceID() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::ITextElement::GetInstanceID");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ITextElement::get_sharedMaterial
// Il2CppName: get_sharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (ITextElement::*)()>(&ITextElement::get_sharedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITextElement*), "get_sharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ITextElement::Rebuild
// Il2CppName: Rebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ITextElement::*)(UnityEngine::UI::CanvasUpdate)>(&ITextElement::Rebuild)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITextElement*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::UI::CanvasUpdate>()});
  }
};
// Writing MetadataGetter for method: ITextElement::GetInstanceID
// Il2CppName: GetInstanceID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ITextElement::*)()>(&ITextElement::GetInstanceID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ITextElement*), "GetInstanceID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TextAlignmentOptions
#include "TMPro/TextAlignmentOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions TopLeft
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_TopLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_TopLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "TopLeft"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions TopLeft
void TMPro::TextAlignmentOptions::_set_TopLeft(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_TopLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "TopLeft", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions Top
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_Top() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_Top");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "Top"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions Top
void TMPro::TextAlignmentOptions::_set_Top(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_Top");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "Top", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions TopRight
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_TopRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_TopRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "TopRight"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions TopRight
void TMPro::TextAlignmentOptions::_set_TopRight(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_TopRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "TopRight", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions TopJustified
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_TopJustified() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_TopJustified");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "TopJustified"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions TopJustified
void TMPro::TextAlignmentOptions::_set_TopJustified(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_TopJustified");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "TopJustified", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions TopFlush
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_TopFlush() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_TopFlush");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "TopFlush"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions TopFlush
void TMPro::TextAlignmentOptions::_set_TopFlush(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_TopFlush");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "TopFlush", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions TopGeoAligned
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_TopGeoAligned() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_TopGeoAligned");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "TopGeoAligned"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions TopGeoAligned
void TMPro::TextAlignmentOptions::_set_TopGeoAligned(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_TopGeoAligned");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "TopGeoAligned", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions Left
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "Left"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions Left
void TMPro::TextAlignmentOptions::_set_Left(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions Center
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_Center() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_Center");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "Center"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions Center
void TMPro::TextAlignmentOptions::_set_Center(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_Center");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "Center", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions Right
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "Right"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions Right
void TMPro::TextAlignmentOptions::_set_Right(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions Justified
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_Justified() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_Justified");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "Justified"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions Justified
void TMPro::TextAlignmentOptions::_set_Justified(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_Justified");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "Justified", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions Flush
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_Flush");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "Flush"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions Flush
void TMPro::TextAlignmentOptions::_set_Flush(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_Flush");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "Flush", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions CenterGeoAligned
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_CenterGeoAligned() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_CenterGeoAligned");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "CenterGeoAligned"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions CenterGeoAligned
void TMPro::TextAlignmentOptions::_set_CenterGeoAligned(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_CenterGeoAligned");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "CenterGeoAligned", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions BottomLeft
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_BottomLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_BottomLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "BottomLeft"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions BottomLeft
void TMPro::TextAlignmentOptions::_set_BottomLeft(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_BottomLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "BottomLeft", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions Bottom
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_Bottom() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_Bottom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "Bottom"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions Bottom
void TMPro::TextAlignmentOptions::_set_Bottom(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_Bottom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "Bottom", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions BottomRight
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_BottomRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_BottomRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "BottomRight"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions BottomRight
void TMPro::TextAlignmentOptions::_set_BottomRight(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_BottomRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "BottomRight", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions BottomJustified
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_BottomJustified() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_BottomJustified");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "BottomJustified"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions BottomJustified
void TMPro::TextAlignmentOptions::_set_BottomJustified(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_BottomJustified");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "BottomJustified", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions BottomFlush
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_BottomFlush() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_BottomFlush");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "BottomFlush"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions BottomFlush
void TMPro::TextAlignmentOptions::_set_BottomFlush(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_BottomFlush");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "BottomFlush", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions BottomGeoAligned
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_BottomGeoAligned() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_BottomGeoAligned");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "BottomGeoAligned"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions BottomGeoAligned
void TMPro::TextAlignmentOptions::_set_BottomGeoAligned(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_BottomGeoAligned");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "BottomGeoAligned", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions BaselineLeft
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_BaselineLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_BaselineLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "BaselineLeft"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions BaselineLeft
void TMPro::TextAlignmentOptions::_set_BaselineLeft(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_BaselineLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "BaselineLeft", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions Baseline
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_Baseline() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_Baseline");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "Baseline"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions Baseline
void TMPro::TextAlignmentOptions::_set_Baseline(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_Baseline");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "Baseline", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions BaselineRight
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_BaselineRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_BaselineRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "BaselineRight"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions BaselineRight
void TMPro::TextAlignmentOptions::_set_BaselineRight(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_BaselineRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "BaselineRight", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions BaselineJustified
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_BaselineJustified() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_BaselineJustified");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "BaselineJustified"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions BaselineJustified
void TMPro::TextAlignmentOptions::_set_BaselineJustified(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_BaselineJustified");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "BaselineJustified", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions BaselineFlush
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_BaselineFlush() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_BaselineFlush");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "BaselineFlush"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions BaselineFlush
void TMPro::TextAlignmentOptions::_set_BaselineFlush(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_BaselineFlush");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "BaselineFlush", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions BaselineGeoAligned
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_BaselineGeoAligned() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_BaselineGeoAligned");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "BaselineGeoAligned"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions BaselineGeoAligned
void TMPro::TextAlignmentOptions::_set_BaselineGeoAligned(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_BaselineGeoAligned");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "BaselineGeoAligned", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions MidlineLeft
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_MidlineLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_MidlineLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "MidlineLeft"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions MidlineLeft
void TMPro::TextAlignmentOptions::_set_MidlineLeft(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_MidlineLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "MidlineLeft", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions Midline
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_Midline() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_Midline");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "Midline"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions Midline
void TMPro::TextAlignmentOptions::_set_Midline(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_Midline");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "Midline", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions MidlineRight
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_MidlineRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_MidlineRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "MidlineRight"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions MidlineRight
void TMPro::TextAlignmentOptions::_set_MidlineRight(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_MidlineRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "MidlineRight", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions MidlineJustified
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_MidlineJustified() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_MidlineJustified");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "MidlineJustified"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions MidlineJustified
void TMPro::TextAlignmentOptions::_set_MidlineJustified(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_MidlineJustified");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "MidlineJustified", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions MidlineFlush
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_MidlineFlush() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_MidlineFlush");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "MidlineFlush"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions MidlineFlush
void TMPro::TextAlignmentOptions::_set_MidlineFlush(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_MidlineFlush");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "MidlineFlush", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions MidlineGeoAligned
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_MidlineGeoAligned() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_MidlineGeoAligned");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "MidlineGeoAligned"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions MidlineGeoAligned
void TMPro::TextAlignmentOptions::_set_MidlineGeoAligned(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_MidlineGeoAligned");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "MidlineGeoAligned", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions CaplineLeft
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_CaplineLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_CaplineLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "CaplineLeft"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions CaplineLeft
void TMPro::TextAlignmentOptions::_set_CaplineLeft(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_CaplineLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "CaplineLeft", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions Capline
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_Capline() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_Capline");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "Capline"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions Capline
void TMPro::TextAlignmentOptions::_set_Capline(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_Capline");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "Capline", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions CaplineRight
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_CaplineRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_CaplineRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "CaplineRight"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions CaplineRight
void TMPro::TextAlignmentOptions::_set_CaplineRight(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_CaplineRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "CaplineRight", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions CaplineJustified
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_CaplineJustified() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_CaplineJustified");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "CaplineJustified"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions CaplineJustified
void TMPro::TextAlignmentOptions::_set_CaplineJustified(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_CaplineJustified");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "CaplineJustified", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions CaplineFlush
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_CaplineFlush() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_CaplineFlush");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "CaplineFlush"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions CaplineFlush
void TMPro::TextAlignmentOptions::_set_CaplineFlush(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_CaplineFlush");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "CaplineFlush", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextAlignmentOptions CaplineGeoAligned
TMPro::TextAlignmentOptions TMPro::TextAlignmentOptions::_get_CaplineGeoAligned() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_get_CaplineGeoAligned");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextAlignmentOptions>("TMPro", "TextAlignmentOptions", "CaplineGeoAligned"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextAlignmentOptions CaplineGeoAligned
void TMPro::TextAlignmentOptions::_set_CaplineGeoAligned(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextAlignmentOptions::_set_CaplineGeoAligned");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextAlignmentOptions", "CaplineGeoAligned", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro._HorizontalAlignmentOptions
#include "TMPro/_HorizontalAlignmentOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro._HorizontalAlignmentOptions Left
TMPro::_HorizontalAlignmentOptions TMPro::_HorizontalAlignmentOptions::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_HorizontalAlignmentOptions::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::_HorizontalAlignmentOptions>("TMPro", "_HorizontalAlignmentOptions", "Left"));
}
// Autogenerated static field setter
// Set static field: static public TMPro._HorizontalAlignmentOptions Left
void TMPro::_HorizontalAlignmentOptions::_set_Left(TMPro::_HorizontalAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_HorizontalAlignmentOptions::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "_HorizontalAlignmentOptions", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro._HorizontalAlignmentOptions Center
TMPro::_HorizontalAlignmentOptions TMPro::_HorizontalAlignmentOptions::_get_Center() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_HorizontalAlignmentOptions::_get_Center");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::_HorizontalAlignmentOptions>("TMPro", "_HorizontalAlignmentOptions", "Center"));
}
// Autogenerated static field setter
// Set static field: static public TMPro._HorizontalAlignmentOptions Center
void TMPro::_HorizontalAlignmentOptions::_set_Center(TMPro::_HorizontalAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_HorizontalAlignmentOptions::_set_Center");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "_HorizontalAlignmentOptions", "Center", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro._HorizontalAlignmentOptions Right
TMPro::_HorizontalAlignmentOptions TMPro::_HorizontalAlignmentOptions::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_HorizontalAlignmentOptions::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::_HorizontalAlignmentOptions>("TMPro", "_HorizontalAlignmentOptions", "Right"));
}
// Autogenerated static field setter
// Set static field: static public TMPro._HorizontalAlignmentOptions Right
void TMPro::_HorizontalAlignmentOptions::_set_Right(TMPro::_HorizontalAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_HorizontalAlignmentOptions::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "_HorizontalAlignmentOptions", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro._HorizontalAlignmentOptions Justified
TMPro::_HorizontalAlignmentOptions TMPro::_HorizontalAlignmentOptions::_get_Justified() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_HorizontalAlignmentOptions::_get_Justified");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::_HorizontalAlignmentOptions>("TMPro", "_HorizontalAlignmentOptions", "Justified"));
}
// Autogenerated static field setter
// Set static field: static public TMPro._HorizontalAlignmentOptions Justified
void TMPro::_HorizontalAlignmentOptions::_set_Justified(TMPro::_HorizontalAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_HorizontalAlignmentOptions::_set_Justified");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "_HorizontalAlignmentOptions", "Justified", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro._HorizontalAlignmentOptions Flush
TMPro::_HorizontalAlignmentOptions TMPro::_HorizontalAlignmentOptions::_get_Flush() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_HorizontalAlignmentOptions::_get_Flush");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::_HorizontalAlignmentOptions>("TMPro", "_HorizontalAlignmentOptions", "Flush"));
}
// Autogenerated static field setter
// Set static field: static public TMPro._HorizontalAlignmentOptions Flush
void TMPro::_HorizontalAlignmentOptions::_set_Flush(TMPro::_HorizontalAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_HorizontalAlignmentOptions::_set_Flush");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "_HorizontalAlignmentOptions", "Flush", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro._HorizontalAlignmentOptions Geometry
TMPro::_HorizontalAlignmentOptions TMPro::_HorizontalAlignmentOptions::_get_Geometry() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_HorizontalAlignmentOptions::_get_Geometry");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::_HorizontalAlignmentOptions>("TMPro", "_HorizontalAlignmentOptions", "Geometry"));
}
// Autogenerated static field setter
// Set static field: static public TMPro._HorizontalAlignmentOptions Geometry
void TMPro::_HorizontalAlignmentOptions::_set_Geometry(TMPro::_HorizontalAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_HorizontalAlignmentOptions::_set_Geometry");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "_HorizontalAlignmentOptions", "Geometry", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro._VerticalAlignmentOptions
#include "TMPro/_VerticalAlignmentOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro._VerticalAlignmentOptions Top
TMPro::_VerticalAlignmentOptions TMPro::_VerticalAlignmentOptions::_get_Top() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_VerticalAlignmentOptions::_get_Top");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::_VerticalAlignmentOptions>("TMPro", "_VerticalAlignmentOptions", "Top"));
}
// Autogenerated static field setter
// Set static field: static public TMPro._VerticalAlignmentOptions Top
void TMPro::_VerticalAlignmentOptions::_set_Top(TMPro::_VerticalAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_VerticalAlignmentOptions::_set_Top");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "_VerticalAlignmentOptions", "Top", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro._VerticalAlignmentOptions Middle
TMPro::_VerticalAlignmentOptions TMPro::_VerticalAlignmentOptions::_get_Middle() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_VerticalAlignmentOptions::_get_Middle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::_VerticalAlignmentOptions>("TMPro", "_VerticalAlignmentOptions", "Middle"));
}
// Autogenerated static field setter
// Set static field: static public TMPro._VerticalAlignmentOptions Middle
void TMPro::_VerticalAlignmentOptions::_set_Middle(TMPro::_VerticalAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_VerticalAlignmentOptions::_set_Middle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "_VerticalAlignmentOptions", "Middle", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro._VerticalAlignmentOptions Bottom
TMPro::_VerticalAlignmentOptions TMPro::_VerticalAlignmentOptions::_get_Bottom() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_VerticalAlignmentOptions::_get_Bottom");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::_VerticalAlignmentOptions>("TMPro", "_VerticalAlignmentOptions", "Bottom"));
}
// Autogenerated static field setter
// Set static field: static public TMPro._VerticalAlignmentOptions Bottom
void TMPro::_VerticalAlignmentOptions::_set_Bottom(TMPro::_VerticalAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_VerticalAlignmentOptions::_set_Bottom");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "_VerticalAlignmentOptions", "Bottom", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro._VerticalAlignmentOptions Baseline
TMPro::_VerticalAlignmentOptions TMPro::_VerticalAlignmentOptions::_get_Baseline() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_VerticalAlignmentOptions::_get_Baseline");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::_VerticalAlignmentOptions>("TMPro", "_VerticalAlignmentOptions", "Baseline"));
}
// Autogenerated static field setter
// Set static field: static public TMPro._VerticalAlignmentOptions Baseline
void TMPro::_VerticalAlignmentOptions::_set_Baseline(TMPro::_VerticalAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_VerticalAlignmentOptions::_set_Baseline");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "_VerticalAlignmentOptions", "Baseline", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro._VerticalAlignmentOptions Geometry
TMPro::_VerticalAlignmentOptions TMPro::_VerticalAlignmentOptions::_get_Geometry() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_VerticalAlignmentOptions::_get_Geometry");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::_VerticalAlignmentOptions>("TMPro", "_VerticalAlignmentOptions", "Geometry"));
}
// Autogenerated static field setter
// Set static field: static public TMPro._VerticalAlignmentOptions Geometry
void TMPro::_VerticalAlignmentOptions::_set_Geometry(TMPro::_VerticalAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_VerticalAlignmentOptions::_set_Geometry");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "_VerticalAlignmentOptions", "Geometry", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro._VerticalAlignmentOptions Capline
TMPro::_VerticalAlignmentOptions TMPro::_VerticalAlignmentOptions::_get_Capline() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_VerticalAlignmentOptions::_get_Capline");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::_VerticalAlignmentOptions>("TMPro", "_VerticalAlignmentOptions", "Capline"));
}
// Autogenerated static field setter
// Set static field: static public TMPro._VerticalAlignmentOptions Capline
void TMPro::_VerticalAlignmentOptions::_set_Capline(TMPro::_VerticalAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::_VerticalAlignmentOptions::_set_Capline");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "_VerticalAlignmentOptions", "Capline", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TextRenderFlags
#include "TMPro/TextRenderFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TextRenderFlags DontRender
TMPro::TextRenderFlags TMPro::TextRenderFlags::_get_DontRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextRenderFlags::_get_DontRender");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextRenderFlags>("TMPro", "TextRenderFlags", "DontRender"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextRenderFlags DontRender
void TMPro::TextRenderFlags::_set_DontRender(TMPro::TextRenderFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextRenderFlags::_set_DontRender");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextRenderFlags", "DontRender", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextRenderFlags Render
TMPro::TextRenderFlags TMPro::TextRenderFlags::_get_Render() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextRenderFlags::_get_Render");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextRenderFlags>("TMPro", "TextRenderFlags", "Render"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextRenderFlags Render
void TMPro::TextRenderFlags::_set_Render(TMPro::TextRenderFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextRenderFlags::_set_Render");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextRenderFlags", "Render", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_TextElementType
#include "TMPro/TMP_TextElementType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_TextElementType Character
TMPro::TMP_TextElementType TMPro::TMP_TextElementType::_get_Character() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextElementType::_get_Character");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_TextElementType>("TMPro", "TMP_TextElementType", "Character"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_TextElementType Character
void TMPro::TMP_TextElementType::_set_Character(TMPro::TMP_TextElementType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextElementType::_set_Character");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextElementType", "Character", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_TextElementType Sprite
TMPro::TMP_TextElementType TMPro::TMP_TextElementType::_get_Sprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextElementType::_get_Sprite");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_TextElementType>("TMPro", "TMP_TextElementType", "Sprite"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_TextElementType Sprite
void TMPro::TMP_TextElementType::_set_Sprite(TMPro::TMP_TextElementType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextElementType::_set_Sprite");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextElementType", "Sprite", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.MaskingTypes
#include "TMPro/MaskingTypes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.MaskingTypes MaskOff
TMPro::MaskingTypes TMPro::MaskingTypes::_get_MaskOff() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::MaskingTypes::_get_MaskOff");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::MaskingTypes>("TMPro", "MaskingTypes", "MaskOff"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.MaskingTypes MaskOff
void TMPro::MaskingTypes::_set_MaskOff(TMPro::MaskingTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::MaskingTypes::_set_MaskOff");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "MaskingTypes", "MaskOff", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.MaskingTypes MaskHard
TMPro::MaskingTypes TMPro::MaskingTypes::_get_MaskHard() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::MaskingTypes::_get_MaskHard");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::MaskingTypes>("TMPro", "MaskingTypes", "MaskHard"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.MaskingTypes MaskHard
void TMPro::MaskingTypes::_set_MaskHard(TMPro::MaskingTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::MaskingTypes::_set_MaskHard");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "MaskingTypes", "MaskHard", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.MaskingTypes MaskSoft
TMPro::MaskingTypes TMPro::MaskingTypes::_get_MaskSoft() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::MaskingTypes::_get_MaskSoft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::MaskingTypes>("TMPro", "MaskingTypes", "MaskSoft"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.MaskingTypes MaskSoft
void TMPro::MaskingTypes::_set_MaskSoft(TMPro::MaskingTypes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::MaskingTypes::_set_MaskSoft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "MaskingTypes", "MaskSoft", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TextOverflowModes
#include "TMPro/TextOverflowModes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TextOverflowModes Overflow
TMPro::TextOverflowModes TMPro::TextOverflowModes::_get_Overflow() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextOverflowModes::_get_Overflow");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextOverflowModes>("TMPro", "TextOverflowModes", "Overflow"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextOverflowModes Overflow
void TMPro::TextOverflowModes::_set_Overflow(TMPro::TextOverflowModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextOverflowModes::_set_Overflow");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextOverflowModes", "Overflow", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextOverflowModes Ellipsis
TMPro::TextOverflowModes TMPro::TextOverflowModes::_get_Ellipsis() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextOverflowModes::_get_Ellipsis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextOverflowModes>("TMPro", "TextOverflowModes", "Ellipsis"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextOverflowModes Ellipsis
void TMPro::TextOverflowModes::_set_Ellipsis(TMPro::TextOverflowModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextOverflowModes::_set_Ellipsis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextOverflowModes", "Ellipsis", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextOverflowModes Masking
TMPro::TextOverflowModes TMPro::TextOverflowModes::_get_Masking() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextOverflowModes::_get_Masking");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextOverflowModes>("TMPro", "TextOverflowModes", "Masking"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextOverflowModes Masking
void TMPro::TextOverflowModes::_set_Masking(TMPro::TextOverflowModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextOverflowModes::_set_Masking");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextOverflowModes", "Masking", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextOverflowModes Truncate
TMPro::TextOverflowModes TMPro::TextOverflowModes::_get_Truncate() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextOverflowModes::_get_Truncate");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextOverflowModes>("TMPro", "TextOverflowModes", "Truncate"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextOverflowModes Truncate
void TMPro::TextOverflowModes::_set_Truncate(TMPro::TextOverflowModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextOverflowModes::_set_Truncate");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextOverflowModes", "Truncate", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextOverflowModes ScrollRect
TMPro::TextOverflowModes TMPro::TextOverflowModes::_get_ScrollRect() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextOverflowModes::_get_ScrollRect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextOverflowModes>("TMPro", "TextOverflowModes", "ScrollRect"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextOverflowModes ScrollRect
void TMPro::TextOverflowModes::_set_ScrollRect(TMPro::TextOverflowModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextOverflowModes::_set_ScrollRect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextOverflowModes", "ScrollRect", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextOverflowModes Page
TMPro::TextOverflowModes TMPro::TextOverflowModes::_get_Page() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextOverflowModes::_get_Page");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextOverflowModes>("TMPro", "TextOverflowModes", "Page"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextOverflowModes Page
void TMPro::TextOverflowModes::_set_Page(TMPro::TextOverflowModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextOverflowModes::_set_Page");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextOverflowModes", "Page", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextOverflowModes Linked
TMPro::TextOverflowModes TMPro::TextOverflowModes::_get_Linked() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextOverflowModes::_get_Linked");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextOverflowModes>("TMPro", "TextOverflowModes", "Linked"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextOverflowModes Linked
void TMPro::TextOverflowModes::_set_Linked(TMPro::TextOverflowModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextOverflowModes::_set_Linked");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextOverflowModes", "Linked", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.MaskingOffsetMode
#include "TMPro/MaskingOffsetMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.MaskingOffsetMode Percentage
TMPro::MaskingOffsetMode TMPro::MaskingOffsetMode::_get_Percentage() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::MaskingOffsetMode::_get_Percentage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::MaskingOffsetMode>("TMPro", "MaskingOffsetMode", "Percentage"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.MaskingOffsetMode Percentage
void TMPro::MaskingOffsetMode::_set_Percentage(TMPro::MaskingOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::MaskingOffsetMode::_set_Percentage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "MaskingOffsetMode", "Percentage", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.MaskingOffsetMode Pixel
TMPro::MaskingOffsetMode TMPro::MaskingOffsetMode::_get_Pixel() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::MaskingOffsetMode::_get_Pixel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::MaskingOffsetMode>("TMPro", "MaskingOffsetMode", "Pixel"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.MaskingOffsetMode Pixel
void TMPro::MaskingOffsetMode::_set_Pixel(TMPro::MaskingOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::MaskingOffsetMode::_set_Pixel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "MaskingOffsetMode", "Pixel", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TextureMappingOptions
#include "TMPro/TextureMappingOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TextureMappingOptions Character
TMPro::TextureMappingOptions TMPro::TextureMappingOptions::_get_Character() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextureMappingOptions::_get_Character");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextureMappingOptions>("TMPro", "TextureMappingOptions", "Character"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextureMappingOptions Character
void TMPro::TextureMappingOptions::_set_Character(TMPro::TextureMappingOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextureMappingOptions::_set_Character");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextureMappingOptions", "Character", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextureMappingOptions Line
TMPro::TextureMappingOptions TMPro::TextureMappingOptions::_get_Line() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextureMappingOptions::_get_Line");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextureMappingOptions>("TMPro", "TextureMappingOptions", "Line"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextureMappingOptions Line
void TMPro::TextureMappingOptions::_set_Line(TMPro::TextureMappingOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextureMappingOptions::_set_Line");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextureMappingOptions", "Line", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextureMappingOptions Paragraph
TMPro::TextureMappingOptions TMPro::TextureMappingOptions::_get_Paragraph() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextureMappingOptions::_get_Paragraph");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextureMappingOptions>("TMPro", "TextureMappingOptions", "Paragraph"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextureMappingOptions Paragraph
void TMPro::TextureMappingOptions::_set_Paragraph(TMPro::TextureMappingOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextureMappingOptions::_set_Paragraph");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextureMappingOptions", "Paragraph", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextureMappingOptions MatchAspect
TMPro::TextureMappingOptions TMPro::TextureMappingOptions::_get_MatchAspect() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextureMappingOptions::_get_MatchAspect");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextureMappingOptions>("TMPro", "TextureMappingOptions", "MatchAspect"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextureMappingOptions MatchAspect
void TMPro::TextureMappingOptions::_set_MatchAspect(TMPro::TextureMappingOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextureMappingOptions::_set_MatchAspect");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextureMappingOptions", "MatchAspect", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.FontStyles
#include "TMPro/FontStyles.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.FontStyles Normal
TMPro::FontStyles TMPro::FontStyles::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontStyles>("TMPro", "FontStyles", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontStyles Normal
void TMPro::FontStyles::_set_Normal(TMPro::FontStyles value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontStyles", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontStyles Bold
TMPro::FontStyles TMPro::FontStyles::_get_Bold() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_get_Bold");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontStyles>("TMPro", "FontStyles", "Bold"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontStyles Bold
void TMPro::FontStyles::_set_Bold(TMPro::FontStyles value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_set_Bold");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontStyles", "Bold", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontStyles Italic
TMPro::FontStyles TMPro::FontStyles::_get_Italic() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_get_Italic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontStyles>("TMPro", "FontStyles", "Italic"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontStyles Italic
void TMPro::FontStyles::_set_Italic(TMPro::FontStyles value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_set_Italic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontStyles", "Italic", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontStyles Underline
TMPro::FontStyles TMPro::FontStyles::_get_Underline() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_get_Underline");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontStyles>("TMPro", "FontStyles", "Underline"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontStyles Underline
void TMPro::FontStyles::_set_Underline(TMPro::FontStyles value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_set_Underline");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontStyles", "Underline", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontStyles LowerCase
TMPro::FontStyles TMPro::FontStyles::_get_LowerCase() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_get_LowerCase");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontStyles>("TMPro", "FontStyles", "LowerCase"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontStyles LowerCase
void TMPro::FontStyles::_set_LowerCase(TMPro::FontStyles value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_set_LowerCase");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontStyles", "LowerCase", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontStyles UpperCase
TMPro::FontStyles TMPro::FontStyles::_get_UpperCase() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_get_UpperCase");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontStyles>("TMPro", "FontStyles", "UpperCase"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontStyles UpperCase
void TMPro::FontStyles::_set_UpperCase(TMPro::FontStyles value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_set_UpperCase");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontStyles", "UpperCase", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontStyles SmallCaps
TMPro::FontStyles TMPro::FontStyles::_get_SmallCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_get_SmallCaps");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontStyles>("TMPro", "FontStyles", "SmallCaps"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontStyles SmallCaps
void TMPro::FontStyles::_set_SmallCaps(TMPro::FontStyles value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_set_SmallCaps");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontStyles", "SmallCaps", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontStyles Strikethrough
TMPro::FontStyles TMPro::FontStyles::_get_Strikethrough() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_get_Strikethrough");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontStyles>("TMPro", "FontStyles", "Strikethrough"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontStyles Strikethrough
void TMPro::FontStyles::_set_Strikethrough(TMPro::FontStyles value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_set_Strikethrough");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontStyles", "Strikethrough", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontStyles Superscript
TMPro::FontStyles TMPro::FontStyles::_get_Superscript() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_get_Superscript");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontStyles>("TMPro", "FontStyles", "Superscript"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontStyles Superscript
void TMPro::FontStyles::_set_Superscript(TMPro::FontStyles value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_set_Superscript");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontStyles", "Superscript", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontStyles Subscript
TMPro::FontStyles TMPro::FontStyles::_get_Subscript() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_get_Subscript");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontStyles>("TMPro", "FontStyles", "Subscript"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontStyles Subscript
void TMPro::FontStyles::_set_Subscript(TMPro::FontStyles value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_set_Subscript");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontStyles", "Subscript", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontStyles Highlight
TMPro::FontStyles TMPro::FontStyles::_get_Highlight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_get_Highlight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontStyles>("TMPro", "FontStyles", "Highlight"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontStyles Highlight
void TMPro::FontStyles::_set_Highlight(TMPro::FontStyles value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontStyles::_set_Highlight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontStyles", "Highlight", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.FontWeight
#include "TMPro/FontWeight.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.FontWeight Thin
TMPro::FontWeight TMPro::FontWeight::_get_Thin() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_get_Thin");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontWeight>("TMPro", "FontWeight", "Thin"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontWeight Thin
void TMPro::FontWeight::_set_Thin(TMPro::FontWeight value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_set_Thin");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontWeight", "Thin", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontWeight ExtraLight
TMPro::FontWeight TMPro::FontWeight::_get_ExtraLight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_get_ExtraLight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontWeight>("TMPro", "FontWeight", "ExtraLight"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontWeight ExtraLight
void TMPro::FontWeight::_set_ExtraLight(TMPro::FontWeight value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_set_ExtraLight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontWeight", "ExtraLight", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontWeight Light
TMPro::FontWeight TMPro::FontWeight::_get_Light() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_get_Light");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontWeight>("TMPro", "FontWeight", "Light"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontWeight Light
void TMPro::FontWeight::_set_Light(TMPro::FontWeight value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_set_Light");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontWeight", "Light", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontWeight Regular
TMPro::FontWeight TMPro::FontWeight::_get_Regular() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_get_Regular");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontWeight>("TMPro", "FontWeight", "Regular"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontWeight Regular
void TMPro::FontWeight::_set_Regular(TMPro::FontWeight value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_set_Regular");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontWeight", "Regular", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontWeight Medium
TMPro::FontWeight TMPro::FontWeight::_get_Medium() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_get_Medium");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontWeight>("TMPro", "FontWeight", "Medium"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontWeight Medium
void TMPro::FontWeight::_set_Medium(TMPro::FontWeight value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_set_Medium");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontWeight", "Medium", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontWeight SemiBold
TMPro::FontWeight TMPro::FontWeight::_get_SemiBold() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_get_SemiBold");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontWeight>("TMPro", "FontWeight", "SemiBold"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontWeight SemiBold
void TMPro::FontWeight::_set_SemiBold(TMPro::FontWeight value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_set_SemiBold");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontWeight", "SemiBold", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontWeight Bold
TMPro::FontWeight TMPro::FontWeight::_get_Bold() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_get_Bold");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontWeight>("TMPro", "FontWeight", "Bold"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontWeight Bold
void TMPro::FontWeight::_set_Bold(TMPro::FontWeight value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_set_Bold");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontWeight", "Bold", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontWeight Heavy
TMPro::FontWeight TMPro::FontWeight::_get_Heavy() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_get_Heavy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontWeight>("TMPro", "FontWeight", "Heavy"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontWeight Heavy
void TMPro::FontWeight::_set_Heavy(TMPro::FontWeight value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_set_Heavy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontWeight", "Heavy", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.FontWeight Black
TMPro::FontWeight TMPro::FontWeight::_get_Black() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_get_Black");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::FontWeight>("TMPro", "FontWeight", "Black"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.FontWeight Black
void TMPro::FontWeight::_set_Black(TMPro::FontWeight value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::FontWeight::_set_Black");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "FontWeight", "Black", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
// Including type: TMPro.TMP_Character
#include "TMPro/TMP_Character.hpp"
// Including type: TMPro.TMP_TextElement
#include "TMPro/TMP_TextElement.hpp"
// Including type: TMPro.TMP_FontAsset
#include "TMPro/TMP_FontAsset.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: TMPro.TMP_ColorGradient
#include "TMPro/TMP_ColorGradient.hpp"
// Including type: TMPro.TMP_SpriteAsset
#include "TMPro/TMP_SpriteAsset.hpp"
// Including type: TMPro.TMP_TextInfo
#include "TMPro/TMP_TextInfo.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: TMPro.TMP_SpriteAnimator
#include "TMPro/TMP_SpriteAnimator.hpp"
// Including type: UnityEngine.UI.LayoutElement
#include "UnityEngine/UI/LayoutElement.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: TMPro.TMP_VertexDataUpdateFlags
#include "TMPro/TMP_VertexDataUpdateFlags.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static protected UnityEngine.Color32 s_colorWhite
UnityEngine::Color32 TMPro::TMP_Text::_get_s_colorWhite() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::_get_s_colorWhite");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Color32>("TMPro", "TMP_Text", "s_colorWhite"));
}
// Autogenerated static field setter
// Set static field: static protected UnityEngine.Color32 s_colorWhite
void TMPro::TMP_Text::_set_s_colorWhite(UnityEngine::Color32 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::_set_s_colorWhite");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text", "s_colorWhite", value));
}
// Autogenerated static field getter
// Get static field: static protected UnityEngine.Vector2 k_LargePositiveVector2
UnityEngine::Vector2 TMPro::TMP_Text::_get_k_LargePositiveVector2() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::_get_k_LargePositiveVector2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("TMPro", "TMP_Text", "k_LargePositiveVector2"));
}
// Autogenerated static field setter
// Set static field: static protected UnityEngine.Vector2 k_LargePositiveVector2
void TMPro::TMP_Text::_set_k_LargePositiveVector2(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::_set_k_LargePositiveVector2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text", "k_LargePositiveVector2", value));
}
// Autogenerated static field getter
// Get static field: static protected UnityEngine.Vector2 k_LargeNegativeVector2
UnityEngine::Vector2 TMPro::TMP_Text::_get_k_LargeNegativeVector2() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::_get_k_LargeNegativeVector2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("TMPro", "TMP_Text", "k_LargeNegativeVector2"));
}
// Autogenerated static field setter
// Set static field: static protected UnityEngine.Vector2 k_LargeNegativeVector2
void TMPro::TMP_Text::_set_k_LargeNegativeVector2(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::_set_k_LargeNegativeVector2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text", "k_LargeNegativeVector2", value));
}
// Autogenerated static field getter
// Get static field: static protected System.Single k_LargePositiveFloat
float TMPro::TMP_Text::_get_k_LargePositiveFloat() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::_get_k_LargePositiveFloat");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("TMPro", "TMP_Text", "k_LargePositiveFloat"));
}
// Autogenerated static field setter
// Set static field: static protected System.Single k_LargePositiveFloat
void TMPro::TMP_Text::_set_k_LargePositiveFloat(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::_set_k_LargePositiveFloat");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text", "k_LargePositiveFloat", value));
}
// Autogenerated static field getter
// Get static field: static protected System.Single k_LargeNegativeFloat
float TMPro::TMP_Text::_get_k_LargeNegativeFloat() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::_get_k_LargeNegativeFloat");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("TMPro", "TMP_Text", "k_LargeNegativeFloat"));
}
// Autogenerated static field setter
// Set static field: static protected System.Single k_LargeNegativeFloat
void TMPro::TMP_Text::_set_k_LargeNegativeFloat(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::_set_k_LargeNegativeFloat");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text", "k_LargeNegativeFloat", value));
}
// Autogenerated static field getter
// Get static field: static protected System.Int32 k_LargePositiveInt
int TMPro::TMP_Text::_get_k_LargePositiveInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::_get_k_LargePositiveInt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "TMP_Text", "k_LargePositiveInt"));
}
// Autogenerated static field setter
// Set static field: static protected System.Int32 k_LargePositiveInt
void TMPro::TMP_Text::_set_k_LargePositiveInt(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::_set_k_LargePositiveInt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text", "k_LargePositiveInt", value));
}
// Autogenerated static field getter
// Get static field: static protected System.Int32 k_LargeNegativeInt
int TMPro::TMP_Text::_get_k_LargeNegativeInt() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::_get_k_LargeNegativeInt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "TMP_Text", "k_LargeNegativeInt"));
}
// Autogenerated static field setter
// Set static field: static protected System.Int32 k_LargeNegativeInt
void TMPro::TMP_Text::_set_k_LargeNegativeInt(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::_set_k_LargeNegativeInt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text", "k_LargeNegativeInt", value));
}
// Autogenerated method: TMPro.TMP_Text.get_text
::Il2CppString* TMPro::TMP_Text::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_text
void TMPro::TMP_Text::set_text(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_isRightToLeftText
bool TMPro::TMP_Text::get_isRightToLeftText() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_isRightToLeftText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRightToLeftText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_isRightToLeftText
void TMPro::TMP_Text::set_isRightToLeftText(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_isRightToLeftText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isRightToLeftText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_font
TMPro::TMP_FontAsset* TMPro::TMP_Text::get_font() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_font");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_font", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_FontAsset*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_font
void TMPro::TMP_Text::set_font(TMPro::TMP_FontAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_font");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_font", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_fontSharedMaterial
UnityEngine::Material* TMPro::TMP_Text::get_fontSharedMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_fontSharedMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontSharedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_fontSharedMaterial
void TMPro::TMP_Text::set_fontSharedMaterial(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_fontSharedMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontSharedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_fontSharedMaterials
::Array<UnityEngine::Material*>* TMPro::TMP_Text::get_fontSharedMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_fontSharedMaterials");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontSharedMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Material*>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_fontSharedMaterials
void TMPro::TMP_Text::set_fontSharedMaterials(::Array<UnityEngine::Material*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_fontSharedMaterials");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontSharedMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_fontMaterial
UnityEngine::Material* TMPro::TMP_Text::get_fontMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_fontMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_fontMaterial
void TMPro::TMP_Text::set_fontMaterial(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_fontMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_fontMaterials
::Array<UnityEngine::Material*>* TMPro::TMP_Text::get_fontMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_fontMaterials");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Material*>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_fontMaterials
void TMPro::TMP_Text::set_fontMaterials(::Array<UnityEngine::Material*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_fontMaterials");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_alpha
float TMPro::TMP_Text::get_alpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_alpha
void TMPro::TMP_Text::set_alpha(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_enableVertexGradient
bool TMPro::TMP_Text::get_enableVertexGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_enableVertexGradient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableVertexGradient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_enableVertexGradient
void TMPro::TMP_Text::set_enableVertexGradient(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_enableVertexGradient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableVertexGradient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_colorGradient
TMPro::VertexGradient TMPro::TMP_Text::get_colorGradient() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_colorGradient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorGradient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::VertexGradient, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_colorGradient
void TMPro::TMP_Text::set_colorGradient(TMPro::VertexGradient value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_colorGradient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_colorGradient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_colorGradientPreset
TMPro::TMP_ColorGradient* TMPro::TMP_Text::get_colorGradientPreset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_colorGradientPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorGradientPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_ColorGradient*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_colorGradientPreset
void TMPro::TMP_Text::set_colorGradientPreset(TMPro::TMP_ColorGradient* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_colorGradientPreset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_colorGradientPreset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_spriteAsset
TMPro::TMP_SpriteAsset* TMPro::TMP_Text::get_spriteAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_spriteAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spriteAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_SpriteAsset*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_spriteAsset
void TMPro::TMP_Text::set_spriteAsset(TMPro::TMP_SpriteAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_spriteAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_spriteAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_tintAllSprites
bool TMPro::TMP_Text::get_tintAllSprites() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_tintAllSprites");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tintAllSprites", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_tintAllSprites
void TMPro::TMP_Text::set_tintAllSprites(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_tintAllSprites");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tintAllSprites", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_overrideColorTags
bool TMPro::TMP_Text::get_overrideColorTags() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_overrideColorTags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_overrideColorTags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_overrideColorTags
void TMPro::TMP_Text::set_overrideColorTags(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_overrideColorTags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_overrideColorTags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_faceColor
UnityEngine::Color32 TMPro::TMP_Text::get_faceColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_faceColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_faceColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color32, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_faceColor
void TMPro::TMP_Text::set_faceColor(UnityEngine::Color32 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_faceColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_faceColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_outlineColor
UnityEngine::Color32 TMPro::TMP_Text::get_outlineColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_outlineColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outlineColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color32, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_outlineColor
void TMPro::TMP_Text::set_outlineColor(UnityEngine::Color32 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_outlineColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_outlineColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_outlineWidth
float TMPro::TMP_Text::get_outlineWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_outlineWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_outlineWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_outlineWidth
void TMPro::TMP_Text::set_outlineWidth(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_outlineWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_outlineWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_fontSize
float TMPro::TMP_Text::get_fontSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_fontSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_fontSize
void TMPro::TMP_Text::set_fontSize(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_fontSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_fontScale
float TMPro::TMP_Text::get_fontScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_fontScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_fontWeight
TMPro::FontWeight TMPro::TMP_Text::get_fontWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_fontWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::FontWeight, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_fontWeight
void TMPro::TMP_Text::set_fontWeight(TMPro::FontWeight value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_fontWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_pixelsPerUnit
float TMPro::TMP_Text::get_pixelsPerUnit() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_pixelsPerUnit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pixelsPerUnit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_enableAutoSizing
bool TMPro::TMP_Text::get_enableAutoSizing() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_enableAutoSizing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableAutoSizing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_enableAutoSizing
void TMPro::TMP_Text::set_enableAutoSizing(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_enableAutoSizing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableAutoSizing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_fontSizeMin
float TMPro::TMP_Text::get_fontSizeMin() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_fontSizeMin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontSizeMin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_fontSizeMin
void TMPro::TMP_Text::set_fontSizeMin(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_fontSizeMin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontSizeMin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_fontSizeMax
float TMPro::TMP_Text::get_fontSizeMax() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_fontSizeMax");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontSizeMax", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_fontSizeMax
void TMPro::TMP_Text::set_fontSizeMax(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_fontSizeMax");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontSizeMax", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_fontStyle
TMPro::FontStyles TMPro::TMP_Text::get_fontStyle() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_fontStyle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fontStyle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::FontStyles, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_fontStyle
void TMPro::TMP_Text::set_fontStyle(TMPro::FontStyles value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_fontStyle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fontStyle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_isUsingBold
bool TMPro::TMP_Text::get_isUsingBold() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_isUsingBold");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isUsingBold", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_alignment
TMPro::TextAlignmentOptions TMPro::TMP_Text::get_alignment() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_alignment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_alignment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TextAlignmentOptions, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_alignment
void TMPro::TMP_Text::set_alignment(TMPro::TextAlignmentOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_alignment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_alignment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_characterSpacing
float TMPro::TMP_Text::get_characterSpacing() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_characterSpacing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_characterSpacing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_characterSpacing
void TMPro::TMP_Text::set_characterSpacing(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_characterSpacing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_characterSpacing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_wordSpacing
float TMPro::TMP_Text::get_wordSpacing() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_wordSpacing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_wordSpacing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_wordSpacing
void TMPro::TMP_Text::set_wordSpacing(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_wordSpacing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_wordSpacing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_lineSpacing
float TMPro::TMP_Text::get_lineSpacing() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_lineSpacing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lineSpacing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_lineSpacing
void TMPro::TMP_Text::set_lineSpacing(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_lineSpacing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lineSpacing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_lineSpacingAdjustment
float TMPro::TMP_Text::get_lineSpacingAdjustment() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_lineSpacingAdjustment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lineSpacingAdjustment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_lineSpacingAdjustment
void TMPro::TMP_Text::set_lineSpacingAdjustment(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_lineSpacingAdjustment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lineSpacingAdjustment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_paragraphSpacing
float TMPro::TMP_Text::get_paragraphSpacing() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_paragraphSpacing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_paragraphSpacing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_paragraphSpacing
void TMPro::TMP_Text::set_paragraphSpacing(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_paragraphSpacing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_paragraphSpacing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_characterWidthAdjustment
float TMPro::TMP_Text::get_characterWidthAdjustment() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_characterWidthAdjustment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_characterWidthAdjustment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_characterWidthAdjustment
void TMPro::TMP_Text::set_characterWidthAdjustment(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_characterWidthAdjustment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_characterWidthAdjustment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_enableWordWrapping
bool TMPro::TMP_Text::get_enableWordWrapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_enableWordWrapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableWordWrapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_enableWordWrapping
void TMPro::TMP_Text::set_enableWordWrapping(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_enableWordWrapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableWordWrapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_wordWrappingRatios
float TMPro::TMP_Text::get_wordWrappingRatios() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_wordWrappingRatios");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_wordWrappingRatios", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_wordWrappingRatios
void TMPro::TMP_Text::set_wordWrappingRatios(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_wordWrappingRatios");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_wordWrappingRatios", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_overflowMode
TMPro::TextOverflowModes TMPro::TMP_Text::get_overflowMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_overflowMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_overflowMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TextOverflowModes, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_overflowMode
void TMPro::TMP_Text::set_overflowMode(TMPro::TextOverflowModes value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_overflowMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_overflowMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_isTextOverflowing
bool TMPro::TMP_Text::get_isTextOverflowing() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_isTextOverflowing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isTextOverflowing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_firstOverflowCharacterIndex
int TMPro::TMP_Text::get_firstOverflowCharacterIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_firstOverflowCharacterIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_firstOverflowCharacterIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_linkedTextComponent
TMPro::TMP_Text* TMPro::TMP_Text::get_linkedTextComponent() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_linkedTextComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_linkedTextComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_Text*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_linkedTextComponent
void TMPro::TMP_Text::set_linkedTextComponent(TMPro::TMP_Text* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_linkedTextComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_linkedTextComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_isLinkedTextComponent
bool TMPro::TMP_Text::get_isLinkedTextComponent() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_isLinkedTextComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isLinkedTextComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_isLinkedTextComponent
void TMPro::TMP_Text::set_isLinkedTextComponent(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_isLinkedTextComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isLinkedTextComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_isTextTruncated
bool TMPro::TMP_Text::get_isTextTruncated() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_isTextTruncated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isTextTruncated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_enableKerning
bool TMPro::TMP_Text::get_enableKerning() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_enableKerning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableKerning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_enableKerning
void TMPro::TMP_Text::set_enableKerning(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_enableKerning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableKerning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_extraPadding
bool TMPro::TMP_Text::get_extraPadding() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_extraPadding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_extraPadding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_extraPadding
void TMPro::TMP_Text::set_extraPadding(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_extraPadding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_extraPadding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_richText
bool TMPro::TMP_Text::get_richText() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_richText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_richText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_richText
void TMPro::TMP_Text::set_richText(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_richText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_richText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_parseCtrlCharacters
bool TMPro::TMP_Text::get_parseCtrlCharacters() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_parseCtrlCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parseCtrlCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_parseCtrlCharacters
void TMPro::TMP_Text::set_parseCtrlCharacters(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_parseCtrlCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_parseCtrlCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_isOverlay
bool TMPro::TMP_Text::get_isOverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_isOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_isOverlay
void TMPro::TMP_Text::set_isOverlay(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_isOverlay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isOverlay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_isOrthographic
bool TMPro::TMP_Text::get_isOrthographic() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_isOrthographic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isOrthographic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_isOrthographic
void TMPro::TMP_Text::set_isOrthographic(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_isOrthographic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isOrthographic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_enableCulling
bool TMPro::TMP_Text::get_enableCulling() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_enableCulling");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_enableCulling
void TMPro::TMP_Text::set_enableCulling(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_enableCulling");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_ignoreRectMaskCulling
bool TMPro::TMP_Text::get_ignoreRectMaskCulling() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_ignoreRectMaskCulling");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ignoreRectMaskCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_ignoreRectMaskCulling
void TMPro::TMP_Text::set_ignoreRectMaskCulling(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_ignoreRectMaskCulling");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ignoreRectMaskCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_ignoreVisibility
bool TMPro::TMP_Text::get_ignoreVisibility() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_ignoreVisibility");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ignoreVisibility", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_ignoreVisibility
void TMPro::TMP_Text::set_ignoreVisibility(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_ignoreVisibility");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ignoreVisibility", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_horizontalMapping
TMPro::TextureMappingOptions TMPro::TMP_Text::get_horizontalMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_horizontalMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_horizontalMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TextureMappingOptions, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_horizontalMapping
void TMPro::TMP_Text::set_horizontalMapping(TMPro::TextureMappingOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_horizontalMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_horizontalMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_verticalMapping
TMPro::TextureMappingOptions TMPro::TMP_Text::get_verticalMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_verticalMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_verticalMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TextureMappingOptions, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_verticalMapping
void TMPro::TMP_Text::set_verticalMapping(TMPro::TextureMappingOptions value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_verticalMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_verticalMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_mappingUvLineOffset
float TMPro::TMP_Text::get_mappingUvLineOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_mappingUvLineOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mappingUvLineOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_mappingUvLineOffset
void TMPro::TMP_Text::set_mappingUvLineOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_mappingUvLineOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mappingUvLineOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_renderMode
TMPro::TextRenderFlags TMPro::TMP_Text::get_renderMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_renderMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TextRenderFlags, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_renderMode
void TMPro::TMP_Text::set_renderMode(TMPro::TextRenderFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_renderMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_renderMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_geometrySortingOrder
TMPro::VertexSortingOrder TMPro::TMP_Text::get_geometrySortingOrder() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_geometrySortingOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_geometrySortingOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::VertexSortingOrder, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_geometrySortingOrder
void TMPro::TMP_Text::set_geometrySortingOrder(TMPro::VertexSortingOrder value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_geometrySortingOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_geometrySortingOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_vertexBufferAutoSizeReduction
bool TMPro::TMP_Text::get_vertexBufferAutoSizeReduction() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_vertexBufferAutoSizeReduction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_vertexBufferAutoSizeReduction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_vertexBufferAutoSizeReduction
void TMPro::TMP_Text::set_vertexBufferAutoSizeReduction(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_vertexBufferAutoSizeReduction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_vertexBufferAutoSizeReduction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_firstVisibleCharacter
int TMPro::TMP_Text::get_firstVisibleCharacter() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_firstVisibleCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_firstVisibleCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_firstVisibleCharacter
void TMPro::TMP_Text::set_firstVisibleCharacter(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_firstVisibleCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_firstVisibleCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_maxVisibleCharacters
int TMPro::TMP_Text::get_maxVisibleCharacters() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_maxVisibleCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxVisibleCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_maxVisibleCharacters
void TMPro::TMP_Text::set_maxVisibleCharacters(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_maxVisibleCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maxVisibleCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_maxVisibleWords
int TMPro::TMP_Text::get_maxVisibleWords() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_maxVisibleWords");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxVisibleWords", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_maxVisibleWords
void TMPro::TMP_Text::set_maxVisibleWords(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_maxVisibleWords");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maxVisibleWords", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_maxVisibleLines
int TMPro::TMP_Text::get_maxVisibleLines() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_maxVisibleLines");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxVisibleLines", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_maxVisibleLines
void TMPro::TMP_Text::set_maxVisibleLines(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_maxVisibleLines");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maxVisibleLines", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_useMaxVisibleDescender
bool TMPro::TMP_Text::get_useMaxVisibleDescender() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_useMaxVisibleDescender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useMaxVisibleDescender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_useMaxVisibleDescender
void TMPro::TMP_Text::set_useMaxVisibleDescender(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_useMaxVisibleDescender");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_useMaxVisibleDescender", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_pageToDisplay
int TMPro::TMP_Text::get_pageToDisplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_pageToDisplay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pageToDisplay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_pageToDisplay
void TMPro::TMP_Text::set_pageToDisplay(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_pageToDisplay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pageToDisplay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_margin
UnityEngine::Vector4 TMPro::TMP_Text::get_margin() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_margin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_margin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_margin
void TMPro::TMP_Text::set_margin(UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_margin");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_margin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_textInfo
TMPro::TMP_TextInfo* TMPro::TMP_Text::get_textInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_textInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_TextInfo*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_havePropertiesChanged
bool TMPro::TMP_Text::get_havePropertiesChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_havePropertiesChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_havePropertiesChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_havePropertiesChanged
void TMPro::TMP_Text::set_havePropertiesChanged(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_havePropertiesChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_havePropertiesChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_isUsingLegacyAnimationComponent
bool TMPro::TMP_Text::get_isUsingLegacyAnimationComponent() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_isUsingLegacyAnimationComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isUsingLegacyAnimationComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_isUsingLegacyAnimationComponent
void TMPro::TMP_Text::set_isUsingLegacyAnimationComponent(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_isUsingLegacyAnimationComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isUsingLegacyAnimationComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_autoSizeTextContainer
bool TMPro::TMP_Text::get_autoSizeTextContainer() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_autoSizeTextContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_autoSizeTextContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_autoSizeTextContainer
void TMPro::TMP_Text::set_autoSizeTextContainer(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_autoSizeTextContainer");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_autoSizeTextContainer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_mesh
UnityEngine::Mesh* TMPro::TMP_Text::get_mesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_mesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Mesh*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_isVolumetricText
bool TMPro::TMP_Text::get_isVolumetricText() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_isVolumetricText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isVolumetricText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_isVolumetricText
void TMPro::TMP_Text::set_isVolumetricText(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_isVolumetricText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isVolumetricText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_bounds
UnityEngine::Bounds TMPro::TMP_Text::get_bounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_bounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Bounds, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_textBounds
UnityEngine::Bounds TMPro::TMP_Text::get_textBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_textBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Bounds, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_spriteAnimator
TMPro::TMP_SpriteAnimator* TMPro::TMP_Text::get_spriteAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_spriteAnimator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spriteAnimator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_SpriteAnimator*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_flexibleHeight
float TMPro::TMP_Text::get_flexibleHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_flexibleHeight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flexibleHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_flexibleWidth
float TMPro::TMP_Text::get_flexibleWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_flexibleWidth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_flexibleWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_minWidth
float TMPro::TMP_Text::get_minWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_minWidth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_minWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_minHeight
float TMPro::TMP_Text::get_minHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_minHeight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_minHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_maxWidth
float TMPro::TMP_Text::get_maxWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_maxWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_maxHeight
float TMPro::TMP_Text::get_maxHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_maxHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_layoutElement
UnityEngine::UI::LayoutElement* TMPro::TMP_Text::get_layoutElement() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_layoutElement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_layoutElement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::LayoutElement*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_preferredWidth
float TMPro::TMP_Text::get_preferredWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_preferredWidth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_preferredWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_preferredHeight
float TMPro::TMP_Text::get_preferredHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_preferredHeight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_preferredHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_renderedWidth
float TMPro::TMP_Text::get_renderedWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_renderedWidth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderedWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_renderedHeight
float TMPro::TMP_Text::get_renderedHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_renderedHeight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_renderedHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_layoutPriority
int TMPro::TMP_Text::get_layoutPriority() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_layoutPriority");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_layoutPriority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.LoadFontAsset
void TMPro::TMP_Text::LoadFontAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::LoadFontAsset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadFontAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.SetSharedMaterial
void TMPro::TMP_Text::SetSharedMaterial(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetSharedMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSharedMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mat);
}
// Autogenerated method: TMPro.TMP_Text.GetMaterial
UnityEngine::Material* TMPro::TMP_Text::GetMaterial(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method, mat);
}
// Autogenerated method: TMPro.TMP_Text.SetFontBaseMaterial
void TMPro::TMP_Text::SetFontBaseMaterial(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetFontBaseMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFontBaseMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mat);
}
// Autogenerated method: TMPro.TMP_Text.GetSharedMaterials
::Array<UnityEngine::Material*>* TMPro::TMP_Text::GetSharedMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetSharedMaterials");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSharedMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Material*>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.SetSharedMaterials
void TMPro::TMP_Text::SetSharedMaterials(::Array<UnityEngine::Material*>* materials) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetSharedMaterials");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSharedMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materials)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, materials);
}
// Autogenerated method: TMPro.TMP_Text.GetMaterials
::Array<UnityEngine::Material*>* TMPro::TMP_Text::GetMaterials(::Array<UnityEngine::Material*>* mats) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetMaterials");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMaterials", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mats)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Material*>*, false>(this, ___internal__method, mats);
}
// Autogenerated method: TMPro.TMP_Text.CreateMaterialInstance
UnityEngine::Material* TMPro::TMP_Text::CreateMaterialInstance(UnityEngine::Material* source) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::CreateMaterialInstance");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateMaterialInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(source)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method, source);
}
// Autogenerated method: TMPro.TMP_Text.SetVertexColorGradient
void TMPro::TMP_Text::SetVertexColorGradient(TMPro::TMP_ColorGradient* gradient) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetVertexColorGradient");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertexColorGradient", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gradient)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, gradient);
}
// Autogenerated method: TMPro.TMP_Text.SetTextSortingOrder
void TMPro::TMP_Text::SetTextSortingOrder(TMPro::VertexSortingOrder order) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetTextSortingOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTextSortingOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(order)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, order);
}
// Autogenerated method: TMPro.TMP_Text.SetTextSortingOrder
void TMPro::TMP_Text::SetTextSortingOrder(::Array<int>* order) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetTextSortingOrder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTextSortingOrder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(order)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, order);
}
// Autogenerated method: TMPro.TMP_Text.SetFaceColor
void TMPro::TMP_Text::SetFaceColor(UnityEngine::Color32 color) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetFaceColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFaceColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: TMPro.TMP_Text.SetOutlineColor
void TMPro::TMP_Text::SetOutlineColor(UnityEngine::Color32 color) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetOutlineColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOutlineColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: TMPro.TMP_Text.SetOutlineThickness
void TMPro::TMP_Text::SetOutlineThickness(float thickness) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetOutlineThickness");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOutlineThickness", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(thickness)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, thickness);
}
// Autogenerated method: TMPro.TMP_Text.SetShaderDepth
void TMPro::TMP_Text::SetShaderDepth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetShaderDepth");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetShaderDepth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.SetCulling
void TMPro::TMP_Text::SetCulling() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetCulling");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCulling", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.GetPaddingForMaterial
float TMPro::TMP_Text::GetPaddingForMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetPaddingForMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPaddingForMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.GetPaddingForMaterial
float TMPro::TMP_Text::GetPaddingForMaterial(UnityEngine::Material* mat) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetPaddingForMaterial");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPaddingForMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mat)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, mat);
}
// Autogenerated method: TMPro.TMP_Text.GetTextContainerLocalCorners
::Array<UnityEngine::Vector3>* TMPro::TMP_Text::GetTextContainerLocalCorners() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetTextContainerLocalCorners");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTextContainerLocalCorners", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Vector3>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.ForceMeshUpdate
void TMPro::TMP_Text::ForceMeshUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ForceMeshUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceMeshUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.ForceMeshUpdate
void TMPro::TMP_Text::ForceMeshUpdate(bool ignoreActiveState) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ForceMeshUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceMeshUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ignoreActiveState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ignoreActiveState);
}
// Autogenerated method: TMPro.TMP_Text.SetTextInternal
void TMPro::TMP_Text::SetTextInternal(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetTextInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTextInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: TMPro.TMP_Text.UpdateGeometry
void TMPro::TMP_Text::UpdateGeometry(UnityEngine::Mesh* mesh, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::UpdateGeometry");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateGeometry", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mesh), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mesh, index);
}
// Autogenerated method: TMPro.TMP_Text.UpdateVertexData
void TMPro::TMP_Text::UpdateVertexData(TMPro::TMP_VertexDataUpdateFlags flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::UpdateVertexData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVertexData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flags)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flags);
}
// Autogenerated method: TMPro.TMP_Text.UpdateVertexData
void TMPro::TMP_Text::UpdateVertexData() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::UpdateVertexData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateVertexData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.SetVertices
void TMPro::TMP_Text::SetVertices(::Array<UnityEngine::Vector3>* vertices) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetVertices");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetVertices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertices)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vertices);
}
// Autogenerated method: TMPro.TMP_Text.UpdateMeshPadding
void TMPro::TMP_Text::UpdateMeshPadding() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::UpdateMeshPadding");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMeshPadding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.InternalCrossFadeColor
void TMPro::TMP_Text::InternalCrossFadeColor(UnityEngine::Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::InternalCrossFadeColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalCrossFadeColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetColor), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(ignoreTimeScale), ::il2cpp_utils::ExtractType(useAlpha)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetColor, duration, ignoreTimeScale, useAlpha);
}
// Autogenerated method: TMPro.TMP_Text.InternalCrossFadeAlpha
void TMPro::TMP_Text::InternalCrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::InternalCrossFadeAlpha");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalCrossFadeAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alpha), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(ignoreTimeScale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, alpha, duration, ignoreTimeScale);
}
// Autogenerated method: TMPro.TMP_Text.ParseInputText
void TMPro::TMP_Text::ParseInputText() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ParseInputText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ParseInputText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.SetText
void TMPro::TMP_Text::SetText(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: TMPro.TMP_Text.SetText
void TMPro::TMP_Text::SetText(::Il2CppString* text, bool syncTextInputBox) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(syncTextInputBox)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text, syncTextInputBox);
}
// Autogenerated method: TMPro.TMP_Text.SetText
void TMPro::TMP_Text::SetText(::Il2CppString* text, float arg0) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(arg0)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text, arg0);
}
// Autogenerated method: TMPro.TMP_Text.SetText
void TMPro::TMP_Text::SetText(::Il2CppString* text, float arg0, float arg1) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(arg0), ::il2cpp_utils::ExtractType(arg1)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text, arg0, arg1);
}
// Autogenerated method: TMPro.TMP_Text.SetText
void TMPro::TMP_Text::SetText(::Il2CppString* text, float arg0, float arg1, float arg2) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(arg0), ::il2cpp_utils::ExtractType(arg1), ::il2cpp_utils::ExtractType(arg2)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text, arg0, arg1, arg2);
}
// Autogenerated method: TMPro.TMP_Text.SetText
void TMPro::TMP_Text::SetText(System::Text::StringBuilder* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: TMPro.TMP_Text.SetCharArray
void TMPro::TMP_Text::SetCharArray(::Array<::Il2CppChar>* sourceText) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetCharArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCharArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceText)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sourceText);
}
// Autogenerated method: TMPro.TMP_Text.SetCharArray
void TMPro::TMP_Text::SetCharArray(::Array<::Il2CppChar>* sourceText, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetCharArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCharArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceText), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sourceText, start, length);
}
// Autogenerated method: TMPro.TMP_Text.SetCharArray
void TMPro::TMP_Text::SetCharArray(::Array<int>* sourceText, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetCharArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCharArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceText), ::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(length)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sourceText, start, length);
}
// Autogenerated method: TMPro.TMP_Text.SetTextArrayToCharArray
void TMPro::TMP_Text::SetTextArrayToCharArray(::Array<::Il2CppChar>* sourceText, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetTextArrayToCharArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTextArrayToCharArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceText), ::il2cpp_utils::ExtractType(charBuffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sourceText, charBuffer);
}
// Autogenerated method: TMPro.TMP_Text.StringToCharArray
void TMPro::TMP_Text::StringToCharArray(::Il2CppString* sourceText, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::StringToCharArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StringToCharArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceText), ::il2cpp_utils::ExtractType(charBuffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sourceText, charBuffer);
}
// Autogenerated method: TMPro.TMP_Text.StringBuilderToIntArray
void TMPro::TMP_Text::StringBuilderToIntArray(System::Text::StringBuilder* sourceText, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::StringBuilderToIntArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StringBuilderToIntArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceText), ::il2cpp_utils::ExtractType(charBuffer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sourceText, charBuffer);
}
// Autogenerated method: TMPro.TMP_Text.ReplaceOpeningStyleTag
bool TMPro::TMP_Text::ReplaceOpeningStyleTag(::Il2CppString*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ReplaceOpeningStyleTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceOpeningStyleTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceText), ::il2cpp_utils::ExtractType(srcIndex), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(charBuffer), ::il2cpp_utils::ExtractType(writeIndex)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sourceText, srcIndex, srcOffset, charBuffer, writeIndex);
}
// Autogenerated method: TMPro.TMP_Text.ReplaceOpeningStyleTag
bool TMPro::TMP_Text::ReplaceOpeningStyleTag(::Array<int>*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ReplaceOpeningStyleTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceOpeningStyleTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceText), ::il2cpp_utils::ExtractType(srcIndex), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(charBuffer), ::il2cpp_utils::ExtractType(writeIndex)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sourceText, srcIndex, srcOffset, charBuffer, writeIndex);
}
// Autogenerated method: TMPro.TMP_Text.ReplaceOpeningStyleTag
bool TMPro::TMP_Text::ReplaceOpeningStyleTag(::Array<::Il2CppChar>*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ReplaceOpeningStyleTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceOpeningStyleTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceText), ::il2cpp_utils::ExtractType(srcIndex), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(charBuffer), ::il2cpp_utils::ExtractType(writeIndex)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sourceText, srcIndex, srcOffset, charBuffer, writeIndex);
}
// Autogenerated method: TMPro.TMP_Text.ReplaceOpeningStyleTag
bool TMPro::TMP_Text::ReplaceOpeningStyleTag(System::Text::StringBuilder*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ReplaceOpeningStyleTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceOpeningStyleTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceText), ::il2cpp_utils::ExtractType(srcIndex), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractType(charBuffer), ::il2cpp_utils::ExtractType(writeIndex)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sourceText, srcIndex, srcOffset, charBuffer, writeIndex);
}
// Autogenerated method: TMPro.TMP_Text.ReplaceClosingStyleTag
bool TMPro::TMP_Text::ReplaceClosingStyleTag(::Il2CppString*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ReplaceClosingStyleTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceClosingStyleTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceText), ::il2cpp_utils::ExtractType(srcIndex), ::il2cpp_utils::ExtractType(charBuffer), ::il2cpp_utils::ExtractType(writeIndex)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sourceText, srcIndex, charBuffer, writeIndex);
}
// Autogenerated method: TMPro.TMP_Text.ReplaceClosingStyleTag
bool TMPro::TMP_Text::ReplaceClosingStyleTag(::Array<int>*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ReplaceClosingStyleTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceClosingStyleTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceText), ::il2cpp_utils::ExtractType(srcIndex), ::il2cpp_utils::ExtractType(charBuffer), ::il2cpp_utils::ExtractType(writeIndex)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sourceText, srcIndex, charBuffer, writeIndex);
}
// Autogenerated method: TMPro.TMP_Text.ReplaceClosingStyleTag
bool TMPro::TMP_Text::ReplaceClosingStyleTag(::Array<::Il2CppChar>*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ReplaceClosingStyleTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceClosingStyleTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceText), ::il2cpp_utils::ExtractType(srcIndex), ::il2cpp_utils::ExtractType(charBuffer), ::il2cpp_utils::ExtractType(writeIndex)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sourceText, srcIndex, charBuffer, writeIndex);
}
// Autogenerated method: TMPro.TMP_Text.ReplaceClosingStyleTag
bool TMPro::TMP_Text::ReplaceClosingStyleTag(System::Text::StringBuilder*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ReplaceClosingStyleTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceClosingStyleTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sourceText), ::il2cpp_utils::ExtractType(srcIndex), ::il2cpp_utils::ExtractType(charBuffer), ::il2cpp_utils::ExtractType(writeIndex)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, sourceText, srcIndex, charBuffer, writeIndex);
}
// Autogenerated method: TMPro.TMP_Text.IsTagName
bool TMPro::TMP_Text::IsTagName(::Il2CppString*& text, ::Il2CppString* tag, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::IsTagName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsTagName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(tag), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, text, tag, index);
}
// Autogenerated method: TMPro.TMP_Text.IsTagName
bool TMPro::TMP_Text::IsTagName(::Array<::Il2CppChar>*& text, ::Il2CppString* tag, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::IsTagName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsTagName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(tag), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, text, tag, index);
}
// Autogenerated method: TMPro.TMP_Text.IsTagName
bool TMPro::TMP_Text::IsTagName(::Array<int>*& text, ::Il2CppString* tag, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::IsTagName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsTagName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(tag), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, text, tag, index);
}
// Autogenerated method: TMPro.TMP_Text.IsTagName
bool TMPro::TMP_Text::IsTagName(System::Text::StringBuilder*& text, ::Il2CppString* tag, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::IsTagName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsTagName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(tag), ::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, text, tag, index);
}
// Autogenerated method: TMPro.TMP_Text.GetTagHashCode
int TMPro::TMP_Text::GetTagHashCode(::Il2CppString*& text, int index, int& closeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetTagHashCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTagHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, text, index, closeIndex);
}
// Autogenerated method: TMPro.TMP_Text.GetTagHashCode
int TMPro::TMP_Text::GetTagHashCode(::Array<::Il2CppChar>*& text, int index, int& closeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetTagHashCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTagHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, text, index, closeIndex);
}
// Autogenerated method: TMPro.TMP_Text.GetTagHashCode
int TMPro::TMP_Text::GetTagHashCode(::Array<int>*& text, int index, int& closeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetTagHashCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTagHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, text, index, closeIndex);
}
// Autogenerated method: TMPro.TMP_Text.GetTagHashCode
int TMPro::TMP_Text::GetTagHashCode(System::Text::StringBuilder*& text, int index, int& closeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetTagHashCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTagHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, text, index, closeIndex);
}
// Autogenerated method: TMPro.TMP_Text.AddFloatToCharArray
void TMPro::TMP_Text::AddFloatToCharArray(double number, int& index, int precision) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::AddFloatToCharArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddFloatToCharArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(precision)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, number, index, precision);
}
// Autogenerated method: TMPro.TMP_Text.AddIntToCharArray
void TMPro::TMP_Text::AddIntToCharArray(double number, int& index, int precision) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::AddIntToCharArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddIntToCharArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(number), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(precision)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, number, index, precision);
}
// Autogenerated method: TMPro.TMP_Text.SetArraySizes
int TMPro::TMP_Text::SetArraySizes(::Array<TMPro::TMP_Text::UnicodeChar>* chars) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetArraySizes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetArraySizes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, chars);
}
// Autogenerated method: TMPro.TMP_Text.GenerateTextMesh
void TMPro::TMP_Text::GenerateTextMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GenerateTextMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GenerateTextMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredValues
UnityEngine::Vector2 TMPro::TMP_Text::GetPreferredValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetPreferredValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreferredValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredValues
UnityEngine::Vector2 TMPro::TMP_Text::GetPreferredValues(float width, float height) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetPreferredValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreferredValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, width, height);
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredValues
UnityEngine::Vector2 TMPro::TMP_Text::GetPreferredValues(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetPreferredValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreferredValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, text);
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredValues
UnityEngine::Vector2 TMPro::TMP_Text::GetPreferredValues(::Il2CppString* text, float width, float height) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetPreferredValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreferredValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(width), ::il2cpp_utils::ExtractType(height)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, text, width, height);
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredWidth
float TMPro::TMP_Text::GetPreferredWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetPreferredWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreferredWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredWidth
float TMPro::TMP_Text::GetPreferredWidth(UnityEngine::Vector2 margin) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetPreferredWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreferredWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(margin)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, margin);
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredHeight
float TMPro::TMP_Text::GetPreferredHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetPreferredHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreferredHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredHeight
float TMPro::TMP_Text::GetPreferredHeight(UnityEngine::Vector2 margin) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetPreferredHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPreferredHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(margin)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, margin);
}
// Autogenerated method: TMPro.TMP_Text.GetRenderedValues
UnityEngine::Vector2 TMPro::TMP_Text::GetRenderedValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetRenderedValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderedValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.GetRenderedValues
UnityEngine::Vector2 TMPro::TMP_Text::GetRenderedValues(bool onlyVisibleCharacters) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetRenderedValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderedValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(onlyVisibleCharacters)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, onlyVisibleCharacters);
}
// Autogenerated method: TMPro.TMP_Text.GetRenderedWidth
float TMPro::TMP_Text::GetRenderedWidth() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetRenderedWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderedWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.GetRenderedWidth
float TMPro::TMP_Text::GetRenderedWidth(bool onlyVisibleCharacters) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetRenderedWidth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderedWidth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(onlyVisibleCharacters)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, onlyVisibleCharacters);
}
// Autogenerated method: TMPro.TMP_Text.GetRenderedHeight
float TMPro::TMP_Text::GetRenderedHeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetRenderedHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderedHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.GetRenderedHeight
float TMPro::TMP_Text::GetRenderedHeight(bool onlyVisibleCharacters) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetRenderedHeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRenderedHeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(onlyVisibleCharacters)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, onlyVisibleCharacters);
}
// Autogenerated method: TMPro.TMP_Text.CalculatePreferredValues
UnityEngine::Vector2 TMPro::TMP_Text::CalculatePreferredValues(float defaultFontSize, UnityEngine::Vector2 marginSize, bool ignoreTextAutoSizing) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::CalculatePreferredValues");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculatePreferredValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(defaultFontSize), ::il2cpp_utils::ExtractType(marginSize), ::il2cpp_utils::ExtractType(ignoreTextAutoSizing)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, defaultFontSize, marginSize, ignoreTextAutoSizing);
}
// Autogenerated method: TMPro.TMP_Text.GetCompoundBounds
UnityEngine::Bounds TMPro::TMP_Text::GetCompoundBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetCompoundBounds");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCompoundBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Bounds, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.GetTextBounds
UnityEngine::Bounds TMPro::TMP_Text::GetTextBounds() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetTextBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTextBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Bounds, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.GetTextBounds
UnityEngine::Bounds TMPro::TMP_Text::GetTextBounds(bool onlyVisibleCharacters) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetTextBounds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTextBounds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(onlyVisibleCharacters)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Bounds, false>(this, ___internal__method, onlyVisibleCharacters);
}
// Autogenerated method: TMPro.TMP_Text.AdjustLineOffset
void TMPro::TMP_Text::AdjustLineOffset(int startIndex, int endIndex, float offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::AdjustLineOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustLineOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(endIndex), ::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startIndex, endIndex, offset);
}
// Autogenerated method: TMPro.TMP_Text.ResizeLineExtents
void TMPro::TMP_Text::ResizeLineExtents(int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ResizeLineExtents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResizeLineExtents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(size)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, size);
}
// Autogenerated method: TMPro.TMP_Text.GetTextInfo
TMPro::TMP_TextInfo* TMPro::TMP_Text::GetTextInfo(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetTextInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTextInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_TextInfo*, false>(this, ___internal__method, text);
}
// Autogenerated method: TMPro.TMP_Text.ComputeMarginSize
void TMPro::TMP_Text::ComputeMarginSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ComputeMarginSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeMarginSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.SaveWordWrappingState
void TMPro::TMP_Text::SaveWordWrappingState(TMPro::WordWrapState& state, int index, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SaveWordWrappingState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SaveWordWrappingState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, index, count);
}
// Autogenerated method: TMPro.TMP_Text.RestoreWordWrappingState
int TMPro::TMP_Text::RestoreWordWrappingState(TMPro::WordWrapState& state) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::RestoreWordWrappingState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RestoreWordWrappingState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, state);
}
// Autogenerated method: TMPro.TMP_Text.SaveGlyphVertexInfo
void TMPro::TMP_Text::SaveGlyphVertexInfo(float padding, float style_padding, UnityEngine::Color32 vertexColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SaveGlyphVertexInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SaveGlyphVertexInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(padding), ::il2cpp_utils::ExtractType(style_padding), ::il2cpp_utils::ExtractType(vertexColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, padding, style_padding, vertexColor);
}
// Autogenerated method: TMPro.TMP_Text.SaveSpriteVertexInfo
void TMPro::TMP_Text::SaveSpriteVertexInfo(UnityEngine::Color32 vertexColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SaveSpriteVertexInfo");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SaveSpriteVertexInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vertexColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, vertexColor);
}
// Autogenerated method: TMPro.TMP_Text.FillCharacterVertexBuffers
void TMPro::TMP_Text::FillCharacterVertexBuffers(int i, int index_X4) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::FillCharacterVertexBuffers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FillCharacterVertexBuffers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(index_X4)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, i, index_X4);
}
// Autogenerated method: TMPro.TMP_Text.FillCharacterVertexBuffers
void TMPro::TMP_Text::FillCharacterVertexBuffers(int i, int index_X4, bool isVolumetric) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::FillCharacterVertexBuffers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FillCharacterVertexBuffers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(index_X4), ::il2cpp_utils::ExtractType(isVolumetric)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, i, index_X4, isVolumetric);
}
// Autogenerated method: TMPro.TMP_Text.FillSpriteVertexBuffers
void TMPro::TMP_Text::FillSpriteVertexBuffers(int i, int index_X4) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::FillSpriteVertexBuffers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FillSpriteVertexBuffers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(index_X4)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, i, index_X4);
}
// Autogenerated method: TMPro.TMP_Text.DrawUnderlineMesh
void TMPro::TMP_Text::DrawUnderlineMesh(UnityEngine::Vector3 start, UnityEngine::Vector3 end, int& index, float startScale, float endScale, float maxScale, float sdfScale, UnityEngine::Color32 underlineColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::DrawUnderlineMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawUnderlineMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(startScale), ::il2cpp_utils::ExtractType(endScale), ::il2cpp_utils::ExtractType(maxScale), ::il2cpp_utils::ExtractType(sdfScale), ::il2cpp_utils::ExtractType(underlineColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, start, end, index, startScale, endScale, maxScale, sdfScale, underlineColor);
}
// Autogenerated method: TMPro.TMP_Text.DrawTextHighlight
void TMPro::TMP_Text::DrawTextHighlight(UnityEngine::Vector3 start, UnityEngine::Vector3 end, int& index, UnityEngine::Color32 highlightColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::DrawTextHighlight");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DrawTextHighlight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(start), ::il2cpp_utils::ExtractType(end), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(highlightColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, start, end, index, highlightColor);
}
// Autogenerated method: TMPro.TMP_Text.LoadDefaultSettings
void TMPro::TMP_Text::LoadDefaultSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::LoadDefaultSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadDefaultSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.GetSpecialCharacters
void TMPro::TMP_Text::GetSpecialCharacters(TMPro::TMP_FontAsset* fontAsset) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetSpecialCharacters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpecialCharacters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fontAsset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, fontAsset);
}
// Autogenerated method: TMPro.TMP_Text.ReplaceTagWithCharacter
void TMPro::TMP_Text::ReplaceTagWithCharacter(::Array<int>* chars, int insertionIndex, int tagLength, ::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ReplaceTagWithCharacter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceTagWithCharacter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars), ::il2cpp_utils::ExtractType(insertionIndex), ::il2cpp_utils::ExtractType(tagLength), ::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, chars, insertionIndex, tagLength, c);
}
// Autogenerated method: TMPro.TMP_Text.GetFontAssetForWeight
TMPro::TMP_FontAsset* TMPro::TMP_Text::GetFontAssetForWeight(int fontWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetFontAssetForWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFontAssetForWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fontWeight)})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_FontAsset*, false>(this, ___internal__method, fontWeight);
}
// Autogenerated method: TMPro.TMP_Text.SetActiveSubMeshes
void TMPro::TMP_Text::SetActiveSubMeshes(bool state) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::SetActiveSubMeshes");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActiveSubMeshes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: TMPro.TMP_Text.ClearSubMeshObjects
void TMPro::TMP_Text::ClearSubMeshObjects() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ClearSubMeshObjects");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSubMeshObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.ClearMesh
void TMPro::TMP_Text::ClearMesh() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ClearMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.ClearMesh
void TMPro::TMP_Text::ClearMesh(bool uploadGeometry) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ClearMesh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearMesh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(uploadGeometry)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, uploadGeometry);
}
// Autogenerated method: TMPro.TMP_Text.GetParsedText
::Il2CppString* TMPro::TMP_Text::GetParsedText() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetParsedText");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParsedText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.PackUV
UnityEngine::Vector2 TMPro::TMP_Text::PackUV(float x, float y, float scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::PackUV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PackUV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(scale)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method, x, y, scale);
}
// Autogenerated method: TMPro.TMP_Text.PackUV
float TMPro::TMP_Text::PackUV(float x, float y) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::PackUV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PackUV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, x, y);
}
// Autogenerated method: TMPro.TMP_Text.InternalUpdate
void TMPro::TMP_Text::InternalUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::InternalUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.HexToInt
int TMPro::TMP_Text::HexToInt(::Il2CppChar hex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::HexToInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HexToInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hex)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, hex);
}
// Autogenerated method: TMPro.TMP_Text.GetUTF16
int TMPro::TMP_Text::GetUTF16(::Il2CppString* text, int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetUTF16");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUTF16", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, text, i);
}
// Autogenerated method: TMPro.TMP_Text.GetUTF16
int TMPro::TMP_Text::GetUTF16(System::Text::StringBuilder* text, int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetUTF16");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUTF16", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, text, i);
}
// Autogenerated method: TMPro.TMP_Text.GetUTF32
int TMPro::TMP_Text::GetUTF32(::Il2CppString* text, int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetUTF32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUTF32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, text, i);
}
// Autogenerated method: TMPro.TMP_Text.GetUTF32
int TMPro::TMP_Text::GetUTF32(System::Text::StringBuilder* text, int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetUTF32");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUTF32", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text), ::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, text, i);
}
// Autogenerated method: TMPro.TMP_Text.HexCharsToColor
UnityEngine::Color32 TMPro::TMP_Text::HexCharsToColor(::Array<::Il2CppChar>* hexChars, int tagCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::HexCharsToColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HexCharsToColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hexChars), ::il2cpp_utils::ExtractType(tagCount)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color32, false>(this, ___internal__method, hexChars, tagCount);
}
// Autogenerated method: TMPro.TMP_Text.HexCharsToColor
UnityEngine::Color32 TMPro::TMP_Text::HexCharsToColor(::Array<::Il2CppChar>* hexChars, int startIndex, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::HexCharsToColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HexCharsToColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hexChars), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color32, false>(this, ___internal__method, hexChars, startIndex, length);
}
// Autogenerated method: TMPro.TMP_Text.GetAttributeParameters
int TMPro::TMP_Text::GetAttributeParameters(::Array<::Il2CppChar>* chars, int startIndex, int length, ::Array<float>*& parameters) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::GetAttributeParameters");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAttributeParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(parameters)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, chars, startIndex, length, parameters);
}
// Autogenerated method: TMPro.TMP_Text.ConvertToFloat
float TMPro::TMP_Text::ConvertToFloat(::Array<::Il2CppChar>* chars, int startIndex, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ConvertToFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConvertToFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, chars, startIndex, length);
}
// Autogenerated method: TMPro.TMP_Text.ConvertToFloat
float TMPro::TMP_Text::ConvertToFloat(::Array<::Il2CppChar>* chars, int startIndex, int length, int& lastIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ConvertToFloat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ConvertToFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, chars, startIndex, length, lastIndex);
}
// Autogenerated method: TMPro.TMP_Text.ValidateHtmlTag
bool TMPro::TMP_Text::ValidateHtmlTag(::Array<TMPro::TMP_Text::UnicodeChar>* chars, int startIndex, int& endIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ValidateHtmlTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ValidateHtmlTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chars), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, chars, startIndex, endIndex);
}
// Autogenerated method: TMPro.TMP_Text.get_color
UnityEngine::Color TMPro::TMP_Text::get_color() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_color");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.set_color
void TMPro::TMP_Text::set_color(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::set_color");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_color", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_Text.get_transform
UnityEngine::Transform* TMPro::TMP_Text::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.get_rectTransform
UnityEngine::RectTransform* TMPro::TMP_Text::get_rectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::get_rectTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rectTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RectTransform*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_Text.CrossFadeColor
void TMPro::TMP_Text::CrossFadeColor(UnityEngine::Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::CrossFadeColor");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFadeColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetColor), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(ignoreTimeScale), ::il2cpp_utils::ExtractType(useAlpha)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetColor, duration, ignoreTimeScale, useAlpha);
}
// Autogenerated method: TMPro.TMP_Text.CrossFadeAlpha
void TMPro::TMP_Text::CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::CrossFadeAlpha");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFadeAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(alpha), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(ignoreTimeScale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, alpha, duration, ignoreTimeScale);
}
// Autogenerated method: TMPro.TMP_Text..cctor
void TMPro::TMP_Text::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_Text", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TMP_Text::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMP_Text::*)()>(&TMP_Text::get_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_text
// Il2CppName: set_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Il2CppString*)>(&TMP_Text::set_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_isRightToLeftText
// Il2CppName: get_isRightToLeftText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_isRightToLeftText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_isRightToLeftText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_isRightToLeftText
// Il2CppName: set_isRightToLeftText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_isRightToLeftText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_isRightToLeftText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_font
// Il2CppName: get_font
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (TMP_Text::*)()>(&TMP_Text::get_font)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_font", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_font
// Il2CppName: set_font
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::TMP_FontAsset*)>(&TMP_Text::set_font)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_font", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_fontSharedMaterial
// Il2CppName: get_fontSharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_Text::*)()>(&TMP_Text::get_fontSharedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_fontSharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_fontSharedMaterial
// Il2CppName: set_fontSharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Material*)>(&TMP_Text::set_fontSharedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_fontSharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_fontSharedMaterials
// Il2CppName: get_fontSharedMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Material*>* (TMP_Text::*)()>(&TMP_Text::get_fontSharedMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_fontSharedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_fontSharedMaterials
// Il2CppName: set_fontSharedMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Array<UnityEngine::Material*>*)>(&TMP_Text::set_fontSharedMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_fontSharedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Material*>*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_fontMaterial
// Il2CppName: get_fontMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_Text::*)()>(&TMP_Text::get_fontMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_fontMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_fontMaterial
// Il2CppName: set_fontMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Material*)>(&TMP_Text::set_fontMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_fontMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_fontMaterials
// Il2CppName: get_fontMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Material*>* (TMP_Text::*)()>(&TMP_Text::get_fontMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_fontMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_fontMaterials
// Il2CppName: set_fontMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Array<UnityEngine::Material*>*)>(&TMP_Text::set_fontMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_fontMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Material*>*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_alpha
// Il2CppName: get_alpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_alpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_alpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_alpha
// Il2CppName: set_alpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float)>(&TMP_Text::set_alpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_alpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_enableVertexGradient
// Il2CppName: get_enableVertexGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_enableVertexGradient)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_enableVertexGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_enableVertexGradient
// Il2CppName: set_enableVertexGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_enableVertexGradient)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_enableVertexGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_colorGradient
// Il2CppName: get_colorGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::VertexGradient (TMP_Text::*)()>(&TMP_Text::get_colorGradient)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_colorGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_colorGradient
// Il2CppName: set_colorGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::VertexGradient)>(&TMP_Text::set_colorGradient)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_colorGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::VertexGradient>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_colorGradientPreset
// Il2CppName: get_colorGradientPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_ColorGradient* (TMP_Text::*)()>(&TMP_Text::get_colorGradientPreset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_colorGradientPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_colorGradientPreset
// Il2CppName: set_colorGradientPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::TMP_ColorGradient*)>(&TMP_Text::set_colorGradientPreset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_colorGradientPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_ColorGradient*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_spriteAsset
// Il2CppName: get_spriteAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SpriteAsset* (TMP_Text::*)()>(&TMP_Text::get_spriteAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_spriteAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_spriteAsset
// Il2CppName: set_spriteAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::TMP_SpriteAsset*)>(&TMP_Text::set_spriteAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_spriteAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_SpriteAsset*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_tintAllSprites
// Il2CppName: get_tintAllSprites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_tintAllSprites)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_tintAllSprites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_tintAllSprites
// Il2CppName: set_tintAllSprites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_tintAllSprites)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_tintAllSprites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_overrideColorTags
// Il2CppName: get_overrideColorTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_overrideColorTags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_overrideColorTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_overrideColorTags
// Il2CppName: set_overrideColorTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_overrideColorTags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_overrideColorTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_faceColor
// Il2CppName: get_faceColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color32 (TMP_Text::*)()>(&TMP_Text::get_faceColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_faceColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_faceColor
// Il2CppName: set_faceColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Color32)>(&TMP_Text::set_faceColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_faceColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_outlineColor
// Il2CppName: get_outlineColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color32 (TMP_Text::*)()>(&TMP_Text::get_outlineColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_outlineColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_outlineColor
// Il2CppName: set_outlineColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Color32)>(&TMP_Text::set_outlineColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_outlineColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_outlineWidth
// Il2CppName: get_outlineWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_outlineWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_outlineWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_outlineWidth
// Il2CppName: set_outlineWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float)>(&TMP_Text::set_outlineWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_outlineWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_fontSize
// Il2CppName: get_fontSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_fontSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_fontSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_fontSize
// Il2CppName: set_fontSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float)>(&TMP_Text::set_fontSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_fontSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_fontScale
// Il2CppName: get_fontScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_fontScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_fontScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_fontWeight
// Il2CppName: get_fontWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::FontWeight (TMP_Text::*)()>(&TMP_Text::get_fontWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_fontWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_fontWeight
// Il2CppName: set_fontWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::FontWeight)>(&TMP_Text::set_fontWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_fontWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::FontWeight>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_pixelsPerUnit
// Il2CppName: get_pixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_pixelsPerUnit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_pixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_enableAutoSizing
// Il2CppName: get_enableAutoSizing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_enableAutoSizing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_enableAutoSizing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_enableAutoSizing
// Il2CppName: set_enableAutoSizing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_enableAutoSizing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_enableAutoSizing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_fontSizeMin
// Il2CppName: get_fontSizeMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_fontSizeMin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_fontSizeMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_fontSizeMin
// Il2CppName: set_fontSizeMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float)>(&TMP_Text::set_fontSizeMin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_fontSizeMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_fontSizeMax
// Il2CppName: get_fontSizeMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_fontSizeMax)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_fontSizeMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_fontSizeMax
// Il2CppName: set_fontSizeMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float)>(&TMP_Text::set_fontSizeMax)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_fontSizeMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_fontStyle
// Il2CppName: get_fontStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::FontStyles (TMP_Text::*)()>(&TMP_Text::get_fontStyle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_fontStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_fontStyle
// Il2CppName: set_fontStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::FontStyles)>(&TMP_Text::set_fontStyle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_fontStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::FontStyles>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_isUsingBold
// Il2CppName: get_isUsingBold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_isUsingBold)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_isUsingBold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_alignment
// Il2CppName: get_alignment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TextAlignmentOptions (TMP_Text::*)()>(&TMP_Text::get_alignment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_alignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_alignment
// Il2CppName: set_alignment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::TextAlignmentOptions)>(&TMP_Text::set_alignment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_alignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextAlignmentOptions>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_characterSpacing
// Il2CppName: get_characterSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_characterSpacing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_characterSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_characterSpacing
// Il2CppName: set_characterSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float)>(&TMP_Text::set_characterSpacing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_characterSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_wordSpacing
// Il2CppName: get_wordSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_wordSpacing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_wordSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_wordSpacing
// Il2CppName: set_wordSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float)>(&TMP_Text::set_wordSpacing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_wordSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_lineSpacing
// Il2CppName: get_lineSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_lineSpacing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_lineSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_lineSpacing
// Il2CppName: set_lineSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float)>(&TMP_Text::set_lineSpacing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_lineSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_lineSpacingAdjustment
// Il2CppName: get_lineSpacingAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_lineSpacingAdjustment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_lineSpacingAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_lineSpacingAdjustment
// Il2CppName: set_lineSpacingAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float)>(&TMP_Text::set_lineSpacingAdjustment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_lineSpacingAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_paragraphSpacing
// Il2CppName: get_paragraphSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_paragraphSpacing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_paragraphSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_paragraphSpacing
// Il2CppName: set_paragraphSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float)>(&TMP_Text::set_paragraphSpacing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_paragraphSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_characterWidthAdjustment
// Il2CppName: get_characterWidthAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_characterWidthAdjustment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_characterWidthAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_characterWidthAdjustment
// Il2CppName: set_characterWidthAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float)>(&TMP_Text::set_characterWidthAdjustment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_characterWidthAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_enableWordWrapping
// Il2CppName: get_enableWordWrapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_enableWordWrapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_enableWordWrapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_enableWordWrapping
// Il2CppName: set_enableWordWrapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_enableWordWrapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_enableWordWrapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_wordWrappingRatios
// Il2CppName: get_wordWrappingRatios
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_wordWrappingRatios)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_wordWrappingRatios", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_wordWrappingRatios
// Il2CppName: set_wordWrappingRatios
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float)>(&TMP_Text::set_wordWrappingRatios)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_wordWrappingRatios", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_overflowMode
// Il2CppName: get_overflowMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TextOverflowModes (TMP_Text::*)()>(&TMP_Text::get_overflowMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_overflowMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_overflowMode
// Il2CppName: set_overflowMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::TextOverflowModes)>(&TMP_Text::set_overflowMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_overflowMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextOverflowModes>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_isTextOverflowing
// Il2CppName: get_isTextOverflowing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_isTextOverflowing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_isTextOverflowing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_firstOverflowCharacterIndex
// Il2CppName: get_firstOverflowCharacterIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)()>(&TMP_Text::get_firstOverflowCharacterIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_firstOverflowCharacterIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_linkedTextComponent
// Il2CppName: get_linkedTextComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_Text* (TMP_Text::*)()>(&TMP_Text::get_linkedTextComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_linkedTextComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_linkedTextComponent
// Il2CppName: set_linkedTextComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::TMP_Text*)>(&TMP_Text::set_linkedTextComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_linkedTextComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_isLinkedTextComponent
// Il2CppName: get_isLinkedTextComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_isLinkedTextComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_isLinkedTextComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_isLinkedTextComponent
// Il2CppName: set_isLinkedTextComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_isLinkedTextComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_isLinkedTextComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_isTextTruncated
// Il2CppName: get_isTextTruncated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_isTextTruncated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_isTextTruncated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_enableKerning
// Il2CppName: get_enableKerning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_enableKerning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_enableKerning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_enableKerning
// Il2CppName: set_enableKerning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_enableKerning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_enableKerning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_extraPadding
// Il2CppName: get_extraPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_extraPadding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_extraPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_extraPadding
// Il2CppName: set_extraPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_extraPadding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_extraPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_richText
// Il2CppName: get_richText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_richText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_richText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_richText
// Il2CppName: set_richText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_richText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_richText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_parseCtrlCharacters
// Il2CppName: get_parseCtrlCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_parseCtrlCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_parseCtrlCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_parseCtrlCharacters
// Il2CppName: set_parseCtrlCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_parseCtrlCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_parseCtrlCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_isOverlay
// Il2CppName: get_isOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_isOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_isOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_isOverlay
// Il2CppName: set_isOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_isOverlay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_isOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_isOrthographic
// Il2CppName: get_isOrthographic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_isOrthographic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_isOrthographic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_isOrthographic
// Il2CppName: set_isOrthographic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_isOrthographic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_isOrthographic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_enableCulling
// Il2CppName: get_enableCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_enableCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_enableCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_enableCulling
// Il2CppName: set_enableCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_enableCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_enableCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_ignoreRectMaskCulling
// Il2CppName: get_ignoreRectMaskCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_ignoreRectMaskCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_ignoreRectMaskCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_ignoreRectMaskCulling
// Il2CppName: set_ignoreRectMaskCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_ignoreRectMaskCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_ignoreRectMaskCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_ignoreVisibility
// Il2CppName: get_ignoreVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_ignoreVisibility)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_ignoreVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_ignoreVisibility
// Il2CppName: set_ignoreVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_ignoreVisibility)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_ignoreVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_horizontalMapping
// Il2CppName: get_horizontalMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TextureMappingOptions (TMP_Text::*)()>(&TMP_Text::get_horizontalMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_horizontalMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_horizontalMapping
// Il2CppName: set_horizontalMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::TextureMappingOptions)>(&TMP_Text::set_horizontalMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_horizontalMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextureMappingOptions>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_verticalMapping
// Il2CppName: get_verticalMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TextureMappingOptions (TMP_Text::*)()>(&TMP_Text::get_verticalMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_verticalMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_verticalMapping
// Il2CppName: set_verticalMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::TextureMappingOptions)>(&TMP_Text::set_verticalMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_verticalMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextureMappingOptions>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_mappingUvLineOffset
// Il2CppName: get_mappingUvLineOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_mappingUvLineOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_mappingUvLineOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_mappingUvLineOffset
// Il2CppName: set_mappingUvLineOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float)>(&TMP_Text::set_mappingUvLineOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_mappingUvLineOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_renderMode
// Il2CppName: get_renderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TextRenderFlags (TMP_Text::*)()>(&TMP_Text::get_renderMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_renderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_renderMode
// Il2CppName: set_renderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::TextRenderFlags)>(&TMP_Text::set_renderMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_renderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TextRenderFlags>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_geometrySortingOrder
// Il2CppName: get_geometrySortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::VertexSortingOrder (TMP_Text::*)()>(&TMP_Text::get_geometrySortingOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_geometrySortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_geometrySortingOrder
// Il2CppName: set_geometrySortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::VertexSortingOrder)>(&TMP_Text::set_geometrySortingOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_geometrySortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::VertexSortingOrder>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_vertexBufferAutoSizeReduction
// Il2CppName: get_vertexBufferAutoSizeReduction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_vertexBufferAutoSizeReduction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_vertexBufferAutoSizeReduction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_vertexBufferAutoSizeReduction
// Il2CppName: set_vertexBufferAutoSizeReduction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_vertexBufferAutoSizeReduction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_vertexBufferAutoSizeReduction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_firstVisibleCharacter
// Il2CppName: get_firstVisibleCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)()>(&TMP_Text::get_firstVisibleCharacter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_firstVisibleCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_firstVisibleCharacter
// Il2CppName: set_firstVisibleCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(int)>(&TMP_Text::set_firstVisibleCharacter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_firstVisibleCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_maxVisibleCharacters
// Il2CppName: get_maxVisibleCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)()>(&TMP_Text::get_maxVisibleCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_maxVisibleCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_maxVisibleCharacters
// Il2CppName: set_maxVisibleCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(int)>(&TMP_Text::set_maxVisibleCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_maxVisibleCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_maxVisibleWords
// Il2CppName: get_maxVisibleWords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)()>(&TMP_Text::get_maxVisibleWords)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_maxVisibleWords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_maxVisibleWords
// Il2CppName: set_maxVisibleWords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(int)>(&TMP_Text::set_maxVisibleWords)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_maxVisibleWords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_maxVisibleLines
// Il2CppName: get_maxVisibleLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)()>(&TMP_Text::get_maxVisibleLines)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_maxVisibleLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_maxVisibleLines
// Il2CppName: set_maxVisibleLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(int)>(&TMP_Text::set_maxVisibleLines)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_maxVisibleLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_useMaxVisibleDescender
// Il2CppName: get_useMaxVisibleDescender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_useMaxVisibleDescender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_useMaxVisibleDescender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_useMaxVisibleDescender
// Il2CppName: set_useMaxVisibleDescender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_useMaxVisibleDescender)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_useMaxVisibleDescender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_pageToDisplay
// Il2CppName: get_pageToDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)()>(&TMP_Text::get_pageToDisplay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_pageToDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_pageToDisplay
// Il2CppName: set_pageToDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(int)>(&TMP_Text::set_pageToDisplay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_pageToDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_margin
// Il2CppName: get_margin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector4 (TMP_Text::*)()>(&TMP_Text::get_margin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_margin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_margin
// Il2CppName: set_margin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Vector4)>(&TMP_Text::set_margin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_margin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_textInfo
// Il2CppName: get_textInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_TextInfo* (TMP_Text::*)()>(&TMP_Text::get_textInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_textInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_havePropertiesChanged
// Il2CppName: get_havePropertiesChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_havePropertiesChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_havePropertiesChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_havePropertiesChanged
// Il2CppName: set_havePropertiesChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_havePropertiesChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_havePropertiesChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_isUsingLegacyAnimationComponent
// Il2CppName: get_isUsingLegacyAnimationComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_isUsingLegacyAnimationComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_isUsingLegacyAnimationComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_isUsingLegacyAnimationComponent
// Il2CppName: set_isUsingLegacyAnimationComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_isUsingLegacyAnimationComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_isUsingLegacyAnimationComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_autoSizeTextContainer
// Il2CppName: get_autoSizeTextContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_autoSizeTextContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_autoSizeTextContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_autoSizeTextContainer
// Il2CppName: set_autoSizeTextContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_autoSizeTextContainer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_autoSizeTextContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_mesh
// Il2CppName: get_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Mesh* (TMP_Text::*)()>(&TMP_Text::get_mesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_isVolumetricText
// Il2CppName: get_isVolumetricText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)()>(&TMP_Text::get_isVolumetricText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_isVolumetricText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_isVolumetricText
// Il2CppName: set_isVolumetricText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::set_isVolumetricText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_isVolumetricText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_bounds
// Il2CppName: get_bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Bounds (TMP_Text::*)()>(&TMP_Text::get_bounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_textBounds
// Il2CppName: get_textBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Bounds (TMP_Text::*)()>(&TMP_Text::get_textBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_textBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_spriteAnimator
// Il2CppName: get_spriteAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_SpriteAnimator* (TMP_Text::*)()>(&TMP_Text::get_spriteAnimator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_spriteAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_flexibleHeight
// Il2CppName: get_flexibleHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_flexibleHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_flexibleHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_flexibleWidth
// Il2CppName: get_flexibleWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_flexibleWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_flexibleWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_minWidth
// Il2CppName: get_minWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_minWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_minWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_minHeight
// Il2CppName: get_minHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_minHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_minHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_maxWidth
// Il2CppName: get_maxWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_maxWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_maxWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_maxHeight
// Il2CppName: get_maxHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_maxHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_maxHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_layoutElement
// Il2CppName: get_layoutElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::LayoutElement* (TMP_Text::*)()>(&TMP_Text::get_layoutElement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_layoutElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_preferredWidth
// Il2CppName: get_preferredWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_preferredWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_preferredWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_preferredHeight
// Il2CppName: get_preferredHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_preferredHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_preferredHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_renderedWidth
// Il2CppName: get_renderedWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_renderedWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_renderedWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_renderedHeight
// Il2CppName: get_renderedHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::get_renderedHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_renderedHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_layoutPriority
// Il2CppName: get_layoutPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)()>(&TMP_Text::get_layoutPriority)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_layoutPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::LoadFontAsset
// Il2CppName: LoadFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)()>(&TMP_Text::LoadFontAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "LoadFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetSharedMaterial
// Il2CppName: SetSharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Material*)>(&TMP_Text::SetSharedMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetSharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetMaterial
// Il2CppName: GetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_Text::*)(UnityEngine::Material*)>(&TMP_Text::GetMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetFontBaseMaterial
// Il2CppName: SetFontBaseMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Material*)>(&TMP_Text::SetFontBaseMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetFontBaseMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetSharedMaterials
// Il2CppName: GetSharedMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Material*>* (TMP_Text::*)()>(&TMP_Text::GetSharedMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetSharedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetSharedMaterials
// Il2CppName: SetSharedMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Array<UnityEngine::Material*>*)>(&TMP_Text::SetSharedMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetSharedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Material*>*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetMaterials
// Il2CppName: GetMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Material*>* (TMP_Text::*)(::Array<UnityEngine::Material*>*)>(&TMP_Text::GetMaterials)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Material*>*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::CreateMaterialInstance
// Il2CppName: CreateMaterialInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (TMP_Text::*)(UnityEngine::Material*)>(&TMP_Text::CreateMaterialInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "CreateMaterialInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetVertexColorGradient
// Il2CppName: SetVertexColorGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::TMP_ColorGradient*)>(&TMP_Text::SetVertexColorGradient)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetVertexColorGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_ColorGradient*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetTextSortingOrder
// Il2CppName: SetTextSortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::VertexSortingOrder)>(&TMP_Text::SetTextSortingOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetTextSortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::VertexSortingOrder>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetTextSortingOrder
// Il2CppName: SetTextSortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Array<int>*)>(&TMP_Text::SetTextSortingOrder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetTextSortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetFaceColor
// Il2CppName: SetFaceColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Color32)>(&TMP_Text::SetFaceColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetFaceColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetOutlineColor
// Il2CppName: SetOutlineColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Color32)>(&TMP_Text::SetOutlineColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetOutlineColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetOutlineThickness
// Il2CppName: SetOutlineThickness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float)>(&TMP_Text::SetOutlineThickness)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetOutlineThickness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetShaderDepth
// Il2CppName: SetShaderDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)()>(&TMP_Text::SetShaderDepth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetShaderDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetCulling
// Il2CppName: SetCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)()>(&TMP_Text::SetCulling)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetPaddingForMaterial
// Il2CppName: GetPaddingForMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::GetPaddingForMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetPaddingForMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetPaddingForMaterial
// Il2CppName: GetPaddingForMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)(UnityEngine::Material*)>(&TMP_Text::GetPaddingForMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetPaddingForMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Material*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetTextContainerLocalCorners
// Il2CppName: GetTextContainerLocalCorners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector3>* (TMP_Text::*)()>(&TMP_Text::GetTextContainerLocalCorners)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetTextContainerLocalCorners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::ForceMeshUpdate
// Il2CppName: ForceMeshUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)()>(&TMP_Text::ForceMeshUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ForceMeshUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::ForceMeshUpdate
// Il2CppName: ForceMeshUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::ForceMeshUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ForceMeshUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetTextInternal
// Il2CppName: SetTextInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Il2CppString*)>(&TMP_Text::SetTextInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetTextInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::UpdateGeometry
// Il2CppName: UpdateGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Mesh*, int)>(&TMP_Text::UpdateGeometry)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "UpdateGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Mesh*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::UpdateVertexData
// Il2CppName: UpdateVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::TMP_VertexDataUpdateFlags)>(&TMP_Text::UpdateVertexData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "UpdateVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_VertexDataUpdateFlags>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::UpdateVertexData
// Il2CppName: UpdateVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)()>(&TMP_Text::UpdateVertexData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "UpdateVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetVertices
// Il2CppName: SetVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Array<UnityEngine::Vector3>*)>(&TMP_Text::SetVertices)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::UpdateMeshPadding
// Il2CppName: UpdateMeshPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)()>(&TMP_Text::UpdateMeshPadding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "UpdateMeshPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::InternalCrossFadeColor
// Il2CppName: InternalCrossFadeColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Color, float, bool, bool)>(&TMP_Text::InternalCrossFadeColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "InternalCrossFadeColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::InternalCrossFadeAlpha
// Il2CppName: InternalCrossFadeAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float, float, bool)>(&TMP_Text::InternalCrossFadeAlpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "InternalCrossFadeAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ParseInputText
// Il2CppName: ParseInputText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)()>(&TMP_Text::ParseInputText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ParseInputText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Il2CppString*)>(&TMP_Text::SetText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Il2CppString*, bool)>(&TMP_Text::SetText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Il2CppString*, float)>(&TMP_Text::SetText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Il2CppString*, float, float)>(&TMP_Text::SetText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Il2CppString*, float, float, float)>(&TMP_Text::SetText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(System::Text::StringBuilder*)>(&TMP_Text::SetText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetCharArray
// Il2CppName: SetCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Array<::Il2CppChar>*)>(&TMP_Text::SetCharArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetCharArray
// Il2CppName: SetCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Array<::Il2CppChar>*, int, int)>(&TMP_Text::SetCharArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetCharArray
// Il2CppName: SetCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Array<int>*, int, int)>(&TMP_Text::SetCharArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetTextArrayToCharArray
// Il2CppName: SetTextArrayToCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Array<::Il2CppChar>*, ::Array<TMPro::TMP_Text::UnicodeChar>*&)>(&TMP_Text::SetTextArrayToCharArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetTextArrayToCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_Text::UnicodeChar>*&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::StringToCharArray
// Il2CppName: StringToCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Il2CppString*, ::Array<TMPro::TMP_Text::UnicodeChar>*&)>(&TMP_Text::StringToCharArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "StringToCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_Text::UnicodeChar>*&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::StringBuilderToIntArray
// Il2CppName: StringBuilderToIntArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(System::Text::StringBuilder*, ::Array<TMPro::TMP_Text::UnicodeChar>*&)>(&TMP_Text::StringBuilderToIntArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "StringBuilderToIntArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_Text::UnicodeChar>*&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ReplaceOpeningStyleTag
// Il2CppName: ReplaceOpeningStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)(::Il2CppString*&, int, int&, ::Array<TMPro::TMP_Text::UnicodeChar>*&, int&)>(&TMP_Text::ReplaceOpeningStyleTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ReplaceOpeningStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_Text::UnicodeChar>*&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ReplaceOpeningStyleTag
// Il2CppName: ReplaceOpeningStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)(::Array<int>*&, int, int&, ::Array<TMPro::TMP_Text::UnicodeChar>*&, int&)>(&TMP_Text::ReplaceOpeningStyleTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ReplaceOpeningStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_Text::UnicodeChar>*&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ReplaceOpeningStyleTag
// Il2CppName: ReplaceOpeningStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)(::Array<::Il2CppChar>*&, int, int&, ::Array<TMPro::TMP_Text::UnicodeChar>*&, int&)>(&TMP_Text::ReplaceOpeningStyleTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ReplaceOpeningStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_Text::UnicodeChar>*&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ReplaceOpeningStyleTag
// Il2CppName: ReplaceOpeningStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)(System::Text::StringBuilder*&, int, int&, ::Array<TMPro::TMP_Text::UnicodeChar>*&, int&)>(&TMP_Text::ReplaceOpeningStyleTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ReplaceOpeningStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_Text::UnicodeChar>*&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ReplaceClosingStyleTag
// Il2CppName: ReplaceClosingStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)(::Il2CppString*&, int, ::Array<TMPro::TMP_Text::UnicodeChar>*&, int&)>(&TMP_Text::ReplaceClosingStyleTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ReplaceClosingStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_Text::UnicodeChar>*&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ReplaceClosingStyleTag
// Il2CppName: ReplaceClosingStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)(::Array<int>*&, int, ::Array<TMPro::TMP_Text::UnicodeChar>*&, int&)>(&TMP_Text::ReplaceClosingStyleTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ReplaceClosingStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_Text::UnicodeChar>*&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ReplaceClosingStyleTag
// Il2CppName: ReplaceClosingStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)(::Array<::Il2CppChar>*&, int, ::Array<TMPro::TMP_Text::UnicodeChar>*&, int&)>(&TMP_Text::ReplaceClosingStyleTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ReplaceClosingStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_Text::UnicodeChar>*&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ReplaceClosingStyleTag
// Il2CppName: ReplaceClosingStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)(System::Text::StringBuilder*&, int, ::Array<TMPro::TMP_Text::UnicodeChar>*&, int&)>(&TMP_Text::ReplaceClosingStyleTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ReplaceClosingStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_Text::UnicodeChar>*&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::IsTagName
// Il2CppName: IsTagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)(::Il2CppString*&, ::Il2CppString*, int)>(&TMP_Text::IsTagName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "IsTagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::IsTagName
// Il2CppName: IsTagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)(::Array<::Il2CppChar>*&, ::Il2CppString*, int)>(&TMP_Text::IsTagName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "IsTagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::IsTagName
// Il2CppName: IsTagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)(::Array<int>*&, ::Il2CppString*, int)>(&TMP_Text::IsTagName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "IsTagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::IsTagName
// Il2CppName: IsTagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)(System::Text::StringBuilder*&, ::Il2CppString*, int)>(&TMP_Text::IsTagName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "IsTagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetTagHashCode
// Il2CppName: GetTagHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)(::Il2CppString*&, int, int&)>(&TMP_Text::GetTagHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetTagHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetTagHashCode
// Il2CppName: GetTagHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)(::Array<::Il2CppChar>*&, int, int&)>(&TMP_Text::GetTagHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetTagHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetTagHashCode
// Il2CppName: GetTagHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)(::Array<int>*&, int, int&)>(&TMP_Text::GetTagHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetTagHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetTagHashCode
// Il2CppName: GetTagHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)(System::Text::StringBuilder*&, int, int&)>(&TMP_Text::GetTagHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetTagHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ResizeInternalArray
// Il2CppName: ResizeInternalArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TMP_Text::AddFloatToCharArray
// Il2CppName: AddFloatToCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(double, int&, int)>(&TMP_Text::AddFloatToCharArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "AddFloatToCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::AddIntToCharArray
// Il2CppName: AddIntToCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(double, int&, int)>(&TMP_Text::AddIntToCharArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "AddIntToCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetArraySizes
// Il2CppName: SetArraySizes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)(::Array<TMPro::TMP_Text::UnicodeChar>*)>(&TMP_Text::SetArraySizes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetArraySizes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_Text::UnicodeChar>*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GenerateTextMesh
// Il2CppName: GenerateTextMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)()>(&TMP_Text::GenerateTextMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GenerateTextMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetPreferredValues
// Il2CppName: GetPreferredValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (TMP_Text::*)()>(&TMP_Text::GetPreferredValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetPreferredValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetPreferredValues
// Il2CppName: GetPreferredValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (TMP_Text::*)(float, float)>(&TMP_Text::GetPreferredValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetPreferredValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetPreferredValues
// Il2CppName: GetPreferredValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (TMP_Text::*)(::Il2CppString*)>(&TMP_Text::GetPreferredValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetPreferredValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetPreferredValues
// Il2CppName: GetPreferredValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (TMP_Text::*)(::Il2CppString*, float, float)>(&TMP_Text::GetPreferredValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetPreferredValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetPreferredWidth
// Il2CppName: GetPreferredWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::GetPreferredWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetPreferredWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetPreferredWidth
// Il2CppName: GetPreferredWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)(UnityEngine::Vector2)>(&TMP_Text::GetPreferredWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetPreferredWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetPreferredHeight
// Il2CppName: GetPreferredHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::GetPreferredHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetPreferredHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetPreferredHeight
// Il2CppName: GetPreferredHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)(UnityEngine::Vector2)>(&TMP_Text::GetPreferredHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetPreferredHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetRenderedValues
// Il2CppName: GetRenderedValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (TMP_Text::*)()>(&TMP_Text::GetRenderedValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetRenderedValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetRenderedValues
// Il2CppName: GetRenderedValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (TMP_Text::*)(bool)>(&TMP_Text::GetRenderedValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetRenderedValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetRenderedWidth
// Il2CppName: GetRenderedWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::GetRenderedWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetRenderedWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetRenderedWidth
// Il2CppName: GetRenderedWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)(bool)>(&TMP_Text::GetRenderedWidth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetRenderedWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetRenderedHeight
// Il2CppName: GetRenderedHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)()>(&TMP_Text::GetRenderedHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetRenderedHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetRenderedHeight
// Il2CppName: GetRenderedHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)(bool)>(&TMP_Text::GetRenderedHeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetRenderedHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::CalculatePreferredValues
// Il2CppName: CalculatePreferredValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (TMP_Text::*)(float, UnityEngine::Vector2, bool)>(&TMP_Text::CalculatePreferredValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "CalculatePreferredValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetCompoundBounds
// Il2CppName: GetCompoundBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Bounds (TMP_Text::*)()>(&TMP_Text::GetCompoundBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetCompoundBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetTextBounds
// Il2CppName: GetTextBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Bounds (TMP_Text::*)()>(&TMP_Text::GetTextBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetTextBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetTextBounds
// Il2CppName: GetTextBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Bounds (TMP_Text::*)(bool)>(&TMP_Text::GetTextBounds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetTextBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::AdjustLineOffset
// Il2CppName: AdjustLineOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(int, int, float)>(&TMP_Text::AdjustLineOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "AdjustLineOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ResizeLineExtents
// Il2CppName: ResizeLineExtents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(int)>(&TMP_Text::ResizeLineExtents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ResizeLineExtents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetTextInfo
// Il2CppName: GetTextInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_TextInfo* (TMP_Text::*)(::Il2CppString*)>(&TMP_Text::GetTextInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetTextInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ComputeMarginSize
// Il2CppName: ComputeMarginSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)()>(&TMP_Text::ComputeMarginSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ComputeMarginSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::SaveWordWrappingState
// Il2CppName: SaveWordWrappingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::WordWrapState&, int, int)>(&TMP_Text::SaveWordWrappingState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SaveWordWrappingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::WordWrapState&>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::RestoreWordWrappingState
// Il2CppName: RestoreWordWrappingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)(TMPro::WordWrapState&)>(&TMP_Text::RestoreWordWrappingState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "RestoreWordWrappingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::WordWrapState&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SaveGlyphVertexInfo
// Il2CppName: SaveGlyphVertexInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float, float, UnityEngine::Color32)>(&TMP_Text::SaveGlyphVertexInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SaveGlyphVertexInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SaveSpriteVertexInfo
// Il2CppName: SaveSpriteVertexInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Color32)>(&TMP_Text::SaveSpriteVertexInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SaveSpriteVertexInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::FillCharacterVertexBuffers
// Il2CppName: FillCharacterVertexBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(int, int)>(&TMP_Text::FillCharacterVertexBuffers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "FillCharacterVertexBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::FillCharacterVertexBuffers
// Il2CppName: FillCharacterVertexBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(int, int, bool)>(&TMP_Text::FillCharacterVertexBuffers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "FillCharacterVertexBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::FillSpriteVertexBuffers
// Il2CppName: FillSpriteVertexBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(int, int)>(&TMP_Text::FillSpriteVertexBuffers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "FillSpriteVertexBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::DrawUnderlineMesh
// Il2CppName: DrawUnderlineMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Vector3, UnityEngine::Vector3, int&, float, float, float, float, UnityEngine::Color32)>(&TMP_Text::DrawUnderlineMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "DrawUnderlineMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::DrawTextHighlight
// Il2CppName: DrawTextHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Vector3, UnityEngine::Vector3, int&, UnityEngine::Color32)>(&TMP_Text::DrawTextHighlight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "DrawTextHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::LoadDefaultSettings
// Il2CppName: LoadDefaultSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)()>(&TMP_Text::LoadDefaultSettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "LoadDefaultSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetSpecialCharacters
// Il2CppName: GetSpecialCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(TMPro::TMP_FontAsset*)>(&TMP_Text::GetSpecialCharacters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetSpecialCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_FontAsset*>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ReplaceTagWithCharacter
// Il2CppName: ReplaceTagWithCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(::Array<int>*, int, int, ::Il2CppChar)>(&TMP_Text::ReplaceTagWithCharacter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ReplaceTagWithCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<int>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetFontAssetForWeight
// Il2CppName: GetFontAssetForWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_FontAsset* (TMP_Text::*)(int)>(&TMP_Text::GetFontAssetForWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetFontAssetForWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::SetActiveSubMeshes
// Il2CppName: SetActiveSubMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::SetActiveSubMeshes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "SetActiveSubMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ClearSubMeshObjects
// Il2CppName: ClearSubMeshObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)()>(&TMP_Text::ClearSubMeshObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ClearSubMeshObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::ClearMesh
// Il2CppName: ClearMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)()>(&TMP_Text::ClearMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ClearMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::ClearMesh
// Il2CppName: ClearMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(bool)>(&TMP_Text::ClearMesh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ClearMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetParsedText
// Il2CppName: GetParsedText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TMP_Text::*)()>(&TMP_Text::GetParsedText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetParsedText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::PackUV
// Il2CppName: PackUV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (TMP_Text::*)(float, float, float)>(&TMP_Text::PackUV)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "PackUV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::PackUV
// Il2CppName: PackUV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)(float, float)>(&TMP_Text::PackUV)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "PackUV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::InternalUpdate
// Il2CppName: InternalUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)()>(&TMP_Text::InternalUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "InternalUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::HexToInt
// Il2CppName: HexToInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)(::Il2CppChar)>(&TMP_Text::HexToInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "HexToInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetUTF16
// Il2CppName: GetUTF16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)(::Il2CppString*, int)>(&TMP_Text::GetUTF16)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetUTF16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetUTF16
// Il2CppName: GetUTF16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)(System::Text::StringBuilder*, int)>(&TMP_Text::GetUTF16)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetUTF16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetUTF32
// Il2CppName: GetUTF32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)(::Il2CppString*, int)>(&TMP_Text::GetUTF32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetUTF32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetUTF32
// Il2CppName: GetUTF32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)(System::Text::StringBuilder*, int)>(&TMP_Text::GetUTF32)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetUTF32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Text::StringBuilder*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::HexCharsToColor
// Il2CppName: HexCharsToColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color32 (TMP_Text::*)(::Array<::Il2CppChar>*, int)>(&TMP_Text::HexCharsToColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "HexCharsToColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::HexCharsToColor
// Il2CppName: HexCharsToColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color32 (TMP_Text::*)(::Array<::Il2CppChar>*, int, int)>(&TMP_Text::HexCharsToColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "HexCharsToColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::GetAttributeParameters
// Il2CppName: GetAttributeParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMP_Text::*)(::Array<::Il2CppChar>*, int, int, ::Array<float>*&)>(&TMP_Text::GetAttributeParameters)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "GetAttributeParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Array<float>*&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ConvertToFloat
// Il2CppName: ConvertToFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)(::Array<::Il2CppChar>*, int, int)>(&TMP_Text::ConvertToFloat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ConvertToFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ConvertToFloat
// Il2CppName: ConvertToFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_Text::*)(::Array<::Il2CppChar>*, int, int, int&)>(&TMP_Text::ConvertToFloat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ConvertToFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::ValidateHtmlTag
// Il2CppName: ValidateHtmlTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMP_Text::*)(::Array<TMPro::TMP_Text::UnicodeChar>*, int, int&)>(&TMP_Text::ValidateHtmlTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "ValidateHtmlTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<TMPro::TMP_Text::UnicodeChar>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (TMP_Text::*)()>(&TMP_Text::get_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Color)>(&TMP_Text::set_color)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_transform
// Il2CppName: get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (TMP_Text::*)()>(&TMP_Text::get_transform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::get_rectTransform
// Il2CppName: get_rectTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RectTransform* (TMP_Text::*)()>(&TMP_Text::get_rectTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "get_rectTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::CrossFadeColor
// Il2CppName: CrossFadeColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(UnityEngine::Color, float, bool, bool)>(&TMP_Text::CrossFadeColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "CrossFadeColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::CrossFadeAlpha
// Il2CppName: CrossFadeAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)(float, float, bool)>(&TMP_Text::CrossFadeAlpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), "CrossFadeAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_Text::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)()>(&TMP_Text::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_Text::*)()>(&TMP_Text::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_Text::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_Text::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_Text*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_Text/TextInputSources
#include "TMPro/TMP_Text.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_Text/TextInputSources Text
TMPro::TMP_Text::TextInputSources TMPro::TMP_Text::TextInputSources::_get_Text() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::TextInputSources::_get_Text");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_Text::TextInputSources>("TMPro", "TMP_Text/TextInputSources", "Text"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_Text/TextInputSources Text
void TMPro::TMP_Text::TextInputSources::_set_Text(TMPro::TMP_Text::TextInputSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::TextInputSources::_set_Text");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text/TextInputSources", "Text", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_Text/TextInputSources SetText
TMPro::TMP_Text::TextInputSources TMPro::TMP_Text::TextInputSources::_get_SetText() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::TextInputSources::_get_SetText");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_Text::TextInputSources>("TMPro", "TMP_Text/TextInputSources", "SetText"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_Text/TextInputSources SetText
void TMPro::TMP_Text::TextInputSources::_set_SetText(TMPro::TMP_Text::TextInputSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::TextInputSources::_set_SetText");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text/TextInputSources", "SetText", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_Text/TextInputSources SetCharArray
TMPro::TMP_Text::TextInputSources TMPro::TMP_Text::TextInputSources::_get_SetCharArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::TextInputSources::_get_SetCharArray");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_Text::TextInputSources>("TMPro", "TMP_Text/TextInputSources", "SetCharArray"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_Text/TextInputSources SetCharArray
void TMPro::TMP_Text::TextInputSources::_set_SetCharArray(TMPro::TMP_Text::TextInputSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::TextInputSources::_set_SetCharArray");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text/TextInputSources", "SetCharArray", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TMP_Text/TextInputSources String
TMPro::TMP_Text::TextInputSources TMPro::TMP_Text::TextInputSources::_get_String() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::TextInputSources::_get_String");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_Text::TextInputSources>("TMPro", "TMP_Text/TextInputSources", "String"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TMP_Text/TextInputSources String
void TMPro::TMP_Text::TextInputSources::_set_String(TMPro::TMP_Text::TextInputSources value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::TextInputSources::_set_String");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text/TextInputSources", "String", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TextElementType
#include "TMPro/TextElementType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.TextElementType Character
TMPro::TextElementType TMPro::TextElementType::_get_Character() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextElementType::_get_Character");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextElementType>("TMPro", "TextElementType", "Character"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextElementType Character
void TMPro::TextElementType::_set_Character(TMPro::TextElementType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextElementType::_set_Character");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextElementType", "Character", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.TextElementType Sprite
TMPro::TextElementType TMPro::TextElementType::_get_Sprite() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextElementType::_get_Sprite");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TextElementType>("TMPro", "TextElementType", "Sprite"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.TextElementType Sprite
void TMPro::TextElementType::_set_Sprite(TMPro::TextElementType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextElementType::_set_Sprite");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TextElementType", "Sprite", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_TextElement
#include "TMPro/TMP_TextElement.hpp"
// Including type: UnityEngine.TextCore.Glyph
#include "UnityEngine/TextCore/Glyph.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TMPro.TMP_TextElement.get_elementType
TMPro::TextElementType TMPro::TMP_TextElement::get_elementType() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextElement::get_elementType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_elementType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TextElementType, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextElement.get_unicode
uint TMPro::TMP_TextElement::get_unicode() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextElement::get_unicode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_unicode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextElement.set_unicode
void TMPro::TMP_TextElement::set_unicode(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextElement::set_unicode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_unicode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_TextElement.get_glyph
UnityEngine::TextCore::Glyph* TMPro::TMP_TextElement::get_glyph() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextElement::get_glyph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_glyph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::TextCore::Glyph*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextElement.set_glyph
void TMPro::TMP_TextElement::set_glyph(UnityEngine::TextCore::Glyph* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextElement::set_glyph");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_glyph", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_TextElement.get_glyphIndex
uint TMPro::TMP_TextElement::get_glyphIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextElement::get_glyphIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_glyphIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextElement.set_glyphIndex
void TMPro::TMP_TextElement::set_glyphIndex(uint value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextElement::set_glyphIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_glyphIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: TMPro.TMP_TextElement.get_scale
float TMPro::TMP_TextElement::get_scale() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextElement::get_scale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextElement.set_scale
void TMPro::TMP_TextElement::set_scale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextElement::set_scale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_scale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: TMP_TextElement::get_elementType
// Il2CppName: get_elementType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TextElementType (TMP_TextElement::*)()>(&TMP_TextElement::get_elementType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextElement*), "get_elementType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_TextElement::get_unicode
// Il2CppName: get_unicode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (TMP_TextElement::*)()>(&TMP_TextElement::get_unicode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextElement*), "get_unicode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_TextElement::set_unicode
// Il2CppName: set_unicode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextElement::*)(uint)>(&TMP_TextElement::set_unicode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextElement*), "set_unicode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: TMP_TextElement::get_glyph
// Il2CppName: get_glyph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::TextCore::Glyph* (TMP_TextElement::*)()>(&TMP_TextElement::get_glyph)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextElement*), "get_glyph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_TextElement::set_glyph
// Il2CppName: set_glyph
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextElement::*)(UnityEngine::TextCore::Glyph*)>(&TMP_TextElement::set_glyph)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextElement*), "set_glyph", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextCore::Glyph*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextElement::get_glyphIndex
// Il2CppName: get_glyphIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (TMP_TextElement::*)()>(&TMP_TextElement::get_glyphIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextElement*), "get_glyphIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_TextElement::set_glyphIndex
// Il2CppName: set_glyphIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextElement::*)(uint)>(&TMP_TextElement::set_glyphIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextElement*), "set_glyphIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: TMP_TextElement::get_scale
// Il2CppName: get_scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMP_TextElement::*)()>(&TMP_TextElement::get_scale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextElement*), "get_scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_TextElement::set_scale
// Il2CppName: set_scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextElement::*)(float)>(&TMP_TextElement::set_scale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextElement*), "set_scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: TMP_TextElement::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextElement::*)()>(&TMP_TextElement::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextElement*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextElement::*)()>(&TMP_TextElement::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextElement*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.TMP_TextElement_Legacy
#include "TMPro/TMP_TextElement_Legacy.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TMP_TextElement_Legacy::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextElement_Legacy::*)()>(&TMP_TextElement_Legacy::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextElement_Legacy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextElement_Legacy::*)()>(&TMP_TextElement_Legacy::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextElement_Legacy*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_TextInfo
#include "TMPro/TMP_TextInfo.hpp"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Vector2 k_InfinityVectorPositive
UnityEngine::Vector2 TMPro::TMP_TextInfo::_get_k_InfinityVectorPositive() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextInfo::_get_k_InfinityVectorPositive");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("TMPro", "TMP_TextInfo", "k_InfinityVectorPositive"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Vector2 k_InfinityVectorPositive
void TMPro::TMP_TextInfo::_set_k_InfinityVectorPositive(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextInfo::_set_k_InfinityVectorPositive");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextInfo", "k_InfinityVectorPositive", value));
}
// Autogenerated static field getter
// Get static field: static private UnityEngine.Vector2 k_InfinityVectorNegative
UnityEngine::Vector2 TMPro::TMP_TextInfo::_get_k_InfinityVectorNegative() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextInfo::_get_k_InfinityVectorNegative");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("TMPro", "TMP_TextInfo", "k_InfinityVectorNegative"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Vector2 k_InfinityVectorNegative
void TMPro::TMP_TextInfo::_set_k_InfinityVectorNegative(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextInfo::_set_k_InfinityVectorNegative");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextInfo", "k_InfinityVectorNegative", value));
}
// Autogenerated method: TMPro.TMP_TextInfo.Clear
void TMPro::TMP_TextInfo::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextInfo::Clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextInfo.ClearMeshInfo
void TMPro::TMP_TextInfo::ClearMeshInfo(bool updateMesh) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextInfo::ClearMeshInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearMeshInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(updateMesh)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, updateMesh);
}
// Autogenerated method: TMPro.TMP_TextInfo.ClearAllMeshInfo
void TMPro::TMP_TextInfo::ClearAllMeshInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextInfo::ClearAllMeshInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearAllMeshInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextInfo.ResetVertexLayout
void TMPro::TMP_TextInfo::ResetVertexLayout(bool isVolumetric) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextInfo::ResetVertexLayout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetVertexLayout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isVolumetric)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isVolumetric);
}
// Autogenerated method: TMPro.TMP_TextInfo.ClearUnusedVertices
void TMPro::TMP_TextInfo::ClearUnusedVertices(::Array<TMPro::MaterialReference>* materials) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextInfo::ClearUnusedVertices");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearUnusedVertices", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(materials)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, materials);
}
// Autogenerated method: TMPro.TMP_TextInfo.ClearLineInfo
void TMPro::TMP_TextInfo::ClearLineInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextInfo::ClearLineInfo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearLineInfo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextInfo.CopyMeshInfoVertexData
::Array<TMPro::TMP_MeshInfo>* TMPro::TMP_TextInfo::CopyMeshInfoVertexData() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextInfo::CopyMeshInfoVertexData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyMeshInfoVertexData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<TMPro::TMP_MeshInfo>*, false>(this, ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextInfo..cctor
void TMPro::TMP_TextInfo::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextInfo::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextInfo", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: TMP_TextInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextInfo::*)(TMPro::TMP_Text*)>(&TMP_TextInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextInfo::*)(TMPro::TMP_Text*)>(&TMP_TextInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<TMPro::TMP_Text*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextInfo::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextInfo::*)()>(&TMP_TextInfo::Clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextInfo*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_TextInfo::ClearMeshInfo
// Il2CppName: ClearMeshInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextInfo::*)(bool)>(&TMP_TextInfo::ClearMeshInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextInfo*), "ClearMeshInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_TextInfo::ClearAllMeshInfo
// Il2CppName: ClearAllMeshInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextInfo::*)()>(&TMP_TextInfo::ClearAllMeshInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextInfo*), "ClearAllMeshInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_TextInfo::ResetVertexLayout
// Il2CppName: ResetVertexLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextInfo::*)(bool)>(&TMP_TextInfo::ResetVertexLayout)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextInfo*), "ResetVertexLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TMP_TextInfo::ClearUnusedVertices
// Il2CppName: ClearUnusedVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextInfo::*)(::Array<TMPro::MaterialReference>*)>(&TMP_TextInfo::ClearUnusedVertices)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextInfo*), "ClearUnusedVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<TMPro::MaterialReference>*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextInfo::ClearLineInfo
// Il2CppName: ClearLineInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextInfo::*)()>(&TMP_TextInfo::ClearLineInfo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextInfo*), "ClearLineInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_TextInfo::CopyMeshInfoVertexData
// Il2CppName: CopyMeshInfoVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<TMPro::TMP_MeshInfo>* (TMP_TextInfo::*)()>(&TMP_TextInfo::CopyMeshInfoVertexData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextInfo*), "CopyMeshInfoVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_TextInfo::Resize
// Il2CppName: Resize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TMP_TextInfo::Resize
// Il2CppName: Resize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TMP_TextInfo::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_TextInfo::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextInfo*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_TextInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextInfo::*)()>(&TMP_TextInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextInfo::*)()>(&TMP_TextInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_TextParsingUtilities
#include "TMPro/TMP_TextParsingUtilities.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly TMPro.TMP_TextParsingUtilities s_Instance
TMPro::TMP_TextParsingUtilities* TMPro::TMP_TextParsingUtilities::_get_s_Instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::_get_s_Instance");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::TMP_TextParsingUtilities*>("TMPro", "TMP_TextParsingUtilities", "s_Instance"));
}
// Autogenerated static field setter
// Set static field: static private readonly TMPro.TMP_TextParsingUtilities s_Instance
void TMPro::TMP_TextParsingUtilities::_set_s_Instance(TMPro::TMP_TextParsingUtilities* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::_set_s_Instance");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextParsingUtilities", "s_Instance", value));
}
// Autogenerated static field getter
// Get static field: static private System.String k_LookupStringL
::Il2CppString* TMPro::TMP_TextParsingUtilities::_get_k_LookupStringL() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::_get_k_LookupStringL");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("TMPro", "TMP_TextParsingUtilities", "k_LookupStringL"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_LookupStringL
void TMPro::TMP_TextParsingUtilities::_set_k_LookupStringL(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::_set_k_LookupStringL");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextParsingUtilities", "k_LookupStringL", value));
}
// Autogenerated static field getter
// Get static field: static private System.String k_LookupStringU
::Il2CppString* TMPro::TMP_TextParsingUtilities::_get_k_LookupStringU() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::_get_k_LookupStringU");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("TMPro", "TMP_TextParsingUtilities", "k_LookupStringU"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_LookupStringU
void TMPro::TMP_TextParsingUtilities::_set_k_LookupStringU(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::_set_k_LookupStringU");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextParsingUtilities", "k_LookupStringU", value));
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities..cctor
void TMPro::TMP_TextParsingUtilities::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.get_instance
TMPro::TMP_TextParsingUtilities* TMPro::TMP_TextParsingUtilities::get_instance() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::get_instance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "get_instance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<TMPro::TMP_TextParsingUtilities*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.GetHashCode
uint TMPro::TMP_TextParsingUtilities::GetHashCode(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::GetHashCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.GetHashCodeCaseSensitive
int TMPro::TMP_TextParsingUtilities::GetHashCodeCaseSensitive(::Il2CppString* s) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::GetHashCodeCaseSensitive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "GetHashCodeCaseSensitive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, s);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.ToLowerASCIIFast
::Il2CppChar TMPro::TMP_TextParsingUtilities::ToLowerASCIIFast(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::ToLowerASCIIFast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "ToLowerASCIIFast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.ToUpperASCIIFast
::Il2CppChar TMPro::TMP_TextParsingUtilities::ToUpperASCIIFast(::Il2CppChar c) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::ToUpperASCIIFast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "ToUpperASCIIFast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppChar, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.ToUpperASCIIFast
uint TMPro::TMP_TextParsingUtilities::ToUpperASCIIFast(uint c) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::ToUpperASCIIFast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "ToUpperASCIIFast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.ToLowerASCIIFast
uint TMPro::TMP_TextParsingUtilities::ToLowerASCIIFast(uint c) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::ToLowerASCIIFast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "ToLowerASCIIFast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.IsHighSurrogate
bool TMPro::TMP_TextParsingUtilities::IsHighSurrogate(uint c) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::IsHighSurrogate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "IsHighSurrogate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, c);
}
// Autogenerated method: TMPro.TMP_TextParsingUtilities.IsLowSurrogate
bool TMPro::TMP_TextParsingUtilities::IsLowSurrogate(uint c) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_TextParsingUtilities::IsLowSurrogate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("TMPro", "TMP_TextParsingUtilities", "IsLowSurrogate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, c);
}
// Writing MetadataGetter for method: TMP_TextParsingUtilities::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMP_TextParsingUtilities::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextParsingUtilities*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_TextParsingUtilities::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<TMPro::TMP_TextParsingUtilities* (*)()>(&TMP_TextParsingUtilities::get_instance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextParsingUtilities*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMP_TextParsingUtilities::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(::Il2CppString*)>(&TMP_TextParsingUtilities::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextParsingUtilities*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextParsingUtilities::GetHashCodeCaseSensitive
// Il2CppName: GetHashCodeCaseSensitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*)>(&TMP_TextParsingUtilities::GetHashCodeCaseSensitive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextParsingUtilities*), "GetHashCodeCaseSensitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: TMP_TextParsingUtilities::ToLowerASCIIFast
// Il2CppName: ToLowerASCIIFast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar)>(&TMP_TextParsingUtilities::ToLowerASCIIFast)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextParsingUtilities*), "ToLowerASCIIFast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TMP_TextParsingUtilities::ToUpperASCIIFast
// Il2CppName: ToUpperASCIIFast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (*)(::Il2CppChar)>(&TMP_TextParsingUtilities::ToUpperASCIIFast)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextParsingUtilities*), "ToUpperASCIIFast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppChar>()});
  }
};
// Writing MetadataGetter for method: TMP_TextParsingUtilities::ToUpperASCIIFast
// Il2CppName: ToUpperASCIIFast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint)>(&TMP_TextParsingUtilities::ToUpperASCIIFast)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextParsingUtilities*), "ToUpperASCIIFast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: TMP_TextParsingUtilities::ToLowerASCIIFast
// Il2CppName: ToLowerASCIIFast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint)>(&TMP_TextParsingUtilities::ToLowerASCIIFast)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextParsingUtilities*), "ToLowerASCIIFast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: TMP_TextParsingUtilities::IsHighSurrogate
// Il2CppName: IsHighSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint)>(&TMP_TextParsingUtilities::IsHighSurrogate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextParsingUtilities*), "IsHighSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: TMP_TextParsingUtilities::IsLowSurrogate
// Il2CppName: IsLowSurrogate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint)>(&TMP_TextParsingUtilities::IsLowSurrogate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextParsingUtilities*), "IsLowSurrogate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint>()});
  }
};
// Writing MetadataGetter for method: TMP_TextParsingUtilities::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextParsingUtilities::*)()>(&TMP_TextParsingUtilities::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextParsingUtilities*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMP_TextParsingUtilities::*)()>(&TMP_TextParsingUtilities::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMP_TextParsingUtilities*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.CaretPosition
#include "TMPro/CaretPosition.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public TMPro.CaretPosition None
TMPro::CaretPosition TMPro::CaretPosition::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::CaretPosition::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::CaretPosition>("TMPro", "CaretPosition", "None"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.CaretPosition None
void TMPro::CaretPosition::_set_None(TMPro::CaretPosition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::CaretPosition::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "CaretPosition", "None", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.CaretPosition Left
TMPro::CaretPosition TMPro::CaretPosition::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::CaretPosition::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::CaretPosition>("TMPro", "CaretPosition", "Left"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.CaretPosition Left
void TMPro::CaretPosition::_set_Left(TMPro::CaretPosition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::CaretPosition::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "CaretPosition", "Left", value));
}
// Autogenerated static field getter
// Get static field: static public TMPro.CaretPosition Right
TMPro::CaretPosition TMPro::CaretPosition::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::CaretPosition::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<TMPro::CaretPosition>("TMPro", "CaretPosition", "Right"));
}
// Autogenerated static field setter
// Set static field: static public TMPro.CaretPosition Right
void TMPro::CaretPosition::_set_Right(TMPro::CaretPosition value) {
  static auto ___internal__logger = ::Logger::get().WithContext("TMPro::CaretPosition::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "CaretPosition", "Right", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TMPro.CaretInfo
#include "TMPro/CaretInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: CaretInfo::CaretInfo
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CaretInfo::*)(int, TMPro::CaretPosition)>(&CaretInfo::CaretInfo<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CaretInfo), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<TMPro::CaretPosition>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CaretInfo::*)(int, TMPro::CaretPosition)>(&CaretInfo::CaretInfo<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CaretInfo), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<TMPro::CaretPosition>()});
  }
};
