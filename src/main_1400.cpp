// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Footstep
#include "RootMotion/FinalIK/IKSolverVR_Footstep.hpp"
// Including type: RootMotion.InterpolationMode
#include "RootMotion/InterpolationMode.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Footstep.get_isStepping
bool RootMotion::FinalIK::IKSolverVR::Footstep::get_isStepping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::get_isStepping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isStepping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Footstep.get_stepProgress
float RootMotion::FinalIK::IKSolverVR::Footstep::get_stepProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::get_stepProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stepProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Footstep.set_stepProgress
void RootMotion::FinalIK::IKSolverVR::Footstep::set_stepProgress(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::set_stepProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_stepProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Footstep.Reset
void RootMotion::FinalIK::IKSolverVR::Footstep::Reset(UnityEngine::Quaternion rootRotation, UnityEngine::Vector3 footPosition, UnityEngine::Quaternion footRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootRotation), ::il2cpp_utils::ExtractType(footPosition), ::il2cpp_utils::ExtractType(footRotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rootRotation, footPosition, footRotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Footstep.StepTo
void RootMotion::FinalIK::IKSolverVR::Footstep::StepTo(UnityEngine::Vector3 p, UnityEngine::Quaternion rootRotation, float stepThreshold) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::StepTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StepTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(rootRotation), ::il2cpp_utils::ExtractType(stepThreshold)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, p, rootRotation, stepThreshold);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Footstep.UpdateStepping
void RootMotion::FinalIK::IKSolverVR::Footstep::UpdateStepping(UnityEngine::Vector3 p, UnityEngine::Quaternion rootRotation, float speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::UpdateStepping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStepping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(rootRotation), ::il2cpp_utils::ExtractType(speed)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, p, rootRotation, speed);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Footstep.UpdateStanding
void RootMotion::FinalIK::IKSolverVR::Footstep::UpdateStanding(UnityEngine::Quaternion rootRotation, float minAngle, float speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::UpdateStanding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStanding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootRotation), ::il2cpp_utils::ExtractType(minAngle), ::il2cpp_utils::ExtractType(speed)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rootRotation, minAngle, speed);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Footstep.Update
void RootMotion::FinalIK::IKSolverVR::Footstep::Update(RootMotion::InterpolationMode interpolation, UnityEngine::Events::UnityEvent* onStep) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interpolation), ::il2cpp_utils::ExtractType(onStep)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, interpolation, onStep);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/IKSolverVR_Leg.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone
#include "RootMotion/FinalIK/IKSolverVR_VirtualBone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.get_position
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Leg::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.set_position
void RootMotion::FinalIK::IKSolverVR::Leg::set_position(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::set_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.get_rotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverVR::Leg::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.set_rotation
void RootMotion::FinalIK::IKSolverVR::Leg::set_rotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::set_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.get_hasToes
bool RootMotion::FinalIK::IKSolverVR::Leg::get_hasToes() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_hasToes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasToes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.set_hasToes
void RootMotion::FinalIK::IKSolverVR::Leg::set_hasToes(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::set_hasToes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hasToes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.get_thigh
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Leg::get_thigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_thigh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_thigh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.get_calf
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Leg::get_calf() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_calf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_calf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.get_foot
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Leg::get_foot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_foot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_foot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.get_toes
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Leg::get_toes() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_toes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_toes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.get_lastBone
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Leg::get_lastBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_lastBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lastBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.get_thighRelativeToPelvis
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Leg::get_thighRelativeToPelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_thighRelativeToPelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_thighRelativeToPelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.set_thighRelativeToPelvis
void RootMotion::FinalIK::IKSolverVR::Leg::set_thighRelativeToPelvis(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::set_thighRelativeToPelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_thighRelativeToPelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.ApplyPositionOffset
void RootMotion::FinalIK::IKSolverVR::Leg::ApplyPositionOffset(UnityEngine::Vector3 offset, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::ApplyPositionOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyPositionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, offset, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.ApplyRotationOffset
void RootMotion::FinalIK::IKSolverVR::Leg::ApplyRotationOffset(UnityEngine::Quaternion offset, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::ApplyRotationOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyRotationOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, offset, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.Solve
void RootMotion::FinalIK::IKSolverVR::Leg::Solve(bool stretch) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stretch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, stretch);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.FixTwistRotations
void RootMotion::FinalIK::IKSolverVR::Leg::FixTwistRotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::FixTwistRotations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTwistRotations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.Stretching
void RootMotion::FinalIK::IKSolverVR::Leg::Stretching() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::Stretching");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stretching", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.OnRead
void RootMotion::FinalIK::IKSolverVR::Leg::OnRead(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::OnRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations), ::il2cpp_utils::ExtractType(hasChest), ::il2cpp_utils::ExtractType(hasNeck), ::il2cpp_utils::ExtractType(hasShoulders), ::il2cpp_utils::ExtractType(hasToes), ::il2cpp_utils::ExtractType(hasLegs), ::il2cpp_utils::ExtractType(rootIndex), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations, hasChest, hasNeck, hasShoulders, hasToes, hasLegs, rootIndex, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.PreSolve
void RootMotion::FinalIK::IKSolverVR::Leg::PreSolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::PreSolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.ApplyOffsets
void RootMotion::FinalIK::IKSolverVR::Leg::ApplyOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::ApplyOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.Write
void RootMotion::FinalIK::IKSolverVR::Leg::Write(::Array<UnityEngine::Vector3>*& solvedPositions, ::Array<UnityEngine::Quaternion>*& solvedRotations) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solvedPositions), ::il2cpp_utils::ExtractType(solvedRotations)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solvedPositions, solvedRotations);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg.ResetOffsets
void RootMotion::FinalIK::IKSolverVR::Leg::ResetOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::ResetOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion
#include "RootMotion/FinalIK/IKSolverVR_Locomotion.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Footstep
#include "RootMotion/FinalIK/IKSolverVR_Footstep.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone
#include "RootMotion/FinalIK/IKSolverVR_VirtualBone.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine
#include "RootMotion/FinalIK/IKSolverVR_Spine.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/IKSolverVR_Leg.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm
#include "RootMotion/FinalIK/IKSolverVR_Arm.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion.get_centerOfMass
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Locomotion::get_centerOfMass() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::get_centerOfMass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_centerOfMass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion.set_centerOfMass
void RootMotion::FinalIK::IKSolverVR::Locomotion::set_centerOfMass(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::set_centerOfMass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_centerOfMass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion.get_leftFootstepPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Locomotion::get_leftFootstepPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::get_leftFootstepPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftFootstepPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion.get_rightFootstepPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Locomotion::get_rightFootstepPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::get_rightFootstepPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightFootstepPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion.get_leftFootstepRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverVR::Locomotion::get_leftFootstepRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::get_leftFootstepRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftFootstepRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion.get_rightFootstepRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverVR::Locomotion::get_rightFootstepRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::get_rightFootstepRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightFootstepRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion.Initiate
void RootMotion::FinalIK::IKSolverVR::Locomotion::Initiate(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasToes) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations), ::il2cpp_utils::ExtractType(hasToes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations, hasToes);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion.Reset
void RootMotion::FinalIK::IKSolverVR::Locomotion::Reset(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion.AddDeltaRotation
void RootMotion::FinalIK::IKSolverVR::Locomotion::AddDeltaRotation(UnityEngine::Quaternion delta, UnityEngine::Vector3 pivot) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::AddDeltaRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddDeltaRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delta), ::il2cpp_utils::ExtractType(pivot)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, delta, pivot);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion.AddDeltaPosition
void RootMotion::FinalIK::IKSolverVR::Locomotion::AddDeltaPosition(UnityEngine::Vector3 delta) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::AddDeltaPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddDeltaPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delta)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, delta);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion.Solve
void RootMotion::FinalIK::IKSolverVR::Locomotion::Solve(RootMotion::FinalIK::IKSolverVR::VirtualBone* rootBone, RootMotion::FinalIK::IKSolverVR::Spine* spine, RootMotion::FinalIK::IKSolverVR::Leg* leftLeg, RootMotion::FinalIK::IKSolverVR::Leg* rightLeg, RootMotion::FinalIK::IKSolverVR::Arm* leftArm, RootMotion::FinalIK::IKSolverVR::Arm* rightArm, int supportLegIndex, UnityEngine::Vector3& leftFootPosition, UnityEngine::Vector3& rightFootPosition, UnityEngine::Quaternion& leftFootRotation, UnityEngine::Quaternion& rightFootRotation, float& leftFootOffset, float& rightFootOffset, float& leftHeelOffset, float& rightHeelOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootBone), ::il2cpp_utils::ExtractType(spine), ::il2cpp_utils::ExtractType(leftLeg), ::il2cpp_utils::ExtractType(rightLeg), ::il2cpp_utils::ExtractType(leftArm), ::il2cpp_utils::ExtractType(rightArm), ::il2cpp_utils::ExtractType(supportLegIndex), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rootBone, spine, leftLeg, rightLeg, leftArm, rightArm, supportLegIndex, leftFootPosition, rightFootPosition, leftFootRotation, rightFootRotation, leftFootOffset, rightFootOffset, leftHeelOffset, rightHeelOffset);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion.StepBlocked
bool RootMotion::FinalIK::IKSolverVR::Locomotion::StepBlocked(UnityEngine::Vector3 fromPosition, UnityEngine::Vector3 toPosition, UnityEngine::Vector3 rootPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::StepBlocked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StepBlocked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromPosition), ::il2cpp_utils::ExtractType(toPosition), ::il2cpp_utils::ExtractType(rootPosition)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, fromPosition, toPosition, rootPosition);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion.CanStep
bool RootMotion::FinalIK::IKSolverVR::Locomotion::CanStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::CanStep");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanStep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Locomotion.GetLineSphereCollision
bool RootMotion::FinalIK::IKSolverVR::Locomotion::GetLineSphereCollision(UnityEngine::Vector3 lineStart, UnityEngine::Vector3 lineEnd, UnityEngine::Vector3 sphereCenter, float sphereRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::GetLineSphereCollision");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/Locomotion", "GetLineSphereCollision", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineStart), ::il2cpp_utils::ExtractType(lineEnd), ::il2cpp_utils::ExtractType(sphereCenter), ::il2cpp_utils::ExtractType(sphereRadius)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lineStart, lineEnd, sphereCenter, sphereRadius);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine
#include "RootMotion/FinalIK/IKSolverVR_Spine.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone
#include "RootMotion/FinalIK/IKSolverVR_VirtualBone.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Arm
#include "RootMotion/FinalIK/IKSolverVR_Arm.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/IKSolverVR_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.get_pelvis
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Spine::get_pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::get_pelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.get_firstSpineBone
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Spine::get_firstSpineBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::get_firstSpineBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_firstSpineBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.get_chest
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Spine::get_chest() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::get_chest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_chest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.get_neck
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Spine::get_neck() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::get_neck");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_neck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.get_head
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Spine::get_head() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::get_head");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.get_anchorRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverVR::Spine::get_anchorRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::get_anchorRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_anchorRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.set_anchorRotation
void RootMotion::FinalIK::IKSolverVR::Spine::set_anchorRotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::set_anchorRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_anchorRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.get_anchorRelativeToHead
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverVR::Spine::get_anchorRelativeToHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::get_anchorRelativeToHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_anchorRelativeToHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.set_anchorRelativeToHead
void RootMotion::FinalIK::IKSolverVR::Spine::set_anchorRelativeToHead(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::set_anchorRelativeToHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_anchorRelativeToHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.CalculateChestTargetRotation
void RootMotion::FinalIK::IKSolverVR::Spine::CalculateChestTargetRotation(RootMotion::FinalIK::IKSolverVR::VirtualBone* rootBone, ::Array<RootMotion::FinalIK::IKSolverVR::Arm*>* arms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::CalculateChestTargetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateChestTargetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootBone), ::il2cpp_utils::ExtractType(arms)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rootBone, arms);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.Solve
void RootMotion::FinalIK::IKSolverVR::Spine::Solve(RootMotion::FinalIK::IKSolverVR::VirtualBone* rootBone, ::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, ::Array<RootMotion::FinalIK::IKSolverVR::Arm*>* arms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootBone), ::il2cpp_utils::ExtractType(legs), ::il2cpp_utils::ExtractType(arms)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rootBone, legs, arms);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.FABRIKPass
void RootMotion::FinalIK::IKSolverVR::Spine::FABRIKPass(UnityEngine::Vector3 animatedPelvisPos, UnityEngine::Vector3 rootUp, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::FABRIKPass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FABRIKPass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animatedPelvisPos), ::il2cpp_utils::ExtractType(rootUp), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animatedPelvisPos, rootUp, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.SolvePelvis
void RootMotion::FinalIK::IKSolverVR::Spine::SolvePelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::SolvePelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolvePelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.AdjustChestByHands
void RootMotion::FinalIK::IKSolverVR::Spine::AdjustChestByHands(UnityEngine::Quaternion& chestTargetRotation, ::Array<RootMotion::FinalIK::IKSolverVR::Arm*>* arms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::AdjustChestByHands");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustChestByHands", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chestTargetRotation), ::il2cpp_utils::ExtractType(arms)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, chestTargetRotation, arms);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.InverseTranslateToHead
void RootMotion::FinalIK::IKSolverVR::Spine::InverseTranslateToHead(::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, bool limited, bool useCurrentLegMag, UnityEngine::Vector3 offset, float w) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::InverseTranslateToHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InverseTranslateToHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(legs), ::il2cpp_utils::ExtractType(limited), ::il2cpp_utils::ExtractType(useCurrentLegMag), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(w)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, legs, limited, useCurrentLegMag, offset, w);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.TranslatePelvis
void RootMotion::FinalIK::IKSolverVR::Spine::TranslatePelvis(::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, UnityEngine::Vector3 deltaPosition, UnityEngine::Quaternion deltaRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::TranslatePelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TranslatePelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(legs), ::il2cpp_utils::ExtractType(deltaPosition), ::il2cpp_utils::ExtractType(deltaRotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, legs, deltaPosition, deltaRotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.LimitPelvisPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Spine::LimitPelvisPosition(::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, UnityEngine::Vector3 pelvisPosition, bool useCurrentLegMag, int it) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::LimitPelvisPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitPelvisPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(legs), ::il2cpp_utils::ExtractType(pelvisPosition), ::il2cpp_utils::ExtractType(useCurrentLegMag), ::il2cpp_utils::ExtractType(it)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, legs, pelvisPosition, useCurrentLegMag, it);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.Bend
void RootMotion::FinalIK::IKSolverVR::Spine::Bend(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int firstIndex, int lastIndex, UnityEngine::Quaternion targetRotation, float clampWeight, bool uniformWeight, float w) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::Bend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(firstIndex), ::il2cpp_utils::ExtractType(lastIndex), ::il2cpp_utils::ExtractType(targetRotation), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(uniformWeight), ::il2cpp_utils::ExtractType(w)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bones, firstIndex, lastIndex, targetRotation, clampWeight, uniformWeight, w);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.Bend
void RootMotion::FinalIK::IKSolverVR::Spine::Bend(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int firstIndex, int lastIndex, UnityEngine::Quaternion targetRotation, UnityEngine::Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::Bend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(firstIndex), ::il2cpp_utils::ExtractType(lastIndex), ::il2cpp_utils::ExtractType(targetRotation), ::il2cpp_utils::ExtractType(rotationOffset), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(uniformWeight), ::il2cpp_utils::ExtractType(w)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bones, firstIndex, lastIndex, targetRotation, rotationOffset, clampWeight, uniformWeight, w);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.OnRead
void RootMotion::FinalIK::IKSolverVR::Spine::OnRead(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::OnRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations), ::il2cpp_utils::ExtractType(hasChest), ::il2cpp_utils::ExtractType(hasNeck), ::il2cpp_utils::ExtractType(hasShoulders), ::il2cpp_utils::ExtractType(hasToes), ::il2cpp_utils::ExtractType(hasLegs), ::il2cpp_utils::ExtractType(rootIndex), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations, hasChest, hasNeck, hasShoulders, hasToes, hasLegs, rootIndex, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.PreSolve
void RootMotion::FinalIK::IKSolverVR::Spine::PreSolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::PreSolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.ApplyOffsets
void RootMotion::FinalIK::IKSolverVR::Spine::ApplyOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::ApplyOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.Write
void RootMotion::FinalIK::IKSolverVR::Spine::Write(::Array<UnityEngine::Vector3>*& solvedPositions, ::Array<UnityEngine::Quaternion>*& solvedRotations) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solvedPositions), ::il2cpp_utils::ExtractType(solvedRotations)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solvedPositions, solvedRotations);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Spine.ResetOffsets
void RootMotion::FinalIK::IKSolverVR::Spine::ResetOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::ResetOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset
#include "RootMotion/FinalIK/IKSolverVR_PositionOffset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset Pelvis
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_Pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_Pelvis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "Pelvis"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset Pelvis
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_Pelvis(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_Pelvis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "Pelvis", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset Chest
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_Chest() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_Chest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "Chest"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset Chest
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_Chest(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_Chest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "Chest", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset Head
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_Head() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_Head");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "Head"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset Head
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_Head(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_Head");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "Head", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset LeftHand
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_LeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_LeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "LeftHand"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset LeftHand
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_LeftHand(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_LeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "LeftHand", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset RightHand
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_RightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_RightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "RightHand"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset RightHand
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_RightHand(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_RightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "RightHand", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset LeftFoot
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_LeftFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_LeftFoot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "LeftFoot"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset LeftFoot
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_LeftFoot(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_LeftFoot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "LeftFoot", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset RightFoot
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_RightFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_RightFoot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "RightFoot"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset RightFoot
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_RightFoot(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_RightFoot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "RightFoot", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset LeftHeel
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_LeftHeel() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_LeftHeel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "LeftHeel"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset LeftHeel
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_LeftHeel(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_LeftHeel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "LeftHeel", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset RightHeel
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_RightHeel() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_RightHeel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "RightHeel"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.PositionOffset RightHeel
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_RightHeel(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_RightHeel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "RightHeel", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.RotationOffset
#include "RootMotion/FinalIK/IKSolverVR_RotationOffset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.RotationOffset Pelvis
RootMotion::FinalIK::IKSolverVR::RotationOffset RootMotion::FinalIK::IKSolverVR::RotationOffset::_get_Pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::RotationOffset::_get_Pelvis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::RotationOffset>("RootMotion.FinalIK", "IKSolverVR/RotationOffset", "Pelvis"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.RotationOffset Pelvis
void RootMotion::FinalIK::IKSolverVR::RotationOffset::_set_Pelvis(RootMotion::FinalIK::IKSolverVR::RotationOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::RotationOffset::_set_Pelvis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/RotationOffset", "Pelvis", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.RotationOffset Chest
RootMotion::FinalIK::IKSolverVR::RotationOffset RootMotion::FinalIK::IKSolverVR::RotationOffset::_get_Chest() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::RotationOffset::_get_Chest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::RotationOffset>("RootMotion.FinalIK", "IKSolverVR/RotationOffset", "Chest"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.RotationOffset Chest
void RootMotion::FinalIK::IKSolverVR::RotationOffset::_set_Chest(RootMotion::FinalIK::IKSolverVR::RotationOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::RotationOffset::_set_Chest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/RotationOffset", "Chest", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.RotationOffset Head
RootMotion::FinalIK::IKSolverVR::RotationOffset RootMotion::FinalIK::IKSolverVR::RotationOffset::_get_Head() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::RotationOffset::_get_Head");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::RotationOffset>("RootMotion.FinalIK", "IKSolverVR/RotationOffset", "Head"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.RotationOffset Head
void RootMotion::FinalIK::IKSolverVR::RotationOffset::_set_Head(RootMotion::FinalIK::IKSolverVR::RotationOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::RotationOffset::_set_Head");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/RotationOffset", "Head", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone
#include "RootMotion/FinalIK/IKSolverVR_VirtualBone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone.Read
void RootMotion::FinalIK::IKSolverVR::VirtualBone::Read(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone.SwingRotation
void RootMotion::FinalIK::IKSolverVR::VirtualBone::SwingRotation(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int index, UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::SwingRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "SwingRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(swingTarget), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, index, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone.PreSolve
float RootMotion::FinalIK::IKSolverVR::VirtualBone::PreSolve(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*& bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::PreSolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "PreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone.RotateAroundPoint
void RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateAroundPoint(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int index, UnityEngine::Vector3 point, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateAroundPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "RotateAroundPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(point), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, index, point, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone.RotateBy
void RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateBy(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int index, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateBy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "RotateBy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, index, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone.RotateBy
void RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateBy(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateBy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "RotateBy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone.RotateTo
void RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateTo(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int index, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "RotateTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, index, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone.SolveTrigonometric
void RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveTrigonometric(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int first, int second, int third, UnityEngine::Vector3 targetPosition, UnityEngine::Vector3 bendNormal, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveTrigonometric");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "SolveTrigonometric", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(first), ::il2cpp_utils::ExtractType(second), ::il2cpp_utils::ExtractType(third), ::il2cpp_utils::ExtractType(targetPosition), ::il2cpp_utils::ExtractType(bendNormal), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, first, second, third, targetPosition, bendNormal, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone.GetDirectionToBendPoint
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::VirtualBone::GetDirectionToBendPoint(UnityEngine::Vector3 direction, float directionMag, UnityEngine::Vector3 bendDirection, float sqrMag1, float sqrMag2) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::GetDirectionToBendPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "GetDirectionToBendPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(directionMag), ::il2cpp_utils::ExtractType(bendDirection), ::il2cpp_utils::ExtractType(sqrMag1), ::il2cpp_utils::ExtractType(sqrMag2)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, direction, directionMag, bendDirection, sqrMag1, sqrMag2);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone.SolveFABRIK
void RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveFABRIK(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, UnityEngine::Vector3 startPosition, UnityEngine::Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length, UnityEngine::Vector3 startOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveFABRIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "SolveFABRIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(startPosition), ::il2cpp_utils::ExtractType(targetPosition), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(minNormalizedTargetDistance), ::il2cpp_utils::ExtractType(iterations), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(startOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, startPosition, targetPosition, weight, minNormalizedTargetDistance, iterations, length, startOffset);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone.SolveFABRIKJoint
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveFABRIKJoint(UnityEngine::Vector3 pos1, UnityEngine::Vector3 pos2, float length) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveFABRIKJoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "SolveFABRIKJoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pos1, pos2, length);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.VirtualBone.SolveCCD
void RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveCCD(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, UnityEngine::Vector3 targetPosition, float weight, int iterations) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveCCD");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "SolveCCD", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(targetPosition), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(iterations)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, targetPosition, weight, iterations);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.TwistRelaxer
#include "RootMotion/FinalIK/TwistRelaxer.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.TwistRelaxer.Relax
void RootMotion::FinalIK::TwistRelaxer::Relax() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TwistRelaxer::Relax");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Relax", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TwistRelaxer.Start
void RootMotion::FinalIK::TwistRelaxer::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TwistRelaxer::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TwistRelaxer.OnPostUpdate
void RootMotion::FinalIK::TwistRelaxer::OnPostUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TwistRelaxer::OnPostUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TwistRelaxer.LateUpdate
void RootMotion::FinalIK::TwistRelaxer::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TwistRelaxer::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TwistRelaxer.OnDestroy
void RootMotion::FinalIK::TwistRelaxer::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TwistRelaxer::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionEffector
#include "RootMotion/FinalIK/InteractionEffector.hpp"
// Including type: RootMotion.FinalIK.InteractionObject
#include "RootMotion/FinalIK/InteractionObject.hpp"
// Including type: RootMotion.FinalIK.Poser
#include "RootMotion/FinalIK/Poser.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: RootMotion.FinalIK.InteractionTarget
#include "RootMotion/FinalIK/InteractionTarget.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: RootMotion.FinalIK.InteractionSystem
#include "RootMotion/FinalIK/InteractionSystem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.get_effectorType
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::InteractionEffector::get_effectorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::get_effectorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_effectorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FullBodyBipedEffector, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.set_effectorType
void RootMotion::FinalIK::InteractionEffector::set_effectorType(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::set_effectorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_effectorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.get_isPaused
bool RootMotion::FinalIK::InteractionEffector::get_isPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::get_isPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.set_isPaused
void RootMotion::FinalIK::InteractionEffector::set_isPaused(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::set_isPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.get_interactionObject
RootMotion::FinalIK::InteractionObject* RootMotion::FinalIK::InteractionEffector::get_interactionObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::get_interactionObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_interactionObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionObject*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.set_interactionObject
void RootMotion::FinalIK::InteractionEffector::set_interactionObject(RootMotion::FinalIK::InteractionObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::set_interactionObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_interactionObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.get_inInteraction
bool RootMotion::FinalIK::InteractionEffector::get_inInteraction() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::get_inInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.get_progress
float RootMotion::FinalIK::InteractionEffector::get_progress() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::get_progress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_progress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.Initiate
void RootMotion::FinalIK::InteractionEffector::Initiate(RootMotion::FinalIK::InteractionSystem* interactionSystem) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interactionSystem)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, interactionSystem);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.StoreDefaults
void RootMotion::FinalIK::InteractionEffector::StoreDefaults() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::StoreDefaults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.ResetToDefaults
bool RootMotion::FinalIK::InteractionEffector::ResetToDefaults(float speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::ResetToDefaults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetToDefaults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(speed)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, speed);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.Pause
bool RootMotion::FinalIK::InteractionEffector::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::Pause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.Resume
bool RootMotion::FinalIK::InteractionEffector::Resume() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::Resume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.Start
bool RootMotion::FinalIK::InteractionEffector::Start(RootMotion::FinalIK::InteractionObject* interactionObject, ::Il2CppString* tag, float fadeInTime, bool interrupt) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interactionObject), ::il2cpp_utils::ExtractType(tag), ::il2cpp_utils::ExtractType(fadeInTime), ::il2cpp_utils::ExtractType(interrupt)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, interactionObject, tag, fadeInTime, interrupt);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.Update
void RootMotion::FinalIK::InteractionEffector::Update(UnityEngine::Transform* root, float speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(speed)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, root, speed);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.TriggerUntriggeredEvents
void RootMotion::FinalIK::InteractionEffector::TriggerUntriggeredEvents(bool checkTime, bool& pickUp, bool& pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::TriggerUntriggeredEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerUntriggeredEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(checkTime), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, checkTime, pickUp, pause);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.PickUp
void RootMotion::FinalIK::InteractionEffector::PickUp(UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::PickUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PickUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, root);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.Stop
bool RootMotion::FinalIK::InteractionEffector::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.OnPostFBBIK
void RootMotion::FinalIK::InteractionEffector::OnPostFBBIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::OnPostFBBIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostFBBIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.InteractionLookAt
#include "RootMotion/FinalIK/InteractionLookAt.hpp"
// Including type: RootMotion.FinalIK.LookAtIK
#include "RootMotion/FinalIK/LookAtIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionLookAt.Look
void RootMotion::FinalIK::InteractionLookAt::Look(UnityEngine::Transform* target, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionLookAt::Look");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Look", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, target, time);
}
// Autogenerated method: RootMotion.FinalIK.InteractionLookAt.OnFixTransforms
void RootMotion::FinalIK::InteractionLookAt::OnFixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionLookAt::OnFixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionLookAt.Update
void RootMotion::FinalIK::InteractionLookAt::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionLookAt::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionLookAt.SolveSpine
void RootMotion::FinalIK::InteractionLookAt::SolveSpine() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionLookAt::SolveSpine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveSpine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionLookAt.SolveHead
void RootMotion::FinalIK::InteractionLookAt::SolveHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionLookAt::SolveHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionObject
#include "RootMotion/FinalIK/InteractionObject.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.InteractionEvent
#include "RootMotion/FinalIK/InteractionObject_InteractionEvent.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.Message
#include "RootMotion/FinalIK/InteractionObject_Message.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.AnimatorEvent
#include "RootMotion/FinalIK/InteractionObject_AnimatorEvent.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.Multiplier
#include "RootMotion/FinalIK/InteractionObject_Multiplier.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.InteractionSystem
#include "RootMotion/FinalIK/InteractionSystem.hpp"
// Including type: RootMotion.FinalIK.InteractionTarget
#include "RootMotion/FinalIK/InteractionTarget.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedEffector
#include "RootMotion/FinalIK/FullBodyBipedEffector.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionObject.get_length
float RootMotion::FinalIK::InteractionObject::get_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::get_length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.set_length
void RootMotion::FinalIK::InteractionObject::set_length(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::set_length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.get_lastUsedInteractionSystem
RootMotion::FinalIK::InteractionSystem* RootMotion::FinalIK::InteractionObject::get_lastUsedInteractionSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::get_lastUsedInteractionSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lastUsedInteractionSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionSystem*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.set_lastUsedInteractionSystem
void RootMotion::FinalIK::InteractionObject::set_lastUsedInteractionSystem(RootMotion::FinalIK::InteractionSystem* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::set_lastUsedInteractionSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lastUsedInteractionSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.get_lookAtTarget
UnityEngine::Transform* RootMotion::FinalIK::InteractionObject::get_lookAtTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::get_lookAtTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lookAtTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.get_targetsRoot
UnityEngine::Transform* RootMotion::FinalIK::InteractionObject::get_targetsRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::get_targetsRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_targetsRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.OpenUserManual
void RootMotion::FinalIK::InteractionObject::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.OpenScriptReference
void RootMotion::FinalIK::InteractionObject::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.OpenTutorial1
void RootMotion::FinalIK::InteractionObject::OpenTutorial1() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::OpenTutorial1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.OpenTutorial2
void RootMotion::FinalIK::InteractionObject::OpenTutorial2() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::OpenTutorial2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.OpenTutorial3
void RootMotion::FinalIK::InteractionObject::OpenTutorial3() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::OpenTutorial3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.OpenTutorial4
void RootMotion::FinalIK::InteractionObject::OpenTutorial4() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::OpenTutorial4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.SupportGroup
void RootMotion::FinalIK::InteractionObject::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.ASThread
void RootMotion::FinalIK::InteractionObject::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.Initiate
void RootMotion::FinalIK::InteractionObject::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.GetTarget
RootMotion::FinalIK::InteractionTarget* RootMotion::FinalIK::InteractionObject::GetTarget(RootMotion::FinalIK::FullBodyBipedEffector effectorType, RootMotion::FinalIK::InteractionSystem* interactionSystem) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::GetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType), ::il2cpp_utils::ExtractType(interactionSystem)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionTarget*, false>(this, ___internal__method, effectorType, interactionSystem);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.CurveUsed
bool RootMotion::FinalIK::InteractionObject::CurveUsed(RootMotion::FinalIK::InteractionObject::WeightCurve::Type type) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::CurveUsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CurveUsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, type);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.GetTargets
::Array<RootMotion::FinalIK::InteractionTarget*>* RootMotion::FinalIK::InteractionObject::GetTargets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::GetTargets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTargets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::InteractionTarget*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.GetTarget
UnityEngine::Transform* RootMotion::FinalIK::InteractionObject::GetTarget(RootMotion::FinalIK::FullBodyBipedEffector effectorType, ::Il2CppString* tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::GetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType), ::il2cpp_utils::ExtractType(tag)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method, effectorType, tag);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.OnStartInteraction
void RootMotion::FinalIK::InteractionObject::OnStartInteraction(RootMotion::FinalIK::InteractionSystem* interactionSystem) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::OnStartInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnStartInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interactionSystem)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, interactionSystem);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.Apply
void RootMotion::FinalIK::InteractionObject::Apply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, RootMotion::FinalIK::FullBodyBipedEffector effector, RootMotion::FinalIK::InteractionTarget* target, float timer, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(timer), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, effector, target, timer, weight);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.GetValue
float RootMotion::FinalIK::InteractionObject::GetValue(RootMotion::FinalIK::InteractionObject::WeightCurve::Type weightCurveType, RootMotion::FinalIK::InteractionTarget* target, float timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::GetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weightCurveType), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(timer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, weightCurveType, target, timer);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.Start
void RootMotion::FinalIK::InteractionObject::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.Apply
void RootMotion::FinalIK::InteractionObject::Apply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, RootMotion::FinalIK::FullBodyBipedEffector effector, RootMotion::FinalIK::InteractionObject::WeightCurve::Type type, float value, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, effector, type, value, weight);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.GetTarget
UnityEngine::Transform* RootMotion::FinalIK::InteractionObject::GetTarget(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::GetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.GetWeightCurveIndex
int RootMotion::FinalIK::InteractionObject::GetWeightCurveIndex(RootMotion::FinalIK::InteractionObject::WeightCurve::Type weightCurveType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::GetWeightCurveIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWeightCurveIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weightCurveType)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, weightCurveType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.GetMultiplierIndex
int RootMotion::FinalIK::InteractionObject::GetMultiplierIndex(RootMotion::FinalIK::InteractionObject::WeightCurve::Type weightCurveType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::GetMultiplierIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMultiplierIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weightCurveType)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, weightCurveType);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.InteractionEvent
#include "RootMotion/FinalIK/InteractionObject_InteractionEvent.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.AnimatorEvent
#include "RootMotion/FinalIK/InteractionObject_AnimatorEvent.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.Message
#include "RootMotion/FinalIK/InteractionObject_Message.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.InteractionEvent.Activate
void RootMotion::FinalIK::InteractionObject::InteractionEvent::Activate(UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::InteractionEvent::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.Message
#include "RootMotion/FinalIK/InteractionObject_Message.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String empty
::Il2CppString* RootMotion::FinalIK::InteractionObject::Message::_get_empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Message::_get_empty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("RootMotion.FinalIK", "InteractionObject/Message", "empty"));
}
// Autogenerated static field setter
// Set static field: static private System.String empty
void RootMotion::FinalIK::InteractionObject::Message::_set_empty(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Message::_set_empty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/Message", "empty", value));
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.Message.Send
void RootMotion::FinalIK::InteractionObject::Message::Send(UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Message::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.AnimatorEvent
#include "RootMotion/FinalIK/InteractionObject_AnimatorEvent.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String empty
::Il2CppString* RootMotion::FinalIK::InteractionObject::AnimatorEvent::_get_empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::AnimatorEvent::_get_empty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("RootMotion.FinalIK", "InteractionObject/AnimatorEvent", "empty"));
}
// Autogenerated static field setter
// Set static field: static private System.String empty
void RootMotion::FinalIK::InteractionObject::AnimatorEvent::_set_empty(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::AnimatorEvent::_set_empty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/AnimatorEvent", "empty", value));
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.AnimatorEvent.Activate
void RootMotion::FinalIK::InteractionObject::AnimatorEvent::Activate(bool pickUp) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::AnimatorEvent::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pickUp)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pickUp);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.AnimatorEvent.Activate
void RootMotion::FinalIK::InteractionObject::AnimatorEvent::Activate(UnityEngine::Animator* animator) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::AnimatorEvent::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animator);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.AnimatorEvent.Activate
void RootMotion::FinalIK::InteractionObject::AnimatorEvent::Activate(UnityEngine::Animation* animation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::AnimatorEvent::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve
#include "RootMotion/FinalIK/InteractionObject.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve.GetValue
float RootMotion::FinalIK::InteractionObject::WeightCurve::GetValue(float timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::GetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, timer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type
#include "RootMotion/FinalIK/InteractionObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type PositionWeight
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionWeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionWeight"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type PositionWeight
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionWeight(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionWeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionWeight", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type RotationWeight
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_RotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_RotationWeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "RotationWeight"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type RotationWeight
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_RotationWeight(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_RotationWeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "RotationWeight", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type PositionOffsetX
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionOffsetX() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionOffsetX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionOffsetX"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type PositionOffsetX
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionOffsetX(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionOffsetX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionOffsetX", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type PositionOffsetY
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionOffsetY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionOffsetY"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type PositionOffsetY
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionOffsetY(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionOffsetY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionOffsetY", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type PositionOffsetZ
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionOffsetZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionOffsetZ");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionOffsetZ"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type PositionOffsetZ
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionOffsetZ(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionOffsetZ");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionOffsetZ", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type Pull
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_Pull() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_Pull");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "Pull"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type Pull
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_Pull(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_Pull");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "Pull", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type Reach
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_Reach() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_Reach");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "Reach"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type Reach
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_Reach(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_Reach");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "Reach", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type RotateBoneWeight
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_RotateBoneWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_RotateBoneWeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "RotateBoneWeight"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type RotateBoneWeight
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_RotateBoneWeight(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_RotateBoneWeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "RotateBoneWeight", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type Push
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_Push() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_Push");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "Push"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type Push
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_Push(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_Push");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "Push", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type PushParent
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PushParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PushParent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PushParent"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type PushParent
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PushParent(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PushParent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PushParent", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type PoserWeight
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PoserWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PoserWeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PoserWeight"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type PoserWeight
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PoserWeight(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PoserWeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PoserWeight", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type BendGoalWeight
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_BendGoalWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_BendGoalWeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "BendGoalWeight"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type BendGoalWeight
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_BendGoalWeight(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_BendGoalWeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "BendGoalWeight", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.Multiplier
#include "RootMotion/FinalIK/InteractionObject_Multiplier.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve
#include "RootMotion/FinalIK/InteractionObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.Multiplier.GetValue
float RootMotion::FinalIK::InteractionObject::Multiplier::GetValue(RootMotion::FinalIK::InteractionObject::WeightCurve* weightCurve, float timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Multiplier::GetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weightCurve), ::il2cpp_utils::ExtractType(timer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, weightCurve, timer);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionSystem
#include "RootMotion/FinalIK/InteractionSystem.hpp"
// Including type: RootMotion.FinalIK.InteractionSystem/RootMotion.FinalIK.InteractionDelegate
#include "RootMotion/FinalIK/InteractionSystem_InteractionDelegate.hpp"
// Including type: RootMotion.FinalIK.InteractionSystem/RootMotion.FinalIK.InteractionEventDelegate
#include "RootMotion/FinalIK/InteractionSystem_InteractionEventDelegate.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.Range
#include "RootMotion/FinalIK/InteractionTrigger_Range.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: RootMotion.FinalIK.InteractionLookAt
#include "RootMotion/FinalIK/InteractionLookAt.hpp"
// Including type: RootMotion.FinalIK.InteractionEffector
#include "RootMotion/FinalIK/InteractionEffector.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedEffector
#include "RootMotion/FinalIK/FullBodyBipedEffector.hpp"
// Including type: RootMotion.FinalIK.InteractionObject
#include "RootMotion/FinalIK/InteractionObject.hpp"
// Including type: RootMotion.FinalIK.InteractionTarget
#include "RootMotion/FinalIK/InteractionTarget.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.get_inInteraction
bool RootMotion::FinalIK::InteractionSystem::get_inInteraction() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::get_inInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.get_ik
RootMotion::FinalIK::FullBodyBipedIK* RootMotion::FinalIK::InteractionSystem::get_ik() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::get_ik");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ik", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FullBodyBipedIK*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.set_ik
void RootMotion::FinalIK::InteractionSystem::set_ik(RootMotion::FinalIK::FullBodyBipedIK* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::set_ik");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ik", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.get_triggersInRange
System::Collections::Generic::List_1<RootMotion::FinalIK::InteractionTrigger*>* RootMotion::FinalIK::InteractionSystem::get_triggersInRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::get_triggersInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_triggersInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<RootMotion::FinalIK::InteractionTrigger*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.set_triggersInRange
void RootMotion::FinalIK::InteractionSystem::set_triggersInRange(System::Collections::Generic::List_1<RootMotion::FinalIK::InteractionTrigger*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::set_triggersInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_triggersInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OpenUserManual
void RootMotion::FinalIK::InteractionSystem::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OpenScriptReference
void RootMotion::FinalIK::InteractionSystem::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OpenTutorial1
void RootMotion::FinalIK::InteractionSystem::OpenTutorial1() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OpenTutorial1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OpenTutorial2
void RootMotion::FinalIK::InteractionSystem::OpenTutorial2() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OpenTutorial2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OpenTutorial3
void RootMotion::FinalIK::InteractionSystem::OpenTutorial3() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OpenTutorial3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OpenTutorial4
void RootMotion::FinalIK::InteractionSystem::OpenTutorial4() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OpenTutorial4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.SupportGroup
void RootMotion::FinalIK::InteractionSystem::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.ASThread
void RootMotion::FinalIK::InteractionSystem::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.IsInInteraction
bool RootMotion::FinalIK::InteractionSystem::IsInInteraction(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::IsInInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.IsPaused
bool RootMotion::FinalIK::InteractionSystem::IsPaused(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::IsPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.IsPaused
bool RootMotion::FinalIK::InteractionSystem::IsPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::IsPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.IsInSync
bool RootMotion::FinalIK::InteractionSystem::IsInSync() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::IsInSync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInSync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.StartInteraction
bool RootMotion::FinalIK::InteractionSystem::StartInteraction(RootMotion::FinalIK::FullBodyBipedEffector effectorType, RootMotion::FinalIK::InteractionObject* interactionObject, bool interrupt) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::StartInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType), ::il2cpp_utils::ExtractType(interactionObject), ::il2cpp_utils::ExtractType(interrupt)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, effectorType, interactionObject, interrupt);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.PauseInteraction
bool RootMotion::FinalIK::InteractionSystem::PauseInteraction(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::PauseInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.ResumeInteraction
bool RootMotion::FinalIK::InteractionSystem::ResumeInteraction(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::ResumeInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.StopInteraction
bool RootMotion::FinalIK::InteractionSystem::StopInteraction(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::StopInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.PauseAll
void RootMotion::FinalIK::InteractionSystem::PauseAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::PauseAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.ResumeAll
void RootMotion::FinalIK::InteractionSystem::ResumeAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::ResumeAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.StopAll
void RootMotion::FinalIK::InteractionSystem::StopAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::StopAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetInteractionObject
RootMotion::FinalIK::InteractionObject* RootMotion::FinalIK::InteractionSystem::GetInteractionObject(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetInteractionObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInteractionObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionObject*, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetProgress
float RootMotion::FinalIK::InteractionSystem::GetProgress(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetMinActiveProgress
float RootMotion::FinalIK::InteractionSystem::GetMinActiveProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetMinActiveProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMinActiveProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.TriggerInteraction
bool RootMotion::FinalIK::InteractionSystem::TriggerInteraction(int index, bool interrupt) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::TriggerInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(interrupt)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index, interrupt);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.TriggerInteraction
bool RootMotion::FinalIK::InteractionSystem::TriggerInteraction(int index, bool interrupt, RootMotion::FinalIK::InteractionObject*& interactionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::TriggerInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(interrupt), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index, interrupt, interactionObject);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.TriggerInteraction
bool RootMotion::FinalIK::InteractionSystem::TriggerInteraction(int index, bool interrupt, RootMotion::FinalIK::InteractionTarget*& interactionTarget) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::TriggerInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(interrupt), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionTarget*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index, interrupt, interactionTarget);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetClosestInteractionRange
RootMotion::FinalIK::InteractionTrigger::Range* RootMotion::FinalIK::InteractionSystem::GetClosestInteractionRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetClosestInteractionRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClosestInteractionRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionTrigger::Range*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetClosestInteractionObjectInRange
RootMotion::FinalIK::InteractionObject* RootMotion::FinalIK::InteractionSystem::GetClosestInteractionObjectInRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetClosestInteractionObjectInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClosestInteractionObjectInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionObject*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetClosestInteractionTargetInRange
RootMotion::FinalIK::InteractionTarget* RootMotion::FinalIK::InteractionSystem::GetClosestInteractionTargetInRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetClosestInteractionTargetInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClosestInteractionTargetInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionTarget*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetClosestInteractionObjectsInRange
::Array<RootMotion::FinalIK::InteractionObject*>* RootMotion::FinalIK::InteractionSystem::GetClosestInteractionObjectsInRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetClosestInteractionObjectsInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClosestInteractionObjectsInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::InteractionObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetClosestInteractionTargetsInRange
::Array<RootMotion::FinalIK::InteractionTarget*>* RootMotion::FinalIK::InteractionSystem::GetClosestInteractionTargetsInRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetClosestInteractionTargetsInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClosestInteractionTargetsInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::InteractionTarget*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.TriggerEffectorsReady
bool RootMotion::FinalIK::InteractionSystem::TriggerEffectorsReady(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::TriggerEffectorsReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerEffectorsReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetTriggerRange
RootMotion::FinalIK::InteractionTrigger::Range* RootMotion::FinalIK::InteractionSystem::GetTriggerRange(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetTriggerRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTriggerRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionTrigger::Range*, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetClosestTriggerIndex
int RootMotion::FinalIK::InteractionSystem::GetClosestTriggerIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetClosestTriggerIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClosestTriggerIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.Start
void RootMotion::FinalIK::InteractionSystem::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.InteractionPause
void RootMotion::FinalIK::InteractionSystem::InteractionPause(RootMotion::FinalIK::FullBodyBipedEffector effector, RootMotion::FinalIK::InteractionObject* interactionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InteractionPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(interactionObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effector, interactionObject);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.InteractionResume
void RootMotion::FinalIK::InteractionSystem::InteractionResume(RootMotion::FinalIK::FullBodyBipedEffector effector, RootMotion::FinalIK::InteractionObject* interactionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionResume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InteractionResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(interactionObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effector, interactionObject);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.InteractionStop
void RootMotion::FinalIK::InteractionSystem::InteractionStop(RootMotion::FinalIK::FullBodyBipedEffector effector, RootMotion::FinalIK::InteractionObject* interactionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionStop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InteractionStop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(interactionObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effector, interactionObject);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.LookAtInteraction
void RootMotion::FinalIK::InteractionSystem::LookAtInteraction(RootMotion::FinalIK::FullBodyBipedEffector effector, RootMotion::FinalIK::InteractionObject* interactionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::LookAtInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookAtInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(interactionObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effector, interactionObject);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OnTriggerEnter
void RootMotion::FinalIK::InteractionSystem::OnTriggerEnter(UnityEngine::Collider* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, c);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OnTriggerExit
void RootMotion::FinalIK::InteractionSystem::OnTriggerExit(UnityEngine::Collider* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, c);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.ContactIsInRange
bool RootMotion::FinalIK::InteractionSystem::ContactIsInRange(int index, int& bestRangeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::ContactIsInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContactIsInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index, bestRangeIndex);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OnDrawGizmosSelected
void RootMotion::FinalIK::InteractionSystem::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.Update
void RootMotion::FinalIK::InteractionSystem::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.Raycasting
void RootMotion::FinalIK::InteractionSystem::Raycasting() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::Raycasting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Raycasting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.UpdateTriggerEventBroadcasting
void RootMotion::FinalIK::InteractionSystem::UpdateTriggerEventBroadcasting() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::UpdateTriggerEventBroadcasting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTriggerEventBroadcasting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.UpdateEffectors
void RootMotion::FinalIK::InteractionSystem::UpdateEffectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::UpdateEffectors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateEffectors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OnPreFBBIK
void RootMotion::FinalIK::InteractionSystem::OnPreFBBIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OnPreFBBIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreFBBIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OnPostFBBIK
void RootMotion::FinalIK::InteractionSystem::OnPostFBBIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OnPostFBBIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostFBBIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OnFixTransforms
void RootMotion::FinalIK::InteractionSystem::OnFixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OnFixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OnDestroy
void RootMotion::FinalIK::InteractionSystem::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.IsValid
bool RootMotion::FinalIK::InteractionSystem::IsValid(bool log) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(log)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, log);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.TriggerIndexIsValid
bool RootMotion::FinalIK::InteractionSystem::TriggerIndexIsValid(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::TriggerIndexIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerIndexIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionSystem/RootMotion.FinalIK.InteractionDelegate
#include "RootMotion/FinalIK/InteractionSystem_InteractionDelegate.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedEffector
#include "RootMotion/FinalIK/FullBodyBipedEffector.hpp"
// Including type: RootMotion.FinalIK.InteractionObject
#include "RootMotion/FinalIK/InteractionObject.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionSystem/RootMotion.FinalIK.InteractionDelegate.Invoke
void RootMotion::FinalIK::InteractionSystem::InteractionDelegate::Invoke(RootMotion::FinalIK::FullBodyBipedEffector effectorType, RootMotion::FinalIK::InteractionObject* interactionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType), ::il2cpp_utils::ExtractType(interactionObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effectorType, interactionObject);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem/RootMotion.FinalIK.InteractionDelegate.BeginInvoke
System::IAsyncResult* RootMotion::FinalIK::InteractionSystem::InteractionDelegate::BeginInvoke(RootMotion::FinalIK::FullBodyBipedEffector effectorType, RootMotion::FinalIK::InteractionObject* interactionObject, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType), ::il2cpp_utils::ExtractType(interactionObject), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, effectorType, interactionObject, callback, object);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem/RootMotion.FinalIK.InteractionDelegate.EndInvoke
void RootMotion::FinalIK::InteractionSystem::InteractionDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionSystem/RootMotion.FinalIK.InteractionEventDelegate
#include "RootMotion/FinalIK/InteractionSystem_InteractionEventDelegate.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedEffector
#include "RootMotion/FinalIK/FullBodyBipedEffector.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.InteractionEvent
#include "RootMotion/FinalIK/InteractionObject_InteractionEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionSystem/RootMotion.FinalIK.InteractionEventDelegate.Invoke
void RootMotion::FinalIK::InteractionSystem::InteractionEventDelegate::Invoke(RootMotion::FinalIK::FullBodyBipedEffector effectorType, RootMotion::FinalIK::InteractionObject* interactionObject, RootMotion::FinalIK::InteractionObject::InteractionEvent* interactionEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionEventDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType), ::il2cpp_utils::ExtractType(interactionObject), ::il2cpp_utils::ExtractType(interactionEvent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effectorType, interactionObject, interactionEvent);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem/RootMotion.FinalIK.InteractionEventDelegate.BeginInvoke
System::IAsyncResult* RootMotion::FinalIK::InteractionSystem::InteractionEventDelegate::BeginInvoke(RootMotion::FinalIK::FullBodyBipedEffector effectorType, RootMotion::FinalIK::InteractionObject* interactionObject, RootMotion::FinalIK::InteractionObject::InteractionEvent* interactionEvent, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionEventDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType), ::il2cpp_utils::ExtractType(interactionObject), ::il2cpp_utils::ExtractType(interactionEvent), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, effectorType, interactionObject, interactionEvent, callback, object);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem/RootMotion.FinalIK.InteractionEventDelegate.EndInvoke
void RootMotion::FinalIK::InteractionSystem::InteractionEventDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionEventDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionTarget
#include "RootMotion/FinalIK/InteractionTarget.hpp"
// Including type: RootMotion.FinalIK.InteractionTarget/RootMotion.FinalIK.Multiplier
#include "RootMotion/FinalIK/InteractionTarget_Multiplier.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/RootMotion.FinalIK.WeightCurve/RootMotion.FinalIK.Type
#include "RootMotion/FinalIK/InteractionObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.OpenUserManual
void RootMotion::FinalIK::InteractionTarget::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.OpenScriptReference
void RootMotion::FinalIK::InteractionTarget::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.OpenTutorial1
void RootMotion::FinalIK::InteractionTarget::OpenTutorial1() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::OpenTutorial1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.OpenTutorial2
void RootMotion::FinalIK::InteractionTarget::OpenTutorial2() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::OpenTutorial2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.OpenTutorial3
void RootMotion::FinalIK::InteractionTarget::OpenTutorial3() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::OpenTutorial3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.OpenTutorial4
void RootMotion::FinalIK::InteractionTarget::OpenTutorial4() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::OpenTutorial4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.SupportGroup
void RootMotion::FinalIK::InteractionTarget::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.ASThread
void RootMotion::FinalIK::InteractionTarget::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.GetValue
float RootMotion::FinalIK::InteractionTarget::GetValue(RootMotion::FinalIK::InteractionObject::WeightCurve::Type curveType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::GetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curveType)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, curveType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.ResetRotation
void RootMotion::FinalIK::InteractionTarget::ResetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::ResetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.RotateTo
void RootMotion::FinalIK::InteractionTarget::RotateTo(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::RotateTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.InteractionTarget/RootMotion.FinalIK.Multiplier
#include "RootMotion/FinalIK/InteractionTarget_Multiplier.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionTrigger
#include "RootMotion/FinalIK/InteractionTrigger.hpp"
// Including type: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.CharacterPosition
#include "RootMotion/FinalIK/InteractionTrigger_CharacterPosition.hpp"
// Including type: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.CameraPosition
#include "RootMotion/FinalIK/InteractionTrigger_CameraPosition.hpp"
// Including type: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.Range
#include "RootMotion/FinalIK/InteractionTrigger_Range.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger.OpenUserManual
void RootMotion::FinalIK::InteractionTrigger::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger.OpenScriptReference
void RootMotion::FinalIK::InteractionTrigger::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger.OpenTutorial4
void RootMotion::FinalIK::InteractionTrigger::OpenTutorial4() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::OpenTutorial4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger.SupportGroup
void RootMotion::FinalIK::InteractionTrigger::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger.ASThread
void RootMotion::FinalIK::InteractionTrigger::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger.Start
void RootMotion::FinalIK::InteractionTrigger::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger.GetBestRangeIndex
int RootMotion::FinalIK::InteractionTrigger::GetBestRangeIndex(UnityEngine::Transform* character, UnityEngine::Transform* raycastFrom, UnityEngine::RaycastHit raycastHit) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::GetBestRangeIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBestRangeIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character), ::il2cpp_utils::ExtractType(raycastFrom), ::il2cpp_utils::ExtractType(raycastHit)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, character, raycastFrom, raycastHit);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.CharacterPosition
#include "RootMotion/FinalIK/InteractionTrigger_CharacterPosition.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.CharacterPosition.get_offset3D
UnityEngine::Vector3 RootMotion::FinalIK::InteractionTrigger::CharacterPosition::get_offset3D() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::CharacterPosition::get_offset3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offset3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.CharacterPosition.get_direction3D
UnityEngine::Vector3 RootMotion::FinalIK::InteractionTrigger::CharacterPosition::get_direction3D() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::CharacterPosition::get_direction3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_direction3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.CharacterPosition.IsInRange
bool RootMotion::FinalIK::InteractionTrigger::CharacterPosition::IsInRange(UnityEngine::Transform* character, UnityEngine::Transform* trigger, float& error) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::CharacterPosition::IsInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character), ::il2cpp_utils::ExtractType(trigger), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, character, trigger, error);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.CameraPosition
#include "RootMotion/FinalIK/InteractionTrigger_CameraPosition.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.CameraPosition.GetRotation
UnityEngine::Quaternion RootMotion::FinalIK::InteractionTrigger::CameraPosition::GetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::CameraPosition::GetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.CameraPosition.IsInRange
bool RootMotion::FinalIK::InteractionTrigger::CameraPosition::IsInRange(UnityEngine::Transform* raycastFrom, UnityEngine::RaycastHit hit, UnityEngine::Transform* trigger, float& error) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::CameraPosition::IsInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(raycastFrom), ::il2cpp_utils::ExtractType(hit), ::il2cpp_utils::ExtractType(trigger), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, raycastFrom, hit, trigger, error);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.Range
#include "RootMotion/FinalIK/InteractionTrigger_Range.hpp"
// Including type: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.Range/RootMotion.FinalIK.Interaction
#include "RootMotion/FinalIK/InteractionTrigger_Range_Interaction.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.CharacterPosition
#include "RootMotion/FinalIK/InteractionTrigger_CharacterPosition.hpp"
// Including type: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.CameraPosition
#include "RootMotion/FinalIK/InteractionTrigger_CameraPosition.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.Range.IsInRange
bool RootMotion::FinalIK::InteractionTrigger::Range::IsInRange(UnityEngine::Transform* character, UnityEngine::Transform* raycastFrom, UnityEngine::RaycastHit raycastHit, UnityEngine::Transform* trigger, float& maxError) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::Range::IsInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character), ::il2cpp_utils::ExtractType(raycastFrom), ::il2cpp_utils::ExtractType(raycastHit), ::il2cpp_utils::ExtractType(trigger), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, character, raycastFrom, raycastHit, trigger, maxError);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.Range/RootMotion.FinalIK.Interaction
#include "RootMotion/FinalIK/InteractionTrigger_Range_Interaction.hpp"
// Including type: RootMotion.FinalIK.InteractionObject
#include "RootMotion/FinalIK/InteractionObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GenericPoser
#include "RootMotion/FinalIK/GenericPoser.hpp"
// Including type: RootMotion.FinalIK.GenericPoser/RootMotion.FinalIK.Map
#include "RootMotion/FinalIK/GenericPoser_Map.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GenericPoser.StoreDefaultState
void RootMotion::FinalIK::GenericPoser::StoreDefaultState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GenericPoser::StoreDefaultState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GenericPoser.GetTargetNamed
UnityEngine::Transform* RootMotion::FinalIK::GenericPoser::GetTargetNamed(::Il2CppString* tName, ::Array<UnityEngine::Transform*>* array) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GenericPoser::GetTargetNamed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTargetNamed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tName), ::il2cpp_utils::ExtractType(array)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method, tName, array);
}
// Autogenerated method: RootMotion.FinalIK.GenericPoser.AutoMapping
void RootMotion::FinalIK::GenericPoser::AutoMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GenericPoser::AutoMapping");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AutoMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GenericPoser.InitiatePoser
void RootMotion::FinalIK::GenericPoser::InitiatePoser() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GenericPoser::InitiatePoser");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiatePoser", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GenericPoser.UpdatePoser
void RootMotion::FinalIK::GenericPoser::UpdatePoser() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GenericPoser::UpdatePoser");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePoser", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GenericPoser.FixPoserTransforms
void RootMotion::FinalIK::GenericPoser::FixPoserTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GenericPoser::FixPoserTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixPoserTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.GenericPoser/RootMotion.FinalIK.Map
#include "RootMotion/FinalIK/GenericPoser_Map.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GenericPoser/RootMotion.FinalIK.Map.StoreDefaultState
void RootMotion::FinalIK::GenericPoser::Map::StoreDefaultState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GenericPoser::Map::StoreDefaultState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GenericPoser/RootMotion.FinalIK.Map.FixTransform
void RootMotion::FinalIK::GenericPoser::Map::FixTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GenericPoser::Map::FixTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GenericPoser/RootMotion.FinalIK.Map.Update
void RootMotion::FinalIK::GenericPoser::Map::Update(float localRotationWeight, float localPositionWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GenericPoser::Map::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localRotationWeight), ::il2cpp_utils::ExtractType(localPositionWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localRotationWeight, localPositionWeight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.HandPoser
#include "RootMotion/FinalIK/HandPoser.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.HandPoser.StoreDefaultState
void RootMotion::FinalIK::HandPoser::StoreDefaultState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HandPoser::StoreDefaultState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HandPoser.AutoMapping
void RootMotion::FinalIK::HandPoser::AutoMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HandPoser::AutoMapping");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AutoMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HandPoser.InitiatePoser
void RootMotion::FinalIK::HandPoser::InitiatePoser() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HandPoser::InitiatePoser");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiatePoser", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HandPoser.FixPoserTransforms
void RootMotion::FinalIK::HandPoser::FixPoserTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HandPoser::FixPoserTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixPoserTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HandPoser.UpdatePoser
void RootMotion::FinalIK::HandPoser::UpdatePoser() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HandPoser::UpdatePoser");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePoser", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Poser
#include "RootMotion/FinalIK/Poser.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Poser.AutoMapping
void RootMotion::FinalIK::Poser::AutoMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Poser::AutoMapping");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AutoMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Poser.UpdateManual
void RootMotion::FinalIK::Poser::UpdateManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Poser::UpdateManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Poser.InitiatePoser
void RootMotion::FinalIK::Poser::InitiatePoser() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Poser::InitiatePoser");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiatePoser", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Poser.UpdatePoser
void RootMotion::FinalIK::Poser::UpdatePoser() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Poser::UpdatePoser");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePoser", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Poser.FixPoserTransforms
void RootMotion::FinalIK::Poser::FixPoserTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Poser::FixPoserTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixPoserTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Poser.UpdateSolver
void RootMotion::FinalIK::Poser::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Poser::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Poser.InitiateSolver
void RootMotion::FinalIK::Poser::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Poser::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Poser.FixTransforms
void RootMotion::FinalIK::Poser::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Poser::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.RagdollUtility
#include "RootMotion/FinalIK/RagdollUtility.hpp"
// Including type: RootMotion.FinalIK.RagdollUtility/RootMotion.FinalIK.Rigidbone
#include "RootMotion/FinalIK/RagdollUtility_Rigidbone.hpp"
// Including type: RootMotion.FinalIK.RagdollUtility/RootMotion.FinalIK.Child
#include "RootMotion/FinalIK/RagdollUtility_Child.hpp"
// Including type: RootMotion.FinalIK.RagdollUtility/RootMotion.FinalIK.<DisableRagdollSmooth>d__21
#include "RootMotion/FinalIK/RagdollUtility_-DisableRagdollSmooth-d__21.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.get_isRagdoll
bool RootMotion::FinalIK::RagdollUtility::get_isRagdoll() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::get_isRagdoll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRagdoll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.get_ikUsed
bool RootMotion::FinalIK::RagdollUtility::get_ikUsed() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::get_ikUsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ikUsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.EnableRagdoll
void RootMotion::FinalIK::RagdollUtility::EnableRagdoll() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::EnableRagdoll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnableRagdoll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.DisableRagdoll
void RootMotion::FinalIK::RagdollUtility::DisableRagdoll() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::DisableRagdoll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableRagdoll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.Start
void RootMotion::FinalIK::RagdollUtility::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.DisableRagdollSmooth
System::Collections::IEnumerator* RootMotion::FinalIK::RagdollUtility::DisableRagdollSmooth() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::DisableRagdollSmooth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableRagdollSmooth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.Update
void RootMotion::FinalIK::RagdollUtility::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.FixedUpdate
void RootMotion::FinalIK::RagdollUtility::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.LateUpdate
void RootMotion::FinalIK::RagdollUtility::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.AfterLastIK
void RootMotion::FinalIK::RagdollUtility::AfterLastIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::AfterLastIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AfterLastIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.AfterAnimation
void RootMotion::FinalIK::RagdollUtility::AfterAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::AfterAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AfterAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.OnFinalPose
void RootMotion::FinalIK::RagdollUtility::OnFinalPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::OnFinalPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFinalPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.RagdollEnabler
void RootMotion::FinalIK::RagdollUtility::RagdollEnabler() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::RagdollEnabler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RagdollEnabler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.RecordVelocities
void RootMotion::FinalIK::RagdollUtility::RecordVelocities() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::RecordVelocities");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordVelocities", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.StoreLocalState
void RootMotion::FinalIK::RagdollUtility::StoreLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::StoreLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.FixTransforms
void RootMotion::FinalIK::RagdollUtility::FixTransforms(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility.OnDestroy
void RootMotion::FinalIK::RagdollUtility::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.RagdollUtility/RootMotion.FinalIK.Rigidbone
#include "RootMotion/FinalIK/RagdollUtility_Rigidbone.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.Joint
#include "UnityEngine/Joint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.RagdollUtility/RootMotion.FinalIK.Rigidbone.RecordVelocity
void RootMotion::FinalIK::RagdollUtility::Rigidbone::RecordVelocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::Rigidbone::RecordVelocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordVelocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility/RootMotion.FinalIK.Rigidbone.WakeUp
void RootMotion::FinalIK::RagdollUtility::Rigidbone::WakeUp(float velocityWeight, float angularVelocityWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::Rigidbone::WakeUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WakeUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(velocityWeight), ::il2cpp_utils::ExtractType(angularVelocityWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, velocityWeight, angularVelocityWeight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.RagdollUtility/RootMotion.FinalIK.Child
#include "RootMotion/FinalIK/RagdollUtility_Child.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.RagdollUtility/RootMotion.FinalIK.Child.FixTransform
void RootMotion::FinalIK::RagdollUtility::Child::FixTransform(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::Child::FixTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility/RootMotion.FinalIK.Child.StoreLocalState
void RootMotion::FinalIK::RagdollUtility::Child::StoreLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::Child::StoreLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.RagdollUtility/RootMotion.FinalIK.<DisableRagdollSmooth>d__21
#include "RootMotion/FinalIK/RagdollUtility_-DisableRagdollSmooth-d__21.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.RagdollUtility/RootMotion.FinalIK.<DisableRagdollSmooth>d__21.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* RootMotion::FinalIK::RagdollUtility::$DisableRagdollSmooth$d__21::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::$DisableRagdollSmooth$d__21::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility/RootMotion.FinalIK.<DisableRagdollSmooth>d__21.System.Collections.IEnumerator.get_Current
::Il2CppObject* RootMotion::FinalIK::RagdollUtility::$DisableRagdollSmooth$d__21::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::$DisableRagdollSmooth$d__21::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility/RootMotion.FinalIK.<DisableRagdollSmooth>d__21.System.IDisposable.Dispose
void RootMotion::FinalIK::RagdollUtility::$DisableRagdollSmooth$d__21::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::$DisableRagdollSmooth$d__21::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility/RootMotion.FinalIK.<DisableRagdollSmooth>d__21.MoveNext
bool RootMotion::FinalIK::RagdollUtility::$DisableRagdollSmooth$d__21::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::$DisableRagdollSmooth$d__21::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RagdollUtility/RootMotion.FinalIK.<DisableRagdollSmooth>d__21.System.Collections.IEnumerator.Reset
void RootMotion::FinalIK::RagdollUtility::$DisableRagdollSmooth$d__21::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RagdollUtility::$DisableRagdollSmooth$d__21::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.RotationLimit
#include "RootMotion/FinalIK/RotationLimit.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.RotationLimit.get_secondaryAxis
UnityEngine::Vector3 RootMotion::FinalIK::RotationLimit::get_secondaryAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::get_secondaryAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_secondaryAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.get_crossAxis
UnityEngine::Vector3 RootMotion::FinalIK::RotationLimit::get_crossAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::get_crossAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_crossAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.get_defaultLocalRotationOverride
bool RootMotion::FinalIK::RotationLimit::get_defaultLocalRotationOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::get_defaultLocalRotationOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultLocalRotationOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.set_defaultLocalRotationOverride
void RootMotion::FinalIK::RotationLimit::set_defaultLocalRotationOverride(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::set_defaultLocalRotationOverride");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_defaultLocalRotationOverride", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.SetDefaultLocalRotation
void RootMotion::FinalIK::RotationLimit::SetDefaultLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::SetDefaultLocalRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDefaultLocalRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.SetDefaultLocalRotation
void RootMotion::FinalIK::RotationLimit::SetDefaultLocalRotation(UnityEngine::Quaternion localRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::SetDefaultLocalRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDefaultLocalRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localRotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localRotation);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.GetLimitedLocalRotation
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimit::GetLimitedLocalRotation(UnityEngine::Quaternion localRotation, bool& changed) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::GetLimitedLocalRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLimitedLocalRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localRotation), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, localRotation, changed);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.Apply
bool RootMotion::FinalIK::RotationLimit::Apply() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.Disable
void RootMotion::FinalIK::RotationLimit::Disable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::Disable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Disable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.LimitRotation
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimit::LimitRotation(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::LimitRotation");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, rotation);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.Awake
void RootMotion::FinalIK::RotationLimit::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.LateUpdate
void RootMotion::FinalIK::RotationLimit::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.LogWarning
void RootMotion::FinalIK::RotationLimit::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.Limit1DOF
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimit::Limit1DOF(UnityEngine::Quaternion rotation, UnityEngine::Vector3 axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::Limit1DOF");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "RotationLimit", "Limit1DOF", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(axis)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rotation, axis);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.LimitTwist
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimit::LimitTwist(UnityEngine::Quaternion rotation, UnityEngine::Vector3 axis, UnityEngine::Vector3 orthoAxis, float twistLimit) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::LimitTwist");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "RotationLimit", "LimitTwist", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(axis), ::il2cpp_utils::ExtractType(orthoAxis), ::il2cpp_utils::ExtractType(twistLimit)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rotation, axis, orthoAxis, twistLimit);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.GetOrthogonalAngle
float RootMotion::FinalIK::RotationLimit::GetOrthogonalAngle(UnityEngine::Vector3 v1, UnityEngine::Vector3 v2, UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::GetOrthogonalAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "RotationLimit", "GetOrthogonalAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v1), ::il2cpp_utils::ExtractType(v2), ::il2cpp_utils::ExtractType(normal)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, v1, v2, normal);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.RotationLimitAngle
#include "RootMotion/FinalIK/RotationLimitAngle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.OpenUserManual
void RootMotion::FinalIK::RotationLimitAngle::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitAngle::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.OpenScriptReference
void RootMotion::FinalIK::RotationLimitAngle::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitAngle::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.SupportGroup
void RootMotion::FinalIK::RotationLimitAngle::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitAngle::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.ASThread
void RootMotion::FinalIK::RotationLimitAngle::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitAngle::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.LimitSwing
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimitAngle::LimitSwing(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitAngle::LimitSwing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitSwing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, rotation);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.LimitRotation
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimitAngle::LimitRotation(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitAngle::LimitRotation");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, rotation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.RotationLimitHinge
#include "RootMotion/FinalIK/RotationLimitHinge.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.RotationLimitHinge.OpenUserManual
void RootMotion::FinalIK::RotationLimitHinge::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitHinge::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitHinge.OpenScriptReference
void RootMotion::FinalIK::RotationLimitHinge::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitHinge::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitHinge.SupportGroup
void RootMotion::FinalIK::RotationLimitHinge::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitHinge::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitHinge.ASThread
void RootMotion::FinalIK::RotationLimitHinge::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitHinge::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitHinge.LimitHinge
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimitHinge::LimitHinge(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitHinge::LimitHinge");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitHinge", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, rotation);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitHinge.LimitRotation
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimitHinge::LimitRotation(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitHinge::LimitRotation");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, rotation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.RotationLimitPolygonal
#include "RootMotion/FinalIK/RotationLimitPolygonal.hpp"
// Including type: RootMotion.FinalIK.RotationLimitPolygonal/RootMotion.FinalIK.ReachCone
#include "RootMotion/FinalIK/RotationLimitPolygonal_ReachCone.hpp"
// Including type: RootMotion.FinalIK.RotationLimitPolygonal/RootMotion.FinalIK.LimitPoint
#include "RootMotion/FinalIK/RotationLimitPolygonal_LimitPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.OpenUserManual
void RootMotion::FinalIK::RotationLimitPolygonal::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.OpenScriptReference
void RootMotion::FinalIK::RotationLimitPolygonal::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.SupportGroup
void RootMotion::FinalIK::RotationLimitPolygonal::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.ASThread
void RootMotion::FinalIK::RotationLimitPolygonal::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.SetLimitPoints
void RootMotion::FinalIK::RotationLimitPolygonal::SetLimitPoints(::Array<RootMotion::FinalIK::RotationLimitPolygonal::LimitPoint*>* points) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::SetLimitPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLimitPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(points)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, points);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.Start
void RootMotion::FinalIK::RotationLimitPolygonal::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.ResetToDefault
void RootMotion::FinalIK::RotationLimitPolygonal::ResetToDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::ResetToDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetToDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.BuildReachCones
void RootMotion::FinalIK::RotationLimitPolygonal::BuildReachCones() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::BuildReachCones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BuildReachCones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.SmoothPoints
::Array<UnityEngine::Vector3>* RootMotion::FinalIK::RotationLimitPolygonal::SmoothPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::SmoothPoints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SmoothPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Vector3>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.GetScalar
float RootMotion::FinalIK::RotationLimitPolygonal::GetScalar(int k) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::GetScalar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScalar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(k)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, k);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.PointToTangentPlane
UnityEngine::Vector3 RootMotion::FinalIK::RotationLimitPolygonal::PointToTangentPlane(UnityEngine::Vector3 p, float r) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::PointToTangentPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PointToTangentPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, p, r);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.TangentPointToSphere
UnityEngine::Vector3 RootMotion::FinalIK::RotationLimitPolygonal::TangentPointToSphere(UnityEngine::Vector3 q, float r) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::TangentPointToSphere");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TangentPointToSphere", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q), ::il2cpp_utils::ExtractType(r)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, q, r);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.LimitSwing
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimitPolygonal::LimitSwing(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::LimitSwing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitSwing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, rotation);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.GetReachCone
int RootMotion::FinalIK::RotationLimitPolygonal::GetReachCone(UnityEngine::Vector3 L) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::GetReachCone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetReachCone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(L)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, L);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.LimitRotation
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimitPolygonal::LimitRotation(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::LimitRotation");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, rotation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.RotationLimitPolygonal/RootMotion.FinalIK.ReachCone
#include "RootMotion/FinalIK/RotationLimitPolygonal_ReachCone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal/RootMotion.FinalIK.ReachCone.get_o
UnityEngine::Vector3 RootMotion::FinalIK::RotationLimitPolygonal::ReachCone::get_o() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::ReachCone::get_o");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_o", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal/RootMotion.FinalIK.ReachCone.get_a
UnityEngine::Vector3 RootMotion::FinalIK::RotationLimitPolygonal::ReachCone::get_a() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::ReachCone::get_a");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_a", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal/RootMotion.FinalIK.ReachCone.get_b
UnityEngine::Vector3 RootMotion::FinalIK::RotationLimitPolygonal::ReachCone::get_b() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::ReachCone::get_b");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_b", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal/RootMotion.FinalIK.ReachCone.get_c
UnityEngine::Vector3 RootMotion::FinalIK::RotationLimitPolygonal::ReachCone::get_c() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::ReachCone::get_c");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_c", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal/RootMotion.FinalIK.ReachCone.get_isValid
bool RootMotion::FinalIK::RotationLimitPolygonal::ReachCone::get_isValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::ReachCone::get_isValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal/RootMotion.FinalIK.ReachCone.Calculate
void RootMotion::FinalIK::RotationLimitPolygonal::ReachCone::Calculate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitPolygonal::ReachCone::Calculate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Calculate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.RotationLimitPolygonal/RootMotion.FinalIK.LimitPoint
#include "RootMotion/FinalIK/RotationLimitPolygonal_LimitPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.RotationLimitSpline
#include "RootMotion/FinalIK/RotationLimitSpline.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.RotationLimitSpline.OpenUserManual
void RootMotion::FinalIK::RotationLimitSpline::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitSpline::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitSpline.OpenScriptReference
void RootMotion::FinalIK::RotationLimitSpline::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitSpline::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitSpline.SupportGroup
void RootMotion::FinalIK::RotationLimitSpline::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitSpline::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitSpline.ASThread
void RootMotion::FinalIK::RotationLimitSpline::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitSpline::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitSpline.SetSpline
void RootMotion::FinalIK::RotationLimitSpline::SetSpline(::Array<UnityEngine::Keyframe>* keyframes) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitSpline::SetSpline");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSpline", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyframes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keyframes);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitSpline.LimitSwing
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimitSpline::LimitSwing(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitSpline::LimitSwing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitSwing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, rotation);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitSpline.LimitRotation
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimitSpline::LimitRotation(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitSpline::LimitRotation");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, rotation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.AimController
#include "RootMotion/FinalIK/AimController.hpp"
// Including type: RootMotion.FinalIK.AimController/RootMotion.FinalIK.<TurnToTarget>d__33
#include "RootMotion/FinalIK/AimController_-TurnToTarget-d__33.hpp"
// Including type: RootMotion.FinalIK.AimIK
#include "RootMotion/FinalIK/AimIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.AimController.get_pivot
UnityEngine::Vector3 RootMotion::FinalIK::AimController::get_pivot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimController::get_pivot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pivot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimController.Start
void RootMotion::FinalIK::AimController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimController.LateUpdate
void RootMotion::FinalIK::AimController::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimController::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimController.ApplyMinDistance
void RootMotion::FinalIK::AimController::ApplyMinDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimController::ApplyMinDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyMinDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimController.RootRotation
void RootMotion::FinalIK::AimController::RootRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimController::RootRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RootRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimController.TurnToTarget
System::Collections::IEnumerator* RootMotion::FinalIK::AimController::TurnToTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimController::TurnToTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TurnToTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.AimController/RootMotion.FinalIK.<TurnToTarget>d__33
#include "RootMotion/FinalIK/AimController_-TurnToTarget-d__33.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.AimController/RootMotion.FinalIK.<TurnToTarget>d__33.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* RootMotion::FinalIK::AimController::$TurnToTarget$d__33::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimController::$TurnToTarget$d__33::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimController/RootMotion.FinalIK.<TurnToTarget>d__33.System.Collections.IEnumerator.get_Current
::Il2CppObject* RootMotion::FinalIK::AimController::$TurnToTarget$d__33::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimController::$TurnToTarget$d__33::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimController/RootMotion.FinalIK.<TurnToTarget>d__33.System.IDisposable.Dispose
void RootMotion::FinalIK::AimController::$TurnToTarget$d__33::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimController::$TurnToTarget$d__33::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimController/RootMotion.FinalIK.<TurnToTarget>d__33.MoveNext
bool RootMotion::FinalIK::AimController::$TurnToTarget$d__33::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimController::$TurnToTarget$d__33::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimController/RootMotion.FinalIK.<TurnToTarget>d__33.System.Collections.IEnumerator.Reset
void RootMotion::FinalIK::AimController::$TurnToTarget$d__33::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimController::$TurnToTarget$d__33::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.AimPoser
#include "RootMotion/FinalIK/AimPoser.hpp"
// Including type: RootMotion.FinalIK.AimPoser/RootMotion.FinalIK.Pose
#include "RootMotion/FinalIK/AimPoser_Pose.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.AimPoser.GetPose
RootMotion::FinalIK::AimPoser::Pose* RootMotion::FinalIK::AimPoser::GetPose(UnityEngine::Vector3 localDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimPoser::GetPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localDirection)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::AimPoser::Pose*, false>(this, ___internal__method, localDirection);
}
// Autogenerated method: RootMotion.FinalIK.AimPoser.SetPoseActive
void RootMotion::FinalIK::AimPoser::SetPoseActive(RootMotion::FinalIK::AimPoser::Pose* pose) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimPoser::SetPoseActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPoseActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pose)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pose);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.AimPoser/RootMotion.FinalIK.Pose
#include "RootMotion/FinalIK/AimPoser_Pose.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.AimPoser/RootMotion.FinalIK.Pose.IsInDirection
bool RootMotion::FinalIK::AimPoser::Pose::IsInDirection(UnityEngine::Vector3 d) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimPoser::Pose::IsInDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, d);
}
// Autogenerated method: RootMotion.FinalIK.AimPoser/RootMotion.FinalIK.Pose.SetAngleBuffer
void RootMotion::FinalIK::AimPoser::Pose::SetAngleBuffer(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimPoser::Pose::SetAngleBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAngleBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Amplifier
#include "RootMotion/FinalIK/Amplifier.hpp"
// Including type: RootMotion.FinalIK.Amplifier/RootMotion.FinalIK.Body
#include "RootMotion/FinalIK/Amplifier_Body.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Amplifier.OnModifyOffset
void RootMotion::FinalIK::Amplifier::OnModifyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Amplifier::OnModifyOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnModifyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Amplifier/RootMotion.FinalIK.Body
#include "RootMotion/FinalIK/Amplifier_Body.hpp"
// Including type: RootMotion.FinalIK.Amplifier/RootMotion.FinalIK.Body/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/Amplifier_Body_EffectorLink.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Amplifier/RootMotion.FinalIK.Body.Update
void RootMotion::FinalIK::Amplifier::Body::Update(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, float w, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Amplifier::Body::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(w), ::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, w, deltaTime);
}
// Autogenerated method: RootMotion.FinalIK.Amplifier/RootMotion.FinalIK.Body.Multiply
UnityEngine::Vector3 RootMotion::FinalIK::Amplifier::Body::Multiply(UnityEngine::Vector3 v1, UnityEngine::Vector3 v2) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Amplifier::Body::Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "Amplifier/Body", "Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v1), ::il2cpp_utils::ExtractType(v2)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, v1, v2);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Amplifier/RootMotion.FinalIK.Body/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/Amplifier_Body_EffectorLink.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.BodyTilt
#include "RootMotion/FinalIK/BodyTilt.hpp"
// Including type: RootMotion.FinalIK.OffsetPose
#include "RootMotion/FinalIK/OffsetPose.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.BodyTilt.Start
void RootMotion::FinalIK::BodyTilt::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BodyTilt::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.BodyTilt.OnModifyOffset
void RootMotion::FinalIK::BodyTilt::OnModifyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::BodyTilt::OnModifyOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnModifyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.EditorIK
#include "RootMotion/FinalIK/EditorIK.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.EditorIK.Start
void RootMotion::FinalIK::EditorIK::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::EditorIK::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.EditorIK.Update
void RootMotion::FinalIK::EditorIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::EditorIK::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.HitReaction
#include "RootMotion/FinalIK/HitReaction.hpp"
// Including type: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint
#include "RootMotion/FinalIK/HitReaction_HitPoint.hpp"
// Including type: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointEffector
#include "RootMotion/FinalIK/HitReaction_HitPointEffector.hpp"
// Including type: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointBone
#include "RootMotion/FinalIK/HitReaction_HitPointBone.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.HitReaction.get_inProgress
bool RootMotion::FinalIK::HitReaction::get_inProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::get_inProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction.Hit
void RootMotion::FinalIK::HitReaction::Hit(UnityEngine::Collider* collider, UnityEngine::Vector3 force, UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::Hit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collider), ::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(point)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, collider, force, point);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction.OnModifyOffset
void RootMotion::FinalIK::HitReaction::OnModifyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::OnModifyOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnModifyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint
#include "RootMotion/FinalIK/HitReaction_HitPoint.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint.get_inProgress
bool RootMotion::FinalIK::HitReaction::HitPoint::get_inProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPoint::get_inProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint.get_crossFader
float RootMotion::FinalIK::HitReaction::HitPoint::get_crossFader() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPoint::get_crossFader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_crossFader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint.set_crossFader
void RootMotion::FinalIK::HitReaction::HitPoint::set_crossFader(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPoint::set_crossFader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_crossFader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint.get_timer
float RootMotion::FinalIK::HitReaction::HitPoint::get_timer() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPoint::get_timer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint.set_timer
void RootMotion::FinalIK::HitReaction::HitPoint::set_timer(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPoint::set_timer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_timer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint.get_force
UnityEngine::Vector3 RootMotion::FinalIK::HitReaction::HitPoint::get_force() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPoint::get_force");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_force", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint.set_force
void RootMotion::FinalIK::HitReaction::HitPoint::set_force(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPoint::set_force");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_force", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint.get_point
UnityEngine::Vector3 RootMotion::FinalIK::HitReaction::HitPoint::get_point() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPoint::get_point");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_point", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint.set_point
void RootMotion::FinalIK::HitReaction::HitPoint::set_point(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPoint::set_point");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_point", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint.Hit
void RootMotion::FinalIK::HitReaction::HitPoint::Hit(UnityEngine::Vector3 force, UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPoint::Hit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(point)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, force, point);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint.Apply
void RootMotion::FinalIK::HitReaction::HitPoint::Apply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPoint::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, weight);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint.GetLength
float RootMotion::FinalIK::HitReaction::HitPoint::GetLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPoint::GetLength");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint.CrossFadeStart
void RootMotion::FinalIK::HitReaction::HitPoint::CrossFadeStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPoint::CrossFadeStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFadeStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPoint.OnApply
void RootMotion::FinalIK::HitReaction::HitPoint::OnApply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPoint::OnApply");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, weight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointEffector
#include "RootMotion/FinalIK/HitReaction_HitPointEffector.hpp"
// Including type: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointEffector/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/HitReaction_HitPointEffector_EffectorLink.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointEffector.GetLength
float RootMotion::FinalIK::HitReaction::HitPointEffector::GetLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPointEffector::GetLength");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointEffector.CrossFadeStart
void RootMotion::FinalIK::HitReaction::HitPointEffector::CrossFadeStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPointEffector::CrossFadeStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFadeStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointEffector.OnApply
void RootMotion::FinalIK::HitReaction::HitPointEffector::OnApply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPointEffector::OnApply");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, weight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointEffector/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/HitReaction_HitPointEffector_EffectorLink.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointEffector/RootMotion.FinalIK.EffectorLink.Apply
void RootMotion::FinalIK::HitReaction::HitPointEffector::EffectorLink::Apply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, UnityEngine::Vector3 offset, float crossFader) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPointEffector::EffectorLink::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(crossFader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, offset, crossFader);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointEffector/RootMotion.FinalIK.EffectorLink.CrossFadeStart
void RootMotion::FinalIK::HitReaction::HitPointEffector::EffectorLink::CrossFadeStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPointEffector::EffectorLink::CrossFadeStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFadeStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointBone
#include "RootMotion/FinalIK/HitReaction_HitPointBone.hpp"
// Including type: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointBone/RootMotion.FinalIK.BoneLink
#include "RootMotion/FinalIK/HitReaction_HitPointBone_BoneLink.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointBone.GetLength
float RootMotion::FinalIK::HitReaction::HitPointBone::GetLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPointBone::GetLength");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointBone.CrossFadeStart
void RootMotion::FinalIK::HitReaction::HitPointBone::CrossFadeStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPointBone::CrossFadeStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFadeStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointBone.OnApply
void RootMotion::FinalIK::HitReaction::HitPointBone::OnApply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPointBone::OnApply");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, weight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointBone/RootMotion.FinalIK.BoneLink
#include "RootMotion/FinalIK/HitReaction_HitPointBone_BoneLink.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointBone/RootMotion.FinalIK.BoneLink.Apply
void RootMotion::FinalIK::HitReaction::HitPointBone::BoneLink::Apply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, UnityEngine::Quaternion offset, float crossFader) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPointBone::BoneLink::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(crossFader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, offset, crossFader);
}
// Autogenerated method: RootMotion.FinalIK.HitReaction/RootMotion.FinalIK.HitPointBone/RootMotion.FinalIK.BoneLink.CrossFadeStart
void RootMotion::FinalIK::HitReaction::HitPointBone::BoneLink::CrossFadeStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReaction::HitPointBone::BoneLink::CrossFadeStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFadeStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.HitReactionVRIK
#include "RootMotion/FinalIK/HitReactionVRIK.hpp"
// Including type: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.Offset
#include "RootMotion/FinalIK/HitReactionVRIK_Offset.hpp"
// Including type: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.PositionOffset
#include "RootMotion/FinalIK/HitReactionVRIK_PositionOffset.hpp"
// Including type: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.RotationOffset
#include "RootMotion/FinalIK/HitReactionVRIK_RotationOffset.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK.Hit
void RootMotion::FinalIK::HitReactionVRIK::Hit(UnityEngine::Collider* collider, UnityEngine::Vector3 force, UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::Hit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(collider), ::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(point)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, collider, force, point);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK.OnModifyOffset
void RootMotion::FinalIK::HitReactionVRIK::OnModifyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::OnModifyOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnModifyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.Offset
#include "RootMotion/FinalIK/HitReactionVRIK_Offset.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: RootMotion.FinalIK.VRIK
#include "RootMotion/FinalIK/VRIK.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.Offset.get_crossFader
float RootMotion::FinalIK::HitReactionVRIK::Offset::get_crossFader() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::Offset::get_crossFader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_crossFader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.Offset.set_crossFader
void RootMotion::FinalIK::HitReactionVRIK::Offset::set_crossFader(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::Offset::set_crossFader");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_crossFader", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.Offset.get_timer
float RootMotion::FinalIK::HitReactionVRIK::Offset::get_timer() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::Offset::get_timer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.Offset.set_timer
void RootMotion::FinalIK::HitReactionVRIK::Offset::set_timer(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::Offset::set_timer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_timer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.Offset.get_force
UnityEngine::Vector3 RootMotion::FinalIK::HitReactionVRIK::Offset::get_force() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::Offset::get_force");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_force", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.Offset.set_force
void RootMotion::FinalIK::HitReactionVRIK::Offset::set_force(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::Offset::set_force");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_force", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.Offset.get_point
UnityEngine::Vector3 RootMotion::FinalIK::HitReactionVRIK::Offset::get_point() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::Offset::get_point");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_point", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.Offset.set_point
void RootMotion::FinalIK::HitReactionVRIK::Offset::set_point(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::Offset::set_point");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_point", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.Offset.Hit
void RootMotion::FinalIK::HitReactionVRIK::Offset::Hit(UnityEngine::Vector3 force, ::Array<UnityEngine::AnimationCurve*>* curves, UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::Offset::Hit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(force), ::il2cpp_utils::ExtractType(curves), ::il2cpp_utils::ExtractType(point)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, force, curves, point);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.Offset.Apply
void RootMotion::FinalIK::HitReactionVRIK::Offset::Apply(RootMotion::FinalIK::VRIK* ik, ::Array<UnityEngine::AnimationCurve*>* curves, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::Offset::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ik), ::il2cpp_utils::ExtractType(curves), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ik, curves, weight);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.Offset.GetLength
float RootMotion::FinalIK::HitReactionVRIK::Offset::GetLength(::Array<UnityEngine::AnimationCurve*>* curves) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::Offset::GetLength");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curves)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, curves);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.Offset.CrossFadeStart
void RootMotion::FinalIK::HitReactionVRIK::Offset::CrossFadeStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::Offset::CrossFadeStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFadeStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.Offset.OnApply
void RootMotion::FinalIK::HitReactionVRIK::Offset::OnApply(RootMotion::FinalIK::VRIK* ik, ::Array<UnityEngine::AnimationCurve*>* curves, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::Offset::OnApply");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ik), ::il2cpp_utils::ExtractType(curves), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ik, curves, weight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.PositionOffset
#include "RootMotion/FinalIK/HitReactionVRIK_PositionOffset.hpp"
// Including type: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.PositionOffset/RootMotion.FinalIK.PositionOffsetLink
#include "RootMotion/FinalIK/HitReactionVRIK_PositionOffset_PositionOffsetLink.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: RootMotion.FinalIK.VRIK
#include "RootMotion/FinalIK/VRIK.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.PositionOffset.GetLength
float RootMotion::FinalIK::HitReactionVRIK::PositionOffset::GetLength(::Array<UnityEngine::AnimationCurve*>* curves) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::PositionOffset::GetLength");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curves)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, curves);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.PositionOffset.CrossFadeStart
void RootMotion::FinalIK::HitReactionVRIK::PositionOffset::CrossFadeStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::PositionOffset::CrossFadeStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFadeStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.PositionOffset.OnApply
void RootMotion::FinalIK::HitReactionVRIK::PositionOffset::OnApply(RootMotion::FinalIK::VRIK* ik, ::Array<UnityEngine::AnimationCurve*>* curves, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::PositionOffset::OnApply");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ik), ::il2cpp_utils::ExtractType(curves), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ik, curves, weight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.PositionOffset/RootMotion.FinalIK.PositionOffsetLink
#include "RootMotion/FinalIK/HitReactionVRIK_PositionOffset_PositionOffsetLink.hpp"
// Including type: RootMotion.FinalIK.VRIK
#include "RootMotion/FinalIK/VRIK.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.PositionOffset/RootMotion.FinalIK.PositionOffsetLink.Apply
void RootMotion::FinalIK::HitReactionVRIK::PositionOffset::PositionOffsetLink::Apply(RootMotion::FinalIK::VRIK* ik, UnityEngine::Vector3 offset, float crossFader) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::PositionOffset::PositionOffsetLink::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ik), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(crossFader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ik, offset, crossFader);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.PositionOffset/RootMotion.FinalIK.PositionOffsetLink.CrossFadeStart
void RootMotion::FinalIK::HitReactionVRIK::PositionOffset::PositionOffsetLink::CrossFadeStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::PositionOffset::PositionOffsetLink::CrossFadeStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFadeStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.RotationOffset
#include "RootMotion/FinalIK/HitReactionVRIK_RotationOffset.hpp"
// Including type: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.RotationOffset/RootMotion.FinalIK.RotationOffsetLink
#include "RootMotion/FinalIK/HitReactionVRIK_RotationOffset_RotationOffsetLink.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: RootMotion.FinalIK.VRIK
#include "RootMotion/FinalIK/VRIK.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.RotationOffset.GetLength
float RootMotion::FinalIK::HitReactionVRIK::RotationOffset::GetLength(::Array<UnityEngine::AnimationCurve*>* curves) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::RotationOffset::GetLength");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curves)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, curves);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.RotationOffset.CrossFadeStart
void RootMotion::FinalIK::HitReactionVRIK::RotationOffset::CrossFadeStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::RotationOffset::CrossFadeStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFadeStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.RotationOffset.OnApply
void RootMotion::FinalIK::HitReactionVRIK::RotationOffset::OnApply(RootMotion::FinalIK::VRIK* ik, ::Array<UnityEngine::AnimationCurve*>* curves, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::RotationOffset::OnApply");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ik), ::il2cpp_utils::ExtractType(curves), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ik, curves, weight);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.RotationOffset/RootMotion.FinalIK.RotationOffsetLink
#include "RootMotion/FinalIK/HitReactionVRIK_RotationOffset_RotationOffsetLink.hpp"
// Including type: RootMotion.FinalIK.VRIK
#include "RootMotion/FinalIK/VRIK.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.RotationOffset/RootMotion.FinalIK.RotationOffsetLink.Apply
void RootMotion::FinalIK::HitReactionVRIK::RotationOffset::RotationOffsetLink::Apply(RootMotion::FinalIK::VRIK* ik, UnityEngine::Quaternion offset, float crossFader) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::RotationOffset::RotationOffsetLink::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ik), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(crossFader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ik, offset, crossFader);
}
// Autogenerated method: RootMotion.FinalIK.HitReactionVRIK/RootMotion.FinalIK.RotationOffset/RootMotion.FinalIK.RotationOffsetLink.CrossFadeStart
void RootMotion::FinalIK::HitReactionVRIK::RotationOffset::RotationOffsetLink::CrossFadeStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HitReactionVRIK::RotationOffset::RotationOffsetLink::CrossFadeStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFadeStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Inertia
#include "RootMotion/FinalIK/Inertia.hpp"
// Including type: RootMotion.FinalIK.Inertia/RootMotion.FinalIK.Body
#include "RootMotion/FinalIK/Inertia_Body.hpp"
// Including type: RootMotion.FinalIK.OffsetModifier/RootMotion.FinalIK.OffsetLimits
#include "RootMotion/FinalIK/OffsetModifier_OffsetLimits.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Inertia.ResetBodies
void RootMotion::FinalIK::Inertia::ResetBodies() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Inertia::ResetBodies");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetBodies", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Inertia.OnModifyOffset
void RootMotion::FinalIK::Inertia::OnModifyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Inertia::OnModifyOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnModifyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Inertia/RootMotion.FinalIK.Body
#include "RootMotion/FinalIK/Inertia_Body.hpp"
// Including type: RootMotion.FinalIK.Inertia/RootMotion.FinalIK.Body/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/Inertia_Body_EffectorLink.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Inertia/RootMotion.FinalIK.Body.Reset
void RootMotion::FinalIK::Inertia::Body::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Inertia::Body::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Inertia/RootMotion.FinalIK.Body.Update
void RootMotion::FinalIK::Inertia::Body::Update(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, float weight, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Inertia::Body::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, weight, deltaTime);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Inertia/RootMotion.FinalIK.Body/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/Inertia_Body_EffectorLink.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.LookAtController
#include "RootMotion/FinalIK/LookAtController.hpp"
// Including type: RootMotion.FinalIK.LookAtIK
#include "RootMotion/FinalIK/LookAtIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.LookAtController.get_pivot
UnityEngine::Vector3 RootMotion::FinalIK::LookAtController::get_pivot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtController::get_pivot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pivot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtController.Start
void RootMotion::FinalIK::LookAtController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtController.LateUpdate
void RootMotion::FinalIK::LookAtController::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtController::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtController.ApplyMinDistance
void RootMotion::FinalIK::LookAtController::ApplyMinDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtController::ApplyMinDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyMinDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtController.RootRotation
void RootMotion::FinalIK::LookAtController::RootRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtController::RootRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RootRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.OffsetModifier
#include "RootMotion/FinalIK/OffsetModifier.hpp"
// Including type: RootMotion.FinalIK.OffsetModifier/RootMotion.FinalIK.OffsetLimits
#include "RootMotion/FinalIK/OffsetModifier_OffsetLimits.hpp"
// Including type: RootMotion.FinalIK.OffsetModifier/RootMotion.FinalIK.<Initiate>d__8
#include "RootMotion/FinalIK/OffsetModifier_-Initiate-d__8.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.OffsetModifier.get_deltaTime
float RootMotion::FinalIK::OffsetModifier::get_deltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifier::get_deltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifier.OnModifyOffset
void RootMotion::FinalIK::OffsetModifier::OnModifyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifier::OnModifyOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnModifyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifier.Start
void RootMotion::FinalIK::OffsetModifier::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifier::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifier.Initiate
System::Collections::IEnumerator* RootMotion::FinalIK::OffsetModifier::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifier::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifier.ModifyOffset
void RootMotion::FinalIK::OffsetModifier::ModifyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifier::ModifyOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ModifyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifier.ApplyLimits
void RootMotion::FinalIK::OffsetModifier::ApplyLimits(::Array<RootMotion::FinalIK::OffsetModifier::OffsetLimits*>* limits) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifier::ApplyLimits");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyLimits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(limits)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, limits);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifier.OnDestroy
void RootMotion::FinalIK::OffsetModifier::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifier::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.OffsetModifier/RootMotion.FinalIK.OffsetLimits
#include "RootMotion/FinalIK/OffsetModifier_OffsetLimits.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.OffsetModifier/RootMotion.FinalIK.OffsetLimits.Apply
void RootMotion::FinalIK::OffsetModifier::OffsetLimits::Apply(RootMotion::FinalIK::IKEffector* e, UnityEngine::Quaternion rootRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifier::OffsetLimits::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(e), ::il2cpp_utils::ExtractType(rootRotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, e, rootRotation);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifier/RootMotion.FinalIK.OffsetLimits.SpringAxis
float RootMotion::FinalIK::OffsetModifier::OffsetLimits::SpringAxis(float value, float min, float max) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifier::OffsetLimits::SpringAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpringAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, value, min, max);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifier/RootMotion.FinalIK.OffsetLimits.Spring
float RootMotion::FinalIK::OffsetModifier::OffsetLimits::Spring(float value, float limit, bool negative) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifier::OffsetLimits::Spring");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Spring", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(limit), ::il2cpp_utils::ExtractType(negative)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, value, limit, negative);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.OffsetModifier/RootMotion.FinalIK.<Initiate>d__8
#include "RootMotion/FinalIK/OffsetModifier_-Initiate-d__8.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.OffsetModifier/RootMotion.FinalIK.<Initiate>d__8.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* RootMotion::FinalIK::OffsetModifier::$Initiate$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifier::$Initiate$d__8::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifier/RootMotion.FinalIK.<Initiate>d__8.System.Collections.IEnumerator.get_Current
::Il2CppObject* RootMotion::FinalIK::OffsetModifier::$Initiate$d__8::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifier::$Initiate$d__8::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifier/RootMotion.FinalIK.<Initiate>d__8.System.IDisposable.Dispose
void RootMotion::FinalIK::OffsetModifier::$Initiate$d__8::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifier::$Initiate$d__8::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifier/RootMotion.FinalIK.<Initiate>d__8.MoveNext
bool RootMotion::FinalIK::OffsetModifier::$Initiate$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifier::$Initiate$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifier/RootMotion.FinalIK.<Initiate>d__8.System.Collections.IEnumerator.Reset
void RootMotion::FinalIK::OffsetModifier::$Initiate$d__8::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifier::$Initiate$d__8::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.OffsetModifierVRIK
#include "RootMotion/FinalIK/OffsetModifierVRIK.hpp"
// Including type: RootMotion.FinalIK.OffsetModifierVRIK/RootMotion.FinalIK.<Initiate>d__7
#include "RootMotion/FinalIK/OffsetModifierVRIK_-Initiate-d__7.hpp"
// Including type: RootMotion.FinalIK.VRIK
#include "RootMotion/FinalIK/VRIK.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.OffsetModifierVRIK.get_deltaTime
float RootMotion::FinalIK::OffsetModifierVRIK::get_deltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifierVRIK::get_deltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_deltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifierVRIK.OnModifyOffset
void RootMotion::FinalIK::OffsetModifierVRIK::OnModifyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifierVRIK::OnModifyOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnModifyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifierVRIK.Start
void RootMotion::FinalIK::OffsetModifierVRIK::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifierVRIK::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifierVRIK.Initiate
System::Collections::IEnumerator* RootMotion::FinalIK::OffsetModifierVRIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifierVRIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifierVRIK.ModifyOffset
void RootMotion::FinalIK::OffsetModifierVRIK::ModifyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifierVRIK::ModifyOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ModifyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifierVRIK.OnDestroy
void RootMotion::FinalIK::OffsetModifierVRIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifierVRIK::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.OffsetModifierVRIK/RootMotion.FinalIK.<Initiate>d__7
#include "RootMotion/FinalIK/OffsetModifierVRIK_-Initiate-d__7.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.OffsetModifierVRIK/RootMotion.FinalIK.<Initiate>d__7.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* RootMotion::FinalIK::OffsetModifierVRIK::$Initiate$d__7::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifierVRIK::$Initiate$d__7::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifierVRIK/RootMotion.FinalIK.<Initiate>d__7.System.Collections.IEnumerator.get_Current
::Il2CppObject* RootMotion::FinalIK::OffsetModifierVRIK::$Initiate$d__7::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifierVRIK::$Initiate$d__7::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifierVRIK/RootMotion.FinalIK.<Initiate>d__7.System.IDisposable.Dispose
void RootMotion::FinalIK::OffsetModifierVRIK::$Initiate$d__7::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifierVRIK::$Initiate$d__7::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifierVRIK/RootMotion.FinalIK.<Initiate>d__7.MoveNext
bool RootMotion::FinalIK::OffsetModifierVRIK::$Initiate$d__7::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifierVRIK::$Initiate$d__7::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.OffsetModifierVRIK/RootMotion.FinalIK.<Initiate>d__7.System.Collections.IEnumerator.Reset
void RootMotion::FinalIK::OffsetModifierVRIK::$Initiate$d__7::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetModifierVRIK::$Initiate$d__7::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.OffsetPose
#include "RootMotion/FinalIK/OffsetPose.hpp"
// Including type: RootMotion.FinalIK.OffsetPose/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/OffsetPose_EffectorLink.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.OffsetPose.Apply
void RootMotion::FinalIK::OffsetPose::Apply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetPose::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, weight);
}
// Autogenerated method: RootMotion.FinalIK.OffsetPose.Apply
void RootMotion::FinalIK::OffsetPose::Apply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, float weight, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetPose::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, weight, rotation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.OffsetPose/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/OffsetPose_EffectorLink.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.OffsetPose/RootMotion.FinalIK.EffectorLink.Apply
void RootMotion::FinalIK::OffsetPose::EffectorLink::Apply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, float weight, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::OffsetPose::EffectorLink::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, weight, rotation);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.PenetrationAvoidance
#include "RootMotion/FinalIK/PenetrationAvoidance.hpp"
// Including type: RootMotion.FinalIK.PenetrationAvoidance/RootMotion.FinalIK.Avoider
#include "RootMotion/FinalIK/PenetrationAvoidance_Avoider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.PenetrationAvoidance.OnModifyOffset
void RootMotion::FinalIK::PenetrationAvoidance::OnModifyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::PenetrationAvoidance::OnModifyOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnModifyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.PenetrationAvoidance/RootMotion.FinalIK.Avoider
#include "RootMotion/FinalIK/PenetrationAvoidance_Avoider.hpp"
// Including type: RootMotion.FinalIK.PenetrationAvoidance/RootMotion.FinalIK.Avoider/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/PenetrationAvoidance_Avoider_EffectorLink.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.PenetrationAvoidance/RootMotion.FinalIK.Avoider.Solve
void RootMotion::FinalIK::PenetrationAvoidance::Avoider::Solve(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::PenetrationAvoidance::Avoider::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, weight);
}
// Autogenerated method: RootMotion.FinalIK.PenetrationAvoidance/RootMotion.FinalIK.Avoider.GetOffsetTarget
UnityEngine::Vector3 RootMotion::FinalIK::PenetrationAvoidance::Avoider::GetOffsetTarget(RootMotion::FinalIK::IKSolverFullBodyBiped* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::PenetrationAvoidance::Avoider::GetOffsetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetOffsetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.PenetrationAvoidance/RootMotion.FinalIK.Avoider.Raycast
UnityEngine::Vector3 RootMotion::FinalIK::PenetrationAvoidance::Avoider::Raycast(UnityEngine::Vector3 from, UnityEngine::Vector3 to) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::PenetrationAvoidance::Avoider::Raycast");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Raycast", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, from, to);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.PenetrationAvoidance/RootMotion.FinalIK.Avoider/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/PenetrationAvoidance_Avoider_EffectorLink.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Recoil
#include "RootMotion/FinalIK/Recoil.hpp"
// Including type: RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset
#include "RootMotion/FinalIK/Recoil_RecoilOffset.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: RootMotion.FinalIK.AimIK
#include "RootMotion/FinalIK/AimIK.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Recoil.get_isFinished
bool RootMotion::FinalIK::Recoil::get_isFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::get_isFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.get_primaryHandEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::Recoil::get_primaryHandEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::get_primaryHandEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_primaryHandEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.get_secondaryHandEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::Recoil::get_secondaryHandEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::get_secondaryHandEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_secondaryHandEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.get_primaryHand
UnityEngine::Transform* RootMotion::FinalIK::Recoil::get_primaryHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::get_primaryHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_primaryHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.get_secondaryHand
UnityEngine::Transform* RootMotion::FinalIK::Recoil::get_secondaryHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::get_secondaryHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_secondaryHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.SetHandRotations
void RootMotion::FinalIK::Recoil::SetHandRotations(UnityEngine::Quaternion leftHandRotation, UnityEngine::Quaternion rightHandRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::SetHandRotations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHandRotations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leftHandRotation), ::il2cpp_utils::ExtractType(rightHandRotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, leftHandRotation, rightHandRotation);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.Fire
void RootMotion::FinalIK::Recoil::Fire(float magnitude) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::Fire");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Fire", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(magnitude)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, magnitude);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.AfterFBBIK
void RootMotion::FinalIK::Recoil::AfterFBBIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::AfterFBBIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AfterFBBIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.AfterAimIK
void RootMotion::FinalIK::Recoil::AfterAimIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::AfterAimIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AfterAimIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.OnModifyOffset
void RootMotion::FinalIK::Recoil::OnModifyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::OnModifyOffset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnModifyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil.OnDestroy
void RootMotion::FinalIK::Recoil::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::OnDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset
#include "RootMotion/FinalIK/Recoil_RecoilOffset.hpp"
// Including type: RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/Recoil_RecoilOffset_EffectorLink.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset.Start
void RootMotion::FinalIK::Recoil::RecoilOffset::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::RecoilOffset::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset.Apply
void RootMotion::FinalIK::Recoil::RecoilOffset::Apply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, UnityEngine::Quaternion rotation, float masterWeight, float length, float timeLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::RecoilOffset::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(masterWeight), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(timeLeft)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, rotation, masterWeight, length, timeLeft);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset/RootMotion.FinalIK.EffectorLink
#include "RootMotion/FinalIK/Recoil_RecoilOffset_EffectorLink.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness
#include "RootMotion/FinalIK/Recoil.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness Right
RootMotion::FinalIK::Recoil::Handedness RootMotion::FinalIK::Recoil::Handedness::_get_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::Handedness::_get_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Recoil::Handedness>("RootMotion.FinalIK", "Recoil/Handedness", "Right"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness Right
void RootMotion::FinalIK::Recoil::Handedness::_set_Right(RootMotion::FinalIK::Recoil::Handedness value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::Handedness::_set_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Recoil/Handedness", "Right", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness Left
RootMotion::FinalIK::Recoil::Handedness RootMotion::FinalIK::Recoil::Handedness::_get_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::Handedness::_get_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Recoil::Handedness>("RootMotion.FinalIK", "Recoil/Handedness", "Left"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness Left
void RootMotion::FinalIK::Recoil::Handedness::_set_Left(RootMotion::FinalIK::Recoil::Handedness value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::Handedness::_set_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Recoil/Handedness", "Left", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ShoulderRotator
#include "RootMotion/FinalIK/ShoulderRotator.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedChain
#include "RootMotion/FinalIK/FullBodyBipedChain.hpp"
// Including type: RootMotion.FinalIK.IKMapping/RootMotion.FinalIK.BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.ShoulderRotator.Start
void RootMotion::FinalIK::ShoulderRotator::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ShoulderRotator::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ShoulderRotator.RotateShoulders
void RootMotion::FinalIK::ShoulderRotator::RotateShoulders() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ShoulderRotator::RotateShoulders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateShoulders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ShoulderRotator.RotateShoulder
void RootMotion::FinalIK::ShoulderRotator::RotateShoulder(RootMotion::FinalIK::FullBodyBipedChain chain, float weight, float offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ShoulderRotator::RotateShoulder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateShoulder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, chain, weight, offset);
}
// Autogenerated method: RootMotion.FinalIK.ShoulderRotator.GetParentBoneMap
RootMotion::FinalIK::IKMapping::BoneMap* RootMotion::FinalIK::ShoulderRotator::GetParentBoneMap(RootMotion::FinalIK::FullBodyBipedChain chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ShoulderRotator::GetParentBoneMap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParentBoneMap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMapping::BoneMap*, false>(this, ___internal__method, chain);
}
// Autogenerated method: RootMotion.FinalIK.ShoulderRotator.OnDestroy
void RootMotion::FinalIK::ShoulderRotator::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ShoulderRotator::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIKCalibrator
#include "RootMotion/FinalIK/VRIKCalibrator.hpp"
// Including type: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.Settings
#include "RootMotion/FinalIK/VRIKCalibrator_Settings.hpp"
// Including type: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData
#include "RootMotion/FinalIK/VRIKCalibrator_CalibrationData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RootMotion.FinalIK.Leg
#include "RootMotion/FinalIK/IKSolverVR_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator.RecalibrateScale
void RootMotion::FinalIK::VRIKCalibrator::RecalibrateScale(RootMotion::FinalIK::VRIK* ik, RootMotion::FinalIK::VRIKCalibrator::Settings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKCalibrator::RecalibrateScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIKCalibrator", "RecalibrateScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ik), ::il2cpp_utils::ExtractType(settings)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ik, settings);
}
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator.Calibrate
RootMotion::FinalIK::VRIKCalibrator::CalibrationData* RootMotion::FinalIK::VRIKCalibrator::Calibrate(RootMotion::FinalIK::VRIK* ik, RootMotion::FinalIK::VRIKCalibrator::Settings* settings, UnityEngine::Transform* headTracker, UnityEngine::Transform* bodyTracker, UnityEngine::Transform* leftHandTracker, UnityEngine::Transform* rightHandTracker, UnityEngine::Transform* leftFootTracker, UnityEngine::Transform* rightFootTracker) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKCalibrator::Calibrate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIKCalibrator", "Calibrate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ik), ::il2cpp_utils::ExtractType(settings), ::il2cpp_utils::ExtractType(headTracker), ::il2cpp_utils::ExtractType(bodyTracker), ::il2cpp_utils::ExtractType(leftHandTracker), ::il2cpp_utils::ExtractType(rightHandTracker), ::il2cpp_utils::ExtractType(leftFootTracker), ::il2cpp_utils::ExtractType(rightFootTracker)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::VRIKCalibrator::CalibrationData*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ik, settings, headTracker, bodyTracker, leftHandTracker, rightHandTracker, leftFootTracker, rightFootTracker);
}
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator.CalibrateLeg
void RootMotion::FinalIK::VRIKCalibrator::CalibrateLeg(RootMotion::FinalIK::VRIKCalibrator::Settings* settings, UnityEngine::Transform* tracker, RootMotion::FinalIK::IKSolverVR::Leg* leg, UnityEngine::Transform* lastBone, UnityEngine::Vector3 rootForward, bool isLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKCalibrator::CalibrateLeg");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIKCalibrator", "CalibrateLeg", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(settings), ::il2cpp_utils::ExtractType(tracker), ::il2cpp_utils::ExtractType(leg), ::il2cpp_utils::ExtractType(lastBone), ::il2cpp_utils::ExtractType(rootForward), ::il2cpp_utils::ExtractType(isLeft)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, settings, tracker, leg, lastBone, rootForward, isLeft);
}
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator.Calibrate
void RootMotion::FinalIK::VRIKCalibrator::Calibrate(RootMotion::FinalIK::VRIK* ik, RootMotion::FinalIK::VRIKCalibrator::CalibrationData* data, UnityEngine::Transform* headTracker, UnityEngine::Transform* bodyTracker, UnityEngine::Transform* leftHandTracker, UnityEngine::Transform* rightHandTracker, UnityEngine::Transform* leftFootTracker, UnityEngine::Transform* rightFootTracker) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKCalibrator::Calibrate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIKCalibrator", "Calibrate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ik), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(headTracker), ::il2cpp_utils::ExtractType(bodyTracker), ::il2cpp_utils::ExtractType(leftHandTracker), ::il2cpp_utils::ExtractType(rightHandTracker), ::il2cpp_utils::ExtractType(leftFootTracker), ::il2cpp_utils::ExtractType(rightFootTracker)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ik, data, headTracker, bodyTracker, leftHandTracker, rightHandTracker, leftFootTracker, rightFootTracker);
}
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator.CalibrateLeg
void RootMotion::FinalIK::VRIKCalibrator::CalibrateLeg(RootMotion::FinalIK::VRIKCalibrator::CalibrationData* data, UnityEngine::Transform* tracker, RootMotion::FinalIK::IKSolverVR::Leg* leg, UnityEngine::Transform* lastBone, UnityEngine::Vector3 rootForward, bool isLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKCalibrator::CalibrateLeg");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIKCalibrator", "CalibrateLeg", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(tracker), ::il2cpp_utils::ExtractType(leg), ::il2cpp_utils::ExtractType(lastBone), ::il2cpp_utils::ExtractType(rootForward), ::il2cpp_utils::ExtractType(isLeft)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, data, tracker, leg, lastBone, rootForward, isLeft);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.Settings
#include "RootMotion/FinalIK/VRIKCalibrator_Settings.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData
#include "RootMotion/FinalIK/VRIKCalibrator_CalibrationData.hpp"
// Including type: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData/RootMotion.FinalIK.Target
#include "RootMotion/FinalIK/VRIKCalibrator_CalibrationData_Target.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData/RootMotion.FinalIK.Target
#include "RootMotion/FinalIK/VRIKCalibrator_CalibrationData_Target.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData/RootMotion.FinalIK.Target.SetTo
void RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target::SetTo(UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target::SetTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIKLODController
#include "RootMotion/FinalIK/VRIKLODController.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: RootMotion.FinalIK.VRIK
#include "RootMotion/FinalIK/VRIK.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.VRIKLODController.Start
void RootMotion::FinalIK::VRIKLODController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKLODController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIKLODController.Update
void RootMotion::FinalIK::VRIKLODController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKLODController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIKLODController.GetLODLevel
int RootMotion::FinalIK::VRIKLODController::GetLODLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKLODController::GetLODLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLODLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIKRootController
#include "RootMotion/FinalIK/VRIKRootController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.VRIKCalibrator/RootMotion.FinalIK.CalibrationData
#include "RootMotion/FinalIK/VRIKCalibrator_CalibrationData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.VRIKRootController.get_pelvisTargetRight
UnityEngine::Vector3 RootMotion::FinalIK::VRIKRootController::get_pelvisTargetRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKRootController::get_pelvisTargetRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pelvisTargetRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIKRootController.set_pelvisTargetRight
void RootMotion::FinalIK::VRIKRootController::set_pelvisTargetRight(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKRootController::set_pelvisTargetRight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pelvisTargetRight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.VRIKRootController.Awake
void RootMotion::FinalIK::VRIKRootController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKRootController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIKRootController.Calibrate
void RootMotion::FinalIK::VRIKRootController::Calibrate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKRootController::Calibrate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Calibrate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIKRootController.Calibrate
void RootMotion::FinalIK::VRIKRootController::Calibrate(RootMotion::FinalIK::VRIKCalibrator::CalibrationData* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKRootController::Calibrate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Calibrate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data);
}
// Autogenerated method: RootMotion.FinalIK.VRIKRootController.OnPreUpdate
void RootMotion::FinalIK::VRIKRootController::OnPreUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKRootController::OnPreUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIKRootController.OnDestroy
void RootMotion::FinalIK::VRIKRootController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKRootController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapIdentifierNetSerializable
#include "GlobalNamespace/BeatmapIdentifierNetSerializable.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapIdentifierNetSerializable.get_levelID
::Il2CppString* GlobalNamespace::BeatmapIdentifierNetSerializable::get_levelID() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapIdentifierNetSerializable::get_levelID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_levelID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.set_levelID
void GlobalNamespace::BeatmapIdentifierNetSerializable::set_levelID(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapIdentifierNetSerializable::set_levelID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_levelID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.get_beatmapCharacteristicSerializedName
::Il2CppString* GlobalNamespace::BeatmapIdentifierNetSerializable::get_beatmapCharacteristicSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapIdentifierNetSerializable::get_beatmapCharacteristicSerializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapCharacteristicSerializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.set_beatmapCharacteristicSerializedName
void GlobalNamespace::BeatmapIdentifierNetSerializable::set_beatmapCharacteristicSerializedName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapIdentifierNetSerializable::set_beatmapCharacteristicSerializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_beatmapCharacteristicSerializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.get_difficulty
GlobalNamespace::BeatmapDifficulty GlobalNamespace::BeatmapIdentifierNetSerializable::get_difficulty() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapIdentifierNetSerializable::get_difficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_difficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficulty, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.set_difficulty
void GlobalNamespace::BeatmapIdentifierNetSerializable::set_difficulty(GlobalNamespace::BeatmapDifficulty value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapIdentifierNetSerializable::set_difficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_difficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.LiteNetLib.Utils.INetSerializable.Deserialize
void GlobalNamespace::BeatmapIdentifierNetSerializable::LiteNetLib_Utils_INetSerializable_Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapIdentifierNetSerializable::LiteNetLib.Utils.INetSerializable.Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.Utils.INetSerializable.Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.LiteNetLib.Utils.INetSerializable.Serialize
void GlobalNamespace::BeatmapIdentifierNetSerializable::LiteNetLib_Utils_INetSerializable_Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapIdentifierNetSerializable::LiteNetLib.Utils.INetSerializable.Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.Utils.INetSerializable.Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.Equals
bool GlobalNamespace::BeatmapIdentifierNetSerializable::Equals(GlobalNamespace::BeatmapIdentifierNetSerializable* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapIdentifierNetSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.Equals
bool GlobalNamespace::BeatmapIdentifierNetSerializable::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapIdentifierNetSerializable::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.GetHashCode
int GlobalNamespace::BeatmapIdentifierNetSerializable::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapIdentifierNetSerializable::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapIdentifierNetSerializable.ToString
::Il2CppString* GlobalNamespace::BeatmapIdentifierNetSerializable::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapIdentifierNetSerializable::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapLevelMask
#include "GlobalNamespace/BeatmapLevelMask.hpp"
// Including type: BitMaskSparse
#include "GlobalNamespace/BitMaskSparse.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kBitCount
int GlobalNamespace::BeatmapLevelMask::_get_kBitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::_get_kBitCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BeatmapLevelMask", "kBitCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kBitCount
void GlobalNamespace::BeatmapLevelMask::_set_kBitCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::_set_kBitCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelMask", "kBitCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kHashCount
int GlobalNamespace::BeatmapLevelMask::_get_kHashCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::_get_kHashCount");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BeatmapLevelMask", "kHashCount"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kHashCount
void GlobalNamespace::BeatmapLevelMask::_set_kHashCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::_set_kHashCount");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelMask", "kHashCount", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kHashBits
int GlobalNamespace::BeatmapLevelMask::_get_kHashBits() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::_get_kHashBits");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BeatmapLevelMask", "kHashBits"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kHashBits
void GlobalNamespace::BeatmapLevelMask::_set_kHashBits(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::_set_kHashBits");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelMask", "kHashBits", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kToStringPrefix
::Il2CppString* GlobalNamespace::BeatmapLevelMask::_get_kToStringPrefix() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::_get_kToStringPrefix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapLevelMask", "kToStringPrefix"));
}
// Autogenerated static field setter
// Set static field: static private System.String kToStringPrefix
void GlobalNamespace::BeatmapLevelMask::_set_kToStringPrefix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::_set_kToStringPrefix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelMask", "kToStringPrefix", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kToStringSuffix
::Il2CppString* GlobalNamespace::BeatmapLevelMask::_get_kToStringSuffix() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::_get_kToStringSuffix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BeatmapLevelMask", "kToStringSuffix"));
}
// Autogenerated static field setter
// Set static field: static private System.String kToStringSuffix
void GlobalNamespace::BeatmapLevelMask::_set_kToStringSuffix(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::_set_kToStringSuffix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BeatmapLevelMask", "kToStringSuffix", value));
}
// Autogenerated method: BeatmapLevelMask.Contains
bool GlobalNamespace::BeatmapLevelMask::Contains(::Il2CppString* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, state);
}
// Autogenerated method: BeatmapLevelMask.AddLevel
void GlobalNamespace::BeatmapLevelMask::AddLevel(::Il2CppString* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::AddLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: BeatmapLevelMask.Serialize
void GlobalNamespace::BeatmapLevelMask::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: BeatmapLevelMask.Deserialize
void GlobalNamespace::BeatmapLevelMask::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: BeatmapLevelMask.Equals
bool GlobalNamespace::BeatmapLevelMask::Equals(GlobalNamespace::BeatmapLevelMask* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: BeatmapLevelMask.ToString
::Il2CppString* GlobalNamespace::BeatmapLevelMask::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelMask.GetHashCode
int GlobalNamespace::BeatmapLevelMask::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapLevelMask.Equals
bool GlobalNamespace::BeatmapLevelMask::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelMask::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, obj);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BitMask128
#include "GlobalNamespace/BitMask128.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BitMask128.get_bitCount
int GlobalNamespace::BitMask128::get_bitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::get_bitCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_bitCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: BitMask128.get_maxValue
GlobalNamespace::BitMask128 GlobalNamespace::BitMask128::get_maxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::get_maxValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "get_maxValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask128, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: BitMask128.SetBits
GlobalNamespace::BitMask128 GlobalNamespace::BitMask128::SetBits(int offset, uint64_t bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::SetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask128, false>(*this, ___internal__method, offset, bits);
}
// Autogenerated method: BitMask128.GetBits
uint64_t GlobalNamespace::BitMask128::GetBits(int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::GetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(*this, ___internal__method, offset, count);
}
// Autogenerated method: BitMask128.Serialize
void GlobalNamespace::BitMask128::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: BitMask128.CreateFromSerializedData
GlobalNamespace::BitMask128 GlobalNamespace::BitMask128::CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask128, false>(*this, ___internal__method, reader);
}
// Autogenerated method: BitMask128.Deserialize
GlobalNamespace::BitMask128 GlobalNamespace::BitMask128::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask128, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: BitMask128.Equals
bool GlobalNamespace::BitMask128::Equals(GlobalNamespace::BitMask128 other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: BitMask128.ToString
::Il2CppString* GlobalNamespace::BitMask128::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: BitMask128.Equals
bool GlobalNamespace::BitMask128::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: BitMask128.GetHashCode
int GlobalNamespace::BitMask128::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: BitMask128.op_BitwiseOr
GlobalNamespace::BitMask128 GlobalNamespace::operator|(const GlobalNamespace::BitMask128&& a, const GlobalNamespace::BitMask128&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::op_BitwiseOr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "op_BitwiseOr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask128, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: BitMask128.op_BitwiseAnd
GlobalNamespace::BitMask128 GlobalNamespace::operator&(const GlobalNamespace::BitMask128&& a, const GlobalNamespace::BitMask128&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::op_BitwiseAnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "op_BitwiseAnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask128, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: BitMask128.op_ExclusiveOr
GlobalNamespace::BitMask128 GlobalNamespace::operator^(const GlobalNamespace::BitMask128&& a, const GlobalNamespace::BitMask128&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::op_ExclusiveOr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "op_ExclusiveOr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask128, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: BitMask128.op_LeftShift
GlobalNamespace::BitMask128 GlobalNamespace::operator<<(const GlobalNamespace::BitMask128&& a, const int& bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::op_LeftShift");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "op_LeftShift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask128, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, bits);
}
// Autogenerated method: BitMask128.op_RightShift
GlobalNamespace::BitMask128 GlobalNamespace::operator>>(const GlobalNamespace::BitMask128&& a, const int& bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::op_RightShift");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "op_RightShift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask128, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, bits);
}
// Autogenerated method: BitMask128.op_Equality
bool GlobalNamespace::operator ==(const GlobalNamespace::BitMask128&& a, const GlobalNamespace::BitMask128&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: BitMask128.op_Inequality
bool GlobalNamespace::operator !=(const GlobalNamespace::BitMask128&& a, const GlobalNamespace::BitMask128&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask128::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask128", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BitMask256
#include "GlobalNamespace/BitMask256.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BitMask256.get_bitCount
int GlobalNamespace::BitMask256::get_bitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::get_bitCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_bitCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: BitMask256.get_maxValue
GlobalNamespace::BitMask256 GlobalNamespace::BitMask256::get_maxValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::get_maxValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "get_maxValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask256, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: BitMask256.SetBits
GlobalNamespace::BitMask256 GlobalNamespace::BitMask256::SetBits(int offset, uint64_t bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::SetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask256, false>(*this, ___internal__method, offset, bits);
}
// Autogenerated method: BitMask256.GetBits
uint64_t GlobalNamespace::BitMask256::GetBits(int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::GetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(*this, ___internal__method, offset, count);
}
// Autogenerated method: BitMask256.Serialize
void GlobalNamespace::BitMask256::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, writer);
}
// Autogenerated method: BitMask256.CreateFromSerializedData
GlobalNamespace::BitMask256 GlobalNamespace::BitMask256::CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask256, false>(*this, ___internal__method, reader);
}
// Autogenerated method: BitMask256.Deserialize
GlobalNamespace::BitMask256 GlobalNamespace::BitMask256::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::Deserialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask256, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
// Autogenerated method: BitMask256.Equals
bool GlobalNamespace::BitMask256::Equals(GlobalNamespace::BitMask256 other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: BitMask256.ToString
::Il2CppString* GlobalNamespace::BitMask256::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: BitMask256.Equals
bool GlobalNamespace::BitMask256::Equals(::Il2CppObject* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, obj);
}
// Autogenerated method: BitMask256.GetHashCode
int GlobalNamespace::BitMask256::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: BitMask256.op_BitwiseOr
GlobalNamespace::BitMask256 GlobalNamespace::operator|(const GlobalNamespace::BitMask256&& a, const GlobalNamespace::BitMask256&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::op_BitwiseOr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "op_BitwiseOr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask256, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: BitMask256.op_BitwiseAnd
GlobalNamespace::BitMask256 GlobalNamespace::operator&(const GlobalNamespace::BitMask256&& a, const GlobalNamespace::BitMask256&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::op_BitwiseAnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "op_BitwiseAnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask256, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: BitMask256.op_ExclusiveOr
GlobalNamespace::BitMask256 GlobalNamespace::operator^(const GlobalNamespace::BitMask256&& a, const GlobalNamespace::BitMask256&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::op_ExclusiveOr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "op_ExclusiveOr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask256, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: BitMask256.op_LeftShift
GlobalNamespace::BitMask256 GlobalNamespace::operator<<(const GlobalNamespace::BitMask256&& a, const int& bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::op_LeftShift");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "op_LeftShift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask256, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, bits);
}
// Autogenerated method: BitMask256.op_RightShift
GlobalNamespace::BitMask256 GlobalNamespace::operator>>(const GlobalNamespace::BitMask256&& a, const int& bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::op_RightShift");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "op_RightShift", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMask256, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, bits);
}
// Autogenerated method: BitMask256.op_Equality
bool GlobalNamespace::operator ==(const GlobalNamespace::BitMask256&& a, const GlobalNamespace::BitMask256&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: BitMask256.op_Inequality
bool GlobalNamespace::operator !=(const GlobalNamespace::BitMask256&& a, const GlobalNamespace::BitMask256&& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMask256::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMask256", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BitMaskArray
#include "GlobalNamespace/BitMaskArray.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BitMaskArray.get_bitCount
int GlobalNamespace::BitMaskArray::get_bitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskArray::get_bitCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bitCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BitMaskArray.Equals
bool GlobalNamespace::BitMaskArray::Equals(GlobalNamespace::BitMaskArray* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskArray::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: BitMaskArray.SetBits
GlobalNamespace::BitMaskArray* GlobalNamespace::BitMaskArray::SetBits(int offset, uint64_t bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskArray::SetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMaskArray*, false>(this, ___internal__method, offset, bits);
}
// Autogenerated method: BitMaskArray.GetBits
uint64_t GlobalNamespace::BitMaskArray::GetBits(int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskArray::GetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, offset, count);
}
// Autogenerated method: BitMaskArray.Serialize
void GlobalNamespace::BitMaskArray::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskArray::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: BitMaskArray.Deserialize
void GlobalNamespace::BitMaskArray::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskArray::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: BitMaskArray.ToString
::Il2CppString* GlobalNamespace::BitMaskArray::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskArray::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BitMaskSparse
#include "GlobalNamespace/BitMaskSparse.hpp"
// Including type: BitMaskSparse/<>c
#include "GlobalNamespace/BitMaskSparse_--c.hpp"
// Including type: System.Collections.Generic.SortedSet`1
#include "System/Collections/Generic/SortedSet_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BitMaskSparse.get_bitCount
int GlobalNamespace::BitMaskSparse::get_bitCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskSparse::get_bitCount");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bitCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BitMaskSparse.Equals
bool GlobalNamespace::BitMaskSparse::Equals(GlobalNamespace::BitMaskSparse* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskSparse::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: BitMaskSparse.SetBits
GlobalNamespace::BitMaskSparse* GlobalNamespace::BitMaskSparse::SetBits(int offset, uint64_t bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskSparse::SetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(bits)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BitMaskSparse*, false>(this, ___internal__method, offset, bits);
}
// Autogenerated method: BitMaskSparse.GetBits
uint64_t GlobalNamespace::BitMaskSparse::GetBits(int offset, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskSparse::GetBits");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBits", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, offset, count);
}
// Autogenerated method: BitMaskSparse.Serialize
void GlobalNamespace::BitMaskSparse::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskSparse::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: BitMaskSparse.Deserialize
void GlobalNamespace::BitMaskSparse::Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskSparse::Deserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reader);
}
// Autogenerated method: BitMaskSparse.ToString
::Il2CppString* GlobalNamespace::BitMaskSparse::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskSparse::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BitMaskSparse/<>c
#include "GlobalNamespace/BitMaskSparse_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly BitMaskSparse/<>c <>9
GlobalNamespace::BitMaskSparse::$$c* GlobalNamespace::BitMaskSparse::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskSparse::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::BitMaskSparse::$$c*>("", "BitMaskSparse/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly BitMaskSparse/<>c <>9
void GlobalNamespace::BitMaskSparse::$$c::_set_$$9(GlobalNamespace::BitMaskSparse::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskSparse::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BitMaskSparse/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.UInt32,System.String> <>9__8_0
System::Func_2<uint, ::Il2CppString*>* GlobalNamespace::BitMaskSparse::$$c::_get_$$9__8_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskSparse::$$c::_get_$$9__8_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<uint, ::Il2CppString*>*>("", "BitMaskSparse/<>c", "<>9__8_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.UInt32,System.String> <>9__8_0
void GlobalNamespace::BitMaskSparse::$$c::_set_$$9__8_0(System::Func_2<uint, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskSparse::$$c::_set_$$9__8_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BitMaskSparse/<>c", "<>9__8_0", value)));
}
// Autogenerated method: BitMaskSparse/<>c..cctor
void GlobalNamespace::BitMaskSparse::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskSparse::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BitMaskSparse/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: BitMaskSparse/<>c.<ToString>b__8_0
::Il2CppString* GlobalNamespace::BitMaskSparse::$$c::$ToString$b__8_0(uint i) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BitMaskSparse::$$c::<ToString>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToString>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, i);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BloomFilterUtil
#include "GlobalNamespace/BloomFilterUtil.hpp"
// Including type: BloomFilterUtil/<>c__DisplayClass2_0`1
#include "GlobalNamespace/BloomFilterUtil_--c__DisplayClass2_0_1.hpp"
// Including type: IBitMask`1
#include "GlobalNamespace/IBitMask_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomFilterUtil.MurmurHash2
uint GlobalNamespace::BloomFilterUtil::MurmurHash2(::Il2CppString* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFilterUtil::MurmurHash2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BloomFilterUtil", "MurmurHash2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayModifierMask
#include "GlobalNamespace/GameplayModifierMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask None
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "None"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask None
void GlobalNamespace::GameplayModifierMask::_set_None(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "None", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask BatteryEnergy
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_BatteryEnergy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_BatteryEnergy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "BatteryEnergy"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask BatteryEnergy
void GlobalNamespace::GameplayModifierMask::_set_BatteryEnergy(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_BatteryEnergy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "BatteryEnergy", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask NoFail
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_NoFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_NoFail");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "NoFail"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask NoFail
void GlobalNamespace::GameplayModifierMask::_set_NoFail(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_NoFail");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "NoFail", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask InstaFail
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_InstaFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_InstaFail");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "InstaFail"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask InstaFail
void GlobalNamespace::GameplayModifierMask::_set_InstaFail(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_InstaFail");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "InstaFail", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask NoObstacles
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_NoObstacles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_NoObstacles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "NoObstacles"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask NoObstacles
void GlobalNamespace::GameplayModifierMask::_set_NoObstacles(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_NoObstacles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "NoObstacles", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask NoBombs
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_NoBombs() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_NoBombs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "NoBombs"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask NoBombs
void GlobalNamespace::GameplayModifierMask::_set_NoBombs(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_NoBombs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "NoBombs", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask FastNotes
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_FastNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_FastNotes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "FastNotes"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask FastNotes
void GlobalNamespace::GameplayModifierMask::_set_FastNotes(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_FastNotes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "FastNotes", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask StrictAngles
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_StrictAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_StrictAngles");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "StrictAngles"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask StrictAngles
void GlobalNamespace::GameplayModifierMask::_set_StrictAngles(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_StrictAngles");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "StrictAngles", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask DisappearingArrows
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_DisappearingArrows() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_DisappearingArrows");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "DisappearingArrows"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask DisappearingArrows
void GlobalNamespace::GameplayModifierMask::_set_DisappearingArrows(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_DisappearingArrows");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "DisappearingArrows", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask FasterSong
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_FasterSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_FasterSong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "FasterSong"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask FasterSong
void GlobalNamespace::GameplayModifierMask::_set_FasterSong(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_FasterSong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "FasterSong", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask SlowerSong
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_SlowerSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_SlowerSong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "SlowerSong"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask SlowerSong
void GlobalNamespace::GameplayModifierMask::_set_SlowerSong(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_SlowerSong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "SlowerSong", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask NoArrows
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_NoArrows() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_NoArrows");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "NoArrows"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask NoArrows
void GlobalNamespace::GameplayModifierMask::_set_NoArrows(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_NoArrows");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "NoArrows", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask GhostNotes
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_GhostNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_GhostNotes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "GhostNotes"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask GhostNotes
void GlobalNamespace::GameplayModifierMask::_set_GhostNotes(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_GhostNotes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "GhostNotes", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask SuperFastSong
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_SuperFastSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_SuperFastSong");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "SuperFastSong"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask SuperFastSong
void GlobalNamespace::GameplayModifierMask::_set_SuperFastSong(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_SuperFastSong");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "SuperFastSong", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask ProMode
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_ProMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_ProMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "ProMode"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask ProMode
void GlobalNamespace::GameplayModifierMask::_set_ProMode(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_ProMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "ProMode", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask ZenMode
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_ZenMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_ZenMode");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "ZenMode"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask ZenMode
void GlobalNamespace::GameplayModifierMask::_set_ZenMode(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_ZenMode");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "ZenMode", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask SmallCubes
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_SmallCubes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_SmallCubes");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "SmallCubes"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask SmallCubes
void GlobalNamespace::GameplayModifierMask::_set_SmallCubes(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_SmallCubes");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "SmallCubes", value));
}
// Autogenerated static field getter
// Get static field: static public GameplayModifierMask All
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMask::_get_All() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_get_All");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifierMask>("", "GameplayModifierMask", "All"));
}
// Autogenerated static field setter
// Set static field: static public GameplayModifierMask All
void GlobalNamespace::GameplayModifierMask::_set_All(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMask::_set_All");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "GameplayModifierMask", "All", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameplayModifierMaskExtensions
#include "GlobalNamespace/GameplayModifierMaskExtensions.hpp"
// Including type: GameplayModifierMask
#include "GlobalNamespace/GameplayModifierMask.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameplayModifierMaskExtensions.Contains
bool GlobalNamespace::GameplayModifierMaskExtensions::Contains(GlobalNamespace::GameplayModifierMask mask, GlobalNamespace::GameplayModifierMask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMaskExtensions::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifierMaskExtensions", "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask), ::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask, other);
}
// Autogenerated method: GameplayModifierMaskExtensions.DifferenceFrom
int GlobalNamespace::GameplayModifierMaskExtensions::DifferenceFrom(GlobalNamespace::GameplayModifierMask mask, GlobalNamespace::GameplayModifierMask other) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMaskExtensions::DifferenceFrom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifierMaskExtensions", "DifferenceFrom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask), ::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask, other);
}
// Autogenerated method: GameplayModifierMaskExtensions.ToHexString
::Il2CppString* GlobalNamespace::GameplayModifierMaskExtensions::ToHexString(GlobalNamespace::GameplayModifierMask mask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMaskExtensions::ToHexString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifierMaskExtensions", "ToHexString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mask)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mask);
}
// Autogenerated method: GameplayModifierMaskExtensions.ToModifiers
GlobalNamespace::GameplayModifiers* GlobalNamespace::GameplayModifierMaskExtensions::ToModifiers(GlobalNamespace::GameplayModifierMask gameplayModifierMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMaskExtensions::ToModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifierMaskExtensions", "ToModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameplayModifierMask)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, gameplayModifierMask);
}
// Autogenerated method: GameplayModifierMaskExtensions.ToMask
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifierMaskExtensions::ToMask(GlobalNamespace::GameplayModifiers* gameplayModifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierMaskExtensions::ToMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifierMaskExtensions", "ToMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameplayModifiers)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifierMask, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, gameplayModifiers);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: LiteNetLib.Utils.NetDataWriter
#include "LiteNetLib/Utils/NetDataWriter.hpp"
// Including type: LiteNetLib.Utils.NetDataReader
#include "LiteNetLib/Utils/NetDataReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameplayModifiers.get_energyType
GlobalNamespace::GameplayModifiers::EnergyType GlobalNamespace::GameplayModifiers::get_energyType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_energyType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_energyType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers::EnergyType, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_noFailOn0Energy
bool GlobalNamespace::GameplayModifiers::get_noFailOn0Energy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_noFailOn0Energy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noFailOn0Energy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_demoNoFail
bool GlobalNamespace::GameplayModifiers::get_demoNoFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_demoNoFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_demoNoFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_instaFail
bool GlobalNamespace::GameplayModifiers::get_instaFail() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_instaFail");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_instaFail", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_failOnSaberClash
bool GlobalNamespace::GameplayModifiers::get_failOnSaberClash() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_failOnSaberClash");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_failOnSaberClash", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_enabledObstacleType
GlobalNamespace::GameplayModifiers::EnabledObstacleType GlobalNamespace::GameplayModifiers::get_enabledObstacleType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_enabledObstacleType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enabledObstacleType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers::EnabledObstacleType, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_demoNoObstacles
bool GlobalNamespace::GameplayModifiers::get_demoNoObstacles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_demoNoObstacles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_demoNoObstacles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_fastNotes
bool GlobalNamespace::GameplayModifiers::get_fastNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_fastNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fastNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_strictAngles
bool GlobalNamespace::GameplayModifiers::get_strictAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_strictAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_strictAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_disappearingArrows
bool GlobalNamespace::GameplayModifiers::get_disappearingArrows() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_disappearingArrows");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_disappearingArrows", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_ghostNotes
bool GlobalNamespace::GameplayModifiers::get_ghostNotes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_ghostNotes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ghostNotes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_noBombs
bool GlobalNamespace::GameplayModifiers::get_noBombs() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_noBombs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noBombs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_songSpeed
GlobalNamespace::GameplayModifiers::SongSpeed GlobalNamespace::GameplayModifiers::get_songSpeed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_songSpeed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSpeed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers::SongSpeed, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_noArrows
bool GlobalNamespace::GameplayModifiers::get_noArrows() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_noArrows");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_noArrows", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_proMode
bool GlobalNamespace::GameplayModifiers::get_proMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_proMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_proMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_zenMode
bool GlobalNamespace::GameplayModifiers::get_zenMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_zenMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_zenMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_smallCubes
bool GlobalNamespace::GameplayModifiers::get_smallCubes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_smallCubes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_smallCubes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_songSpeedMul
float GlobalNamespace::GameplayModifiers::get_songSpeedMul() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_songSpeedMul");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songSpeedMul", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_cutAngleTolerance
float GlobalNamespace::GameplayModifiers::get_cutAngleTolerance() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_cutAngleTolerance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cutAngleTolerance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.get_notesUniformScale
float GlobalNamespace::GameplayModifiers::get_notesUniformScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::get_notesUniformScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_notesUniformScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.CopyWith
GlobalNamespace::GameplayModifiers* GlobalNamespace::GameplayModifiers::CopyWith(System::Nullable_1<bool> demoNoFail, System::Nullable_1<bool> demoNoObstacles, System::Nullable_1<GlobalNamespace::GameplayModifiers::EnergyType> energyType, System::Nullable_1<bool> noFailOn0Energy, System::Nullable_1<bool> instaFail, System::Nullable_1<bool> failOnSaberClash, System::Nullable_1<GlobalNamespace::GameplayModifiers::EnabledObstacleType> enabledObstacleType, System::Nullable_1<bool> noBombs, System::Nullable_1<bool> fastNotes, System::Nullable_1<bool> strictAngles, System::Nullable_1<bool> disappearingArrows, System::Nullable_1<GlobalNamespace::GameplayModifiers::SongSpeed> songSpeed, System::Nullable_1<bool> noArrows, System::Nullable_1<bool> ghostNotes, System::Nullable_1<bool> proMode, System::Nullable_1<bool> zenMode, System::Nullable_1<bool> smallCubes) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::CopyWith");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CopyWith", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(demoNoFail), ::il2cpp_utils::ExtractType(demoNoObstacles), ::il2cpp_utils::ExtractType(energyType), ::il2cpp_utils::ExtractType(noFailOn0Energy), ::il2cpp_utils::ExtractType(instaFail), ::il2cpp_utils::ExtractType(failOnSaberClash), ::il2cpp_utils::ExtractType(enabledObstacleType), ::il2cpp_utils::ExtractType(noBombs), ::il2cpp_utils::ExtractType(fastNotes), ::il2cpp_utils::ExtractType(strictAngles), ::il2cpp_utils::ExtractType(disappearingArrows), ::il2cpp_utils::ExtractType(songSpeed), ::il2cpp_utils::ExtractType(noArrows), ::il2cpp_utils::ExtractType(ghostNotes), ::il2cpp_utils::ExtractType(proMode), ::il2cpp_utils::ExtractType(zenMode), ::il2cpp_utils::ExtractType(smallCubes)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers*, false>(this, ___internal__method, demoNoFail, demoNoObstacles, energyType, noFailOn0Energy, instaFail, failOnSaberClash, enabledObstacleType, noBombs, fastNotes, strictAngles, disappearingArrows, songSpeed, noArrows, ghostNotes, proMode, zenMode, smallCubes);
}
// Autogenerated method: GameplayModifiers.IsWithoutModifiers
bool GlobalNamespace::GameplayModifiers::IsWithoutModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::IsWithoutModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsWithoutModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiers.Serialize
void GlobalNamespace::GameplayModifiers::Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::Serialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Serialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(writer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, writer);
}
// Autogenerated method: GameplayModifiers.LiteNetLib.Utils.INetImmutableSerializable<GameplayModifiers>.CreateFromSerializedData
GlobalNamespace::GameplayModifiers* GlobalNamespace::GameplayModifiers::LiteNetLib_Utils_INetImmutableSerializable$GameplayModifiers$_CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::LiteNetLib.Utils.INetImmutableSerializable<GameplayModifiers>.CreateFromSerializedData");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LiteNetLib.Utils.INetImmutableSerializable<GameplayModifiers>.CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers*, false>(this, ___internal__method, reader);
}
// Autogenerated method: GameplayModifiers.CreateFromSerializedData
GlobalNamespace::GameplayModifiers* GlobalNamespace::GameplayModifiers::CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::CreateFromSerializedData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifiers", "CreateFromSerializedData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reader)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, reader);
}
