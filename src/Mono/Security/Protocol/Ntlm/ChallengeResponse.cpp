// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Security.Protocol.Ntlm.ChallengeResponse
#include "Mono/Security/Protocol/Ntlm/ChallengeResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Byte[] magic
::Array<uint8_t>* Mono::Security::Protocol::Ntlm::ChallengeResponse::_get_magic() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("Mono.Security.Protocol.Ntlm", "ChallengeResponse", "magic"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] magic
void Mono::Security::Protocol::Ntlm::ChallengeResponse::_set_magic(::Array<uint8_t>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Security.Protocol.Ntlm", "ChallengeResponse", "magic", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte[] nullEncMagic
::Array<uint8_t>* Mono::Security::Protocol::Ntlm::ChallengeResponse::_get_nullEncMagic() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint8_t>*>("Mono.Security.Protocol.Ntlm", "ChallengeResponse", "nullEncMagic"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte[] nullEncMagic
void Mono::Security::Protocol::Ntlm::ChallengeResponse::_set_nullEncMagic(::Array<uint8_t>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Security.Protocol.Ntlm", "ChallengeResponse", "nullEncMagic", value));
}
// Autogenerated method: Mono.Security.Protocol.Ntlm.ChallengeResponse..ctor
Mono::Security::Protocol::Ntlm::ChallengeResponse* Mono::Security::Protocol::Ntlm::ChallengeResponse::New_ctor(::Il2CppString* password, ::Array<uint8_t>* challenge) {
  return THROW_UNLESS(il2cpp_utils::New<ChallengeResponse*>(password, challenge));
}
// Autogenerated method: Mono.Security.Protocol.Ntlm.ChallengeResponse.set_Password
void Mono::Security::Protocol::Ntlm::ChallengeResponse::set_Password(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_Password", value));
}
// Autogenerated method: Mono.Security.Protocol.Ntlm.ChallengeResponse.set_Challenge
void Mono::Security::Protocol::Ntlm::ChallengeResponse::set_Challenge(::Array<uint8_t>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_Challenge", value));
}
// Autogenerated method: Mono.Security.Protocol.Ntlm.ChallengeResponse.get_LM
::Array<uint8_t>* Mono::Security::Protocol::Ntlm::ChallengeResponse::get_LM() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "get_LM"));
}
// Autogenerated method: Mono.Security.Protocol.Ntlm.ChallengeResponse.get_NT
::Array<uint8_t>* Mono::Security::Protocol::Ntlm::ChallengeResponse::get_NT() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "get_NT"));
}
// Autogenerated method: Mono.Security.Protocol.Ntlm.ChallengeResponse.Dispose
void Mono::Security::Protocol::Ntlm::ChallengeResponse::Dispose(bool disposing) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose", disposing));
}
// Autogenerated method: Mono.Security.Protocol.Ntlm.ChallengeResponse.GetResponse
::Array<uint8_t>* Mono::Security::Protocol::Ntlm::ChallengeResponse::GetResponse(::Array<uint8_t>* pwd) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "GetResponse", pwd));
}
// Autogenerated method: Mono.Security.Protocol.Ntlm.ChallengeResponse.PrepareDESKey
::Array<uint8_t>* Mono::Security::Protocol::Ntlm::ChallengeResponse::PrepareDESKey(::Array<uint8_t>* key56bits, int position) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "PrepareDESKey", key56bits, position));
}
// Autogenerated method: Mono.Security.Protocol.Ntlm.ChallengeResponse.PasswordToKey
::Array<uint8_t>* Mono::Security::Protocol::Ntlm::ChallengeResponse::PasswordToKey(::Il2CppString* password, int position) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "PasswordToKey", password, position));
}
// Autogenerated method: Mono.Security.Protocol.Ntlm.ChallengeResponse..cctor
void Mono::Security::Protocol::Ntlm::ChallengeResponse::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("Mono.Security.Protocol.Ntlm", "ChallengeResponse", ".cctor"));
}
// Autogenerated method: Mono.Security.Protocol.Ntlm.ChallengeResponse..ctor
Mono::Security::Protocol::Ntlm::ChallengeResponse* Mono::Security::Protocol::Ntlm::ChallengeResponse::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<ChallengeResponse*>());
}
// Autogenerated method: Mono.Security.Protocol.Ntlm.ChallengeResponse.Finalize
void Mono::Security::Protocol::Ntlm::ChallengeResponse::Finalize() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Finalize"));
}
// Autogenerated method: Mono.Security.Protocol.Ntlm.ChallengeResponse.Dispose
void Mono::Security::Protocol::Ntlm::ChallengeResponse::Dispose() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose"));
}
void Mono::Security::Protocol::Ntlm::ChallengeResponse::System_IDisposable_Dispose() {
  Mono::Security::Protocol::Ntlm::ChallengeResponse::Dispose();
}
