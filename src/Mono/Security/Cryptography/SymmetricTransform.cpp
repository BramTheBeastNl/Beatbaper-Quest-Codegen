// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Security.Cryptography.SymmetricTransform
#include "Mono/Security/Cryptography/SymmetricTransform.hpp"
// Including type: System.Security.Cryptography.SymmetricAlgorithm
#include "System/Security/Cryptography/SymmetricAlgorithm.hpp"
// Including type: System.Security.Cryptography.RandomNumberGenerator
#include "System/Security/Cryptography/RandomNumberGenerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.Dispose
void Mono::Security::Cryptography::SymmetricTransform::Dispose(bool disposing) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(disposing)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disposing);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.Transform
void Mono::Security::Cryptography::SymmetricTransform::Transform(::Array<uint8_t>* input, ::Array<uint8_t>* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("Transform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Transform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(input, output)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input, output);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.ECB
void Mono::Security::Cryptography::SymmetricTransform::ECB(::Array<uint8_t>* input, ::Array<uint8_t>* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("ECB");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ECB", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(input, output)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input, output);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.CBC
void Mono::Security::Cryptography::SymmetricTransform::CBC(::Array<uint8_t>* input, ::Array<uint8_t>* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("CBC");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CBC", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(input, output)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input, output);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.CFB
void Mono::Security::Cryptography::SymmetricTransform::CFB(::Array<uint8_t>* input, ::Array<uint8_t>* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("CFB");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CFB", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(input, output)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input, output);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.OFB
void Mono::Security::Cryptography::SymmetricTransform::OFB(::Array<uint8_t>* input, ::Array<uint8_t>* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("OFB");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OFB", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(input, output)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input, output);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.CTS
void Mono::Security::Cryptography::SymmetricTransform::CTS(::Array<uint8_t>* input, ::Array<uint8_t>* output) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("CTS");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CTS", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(input, output)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, input, output);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.CheckInput
void Mono::Security::Cryptography::SymmetricTransform::CheckInput(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("CheckInput");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CheckInput", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inputBuffer, inputOffset, inputCount)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, inputBuffer, inputOffset, inputCount);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.get_KeepLastBlock
bool Mono::Security::Cryptography::SymmetricTransform::get_KeepLastBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("get_KeepLastBlock");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_KeepLastBlock", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.InternalTransformBlock
int Mono::Security::Cryptography::SymmetricTransform::InternalTransformBlock(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount, ::Array<uint8_t>* outputBuffer, int outputOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("InternalTransformBlock");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InternalTransformBlock", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.Random
void Mono::Security::Cryptography::SymmetricTransform::Random(::Array<uint8_t>* buffer, int start, int length) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("Random");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Random", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(buffer, start, length)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buffer, start, length);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.ThrowBadPaddingException
void Mono::Security::Cryptography::SymmetricTransform::ThrowBadPaddingException(System::Security::Cryptography::PaddingMode padding, int length, int position) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("ThrowBadPaddingException");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ThrowBadPaddingException", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(padding, length, position)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, padding, length, position);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.FinalEncrypt
::Array<uint8_t>* Mono::Security::Cryptography::SymmetricTransform::FinalEncrypt(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("FinalEncrypt");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FinalEncrypt", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inputBuffer, inputOffset, inputCount)));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, inputBuffer, inputOffset, inputCount);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.FinalDecrypt
::Array<uint8_t>* Mono::Security::Cryptography::SymmetricTransform::FinalDecrypt(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("FinalDecrypt");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FinalDecrypt", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inputBuffer, inputOffset, inputCount)));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, inputBuffer, inputOffset, inputCount);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.Finalize
void Mono::Security::Cryptography::SymmetricTransform::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("Finalize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.System.IDisposable.Dispose
void Mono::Security::Cryptography::SymmetricTransform::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("System.IDisposable.Dispose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.get_CanTransformMultipleBlocks
bool Mono::Security::Cryptography::SymmetricTransform::get_CanTransformMultipleBlocks() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("get_CanTransformMultipleBlocks");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_CanTransformMultipleBlocks", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.get_InputBlockSize
int Mono::Security::Cryptography::SymmetricTransform::get_InputBlockSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("get_InputBlockSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_InputBlockSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.get_OutputBlockSize
int Mono::Security::Cryptography::SymmetricTransform::get_OutputBlockSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("get_OutputBlockSize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_OutputBlockSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.TransformBlock
int Mono::Security::Cryptography::SymmetricTransform::TransformBlock(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount, ::Array<uint8_t>* outputBuffer, int outputOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("TransformBlock");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TransformBlock", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset);
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.TransformFinalBlock
::Array<uint8_t>* Mono::Security::Cryptography::SymmetricTransform::TransformFinalBlock(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Cryptography").WithContext("SymmetricTransform").WithContext("TransformFinalBlock");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TransformFinalBlock", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(inputBuffer, inputOffset, inputCount)));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method, inputBuffer, inputOffset, inputCount);
}
