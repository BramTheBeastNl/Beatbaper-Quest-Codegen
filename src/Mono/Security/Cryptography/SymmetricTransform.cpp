// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Security.Cryptography.SymmetricTransform
#include "Mono/Security/Cryptography/SymmetricTransform.hpp"
// Including type: System.Security.Cryptography.SymmetricAlgorithm
#include "System/Security/Cryptography/SymmetricAlgorithm.hpp"
// Including type: System.Security.Cryptography.RandomNumberGenerator
#include "System/Security/Cryptography/RandomNumberGenerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform..ctor
Mono::Security::Cryptography::SymmetricTransform* Mono::Security::Cryptography::SymmetricTransform::New_ctor(System::Security::Cryptography::SymmetricAlgorithm* symmAlgo, bool encryption, ::Array<uint8_t>* rgbIV) {
  return THROW_UNLESS(il2cpp_utils::New<SymmetricTransform*>(symmAlgo, encryption, rgbIV));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.Dispose
void Mono::Security::Cryptography::SymmetricTransform::Dispose(bool disposing) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Dispose", disposing));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.Transform
void Mono::Security::Cryptography::SymmetricTransform::Transform(::Array<uint8_t>* input, ::Array<uint8_t>* output) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Transform", input, output));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.ECB
void Mono::Security::Cryptography::SymmetricTransform::ECB(::Array<uint8_t>* input, ::Array<uint8_t>* output) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ECB", input, output));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.CBC
void Mono::Security::Cryptography::SymmetricTransform::CBC(::Array<uint8_t>* input, ::Array<uint8_t>* output) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CBC", input, output));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.CFB
void Mono::Security::Cryptography::SymmetricTransform::CFB(::Array<uint8_t>* input, ::Array<uint8_t>* output) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CFB", input, output));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.OFB
void Mono::Security::Cryptography::SymmetricTransform::OFB(::Array<uint8_t>* input, ::Array<uint8_t>* output) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OFB", input, output));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.CTS
void Mono::Security::Cryptography::SymmetricTransform::CTS(::Array<uint8_t>* input, ::Array<uint8_t>* output) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CTS", input, output));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.CheckInput
void Mono::Security::Cryptography::SymmetricTransform::CheckInput(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CheckInput", inputBuffer, inputOffset, inputCount));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.get_KeepLastBlock
bool Mono::Security::Cryptography::SymmetricTransform::get_KeepLastBlock() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_KeepLastBlock"));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.InternalTransformBlock
int Mono::Security::Cryptography::SymmetricTransform::InternalTransformBlock(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount, ::Array<uint8_t>* outputBuffer, int outputOffset) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "InternalTransformBlock", inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.Random
void Mono::Security::Cryptography::SymmetricTransform::Random(::Array<uint8_t>* buffer, int start, int length) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Random", buffer, start, length));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.ThrowBadPaddingException
void Mono::Security::Cryptography::SymmetricTransform::ThrowBadPaddingException(System::Security::Cryptography::PaddingMode padding, int length, int position) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ThrowBadPaddingException", padding, length, position));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.FinalEncrypt
::Array<uint8_t>* Mono::Security::Cryptography::SymmetricTransform::FinalEncrypt(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "FinalEncrypt", inputBuffer, inputOffset, inputCount));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.FinalDecrypt
::Array<uint8_t>* Mono::Security::Cryptography::SymmetricTransform::FinalDecrypt(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "FinalDecrypt", inputBuffer, inputOffset, inputCount));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.Finalize
void Mono::Security::Cryptography::SymmetricTransform::Finalize() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Finalize"));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.System.IDisposable.Dispose
void Mono::Security::Cryptography::SymmetricTransform::System_IDisposable_Dispose() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.IDisposable.Dispose"));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.get_CanTransformMultipleBlocks
bool Mono::Security::Cryptography::SymmetricTransform::get_CanTransformMultipleBlocks() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_CanTransformMultipleBlocks"));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.get_InputBlockSize
int Mono::Security::Cryptography::SymmetricTransform::get_InputBlockSize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_InputBlockSize"));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.get_OutputBlockSize
int Mono::Security::Cryptography::SymmetricTransform::get_OutputBlockSize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_OutputBlockSize"));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.TransformBlock
int Mono::Security::Cryptography::SymmetricTransform::TransformBlock(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount, ::Array<uint8_t>* outputBuffer, int outputOffset) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "TransformBlock", inputBuffer, inputOffset, inputCount, outputBuffer, outputOffset));
}
// Autogenerated method: Mono.Security.Cryptography.SymmetricTransform.TransformFinalBlock
::Array<uint8_t>* Mono::Security::Cryptography::SymmetricTransform::TransformFinalBlock(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "TransformFinalBlock", inputBuffer, inputOffset, inputCount));
}
