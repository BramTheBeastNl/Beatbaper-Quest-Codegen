// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Security.Interface.MonoTlsProvider
#include "Mono/Security/Interface/MonoTlsProvider.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Security.Authentication.SslProtocols
#include "System/Security/Authentication/SslProtocols.hpp"
// Including type: Mono.Security.Interface.IMonoSslStream
#include "Mono/Security/Interface/IMonoSslStream.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: Mono.Security.Interface.MonoTlsSettings
#include "Mono/Security/Interface/MonoTlsSettings.hpp"
// Including type: System.Net.Security.SslStream
#include "System/Net/Security/SslStream.hpp"
// Including type: Mono.Security.Interface.ICertificateValidator2
#include "Mono/Security/Interface/ICertificateValidator2.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
#include "System/Security/Cryptography/X509Certificates/X509CertificateCollection.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Chain
#include "System/Security/Cryptography/X509Certificates/X509Chain.hpp"
// Including type: Mono.Security.Interface.MonoSslPolicyErrors
#include "Mono/Security/Interface/MonoSslPolicyErrors.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Security.Interface.MonoTlsProvider.get_ID
System::Guid Mono::Security::Interface::MonoTlsProvider::get_ID() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Interface").WithContext("MonoTlsProvider").WithContext("get_ID");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_ID", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Guid, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Security.Interface.MonoTlsProvider.get_Name
::Il2CppString* Mono::Security::Interface::MonoTlsProvider::get_Name() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Interface").WithContext("MonoTlsProvider").WithContext("get_Name");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Security.Interface.MonoTlsProvider.get_SupportsSslStream
bool Mono::Security::Interface::MonoTlsProvider::get_SupportsSslStream() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Interface").WithContext("MonoTlsProvider").WithContext("get_SupportsSslStream");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_SupportsSslStream", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Security.Interface.MonoTlsProvider.get_SupportsConnectionInfo
bool Mono::Security::Interface::MonoTlsProvider::get_SupportsConnectionInfo() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Interface").WithContext("MonoTlsProvider").WithContext("get_SupportsConnectionInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_SupportsConnectionInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Security.Interface.MonoTlsProvider.get_SupportsMonoExtensions
bool Mono::Security::Interface::MonoTlsProvider::get_SupportsMonoExtensions() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Interface").WithContext("MonoTlsProvider").WithContext("get_SupportsMonoExtensions");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_SupportsMonoExtensions", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Security.Interface.MonoTlsProvider.get_SupportedProtocols
System::Security::Authentication::SslProtocols Mono::Security::Interface::MonoTlsProvider::get_SupportedProtocols() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Interface").WithContext("MonoTlsProvider").WithContext("get_SupportedProtocols");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_SupportedProtocols", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Security::Authentication::SslProtocols, false>(this, ___internal__method);
}
// Autogenerated method: Mono.Security.Interface.MonoTlsProvider.CreateSslStream
Mono::Security::Interface::IMonoSslStream* Mono::Security::Interface::MonoTlsProvider::CreateSslStream(System::IO::Stream* innerStream, bool leaveInnerStreamOpen, Mono::Security::Interface::MonoTlsSettings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Interface").WithContext("MonoTlsProvider").WithContext("CreateSslStream");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateSslStream", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(innerStream, leaveInnerStreamOpen, settings)));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::Interface::IMonoSslStream*, false>(this, ___internal__method, innerStream, leaveInnerStreamOpen, settings);
}
// Autogenerated method: Mono.Security.Interface.MonoTlsProvider.CreateSslStreamInternal
Mono::Security::Interface::IMonoSslStream* Mono::Security::Interface::MonoTlsProvider::CreateSslStreamInternal(System::Net::Security::SslStream* sslStream, System::IO::Stream* innerStream, bool leaveInnerStreamOpen, Mono::Security::Interface::MonoTlsSettings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Interface").WithContext("MonoTlsProvider").WithContext("CreateSslStreamInternal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateSslStreamInternal", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(sslStream, innerStream, leaveInnerStreamOpen, settings)));
  return ::il2cpp_utils::RunMethodThrow<Mono::Security::Interface::IMonoSslStream*, false>(this, ___internal__method, sslStream, innerStream, leaveInnerStreamOpen, settings);
}
// Autogenerated method: Mono.Security.Interface.MonoTlsProvider.ValidateCertificate
bool Mono::Security::Interface::MonoTlsProvider::ValidateCertificate(Mono::Security::Interface::ICertificateValidator2* validator, ::Il2CppString* targetHost, bool serverMode, System::Security::Cryptography::X509Certificates::X509CertificateCollection* certificates, bool wantsChain, System::Security::Cryptography::X509Certificates::X509Chain*& chain, Mono::Security::Interface::MonoSslPolicyErrors& errors, int& status11) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Interface").WithContext("MonoTlsProvider").WithContext("ValidateCertificate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ValidateCertificate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(validator, targetHost, serverMode, certificates, wantsChain, chain, errors, status11)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, validator, targetHost, serverMode, certificates, wantsChain, chain, errors, status11);
}
// Autogenerated method: Mono.Security.Interface.MonoTlsProvider.get_SupportsCleanShutdown
bool Mono::Security::Interface::MonoTlsProvider::get_SupportsCleanShutdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Security::Interface").WithContext("MonoTlsProvider").WithContext("get_SupportsCleanShutdown");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_SupportsCleanShutdown", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
