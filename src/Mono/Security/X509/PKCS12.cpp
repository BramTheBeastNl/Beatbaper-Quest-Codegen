// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Security.X509.PKCS12
#include "Mono/Security/X509/PKCS12.hpp"
// Including type: Mono.Security.X509.PKCS12/DeriveBytes
#include "Mono/Security/X509/PKCS12_DeriveBytes.hpp"
// Including type: System.Collections.ArrayList
#include "System/Collections/ArrayList.hpp"
// Including type: Mono.Security.X509.X509CertificateCollection
#include "Mono/Security/X509/X509CertificateCollection.hpp"
// Including type: System.Security.Cryptography.RandomNumberGenerator
#include "System/Security/Cryptography/RandomNumberGenerator.hpp"
// Including type: System.Security.Cryptography.SymmetricAlgorithm
#include "System/Security/Cryptography/SymmetricAlgorithm.hpp"
// Including type: System.Security.Cryptography.DSAParameters
#include "System/Security/Cryptography/DSAParameters.hpp"
// Including type: Mono.Security.ASN1
#include "Mono/Security/ASN1.hpp"
// Including type: Mono.Security.X509.X509Certificate
#include "Mono/Security/X509/X509Certificate.hpp"
// Including type: System.Collections.IDictionary
#include "System/Collections/IDictionary.hpp"
// Including type: Mono.Security.PKCS7/EncryptedData
#include "Mono/Security/PKCS7_EncryptedData.hpp"
// Including type: Mono.Security.Cryptography.PKCS8/PrivateKeyInfo
#include "Mono/Security/Cryptography/PKCS8_PrivateKeyInfo.hpp"
// Including type: Mono.Security.PKCS7/ContentInfo
#include "Mono/Security/PKCS7_ContentInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 password_max_length
int Mono::Security::X509::PKCS12::_get_password_max_length() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("Mono.Security.X509", "PKCS12", "password_max_length"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 password_max_length
void Mono::Security::X509::PKCS12::_set_password_max_length(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Security.X509", "PKCS12", "password_max_length", value));
}
// Autogenerated method: Mono.Security.X509.PKCS12..ctor
Mono::Security::X509::PKCS12* Mono::Security::X509::PKCS12::New_ctor(::Array<uint8_t>* data) {
  return THROW_UNLESS(il2cpp_utils::New<PKCS12*>(data));
}
// Autogenerated method: Mono.Security.X509.PKCS12..ctor
Mono::Security::X509::PKCS12* Mono::Security::X509::PKCS12::New_ctor(::Array<uint8_t>* data, ::Il2CppString* password) {
  return THROW_UNLESS(il2cpp_utils::New<PKCS12*>(data, password));
}
// Autogenerated method: Mono.Security.X509.PKCS12.Decode
void Mono::Security::X509::PKCS12::Decode(::Array<uint8_t>* data) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Decode", data));
}
// Autogenerated method: Mono.Security.X509.PKCS12.set_Password
void Mono::Security::X509::PKCS12::set_Password(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_Password", value));
}
// Autogenerated method: Mono.Security.X509.PKCS12.get_IterationCount
int Mono::Security::X509::PKCS12::get_IterationCount() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_IterationCount"));
}
// Autogenerated method: Mono.Security.X509.PKCS12.set_IterationCount
void Mono::Security::X509::PKCS12::set_IterationCount(int value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_IterationCount", value));
}
// Autogenerated method: Mono.Security.X509.PKCS12.get_Keys
System::Collections::ArrayList* Mono::Security::X509::PKCS12::get_Keys() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::ArrayList*>(this, "get_Keys"));
}
// Autogenerated method: Mono.Security.X509.PKCS12.get_Certificates
Mono::Security::X509::X509CertificateCollection* Mono::Security::X509::PKCS12::get_Certificates() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Security::X509::X509CertificateCollection*>(this, "get_Certificates"));
}
// Autogenerated method: Mono.Security.X509.PKCS12.get_RNG
System::Security::Cryptography::RandomNumberGenerator* Mono::Security::X509::PKCS12::get_RNG() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Security::Cryptography::RandomNumberGenerator*>(this, "get_RNG"));
}
// Autogenerated method: Mono.Security.X509.PKCS12.Compare
bool Mono::Security::X509::PKCS12::Compare(::Array<uint8_t>* expected, ::Array<uint8_t>* actual) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Compare", expected, actual));
}
// Autogenerated method: Mono.Security.X509.PKCS12.GetSymmetricAlgorithm
System::Security::Cryptography::SymmetricAlgorithm* Mono::Security::X509::PKCS12::GetSymmetricAlgorithm(::Il2CppString* algorithmOid, ::Array<uint8_t>* salt, int iterationCount) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Security::Cryptography::SymmetricAlgorithm*>(this, "GetSymmetricAlgorithm", algorithmOid, salt, iterationCount));
}
// Autogenerated method: Mono.Security.X509.PKCS12.Decrypt
::Array<uint8_t>* Mono::Security::X509::PKCS12::Decrypt(::Il2CppString* algorithmOid, ::Array<uint8_t>* salt, int iterationCount, ::Array<uint8_t>* encryptedData) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "Decrypt", algorithmOid, salt, iterationCount, encryptedData));
}
// Autogenerated method: Mono.Security.X509.PKCS12.Decrypt
::Array<uint8_t>* Mono::Security::X509::PKCS12::Decrypt(Mono::Security::PKCS7::EncryptedData* ed) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "Decrypt", ed));
}
// Autogenerated method: Mono.Security.X509.PKCS12.Encrypt
::Array<uint8_t>* Mono::Security::X509::PKCS12::Encrypt(::Il2CppString* algorithmOid, ::Array<uint8_t>* salt, int iterationCount, ::Array<uint8_t>* data) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "Encrypt", algorithmOid, salt, iterationCount, data));
}
// Autogenerated method: Mono.Security.X509.PKCS12.GetExistingParameters
System::Security::Cryptography::DSAParameters Mono::Security::X509::PKCS12::GetExistingParameters(bool& found) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Security::Cryptography::DSAParameters>(this, "GetExistingParameters", found));
}
// Autogenerated method: Mono.Security.X509.PKCS12.AddPrivateKey
void Mono::Security::X509::PKCS12::AddPrivateKey(Mono::Security::Cryptography::PKCS8::PrivateKeyInfo* pki) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddPrivateKey", pki));
}
// Autogenerated method: Mono.Security.X509.PKCS12.ReadSafeBag
void Mono::Security::X509::PKCS12::ReadSafeBag(Mono::Security::ASN1* safeBag) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ReadSafeBag", safeBag));
}
// Autogenerated method: Mono.Security.X509.PKCS12.CertificateSafeBag
Mono::Security::ASN1* Mono::Security::X509::PKCS12::CertificateSafeBag(Mono::Security::X509::X509Certificate* x509, System::Collections::IDictionary* attributes) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Security::ASN1*>(this, "CertificateSafeBag", x509, attributes));
}
// Autogenerated method: Mono.Security.X509.PKCS12.MAC
::Array<uint8_t>* Mono::Security::X509::PKCS12::MAC(::Array<uint8_t>* password, ::Array<uint8_t>* salt, int iterations, ::Array<uint8_t>* data) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "MAC", password, salt, iterations, data));
}
// Autogenerated method: Mono.Security.X509.PKCS12.GetBytes
::Array<uint8_t>* Mono::Security::X509::PKCS12::GetBytes() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "GetBytes"));
}
// Autogenerated method: Mono.Security.X509.PKCS12.EncryptedContentInfo
Mono::Security::PKCS7::ContentInfo* Mono::Security::X509::PKCS12::EncryptedContentInfo(Mono::Security::ASN1* safeBags, ::Il2CppString* algorithmOid) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Security::PKCS7::ContentInfo*>(this, "EncryptedContentInfo", safeBags, algorithmOid));
}
// Autogenerated method: Mono.Security.X509.PKCS12.AddCertificate
void Mono::Security::X509::PKCS12::AddCertificate(Mono::Security::X509::X509Certificate* cert) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddCertificate", cert));
}
// Autogenerated method: Mono.Security.X509.PKCS12.AddCertificate
void Mono::Security::X509::PKCS12::AddCertificate(Mono::Security::X509::X509Certificate* cert, System::Collections::IDictionary* attributes) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddCertificate", cert, attributes));
}
// Autogenerated method: Mono.Security.X509.PKCS12.RemoveCertificate
void Mono::Security::X509::PKCS12::RemoveCertificate(Mono::Security::X509::X509Certificate* cert) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RemoveCertificate", cert));
}
// Autogenerated method: Mono.Security.X509.PKCS12.RemoveCertificate
void Mono::Security::X509::PKCS12::RemoveCertificate(Mono::Security::X509::X509Certificate* cert, System::Collections::IDictionary* attrs) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RemoveCertificate", cert, attrs));
}
// Autogenerated method: Mono.Security.X509.PKCS12.get_MaximumPasswordLength
int Mono::Security::X509::PKCS12::get_MaximumPasswordLength() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("Mono.Security.X509", "PKCS12", "get_MaximumPasswordLength"));
}
// Autogenerated method: Mono.Security.X509.PKCS12..cctor
void Mono::Security::X509::PKCS12::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("Mono.Security.X509", "PKCS12", ".cctor"));
}
// Autogenerated method: Mono.Security.X509.PKCS12..ctor
Mono::Security::X509::PKCS12* Mono::Security::X509::PKCS12::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<PKCS12*>());
}
// Autogenerated method: Mono.Security.X509.PKCS12.Finalize
void Mono::Security::X509::PKCS12::Finalize() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Finalize"));
}
// Autogenerated method: Mono.Security.X509.PKCS12.Clone
::Il2CppObject* Mono::Security::X509::PKCS12::Clone() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppObject*>(this, "Clone"));
}
::Il2CppObject* Mono::Security::X509::PKCS12::System_ICloneable_Clone() {
  return Mono::Security::X509::PKCS12::Clone();
}
