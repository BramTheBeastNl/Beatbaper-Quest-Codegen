// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Math.Prime.Generator.SequentialSearchPrimeGeneratorBase
#include "Mono/Math/Prime/Generator/SequentialSearchPrimeGeneratorBase.hpp"
// Including type: Mono.Math.BigInteger
#include "Mono/Math/BigInteger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Math.Prime.Generator.SequentialSearchPrimeGeneratorBase.GenerateSearchBase
Mono::Math::BigInteger* Mono::Math::Prime::Generator::SequentialSearchPrimeGeneratorBase::GenerateSearchBase(int bits, ::Il2CppObject* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math::Prime::Generator").WithContext("SequentialSearchPrimeGeneratorBase").WithContext("GenerateSearchBase");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Mono::Math::BigInteger*>(), "GenerateSearchBase", {}, ::il2cpp_utils::ExtractTypes(bits, context)));
  return ::il2cpp_utils::RunMethodThrow<Mono::Math::BigInteger*, false>(this, ___internal__method, bits, context);
}
// Autogenerated method: Mono.Math.Prime.Generator.SequentialSearchPrimeGeneratorBase.GenerateNewPrime
Mono::Math::BigInteger* Mono::Math::Prime::Generator::SequentialSearchPrimeGeneratorBase::GenerateNewPrime(int bits, ::Il2CppObject* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math::Prime::Generator").WithContext("SequentialSearchPrimeGeneratorBase").WithContext("GenerateNewPrime");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Mono::Math::BigInteger*>(), "GenerateNewPrime", {}, ::il2cpp_utils::ExtractTypes(bits, context)));
  return ::il2cpp_utils::RunMethodThrow<Mono::Math::BigInteger*, false>(this, ___internal__method, bits, context);
}
// Autogenerated method: Mono.Math.Prime.Generator.SequentialSearchPrimeGeneratorBase.IsPrimeAcceptable
bool Mono::Math::Prime::Generator::SequentialSearchPrimeGeneratorBase::IsPrimeAcceptable(Mono::Math::BigInteger* bi, ::Il2CppObject* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math::Prime::Generator").WithContext("SequentialSearchPrimeGeneratorBase").WithContext("IsPrimeAcceptable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<bool>(), "IsPrimeAcceptable", {}, ::il2cpp_utils::ExtractTypes(bi, context)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bi, context);
}
// Autogenerated method: Mono.Math.Prime.Generator.SequentialSearchPrimeGeneratorBase.GenerateNewPrime
Mono::Math::BigInteger* Mono::Math::Prime::Generator::SequentialSearchPrimeGeneratorBase::GenerateNewPrime(int bits) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math::Prime::Generator").WithContext("SequentialSearchPrimeGeneratorBase").WithContext("GenerateNewPrime");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Mono::Math::BigInteger*>(), "GenerateNewPrime", {}, ::il2cpp_utils::ExtractTypes(bits)));
  return ::il2cpp_utils::RunMethodThrow<Mono::Math::BigInteger*, false>(this, ___internal__method, bits);
}
// Autogenerated method: Mono.Math.Prime.Generator.SequentialSearchPrimeGeneratorBase..ctor
Mono::Math::Prime::Generator::SequentialSearchPrimeGeneratorBase* Mono::Math::Prime::Generator::SequentialSearchPrimeGeneratorBase::New_ctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math::Prime::Generator").WithContext("SequentialSearchPrimeGeneratorBase").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<SequentialSearchPrimeGeneratorBase*>());
}
