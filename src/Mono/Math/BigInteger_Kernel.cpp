// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Math.BigInteger/Kernel
#include "Mono/Math/BigInteger_Kernel.hpp"
// Including type: Mono.Math.BigInteger/Sign
#include "Mono/Math/BigInteger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Math.BigInteger/Kernel.Subtract
Mono::Math::BigInteger* Mono::Math::BigInteger::Kernel::Subtract(Mono::Math::BigInteger* big, Mono::Math::BigInteger* small) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math").WithContext("Kernel").WithContext("Subtract");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Mono.Math", "BigInteger/Kernel", "Subtract", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(big, small)));
  return ::il2cpp_utils::RunMethodThrow<Mono::Math::BigInteger*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, big, small);
}
// Autogenerated method: Mono.Math.BigInteger/Kernel.MinusEq
void Mono::Math::BigInteger::Kernel::MinusEq(Mono::Math::BigInteger* big, Mono::Math::BigInteger* small) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math").WithContext("Kernel").WithContext("MinusEq");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Mono.Math", "BigInteger/Kernel", "MinusEq", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(big, small)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, big, small);
}
// Autogenerated method: Mono.Math.BigInteger/Kernel.PlusEq
void Mono::Math::BigInteger::Kernel::PlusEq(Mono::Math::BigInteger* bi1, Mono::Math::BigInteger* bi2) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math").WithContext("Kernel").WithContext("PlusEq");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Mono.Math", "BigInteger/Kernel", "PlusEq", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bi1, bi2)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bi1, bi2);
}
// Autogenerated method: Mono.Math.BigInteger/Kernel.Compare
Mono::Math::BigInteger::Sign Mono::Math::BigInteger::Kernel::Compare(Mono::Math::BigInteger* bi1, Mono::Math::BigInteger* bi2) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math").WithContext("Kernel").WithContext("Compare");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Mono.Math", "BigInteger/Kernel", "Compare", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bi1, bi2)));
  return ::il2cpp_utils::RunMethodThrow<Mono::Math::BigInteger::Sign, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bi1, bi2);
}
// Autogenerated method: Mono.Math.BigInteger/Kernel.SingleByteDivideInPlace
uint Mono::Math::BigInteger::Kernel::SingleByteDivideInPlace(Mono::Math::BigInteger* n, uint d) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math").WithContext("Kernel").WithContext("SingleByteDivideInPlace");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Mono.Math", "BigInteger/Kernel", "SingleByteDivideInPlace", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(n, d)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, n, d);
}
// Autogenerated method: Mono.Math.BigInteger/Kernel.DwordMod
uint Mono::Math::BigInteger::Kernel::DwordMod(Mono::Math::BigInteger* n, uint d) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math").WithContext("Kernel").WithContext("DwordMod");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Mono.Math", "BigInteger/Kernel", "DwordMod", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(n, d)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, n, d);
}
// Autogenerated method: Mono.Math.BigInteger/Kernel.DwordDivMod
::Array<Mono::Math::BigInteger*>* Mono::Math::BigInteger::Kernel::DwordDivMod(Mono::Math::BigInteger* n, uint d) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math").WithContext("Kernel").WithContext("DwordDivMod");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Mono.Math", "BigInteger/Kernel", "DwordDivMod", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(n, d)));
  return ::il2cpp_utils::RunMethodThrow<::Array<Mono::Math::BigInteger*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, n, d);
}
// Autogenerated method: Mono.Math.BigInteger/Kernel.multiByteDivide
::Array<Mono::Math::BigInteger*>* Mono::Math::BigInteger::Kernel::multiByteDivide(Mono::Math::BigInteger* bi1, Mono::Math::BigInteger* bi2) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math").WithContext("Kernel").WithContext("multiByteDivide");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Mono.Math", "BigInteger/Kernel", "multiByteDivide", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bi1, bi2)));
  return ::il2cpp_utils::RunMethodThrow<::Array<Mono::Math::BigInteger*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bi1, bi2);
}
// Autogenerated method: Mono.Math.BigInteger/Kernel.LeftShift
Mono::Math::BigInteger* Mono::Math::BigInteger::Kernel::LeftShift(Mono::Math::BigInteger* bi, int n) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math").WithContext("Kernel").WithContext("LeftShift");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Mono.Math", "BigInteger/Kernel", "LeftShift", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bi, n)));
  return ::il2cpp_utils::RunMethodThrow<Mono::Math::BigInteger*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bi, n);
}
// Autogenerated method: Mono.Math.BigInteger/Kernel.RightShift
Mono::Math::BigInteger* Mono::Math::BigInteger::Kernel::RightShift(Mono::Math::BigInteger* bi, int n) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math").WithContext("Kernel").WithContext("RightShift");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Mono.Math", "BigInteger/Kernel", "RightShift", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bi, n)));
  return ::il2cpp_utils::RunMethodThrow<Mono::Math::BigInteger*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bi, n);
}
// Autogenerated method: Mono.Math.BigInteger/Kernel.Multiply
void Mono::Math::BigInteger::Kernel::Multiply(::Array<uint>* x, uint xOffset, uint xLen, ::Array<uint>* y, uint yOffset, uint yLen, ::Array<uint>* d, uint dOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math").WithContext("Kernel").WithContext("Multiply");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Mono.Math", "BigInteger/Kernel", "Multiply", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(x, xOffset, xLen, y, yOffset, yLen, d, dOffset)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x, xOffset, xLen, y, yOffset, yLen, d, dOffset);
}
// Autogenerated method: Mono.Math.BigInteger/Kernel.MultiplyMod2p32pmod
void Mono::Math::BigInteger::Kernel::MultiplyMod2p32pmod(::Array<uint>* x, int xOffset, int xLen, ::Array<uint>* y, int yOffest, int yLen, ::Array<uint>* d, int dOffset, int mod) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math").WithContext("Kernel").WithContext("MultiplyMod2p32pmod");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Mono.Math", "BigInteger/Kernel", "MultiplyMod2p32pmod", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(x, xOffset, xLen, y, yOffest, yLen, d, dOffset, mod)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x, xOffset, xLen, y, yOffest, yLen, d, dOffset, mod);
}
// Autogenerated method: Mono.Math.BigInteger/Kernel.modInverse
uint Mono::Math::BigInteger::Kernel::modInverse(Mono::Math::BigInteger* bi, uint modulus) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math").WithContext("Kernel").WithContext("modInverse");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Mono.Math", "BigInteger/Kernel", "modInverse", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bi, modulus)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bi, modulus);
}
// Autogenerated method: Mono.Math.BigInteger/Kernel.modInverse
Mono::Math::BigInteger* Mono::Math::BigInteger::Kernel::modInverse(Mono::Math::BigInteger* bi, Mono::Math::BigInteger* modulus) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Mono::Math").WithContext("Kernel").WithContext("modInverse");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Mono.Math", "BigInteger/Kernel", "modInverse", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bi, modulus)));
  return ::il2cpp_utils::RunMethodThrow<Mono::Math::BigInteger*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bi, modulus);
}
