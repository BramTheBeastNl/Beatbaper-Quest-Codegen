// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Math.BigInteger
#include "Mono/Math/BigInteger.hpp"
// Including type: Mono.Math.BigInteger/Sign
#include "Mono/Math/BigInteger_Sign.hpp"
// Including type: Mono.Math.BigInteger/ModulusRing
#include "Mono/Math/BigInteger_ModulusRing.hpp"
// Including type: Mono.Math.BigInteger/Kernel
#include "Mono/Math/BigInteger_Kernel.hpp"
// Including type: System.Security.Cryptography.RandomNumberGenerator
#include "System/Security/Cryptography/RandomNumberGenerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static readonly System.UInt32[] smallPrimes
::Array<uint>* Mono::Math::BigInteger::_get_smallPrimes() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<uint>*>("Mono.Math", "BigInteger", "smallPrimes"));
}
// Autogenerated static field setter
// Set static field: static readonly System.UInt32[] smallPrimes
void Mono::Math::BigInteger::_set_smallPrimes(::Array<uint>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Math", "BigInteger", "smallPrimes", value));
}
// Autogenerated static field getter
// Get static field: static private System.Security.Cryptography.RandomNumberGenerator rng
System::Security::Cryptography::RandomNumberGenerator* Mono::Math::BigInteger::_get_rng() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Security::Cryptography::RandomNumberGenerator*>("Mono.Math", "BigInteger", "rng"));
}
// Autogenerated static field setter
// Set static field: static private System.Security.Cryptography.RandomNumberGenerator rng
void Mono::Math::BigInteger::_set_rng(System::Security::Cryptography::RandomNumberGenerator* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Mono.Math", "BigInteger", "rng", value));
}
// Autogenerated method: Mono.Math.BigInteger..ctor
Mono::Math::BigInteger* Mono::Math::BigInteger::New_ctor(Mono::Math::BigInteger::Sign sign, uint len) {
  return THROW_UNLESS(il2cpp_utils::New<BigInteger*>(sign, len));
}
// Autogenerated method: Mono.Math.BigInteger..ctor
Mono::Math::BigInteger* Mono::Math::BigInteger::New_ctor(Mono::Math::BigInteger* bi) {
  return THROW_UNLESS(il2cpp_utils::New<BigInteger*>(bi));
}
// Autogenerated method: Mono.Math.BigInteger..ctor
Mono::Math::BigInteger* Mono::Math::BigInteger::New_ctor(Mono::Math::BigInteger* bi, uint len) {
  return THROW_UNLESS(il2cpp_utils::New<BigInteger*>(bi, len));
}
// Autogenerated method: Mono.Math.BigInteger..ctor
Mono::Math::BigInteger* Mono::Math::BigInteger::New_ctor(::Array<uint8_t>* inData) {
  return THROW_UNLESS(il2cpp_utils::New<BigInteger*>(inData));
}
// Autogenerated method: Mono.Math.BigInteger..ctor
Mono::Math::BigInteger* Mono::Math::BigInteger::New_ctor(uint ui) {
  return THROW_UNLESS(il2cpp_utils::New<BigInteger*>(ui));
}
// Autogenerated method: Mono.Math.BigInteger.get_Rng
System::Security::Cryptography::RandomNumberGenerator* Mono::Math::BigInteger::get_Rng() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Security::Cryptography::RandomNumberGenerator*>("Mono.Math", "BigInteger", "get_Rng"));
}
// Autogenerated method: Mono.Math.BigInteger.GenerateRandom
Mono::Math::BigInteger* Mono::Math::BigInteger::GenerateRandom(int bits, System::Security::Cryptography::RandomNumberGenerator* rng) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Math::BigInteger*>("Mono.Math", "BigInteger", "GenerateRandom", bits, rng));
}
// Autogenerated method: Mono.Math.BigInteger.GenerateRandom
Mono::Math::BigInteger* Mono::Math::BigInteger::GenerateRandom(int bits) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Math::BigInteger*>("Mono.Math", "BigInteger", "GenerateRandom", bits));
}
// Autogenerated method: Mono.Math.BigInteger.BitCount
int Mono::Math::BigInteger::BitCount() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "BitCount"));
}
// Autogenerated method: Mono.Math.BigInteger.TestBit
bool Mono::Math::BigInteger::TestBit(int bitNum) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TestBit", bitNum));
}
// Autogenerated method: Mono.Math.BigInteger.SetBit
void Mono::Math::BigInteger::SetBit(uint bitNum) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetBit", bitNum));
}
// Autogenerated method: Mono.Math.BigInteger.SetBit
void Mono::Math::BigInteger::SetBit(uint bitNum, bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetBit", bitNum, value));
}
// Autogenerated method: Mono.Math.BigInteger.LowestSetBit
int Mono::Math::BigInteger::LowestSetBit() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "LowestSetBit"));
}
// Autogenerated method: Mono.Math.BigInteger.GetBytes
::Array<uint8_t>* Mono::Math::BigInteger::GetBytes() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(this, "GetBytes"));
}
// Autogenerated method: Mono.Math.BigInteger.ToString
::Il2CppString* Mono::Math::BigInteger::ToString(uint radix) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "ToString", radix));
}
// Autogenerated method: Mono.Math.BigInteger.ToString
::Il2CppString* Mono::Math::BigInteger::ToString(uint radix, ::Il2CppString* characterSet) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "ToString", radix, characterSet));
}
// Autogenerated method: Mono.Math.BigInteger.Normalize
void Mono::Math::BigInteger::Normalize() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Normalize"));
}
// Autogenerated method: Mono.Math.BigInteger.ModInverse
Mono::Math::BigInteger* Mono::Math::BigInteger::ModInverse(Mono::Math::BigInteger* modulus) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Math::BigInteger*>(this, "ModInverse", modulus));
}
// Autogenerated method: Mono.Math.BigInteger.GeneratePseudoPrime
Mono::Math::BigInteger* Mono::Math::BigInteger::GeneratePseudoPrime(int bits) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Math::BigInteger*>("Mono.Math", "BigInteger", "GeneratePseudoPrime", bits));
}
// Autogenerated method: Mono.Math.BigInteger.Incr2
void Mono::Math::BigInteger::Incr2() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Incr2"));
}
// Autogenerated method: Mono.Math.BigInteger..cctor
void Mono::Math::BigInteger::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("Mono.Math", "BigInteger", ".cctor"));
}
// Autogenerated method: Mono.Math.BigInteger.GetHashCode
int Mono::Math::BigInteger::GetHashCode() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetHashCode"));
}
// Autogenerated method: Mono.Math.BigInteger.ToString
::Il2CppString* Mono::Math::BigInteger::ToString() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "ToString"));
}
// Autogenerated method: Mono.Math.BigInteger.Equals
bool Mono::Math::BigInteger::Equals(::Il2CppObject* o) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Equals", o));
}
// Autogenerated method: Mono.Math.BigInteger.op_Subtraction
Mono::Math::BigInteger* Mono::Math::operator-(Mono::Math::BigInteger* bi1, Mono::Math::BigInteger& bi2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Math::BigInteger*>("Mono.Math", "BigInteger", "op_Subtraction", bi1, &bi2));
}
// Autogenerated method: Mono.Math.BigInteger.op_Modulus
uint Mono::Math::operator%(Mono::Math::BigInteger& bi, const uint& ui) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>("Mono.Math", "BigInteger", "op_Modulus", &bi, ui));
}
// Autogenerated method: Mono.Math.BigInteger.op_Modulus
Mono::Math::BigInteger* Mono::Math::operator%(Mono::Math::BigInteger* bi1, Mono::Math::BigInteger& bi2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Math::BigInteger*>("Mono.Math", "BigInteger", "op_Modulus", bi1, &bi2));
}
// Autogenerated method: Mono.Math.BigInteger.op_Division
Mono::Math::BigInteger* Mono::Math::operator/(Mono::Math::BigInteger* bi1, Mono::Math::BigInteger& bi2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Math::BigInteger*>("Mono.Math", "BigInteger", "op_Division", bi1, &bi2));
}
// Autogenerated method: Mono.Math.BigInteger.op_Multiply
Mono::Math::BigInteger* Mono::Math::operator*(Mono::Math::BigInteger* bi1, Mono::Math::BigInteger& bi2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Math::BigInteger*>("Mono.Math", "BigInteger", "op_Multiply", bi1, &bi2));
}
// Autogenerated method: Mono.Math.BigInteger.op_LeftShift
Mono::Math::BigInteger* Mono::Math::operator<<(Mono::Math::BigInteger& bi1, const int& shiftVal) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Math::BigInteger*>("Mono.Math", "BigInteger", "op_LeftShift", &bi1, shiftVal));
}
// Autogenerated method: Mono.Math.BigInteger.op_RightShift
Mono::Math::BigInteger* Mono::Math::operator>>(Mono::Math::BigInteger& bi1, const int& shiftVal) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Math::BigInteger*>("Mono.Math", "BigInteger", "op_RightShift", &bi1, shiftVal));
}
// Autogenerated method: Mono.Math.BigInteger.op_Equality
bool Mono::Math::operator ==(Mono::Math::BigInteger& bi1, const uint& ui) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Mono.Math", "BigInteger", "op_Equality", &bi1, ui));
}
// Autogenerated method: Mono.Math.BigInteger.op_Inequality
bool Mono::Math::operator !=(Mono::Math::BigInteger& bi1, const uint& ui) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Mono.Math", "BigInteger", "op_Inequality", &bi1, ui));
}
// Autogenerated method: Mono.Math.BigInteger.op_Equality
bool Mono::Math::operator ==(Mono::Math::BigInteger* bi1, Mono::Math::BigInteger& bi2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Mono.Math", "BigInteger", "op_Equality", bi1, &bi2));
}
// Autogenerated method: Mono.Math.BigInteger.op_Inequality
bool Mono::Math::operator !=(Mono::Math::BigInteger* bi1, Mono::Math::BigInteger& bi2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Mono.Math", "BigInteger", "op_Inequality", bi1, &bi2));
}
// Autogenerated method: Mono.Math.BigInteger.op_GreaterThan
bool Mono::Math::operator >(Mono::Math::BigInteger* bi1, Mono::Math::BigInteger& bi2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Mono.Math", "BigInteger", "op_GreaterThan", bi1, &bi2));
}
// Autogenerated method: Mono.Math.BigInteger.op_LessThan
bool Mono::Math::operator <(Mono::Math::BigInteger* bi1, Mono::Math::BigInteger& bi2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Mono.Math", "BigInteger", "op_LessThan", bi1, &bi2));
}
// Autogenerated method: Mono.Math.BigInteger.op_GreaterThanOrEqual
bool Mono::Math::operator >=(Mono::Math::BigInteger* bi1, Mono::Math::BigInteger& bi2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Mono.Math", "BigInteger", "op_GreaterThanOrEqual", bi1, &bi2));
}
// Autogenerated method: Mono.Math.BigInteger.op_LessThanOrEqual
bool Mono::Math::operator <=(Mono::Math::BigInteger* bi1, Mono::Math::BigInteger& bi2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Mono.Math", "BigInteger", "op_LessThanOrEqual", bi1, &bi2));
}
