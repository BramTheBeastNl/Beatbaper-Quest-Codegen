// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.Security.ChainValidationHelper
#include "Mono/Net/Security/ChainValidationHelper.hpp"
// Including type: Mono.Security.Interface.MonoTlsSettings
#include "Mono/Security/Interface/MonoTlsSettings.hpp"
// Including type: Mono.Security.Interface.MonoTlsProvider
#include "Mono/Security/Interface/MonoTlsProvider.hpp"
// Including type: System.Net.ServerCertValidationCallback
#include "System/Net/ServerCertValidationCallback.hpp"
// Including type: System.Net.Security.LocalCertSelectionCallback
#include "System/Net/Security/LocalCertSelectionCallback.hpp"
// Including type: Mono.Net.Security.ServerCertValidationCallbackWrapper
#include "Mono/Net/Security/ServerCertValidationCallbackWrapper.hpp"
// Including type: Mono.Net.Security.MonoTlsStream
#include "Mono/Net/Security/MonoTlsStream.hpp"
// Including type: System.Net.HttpWebRequest
#include "System/Net/HttpWebRequest.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Certificate
#include "System/Security/Cryptography/X509Certificates/X509Certificate.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
#include "System/Security/Cryptography/X509Certificates/X509CertificateCollection.hpp"
// Including type: Mono.Security.Interface.ValidationResult
#include "Mono/Security/Interface/ValidationResult.hpp"
// Including type: System.Security.Cryptography.X509Certificates.X509Chain
#include "System/Security/Cryptography/X509Certificates/X509Chain.hpp"
// Including type: System.Net.Security.SslPolicyErrors
#include "System/Net/Security/SslPolicyErrors.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.GetInternalValidator
Mono::Security::Interface::ICertificateValidator* Mono::Net::Security::ChainValidationHelper::GetInternalValidator(Mono::Security::Interface::MonoTlsProvider* provider, Mono::Security::Interface::MonoTlsSettings* settings) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Security::Interface::ICertificateValidator*>("Mono.Net.Security", "ChainValidationHelper", "GetInternalValidator", provider, settings));
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.Create
Mono::Net::Security::ChainValidationHelper* Mono::Net::Security::ChainValidationHelper::Create(Mono::Security::Interface::MonoTlsProvider* provider, Mono::Security::Interface::MonoTlsSettings*& settings, Mono::Net::Security::MonoTlsStream* stream) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Net::Security::ChainValidationHelper*>("Mono.Net.Security", "ChainValidationHelper", "Create", provider, settings, stream));
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper..ctor
Mono::Net::Security::ChainValidationHelper* Mono::Net::Security::ChainValidationHelper::New_ctor(Mono::Security::Interface::MonoTlsProvider* provider, Mono::Security::Interface::MonoTlsSettings* settings, bool cloneSettings, Mono::Net::Security::MonoTlsStream* stream, Mono::Net::Security::ServerCertValidationCallbackWrapper* callbackWrapper) {
  return THROW_UNLESS(il2cpp_utils::New<ChainValidationHelper*>(provider, settings, cloneSettings, stream, callbackWrapper));
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.DefaultSelectionCallback
System::Security::Cryptography::X509Certificates::X509Certificate* Mono::Net::Security::ChainValidationHelper::DefaultSelectionCallback(::Il2CppString* targetHost, System::Security::Cryptography::X509Certificates::X509CertificateCollection* localCertificates, System::Security::Cryptography::X509Certificates::X509Certificate* remoteCertificate, ::Array<::Il2CppString*>* acceptableIssuers) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Security::Cryptography::X509Certificates::X509Certificate*>("Mono.Net.Security", "ChainValidationHelper", "DefaultSelectionCallback", targetHost, localCertificates, remoteCertificate, acceptableIssuers));
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.ValidateChain
Mono::Security::Interface::ValidationResult* Mono::Net::Security::ChainValidationHelper::ValidateChain(::Il2CppString* host, bool server, System::Security::Cryptography::X509Certificates::X509Certificate* leaf, System::Security::Cryptography::X509Certificates::X509Chain* chain, System::Security::Cryptography::X509Certificates::X509CertificateCollection* certs, System::Net::Security::SslPolicyErrors errors) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Security::Interface::ValidationResult*>(this, "ValidateChain", host, server, leaf, chain, certs, errors));
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.ValidateChain
Mono::Security::Interface::ValidationResult* Mono::Net::Security::ChainValidationHelper::ValidateChain(::Il2CppString* host, bool server, System::Security::Cryptography::X509Certificates::X509Certificate* leaf, System::Security::Cryptography::X509Certificates::X509Chain*& chain, System::Security::Cryptography::X509Certificates::X509CertificateCollection* certs, System::Net::Security::SslPolicyErrors errors) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Security::Interface::ValidationResult*>(this, "ValidateChain", host, server, leaf, chain, certs, errors));
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.get_Settings
Mono::Security::Interface::MonoTlsSettings* Mono::Net::Security::ChainValidationHelper::get_Settings() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Security::Interface::MonoTlsSettings*>(this, "get_Settings"));
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.SelectClientCertificate
bool Mono::Net::Security::ChainValidationHelper::SelectClientCertificate(::Il2CppString* targetHost, System::Security::Cryptography::X509Certificates::X509CertificateCollection* localCertificates, System::Security::Cryptography::X509Certificates::X509Certificate* remoteCertificate, ::Array<::Il2CppString*>* acceptableIssuers, System::Security::Cryptography::X509Certificates::X509Certificate*& clientCertificate) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SelectClientCertificate", targetHost, localCertificates, remoteCertificate, acceptableIssuers, clientCertificate));
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.ValidateCertificate
Mono::Security::Interface::ValidationResult* Mono::Net::Security::ChainValidationHelper::ValidateCertificate(::Il2CppString* host, bool serverMode, System::Security::Cryptography::X509Certificates::X509CertificateCollection* certs) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Security::Interface::ValidationResult*>(this, "ValidateCertificate", host, serverMode, certs));
}
// Autogenerated method: Mono.Net.Security.ChainValidationHelper.ValidateCertificate
Mono::Security::Interface::ValidationResult* Mono::Net::Security::ChainValidationHelper::ValidateCertificate(::Il2CppString* host, bool serverMode, System::Security::Cryptography::X509Certificates::X509Certificate* leaf, System::Security::Cryptography::X509Certificates::X509Chain* chain) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Mono::Security::Interface::ValidationResult*>(this, "ValidateCertificate", host, serverMode, leaf, chain));
}
