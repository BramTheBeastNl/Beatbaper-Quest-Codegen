// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LevelBar
#include "GlobalNamespace/LevelBar.hpp"
// Including type: LevelBar/<Setup>d__12
#include "GlobalNamespace/LevelBar_-Setup-d__12.hpp"
// Including type: HMUI.ImageView
#include "HMUI/ImageView.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LevelBar.set_hide
void GlobalNamespace::LevelBar::set_hide(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelBar::set_hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelBar.Setup
void GlobalNamespace::LevelBar::Setup(GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelBar::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previewBeatmapLevel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, previewBeatmapLevel);
}
// Autogenerated method: LevelBar.Setup
void GlobalNamespace::LevelBar::Setup(GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, GlobalNamespace::BeatmapDifficulty beatmapDifficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelBar::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previewBeatmapLevel), ::il2cpp_utils::ExtractType(beatmapCharacteristic), ::il2cpp_utils::ExtractType(beatmapDifficulty)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, previewBeatmapLevel, beatmapCharacteristic, beatmapDifficulty);
}
// Autogenerated method: LevelBar.OnDestroy
void GlobalNamespace::LevelBar::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelBar::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LevelBar::set_hide
// Il2CppName: set_hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelBar::*)(bool)>(&LevelBar::set_hide)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelBar*), "set_hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelBar::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelBar::*)(GlobalNamespace::IPreviewBeatmapLevel*)>(&LevelBar::Setup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelBar*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>()});
  }
};
// Writing MetadataGetter for method: LevelBar::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelBar::*)(GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::BeatmapDifficulty)>(&LevelBar::Setup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelBar*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>()});
  }
};
// Writing MetadataGetter for method: LevelBar::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelBar::*)()>(&LevelBar::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelBar*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelBar::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelBar::*)()>(&LevelBar::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelBar*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelBar::*)()>(&LevelBar::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelBar*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LevelBar/<Setup>d__12
#include "GlobalNamespace/LevelBar_-Setup-d__12.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LevelBar/<Setup>d__12.MoveNext
void GlobalNamespace::LevelBar::$Setup$d__12::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelBar::$Setup$d__12::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: LevelBar/<Setup>d__12.SetStateMachine
void GlobalNamespace::LevelBar::$Setup$d__12::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelBar::$Setup$d__12::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: LevelBar::$Setup$d__12::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelBar::$Setup$d__12::*)()>(&LevelBar::$Setup$d__12::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelBar::$Setup$d__12), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelBar::$Setup$d__12::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelBar::$Setup$d__12::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&LevelBar::$Setup$d__12::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelBar::$Setup$d__12), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LevelCollectionTableView
#include "GlobalNamespace/LevelCollectionTableView.hpp"
// Including type: HMUI.TableView
#include "HMUI/TableView.hpp"
// Including type: HMUI.AlphabetScrollbar
#include "HMUI/AlphabetScrollbar.hpp"
// Including type: LevelListTableCell
#include "GlobalNamespace/LevelListTableCell.hpp"
// Including type: LevelPackHeaderTableCell
#include "GlobalNamespace/LevelPackHeaderTableCell.hpp"
// Including type: AdditionalContentModel
#include "GlobalNamespace/AdditionalContentModel.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LevelCollectionTableView.add_didSelectLevelEvent
void GlobalNamespace::LevelCollectionTableView::add_didSelectLevelEvent(System::Action_2<GlobalNamespace::LevelCollectionTableView*, GlobalNamespace::IPreviewBeatmapLevel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::add_didSelectLevelEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelCollectionTableView.remove_didSelectLevelEvent
void GlobalNamespace::LevelCollectionTableView::remove_didSelectLevelEvent(System::Action_2<GlobalNamespace::LevelCollectionTableView*, GlobalNamespace::IPreviewBeatmapLevel*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::remove_didSelectLevelEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelCollectionTableView.add_didSelectHeaderEvent
void GlobalNamespace::LevelCollectionTableView::add_didSelectHeaderEvent(System::Action_1<GlobalNamespace::LevelCollectionTableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::add_didSelectHeaderEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectHeaderEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelCollectionTableView.remove_didSelectHeaderEvent
void GlobalNamespace::LevelCollectionTableView::remove_didSelectHeaderEvent(System::Action_1<GlobalNamespace::LevelCollectionTableView*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::remove_didSelectHeaderEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectHeaderEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelCollectionTableView.Init
void GlobalNamespace::LevelCollectionTableView::Init(::Il2CppString* headerText, UnityEngine::Sprite* headerSprite) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headerText), ::il2cpp_utils::ExtractType(headerSprite)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, headerText, headerSprite);
}
// Autogenerated method: LevelCollectionTableView.Init
void GlobalNamespace::LevelCollectionTableView::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelCollectionTableView.SetData
void GlobalNamespace::LevelCollectionTableView::SetData(::Array<GlobalNamespace::IPreviewBeatmapLevel*>* previewBeatmapLevels, System::Collections::Generic::HashSet_1<::Il2CppString*>* favoriteLevelIds, bool beatmapLevelsAreSorted) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previewBeatmapLevels), ::il2cpp_utils::ExtractType(favoriteLevelIds), ::il2cpp_utils::ExtractType(beatmapLevelsAreSorted)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, previewBeatmapLevels, favoriteLevelIds, beatmapLevelsAreSorted);
}
// Autogenerated method: LevelCollectionTableView.RefreshFavorites
void GlobalNamespace::LevelCollectionTableView::RefreshFavorites(System::Collections::Generic::HashSet_1<::Il2CppString*>* favoriteLevelIds) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::RefreshFavorites");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshFavorites", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(favoriteLevelIds)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, favoriteLevelIds);
}
// Autogenerated method: LevelCollectionTableView.OnEnable
void GlobalNamespace::LevelCollectionTableView::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelCollectionTableView.OnDisable
void GlobalNamespace::LevelCollectionTableView::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelCollectionTableView.OnDestroy
void GlobalNamespace::LevelCollectionTableView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelCollectionTableView.CellSize
float GlobalNamespace::LevelCollectionTableView::CellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::CellSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LevelCollectionTableView.NumberOfCells
int GlobalNamespace::LevelCollectionTableView::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LevelCollectionTableView.CellForIdx
HMUI::TableCell* GlobalNamespace::LevelCollectionTableView::CellForIdx(HMUI::TableView* tableView, int row) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::CellForIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableView), ::il2cpp_utils::ExtractType(row)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, tableView, row);
}
// Autogenerated method: LevelCollectionTableView.HandleDidSelectRowEvent
void GlobalNamespace::LevelCollectionTableView::HandleDidSelectRowEvent(HMUI::TableView* tableView, int row) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::HandleDidSelectRowEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidSelectRowEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableView), ::il2cpp_utils::ExtractType(row)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tableView, row);
}
// Autogenerated method: LevelCollectionTableView.HandleAdditionalContentModelDidInvalidateData
void GlobalNamespace::LevelCollectionTableView::HandleAdditionalContentModelDidInvalidateData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::HandleAdditionalContentModelDidInvalidateData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleAdditionalContentModelDidInvalidateData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelCollectionTableView.CancelAsyncOperations
void GlobalNamespace::LevelCollectionTableView::CancelAsyncOperations() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::CancelAsyncOperations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelAsyncOperations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelCollectionTableView.RefreshLevelsAvailability
void GlobalNamespace::LevelCollectionTableView::RefreshLevelsAvailability() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::RefreshLevelsAvailability");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshLevelsAvailability", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelCollectionTableView.SelectLevelPackHeaderCell
void GlobalNamespace::LevelCollectionTableView::SelectLevelPackHeaderCell() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::SelectLevelPackHeaderCell");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectLevelPackHeaderCell", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelCollectionTableView.ClearSelection
void GlobalNamespace::LevelCollectionTableView::ClearSelection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::ClearSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelCollectionTableView.SelectLevel
void GlobalNamespace::LevelCollectionTableView::SelectLevel(GlobalNamespace::IPreviewBeatmapLevel* beatmapLevel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelCollectionTableView::SelectLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapLevel);
}
// Writing MetadataGetter for method: LevelCollectionTableView::add_didSelectLevelEvent
// Il2CppName: add_didSelectLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)(System::Action_2<GlobalNamespace::LevelCollectionTableView*, GlobalNamespace::IPreviewBeatmapLevel*>*)>(&LevelCollectionTableView::add_didSelectLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "add_didSelectLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::LevelCollectionTableView*, GlobalNamespace::IPreviewBeatmapLevel*>*>()});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::remove_didSelectLevelEvent
// Il2CppName: remove_didSelectLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)(System::Action_2<GlobalNamespace::LevelCollectionTableView*, GlobalNamespace::IPreviewBeatmapLevel*>*)>(&LevelCollectionTableView::remove_didSelectLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "remove_didSelectLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::LevelCollectionTableView*, GlobalNamespace::IPreviewBeatmapLevel*>*>()});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::add_didSelectHeaderEvent
// Il2CppName: add_didSelectHeaderEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)(System::Action_1<GlobalNamespace::LevelCollectionTableView*>*)>(&LevelCollectionTableView::add_didSelectHeaderEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "add_didSelectHeaderEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::LevelCollectionTableView*>*>()});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::remove_didSelectHeaderEvent
// Il2CppName: remove_didSelectHeaderEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)(System::Action_1<GlobalNamespace::LevelCollectionTableView*>*)>(&LevelCollectionTableView::remove_didSelectHeaderEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "remove_didSelectHeaderEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::LevelCollectionTableView*>*>()});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)(::Il2CppString*, UnityEngine::Sprite*)>(&LevelCollectionTableView::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Sprite*>()});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)()>(&LevelCollectionTableView::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)(::Array<GlobalNamespace::IPreviewBeatmapLevel*>*, System::Collections::Generic::HashSet_1<::Il2CppString*>*, bool)>(&LevelCollectionTableView::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::IPreviewBeatmapLevel*>*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::RefreshFavorites
// Il2CppName: RefreshFavorites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)(System::Collections::Generic::HashSet_1<::Il2CppString*>*)>(&LevelCollectionTableView::RefreshFavorites)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "RefreshFavorites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)()>(&LevelCollectionTableView::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)()>(&LevelCollectionTableView::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)()>(&LevelCollectionTableView::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::CellSize
// Il2CppName: CellSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (LevelCollectionTableView::*)()>(&LevelCollectionTableView::CellSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "CellSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::NumberOfCells
// Il2CppName: NumberOfCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LevelCollectionTableView::*)()>(&LevelCollectionTableView::NumberOfCells)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "NumberOfCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::CellForIdx
// Il2CppName: CellForIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::TableCell* (LevelCollectionTableView::*)(HMUI::TableView*, int)>(&LevelCollectionTableView::CellForIdx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "CellForIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::TableView*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::HandleDidSelectRowEvent
// Il2CppName: HandleDidSelectRowEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)(HMUI::TableView*, int)>(&LevelCollectionTableView::HandleDidSelectRowEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "HandleDidSelectRowEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::TableView*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::HandleAdditionalContentModelDidInvalidateData
// Il2CppName: HandleAdditionalContentModelDidInvalidateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)()>(&LevelCollectionTableView::HandleAdditionalContentModelDidInvalidateData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "HandleAdditionalContentModelDidInvalidateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::CancelAsyncOperations
// Il2CppName: CancelAsyncOperations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)()>(&LevelCollectionTableView::CancelAsyncOperations)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "CancelAsyncOperations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::RefreshLevelsAvailability
// Il2CppName: RefreshLevelsAvailability
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)()>(&LevelCollectionTableView::RefreshLevelsAvailability)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "RefreshLevelsAvailability", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::SelectLevelPackHeaderCell
// Il2CppName: SelectLevelPackHeaderCell
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)()>(&LevelCollectionTableView::SelectLevelPackHeaderCell)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "SelectLevelPackHeaderCell", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::ClearSelection
// Il2CppName: ClearSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)()>(&LevelCollectionTableView::ClearSelection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "ClearSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::SelectLevel
// Il2CppName: SelectLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)(GlobalNamespace::IPreviewBeatmapLevel*)>(&LevelCollectionTableView::SelectLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), "SelectLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>()});
  }
};
// Writing MetadataGetter for method: LevelCollectionTableView::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)()>(&LevelCollectionTableView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelCollectionTableView::*)()>(&LevelCollectionTableView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelCollectionTableView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LevelParamsPanel
#include "GlobalNamespace/LevelParamsPanel.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LevelParamsPanel.set_notesPerSecond
void GlobalNamespace::LevelParamsPanel::set_notesPerSecond(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelParamsPanel::set_notesPerSecond");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_notesPerSecond", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelParamsPanel.set_notesCount
void GlobalNamespace::LevelParamsPanel::set_notesCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelParamsPanel::set_notesCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_notesCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelParamsPanel.set_obstaclesCount
void GlobalNamespace::LevelParamsPanel::set_obstaclesCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelParamsPanel::set_obstaclesCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_obstaclesCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LevelParamsPanel.set_bombsCount
void GlobalNamespace::LevelParamsPanel::set_bombsCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelParamsPanel::set_bombsCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_bombsCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: LevelParamsPanel::set_notesPerSecond
// Il2CppName: set_notesPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelParamsPanel::*)(float)>(&LevelParamsPanel::set_notesPerSecond)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelParamsPanel*), "set_notesPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LevelParamsPanel::set_notesCount
// Il2CppName: set_notesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelParamsPanel::*)(int)>(&LevelParamsPanel::set_notesCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelParamsPanel*), "set_notesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LevelParamsPanel::set_obstaclesCount
// Il2CppName: set_obstaclesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelParamsPanel::*)(int)>(&LevelParamsPanel::set_obstaclesCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelParamsPanel*), "set_obstaclesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LevelParamsPanel::set_bombsCount
// Il2CppName: set_bombsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelParamsPanel::*)(int)>(&LevelParamsPanel::set_bombsCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelParamsPanel*), "set_bombsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LevelParamsPanel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelParamsPanel::*)()>(&LevelParamsPanel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelParamsPanel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelParamsPanel::*)()>(&LevelParamsPanel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelParamsPanel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LevelStatsView
#include "GlobalNamespace/LevelStatsView.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: PlayerData
#include "GlobalNamespace/PlayerData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LevelStatsView.Hide
void GlobalNamespace::LevelStatsView::Hide() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelStatsView::Hide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Hide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelStatsView.ShowStats
void GlobalNamespace::LevelStatsView::ShowStats(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::PlayerData* playerData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelStatsView::ShowStats");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowStats", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(playerData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, difficultyBeatmap, playerData);
}
// Writing MetadataGetter for method: LevelStatsView::Hide
// Il2CppName: Hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelStatsView::*)()>(&LevelStatsView::Hide)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelStatsView*), "Hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelStatsView::ShowStats
// Il2CppName: ShowStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelStatsView::*)(GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::PlayerData*)>(&LevelStatsView::ShowStats)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelStatsView*), "ShowStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerData*>()});
  }
};
// Writing MetadataGetter for method: LevelStatsView::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelStatsView::*)()>(&LevelStatsView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelStatsView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelStatsView::*)()>(&LevelStatsView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelStatsView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LocalLeaderboardTableView
#include "GlobalNamespace/LocalLeaderboardTableView.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: LocalLeaderboardsModel/ScoreData
#include "GlobalNamespace/LocalLeaderboardsModel_ScoreData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalLeaderboardTableView.SetScores
void GlobalNamespace::LocalLeaderboardTableView::SetScores(System::Collections::Generic::List_1<GlobalNamespace::LocalLeaderboardsModel::ScoreData*>* scores, int specialScorePos, int maxNumberOfCells) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalLeaderboardTableView::SetScores");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetScores", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scores), ::il2cpp_utils::ExtractType(specialScorePos), ::il2cpp_utils::ExtractType(maxNumberOfCells)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scores, specialScorePos, maxNumberOfCells);
}
// Writing MetadataGetter for method: LocalLeaderboardTableView::SetScores
// Il2CppName: SetScores
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalLeaderboardTableView::*)(System::Collections::Generic::List_1<GlobalNamespace::LocalLeaderboardsModel::ScoreData*>*, int, int)>(&LocalLeaderboardTableView::SetScores)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalLeaderboardTableView*), "SetScores", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<GlobalNamespace::LocalLeaderboardsModel::ScoreData*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LocalLeaderboardTableView::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalLeaderboardTableView::*)()>(&LocalLeaderboardTableView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalLeaderboardTableView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalLeaderboardTableView::*)()>(&LocalLeaderboardTableView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalLeaderboardTableView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModifiersSelectionView
#include "GlobalNamespace/ModifiersSelectionView.hpp"
// Including type: ModifiersSelectionView/<>c__DisplayClass3_0
#include "GlobalNamespace/ModifiersSelectionView_--c__DisplayClass3_0.hpp"
// Including type: GameplayModifierInfoListItemsList
#include "GlobalNamespace/GameplayModifierInfoListItemsList.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: GameplayModifiersModelSO
#include "GlobalNamespace/GameplayModifiersModelSO.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModifiersSelectionView.SetGameplayModifiers
void GlobalNamespace::ModifiersSelectionView::SetGameplayModifiers(GlobalNamespace::GameplayModifiers* gameplayModifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ModifiersSelectionView::SetGameplayModifiers");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameplayModifiers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, gameplayModifiers);
}
// Writing MetadataGetter for method: ModifiersSelectionView::SetGameplayModifiers
// Il2CppName: SetGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ModifiersSelectionView::*)(GlobalNamespace::GameplayModifiers*)>(&ModifiersSelectionView::SetGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ModifiersSelectionView*), "SetGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>()});
  }
};
// Writing MetadataGetter for method: ModifiersSelectionView::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ModifiersSelectionView::*)()>(&ModifiersSelectionView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ModifiersSelectionView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ModifiersSelectionView::*)()>(&ModifiersSelectionView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ModifiersSelectionView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ModifiersSelectionView/<>c__DisplayClass3_0
#include "GlobalNamespace/ModifiersSelectionView_--c__DisplayClass3_0.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: GameplayModifierParamsSO
#include "GlobalNamespace/GameplayModifierParamsSO.hpp"
// Including type: GameplayModifierInfoListItem
#include "GlobalNamespace/GameplayModifierInfoListItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ModifiersSelectionView/<>c__DisplayClass3_0.<SetGameplayModifiers>b__0
void GlobalNamespace::ModifiersSelectionView::$$c__DisplayClass3_0::$SetGameplayModifiers$b__0(int idx, GlobalNamespace::GameplayModifierInfoListItem* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ModifiersSelectionView::$$c__DisplayClass3_0::<SetGameplayModifiers>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SetGameplayModifiers>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(idx), ::il2cpp_utils::ExtractType(item)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, idx, item);
}
// Writing MetadataGetter for method: ModifiersSelectionView::$$c__DisplayClass3_0::$SetGameplayModifiers$b__0
// Il2CppName: <SetGameplayModifiers>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ModifiersSelectionView::$$c__DisplayClass3_0::*)(int, GlobalNamespace::GameplayModifierInfoListItem*)>(&ModifiersSelectionView::$$c__DisplayClass3_0::$SetGameplayModifiers$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ModifiersSelectionView::$$c__DisplayClass3_0*), "<SetGameplayModifiers>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifierInfoListItem*>()});
  }
};
// Writing MetadataGetter for method: ModifiersSelectionView::$$c__DisplayClass3_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ModifiersSelectionView::$$c__DisplayClass3_0::*)()>(&ModifiersSelectionView::$$c__DisplayClass3_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ModifiersSelectionView::$$c__DisplayClass3_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ModifiersSelectionView::$$c__DisplayClass3_0::*)()>(&ModifiersSelectionView::$$c__DisplayClass3_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ModifiersSelectionView::$$c__DisplayClass3_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerResultsTableCell
#include "GlobalNamespace/MultiplayerResultsTableCell.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: TubeBloomPrePassLight
#include "GlobalNamespace/TubeBloomPrePassLight.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.CanvasGroup
#include "UnityEngine/CanvasGroup.hpp"
// Including type: MultiplayerResultsAvatarController
#include "GlobalNamespace/MultiplayerResultsAvatarController.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerResultsTableCell.set_alpha
void GlobalNamespace::MultiplayerResultsTableCell::set_alpha(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableCell::set_alpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_alpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerResultsTableCell.SetData
void GlobalNamespace::MultiplayerResultsTableCell::SetData(GlobalNamespace::IConnectedPlayer* connectedPlayer, int position, ::Il2CppString* playerName, GlobalNamespace::LevelCompletionResults* levelCompletionResults, bool isLocalPlayer, int numberOfPlayers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableCell::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(playerName), ::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(isLocalPlayer), ::il2cpp_utils::ExtractType(numberOfPlayers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer, position, playerName, levelCompletionResults, isLocalPlayer, numberOfPlayers);
}
// Writing MetadataGetter for method: MultiplayerResultsTableCell::set_alpha
// Il2CppName: set_alpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableCell::*)(float)>(&MultiplayerResultsTableCell::set_alpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableCell*), "set_alpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableCell::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableCell::*)(GlobalNamespace::IConnectedPlayer*, int, ::Il2CppString*, GlobalNamespace::LevelCompletionResults*, bool, int)>(&MultiplayerResultsTableCell::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableCell*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableCell::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableCell::*)()>(&MultiplayerResultsTableCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableCell::*)()>(&MultiplayerResultsTableCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerResultsTableView
#include "GlobalNamespace/MultiplayerResultsTableView.hpp"
// Including type: MultiplayerResultsTableView/<>c__DisplayClass30_0
#include "GlobalNamespace/MultiplayerResultsTableView_--c__DisplayClass30_0.hpp"
// Including type: MultiplayerResultsTableView/<>c__DisplayClass30_1
#include "GlobalNamespace/MultiplayerResultsTableView_--c__DisplayClass30_1.hpp"
// Including type: MultiplayerResultsTableView/<PlayRandomRowSlideInSound>d__31
#include "GlobalNamespace/MultiplayerResultsTableView_-PlayRandomRowSlideInSound-d__31.hpp"
// Including type: MultiplayerResultsTableView/<PlayAvatarSlideInSound>d__32
#include "GlobalNamespace/MultiplayerResultsTableView_-PlayAvatarSlideInSound-d__32.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: MultiplayerResultsTableCell
#include "GlobalNamespace/MultiplayerResultsTableCell.hpp"
// Including type: MultiplayerOffsetPositionByLocalPlayerPosition
#include "GlobalNamespace/MultiplayerOffsetPositionByLocalPlayerPosition.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: Tweening.TweeningManager
#include "Tweening/TweeningManager.hpp"
// Including type: MultiplayerLayoutProvider
#include "GlobalNamespace/MultiplayerLayoutProvider.hpp"
// Including type: Zenject.DiContainer
#include "Zenject/DiContainer.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kCellIdentifier
::Il2CppString* GlobalNamespace::MultiplayerResultsTableView::_get_kCellIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::_get_kCellIdentifier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MultiplayerResultsTableView", "kCellIdentifier"));
}
// Autogenerated static field setter
// Set static field: static private System.String kCellIdentifier
void GlobalNamespace::MultiplayerResultsTableView::_set_kCellIdentifier(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::_set_kCellIdentifier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MultiplayerResultsTableView", "kCellIdentifier", value));
}
// Autogenerated method: MultiplayerResultsTableView.CellSize
float GlobalNamespace::MultiplayerResultsTableView::CellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::CellSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsTableView.NumberOfCells
int GlobalNamespace::MultiplayerResultsTableView::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsTableView.Awake
void GlobalNamespace::MultiplayerResultsTableView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsTableView.OnDestroy
void GlobalNamespace::MultiplayerResultsTableView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsTableView.CellForIdx
HMUI::TableCell* GlobalNamespace::MultiplayerResultsTableView::CellForIdx(HMUI::TableView* tableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::CellForIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableView), ::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, tableView, idx);
}
// Autogenerated method: MultiplayerResultsTableView.SetData
void GlobalNamespace::MultiplayerResultsTableView::SetData(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>* dataList) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataList)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dataList);
}
// Autogenerated method: MultiplayerResultsTableView.StartAnimation
float GlobalNamespace::MultiplayerResultsTableView::StartAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::StartAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsTableView.PlayRandomRowSlideInSound
System::Collections::IEnumerator* GlobalNamespace::MultiplayerResultsTableView::PlayRandomRowSlideInSound(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::PlayRandomRowSlideInSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayRandomRowSlideInSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, delay);
}
// Autogenerated method: MultiplayerResultsTableView.PlayAvatarSlideInSound
System::Collections::IEnumerator* GlobalNamespace::MultiplayerResultsTableView::PlayAvatarSlideInSound(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::PlayAvatarSlideInSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayAvatarSlideInSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, delay);
}
// Autogenerated method: MultiplayerResultsTableView.<StartAnimation>b__30_1
void GlobalNamespace::MultiplayerResultsTableView::$StartAnimation$b__30_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::<StartAnimation>b__30_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartAnimation>b__30_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsTableView.<StartAnimation>b__30_4
void GlobalNamespace::MultiplayerResultsTableView::$StartAnimation$b__30_4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::<StartAnimation>b__30_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartAnimation>b__30_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsTableView.<StartAnimation>b__30_5
void GlobalNamespace::MultiplayerResultsTableView::$StartAnimation$b__30_5(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::<StartAnimation>b__30_5");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartAnimation>b__30_5", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Writing MetadataGetter for method: MultiplayerResultsTableView::CellSize
// Il2CppName: CellSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MultiplayerResultsTableView::*)()>(&MultiplayerResultsTableView::CellSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView*), "CellSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::NumberOfCells
// Il2CppName: NumberOfCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MultiplayerResultsTableView::*)()>(&MultiplayerResultsTableView::NumberOfCells)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView*), "NumberOfCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::*)()>(&MultiplayerResultsTableView::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::*)()>(&MultiplayerResultsTableView::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::CellForIdx
// Il2CppName: CellForIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::TableCell* (MultiplayerResultsTableView::*)(HMUI::TableView*, int)>(&MultiplayerResultsTableView::CellForIdx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView*), "CellForIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::TableView*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::*)(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>*)>(&MultiplayerResultsTableView::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::StartAnimation
// Il2CppName: StartAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MultiplayerResultsTableView::*)()>(&MultiplayerResultsTableView::StartAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView*), "StartAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::PlayRandomRowSlideInSound
// Il2CppName: PlayRandomRowSlideInSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MultiplayerResultsTableView::*)(float)>(&MultiplayerResultsTableView::PlayRandomRowSlideInSound)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView*), "PlayRandomRowSlideInSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::PlayAvatarSlideInSound
// Il2CppName: PlayAvatarSlideInSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MultiplayerResultsTableView::*)(float)>(&MultiplayerResultsTableView::PlayAvatarSlideInSound)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView*), "PlayAvatarSlideInSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$StartAnimation$b__30_1
// Il2CppName: <StartAnimation>b__30_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::*)()>(&MultiplayerResultsTableView::$StartAnimation$b__30_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView*), "<StartAnimation>b__30_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$StartAnimation$b__30_4
// Il2CppName: <StartAnimation>b__30_4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::*)()>(&MultiplayerResultsTableView::$StartAnimation$b__30_4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView*), "<StartAnimation>b__30_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$StartAnimation$b__30_5
// Il2CppName: <StartAnimation>b__30_5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::*)(float)>(&MultiplayerResultsTableView::$StartAnimation$b__30_5)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView*), "<StartAnimation>b__30_5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::*)()>(&MultiplayerResultsTableView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::*)()>(&MultiplayerResultsTableView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerResultsTableView/<>c__DisplayClass30_0
#include "GlobalNamespace/MultiplayerResultsTableView_--c__DisplayClass30_0.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: MultiplayerResultsTableCell
#include "GlobalNamespace/MultiplayerResultsTableCell.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerResultsTableView/<>c__DisplayClass30_0.<StartAnimation>b__0
void GlobalNamespace::MultiplayerResultsTableView::$$c__DisplayClass30_0::$StartAnimation$b__0(UnityEngine::Vector2 val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::$$c__DisplayClass30_0::<StartAnimation>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartAnimation>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: MultiplayerResultsTableView/<>c__DisplayClass30_0.<StartAnimation>b__2
void GlobalNamespace::MultiplayerResultsTableView::$$c__DisplayClass30_0::$StartAnimation$b__2(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::$$c__DisplayClass30_0::<StartAnimation>b__2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartAnimation>b__2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Writing MetadataGetter for method: MultiplayerResultsTableView::$$c__DisplayClass30_0::$StartAnimation$b__0
// Il2CppName: <StartAnimation>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::$$c__DisplayClass30_0::*)(UnityEngine::Vector2)>(&MultiplayerResultsTableView::$$c__DisplayClass30_0::$StartAnimation$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$$c__DisplayClass30_0*), "<StartAnimation>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$$c__DisplayClass30_0::$StartAnimation$b__2
// Il2CppName: <StartAnimation>b__2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::$$c__DisplayClass30_0::*)(float)>(&MultiplayerResultsTableView::$$c__DisplayClass30_0::$StartAnimation$b__2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$$c__DisplayClass30_0*), "<StartAnimation>b__2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$$c__DisplayClass30_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::$$c__DisplayClass30_0::*)()>(&MultiplayerResultsTableView::$$c__DisplayClass30_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$$c__DisplayClass30_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::$$c__DisplayClass30_0::*)()>(&MultiplayerResultsTableView::$$c__DisplayClass30_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$$c__DisplayClass30_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerResultsTableView/<>c__DisplayClass30_1
#include "GlobalNamespace/MultiplayerResultsTableView_--c__DisplayClass30_1.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerResultsTableView/<>c__DisplayClass30_1.<StartAnimation>b__3
void GlobalNamespace::MultiplayerResultsTableView::$$c__DisplayClass30_1::$StartAnimation$b__3(UnityEngine::Vector2 val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::$$c__DisplayClass30_1::<StartAnimation>b__3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartAnimation>b__3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Writing MetadataGetter for method: MultiplayerResultsTableView::$$c__DisplayClass30_1::$StartAnimation$b__3
// Il2CppName: <StartAnimation>b__3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::$$c__DisplayClass30_1::*)(UnityEngine::Vector2)>(&MultiplayerResultsTableView::$$c__DisplayClass30_1::$StartAnimation$b__3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$$c__DisplayClass30_1*), "<StartAnimation>b__3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$$c__DisplayClass30_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::$$c__DisplayClass30_1::*)()>(&MultiplayerResultsTableView::$$c__DisplayClass30_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$$c__DisplayClass30_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::$$c__DisplayClass30_1::*)()>(&MultiplayerResultsTableView::$$c__DisplayClass30_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$$c__DisplayClass30_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerResultsTableView/<PlayRandomRowSlideInSound>d__31
#include "GlobalNamespace/MultiplayerResultsTableView_-PlayRandomRowSlideInSound-d__31.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerResultsTableView/<PlayRandomRowSlideInSound>d__31.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsTableView/<PlayRandomRowSlideInSound>d__31.MoveNext
bool GlobalNamespace::MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsTableView/<PlayRandomRowSlideInSound>d__31.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsTableView/<PlayRandomRowSlideInSound>d__31.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsTableView/<PlayRandomRowSlideInSound>d__31.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::*)(int)>(&MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::*)(int)>(&MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::*)()>(&MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::*)()>(&MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::*)()>(&MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::*)()>(&MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::*)()>(&MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$PlayRandomRowSlideInSound$d__31*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerResultsTableView/<PlayAvatarSlideInSound>d__32
#include "GlobalNamespace/MultiplayerResultsTableView_-PlayAvatarSlideInSound-d__32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerResultsTableView/<PlayAvatarSlideInSound>d__32.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsTableView/<PlayAvatarSlideInSound>d__32.MoveNext
bool GlobalNamespace::MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsTableView/<PlayAvatarSlideInSound>d__32.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsTableView/<PlayAvatarSlideInSound>d__32.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerResultsTableView/<PlayAvatarSlideInSound>d__32.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::*)(int)>(&MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::*)(int)>(&MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::*)()>(&MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::*)()>(&MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::*)()>(&MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::*)()>(&MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::*)()>(&MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerResultsTableView::$PlayAvatarSlideInSound$d__32*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MusicPackPromoBanner
#include "GlobalNamespace/MusicPackPromoBanner.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: DlcPromoExperimentDataSO/MusicPackPromoInfo
#include "GlobalNamespace/DlcPromoExperimentDataSO_MusicPackPromoInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [LocalizationKeyAttribute] Offset: 0xE277BC
// Autogenerated static field getter
// Get static field: static private System.String kPlayNow
::Il2CppString* GlobalNamespace::MusicPackPromoBanner::_get_kPlayNow() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MusicPackPromoBanner::_get_kPlayNow");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MusicPackPromoBanner", "kPlayNow"));
}
// Autogenerated static field setter
// Set static field: static private System.String kPlayNow
void GlobalNamespace::MusicPackPromoBanner::_set_kPlayNow(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MusicPackPromoBanner::_set_kPlayNow");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MusicPackPromoBanner", "kPlayNow", value));
}
// [LocalizationKeyAttribute] Offset: 0xE277CC
// Autogenerated static field getter
// Get static field: static private System.String kGetNow
::Il2CppString* GlobalNamespace::MusicPackPromoBanner::_get_kGetNow() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MusicPackPromoBanner::_get_kGetNow");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "MusicPackPromoBanner", "kGetNow"));
}
// Autogenerated static field setter
// Set static field: static private System.String kGetNow
void GlobalNamespace::MusicPackPromoBanner::_set_kGetNow(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MusicPackPromoBanner::_set_kGetNow");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MusicPackPromoBanner", "kGetNow", value));
}
// Autogenerated method: MusicPackPromoBanner.get_currentPromoMusicPack
GlobalNamespace::IBeatmapLevelPack* GlobalNamespace::MusicPackPromoBanner::get_currentPromoMusicPack() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MusicPackPromoBanner::get_currentPromoMusicPack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentPromoMusicPack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IBeatmapLevelPack*, false>(this, ___internal__method);
}
// Autogenerated method: MusicPackPromoBanner.get_promoButtonText
::Il2CppString* GlobalNamespace::MusicPackPromoBanner::get_promoButtonText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MusicPackPromoBanner::get_promoButtonText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_promoButtonText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MusicPackPromoBanner.Setup
void GlobalNamespace::MusicPackPromoBanner::Setup(GlobalNamespace::DlcPromoExperimentDataSO::MusicPackPromoInfo* musicPackPromoData, bool probablyOwned) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MusicPackPromoBanner::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(musicPackPromoData), ::il2cpp_utils::ExtractType(probablyOwned)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, musicPackPromoData, probablyOwned);
}
// Writing MetadataGetter for method: MusicPackPromoBanner::get_currentPromoMusicPack
// Il2CppName: get_currentPromoMusicPack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IBeatmapLevelPack* (MusicPackPromoBanner::*)()>(&MusicPackPromoBanner::get_currentPromoMusicPack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MusicPackPromoBanner*), "get_currentPromoMusicPack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MusicPackPromoBanner::get_promoButtonText
// Il2CppName: get_promoButtonText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MusicPackPromoBanner::*)()>(&MusicPackPromoBanner::get_promoButtonText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MusicPackPromoBanner*), "get_promoButtonText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MusicPackPromoBanner::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MusicPackPromoBanner::*)(GlobalNamespace::DlcPromoExperimentDataSO::MusicPackPromoInfo*, bool)>(&MusicPackPromoBanner::Setup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MusicPackPromoBanner*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DlcPromoExperimentDataSO::MusicPackPromoInfo*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MusicPackPromoBanner::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MusicPackPromoBanner::*)()>(&MusicPackPromoBanner::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MusicPackPromoBanner*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MusicPackPromoBanner::*)()>(&MusicPackPromoBanner::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MusicPackPromoBanner*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ObjectiveListItem
#include "GlobalNamespace/ObjectiveListItem.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ObjectiveListItem.set_title
void GlobalNamespace::ObjectiveListItem::set_title(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObjectiveListItem::set_title");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_title", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObjectiveListItem.set_conditionText
void GlobalNamespace::ObjectiveListItem::set_conditionText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObjectiveListItem::set_conditionText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_conditionText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ObjectiveListItem.set_hideCondition
void GlobalNamespace::ObjectiveListItem::set_hideCondition(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObjectiveListItem::set_hideCondition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hideCondition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: ObjectiveListItem::set_title
// Il2CppName: set_title
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObjectiveListItem::*)(::Il2CppString*)>(&ObjectiveListItem::set_title)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObjectiveListItem*), "set_title", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ObjectiveListItem::set_conditionText
// Il2CppName: set_conditionText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObjectiveListItem::*)(::Il2CppString*)>(&ObjectiveListItem::set_conditionText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObjectiveListItem*), "set_conditionText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ObjectiveListItem::set_hideCondition
// Il2CppName: set_hideCondition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObjectiveListItem::*)(bool)>(&ObjectiveListItem::set_hideCondition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObjectiveListItem*), "set_hideCondition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ObjectiveListItem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObjectiveListItem::*)()>(&ObjectiveListItem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObjectiveListItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObjectiveListItem::*)()>(&ObjectiveListItem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObjectiveListItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObjectiveListItemsList
#include "GlobalNamespace/ObjectiveListItemsList.hpp"
// Including type: ObjectiveListItem
#include "GlobalNamespace/ObjectiveListItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ObjectiveListItemsList::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObjectiveListItemsList::*)()>(&ObjectiveListItemsList::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObjectiveListItemsList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObjectiveListItemsList::*)()>(&ObjectiveListItemsList::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObjectiveListItemsList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ResultObjectiveListItem
#include "GlobalNamespace/ResultObjectiveListItem.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ResultObjectiveListItem.set_iconColor
void GlobalNamespace::ResultObjectiveListItem::set_iconColor(UnityEngine::Color value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultObjectiveListItem::set_iconColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_iconColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ResultObjectiveListItem.set_icon
void GlobalNamespace::ResultObjectiveListItem::set_icon(UnityEngine::Sprite* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultObjectiveListItem::set_icon");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_icon", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ResultObjectiveListItem.set_iconGlow
void GlobalNamespace::ResultObjectiveListItem::set_iconGlow(UnityEngine::Sprite* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultObjectiveListItem::set_iconGlow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_iconGlow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ResultObjectiveListItem.set_title
void GlobalNamespace::ResultObjectiveListItem::set_title(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultObjectiveListItem::set_title");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_title", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ResultObjectiveListItem.set_conditionText
void GlobalNamespace::ResultObjectiveListItem::set_conditionText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultObjectiveListItem::set_conditionText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_conditionText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ResultObjectiveListItem.set_hideConditionText
void GlobalNamespace::ResultObjectiveListItem::set_hideConditionText(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultObjectiveListItem::set_hideConditionText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hideConditionText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ResultObjectiveListItem.set_valueText
void GlobalNamespace::ResultObjectiveListItem::set_valueText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultObjectiveListItem::set_valueText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_valueText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ResultObjectiveListItem.set_hideValueText
void GlobalNamespace::ResultObjectiveListItem::set_hideValueText(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultObjectiveListItem::set_hideValueText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hideValueText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: ResultObjectiveListItem::set_iconColor
// Il2CppName: set_iconColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultObjectiveListItem::*)(UnityEngine::Color)>(&ResultObjectiveListItem::set_iconColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultObjectiveListItem*), "set_iconColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: ResultObjectiveListItem::set_icon
// Il2CppName: set_icon
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultObjectiveListItem::*)(UnityEngine::Sprite*)>(&ResultObjectiveListItem::set_icon)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultObjectiveListItem*), "set_icon", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Sprite*>()});
  }
};
// Writing MetadataGetter for method: ResultObjectiveListItem::set_iconGlow
// Il2CppName: set_iconGlow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultObjectiveListItem::*)(UnityEngine::Sprite*)>(&ResultObjectiveListItem::set_iconGlow)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultObjectiveListItem*), "set_iconGlow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Sprite*>()});
  }
};
// Writing MetadataGetter for method: ResultObjectiveListItem::set_title
// Il2CppName: set_title
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultObjectiveListItem::*)(::Il2CppString*)>(&ResultObjectiveListItem::set_title)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultObjectiveListItem*), "set_title", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ResultObjectiveListItem::set_conditionText
// Il2CppName: set_conditionText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultObjectiveListItem::*)(::Il2CppString*)>(&ResultObjectiveListItem::set_conditionText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultObjectiveListItem*), "set_conditionText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ResultObjectiveListItem::set_hideConditionText
// Il2CppName: set_hideConditionText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultObjectiveListItem::*)(bool)>(&ResultObjectiveListItem::set_hideConditionText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultObjectiveListItem*), "set_hideConditionText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ResultObjectiveListItem::set_valueText
// Il2CppName: set_valueText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultObjectiveListItem::*)(::Il2CppString*)>(&ResultObjectiveListItem::set_valueText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultObjectiveListItem*), "set_valueText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ResultObjectiveListItem::set_hideValueText
// Il2CppName: set_hideValueText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultObjectiveListItem::*)(bool)>(&ResultObjectiveListItem::set_hideValueText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultObjectiveListItem*), "set_hideValueText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ResultObjectiveListItem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultObjectiveListItem::*)()>(&ResultObjectiveListItem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultObjectiveListItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultObjectiveListItem::*)()>(&ResultObjectiveListItem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultObjectiveListItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ResultObjectiveListItemsList
#include "GlobalNamespace/ResultObjectiveListItemsList.hpp"
// Including type: ResultObjectiveListItem
#include "GlobalNamespace/ResultObjectiveListItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ResultObjectiveListItemsList::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultObjectiveListItemsList::*)()>(&ResultObjectiveListItemsList::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultObjectiveListItemsList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultObjectiveListItemsList::*)()>(&ResultObjectiveListItemsList::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultObjectiveListItemsList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ResultsTableCell
#include "GlobalNamespace/ResultsTableCell.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ResultsTableCell.SetData
void GlobalNamespace::ResultsTableCell::SetData(int order, GlobalNamespace::IConnectedPlayer* connectedPlayer, GlobalNamespace::LevelCompletionResults* levelCompletionResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsTableCell::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(order), ::il2cpp_utils::ExtractType(connectedPlayer), ::il2cpp_utils::ExtractType(levelCompletionResults)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, order, connectedPlayer, levelCompletionResults);
}
// Writing MetadataGetter for method: ResultsTableCell::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultsTableCell::*)(int, GlobalNamespace::IConnectedPlayer*, GlobalNamespace::LevelCompletionResults*)>(&ResultsTableCell::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsTableCell*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>()});
  }
};
// Writing MetadataGetter for method: ResultsTableCell::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultsTableCell::*)()>(&ResultsTableCell::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultsTableCell::*)()>(&ResultsTableCell::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsTableCell*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ResultsTableView
#include "GlobalNamespace/ResultsTableView.hpp"
// Including type: HMUI.TableView
#include "HMUI/TableView.hpp"
// Including type: ResultsTableCell
#include "GlobalNamespace/ResultsTableCell.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: MultiplayerPlayerResultsData
#include "GlobalNamespace/MultiplayerPlayerResultsData.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kCellIdentifier
::Il2CppString* GlobalNamespace::ResultsTableView::_get_kCellIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsTableView::_get_kCellIdentifier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "ResultsTableView", "kCellIdentifier"));
}
// Autogenerated static field setter
// Set static field: static private System.String kCellIdentifier
void GlobalNamespace::ResultsTableView::_set_kCellIdentifier(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsTableView::_set_kCellIdentifier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ResultsTableView", "kCellIdentifier", value));
}
// Autogenerated method: ResultsTableView.CellSize
float GlobalNamespace::ResultsTableView::CellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsTableView::CellSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ResultsTableView.NumberOfCells
int GlobalNamespace::ResultsTableView::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsTableView::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: ResultsTableView.CellForIdx
HMUI::TableCell* GlobalNamespace::ResultsTableView::CellForIdx(HMUI::TableView* tableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsTableView::CellForIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableView), ::il2cpp_utils::ExtractType(idx)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, tableView, idx);
}
// Autogenerated method: ResultsTableView.SetData
void GlobalNamespace::ResultsTableView::SetData(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>* dataList) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResultsTableView::SetData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dataList)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dataList);
}
// Writing MetadataGetter for method: ResultsTableView::CellSize
// Il2CppName: CellSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ResultsTableView::*)()>(&ResultsTableView::CellSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsTableView*), "CellSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResultsTableView::NumberOfCells
// Il2CppName: NumberOfCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ResultsTableView::*)()>(&ResultsTableView::NumberOfCells)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsTableView*), "NumberOfCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResultsTableView::CellForIdx
// Il2CppName: CellForIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::TableCell* (ResultsTableView::*)(HMUI::TableView*, int)>(&ResultsTableView::CellForIdx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsTableView*), "CellForIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::TableView*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: ResultsTableView::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultsTableView::*)(System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>*)>(&ResultsTableView::SetData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsTableView*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::MultiplayerPlayerResultsData*>*>()});
  }
};
// Writing MetadataGetter for method: ResultsTableView::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultsTableView::*)()>(&ResultsTableView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsTableView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResultsTableView::*)()>(&ResultsTableView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResultsTableView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ServerCodeView
#include "GlobalNamespace/ServerCodeView.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ServerCodeView.SetCode
void GlobalNamespace::ServerCodeView::SetCode(::Il2CppString* serverCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ServerCodeView::SetCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverCode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverCode);
}
// Autogenerated method: ServerCodeView.OnEnable
void GlobalNamespace::ServerCodeView::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ServerCodeView::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ServerCodeView.OnDisable
void GlobalNamespace::ServerCodeView::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ServerCodeView::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ServerCodeView.HandleShowServerCodeButtonPressed
void GlobalNamespace::ServerCodeView::HandleShowServerCodeButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ServerCodeView::HandleShowServerCodeButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleShowServerCodeButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ServerCodeView.RefreshText
void GlobalNamespace::ServerCodeView::RefreshText(bool showCode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ServerCodeView::RefreshText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(showCode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, showCode);
}
// Writing MetadataGetter for method: ServerCodeView::SetCode
// Il2CppName: SetCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCodeView::*)(::Il2CppString*)>(&ServerCodeView::SetCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCodeView*), "SetCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ServerCodeView::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCodeView::*)()>(&ServerCodeView::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCodeView*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ServerCodeView::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCodeView::*)()>(&ServerCodeView::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCodeView*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ServerCodeView::HandleShowServerCodeButtonPressed
// Il2CppName: HandleShowServerCodeButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCodeView::*)()>(&ServerCodeView::HandleShowServerCodeButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCodeView*), "HandleShowServerCodeButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ServerCodeView::RefreshText
// Il2CppName: RefreshText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCodeView::*)(bool)>(&ServerCodeView::RefreshText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCodeView*), "RefreshText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ServerCodeView::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCodeView::*)()>(&ServerCodeView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCodeView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ServerCodeView::*)()>(&ServerCodeView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ServerCodeView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandardLevelBuyInfoView
#include "GlobalNamespace/StandardLevelBuyInfoView.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandardLevelBuyInfoView.get_buyLevelButton
UnityEngine::UI::Button* GlobalNamespace::StandardLevelBuyInfoView::get_buyLevelButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelBuyInfoView::get_buyLevelButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_buyLevelButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::Button*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelBuyInfoView.get_openPackButton
UnityEngine::UI::Button* GlobalNamespace::StandardLevelBuyInfoView::get_openPackButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelBuyInfoView::get_openPackButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_openPackButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::Button*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelBuyInfoView.get_buyPackButton
UnityEngine::UI::Button* GlobalNamespace::StandardLevelBuyInfoView::get_buyPackButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelBuyInfoView::get_buyPackButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_buyPackButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::Button*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelBuyInfoView.RefreshView
void GlobalNamespace::StandardLevelBuyInfoView::RefreshView(::Il2CppString* infoText, bool canBuyPack) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelBuyInfoView::RefreshView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(infoText), ::il2cpp_utils::ExtractType(canBuyPack)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, infoText, canBuyPack);
}
// Writing MetadataGetter for method: StandardLevelBuyInfoView::get_buyLevelButton
// Il2CppName: get_buyLevelButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Button* (StandardLevelBuyInfoView::*)()>(&StandardLevelBuyInfoView::get_buyLevelButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelBuyInfoView*), "get_buyLevelButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelBuyInfoView::get_openPackButton
// Il2CppName: get_openPackButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Button* (StandardLevelBuyInfoView::*)()>(&StandardLevelBuyInfoView::get_openPackButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelBuyInfoView*), "get_openPackButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelBuyInfoView::get_buyPackButton
// Il2CppName: get_buyPackButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Button* (StandardLevelBuyInfoView::*)()>(&StandardLevelBuyInfoView::get_buyPackButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelBuyInfoView*), "get_buyPackButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelBuyInfoView::RefreshView
// Il2CppName: RefreshView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelBuyInfoView::*)(::Il2CppString*, bool)>(&StandardLevelBuyInfoView::RefreshView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelBuyInfoView*), "RefreshView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StandardLevelBuyInfoView::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelBuyInfoView::*)()>(&StandardLevelBuyInfoView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelBuyInfoView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelBuyInfoView::*)()>(&StandardLevelBuyInfoView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelBuyInfoView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: StandardLevelBuyView
#include "GlobalNamespace/StandardLevelBuyView.hpp"
// Including type: LevelBar
#include "GlobalNamespace/LevelBar.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandardLevelBuyView.get_buyButton
UnityEngine::UI::Button* GlobalNamespace::StandardLevelBuyView::get_buyButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelBuyView::get_buyButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_buyButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::Button*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelBuyView.SetContent
void GlobalNamespace::StandardLevelBuyView::SetContent(GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelBuyView::SetContent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(previewBeatmapLevel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, previewBeatmapLevel);
}
// Writing MetadataGetter for method: StandardLevelBuyView::get_buyButton
// Il2CppName: get_buyButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Button* (StandardLevelBuyView::*)()>(&StandardLevelBuyView::get_buyButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelBuyView*), "get_buyButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelBuyView::SetContent
// Il2CppName: SetContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelBuyView::*)(GlobalNamespace::IPreviewBeatmapLevel*)>(&StandardLevelBuyView::SetContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelBuyView*), "SetContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelBuyView::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelBuyView::*)()>(&StandardLevelBuyView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelBuyView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelBuyView::*)()>(&StandardLevelBuyView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelBuyView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandardLevelDetailView
#include "GlobalNamespace/StandardLevelDetailView.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: LevelBar
#include "GlobalNamespace/LevelBar.hpp"
// Including type: LevelParamsPanel
#include "GlobalNamespace/LevelParamsPanel.hpp"
// Including type: BeatmapDifficultySegmentedControlController
#include "GlobalNamespace/BeatmapDifficultySegmentedControlController.hpp"
// Including type: BeatmapCharacteristicSegmentedControlController
#include "GlobalNamespace/BeatmapCharacteristicSegmentedControlController.hpp"
// Including type: UnityEngine.UI.Toggle
#include "UnityEngine/UI/Toggle.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: PlayerData
#include "GlobalNamespace/PlayerData.hpp"
// Including type: HMUI.ToggleBinder
#include "HMUI/ToggleBinder.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: StandardLevelDetailView.add_didChangeDifficultyBeatmapEvent
void GlobalNamespace::StandardLevelDetailView::add_didChangeDifficultyBeatmapEvent(System::Action_2<GlobalNamespace::StandardLevelDetailView*, GlobalNamespace::IDifficultyBeatmap*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::add_didChangeDifficultyBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didChangeDifficultyBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelDetailView.remove_didChangeDifficultyBeatmapEvent
void GlobalNamespace::StandardLevelDetailView::remove_didChangeDifficultyBeatmapEvent(System::Action_2<GlobalNamespace::StandardLevelDetailView*, GlobalNamespace::IDifficultyBeatmap*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::remove_didChangeDifficultyBeatmapEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didChangeDifficultyBeatmapEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelDetailView.add_didFavoriteToggleChangeEvent
void GlobalNamespace::StandardLevelDetailView::add_didFavoriteToggleChangeEvent(System::Action_2<GlobalNamespace::StandardLevelDetailView*, UnityEngine::UI::Toggle*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::add_didFavoriteToggleChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFavoriteToggleChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelDetailView.remove_didFavoriteToggleChangeEvent
void GlobalNamespace::StandardLevelDetailView::remove_didFavoriteToggleChangeEvent(System::Action_2<GlobalNamespace::StandardLevelDetailView*, UnityEngine::UI::Toggle*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::remove_didFavoriteToggleChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFavoriteToggleChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelDetailView.get_selectedDifficultyBeatmap
GlobalNamespace::IDifficultyBeatmap* GlobalNamespace::StandardLevelDetailView::get_selectedDifficultyBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::get_selectedDifficultyBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedDifficultyBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IDifficultyBeatmap*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelDetailView.get_actionButton
UnityEngine::UI::Button* GlobalNamespace::StandardLevelDetailView::get_actionButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::get_actionButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_actionButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::Button*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelDetailView.set_actionButtonText
void GlobalNamespace::StandardLevelDetailView::set_actionButtonText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::set_actionButtonText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_actionButtonText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelDetailView.get_practiceButton
UnityEngine::UI::Button* GlobalNamespace::StandardLevelDetailView::get_practiceButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::get_practiceButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_practiceButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::Button*, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelDetailView.set_hidePracticeButton
void GlobalNamespace::StandardLevelDetailView::set_hidePracticeButton(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::set_hidePracticeButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hidePracticeButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelDetailView.set_disableActionButton
void GlobalNamespace::StandardLevelDetailView::set_disableActionButton(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::set_disableActionButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_disableActionButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: StandardLevelDetailView.SetContent
void GlobalNamespace::StandardLevelDetailView::SetContent(GlobalNamespace::IBeatmapLevel* level, GlobalNamespace::BeatmapDifficulty defaultDifficulty, GlobalNamespace::BeatmapCharacteristicSO* defaultBeatmapCharacteristic, GlobalNamespace::PlayerData* playerData, bool showPlayerStats) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::SetContent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(level), ::il2cpp_utils::ExtractType(defaultDifficulty), ::il2cpp_utils::ExtractType(defaultBeatmapCharacteristic), ::il2cpp_utils::ExtractType(playerData), ::il2cpp_utils::ExtractType(showPlayerStats)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, level, defaultDifficulty, defaultBeatmapCharacteristic, playerData, showPlayerStats);
}
// Autogenerated method: StandardLevelDetailView.Awake
void GlobalNamespace::StandardLevelDetailView::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelDetailView.OnDestroy
void GlobalNamespace::StandardLevelDetailView::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelDetailView.HandleBeatmapDifficultySegmentedControlControllerDidSelectDifficulty
void GlobalNamespace::StandardLevelDetailView::HandleBeatmapDifficultySegmentedControlControllerDidSelectDifficulty(GlobalNamespace::BeatmapDifficultySegmentedControlController* controller, GlobalNamespace::BeatmapDifficulty difficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::HandleBeatmapDifficultySegmentedControlControllerDidSelectDifficulty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapDifficultySegmentedControlControllerDidSelectDifficulty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controller), ::il2cpp_utils::ExtractType(difficulty)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, controller, difficulty);
}
// Autogenerated method: StandardLevelDetailView.HandleBeatmapCharacteristicSegmentedControlControllerDidSelectBeatmapCharacteristic
void GlobalNamespace::StandardLevelDetailView::HandleBeatmapCharacteristicSegmentedControlControllerDidSelectBeatmapCharacteristic(GlobalNamespace::BeatmapCharacteristicSegmentedControlController* controller, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::HandleBeatmapCharacteristicSegmentedControlControllerDidSelectBeatmapCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBeatmapCharacteristicSegmentedControlControllerDidSelectBeatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controller), ::il2cpp_utils::ExtractType(beatmapCharacteristic)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, controller, beatmapCharacteristic);
}
// Autogenerated method: StandardLevelDetailView.RefreshContent
void GlobalNamespace::StandardLevelDetailView::RefreshContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::RefreshContent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelDetailView.ClearContent
void GlobalNamespace::StandardLevelDetailView::ClearContent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::ClearContent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: StandardLevelDetailView.<Awake>b__32_0
void GlobalNamespace::StandardLevelDetailView::$Awake$b__32_0(bool on) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandardLevelDetailView::<Awake>b__32_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__32_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(on)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, on);
}
// Writing MetadataGetter for method: StandardLevelDetailView::add_didChangeDifficultyBeatmapEvent
// Il2CppName: add_didChangeDifficultyBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)(System::Action_2<GlobalNamespace::StandardLevelDetailView*, GlobalNamespace::IDifficultyBeatmap*>*)>(&StandardLevelDetailView::add_didChangeDifficultyBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "add_didChangeDifficultyBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::StandardLevelDetailView*, GlobalNamespace::IDifficultyBeatmap*>*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::remove_didChangeDifficultyBeatmapEvent
// Il2CppName: remove_didChangeDifficultyBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)(System::Action_2<GlobalNamespace::StandardLevelDetailView*, GlobalNamespace::IDifficultyBeatmap*>*)>(&StandardLevelDetailView::remove_didChangeDifficultyBeatmapEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "remove_didChangeDifficultyBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::StandardLevelDetailView*, GlobalNamespace::IDifficultyBeatmap*>*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::add_didFavoriteToggleChangeEvent
// Il2CppName: add_didFavoriteToggleChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)(System::Action_2<GlobalNamespace::StandardLevelDetailView*, UnityEngine::UI::Toggle*>*)>(&StandardLevelDetailView::add_didFavoriteToggleChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "add_didFavoriteToggleChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::StandardLevelDetailView*, UnityEngine::UI::Toggle*>*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::remove_didFavoriteToggleChangeEvent
// Il2CppName: remove_didFavoriteToggleChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)(System::Action_2<GlobalNamespace::StandardLevelDetailView*, UnityEngine::UI::Toggle*>*)>(&StandardLevelDetailView::remove_didFavoriteToggleChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "remove_didFavoriteToggleChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::StandardLevelDetailView*, UnityEngine::UI::Toggle*>*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::get_selectedDifficultyBeatmap
// Il2CppName: get_selectedDifficultyBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IDifficultyBeatmap* (StandardLevelDetailView::*)()>(&StandardLevelDetailView::get_selectedDifficultyBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "get_selectedDifficultyBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::get_actionButton
// Il2CppName: get_actionButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Button* (StandardLevelDetailView::*)()>(&StandardLevelDetailView::get_actionButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "get_actionButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::set_actionButtonText
// Il2CppName: set_actionButtonText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)(::Il2CppString*)>(&StandardLevelDetailView::set_actionButtonText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "set_actionButtonText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::get_practiceButton
// Il2CppName: get_practiceButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Button* (StandardLevelDetailView::*)()>(&StandardLevelDetailView::get_practiceButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "get_practiceButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::set_hidePracticeButton
// Il2CppName: set_hidePracticeButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)(bool)>(&StandardLevelDetailView::set_hidePracticeButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "set_hidePracticeButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::set_disableActionButton
// Il2CppName: set_disableActionButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)(bool)>(&StandardLevelDetailView::set_disableActionButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "set_disableActionButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::SetContent
// Il2CppName: SetContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)(GlobalNamespace::IBeatmapLevel*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::PlayerData*, bool)>(&StandardLevelDetailView::SetContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "SetContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerData*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)()>(&StandardLevelDetailView::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)()>(&StandardLevelDetailView::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::HandleBeatmapDifficultySegmentedControlControllerDidSelectDifficulty
// Il2CppName: HandleBeatmapDifficultySegmentedControlControllerDidSelectDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)(GlobalNamespace::BeatmapDifficultySegmentedControlController*, GlobalNamespace::BeatmapDifficulty)>(&StandardLevelDetailView::HandleBeatmapDifficultySegmentedControlControllerDidSelectDifficulty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "HandleBeatmapDifficultySegmentedControlControllerDidSelectDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultySegmentedControlController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>()});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::HandleBeatmapCharacteristicSegmentedControlControllerDidSelectBeatmapCharacteristic
// Il2CppName: HandleBeatmapCharacteristicSegmentedControlControllerDidSelectBeatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)(GlobalNamespace::BeatmapCharacteristicSegmentedControlController*, GlobalNamespace::BeatmapCharacteristicSO*)>(&StandardLevelDetailView::HandleBeatmapCharacteristicSegmentedControlControllerDidSelectBeatmapCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "HandleBeatmapCharacteristicSegmentedControlControllerDidSelectBeatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSegmentedControlController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>()});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::RefreshContent
// Il2CppName: RefreshContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)()>(&StandardLevelDetailView::RefreshContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "RefreshContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::ClearContent
// Il2CppName: ClearContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)()>(&StandardLevelDetailView::ClearContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "ClearContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::$Awake$b__32_0
// Il2CppName: <Awake>b__32_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)(bool)>(&StandardLevelDetailView::$Awake$b__32_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), "<Awake>b__32_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: StandardLevelDetailView::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)()>(&StandardLevelDetailView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (StandardLevelDetailView::*)()>(&StandardLevelDetailView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StandardLevelDetailView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AssetObjectListSO
#include "GlobalNamespace/AssetObjectListSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AssetObjectListSO.get_objects
::Array<UnityEngine::Object*>* GlobalNamespace::AssetObjectListSO::get_objects() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AssetObjectListSO::get_objects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_objects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Object*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AssetObjectListSO::get_objects
// Il2CppName: get_objects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Object*>* (AssetObjectListSO::*)()>(&AssetObjectListSO::get_objects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetObjectListSO*), "get_objects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AssetObjectListSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssetObjectListSO::*)()>(&AssetObjectListSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetObjectListSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AssetObjectListSO::*)()>(&AssetObjectListSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AssetObjectListSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomPrePassBackgroundColorsGradientFromColorSchemeColors
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradientFromColorSchemeColors.hpp"
// Including type: BloomPrePassBackgroundColorsGradient
#include "GlobalNamespace/BloomPrePassBackgroundColorsGradient.hpp"
// Including type: EnvironmentColorManager
#include "GlobalNamespace/EnvironmentColorManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomPrePassBackgroundColorsGradientFromColorSchemeColors.Start
void GlobalNamespace::BloomPrePassBackgroundColorsGradientFromColorSchemeColors::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomPrePassBackgroundColorsGradientFromColorSchemeColors::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BloomPrePassBackgroundColorsGradientFromColorSchemeColors::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColorsGradientFromColorSchemeColors::*)()>(&BloomPrePassBackgroundColorsGradientFromColorSchemeColors::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColorsGradientFromColorSchemeColors*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomPrePassBackgroundColorsGradientFromColorSchemeColors::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColorsGradientFromColorSchemeColors::*)()>(&BloomPrePassBackgroundColorsGradientFromColorSchemeColors::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColorsGradientFromColorSchemeColors*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomPrePassBackgroundColorsGradientFromColorSchemeColors::*)()>(&BloomPrePassBackgroundColorsGradientFromColorSchemeColors::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomPrePassBackgroundColorsGradientFromColorSchemeColors*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorManager
#include "GlobalNamespace/ColorManager.hpp"
// Including type: ColorScheme
#include "GlobalNamespace/ColorScheme.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
// Including type: SaberType
#include "GlobalNamespace/SaberType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorManager.get_obstaclesColor
UnityEngine::Color GlobalNamespace::ColorManager::get_obstaclesColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorManager::get_obstaclesColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_obstaclesColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: ColorManager.ColorForType
UnityEngine::Color GlobalNamespace::ColorManager::ColorForType(GlobalNamespace::ColorType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorManager::ColorForType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorForType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, type);
}
// Autogenerated method: ColorManager.ColorForSaberType
UnityEngine::Color GlobalNamespace::ColorManager::ColorForSaberType(GlobalNamespace::SaberType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorManager::ColorForSaberType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ColorForSaberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, type);
}
// Autogenerated method: ColorManager.EffectsColorForSaberType
UnityEngine::Color GlobalNamespace::ColorManager::EffectsColorForSaberType(GlobalNamespace::SaberType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorManager::EffectsColorForSaberType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EffectsColorForSaberType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, type);
}
// Autogenerated method: ColorManager.GetObstacleEffectColor
UnityEngine::Color GlobalNamespace::ColorManager::GetObstacleEffectColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorManager::GetObstacleEffectColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetObstacleEffectColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ColorManager::get_obstaclesColor
// Il2CppName: get_obstaclesColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorManager::*)()>(&ColorManager::get_obstaclesColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorManager*), "get_obstaclesColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorManager::ColorForType
// Il2CppName: ColorForType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorManager::*)(GlobalNamespace::ColorType)>(&ColorManager::ColorForType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorManager*), "ColorForType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorType>()});
  }
};
// Writing MetadataGetter for method: ColorManager::ColorForSaberType
// Il2CppName: ColorForSaberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorManager::*)(GlobalNamespace::SaberType)>(&ColorManager::ColorForSaberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorManager*), "ColorForSaberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SaberType>()});
  }
};
// Writing MetadataGetter for method: ColorManager::EffectsColorForSaberType
// Il2CppName: EffectsColorForSaberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorManager::*)(GlobalNamespace::SaberType)>(&ColorManager::EffectsColorForSaberType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorManager*), "EffectsColorForSaberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SaberType>()});
  }
};
// Writing MetadataGetter for method: ColorManager::GetObstacleEffectColor
// Il2CppName: GetObstacleEffectColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (ColorManager::*)()>(&ColorManager::GetObstacleEffectColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorManager*), "GetObstacleEffectColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ColorManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorManager::*)()>(&ColorManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorManager::*)()>(&ColorManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ColorSchemeConverter
#include "GlobalNamespace/ColorSchemeConverter.hpp"
// Including type: ColorScheme
#include "GlobalNamespace/ColorScheme.hpp"
// Including type: ColorSchemeNetSerializable
#include "GlobalNamespace/ColorSchemeNetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ColorSchemeConverter.FromNetSerializable
GlobalNamespace::ColorScheme* GlobalNamespace::ColorSchemeConverter::FromNetSerializable(GlobalNamespace::ColorSchemeNetSerializable serialized) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ColorSchemeConverter::FromNetSerializable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ColorSchemeConverter", "FromNetSerializable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serialized)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ColorScheme*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, serialized);
}
// Writing MetadataGetter for method: ColorSchemeConverter::FromNetSerializable
// Il2CppName: FromNetSerializable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ColorScheme* (*)(GlobalNamespace::ColorSchemeNetSerializable)>(&ColorSchemeConverter::FromNetSerializable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorSchemeConverter*), "FromNetSerializable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ColorSchemeNetSerializable>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CrashManagerSO
#include "GlobalNamespace/CrashManagerSO.hpp"
// Including type: UnityEngine.LogType
#include "UnityEngine/LogType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CrashManagerSO.get_logString
::Il2CppString* GlobalNamespace::CrashManagerSO::get_logString() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrashManagerSO::get_logString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_logString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: CrashManagerSO.get_stackTrace
::Il2CppString* GlobalNamespace::CrashManagerSO::get_stackTrace() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrashManagerSO::get_stackTrace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stackTrace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: CrashManagerSO.StartCatchingExceptions
void GlobalNamespace::CrashManagerSO::StartCatchingExceptions() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrashManagerSO::StartCatchingExceptions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartCatchingExceptions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CrashManagerSO.OnDisable
void GlobalNamespace::CrashManagerSO::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrashManagerSO::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CrashManagerSO.HandleLog
void GlobalNamespace::CrashManagerSO::HandleLog(::Il2CppString* logString, ::Il2CppString* stackTrace, UnityEngine::LogType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrashManagerSO::HandleLog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(logString), ::il2cpp_utils::ExtractType(stackTrace), ::il2cpp_utils::ExtractType(type)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, logString, stackTrace, type);
}
// Writing MetadataGetter for method: CrashManagerSO::get_logString
// Il2CppName: get_logString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CrashManagerSO::*)()>(&CrashManagerSO::get_logString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrashManagerSO*), "get_logString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CrashManagerSO::get_stackTrace
// Il2CppName: get_stackTrace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (CrashManagerSO::*)()>(&CrashManagerSO::get_stackTrace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrashManagerSO*), "get_stackTrace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CrashManagerSO::StartCatchingExceptions
// Il2CppName: StartCatchingExceptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrashManagerSO::*)()>(&CrashManagerSO::StartCatchingExceptions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrashManagerSO*), "StartCatchingExceptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CrashManagerSO::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrashManagerSO::*)()>(&CrashManagerSO::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrashManagerSO*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CrashManagerSO::HandleLog
// Il2CppName: HandleLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrashManagerSO::*)(::Il2CppString*, ::Il2CppString*, UnityEngine::LogType)>(&CrashManagerSO::HandleLog)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrashManagerSO*), "HandleLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::LogType>()});
  }
};
// Writing MetadataGetter for method: CrashManagerSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrashManagerSO::*)()>(&CrashManagerSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrashManagerSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrashManagerSO::*)()>(&CrashManagerSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrashManagerSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: DlcPromoExperimentDataSO
#include "GlobalNamespace/DlcPromoExperimentDataSO.hpp"
// Including type: DlcPromoExperimentDataSO/MusicPackPromoInfo
#include "GlobalNamespace/DlcPromoExperimentDataSO_MusicPackPromoInfo.hpp"
// Including type: ExperimentDefinitionSO
#include "GlobalNamespace/ExperimentDefinitionSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DlcPromoExperimentDataSO.get_musicPackPromoInfos
::Array<GlobalNamespace::DlcPromoExperimentDataSO::MusicPackPromoInfo*>* GlobalNamespace::DlcPromoExperimentDataSO::get_musicPackPromoInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DlcPromoExperimentDataSO::get_musicPackPromoInfos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_musicPackPromoInfos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::DlcPromoExperimentDataSO::MusicPackPromoInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: DlcPromoExperimentDataSO.get_aaTestExperimentDefinition
GlobalNamespace::ExperimentDefinitionSO* GlobalNamespace::DlcPromoExperimentDataSO::get_aaTestExperimentDefinition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DlcPromoExperimentDataSO::get_aaTestExperimentDefinition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_aaTestExperimentDefinition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ExperimentDefinitionSO*, false>(this, ___internal__method);
}
// Autogenerated method: DlcPromoExperimentDataSO.get_abTestExperimentDefinition
GlobalNamespace::ExperimentDefinitionSO* GlobalNamespace::DlcPromoExperimentDataSO::get_abTestExperimentDefinition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DlcPromoExperimentDataSO::get_abTestExperimentDefinition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_abTestExperimentDefinition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ExperimentDefinitionSO*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DlcPromoExperimentDataSO::get_musicPackPromoInfos
// Il2CppName: get_musicPackPromoInfos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::DlcPromoExperimentDataSO::MusicPackPromoInfo*>* (DlcPromoExperimentDataSO::*)()>(&DlcPromoExperimentDataSO::get_musicPackPromoInfos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DlcPromoExperimentDataSO*), "get_musicPackPromoInfos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DlcPromoExperimentDataSO::get_aaTestExperimentDefinition
// Il2CppName: get_aaTestExperimentDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ExperimentDefinitionSO* (DlcPromoExperimentDataSO::*)()>(&DlcPromoExperimentDataSO::get_aaTestExperimentDefinition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DlcPromoExperimentDataSO*), "get_aaTestExperimentDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DlcPromoExperimentDataSO::get_abTestExperimentDefinition
// Il2CppName: get_abTestExperimentDefinition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ExperimentDefinitionSO* (DlcPromoExperimentDataSO::*)()>(&DlcPromoExperimentDataSO::get_abTestExperimentDefinition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DlcPromoExperimentDataSO*), "get_abTestExperimentDefinition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DlcPromoExperimentDataSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DlcPromoExperimentDataSO::*)()>(&DlcPromoExperimentDataSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DlcPromoExperimentDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DlcPromoExperimentDataSO::*)()>(&DlcPromoExperimentDataSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DlcPromoExperimentDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DlcPromoExperimentDataSO/MusicPackPromoInfo
#include "GlobalNamespace/DlcPromoExperimentDataSO_MusicPackPromoInfo.hpp"
// Including type: PreviewBeatmapLevelPackSO
#include "GlobalNamespace/PreviewBeatmapLevelPackSO.hpp"
// Including type: UnityEngine.Sprite
#include "UnityEngine/Sprite.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DlcPromoExperimentDataSO/MusicPackPromoInfo.get_previewBeatmapLevelPack
GlobalNamespace::PreviewBeatmapLevelPackSO* GlobalNamespace::DlcPromoExperimentDataSO::MusicPackPromoInfo::get_previewBeatmapLevelPack() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DlcPromoExperimentDataSO::MusicPackPromoInfo::get_previewBeatmapLevelPack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_previewBeatmapLevelPack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PreviewBeatmapLevelPackSO*, false>(this, ___internal__method);
}
// Autogenerated method: DlcPromoExperimentDataSO/MusicPackPromoInfo.get_bannerImage
UnityEngine::Sprite* GlobalNamespace::DlcPromoExperimentDataSO::MusicPackPromoInfo::get_bannerImage() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DlcPromoExperimentDataSO::MusicPackPromoInfo::get_bannerImage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bannerImage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Sprite*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DlcPromoExperimentDataSO::MusicPackPromoInfo::get_previewBeatmapLevelPack
// Il2CppName: get_previewBeatmapLevelPack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PreviewBeatmapLevelPackSO* (DlcPromoExperimentDataSO::MusicPackPromoInfo::*)()>(&DlcPromoExperimentDataSO::MusicPackPromoInfo::get_previewBeatmapLevelPack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DlcPromoExperimentDataSO::MusicPackPromoInfo*), "get_previewBeatmapLevelPack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DlcPromoExperimentDataSO::MusicPackPromoInfo::get_bannerImage
// Il2CppName: get_bannerImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Sprite* (DlcPromoExperimentDataSO::MusicPackPromoInfo::*)()>(&DlcPromoExperimentDataSO::MusicPackPromoInfo::get_bannerImage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DlcPromoExperimentDataSO::MusicPackPromoInfo*), "get_bannerImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DlcPromoExperimentDataSO::MusicPackPromoInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DlcPromoExperimentDataSO::MusicPackPromoInfo::*)()>(&DlcPromoExperimentDataSO::MusicPackPromoInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DlcPromoExperimentDataSO::MusicPackPromoInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DlcPromoExperimentDataSO::MusicPackPromoInfo::*)()>(&DlcPromoExperimentDataSO::MusicPackPromoInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DlcPromoExperimentDataSO::MusicPackPromoInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EnvironmentColorManager
#include "GlobalNamespace/EnvironmentColorManager.hpp"
// Including type: ColorSchemeSO
#include "GlobalNamespace/ColorSchemeSO.hpp"
// Including type: SimpleColorSO
#include "GlobalNamespace/SimpleColorSO.hpp"
// Including type: ColorScheme
#include "GlobalNamespace/ColorScheme.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EnvironmentColorManager.get_environmentColor0
UnityEngine::Color GlobalNamespace::EnvironmentColorManager::get_environmentColor0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentColorManager::get_environmentColor0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentColor0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentColorManager.get_environmentColor1
UnityEngine::Color GlobalNamespace::EnvironmentColorManager::get_environmentColor1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentColorManager::get_environmentColor1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentColor1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentColorManager.get_environmentColor0Boost
UnityEngine::Color GlobalNamespace::EnvironmentColorManager::get_environmentColor0Boost() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentColorManager::get_environmentColor0Boost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentColor0Boost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentColorManager.get_environmentColor1Boost
UnityEngine::Color GlobalNamespace::EnvironmentColorManager::get_environmentColor1Boost() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentColorManager::get_environmentColor1Boost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_environmentColor1Boost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentColorManager.Awake
void GlobalNamespace::EnvironmentColorManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentColorManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EnvironmentColorManager.Start
void GlobalNamespace::EnvironmentColorManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentColorManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: EnvironmentColorManager::get_environmentColor0
// Il2CppName: get_environmentColor0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (EnvironmentColorManager::*)()>(&EnvironmentColorManager::get_environmentColor0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentColorManager*), "get_environmentColor0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentColorManager::get_environmentColor1
// Il2CppName: get_environmentColor1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (EnvironmentColorManager::*)()>(&EnvironmentColorManager::get_environmentColor1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentColorManager*), "get_environmentColor1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentColorManager::get_environmentColor0Boost
// Il2CppName: get_environmentColor0Boost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (EnvironmentColorManager::*)()>(&EnvironmentColorManager::get_environmentColor0Boost)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentColorManager*), "get_environmentColor0Boost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentColorManager::get_environmentColor1Boost
// Il2CppName: get_environmentColor1Boost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (EnvironmentColorManager::*)()>(&EnvironmentColorManager::get_environmentColor1Boost)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentColorManager*), "get_environmentColor1Boost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentColorManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentColorManager::*)()>(&EnvironmentColorManager::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentColorManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentColorManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentColorManager::*)()>(&EnvironmentColorManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentColorManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EnvironmentColorManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentColorManager::*)()>(&EnvironmentColorManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentColorManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EnvironmentColorManager::*)()>(&EnvironmentColorManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EnvironmentColorManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ExperimentDefinitionSO
#include "GlobalNamespace/ExperimentDefinitionSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ExperimentDefinitionSO.get_controlGroupSize
float GlobalNamespace::ExperimentDefinitionSO::get_controlGroupSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExperimentDefinitionSO::get_controlGroupSize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_controlGroupSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: ExperimentDefinitionSO.get_experimentName
::Il2CppString* GlobalNamespace::ExperimentDefinitionSO::get_experimentName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExperimentDefinitionSO::get_experimentName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_experimentName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: ExperimentDefinitionSO.get_currentUserTreatmentGroup
GlobalNamespace::ExperimentDefinitionSO::Group GlobalNamespace::ExperimentDefinitionSO::get_currentUserTreatmentGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExperimentDefinitionSO::get_currentUserTreatmentGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_currentUserTreatmentGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ExperimentDefinitionSO::Group, false>(this, ___internal__method);
}
// Autogenerated method: ExperimentDefinitionSO.ComputeCurrentUserTreatment
void GlobalNamespace::ExperimentDefinitionSO::ComputeCurrentUserTreatment(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExperimentDefinitionSO::ComputeCurrentUserTreatment");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeCurrentUserTreatment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: ExperimentDefinitionSO.ForceSetTreatmentGroup
void GlobalNamespace::ExperimentDefinitionSO::ForceSetTreatmentGroup(GlobalNamespace::ExperimentDefinitionSO::Group group) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExperimentDefinitionSO::ForceSetTreatmentGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForceSetTreatmentGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(group)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, group);
}
// Autogenerated method: ExperimentDefinitionSO.AbSplit
GlobalNamespace::ExperimentDefinitionSO::Group GlobalNamespace::ExperimentDefinitionSO::AbSplit(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExperimentDefinitionSO::AbSplit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AbSplit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ExperimentDefinitionSO::Group, false>(this, ___internal__method, userId);
}
// Writing MetadataGetter for method: ExperimentDefinitionSO::get_controlGroupSize
// Il2CppName: get_controlGroupSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (ExperimentDefinitionSO::*)()>(&ExperimentDefinitionSO::get_controlGroupSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExperimentDefinitionSO*), "get_controlGroupSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExperimentDefinitionSO::get_experimentName
// Il2CppName: get_experimentName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ExperimentDefinitionSO::*)()>(&ExperimentDefinitionSO::get_experimentName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExperimentDefinitionSO*), "get_experimentName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExperimentDefinitionSO::get_currentUserTreatmentGroup
// Il2CppName: get_currentUserTreatmentGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ExperimentDefinitionSO::Group (ExperimentDefinitionSO::*)()>(&ExperimentDefinitionSO::get_currentUserTreatmentGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExperimentDefinitionSO*), "get_currentUserTreatmentGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ExperimentDefinitionSO::ComputeCurrentUserTreatment
// Il2CppName: ComputeCurrentUserTreatment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExperimentDefinitionSO::*)(::Il2CppString*)>(&ExperimentDefinitionSO::ComputeCurrentUserTreatment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExperimentDefinitionSO*), "ComputeCurrentUserTreatment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ExperimentDefinitionSO::ForceSetTreatmentGroup
// Il2CppName: ForceSetTreatmentGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExperimentDefinitionSO::*)(GlobalNamespace::ExperimentDefinitionSO::Group)>(&ExperimentDefinitionSO::ForceSetTreatmentGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExperimentDefinitionSO*), "ForceSetTreatmentGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ExperimentDefinitionSO::Group>()});
  }
};
// Writing MetadataGetter for method: ExperimentDefinitionSO::AbSplit
// Il2CppName: AbSplit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ExperimentDefinitionSO::Group (ExperimentDefinitionSO::*)(::Il2CppString*)>(&ExperimentDefinitionSO::AbSplit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExperimentDefinitionSO*), "AbSplit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ExperimentDefinitionSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExperimentDefinitionSO::*)()>(&ExperimentDefinitionSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExperimentDefinitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExperimentDefinitionSO::*)()>(&ExperimentDefinitionSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExperimentDefinitionSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ExperimentDefinitionSO/Group
#include "GlobalNamespace/ExperimentDefinitionSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public ExperimentDefinitionSO/Group None
GlobalNamespace::ExperimentDefinitionSO::Group GlobalNamespace::ExperimentDefinitionSO::Group::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExperimentDefinitionSO::Group::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ExperimentDefinitionSO::Group>("", "ExperimentDefinitionSO/Group", "None"));
}
// Autogenerated static field setter
// Set static field: static public ExperimentDefinitionSO/Group None
void GlobalNamespace::ExperimentDefinitionSO::Group::_set_None(GlobalNamespace::ExperimentDefinitionSO::Group value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExperimentDefinitionSO::Group::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ExperimentDefinitionSO/Group", "None", value));
}
// Autogenerated static field getter
// Get static field: static public ExperimentDefinitionSO/Group Control
GlobalNamespace::ExperimentDefinitionSO::Group GlobalNamespace::ExperimentDefinitionSO::Group::_get_Control() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExperimentDefinitionSO::Group::_get_Control");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ExperimentDefinitionSO::Group>("", "ExperimentDefinitionSO/Group", "Control"));
}
// Autogenerated static field setter
// Set static field: static public ExperimentDefinitionSO/Group Control
void GlobalNamespace::ExperimentDefinitionSO::Group::_set_Control(GlobalNamespace::ExperimentDefinitionSO::Group value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExperimentDefinitionSO::Group::_set_Control");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ExperimentDefinitionSO/Group", "Control", value));
}
// Autogenerated static field getter
// Get static field: static public ExperimentDefinitionSO/Group Test
GlobalNamespace::ExperimentDefinitionSO::Group GlobalNamespace::ExperimentDefinitionSO::Group::_get_Test() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExperimentDefinitionSO::Group::_get_Test");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::ExperimentDefinitionSO::Group>("", "ExperimentDefinitionSO/Group", "Test"));
}
// Autogenerated static field setter
// Set static field: static public ExperimentDefinitionSO/Group Test
void GlobalNamespace::ExperimentDefinitionSO::Group::_set_Test(GlobalNamespace::ExperimentDefinitionSO::Group value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ExperimentDefinitionSO::Group::_set_Test");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ExperimentDefinitionSO/Group", "Test", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FirstPersonFlyingController
#include "GlobalNamespace/FirstPersonFlyingController.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: VRCenterAdjust
#include "GlobalNamespace/VRCenterAdjust.hpp"
// Including type: VRController
#include "GlobalNamespace/VRController.hpp"
// Including type: VRUIControls.VRInputModule
#include "VRUIControls/VRInputModule.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: MouseLook
#include "GlobalNamespace/MouseLook.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FirstPersonFlyingController.Awake
void GlobalNamespace::FirstPersonFlyingController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FirstPersonFlyingController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FirstPersonFlyingController.Start
void GlobalNamespace::FirstPersonFlyingController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FirstPersonFlyingController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FirstPersonFlyingController.OnEnable
void GlobalNamespace::FirstPersonFlyingController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FirstPersonFlyingController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FirstPersonFlyingController.OnDisable
void GlobalNamespace::FirstPersonFlyingController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FirstPersonFlyingController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FirstPersonFlyingController.Update
void GlobalNamespace::FirstPersonFlyingController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FirstPersonFlyingController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FirstPersonFlyingController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FirstPersonFlyingController::*)()>(&FirstPersonFlyingController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FirstPersonFlyingController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FirstPersonFlyingController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FirstPersonFlyingController::*)()>(&FirstPersonFlyingController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FirstPersonFlyingController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FirstPersonFlyingController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FirstPersonFlyingController::*)()>(&FirstPersonFlyingController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FirstPersonFlyingController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FirstPersonFlyingController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FirstPersonFlyingController::*)()>(&FirstPersonFlyingController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FirstPersonFlyingController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FirstPersonFlyingController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FirstPersonFlyingController::*)()>(&FirstPersonFlyingController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FirstPersonFlyingController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FirstPersonFlyingController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FirstPersonFlyingController::*)()>(&FirstPersonFlyingController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FirstPersonFlyingController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FirstPersonFlyingController::*)()>(&FirstPersonFlyingController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FirstPersonFlyingController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MouseLook
#include "GlobalNamespace/MouseLook.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MouseLook.Init
void GlobalNamespace::MouseLook::Init(UnityEngine::Transform* character, UnityEngine::Transform* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MouseLook::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character), ::il2cpp_utils::ExtractType(camera)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, character, camera);
}
// Autogenerated method: MouseLook.LookRotation
void GlobalNamespace::MouseLook::LookRotation(UnityEngine::Transform* character, UnityEngine::Transform* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MouseLook::LookRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character), ::il2cpp_utils::ExtractType(camera)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, character, camera);
}
// Autogenerated method: MouseLook.SetCursorLock
void GlobalNamespace::MouseLook::SetCursorLock(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MouseLook::SetCursorLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetCursorLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MouseLook.UpdateCursorLock
void GlobalNamespace::MouseLook::UpdateCursorLock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MouseLook::UpdateCursorLock");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCursorLock", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MouseLook.InternalLockUpdate
void GlobalNamespace::MouseLook::InternalLockUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MouseLook::InternalLockUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalLockUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MouseLook.ClampRotationAroundXAxis
UnityEngine::Quaternion GlobalNamespace::MouseLook::ClampRotationAroundXAxis(UnityEngine::Quaternion q) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MouseLook::ClampRotationAroundXAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClampRotationAroundXAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, q);
}
// Writing MetadataGetter for method: MouseLook::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MouseLook::*)(UnityEngine::Transform*, UnityEngine::Transform*)>(&MouseLook::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseLook*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: MouseLook::LookRotation
// Il2CppName: LookRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MouseLook::*)(UnityEngine::Transform*, UnityEngine::Transform*)>(&MouseLook::LookRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseLook*), "LookRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: MouseLook::SetCursorLock
// Il2CppName: SetCursorLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MouseLook::*)(bool)>(&MouseLook::SetCursorLock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseLook*), "SetCursorLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MouseLook::UpdateCursorLock
// Il2CppName: UpdateCursorLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MouseLook::*)()>(&MouseLook::UpdateCursorLock)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseLook*), "UpdateCursorLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MouseLook::InternalLockUpdate
// Il2CppName: InternalLockUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MouseLook::*)()>(&MouseLook::InternalLockUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseLook*), "InternalLockUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MouseLook::ClampRotationAroundXAxis
// Il2CppName: ClampRotationAroundXAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (MouseLook::*)(UnityEngine::Quaternion)>(&MouseLook::ClampRotationAroundXAxis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseLook*), "ClampRotationAroundXAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: MouseLook::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MouseLook::*)()>(&MouseLook::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseLook*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MouseLook::*)()>(&MouseLook::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MouseLook*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LanguageSO
#include "GlobalNamespace/LanguageSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LanguageSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LanguageSO::*)()>(&LanguageSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LanguageSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LanguageSO::*)()>(&LanguageSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LanguageSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakedLightDataLoader
#include "GlobalNamespace/BakedLightDataLoader.hpp"
// Including type: LightmapDataSO
#include "GlobalNamespace/LightmapDataSO.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27D10
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _lightMap1PropertyId
int GlobalNamespace::BakedLightDataLoader::_get__lightMap1PropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightDataLoader::_get__lightMap1PropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BakedLightDataLoader", "_lightMap1PropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _lightMap1PropertyId
void GlobalNamespace::BakedLightDataLoader::_set__lightMap1PropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightDataLoader::_set__lightMap1PropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedLightDataLoader", "_lightMap1PropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27D20
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _lightMap2PropertyId
int GlobalNamespace::BakedLightDataLoader::_get__lightMap2PropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightDataLoader::_get__lightMap2PropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BakedLightDataLoader", "_lightMap2PropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _lightMap2PropertyId
void GlobalNamespace::BakedLightDataLoader::_set__lightMap2PropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightDataLoader::_set__lightMap2PropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedLightDataLoader", "_lightMap2PropertyId", value));
}
// Autogenerated method: BakedLightDataLoader.get_lightmapData
GlobalNamespace::LightmapDataSO* GlobalNamespace::BakedLightDataLoader::get_lightmapData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightDataLoader::get_lightmapData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightmapData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LightmapDataSO*, false>(this, ___internal__method);
}
// Autogenerated method: BakedLightDataLoader.set_lightmapData
void GlobalNamespace::BakedLightDataLoader::set_lightmapData(GlobalNamespace::LightmapDataSO* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightDataLoader::set_lightmapData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lightmapData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BakedLightDataLoader.Start
void GlobalNamespace::BakedLightDataLoader::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightDataLoader::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BakedLightDataLoader.SetTextureDataToShaders
void GlobalNamespace::BakedLightDataLoader::SetTextureDataToShaders() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightDataLoader::SetTextureDataToShaders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTextureDataToShaders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BakedLightDataLoader..cctor
void GlobalNamespace::BakedLightDataLoader::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightDataLoader::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BakedLightDataLoader", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: BakedLightDataLoader::get_lightmapData
// Il2CppName: get_lightmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LightmapDataSO* (BakedLightDataLoader::*)()>(&BakedLightDataLoader::get_lightmapData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedLightDataLoader*), "get_lightmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BakedLightDataLoader::set_lightmapData
// Il2CppName: set_lightmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BakedLightDataLoader::*)(GlobalNamespace::LightmapDataSO*)>(&BakedLightDataLoader::set_lightmapData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedLightDataLoader*), "set_lightmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LightmapDataSO*>()});
  }
};
// Writing MetadataGetter for method: BakedLightDataLoader::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BakedLightDataLoader::*)()>(&BakedLightDataLoader::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedLightDataLoader*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BakedLightDataLoader::SetTextureDataToShaders
// Il2CppName: SetTextureDataToShaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BakedLightDataLoader::*)()>(&BakedLightDataLoader::SetTextureDataToShaders)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedLightDataLoader*), "SetTextureDataToShaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BakedLightDataLoader::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BakedLightDataLoader::*)()>(&BakedLightDataLoader::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedLightDataLoader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BakedLightDataLoader::*)()>(&BakedLightDataLoader::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedLightDataLoader*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BakedLightDataLoader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BakedLightDataLoader::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedLightDataLoader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.RenderTextureDescriptor
#include "UnityEngine/RenderTextureDescriptor.hpp"
// Including type: BakedLightTexturePacking
#include "GlobalNamespace/BakedLightTexturePacking.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kBakedLightTexturePackingShaderName
::Il2CppString* GlobalNamespace::BakedLightTexturePacking::_get_kBakedLightTexturePackingShaderName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightTexturePacking::_get_kBakedLightTexturePackingShaderName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BakedLightTexturePacking", "kBakedLightTexturePackingShaderName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kBakedLightTexturePackingShaderName
void GlobalNamespace::BakedLightTexturePacking::_set_kBakedLightTexturePackingShaderName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightTexturePacking::_set_kBakedLightTexturePackingShaderName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedLightTexturePacking", "kBakedLightTexturePackingShaderName", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27D30
// Autogenerated static field getter
// Get static field: static private readonly System.Int32[] _texPropertyIds
::Array<int>* GlobalNamespace::BakedLightTexturePacking::_get__texPropertyIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightTexturePacking::_get__texPropertyIds");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<int>*>("", "BakedLightTexturePacking", "_texPropertyIds"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32[] _texPropertyIds
void GlobalNamespace::BakedLightTexturePacking::_set__texPropertyIds(::Array<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightTexturePacking::_set__texPropertyIds");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedLightTexturePacking", "_texPropertyIds", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27D40
// Autogenerated static field getter
// Get static field: static private UnityEngine.Material _material
UnityEngine::Material* GlobalNamespace::BakedLightTexturePacking::_get__material() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightTexturePacking::_get__material");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Material*>("", "BakedLightTexturePacking", "_material"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Material _material
void GlobalNamespace::BakedLightTexturePacking::_set__material(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightTexturePacking::_set__material");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedLightTexturePacking", "_material", value));
}
// Autogenerated method: BakedLightTexturePacking.PackTextures
UnityEngine::RenderTexture* GlobalNamespace::BakedLightTexturePacking::PackTextures(System::Collections::Generic::IReadOnlyList_1<UnityEngine::RenderTexture*>* textures, UnityEngine::RenderTextureDescriptor descriptor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightTexturePacking::PackTextures");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BakedLightTexturePacking", "PackTextures", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textures), ::il2cpp_utils::ExtractType(descriptor)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RenderTexture*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, textures, descriptor);
}
// Autogenerated method: BakedLightTexturePacking..cctor
void GlobalNamespace::BakedLightTexturePacking::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightTexturePacking::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BakedLightTexturePacking", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: BakedLightTexturePacking::PackTextures
// Il2CppName: PackTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RenderTexture* (*)(System::Collections::Generic::IReadOnlyList_1<UnityEngine::RenderTexture*>*, UnityEngine::RenderTextureDescriptor)>(&BakedLightTexturePacking::PackTextures)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedLightTexturePacking*), "PackTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::IReadOnlyList_1<UnityEngine::RenderTexture*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTextureDescriptor>()});
  }
};
// Writing MetadataGetter for method: BakedLightTexturePacking::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BakedLightTexturePacking::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedLightTexturePacking*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BakedLightUtils
#include "GlobalNamespace/BakedLightUtils.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.String kMirrorParentNameToIgnore
::Il2CppString* GlobalNamespace::BakedLightUtils::_get_kMirrorParentNameToIgnore() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightUtils::_get_kMirrorParentNameToIgnore");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BakedLightUtils", "kMirrorParentNameToIgnore"));
}
// Autogenerated static field setter
// Set static field: static public System.String kMirrorParentNameToIgnore
void GlobalNamespace::BakedLightUtils::_set_kMirrorParentNameToIgnore(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightUtils::_set_kMirrorParentNameToIgnore");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedLightUtils", "kMirrorParentNameToIgnore", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kDepthOnlyShaderName
::Il2CppString* GlobalNamespace::BakedLightUtils::_get_kDepthOnlyShaderName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightUtils::_get_kDepthOnlyShaderName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "BakedLightUtils", "kDepthOnlyShaderName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kDepthOnlyShaderName
void GlobalNamespace::BakedLightUtils::_set_kDepthOnlyShaderName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightUtils::_set_kDepthOnlyShaderName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedLightUtils", "kDepthOnlyShaderName", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27D50
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _zWritePropertyId
int GlobalNamespace::BakedLightUtils::_get__zWritePropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightUtils::_get__zWritePropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BakedLightUtils", "_zWritePropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _zWritePropertyId
void GlobalNamespace::BakedLightUtils::_set__zWritePropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightUtils::_set__zWritePropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedLightUtils", "_zWritePropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27D60
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _stencilRefValuePropertyId
int GlobalNamespace::BakedLightUtils::_get__stencilRefValuePropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightUtils::_get__stencilRefValuePropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BakedLightUtils", "_stencilRefValuePropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _stencilRefValuePropertyId
void GlobalNamespace::BakedLightUtils::_set__stencilRefValuePropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightUtils::_set__stencilRefValuePropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedLightUtils", "_stencilRefValuePropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27D70
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _stencilCompPropertyId
int GlobalNamespace::BakedLightUtils::_get__stencilCompPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightUtils::_get__stencilCompPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BakedLightUtils", "_stencilCompPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _stencilCompPropertyId
void GlobalNamespace::BakedLightUtils::_set__stencilCompPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightUtils::_set__stencilCompPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedLightUtils", "_stencilCompPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27D80
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _stencilPassOpPropertyId
int GlobalNamespace::BakedLightUtils::_get__stencilPassOpPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightUtils::_get__stencilPassOpPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BakedLightUtils", "_stencilPassOpPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _stencilPassOpPropertyId
void GlobalNamespace::BakedLightUtils::_set__stencilPassOpPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightUtils::_set__stencilPassOpPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedLightUtils", "_stencilPassOpPropertyId", value));
}
// Autogenerated method: BakedLightUtils.ValidateLoadedEnvironmentScene
void GlobalNamespace::BakedLightUtils::ValidateLoadedEnvironmentScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightUtils::ValidateLoadedEnvironmentScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BakedLightUtils", "ValidateLoadedEnvironmentScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: BakedLightUtils..cctor
void GlobalNamespace::BakedLightUtils::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightUtils::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BakedLightUtils", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: BakedLightUtils::ValidateLoadedEnvironmentScene
// Il2CppName: ValidateLoadedEnvironmentScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BakedLightUtils::ValidateLoadedEnvironmentScene)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedLightUtils*), "ValidateLoadedEnvironmentScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BakedLightUtils::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BakedLightUtils::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedLightUtils*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BakedReflectionProbe
#include "GlobalNamespace/BakedReflectionProbe.hpp"
// Including type: ReflectionProbeDataSO
#include "GlobalNamespace/ReflectionProbeDataSO.hpp"
// Including type: UnityEngine.Cubemap
#include "UnityEngine/Cubemap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27E1C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _reflectionProbeBoundsMinPropertyId
int GlobalNamespace::BakedReflectionProbe::_get__reflectionProbeBoundsMinPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::_get__reflectionProbeBoundsMinPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BakedReflectionProbe", "_reflectionProbeBoundsMinPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _reflectionProbeBoundsMinPropertyId
void GlobalNamespace::BakedReflectionProbe::_set__reflectionProbeBoundsMinPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::_set__reflectionProbeBoundsMinPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedReflectionProbe", "_reflectionProbeBoundsMinPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27E2C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _reflectionProbeBoundsMaxPropertyId
int GlobalNamespace::BakedReflectionProbe::_get__reflectionProbeBoundsMaxPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::_get__reflectionProbeBoundsMaxPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BakedReflectionProbe", "_reflectionProbeBoundsMaxPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _reflectionProbeBoundsMaxPropertyId
void GlobalNamespace::BakedReflectionProbe::_set__reflectionProbeBoundsMaxPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::_set__reflectionProbeBoundsMaxPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedReflectionProbe", "_reflectionProbeBoundsMaxPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27E3C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _reflectionProbePositionPropertyId
int GlobalNamespace::BakedReflectionProbe::_get__reflectionProbePositionPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::_get__reflectionProbePositionPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BakedReflectionProbe", "_reflectionProbePositionPropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _reflectionProbePositionPropertyId
void GlobalNamespace::BakedReflectionProbe::_set__reflectionProbePositionPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::_set__reflectionProbePositionPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedReflectionProbe", "_reflectionProbePositionPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27E4C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _reflectionProbeTexture1PropertyId
int GlobalNamespace::BakedReflectionProbe::_get__reflectionProbeTexture1PropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::_get__reflectionProbeTexture1PropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BakedReflectionProbe", "_reflectionProbeTexture1PropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _reflectionProbeTexture1PropertyId
void GlobalNamespace::BakedReflectionProbe::_set__reflectionProbeTexture1PropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::_set__reflectionProbeTexture1PropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedReflectionProbe", "_reflectionProbeTexture1PropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27E5C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _reflectionProbeTexture2PropertyId
int GlobalNamespace::BakedReflectionProbe::_get__reflectionProbeTexture2PropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::_get__reflectionProbeTexture2PropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "BakedReflectionProbe", "_reflectionProbeTexture2PropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _reflectionProbeTexture2PropertyId
void GlobalNamespace::BakedReflectionProbe::_set__reflectionProbeTexture2PropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::_set__reflectionProbeTexture2PropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "BakedReflectionProbe", "_reflectionProbeTexture2PropertyId", value));
}
// Autogenerated method: BakedReflectionProbe.get_reflectionProbeData
GlobalNamespace::ReflectionProbeDataSO* GlobalNamespace::BakedReflectionProbe::get_reflectionProbeData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::get_reflectionProbeData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_reflectionProbeData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ReflectionProbeDataSO*, false>(this, ___internal__method);
}
// Autogenerated method: BakedReflectionProbe.set_reflectionProbeData
void GlobalNamespace::BakedReflectionProbe::set_reflectionProbeData(GlobalNamespace::ReflectionProbeDataSO* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::set_reflectionProbeData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_reflectionProbeData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BakedReflectionProbe.get_position
UnityEngine::Vector3 GlobalNamespace::BakedReflectionProbe::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: BakedReflectionProbe.get_resolutionBeforeDownsample
int GlobalNamespace::BakedReflectionProbe::get_resolutionBeforeDownsample() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::get_resolutionBeforeDownsample");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resolutionBeforeDownsample", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BakedReflectionProbe.get_downsampleByHalfCount
int GlobalNamespace::BakedReflectionProbe::get_downsampleByHalfCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::get_downsampleByHalfCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_downsampleByHalfCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: BakedReflectionProbe.Start
void GlobalNamespace::BakedReflectionProbe::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BakedReflectionProbe.SendDataToShaders
void GlobalNamespace::BakedReflectionProbe::SendDataToShaders() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::SendDataToShaders");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendDataToShaders", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BakedReflectionProbe..cctor
void GlobalNamespace::BakedReflectionProbe::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedReflectionProbe::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BakedReflectionProbe", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: BakedReflectionProbe::get_reflectionProbeData
// Il2CppName: get_reflectionProbeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ReflectionProbeDataSO* (BakedReflectionProbe::*)()>(&BakedReflectionProbe::get_reflectionProbeData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedReflectionProbe*), "get_reflectionProbeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BakedReflectionProbe::set_reflectionProbeData
// Il2CppName: set_reflectionProbeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BakedReflectionProbe::*)(GlobalNamespace::ReflectionProbeDataSO*)>(&BakedReflectionProbe::set_reflectionProbeData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedReflectionProbe*), "set_reflectionProbeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ReflectionProbeDataSO*>()});
  }
};
// Writing MetadataGetter for method: BakedReflectionProbe::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (BakedReflectionProbe::*)()>(&BakedReflectionProbe::get_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedReflectionProbe*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BakedReflectionProbe::get_resolutionBeforeDownsample
// Il2CppName: get_resolutionBeforeDownsample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BakedReflectionProbe::*)()>(&BakedReflectionProbe::get_resolutionBeforeDownsample)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedReflectionProbe*), "get_resolutionBeforeDownsample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BakedReflectionProbe::get_downsampleByHalfCount
// Il2CppName: get_downsampleByHalfCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BakedReflectionProbe::*)()>(&BakedReflectionProbe::get_downsampleByHalfCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedReflectionProbe*), "get_downsampleByHalfCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BakedReflectionProbe::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BakedReflectionProbe::*)()>(&BakedReflectionProbe::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedReflectionProbe*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BakedReflectionProbe::SendDataToShaders
// Il2CppName: SendDataToShaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BakedReflectionProbe::*)()>(&BakedReflectionProbe::SendDataToShaders)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedReflectionProbe*), "SendDataToShaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BakedReflectionProbe::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BakedReflectionProbe::*)()>(&BakedReflectionProbe::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedReflectionProbe*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BakedReflectionProbe::*)()>(&BakedReflectionProbe::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedReflectionProbe*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BakedReflectionProbe::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BakedReflectionProbe::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BakedReflectionProbe*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CubemapHelpers
#include "GlobalNamespace/CubemapHelpers.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: UnityEngine.Texture
#include "UnityEngine/Texture.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kCubemapHelpersShaderName
::Il2CppString* GlobalNamespace::CubemapHelpers::_get_kCubemapHelpersShaderName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_get_kCubemapHelpersShaderName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "CubemapHelpers", "kCubemapHelpersShaderName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kCubemapHelpersShaderName
void GlobalNamespace::CubemapHelpers::_set_kCubemapHelpersShaderName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_set_kCubemapHelpersShaderName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CubemapHelpers", "kCubemapHelpersShaderName", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27E6C
// Autogenerated static field getter
// Get static field: static private UnityEngine.Material _cubemapHelpersMaterial
UnityEngine::Material* GlobalNamespace::CubemapHelpers::_get__cubemapHelpersMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_get__cubemapHelpersMaterial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Material*>("", "CubemapHelpers", "_cubemapHelpersMaterial"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Material _cubemapHelpersMaterial
void GlobalNamespace::CubemapHelpers::_set__cubemapHelpersMaterial(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_set__cubemapHelpersMaterial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CubemapHelpers", "_cubemapHelpersMaterial", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27E7C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _cubePropertyId
int GlobalNamespace::CubemapHelpers::_get__cubePropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_get__cubePropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CubemapHelpers", "_cubePropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _cubePropertyId
void GlobalNamespace::CubemapHelpers::_set__cubePropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_set__cubePropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CubemapHelpers", "_cubePropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27E8C
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _cubeFaceNumberId
int GlobalNamespace::CubemapHelpers::_get__cubeFaceNumberId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_get__cubeFaceNumberId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CubemapHelpers", "_cubeFaceNumberId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _cubeFaceNumberId
void GlobalNamespace::CubemapHelpers::_set__cubeFaceNumberId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_set__cubeFaceNumberId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CubemapHelpers", "_cubeFaceNumberId", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kCubemapDownsamplePass
int GlobalNamespace::CubemapHelpers::_get_kCubemapDownsamplePass() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_get_kCubemapDownsamplePass");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CubemapHelpers", "kCubemapDownsamplePass"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kCubemapDownsamplePass
void GlobalNamespace::CubemapHelpers::_set_kCubemapDownsamplePass(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_set_kCubemapDownsamplePass");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CubemapHelpers", "kCubemapDownsamplePass", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kCubemapTo2DTexturePass
int GlobalNamespace::CubemapHelpers::_get_kCubemapTo2DTexturePass() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_get_kCubemapTo2DTexturePass");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CubemapHelpers", "kCubemapTo2DTexturePass"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kCubemapTo2DTexturePass
void GlobalNamespace::CubemapHelpers::_set_kCubemapTo2DTexturePass(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_set_kCubemapTo2DTexturePass");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CubemapHelpers", "kCubemapTo2DTexturePass", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27E9C
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Dictionary`2<UnityEngine.CubemapFace,System.Int32> _cubemapFaceToCubeFaceNumberDict
System::Collections::Generic::Dictionary_2<UnityEngine::CubemapFace, int>* GlobalNamespace::CubemapHelpers::_get__cubemapFaceToCubeFaceNumberDict() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_get__cubemapFaceToCubeFaceNumberDict");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<UnityEngine::CubemapFace, int>*>("", "CubemapHelpers", "_cubemapFaceToCubeFaceNumberDict")));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Dictionary`2<UnityEngine.CubemapFace,System.Int32> _cubemapFaceToCubeFaceNumberDict
void GlobalNamespace::CubemapHelpers::_set__cubemapFaceToCubeFaceNumberDict(System::Collections::Generic::Dictionary_2<UnityEngine::CubemapFace, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_set__cubemapFaceToCubeFaceNumberDict");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CubemapHelpers", "_cubemapFaceToCubeFaceNumberDict", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27EAC
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.CubemapFace[] _cubemapFaces
::Array<UnityEngine::CubemapFace>* GlobalNamespace::CubemapHelpers::_get__cubemapFaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_get__cubemapFaces");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::CubemapFace>*>("", "CubemapHelpers", "_cubemapFaces"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.CubemapFace[] _cubemapFaces
void GlobalNamespace::CubemapHelpers::_set__cubemapFaces(::Array<UnityEngine::CubemapFace>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::_set__cubemapFaces");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CubemapHelpers", "_cubemapFaces", value));
}
// Autogenerated method: CubemapHelpers.get_cubemapHelpersMaterial
UnityEngine::Material* GlobalNamespace::CubemapHelpers::get_cubemapHelpersMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::get_cubemapHelpersMaterial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubemapHelpers", "get_cubemapHelpersMaterial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: CubemapHelpers.Downsample
void GlobalNamespace::CubemapHelpers::Downsample(UnityEngine::Texture* src, UnityEngine::RenderTexture* dest) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::Downsample");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubemapHelpers", "Downsample", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(dest)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, src, dest);
}
// Autogenerated method: CubemapHelpers.CreateDownsampledCubemap
UnityEngine::RenderTexture* GlobalNamespace::CubemapHelpers::CreateDownsampledCubemap(UnityEngine::RenderTexture* src, int count) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::CreateDownsampledCubemap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubemapHelpers", "CreateDownsampledCubemap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src), ::il2cpp_utils::ExtractType(count)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RenderTexture*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, src, count);
}
// Autogenerated method: CubemapHelpers.Create2DTextureFromCubemap
UnityEngine::RenderTexture* GlobalNamespace::CubemapHelpers::Create2DTextureFromCubemap(UnityEngine::RenderTexture* src) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::Create2DTextureFromCubemap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubemapHelpers", "Create2DTextureFromCubemap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RenderTexture*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, src);
}
// Autogenerated method: CubemapHelpers.DrawCubemapFace
void GlobalNamespace::CubemapHelpers::DrawCubemapFace(UnityEngine::Texture* cubemap, UnityEngine::CubemapFace cubemapFace) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::DrawCubemapFace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubemapHelpers", "DrawCubemapFace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cubemap), ::il2cpp_utils::ExtractType(cubemapFace)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, cubemap, cubemapFace);
}
// Autogenerated method: CubemapHelpers..cctor
void GlobalNamespace::CubemapHelpers::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapHelpers::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubemapHelpers", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: CubemapHelpers::get_cubemapHelpersMaterial
// Il2CppName: get_cubemapHelpersMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (*)()>(&CubemapHelpers::get_cubemapHelpersMaterial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CubemapHelpers*), "get_cubemapHelpersMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CubemapHelpers::Downsample
// Il2CppName: Downsample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Texture*, UnityEngine::RenderTexture*)>(&CubemapHelpers::Downsample)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CubemapHelpers*), "Downsample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: CubemapHelpers::CreateDownsampledCubemap
// Il2CppName: CreateDownsampledCubemap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RenderTexture* (*)(UnityEngine::RenderTexture*, int)>(&CubemapHelpers::CreateDownsampledCubemap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CubemapHelpers*), "CreateDownsampledCubemap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: CubemapHelpers::Create2DTextureFromCubemap
// Il2CppName: Create2DTextureFromCubemap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RenderTexture* (*)(UnityEngine::RenderTexture*)>(&CubemapHelpers::Create2DTextureFromCubemap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CubemapHelpers*), "Create2DTextureFromCubemap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Writing MetadataGetter for method: CubemapHelpers::DrawCubemapFace
// Il2CppName: DrawCubemapFace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Texture*, UnityEngine::CubemapFace)>(&CubemapHelpers::DrawCubemapFace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CubemapHelpers*), "DrawCubemapFace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::CubemapFace>()});
  }
};
// Writing MetadataGetter for method: CubemapHelpers::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CubemapHelpers::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CubemapHelpers*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CubemapTest
#include "GlobalNamespace/CubemapTest.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE27EEC
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 _cubePropertyId
int GlobalNamespace::CubemapTest::_get__cubePropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapTest::_get__cubePropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CubemapTest", "_cubePropertyId"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 _cubePropertyId
void GlobalNamespace::CubemapTest::_set__cubePropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapTest::_set__cubePropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CubemapTest", "_cubePropertyId", value));
}
// Autogenerated method: CubemapTest.Start
void GlobalNamespace::CubemapTest::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapTest::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CubemapTest.Update
void GlobalNamespace::CubemapTest::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapTest::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CubemapTest..cctor
void GlobalNamespace::CubemapTest::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CubemapTest::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "CubemapTest", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: CubemapTest::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CubemapTest::*)()>(&CubemapTest::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CubemapTest*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CubemapTest::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CubemapTest::*)()>(&CubemapTest::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CubemapTest*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CubemapTest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CubemapTest::*)()>(&CubemapTest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CubemapTest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CubemapTest::*)()>(&CubemapTest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CubemapTest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CubemapTest::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&CubemapTest::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CubemapTest*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DisableWhenMirrorIsEnabled
#include "GlobalNamespace/DisableWhenMirrorIsEnabled.hpp"
// Including type: Mirror
#include "GlobalNamespace/Mirror.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: DisableWhenMirrorIsEnabled.get_mirror
GlobalNamespace::Mirror* GlobalNamespace::DisableWhenMirrorIsEnabled::get_mirror() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisableWhenMirrorIsEnabled::get_mirror");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mirror", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::Mirror*, false>(this, ___internal__method);
}
// Autogenerated method: DisableWhenMirrorIsEnabled.set_mirror
void GlobalNamespace::DisableWhenMirrorIsEnabled::set_mirror(GlobalNamespace::Mirror* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisableWhenMirrorIsEnabled::set_mirror");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mirror", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: DisableWhenMirrorIsEnabled.Start
void GlobalNamespace::DisableWhenMirrorIsEnabled::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisableWhenMirrorIsEnabled::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DisableWhenMirrorIsEnabled.OnDestroy
void GlobalNamespace::DisableWhenMirrorIsEnabled::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisableWhenMirrorIsEnabled::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: DisableWhenMirrorIsEnabled.HandleMirrorDidChangeEnabledState
void GlobalNamespace::DisableWhenMirrorIsEnabled::HandleMirrorDidChangeEnabledState(bool isEnabled) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::DisableWhenMirrorIsEnabled::HandleMirrorDidChangeEnabledState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMirrorDidChangeEnabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isEnabled)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isEnabled);
}
// Writing MetadataGetter for method: DisableWhenMirrorIsEnabled::get_mirror
// Il2CppName: get_mirror
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::Mirror* (DisableWhenMirrorIsEnabled::*)()>(&DisableWhenMirrorIsEnabled::get_mirror)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableWhenMirrorIsEnabled*), "get_mirror", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisableWhenMirrorIsEnabled::set_mirror
// Il2CppName: set_mirror
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableWhenMirrorIsEnabled::*)(GlobalNamespace::Mirror*)>(&DisableWhenMirrorIsEnabled::set_mirror)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableWhenMirrorIsEnabled*), "set_mirror", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Mirror*>()});
  }
};
// Writing MetadataGetter for method: DisableWhenMirrorIsEnabled::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableWhenMirrorIsEnabled::*)()>(&DisableWhenMirrorIsEnabled::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableWhenMirrorIsEnabled*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisableWhenMirrorIsEnabled::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableWhenMirrorIsEnabled::*)()>(&DisableWhenMirrorIsEnabled::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableWhenMirrorIsEnabled*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: DisableWhenMirrorIsEnabled::HandleMirrorDidChangeEnabledState
// Il2CppName: HandleMirrorDidChangeEnabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableWhenMirrorIsEnabled::*)(bool)>(&DisableWhenMirrorIsEnabled::HandleMirrorDidChangeEnabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableWhenMirrorIsEnabled*), "HandleMirrorDidChangeEnabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: DisableWhenMirrorIsEnabled::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableWhenMirrorIsEnabled::*)()>(&DisableWhenMirrorIsEnabled::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableWhenMirrorIsEnabled*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableWhenMirrorIsEnabled::*)()>(&DisableWhenMirrorIsEnabled::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableWhenMirrorIsEnabled*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DuplicateMirrorForReflectionProbe
#include "GlobalNamespace/DuplicateMirrorForReflectionProbe.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: DuplicateMirrorForReflectionProbe::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DuplicateMirrorForReflectionProbe::*)()>(&DuplicateMirrorForReflectionProbe::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DuplicateMirrorForReflectionProbe*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DuplicateMirrorForReflectionProbe::*)()>(&DuplicateMirrorForReflectionProbe::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DuplicateMirrorForReflectionProbe*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FakeReflectionDynamicObjectsState
#include "GlobalNamespace/FakeReflectionDynamicObjectsState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FakeReflectionDynamicObjectsState Disabled
GlobalNamespace::FakeReflectionDynamicObjectsState GlobalNamespace::FakeReflectionDynamicObjectsState::_get_Disabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeReflectionDynamicObjectsState::_get_Disabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::FakeReflectionDynamicObjectsState>("", "FakeReflectionDynamicObjectsState", "Disabled"));
}
// Autogenerated static field setter
// Set static field: static public FakeReflectionDynamicObjectsState Disabled
void GlobalNamespace::FakeReflectionDynamicObjectsState::_set_Disabled(GlobalNamespace::FakeReflectionDynamicObjectsState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeReflectionDynamicObjectsState::_set_Disabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FakeReflectionDynamicObjectsState", "Disabled", value));
}
// Autogenerated static field getter
// Get static field: static public FakeReflectionDynamicObjectsState Enabled
GlobalNamespace::FakeReflectionDynamicObjectsState GlobalNamespace::FakeReflectionDynamicObjectsState::_get_Enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeReflectionDynamicObjectsState::_get_Enabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::FakeReflectionDynamicObjectsState>("", "FakeReflectionDynamicObjectsState", "Enabled"));
}
// Autogenerated static field setter
// Set static field: static public FakeReflectionDynamicObjectsState Enabled
void GlobalNamespace::FakeReflectionDynamicObjectsState::_set_Enabled(GlobalNamespace::FakeReflectionDynamicObjectsState value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeReflectionDynamicObjectsState::_set_Enabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FakeReflectionDynamicObjectsState", "Enabled", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IgnoreForReflectionProbeBaking
#include "GlobalNamespace/IgnoreForReflectionProbeBaking.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: IgnoreForReflectionProbeBaking::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IgnoreForReflectionProbeBaking::*)()>(&IgnoreForReflectionProbeBaking::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IgnoreForReflectionProbeBaking*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IgnoreForReflectionProbeBaking::*)()>(&IgnoreForReflectionProbeBaking::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IgnoreForReflectionProbeBaking*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LightBakingPersistentSettingsSO
#include "GlobalNamespace/LightBakingPersistentSettingsSO.hpp"
// Including type: BloomPrePassEffectSO
#include "GlobalNamespace/BloomPrePassEffectSO.hpp"
// Including type: MainEffectSO
#include "GlobalNamespace/MainEffectSO.hpp"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
// Including type: MirrorRendererGraphicsSettingsPresets
#include "GlobalNamespace/MirrorRendererGraphicsSettingsPresets.hpp"
// Including type: MainEffectGraphicsSettingsPresetsSO
#include "GlobalNamespace/MainEffectGraphicsSettingsPresetsSO.hpp"
// Including type: BloomPrePassGraphicsSettingsPresetsSO
#include "GlobalNamespace/BloomPrePassGraphicsSettingsPresetsSO.hpp"
// Including type: MirrorRendererSO
#include "GlobalNamespace/MirrorRendererSO.hpp"
// Including type: MainEffectContainerSO
#include "GlobalNamespace/MainEffectContainerSO.hpp"
// Including type: BloomPrePassEffectContainerSO
#include "GlobalNamespace/BloomPrePassEffectContainerSO.hpp"
// Including type: BakedLightDataLoader
#include "GlobalNamespace/BakedLightDataLoader.hpp"
// Including type: BakedReflectionProbe
#include "GlobalNamespace/BakedReflectionProbe.hpp"
// Including type: LightmapLightWithIds
#include "GlobalNamespace/LightmapLightWithIds.hpp"
// Including type: FakeMirrorObjectsInstaller
#include "GlobalNamespace/FakeMirrorObjectsInstaller.hpp"
// Including type: FakeMirrorSettings
#include "GlobalNamespace/FakeMirrorSettings.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kDefaultMirrorGraphicsSettings
int GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultMirrorGraphicsSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultMirrorGraphicsSettings");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightBakingPersistentSettingsSO", "kDefaultMirrorGraphicsSettings"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kDefaultMirrorGraphicsSettings
void GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultMirrorGraphicsSettings(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultMirrorGraphicsSettings");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightBakingPersistentSettingsSO", "kDefaultMirrorGraphicsSettings", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kDefaultMainEffectGraphicsSettings
int GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultMainEffectGraphicsSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultMainEffectGraphicsSettings");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightBakingPersistentSettingsSO", "kDefaultMainEffectGraphicsSettings"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kDefaultMainEffectGraphicsSettings
void GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultMainEffectGraphicsSettings(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultMainEffectGraphicsSettings");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightBakingPersistentSettingsSO", "kDefaultMainEffectGraphicsSettings", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kDefaultAntiAliasingLevel
int GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultAntiAliasingLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultAntiAliasingLevel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "LightBakingPersistentSettingsSO", "kDefaultAntiAliasingLevel"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kDefaultAntiAliasingLevel
void GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultAntiAliasingLevel(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultAntiAliasingLevel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightBakingPersistentSettingsSO", "kDefaultAntiAliasingLevel", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kDefaultVrResolutionScale
float GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultVrResolutionScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultVrResolutionScale");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LightBakingPersistentSettingsSO", "kDefaultVrResolutionScale"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kDefaultVrResolutionScale
void GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultVrResolutionScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultVrResolutionScale");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightBakingPersistentSettingsSO", "kDefaultVrResolutionScale", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kDefaultMenuVRResolutionScaleMultiplier
float GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultMenuVRResolutionScaleMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultMenuVRResolutionScaleMultiplier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "LightBakingPersistentSettingsSO", "kDefaultMenuVRResolutionScaleMultiplier"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kDefaultMenuVRResolutionScaleMultiplier
void GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultMenuVRResolutionScaleMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultMenuVRResolutionScaleMultiplier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightBakingPersistentSettingsSO", "kDefaultMenuVRResolutionScaleMultiplier", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean kDefaultUseFixedFoveatedRenderingDuringGameplay
bool GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultUseFixedFoveatedRenderingDuringGameplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultUseFixedFoveatedRenderingDuringGameplay");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "LightBakingPersistentSettingsSO", "kDefaultUseFixedFoveatedRenderingDuringGameplay"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean kDefaultUseFixedFoveatedRenderingDuringGameplay
void GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultUseFixedFoveatedRenderingDuringGameplay(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultUseFixedFoveatedRenderingDuringGameplay");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightBakingPersistentSettingsSO", "kDefaultUseFixedFoveatedRenderingDuringGameplay", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean kDefaultBurnMarkTrailsEnabled
bool GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultBurnMarkTrailsEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultBurnMarkTrailsEnabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "LightBakingPersistentSettingsSO", "kDefaultBurnMarkTrailsEnabled"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean kDefaultBurnMarkTrailsEnabled
void GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultBurnMarkTrailsEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultBurnMarkTrailsEnabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightBakingPersistentSettingsSO", "kDefaultBurnMarkTrailsEnabled", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean kDefaultScreenDisplacementEffectsEnabled
bool GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultScreenDisplacementEffectsEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_get_kDefaultScreenDisplacementEffectsEnabled");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "LightBakingPersistentSettingsSO", "kDefaultScreenDisplacementEffectsEnabled"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean kDefaultScreenDisplacementEffectsEnabled
void GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultScreenDisplacementEffectsEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::_set_kDefaultScreenDisplacementEffectsEnabled");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "LightBakingPersistentSettingsSO", "kDefaultScreenDisplacementEffectsEnabled", value));
}
// Autogenerated method: LightBakingPersistentSettingsSO.get_reflectionsCount
int GlobalNamespace::LightBakingPersistentSettingsSO::get_reflectionsCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::get_reflectionsCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_reflectionsCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: LightBakingPersistentSettingsSO.set_reflectionsCount
void GlobalNamespace::LightBakingPersistentSettingsSO::set_reflectionsCount(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::set_reflectionsCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_reflectionsCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightBakingPersistentSettingsSO.get_colorFromSchemeAlpha
float GlobalNamespace::LightBakingPersistentSettingsSO::get_colorFromSchemeAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::get_colorFromSchemeAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorFromSchemeAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: LightBakingPersistentSettingsSO.set_colorFromSchemeAlpha
void GlobalNamespace::LightBakingPersistentSettingsSO::set_colorFromSchemeAlpha(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::set_colorFromSchemeAlpha");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_colorFromSchemeAlpha", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightBakingPersistentSettingsSO.get_bakedLightEditorColors
::Array<UnityEngine::Color>* GlobalNamespace::LightBakingPersistentSettingsSO::get_bakedLightEditorColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::get_bakedLightEditorColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bakedLightEditorColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Color>*, false>(this, ___internal__method);
}
// Autogenerated method: LightBakingPersistentSettingsSO.get_defaultDepthOnlyWriteMaterialForFakeMirror
UnityEngine::Material* GlobalNamespace::LightBakingPersistentSettingsSO::get_defaultDepthOnlyWriteMaterialForFakeMirror() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::get_defaultDepthOnlyWriteMaterialForFakeMirror");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultDepthOnlyWriteMaterialForFakeMirror", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Material*, false>(this, ___internal__method);
}
// Autogenerated method: LightBakingPersistentSettingsSO.get_mainEffectForBakingIsOn
bool GlobalNamespace::LightBakingPersistentSettingsSO::get_mainEffectForBakingIsOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::get_mainEffectForBakingIsOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mainEffectForBakingIsOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LightBakingPersistentSettingsSO.set_mainEffectForBakingIsOn
void GlobalNamespace::LightBakingPersistentSettingsSO::set_mainEffectForBakingIsOn(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::set_mainEffectForBakingIsOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mainEffectForBakingIsOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightBakingPersistentSettingsSO.get_bakedLightDataLoaderPrefab
GlobalNamespace::BakedLightDataLoader* GlobalNamespace::LightBakingPersistentSettingsSO::get_bakedLightDataLoaderPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::get_bakedLightDataLoaderPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bakedLightDataLoaderPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BakedLightDataLoader*, false>(this, ___internal__method);
}
// Autogenerated method: LightBakingPersistentSettingsSO.get_bakedReflectionProbePrefab
GlobalNamespace::BakedReflectionProbe* GlobalNamespace::LightBakingPersistentSettingsSO::get_bakedReflectionProbePrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::get_bakedReflectionProbePrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bakedReflectionProbePrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BakedReflectionProbe*, false>(this, ___internal__method);
}
// Autogenerated method: LightBakingPersistentSettingsSO.get_lightmapLightWithIds
GlobalNamespace::LightmapLightWithIds* GlobalNamespace::LightBakingPersistentSettingsSO::get_lightmapLightWithIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::get_lightmapLightWithIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightmapLightWithIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LightmapLightWithIds*, false>(this, ___internal__method);
}
// Autogenerated method: LightBakingPersistentSettingsSO.get_fakeMirrorObjectsInstallerPrefab
GlobalNamespace::FakeMirrorObjectsInstaller* GlobalNamespace::LightBakingPersistentSettingsSO::get_fakeMirrorObjectsInstallerPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::get_fakeMirrorObjectsInstallerPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fakeMirrorObjectsInstallerPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::FakeMirrorObjectsInstaller*, false>(this, ___internal__method);
}
// Autogenerated method: LightBakingPersistentSettingsSO.get_fakeMirrorSettingsPrefab
GlobalNamespace::FakeMirrorSettings* GlobalNamespace::LightBakingPersistentSettingsSO::get_fakeMirrorSettingsPrefab() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::get_fakeMirrorSettingsPrefab");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_fakeMirrorSettingsPrefab", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::FakeMirrorSettings*, false>(this, ___internal__method);
}
// Autogenerated method: LightBakingPersistentSettingsSO.SetGraphicsSettingsForBaking
void GlobalNamespace::LightBakingPersistentSettingsSO::SetGraphicsSettingsForBaking() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::SetGraphicsSettingsForBaking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetGraphicsSettingsForBaking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightBakingPersistentSettingsSO.SetPlatformGraphics
void GlobalNamespace::LightBakingPersistentSettingsSO::SetPlatformGraphics() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::SetPlatformGraphics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlatformGraphics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LightBakingPersistentSettingsSO.SetToneMappingOn
void GlobalNamespace::LightBakingPersistentSettingsSO::SetToneMappingOn(bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::SetToneMappingOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToneMappingOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isOn);
}
// Autogenerated method: LightBakingPersistentSettingsSO.IsToneMappingOn
bool GlobalNamespace::LightBakingPersistentSettingsSO::IsToneMappingOn() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightBakingPersistentSettingsSO::IsToneMappingOn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsToneMappingOn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::get_reflectionsCount
// Il2CppName: get_reflectionsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LightBakingPersistentSettingsSO::*)()>(&LightBakingPersistentSettingsSO::get_reflectionsCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "get_reflectionsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::set_reflectionsCount
// Il2CppName: set_reflectionsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightBakingPersistentSettingsSO::*)(int)>(&LightBakingPersistentSettingsSO::set_reflectionsCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "set_reflectionsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::get_colorFromSchemeAlpha
// Il2CppName: get_colorFromSchemeAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (LightBakingPersistentSettingsSO::*)()>(&LightBakingPersistentSettingsSO::get_colorFromSchemeAlpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "get_colorFromSchemeAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::set_colorFromSchemeAlpha
// Il2CppName: set_colorFromSchemeAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightBakingPersistentSettingsSO::*)(float)>(&LightBakingPersistentSettingsSO::set_colorFromSchemeAlpha)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "set_colorFromSchemeAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::get_bakedLightEditorColors
// Il2CppName: get_bakedLightEditorColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Color>* (LightBakingPersistentSettingsSO::*)()>(&LightBakingPersistentSettingsSO::get_bakedLightEditorColors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "get_bakedLightEditorColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::get_defaultDepthOnlyWriteMaterialForFakeMirror
// Il2CppName: get_defaultDepthOnlyWriteMaterialForFakeMirror
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Material* (LightBakingPersistentSettingsSO::*)()>(&LightBakingPersistentSettingsSO::get_defaultDepthOnlyWriteMaterialForFakeMirror)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "get_defaultDepthOnlyWriteMaterialForFakeMirror", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::get_mainEffectForBakingIsOn
// Il2CppName: get_mainEffectForBakingIsOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LightBakingPersistentSettingsSO::*)()>(&LightBakingPersistentSettingsSO::get_mainEffectForBakingIsOn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "get_mainEffectForBakingIsOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::set_mainEffectForBakingIsOn
// Il2CppName: set_mainEffectForBakingIsOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightBakingPersistentSettingsSO::*)(bool)>(&LightBakingPersistentSettingsSO::set_mainEffectForBakingIsOn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "set_mainEffectForBakingIsOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::get_bakedLightDataLoaderPrefab
// Il2CppName: get_bakedLightDataLoaderPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BakedLightDataLoader* (LightBakingPersistentSettingsSO::*)()>(&LightBakingPersistentSettingsSO::get_bakedLightDataLoaderPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "get_bakedLightDataLoaderPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::get_bakedReflectionProbePrefab
// Il2CppName: get_bakedReflectionProbePrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BakedReflectionProbe* (LightBakingPersistentSettingsSO::*)()>(&LightBakingPersistentSettingsSO::get_bakedReflectionProbePrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "get_bakedReflectionProbePrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::get_lightmapLightWithIds
// Il2CppName: get_lightmapLightWithIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LightmapLightWithIds* (LightBakingPersistentSettingsSO::*)()>(&LightBakingPersistentSettingsSO::get_lightmapLightWithIds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "get_lightmapLightWithIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::get_fakeMirrorObjectsInstallerPrefab
// Il2CppName: get_fakeMirrorObjectsInstallerPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::FakeMirrorObjectsInstaller* (LightBakingPersistentSettingsSO::*)()>(&LightBakingPersistentSettingsSO::get_fakeMirrorObjectsInstallerPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "get_fakeMirrorObjectsInstallerPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::get_fakeMirrorSettingsPrefab
// Il2CppName: get_fakeMirrorSettingsPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::FakeMirrorSettings* (LightBakingPersistentSettingsSO::*)()>(&LightBakingPersistentSettingsSO::get_fakeMirrorSettingsPrefab)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "get_fakeMirrorSettingsPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::SetGraphicsSettingsForBaking
// Il2CppName: SetGraphicsSettingsForBaking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightBakingPersistentSettingsSO::*)()>(&LightBakingPersistentSettingsSO::SetGraphicsSettingsForBaking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "SetGraphicsSettingsForBaking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::SetPlatformGraphics
// Il2CppName: SetPlatformGraphics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightBakingPersistentSettingsSO::*)()>(&LightBakingPersistentSettingsSO::SetPlatformGraphics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "SetPlatformGraphics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::SetToneMappingOn
// Il2CppName: SetToneMappingOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightBakingPersistentSettingsSO::*)(bool)>(&LightBakingPersistentSettingsSO::SetToneMappingOn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "SetToneMappingOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::IsToneMappingOn
// Il2CppName: IsToneMappingOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LightBakingPersistentSettingsSO::*)()>(&LightBakingPersistentSettingsSO::IsToneMappingOn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), "IsToneMappingOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightBakingPersistentSettingsSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightBakingPersistentSettingsSO::*)()>(&LightBakingPersistentSettingsSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightBakingPersistentSettingsSO::*)()>(&LightBakingPersistentSettingsSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightBakingPersistentSettingsSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LightmapDataSO
#include "GlobalNamespace/LightmapDataSO.hpp"
// Including type: UnityEngine.Texture2D
#include "UnityEngine/Texture2D.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LightmapDataSO.get_lightmap1
UnityEngine::Texture2D* GlobalNamespace::LightmapDataSO::get_lightmap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapDataSO::get_lightmap1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightmap1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture2D*, false>(this, ___internal__method);
}
// Autogenerated method: LightmapDataSO.set_lightmap1
void GlobalNamespace::LightmapDataSO::set_lightmap1(UnityEngine::Texture2D* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapDataSO::set_lightmap1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lightmap1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: LightmapDataSO.get_lightmap2
UnityEngine::Texture2D* GlobalNamespace::LightmapDataSO::get_lightmap2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapDataSO::get_lightmap2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightmap2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Texture2D*, false>(this, ___internal__method);
}
// Autogenerated method: LightmapDataSO.set_lightmap2
void GlobalNamespace::LightmapDataSO::set_lightmap2(UnityEngine::Texture2D* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightmapDataSO::set_lightmap2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lightmap2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: LightmapDataSO::get_lightmap1
// Il2CppName: get_lightmap1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture2D* (LightmapDataSO::*)()>(&LightmapDataSO::get_lightmap1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapDataSO*), "get_lightmap1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightmapDataSO::set_lightmap1
// Il2CppName: set_lightmap1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmapDataSO::*)(UnityEngine::Texture2D*)>(&LightmapDataSO::set_lightmap1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapDataSO*), "set_lightmap1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture2D*>()});
  }
};
// Writing MetadataGetter for method: LightmapDataSO::get_lightmap2
// Il2CppName: get_lightmap2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Texture2D* (LightmapDataSO::*)()>(&LightmapDataSO::get_lightmap2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapDataSO*), "get_lightmap2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LightmapDataSO::set_lightmap2
// Il2CppName: set_lightmap2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmapDataSO::*)(UnityEngine::Texture2D*)>(&LightmapDataSO::set_lightmap2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapDataSO*), "set_lightmap2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Texture2D*>()});
  }
};
// Writing MetadataGetter for method: LightmapDataSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmapDataSO::*)()>(&LightmapDataSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LightmapDataSO::*)()>(&LightmapDataSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LightmapDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PseudoHDREncoding
#include "GlobalNamespace/PseudoHDREncoding.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.RenderTexture
#include "UnityEngine/RenderTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE280EC
// Autogenerated static field getter
// Get static field: static private System.String kPseudoHDREncodingShaderName
::Il2CppString* GlobalNamespace::PseudoHDREncoding::_get_kPseudoHDREncodingShaderName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PseudoHDREncoding::_get_kPseudoHDREncodingShaderName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "PseudoHDREncoding", "kPseudoHDREncodingShaderName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kPseudoHDREncodingShaderName
void GlobalNamespace::PseudoHDREncoding::_set_kPseudoHDREncodingShaderName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PseudoHDREncoding::_set_kPseudoHDREncodingShaderName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PseudoHDREncoding", "kPseudoHDREncodingShaderName", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE280FC
// Autogenerated static field getter
// Get static field: static private UnityEngine.Material _material
UnityEngine::Material* GlobalNamespace::PseudoHDREncoding::_get__material() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PseudoHDREncoding::_get__material");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Material*>("", "PseudoHDREncoding", "_material"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Material _material
void GlobalNamespace::PseudoHDREncoding::_set__material(UnityEngine::Material* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PseudoHDREncoding::_set__material");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PseudoHDREncoding", "_material", value));
}
// Autogenerated method: PseudoHDREncoding.CreatePseudoHDREncodedTexture
UnityEngine::RenderTexture* GlobalNamespace::PseudoHDREncoding::CreatePseudoHDREncodedTexture(UnityEngine::RenderTexture* src) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PseudoHDREncoding::CreatePseudoHDREncodedTexture");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "PseudoHDREncoding", "CreatePseudoHDREncodedTexture", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(src)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RenderTexture*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, src);
}
// Writing MetadataGetter for method: PseudoHDREncoding::CreatePseudoHDREncodedTexture
// Il2CppName: CreatePseudoHDREncodedTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RenderTexture* (*)(UnityEngine::RenderTexture*)>(&PseudoHDREncoding::CreatePseudoHDREncodedTexture)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PseudoHDREncoding*), "CreatePseudoHDREncodedTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTexture*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ReflectionProbeDataSO
#include "GlobalNamespace/ReflectionProbeDataSO.hpp"
// Including type: UnityEngine.Cubemap
#include "UnityEngine/Cubemap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ReflectionProbeDataSO.get_reflectionProbeCubemap1
UnityEngine::Cubemap* GlobalNamespace::ReflectionProbeDataSO::get_reflectionProbeCubemap1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ReflectionProbeDataSO::get_reflectionProbeCubemap1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_reflectionProbeCubemap1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Cubemap*, false>(this, ___internal__method);
}
// Autogenerated method: ReflectionProbeDataSO.set_reflectionProbeCubemap1
void GlobalNamespace::ReflectionProbeDataSO::set_reflectionProbeCubemap1(UnityEngine::Cubemap* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ReflectionProbeDataSO::set_reflectionProbeCubemap1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_reflectionProbeCubemap1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ReflectionProbeDataSO.get_reflectionProbeCubemap2
UnityEngine::Cubemap* GlobalNamespace::ReflectionProbeDataSO::get_reflectionProbeCubemap2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ReflectionProbeDataSO::get_reflectionProbeCubemap2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_reflectionProbeCubemap2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Cubemap*, false>(this, ___internal__method);
}
// Autogenerated method: ReflectionProbeDataSO.set_reflectionProbeCubemap2
void GlobalNamespace::ReflectionProbeDataSO::set_reflectionProbeCubemap2(UnityEngine::Cubemap* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ReflectionProbeDataSO::set_reflectionProbeCubemap2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_reflectionProbeCubemap2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: ReflectionProbeDataSO::get_reflectionProbeCubemap1
// Il2CppName: get_reflectionProbeCubemap1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Cubemap* (ReflectionProbeDataSO::*)()>(&ReflectionProbeDataSO::get_reflectionProbeCubemap1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReflectionProbeDataSO*), "get_reflectionProbeCubemap1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ReflectionProbeDataSO::set_reflectionProbeCubemap1
// Il2CppName: set_reflectionProbeCubemap1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReflectionProbeDataSO::*)(UnityEngine::Cubemap*)>(&ReflectionProbeDataSO::set_reflectionProbeCubemap1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReflectionProbeDataSO*), "set_reflectionProbeCubemap1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Cubemap*>()});
  }
};
// Writing MetadataGetter for method: ReflectionProbeDataSO::get_reflectionProbeCubemap2
// Il2CppName: get_reflectionProbeCubemap2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Cubemap* (ReflectionProbeDataSO::*)()>(&ReflectionProbeDataSO::get_reflectionProbeCubemap2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReflectionProbeDataSO*), "get_reflectionProbeCubemap2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ReflectionProbeDataSO::set_reflectionProbeCubemap2
// Il2CppName: set_reflectionProbeCubemap2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReflectionProbeDataSO::*)(UnityEngine::Cubemap*)>(&ReflectionProbeDataSO::set_reflectionProbeCubemap2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReflectionProbeDataSO*), "set_reflectionProbeCubemap2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Cubemap*>()});
  }
};
// Writing MetadataGetter for method: ReflectionProbeDataSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReflectionProbeDataSO::*)()>(&ReflectionProbeDataSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReflectionProbeDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ReflectionProbeDataSO::*)()>(&ReflectionProbeDataSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ReflectionProbeDataSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ListExtensions
#include "GlobalNamespace/ListExtensions.hpp"
// Including type: System.Random
#include "System/Random.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE2812C
// Autogenerated static field getter
// Get static field: static private readonly System.Random _random
System::Random* GlobalNamespace::ListExtensions::_get__random() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ListExtensions::_get__random");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Random*>("", "ListExtensions", "_random"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Random _random
void GlobalNamespace::ListExtensions::_set__random(System::Random* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ListExtensions::_set__random");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ListExtensions", "_random", value));
}
// Autogenerated method: ListExtensions..cctor
void GlobalNamespace::ListExtensions::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ListExtensions::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ListExtensions", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: ListExtensions::IndexOf
// Il2CppName: IndexOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ListExtensions::ShuffleInPlace
// Il2CppName: ShuffleInPlace
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ListExtensions::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ListExtensions::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ListExtensions*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalizedAudioClipSO
#include "GlobalNamespace/LocalizedAudioClipSO.hpp"
// Including type: LocalizedAudioClipSO/LocalizedAudioClipInfo
#include "GlobalNamespace/LocalizedAudioClipSO_LocalizedAudioClipInfo.hpp"
// Including type: LocalizedAudioClipSO/<>c__DisplayClass4_0
#include "GlobalNamespace/LocalizedAudioClipSO_--c__DisplayClass4_0.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalizedAudioClipSO.get_localizedAudioClip
UnityEngine::AudioClip* GlobalNamespace::LocalizedAudioClipSO::get_localizedAudioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalizedAudioClipSO::get_localizedAudioClip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedAudioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LocalizedAudioClipSO::get_localizedAudioClip
// Il2CppName: get_localizedAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (LocalizedAudioClipSO::*)()>(&LocalizedAudioClipSO::get_localizedAudioClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedAudioClipSO*), "get_localizedAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalizedAudioClipSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedAudioClipSO::*)()>(&LocalizedAudioClipSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedAudioClipSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedAudioClipSO::*)()>(&LocalizedAudioClipSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedAudioClipSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LocalizedAudioClipSO/LocalizedAudioClipInfo
#include "GlobalNamespace/LocalizedAudioClipSO_LocalizedAudioClipInfo.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LocalizedAudioClipSO::LocalizedAudioClipInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedAudioClipSO::LocalizedAudioClipInfo::*)()>(&LocalizedAudioClipSO::LocalizedAudioClipInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedAudioClipSO::LocalizedAudioClipInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedAudioClipSO::LocalizedAudioClipInfo::*)()>(&LocalizedAudioClipSO::LocalizedAudioClipInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedAudioClipSO::LocalizedAudioClipInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LocalizedAudioClipSO/<>c__DisplayClass4_0
#include "GlobalNamespace/LocalizedAudioClipSO_--c__DisplayClass4_0.hpp"
// Including type: LocalizedAudioClipSO/LocalizedAudioClipInfo
#include "GlobalNamespace/LocalizedAudioClipSO_LocalizedAudioClipInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalizedAudioClipSO/<>c__DisplayClass4_0.<get_localizedAudioClip>b__0
bool GlobalNamespace::LocalizedAudioClipSO::$$c__DisplayClass4_0::$get_localizedAudioClip$b__0(GlobalNamespace::LocalizedAudioClipSO::LocalizedAudioClipInfo* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalizedAudioClipSO::$$c__DisplayClass4_0::<get_localizedAudioClip>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_localizedAudioClip>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: LocalizedAudioClipSO::$$c__DisplayClass4_0::$get_localizedAudioClip$b__0
// Il2CppName: <get_localizedAudioClip>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalizedAudioClipSO::$$c__DisplayClass4_0::*)(GlobalNamespace::LocalizedAudioClipSO::LocalizedAudioClipInfo*)>(&LocalizedAudioClipSO::$$c__DisplayClass4_0::$get_localizedAudioClip$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedAudioClipSO::$$c__DisplayClass4_0*), "<get_localizedAudioClip>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalizedAudioClipSO::LocalizedAudioClipInfo*>()});
  }
};
// Writing MetadataGetter for method: LocalizedAudioClipSO::$$c__DisplayClass4_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedAudioClipSO::$$c__DisplayClass4_0::*)()>(&LocalizedAudioClipSO::$$c__DisplayClass4_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedAudioClipSO::$$c__DisplayClass4_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedAudioClipSO::$$c__DisplayClass4_0::*)()>(&LocalizedAudioClipSO::$$c__DisplayClass4_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedAudioClipSO::$$c__DisplayClass4_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalizedTextAsset
#include "GlobalNamespace/LocalizedTextAsset.hpp"
// Including type: LocalizedTextAsset/TextInfo
#include "GlobalNamespace/LocalizedTextAsset_TextInfo.hpp"
// Including type: LocalizedTextAsset/<>c__DisplayClass6_0
#include "GlobalNamespace/LocalizedTextAsset_--c__DisplayClass6_0.hpp"
// Including type: LocalizedTextAsset/<>c
#include "GlobalNamespace/LocalizedTextAsset_--c.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalizedTextAsset.get_textInfos
::Array<GlobalNamespace::LocalizedTextAsset::TextInfo*>* GlobalNamespace::LocalizedTextAsset::get_textInfos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalizedTextAsset::get_textInfos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_textInfos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::LocalizedTextAsset::TextInfo*>*, false>(this, ___internal__method);
}
// Autogenerated method: LocalizedTextAsset.get_localizedText
::Il2CppString* GlobalNamespace::LocalizedTextAsset::get_localizedText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalizedTextAsset::get_localizedText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localizedText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LocalizedTextAsset::get_textInfos
// Il2CppName: get_textInfos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::LocalizedTextAsset::TextInfo*>* (LocalizedTextAsset::*)()>(&LocalizedTextAsset::get_textInfos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextAsset*), "get_textInfos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalizedTextAsset::get_localizedText
// Il2CppName: get_localizedText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LocalizedTextAsset::*)()>(&LocalizedTextAsset::get_localizedText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextAsset*), "get_localizedText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalizedTextAsset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextAsset::*)()>(&LocalizedTextAsset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextAsset::*)()>(&LocalizedTextAsset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LocalizedTextAsset/TextInfo
#include "GlobalNamespace/LocalizedTextAsset_TextInfo.hpp"
// Including type: UnityEngine.TextAsset
#include "UnityEngine/TextAsset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LocalizedTextAsset::TextInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextAsset::TextInfo::*)()>(&LocalizedTextAsset::TextInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextAsset::TextInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextAsset::TextInfo::*)()>(&LocalizedTextAsset::TextInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextAsset::TextInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LocalizedTextAsset/<>c__DisplayClass6_0
#include "GlobalNamespace/LocalizedTextAsset_--c__DisplayClass6_0.hpp"
// Including type: LocalizedTextAsset/TextInfo
#include "GlobalNamespace/LocalizedTextAsset_TextInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalizedTextAsset/<>c__DisplayClass6_0.<get_localizedText>b__1
bool GlobalNamespace::LocalizedTextAsset::$$c__DisplayClass6_0::$get_localizedText$b__1(GlobalNamespace::LocalizedTextAsset::TextInfo* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalizedTextAsset::$$c__DisplayClass6_0::<get_localizedText>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_localizedText>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: LocalizedTextAsset::$$c__DisplayClass6_0::$get_localizedText$b__1
// Il2CppName: <get_localizedText>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalizedTextAsset::$$c__DisplayClass6_0::*)(GlobalNamespace::LocalizedTextAsset::TextInfo*)>(&LocalizedTextAsset::$$c__DisplayClass6_0::$get_localizedText$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextAsset::$$c__DisplayClass6_0*), "<get_localizedText>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalizedTextAsset::TextInfo*>()});
  }
};
// Writing MetadataGetter for method: LocalizedTextAsset::$$c__DisplayClass6_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextAsset::$$c__DisplayClass6_0::*)()>(&LocalizedTextAsset::$$c__DisplayClass6_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextAsset::$$c__DisplayClass6_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextAsset::$$c__DisplayClass6_0::*)()>(&LocalizedTextAsset::$$c__DisplayClass6_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextAsset::$$c__DisplayClass6_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LocalizedTextAsset/<>c
#include "GlobalNamespace/LocalizedTextAsset_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: LocalizedTextAsset/TextInfo
#include "GlobalNamespace/LocalizedTextAsset_TextInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly LocalizedTextAsset/<>c <>9
GlobalNamespace::LocalizedTextAsset::$$c* GlobalNamespace::LocalizedTextAsset::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalizedTextAsset::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::LocalizedTextAsset::$$c*>("", "LocalizedTextAsset/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly LocalizedTextAsset/<>c <>9
void GlobalNamespace::LocalizedTextAsset::$$c::_set_$$9(GlobalNamespace::LocalizedTextAsset::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalizedTextAsset::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "LocalizedTextAsset/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<LocalizedTextAsset/TextInfo,System.Boolean> <>9__6_0
System::Func_2<GlobalNamespace::LocalizedTextAsset::TextInfo*, bool>* GlobalNamespace::LocalizedTextAsset::$$c::_get_$$9__6_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalizedTextAsset::$$c::_get_$$9__6_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::LocalizedTextAsset::TextInfo*, bool>*>("", "LocalizedTextAsset/<>c", "<>9__6_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<LocalizedTextAsset/TextInfo,System.Boolean> <>9__6_0
void GlobalNamespace::LocalizedTextAsset::$$c::_set_$$9__6_0(System::Func_2<GlobalNamespace::LocalizedTextAsset::TextInfo*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalizedTextAsset::$$c::_set_$$9__6_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "LocalizedTextAsset/<>c", "<>9__6_0", value)));
}
// Autogenerated method: LocalizedTextAsset/<>c..cctor
void GlobalNamespace::LocalizedTextAsset::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalizedTextAsset::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "LocalizedTextAsset/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: LocalizedTextAsset/<>c.<get_localizedText>b__6_0
bool GlobalNamespace::LocalizedTextAsset::$$c::$get_localizedText$b__6_0(GlobalNamespace::LocalizedTextAsset::TextInfo* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalizedTextAsset::$$c::<get_localizedText>b__6_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_localizedText>b__6_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: LocalizedTextAsset::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&LocalizedTextAsset::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextAsset::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LocalizedTextAsset::$$c::$get_localizedText$b__6_0
// Il2CppName: <get_localizedText>b__6_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LocalizedTextAsset::$$c::*)(GlobalNamespace::LocalizedTextAsset::TextInfo*)>(&LocalizedTextAsset::$$c::$get_localizedText$b__6_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextAsset::$$c*), "<get_localizedText>b__6_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LocalizedTextAsset::TextInfo*>()});
  }
};
// Writing MetadataGetter for method: LocalizedTextAsset::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextAsset::$$c::*)()>(&LocalizedTextAsset::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextAsset::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedTextAsset::$$c::*)()>(&LocalizedTextAsset::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedTextAsset::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MainCamera
#include "GlobalNamespace/MainCamera.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MainCamera.get_camera
UnityEngine::Camera* GlobalNamespace::MainCamera::get_camera() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainCamera::get_camera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_camera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Camera*, false>(this, ___internal__method);
}
// Autogenerated method: MainCamera.set_enableCamera
void GlobalNamespace::MainCamera::set_enableCamera(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainCamera::set_enableCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enableCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MainCamera.get_position
UnityEngine::Vector3 GlobalNamespace::MainCamera::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainCamera::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: MainCamera.get_rotation
UnityEngine::Quaternion GlobalNamespace::MainCamera::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainCamera::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: MainCamera.Awake
void GlobalNamespace::MainCamera::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainCamera::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainCamera.OnEnable
void GlobalNamespace::MainCamera::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainCamera::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainCamera.Update
void GlobalNamespace::MainCamera::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainCamera::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainCamera.OnDisable
void GlobalNamespace::MainCamera::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainCamera::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MainCamera::get_camera
// Il2CppName: get_camera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Camera* (MainCamera::*)()>(&MainCamera::get_camera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainCamera*), "get_camera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainCamera::set_enableCamera
// Il2CppName: set_enableCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainCamera::*)(bool)>(&MainCamera::set_enableCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainCamera*), "set_enableCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MainCamera::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (MainCamera::*)()>(&MainCamera::get_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainCamera*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainCamera::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (MainCamera::*)()>(&MainCamera::get_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainCamera*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainCamera::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainCamera::*)()>(&MainCamera::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainCamera*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainCamera::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainCamera::*)()>(&MainCamera::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainCamera*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainCamera::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainCamera::*)()>(&MainCamera::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainCamera*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainCamera::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainCamera::*)()>(&MainCamera::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainCamera*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainCamera::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainCamera::*)()>(&MainCamera::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainCamera*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainCamera::*)()>(&MainCamera::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainCamera*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AveragingValueRecorder
#include "GlobalNamespace/AveragingValueRecorder.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AveragingValueRecorder.Update
void GlobalNamespace::AveragingValueRecorder::Update(float value, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AveragingValueRecorder::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(deltaTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value, deltaTime);
}
// Autogenerated method: AveragingValueRecorder.GetAverageValue
float GlobalNamespace::AveragingValueRecorder::GetAverageValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AveragingValueRecorder::GetAverageValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAverageValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AveragingValueRecorder.GetLastValue
float GlobalNamespace::AveragingValueRecorder::GetLastValue() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AveragingValueRecorder::GetLastValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLastValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AveragingValueRecorder.GetHistoryValues
System::Collections::Generic::Queue_1<float>* GlobalNamespace::AveragingValueRecorder::GetHistoryValues() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AveragingValueRecorder::GetHistoryValues");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHistoryValues", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::Queue_1<float>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AveragingValueRecorder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AveragingValueRecorder::*)(float, float, float)>(&AveragingValueRecorder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AveragingValueRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AveragingValueRecorder::*)(float, float, float)>(&AveragingValueRecorder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AveragingValueRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AveragingValueRecorder::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AveragingValueRecorder::*)(float, float)>(&AveragingValueRecorder::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AveragingValueRecorder*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AveragingValueRecorder::GetAverageValue
// Il2CppName: GetAverageValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AveragingValueRecorder::*)()>(&AveragingValueRecorder::GetAverageValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AveragingValueRecorder*), "GetAverageValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AveragingValueRecorder::GetLastValue
// Il2CppName: GetLastValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AveragingValueRecorder::*)()>(&AveragingValueRecorder::GetLastValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AveragingValueRecorder*), "GetLastValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AveragingValueRecorder::GetHistoryValues
// Il2CppName: GetHistoryValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::Queue_1<float>* (AveragingValueRecorder::*)()>(&AveragingValueRecorder::GetHistoryValues)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AveragingValueRecorder*), "GetHistoryValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AveragingValueRecorder/AverageValueData
#include "GlobalNamespace/AveragingValueRecorder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AveragingValueRecorder/AverageValueData.get_value
float GlobalNamespace::AveragingValueRecorder::AverageValueData::get_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AveragingValueRecorder::AverageValueData::get_value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: AveragingValueRecorder/AverageValueData.set_value
void GlobalNamespace::AveragingValueRecorder::AverageValueData::set_value(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AveragingValueRecorder::AverageValueData::set_value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: AveragingValueRecorder/AverageValueData.get_time
float GlobalNamespace::AveragingValueRecorder::AverageValueData::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AveragingValueRecorder::AverageValueData::get_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: AveragingValueRecorder/AverageValueData.set_time
void GlobalNamespace::AveragingValueRecorder::AverageValueData::set_time(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AveragingValueRecorder::AverageValueData::set_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Writing MetadataGetter for method: AveragingValueRecorder::AverageValueData::get_value
// Il2CppName: get_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AveragingValueRecorder::AverageValueData::*)()>(&AveragingValueRecorder::AverageValueData::get_value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AveragingValueRecorder::AverageValueData), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AveragingValueRecorder::AverageValueData::set_value
// Il2CppName: set_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AveragingValueRecorder::AverageValueData::*)(float)>(&AveragingValueRecorder::AverageValueData::set_value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AveragingValueRecorder::AverageValueData), "set_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AveragingValueRecorder::AverageValueData::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AveragingValueRecorder::AverageValueData::*)()>(&AveragingValueRecorder::AverageValueData::get_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AveragingValueRecorder::AverageValueData), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AveragingValueRecorder::AverageValueData::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AveragingValueRecorder::AverageValueData::*)(float)>(&AveragingValueRecorder::AverageValueData::set_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AveragingValueRecorder::AverageValueData), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AveragingValueRecorder::AverageValueData::AverageValueData
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AveragingValueRecorder::AverageValueData::*)(float, float)>(&AveragingValueRecorder::AverageValueData::AverageValueData<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AveragingValueRecorder::AverageValueData), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AveragingValueRecorder::AverageValueData::*)(float, float)>(&AveragingValueRecorder::AverageValueData::AverageValueData<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AveragingValueRecorder::AverageValueData), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FullVRControllersRecorder
#include "GlobalNamespace/FullVRControllersRecorder.hpp"
// Including type: VRController
#include "GlobalNamespace/VRController.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: VRControllersRecorderData
#include "GlobalNamespace/VRControllersRecorderData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FullVRControllersRecorder.add_didSetControllerTransformEvent
void GlobalNamespace::FullVRControllersRecorder::add_didSetControllerTransformEvent(System::Action_1<GlobalNamespace::VRController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FullVRControllersRecorder::add_didSetControllerTransformEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSetControllerTransformEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FullVRControllersRecorder.remove_didSetControllerTransformEvent
void GlobalNamespace::FullVRControllersRecorder::remove_didSetControllerTransformEvent(System::Action_1<GlobalNamespace::VRController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FullVRControllersRecorder::remove_didSetControllerTransformEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSetControllerTransformEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FullVRControllersRecorder.Start
void GlobalNamespace::FullVRControllersRecorder::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FullVRControllersRecorder::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FullVRControllersRecorder.OnDestroy
void GlobalNamespace::FullVRControllersRecorder::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FullVRControllersRecorder::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FullVRControllersRecorder.PlaybackTick
void GlobalNamespace::FullVRControllersRecorder::PlaybackTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FullVRControllersRecorder::PlaybackTick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlaybackTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FullVRControllersRecorder.RecordTick
void GlobalNamespace::FullVRControllersRecorder::RecordTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FullVRControllersRecorder::RecordTick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FullVRControllersRecorder.Update
void GlobalNamespace::FullVRControllersRecorder::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FullVRControllersRecorder::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FullVRControllersRecorder.LateUpdate
void GlobalNamespace::FullVRControllersRecorder::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FullVRControllersRecorder::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FullVRControllersRecorder::add_didSetControllerTransformEvent
// Il2CppName: add_didSetControllerTransformEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullVRControllersRecorder::*)(System::Action_1<GlobalNamespace::VRController*>*)>(&FullVRControllersRecorder::add_didSetControllerTransformEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullVRControllersRecorder*), "add_didSetControllerTransformEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::VRController*>*>()});
  }
};
// Writing MetadataGetter for method: FullVRControllersRecorder::remove_didSetControllerTransformEvent
// Il2CppName: remove_didSetControllerTransformEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullVRControllersRecorder::*)(System::Action_1<GlobalNamespace::VRController*>*)>(&FullVRControllersRecorder::remove_didSetControllerTransformEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullVRControllersRecorder*), "remove_didSetControllerTransformEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::VRController*>*>()});
  }
};
// Writing MetadataGetter for method: FullVRControllersRecorder::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullVRControllersRecorder::*)()>(&FullVRControllersRecorder::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullVRControllersRecorder*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FullVRControllersRecorder::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullVRControllersRecorder::*)()>(&FullVRControllersRecorder::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullVRControllersRecorder*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FullVRControllersRecorder::PlaybackTick
// Il2CppName: PlaybackTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullVRControllersRecorder::*)()>(&FullVRControllersRecorder::PlaybackTick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullVRControllersRecorder*), "PlaybackTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FullVRControllersRecorder::RecordTick
// Il2CppName: RecordTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullVRControllersRecorder::*)()>(&FullVRControllersRecorder::RecordTick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullVRControllersRecorder*), "RecordTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FullVRControllersRecorder::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullVRControllersRecorder::*)()>(&FullVRControllersRecorder::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullVRControllersRecorder*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FullVRControllersRecorder::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullVRControllersRecorder::*)()>(&FullVRControllersRecorder::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullVRControllersRecorder*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FullVRControllersRecorder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullVRControllersRecorder::*)()>(&FullVRControllersRecorder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullVRControllersRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullVRControllersRecorder::*)()>(&FullVRControllersRecorder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullVRControllersRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FullVRControllersRecorder/Mode
#include "GlobalNamespace/FullVRControllersRecorder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public FullVRControllersRecorder/Mode Record
GlobalNamespace::FullVRControllersRecorder::Mode GlobalNamespace::FullVRControllersRecorder::Mode::_get_Record() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FullVRControllersRecorder::Mode::_get_Record");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::FullVRControllersRecorder::Mode>("", "FullVRControllersRecorder/Mode", "Record"));
}
// Autogenerated static field setter
// Set static field: static public FullVRControllersRecorder/Mode Record
void GlobalNamespace::FullVRControllersRecorder::Mode::_set_Record(GlobalNamespace::FullVRControllersRecorder::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FullVRControllersRecorder::Mode::_set_Record");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FullVRControllersRecorder/Mode", "Record", value));
}
// Autogenerated static field getter
// Get static field: static public FullVRControllersRecorder/Mode Playback
GlobalNamespace::FullVRControllersRecorder::Mode GlobalNamespace::FullVRControllersRecorder::Mode::_get_Playback() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FullVRControllersRecorder::Mode::_get_Playback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::FullVRControllersRecorder::Mode>("", "FullVRControllersRecorder/Mode", "Playback"));
}
// Autogenerated static field setter
// Set static field: static public FullVRControllersRecorder/Mode Playback
void GlobalNamespace::FullVRControllersRecorder::Mode::_set_Playback(GlobalNamespace::FullVRControllersRecorder::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FullVRControllersRecorder::Mode::_set_Playback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FullVRControllersRecorder/Mode", "Playback", value));
}
// Autogenerated static field getter
// Get static field: static public FullVRControllersRecorder/Mode Off
GlobalNamespace::FullVRControllersRecorder::Mode GlobalNamespace::FullVRControllersRecorder::Mode::_get_Off() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FullVRControllersRecorder::Mode::_get_Off");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::FullVRControllersRecorder::Mode>("", "FullVRControllersRecorder/Mode", "Off"));
}
// Autogenerated static field setter
// Set static field: static public FullVRControllersRecorder/Mode Off
void GlobalNamespace::FullVRControllersRecorder::Mode::_set_Off(GlobalNamespace::FullVRControllersRecorder::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FullVRControllersRecorder::Mode::_set_Off");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FullVRControllersRecorder/Mode", "Off", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OverridePlayerTransformsFromFullVRControllersRecorder
#include "GlobalNamespace/OverridePlayerTransformsFromFullVRControllersRecorder.hpp"
// Including type: FullVRControllersRecorder
#include "GlobalNamespace/FullVRControllersRecorder.hpp"
// Including type: PlayerTransforms
#include "GlobalNamespace/PlayerTransforms.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: PlayerVRControllersManager
#include "GlobalNamespace/PlayerVRControllersManager.hpp"
// Including type: VRController
#include "GlobalNamespace/VRController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OverridePlayerTransformsFromFullVRControllersRecorder.Start
void GlobalNamespace::OverridePlayerTransformsFromFullVRControllersRecorder::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OverridePlayerTransformsFromFullVRControllersRecorder::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OverridePlayerTransformsFromFullVRControllersRecorder.OnDestroy
void GlobalNamespace::OverridePlayerTransformsFromFullVRControllersRecorder::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OverridePlayerTransformsFromFullVRControllersRecorder::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OverridePlayerTransformsFromFullVRControllersRecorder.HandleFullVRControllersRecorderDidSetControllerTransform
void GlobalNamespace::OverridePlayerTransformsFromFullVRControllersRecorder::HandleFullVRControllersRecorderDidSetControllerTransform(GlobalNamespace::VRController* controller) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OverridePlayerTransformsFromFullVRControllersRecorder::HandleFullVRControllersRecorderDidSetControllerTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleFullVRControllersRecorderDidSetControllerTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(controller)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, controller);
}
// Writing MetadataGetter for method: OverridePlayerTransformsFromFullVRControllersRecorder::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OverridePlayerTransformsFromFullVRControllersRecorder::*)()>(&OverridePlayerTransformsFromFullVRControllersRecorder::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OverridePlayerTransformsFromFullVRControllersRecorder*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OverridePlayerTransformsFromFullVRControllersRecorder::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OverridePlayerTransformsFromFullVRControllersRecorder::*)()>(&OverridePlayerTransformsFromFullVRControllersRecorder::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OverridePlayerTransformsFromFullVRControllersRecorder*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OverridePlayerTransformsFromFullVRControllersRecorder::HandleFullVRControllersRecorderDidSetControllerTransform
// Il2CppName: HandleFullVRControllersRecorderDidSetControllerTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OverridePlayerTransformsFromFullVRControllersRecorder::*)(GlobalNamespace::VRController*)>(&OverridePlayerTransformsFromFullVRControllersRecorder::HandleFullVRControllersRecorderDidSetControllerTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OverridePlayerTransformsFromFullVRControllersRecorder*), "HandleFullVRControllersRecorderDidSetControllerTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::VRController*>()});
  }
};
// Writing MetadataGetter for method: OverridePlayerTransformsFromFullVRControllersRecorder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OverridePlayerTransformsFromFullVRControllersRecorder::*)()>(&OverridePlayerTransformsFromFullVRControllersRecorder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OverridePlayerTransformsFromFullVRControllersRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OverridePlayerTransformsFromFullVRControllersRecorder::*)()>(&OverridePlayerTransformsFromFullVRControllersRecorder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OverridePlayerTransformsFromFullVRControllersRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlayableDirectorTimer
#include "GlobalNamespace/PlayableDirectorTimer.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayableDirectorTimer.Update
void GlobalNamespace::PlayableDirectorTimer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayableDirectorTimer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PlayableDirectorTimer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableDirectorTimer::*)()>(&PlayableDirectorTimer::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableDirectorTimer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayableDirectorTimer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableDirectorTimer::*)()>(&PlayableDirectorTimer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableDirectorTimer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayableDirectorTimer::*)()>(&PlayableDirectorTimer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayableDirectorTimer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SimpleVRNodeRecorder
#include "GlobalNamespace/SimpleVRNodeRecorder.hpp"
// Including type: SimpleVRNodeRecorder/SavedData/NodeKeyframe
#include "GlobalNamespace/SimpleVRNodeRecorder_SavedData_NodeKeyframe.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SimpleVRNodeRecorder.Awake
void GlobalNamespace::SimpleVRNodeRecorder::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleVRNodeRecorder::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleVRNodeRecorder.OnDestroy
void GlobalNamespace::SimpleVRNodeRecorder::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleVRNodeRecorder::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleVRNodeRecorder.RecordNewKeyFrame
void GlobalNamespace::SimpleVRNodeRecorder::RecordNewKeyFrame() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleVRNodeRecorder::RecordNewKeyFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordNewKeyFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleVRNodeRecorder.Update
void GlobalNamespace::SimpleVRNodeRecorder::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleVRNodeRecorder::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleVRNodeRecorder.Save
void GlobalNamespace::SimpleVRNodeRecorder::Save() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleVRNodeRecorder::Save");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Save", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleVRNodeRecorder.Load
void GlobalNamespace::SimpleVRNodeRecorder::Load() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleVRNodeRecorder::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SimpleVRNodeRecorder::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleVRNodeRecorder::*)()>(&SimpleVRNodeRecorder::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleVRNodeRecorder*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleVRNodeRecorder::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleVRNodeRecorder::*)()>(&SimpleVRNodeRecorder::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleVRNodeRecorder*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleVRNodeRecorder::RecordNewKeyFrame
// Il2CppName: RecordNewKeyFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleVRNodeRecorder::*)()>(&SimpleVRNodeRecorder::RecordNewKeyFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleVRNodeRecorder*), "RecordNewKeyFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleVRNodeRecorder::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleVRNodeRecorder::*)()>(&SimpleVRNodeRecorder::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleVRNodeRecorder*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleVRNodeRecorder::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleVRNodeRecorder::*)()>(&SimpleVRNodeRecorder::Save)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleVRNodeRecorder*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleVRNodeRecorder::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleVRNodeRecorder::*)()>(&SimpleVRNodeRecorder::Load)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleVRNodeRecorder*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleVRNodeRecorder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleVRNodeRecorder::*)()>(&SimpleVRNodeRecorder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleVRNodeRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleVRNodeRecorder::*)()>(&SimpleVRNodeRecorder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleVRNodeRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SimpleVRNodeRecorder/SavedData
#include "GlobalNamespace/SimpleVRNodeRecorder.hpp"
// Including type: SimpleVRNodeRecorder/SavedData/NodeKeyframe
#include "GlobalNamespace/SimpleVRNodeRecorder_SavedData_NodeKeyframe.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SimpleVRNodeRecorder::SavedData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleVRNodeRecorder::SavedData::*)()>(&SimpleVRNodeRecorder::SavedData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleVRNodeRecorder::SavedData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleVRNodeRecorder::SavedData::*)()>(&SimpleVRNodeRecorder::SavedData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleVRNodeRecorder::SavedData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleVRNodeRecorder/SavedData/NodeKeyframe
#include "GlobalNamespace/SimpleVRNodeRecorder_SavedData_NodeKeyframe.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SimpleVRNodeRecorder/SavedData/NodeKeyframe.get_pos
UnityEngine::Vector3 GlobalNamespace::SimpleVRNodeRecorder::SavedData::NodeKeyframe::get_pos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleVRNodeRecorder::SavedData::NodeKeyframe::get_pos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SimpleVRNodeRecorder/SavedData/NodeKeyframe.get_rot
UnityEngine::Quaternion GlobalNamespace::SimpleVRNodeRecorder::SavedData::NodeKeyframe::get_rot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleVRNodeRecorder::SavedData::NodeKeyframe::get_rot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SimpleVRNodeRecorder::SavedData::NodeKeyframe::get_pos
// Il2CppName: get_pos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (SimpleVRNodeRecorder::SavedData::NodeKeyframe::*)()>(&SimpleVRNodeRecorder::SavedData::NodeKeyframe::get_pos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleVRNodeRecorder::SavedData::NodeKeyframe*), "get_pos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleVRNodeRecorder::SavedData::NodeKeyframe::get_rot
// Il2CppName: get_rot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (SimpleVRNodeRecorder::SavedData::NodeKeyframe::*)()>(&SimpleVRNodeRecorder::SavedData::NodeKeyframe::get_rot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleVRNodeRecorder::SavedData::NodeKeyframe*), "get_rot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleVRNodeRecorder::SavedData::NodeKeyframe::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleVRNodeRecorder::SavedData::NodeKeyframe::*)(UnityEngine::Vector3, UnityEngine::Quaternion, float)>(&SimpleVRNodeRecorder::SavedData::NodeKeyframe::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleVRNodeRecorder::SavedData::NodeKeyframe*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleVRNodeRecorder::SavedData::NodeKeyframe::*)(UnityEngine::Vector3, UnityEngine::Quaternion, float)>(&SimpleVRNodeRecorder::SavedData::NodeKeyframe::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleVRNodeRecorder::SavedData::NodeKeyframe*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleVRNodeRecorder/RecordMode
#include "GlobalNamespace/SimpleVRNodeRecorder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SimpleVRNodeRecorder/RecordMode Record
GlobalNamespace::SimpleVRNodeRecorder::RecordMode GlobalNamespace::SimpleVRNodeRecorder::RecordMode::_get_Record() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleVRNodeRecorder::RecordMode::_get_Record");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SimpleVRNodeRecorder::RecordMode>("", "SimpleVRNodeRecorder/RecordMode", "Record"));
}
// Autogenerated static field setter
// Set static field: static public SimpleVRNodeRecorder/RecordMode Record
void GlobalNamespace::SimpleVRNodeRecorder::RecordMode::_set_Record(GlobalNamespace::SimpleVRNodeRecorder::RecordMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleVRNodeRecorder::RecordMode::_set_Record");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SimpleVRNodeRecorder/RecordMode", "Record", value));
}
// Autogenerated static field getter
// Get static field: static public SimpleVRNodeRecorder/RecordMode Playback
GlobalNamespace::SimpleVRNodeRecorder::RecordMode GlobalNamespace::SimpleVRNodeRecorder::RecordMode::_get_Playback() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleVRNodeRecorder::RecordMode::_get_Playback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SimpleVRNodeRecorder::RecordMode>("", "SimpleVRNodeRecorder/RecordMode", "Playback"));
}
// Autogenerated static field setter
// Set static field: static public SimpleVRNodeRecorder/RecordMode Playback
void GlobalNamespace::SimpleVRNodeRecorder::RecordMode::_set_Playback(GlobalNamespace::SimpleVRNodeRecorder::RecordMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleVRNodeRecorder::RecordMode::_set_Playback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SimpleVRNodeRecorder/RecordMode", "Playback", value));
}
// Autogenerated static field getter
// Get static field: static public SimpleVRNodeRecorder/RecordMode Off
GlobalNamespace::SimpleVRNodeRecorder::RecordMode GlobalNamespace::SimpleVRNodeRecorder::RecordMode::_get_Off() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleVRNodeRecorder::RecordMode::_get_Off");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SimpleVRNodeRecorder::RecordMode>("", "SimpleVRNodeRecorder/RecordMode", "Off"));
}
// Autogenerated static field setter
// Set static field: static public SimpleVRNodeRecorder/RecordMode Off
void GlobalNamespace::SimpleVRNodeRecorder::RecordMode::_set_Off(GlobalNamespace::SimpleVRNodeRecorder::RecordMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleVRNodeRecorder::RecordMode::_set_Off");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SimpleVRNodeRecorder/RecordMode", "Off", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRControllersRecorder
#include "GlobalNamespace/VRControllersRecorder.hpp"
// Including type: VRControllersRecorder/TypeSerializationBinder
#include "GlobalNamespace/VRControllersRecorder_TypeSerializationBinder.hpp"
// Including type: VRControllersRecorder/SavedData
#include "GlobalNamespace/VRControllersRecorder_SavedData.hpp"
// Including type: VRController
#include "GlobalNamespace/VRController.hpp"
// Including type: VRControllersRecorder/Keyframe
#include "GlobalNamespace/VRControllersRecorder_Keyframe.hpp"
// Including type: UnityEngine.TextAsset
#include "UnityEngine/TextAsset.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRControllersRecorder.set_mode
void GlobalNamespace::VRControllersRecorder::set_mode(GlobalNamespace::VRControllersRecorder::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::set_mode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRControllersRecorder.get_mode
GlobalNamespace::VRControllersRecorder::Mode GlobalNamespace::VRControllersRecorder::get_mode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::get_mode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRControllersRecorder::Mode, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersRecorder.set_recordingTextAsset
void GlobalNamespace::VRControllersRecorder::set_recordingTextAsset(UnityEngine::TextAsset* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::set_recordingTextAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_recordingTextAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRControllersRecorder.get_recordingTextAsset
UnityEngine::TextAsset* GlobalNamespace::VRControllersRecorder::get_recordingTextAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::get_recordingTextAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_recordingTextAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::TextAsset*, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersRecorder.set_recordingFileName
void GlobalNamespace::VRControllersRecorder::set_recordingFileName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::set_recordingFileName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_recordingFileName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRControllersRecorder.get_recordingFileName
::Il2CppString* GlobalNamespace::VRControllersRecorder::get_recordingFileName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::get_recordingFileName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_recordingFileName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersRecorder.set_changeToNonVRCamera
void GlobalNamespace::VRControllersRecorder::set_changeToNonVRCamera(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::set_changeToNonVRCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_changeToNonVRCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: VRControllersRecorder.get_changeToNonVRCamera
bool GlobalNamespace::VRControllersRecorder::get_changeToNonVRCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::get_changeToNonVRCamera");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_changeToNonVRCamera", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersRecorder.Start
void GlobalNamespace::VRControllersRecorder::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersRecorder.OnDestroy
void GlobalNamespace::VRControllersRecorder::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersRecorder.SetDefaultSettings
void GlobalNamespace::VRControllersRecorder::SetDefaultSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::SetDefaultSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetDefaultSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersRecorder.SetInGamePlaybackDefaultSettings
void GlobalNamespace::VRControllersRecorder::SetInGamePlaybackDefaultSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::SetInGamePlaybackDefaultSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInGamePlaybackDefaultSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersRecorder.PlaybackTick
void GlobalNamespace::VRControllersRecorder::PlaybackTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::PlaybackTick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlaybackTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersRecorder.SetPositionAndRotation
void GlobalNamespace::VRControllersRecorder::SetPositionAndRotation(UnityEngine::Transform* transf, UnityEngine::Vector3 targetPos, UnityEngine::Quaternion targetRot, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::SetPositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transf), ::il2cpp_utils::ExtractType(targetPos), ::il2cpp_utils::ExtractType(targetRot), ::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transf, targetPos, targetRot, t);
}
// Autogenerated method: VRControllersRecorder.RecordTick
void GlobalNamespace::VRControllersRecorder::RecordTick() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::RecordTick");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecordTick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersRecorder.Update
void GlobalNamespace::VRControllersRecorder::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersRecorder.LateUpdate
void GlobalNamespace::VRControllersRecorder::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersRecorder.Save
void GlobalNamespace::VRControllersRecorder::Save() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::Save");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Save", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersRecorder.Load
void GlobalNamespace::VRControllersRecorder::Load() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRControllersRecorder.CreateAnimationClipFromRecording
UnityEngine::AnimationClip* GlobalNamespace::VRControllersRecorder::CreateAnimationClipFromRecording(::Il2CppString* recordingfilePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::CreateAnimationClipFromRecording");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRControllersRecorder", "CreateAnimationClipFromRecording", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(recordingfilePath)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationClip*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, recordingfilePath);
}
// Writing MetadataGetter for method: VRControllersRecorder::set_mode
// Il2CppName: set_mode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)(GlobalNamespace::VRControllersRecorder::Mode)>(&VRControllersRecorder::set_mode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "set_mode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::VRControllersRecorder::Mode>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::get_mode
// Il2CppName: get_mode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::VRControllersRecorder::Mode (VRControllersRecorder::*)()>(&VRControllersRecorder::get_mode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "get_mode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::set_recordingTextAsset
// Il2CppName: set_recordingTextAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)(UnityEngine::TextAsset*)>(&VRControllersRecorder::set_recordingTextAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "set_recordingTextAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextAsset*>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::get_recordingTextAsset
// Il2CppName: get_recordingTextAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::TextAsset* (VRControllersRecorder::*)()>(&VRControllersRecorder::get_recordingTextAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "get_recordingTextAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::set_recordingFileName
// Il2CppName: set_recordingFileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)(::Il2CppString*)>(&VRControllersRecorder::set_recordingFileName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "set_recordingFileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::get_recordingFileName
// Il2CppName: get_recordingFileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (VRControllersRecorder::*)()>(&VRControllersRecorder::get_recordingFileName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "get_recordingFileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::set_changeToNonVRCamera
// Il2CppName: set_changeToNonVRCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)(bool)>(&VRControllersRecorder::set_changeToNonVRCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "set_changeToNonVRCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::get_changeToNonVRCamera
// Il2CppName: get_changeToNonVRCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VRControllersRecorder::*)()>(&VRControllersRecorder::get_changeToNonVRCamera)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "get_changeToNonVRCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)()>(&VRControllersRecorder::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)()>(&VRControllersRecorder::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::SetDefaultSettings
// Il2CppName: SetDefaultSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)()>(&VRControllersRecorder::SetDefaultSettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "SetDefaultSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::SetInGamePlaybackDefaultSettings
// Il2CppName: SetInGamePlaybackDefaultSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)()>(&VRControllersRecorder::SetInGamePlaybackDefaultSettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "SetInGamePlaybackDefaultSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::PlaybackTick
// Il2CppName: PlaybackTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)()>(&VRControllersRecorder::PlaybackTick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "PlaybackTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::SetPositionAndRotation
// Il2CppName: SetPositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)(UnityEngine::Transform*, UnityEngine::Vector3, UnityEngine::Quaternion, float)>(&VRControllersRecorder::SetPositionAndRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "SetPositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::RecordTick
// Il2CppName: RecordTick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)()>(&VRControllersRecorder::RecordTick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "RecordTick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)()>(&VRControllersRecorder::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)()>(&VRControllersRecorder::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)()>(&VRControllersRecorder::Save)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)()>(&VRControllersRecorder::Load)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::CreateAnimationClipFromRecording
// Il2CppName: CreateAnimationClipFromRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AnimationClip* (*)(::Il2CppString*)>(&VRControllersRecorder::CreateAnimationClipFromRecording)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), "CreateAnimationClipFromRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)()>(&VRControllersRecorder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::*)()>(&VRControllersRecorder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRControllersRecorder/TypeSerializationBinder
#include "GlobalNamespace/VRControllersRecorder_TypeSerializationBinder.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRControllersRecorder/TypeSerializationBinder.BindToType
System::Type* GlobalNamespace::VRControllersRecorder::TypeSerializationBinder::BindToType(::Il2CppString* assemblyName, ::Il2CppString* typeName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::TypeSerializationBinder::BindToType");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BindToType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assemblyName), ::il2cpp_utils::ExtractType(typeName)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(this, ___internal__method, assemblyName, typeName);
}
// Writing MetadataGetter for method: VRControllersRecorder::TypeSerializationBinder::BindToType
// Il2CppName: BindToType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (VRControllersRecorder::TypeSerializationBinder::*)(::Il2CppString*, ::Il2CppString*)>(&VRControllersRecorder::TypeSerializationBinder::BindToType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder::TypeSerializationBinder*), "BindToType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorder::TypeSerializationBinder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::TypeSerializationBinder::*)()>(&VRControllersRecorder::TypeSerializationBinder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder::TypeSerializationBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::TypeSerializationBinder::*)()>(&VRControllersRecorder::TypeSerializationBinder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder::TypeSerializationBinder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRControllersRecorder/SavedData
#include "GlobalNamespace/VRControllersRecorder_SavedData.hpp"
// Including type: VRControllersRecorder/SavedData/KeyframeSerializable
#include "GlobalNamespace/VRControllersRecorder_SavedData_KeyframeSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VRControllersRecorder::SavedData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::SavedData::*)()>(&VRControllersRecorder::SavedData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder::SavedData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::SavedData::*)()>(&VRControllersRecorder::SavedData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder::SavedData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRControllersRecorder/SavedData/KeyframeSerializable
#include "GlobalNamespace/VRControllersRecorder_SavedData_KeyframeSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VRControllersRecorder::SavedData::KeyframeSerializable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::SavedData::KeyframeSerializable::*)()>(&VRControllersRecorder::SavedData::KeyframeSerializable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder::SavedData::KeyframeSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::SavedData::KeyframeSerializable::*)()>(&VRControllersRecorder::SavedData::KeyframeSerializable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder::SavedData::KeyframeSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRControllersRecorder/Mode
#include "GlobalNamespace/VRControllersRecorder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VRControllersRecorder/Mode Record
GlobalNamespace::VRControllersRecorder::Mode GlobalNamespace::VRControllersRecorder::Mode::_get_Record() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::Mode::_get_Record");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::VRControllersRecorder::Mode>("", "VRControllersRecorder/Mode", "Record"));
}
// Autogenerated static field setter
// Set static field: static public VRControllersRecorder/Mode Record
void GlobalNamespace::VRControllersRecorder::Mode::_set_Record(GlobalNamespace::VRControllersRecorder::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::Mode::_set_Record");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersRecorder/Mode", "Record", value));
}
// Autogenerated static field getter
// Get static field: static public VRControllersRecorder/Mode Playback
GlobalNamespace::VRControllersRecorder::Mode GlobalNamespace::VRControllersRecorder::Mode::_get_Playback() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::Mode::_get_Playback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::VRControllersRecorder::Mode>("", "VRControllersRecorder/Mode", "Playback"));
}
// Autogenerated static field setter
// Set static field: static public VRControllersRecorder/Mode Playback
void GlobalNamespace::VRControllersRecorder::Mode::_set_Playback(GlobalNamespace::VRControllersRecorder::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::Mode::_set_Playback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersRecorder/Mode", "Playback", value));
}
// Autogenerated static field getter
// Get static field: static public VRControllersRecorder/Mode Off
GlobalNamespace::VRControllersRecorder::Mode GlobalNamespace::VRControllersRecorder::Mode::_get_Off() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::Mode::_get_Off");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::VRControllersRecorder::Mode>("", "VRControllersRecorder/Mode", "Off"));
}
// Autogenerated static field setter
// Set static field: static public VRControllersRecorder/Mode Off
void GlobalNamespace::VRControllersRecorder::Mode::_set_Off(GlobalNamespace::VRControllersRecorder::Mode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::Mode::_set_Off");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRControllersRecorder/Mode", "Off", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRControllersRecorder/Keyframe
#include "GlobalNamespace/VRControllersRecorder_Keyframe.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VRControllersRecorder::Keyframe::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::Keyframe::*)()>(&VRControllersRecorder::Keyframe::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder::Keyframe*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorder::Keyframe::*)()>(&VRControllersRecorder::Keyframe::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorder::Keyframe*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRControllersRecorderData
#include "GlobalNamespace/VRControllersRecorderData.hpp"
// Including type: VRControllersRecorderData/Keyframe
#include "GlobalNamespace/VRControllersRecorderData_Keyframe.hpp"
// Including type: VRControllersRecorderData/NodeInfo
#include "GlobalNamespace/VRControllersRecorderData_NodeInfo.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRControllersRecorderData.AddKeyFrame
void GlobalNamespace::VRControllersRecorderData::AddKeyFrame(::Array<GlobalNamespace::VRControllersRecorderData::PositionAndRotation>* positionsAndRotations, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorderData::AddKeyFrame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddKeyFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positionsAndRotations), ::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positionsAndRotations, time);
}
// Autogenerated method: VRControllersRecorderData.GetPositionAndRotation
GlobalNamespace::VRControllersRecorderData::PositionAndRotation GlobalNamespace::VRControllersRecorderData::GetPositionAndRotation(int frameIdx, UnityEngine::XR::XRNode nodeType, int nodeIdx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorderData::GetPositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frameIdx), ::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(nodeIdx)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRControllersRecorderData::PositionAndRotation, false>(this, ___internal__method, frameIdx, nodeType, nodeIdx);
}
// Autogenerated method: VRControllersRecorderData.GetLerpedPositionAndRotation
GlobalNamespace::VRControllersRecorderData::PositionAndRotation GlobalNamespace::VRControllersRecorderData::GetLerpedPositionAndRotation(int frameIdx, float t, UnityEngine::XR::XRNode nodeType, int nodeIdx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorderData::GetLerpedPositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLerpedPositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frameIdx), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(nodeType), ::il2cpp_utils::ExtractType(nodeIdx)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRControllersRecorderData::PositionAndRotation, false>(this, ___internal__method, frameIdx, t, nodeType, nodeIdx);
}
// Autogenerated method: VRControllersRecorderData.GetFrameTime
float GlobalNamespace::VRControllersRecorderData::GetFrameTime(int frameIdx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorderData::GetFrameTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFrameTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frameIdx)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, frameIdx);
}
// Autogenerated method: VRControllersRecorderData.get_numberOfKeyframes
int GlobalNamespace::VRControllersRecorderData::get_numberOfKeyframes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorderData::get_numberOfKeyframes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_numberOfKeyframes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: VRControllersRecorderData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderData::*)(::Array<GlobalNamespace::VRControllersRecorderData::NodeInfo*>*)>(&VRControllersRecorderData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::VRControllersRecorderData::NodeInfo*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderData::*)(::Array<GlobalNamespace::VRControllersRecorderData::NodeInfo*>*)>(&VRControllersRecorderData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::VRControllersRecorderData::NodeInfo*>*>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorderData::AddKeyFrame
// Il2CppName: AddKeyFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderData::*)(::Array<GlobalNamespace::VRControllersRecorderData::PositionAndRotation>*, float)>(&VRControllersRecorderData::AddKeyFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderData*), "AddKeyFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::VRControllersRecorderData::PositionAndRotation>*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorderData::GetPositionAndRotation
// Il2CppName: GetPositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::VRControllersRecorderData::PositionAndRotation (VRControllersRecorderData::*)(int, UnityEngine::XR::XRNode, int)>(&VRControllersRecorderData::GetPositionAndRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderData*), "GetPositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorderData::GetLerpedPositionAndRotation
// Il2CppName: GetLerpedPositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::VRControllersRecorderData::PositionAndRotation (VRControllersRecorderData::*)(int, float, UnityEngine::XR::XRNode, int)>(&VRControllersRecorderData::GetLerpedPositionAndRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderData*), "GetLerpedPositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorderData::GetFrameTime
// Il2CppName: GetFrameTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (VRControllersRecorderData::*)(int)>(&VRControllersRecorderData::GetFrameTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderData*), "GetFrameTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorderData::get_numberOfKeyframes
// Il2CppName: get_numberOfKeyframes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (VRControllersRecorderData::*)()>(&VRControllersRecorderData::get_numberOfKeyframes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderData*), "get_numberOfKeyframes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRControllersRecorderData/PositionAndRotation
#include "GlobalNamespace/VRControllersRecorderData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRControllersRecorderData/PositionAndRotation.Lerp
GlobalNamespace::VRControllersRecorderData::PositionAndRotation GlobalNamespace::VRControllersRecorderData::PositionAndRotation::Lerp(GlobalNamespace::VRControllersRecorderData::PositionAndRotation a, GlobalNamespace::VRControllersRecorderData::PositionAndRotation b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorderData::PositionAndRotation::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRControllersRecorderData/PositionAndRotation", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRControllersRecorderData::PositionAndRotation, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Writing MetadataGetter for method: VRControllersRecorderData::PositionAndRotation::PositionAndRotation
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderData::PositionAndRotation::*)(UnityEngine::Vector3, UnityEngine::Quaternion)>(&VRControllersRecorderData::PositionAndRotation::PositionAndRotation<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderData::PositionAndRotation), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderData::PositionAndRotation::*)(UnityEngine::Vector3, UnityEngine::Quaternion)>(&VRControllersRecorderData::PositionAndRotation::PositionAndRotation<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderData::PositionAndRotation), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorderData::PositionAndRotation::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::VRControllersRecorderData::PositionAndRotation (*)(GlobalNamespace::VRControllersRecorderData::PositionAndRotation, GlobalNamespace::VRControllersRecorderData::PositionAndRotation, float)>(&VRControllersRecorderData::PositionAndRotation::Lerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderData::PositionAndRotation), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::VRControllersRecorderData::PositionAndRotation>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::VRControllersRecorderData::PositionAndRotation>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRControllersRecorderData/Keyframe
#include "GlobalNamespace/VRControllersRecorderData_Keyframe.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VRControllersRecorderData::Keyframe::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderData::Keyframe::*)(::Array<GlobalNamespace::VRControllersRecorderData::PositionAndRotation>*, float)>(&VRControllersRecorderData::Keyframe::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderData::Keyframe*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::VRControllersRecorderData::PositionAndRotation>*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderData::Keyframe::*)(::Array<GlobalNamespace::VRControllersRecorderData::PositionAndRotation>*, float)>(&VRControllersRecorderData::Keyframe::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderData::Keyframe*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::VRControllersRecorderData::PositionAndRotation>*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRControllersRecorderData/NodeInfo
#include "GlobalNamespace/VRControllersRecorderData_NodeInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VRControllersRecorderData::NodeInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderData::NodeInfo::*)(UnityEngine::XR::XRNode, int)>(&VRControllersRecorderData::NodeInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderData::NodeInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderData::NodeInfo::*)(UnityEngine::XR::XRNode, int)>(&VRControllersRecorderData::NodeInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderData::NodeInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::XR::XRNode>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRControllersRecorderSaveAndLoad
#include "GlobalNamespace/VRControllersRecorderSaveAndLoad.hpp"
// Including type: VRControllersRecorderSaveData
#include "GlobalNamespace/VRControllersRecorderSaveData.hpp"
// Including type: UnityEngine.TextAsset
#include "UnityEngine/TextAsset.hpp"
// Including type: VRControllersRecorderData
#include "GlobalNamespace/VRControllersRecorderData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRControllersRecorderSaveAndLoad.LoadSaveDataFromFile
GlobalNamespace::VRControllersRecorderSaveData* GlobalNamespace::VRControllersRecorderSaveAndLoad::LoadSaveDataFromFile(::Il2CppString* filePath) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorderSaveAndLoad::LoadSaveDataFromFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRControllersRecorderSaveAndLoad", "LoadSaveDataFromFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filePath)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRControllersRecorderSaveData*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, filePath);
}
// Autogenerated method: VRControllersRecorderSaveAndLoad.LoadSaveDataFromTextAsset
GlobalNamespace::VRControllersRecorderSaveData* GlobalNamespace::VRControllersRecorderSaveAndLoad::LoadSaveDataFromTextAsset(UnityEngine::TextAsset* textAsset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorderSaveAndLoad::LoadSaveDataFromTextAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRControllersRecorderSaveAndLoad", "LoadSaveDataFromTextAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(textAsset)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRControllersRecorderSaveData*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, textAsset);
}
// Autogenerated method: VRControllersRecorderSaveAndLoad.LoadFromFile
void GlobalNamespace::VRControllersRecorderSaveAndLoad::LoadFromFile(::Il2CppString* filePath, GlobalNamespace::VRControllersRecorderData* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorderSaveAndLoad::LoadFromFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRControllersRecorderSaveAndLoad", "LoadFromFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filePath), ::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, filePath, data);
}
// Autogenerated method: VRControllersRecorderSaveAndLoad.SaveToFile
void GlobalNamespace::VRControllersRecorderSaveAndLoad::SaveToFile(::Il2CppString* filePath, GlobalNamespace::VRControllersRecorderData* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorderSaveAndLoad::SaveToFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "VRControllersRecorderSaveAndLoad", "SaveToFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filePath), ::il2cpp_utils::ExtractType(data)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, filePath, data);
}
// Writing MetadataGetter for method: VRControllersRecorderSaveAndLoad::LoadSaveDataFromFile
// Il2CppName: LoadSaveDataFromFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::VRControllersRecorderSaveData* (*)(::Il2CppString*)>(&VRControllersRecorderSaveAndLoad::LoadSaveDataFromFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderSaveAndLoad*), "LoadSaveDataFromFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorderSaveAndLoad::LoadSaveDataFromTextAsset
// Il2CppName: LoadSaveDataFromTextAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::VRControllersRecorderSaveData* (*)(UnityEngine::TextAsset*)>(&VRControllersRecorderSaveAndLoad::LoadSaveDataFromTextAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderSaveAndLoad*), "LoadSaveDataFromTextAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextAsset*>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorderSaveAndLoad::LoadFromFile
// Il2CppName: LoadFromFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, GlobalNamespace::VRControllersRecorderData*)>(&VRControllersRecorderSaveAndLoad::LoadFromFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderSaveAndLoad*), "LoadFromFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::VRControllersRecorderData*>()});
  }
};
// Writing MetadataGetter for method: VRControllersRecorderSaveAndLoad::SaveToFile
// Il2CppName: SaveToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, GlobalNamespace::VRControllersRecorderData*)>(&VRControllersRecorderSaveAndLoad::SaveToFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderSaveAndLoad*), "SaveToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::VRControllersRecorderData*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRControllersRecorderSaveData
#include "GlobalNamespace/VRControllersRecorderSaveData.hpp"
// Including type: VRControllersRecorderSaveData/PositionAndRotation
#include "GlobalNamespace/VRControllersRecorderSaveData_PositionAndRotation.hpp"
// Including type: VRControllersRecorderSaveData/Keyframe
#include "GlobalNamespace/VRControllersRecorderSaveData_Keyframe.hpp"
// Including type: VRControllersRecorderSaveData/NodeInfo
#include "GlobalNamespace/VRControllersRecorderSaveData_NodeInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VRControllersRecorderSaveData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderSaveData::*)()>(&VRControllersRecorderSaveData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderSaveData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderSaveData::*)()>(&VRControllersRecorderSaveData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderSaveData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRControllersRecorderSaveData/PositionAndRotation
#include "GlobalNamespace/VRControllersRecorderSaveData_PositionAndRotation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VRControllersRecorderSaveData::PositionAndRotation::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderSaveData::PositionAndRotation::*)()>(&VRControllersRecorderSaveData::PositionAndRotation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderSaveData::PositionAndRotation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderSaveData::PositionAndRotation::*)()>(&VRControllersRecorderSaveData::PositionAndRotation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderSaveData::PositionAndRotation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRControllersRecorderSaveData/Keyframe
#include "GlobalNamespace/VRControllersRecorderSaveData_Keyframe.hpp"
// Including type: VRControllersRecorderSaveData/PositionAndRotation
#include "GlobalNamespace/VRControllersRecorderSaveData_PositionAndRotation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VRControllersRecorderSaveData::Keyframe::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderSaveData::Keyframe::*)()>(&VRControllersRecorderSaveData::Keyframe::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderSaveData::Keyframe*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderSaveData::Keyframe::*)()>(&VRControllersRecorderSaveData::Keyframe::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderSaveData::Keyframe*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRControllersRecorderSaveData/NodeInfo
#include "GlobalNamespace/VRControllersRecorderSaveData_NodeInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VRControllersRecorderSaveData::NodeInfo::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderSaveData::NodeInfo::*)()>(&VRControllersRecorderSaveData::NodeInfo::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderSaveData::NodeInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRControllersRecorderSaveData::NodeInfo::*)()>(&VRControllersRecorderSaveData::NodeInfo::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRControllersRecorderSaveData::NodeInfo*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRTrackersRecorder
#include "GlobalNamespace/VRTrackersRecorder.hpp"
// Including type: VRTrackersRecorder/SavedData
#include "GlobalNamespace/VRTrackersRecorder_SavedData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: VRTrackersRecorder/Keyframe
#include "GlobalNamespace/VRTrackersRecorder_Keyframe.hpp"
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: SteamVR_Events/Action
#include "GlobalNamespace/SteamVR_Events_Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRTrackersRecorder.Awake
void GlobalNamespace::VRTrackersRecorder::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTrackersRecorder::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRTrackersRecorder.OnDestroy
void GlobalNamespace::VRTrackersRecorder::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTrackersRecorder::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRTrackersRecorder.OnEnable
void GlobalNamespace::VRTrackersRecorder::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTrackersRecorder::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRTrackersRecorder.OnDisable
void GlobalNamespace::VRTrackersRecorder::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTrackersRecorder::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRTrackersRecorder.OnNewPoses
void GlobalNamespace::VRTrackersRecorder::OnNewPoses(::Array<Valve::VR::TrackedDevicePose_t>* poses) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTrackersRecorder::OnNewPoses");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnNewPoses", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(poses)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, poses);
}
// Autogenerated method: VRTrackersRecorder.Update
void GlobalNamespace::VRTrackersRecorder::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTrackersRecorder::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRTrackersRecorder.Save
void GlobalNamespace::VRTrackersRecorder::Save() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTrackersRecorder::Save");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Save", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRTrackersRecorder.Load
void GlobalNamespace::VRTrackersRecorder::Load() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTrackersRecorder::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: VRTrackersRecorder::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::*)()>(&VRTrackersRecorder::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTrackersRecorder::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::*)()>(&VRTrackersRecorder::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTrackersRecorder::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::*)()>(&VRTrackersRecorder::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTrackersRecorder::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::*)()>(&VRTrackersRecorder::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTrackersRecorder::OnNewPoses
// Il2CppName: OnNewPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::*)(::Array<Valve::VR::TrackedDevicePose_t>*)>(&VRTrackersRecorder::OnNewPoses)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder*), "OnNewPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<Valve::VR::TrackedDevicePose_t>*>()});
  }
};
// Writing MetadataGetter for method: VRTrackersRecorder::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::*)()>(&VRTrackersRecorder::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTrackersRecorder::Save
// Il2CppName: Save
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::*)()>(&VRTrackersRecorder::Save)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder*), "Save", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTrackersRecorder::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::*)()>(&VRTrackersRecorder::Load)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRTrackersRecorder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::*)()>(&VRTrackersRecorder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::*)()>(&VRTrackersRecorder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRTrackersRecorder/SavedData
#include "GlobalNamespace/VRTrackersRecorder_SavedData.hpp"
// Including type: VRTrackersRecorder/SavedData/KeyframeSerializable
#include "GlobalNamespace/VRTrackersRecorder_SavedData_KeyframeSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VRTrackersRecorder::SavedData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::SavedData::*)()>(&VRTrackersRecorder::SavedData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder::SavedData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::SavedData::*)()>(&VRTrackersRecorder::SavedData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder::SavedData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRTrackersRecorder/SavedData/KeyframeSerializable
#include "GlobalNamespace/VRTrackersRecorder_SavedData_KeyframeSerializable.hpp"
// Including type: VRTrackersRecorder/SavedData/KeyframeSerializable/TransformSerializable
#include "GlobalNamespace/VRTrackersRecorder_SavedData_KeyframeSerializable_TransformSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VRTrackersRecorder::SavedData::KeyframeSerializable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::SavedData::KeyframeSerializable::*)()>(&VRTrackersRecorder::SavedData::KeyframeSerializable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder::SavedData::KeyframeSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::SavedData::KeyframeSerializable::*)()>(&VRTrackersRecorder::SavedData::KeyframeSerializable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder::SavedData::KeyframeSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRTrackersRecorder/SavedData/KeyframeSerializable/TransformSerializable
#include "GlobalNamespace/VRTrackersRecorder_SavedData_KeyframeSerializable_TransformSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VRTrackersRecorder::SavedData::KeyframeSerializable::TransformSerializable::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::SavedData::KeyframeSerializable::TransformSerializable::*)()>(&VRTrackersRecorder::SavedData::KeyframeSerializable::TransformSerializable::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder::SavedData::KeyframeSerializable::TransformSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::SavedData::KeyframeSerializable::TransformSerializable::*)()>(&VRTrackersRecorder::SavedData::KeyframeSerializable::TransformSerializable::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder::SavedData::KeyframeSerializable::TransformSerializable*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRTrackersRecorder/RecordMode
#include "GlobalNamespace/VRTrackersRecorder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public VRTrackersRecorder/RecordMode Record
GlobalNamespace::VRTrackersRecorder::RecordMode GlobalNamespace::VRTrackersRecorder::RecordMode::_get_Record() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTrackersRecorder::RecordMode::_get_Record");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::VRTrackersRecorder::RecordMode>("", "VRTrackersRecorder/RecordMode", "Record"));
}
// Autogenerated static field setter
// Set static field: static public VRTrackersRecorder/RecordMode Record
void GlobalNamespace::VRTrackersRecorder::RecordMode::_set_Record(GlobalNamespace::VRTrackersRecorder::RecordMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTrackersRecorder::RecordMode::_set_Record");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRTrackersRecorder/RecordMode", "Record", value));
}
// Autogenerated static field getter
// Get static field: static public VRTrackersRecorder/RecordMode Playback
GlobalNamespace::VRTrackersRecorder::RecordMode GlobalNamespace::VRTrackersRecorder::RecordMode::_get_Playback() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTrackersRecorder::RecordMode::_get_Playback");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::VRTrackersRecorder::RecordMode>("", "VRTrackersRecorder/RecordMode", "Playback"));
}
// Autogenerated static field setter
// Set static field: static public VRTrackersRecorder/RecordMode Playback
void GlobalNamespace::VRTrackersRecorder::RecordMode::_set_Playback(GlobalNamespace::VRTrackersRecorder::RecordMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTrackersRecorder::RecordMode::_set_Playback");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRTrackersRecorder/RecordMode", "Playback", value));
}
// Autogenerated static field getter
// Get static field: static public VRTrackersRecorder/RecordMode Off
GlobalNamespace::VRTrackersRecorder::RecordMode GlobalNamespace::VRTrackersRecorder::RecordMode::_get_Off() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTrackersRecorder::RecordMode::_get_Off");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::VRTrackersRecorder::RecordMode>("", "VRTrackersRecorder/RecordMode", "Off"));
}
// Autogenerated static field setter
// Set static field: static public VRTrackersRecorder/RecordMode Off
void GlobalNamespace::VRTrackersRecorder::RecordMode::_set_Off(GlobalNamespace::VRTrackersRecorder::RecordMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRTrackersRecorder::RecordMode::_set_Off");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "VRTrackersRecorder/RecordMode", "Off", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRTrackersRecorder/Keyframe
#include "GlobalNamespace/VRTrackersRecorder_Keyframe.hpp"
// Including type: VRTrackersRecorder/Keyframe/KeyframeTransform
#include "GlobalNamespace/VRTrackersRecorder_Keyframe_KeyframeTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VRTrackersRecorder::Keyframe::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::Keyframe::*)()>(&VRTrackersRecorder::Keyframe::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder::Keyframe*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::Keyframe::*)()>(&VRTrackersRecorder::Keyframe::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder::Keyframe*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRTrackersRecorder/Keyframe/KeyframeTransform
#include "GlobalNamespace/VRTrackersRecorder_Keyframe_KeyframeTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: VRTrackersRecorder::Keyframe::KeyframeTransform::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::Keyframe::KeyframeTransform::*)()>(&VRTrackersRecorder::Keyframe::KeyframeTransform::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder::Keyframe::KeyframeTransform*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRTrackersRecorder::Keyframe::KeyframeTransform::*)()>(&VRTrackersRecorder::Keyframe::KeyframeTransform::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRTrackersRecorder::Keyframe::KeyframeTransform*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerTimelineMock
#include "GlobalNamespace/MultiplayerTimelineMock.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerTimelineMock.get_connectedPlayerIntroAnimators
::Array<UnityEngine::GameObject*>* GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerIntroAnimators() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerIntroAnimators");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayerIntroAnimators", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerTimelineMock.get_connectedPlayerScoreRings
::Array<UnityEngine::GameObject*>* GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerScoreRings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerScoreRings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayerScoreRings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerTimelineMock.get_connectedPlayerOutroAnimators
::Array<UnityEngine::GameObject*>* GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerOutroAnimators() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerOutroAnimators");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedPlayerOutroAnimators", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerTimelineMock.get_localPlayerIntroAnimator
UnityEngine::GameObject* GlobalNamespace::MultiplayerTimelineMock::get_localPlayerIntroAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerTimelineMock::get_localPlayerIntroAnimator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerIntroAnimator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerTimelineMock.get_localPlayerScoreRingItem
UnityEngine::GameObject* GlobalNamespace::MultiplayerTimelineMock::get_localPlayerScoreRingItem() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerTimelineMock::get_localPlayerScoreRingItem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerScoreRingItem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerTimelineMock.get_localPlayerOutroAnimator
UnityEngine::GameObject* GlobalNamespace::MultiplayerTimelineMock::get_localPlayerOutroAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerTimelineMock::get_localPlayerOutroAnimator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localPlayerOutroAnimator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerTimelineMock.get_connectedDuelIntroAnimator
UnityEngine::GameObject* GlobalNamespace::MultiplayerTimelineMock::get_connectedDuelIntroAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerTimelineMock::get_connectedDuelIntroAnimator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedDuelIntroAnimator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerTimelineMock.get_connectedDuelOutroAnimator
UnityEngine::GameObject* GlobalNamespace::MultiplayerTimelineMock::get_connectedDuelOutroAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerTimelineMock::get_connectedDuelOutroAnimator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_connectedDuelOutroAnimator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerTimelineMock.get_localDuelIntroAnimator
UnityEngine::GameObject* GlobalNamespace::MultiplayerTimelineMock::get_localDuelIntroAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerTimelineMock::get_localDuelIntroAnimator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localDuelIntroAnimator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerTimelineMock.get_localDuelOutroAnimator
UnityEngine::GameObject* GlobalNamespace::MultiplayerTimelineMock::get_localDuelOutroAnimator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerTimelineMock::get_localDuelOutroAnimator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localDuelOutroAnimator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerTimelineMock.get_resultAvatars
::Array<UnityEngine::GameObject*>* GlobalNamespace::MultiplayerTimelineMock::get_resultAvatars() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerTimelineMock::get_resultAvatars");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultAvatars", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerTimelineMock.get_badgeTimelines
::Array<UnityEngine::GameObject*>* GlobalNamespace::MultiplayerTimelineMock::get_badgeTimelines() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerTimelineMock::get_badgeTimelines");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_badgeTimelines", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::GameObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerTimelineMock.get_resultsMocks
UnityEngine::GameObject* GlobalNamespace::MultiplayerTimelineMock::get_resultsMocks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerTimelineMock::get_resultsMocks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_resultsMocks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerTimelineMock.HandleActivations
void GlobalNamespace::MultiplayerTimelineMock::HandleActivations(bool isDuel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerTimelineMock::HandleActivations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleActivations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isDuel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isDuel);
}
// Writing MetadataGetter for method: MultiplayerTimelineMock::get_connectedPlayerIntroAnimators
// Il2CppName: get_connectedPlayerIntroAnimators
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::GameObject*>* (MultiplayerTimelineMock::*)()>(&MultiplayerTimelineMock::get_connectedPlayerIntroAnimators)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), "get_connectedPlayerIntroAnimators", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerTimelineMock::get_connectedPlayerScoreRings
// Il2CppName: get_connectedPlayerScoreRings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::GameObject*>* (MultiplayerTimelineMock::*)()>(&MultiplayerTimelineMock::get_connectedPlayerScoreRings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), "get_connectedPlayerScoreRings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerTimelineMock::get_connectedPlayerOutroAnimators
// Il2CppName: get_connectedPlayerOutroAnimators
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::GameObject*>* (MultiplayerTimelineMock::*)()>(&MultiplayerTimelineMock::get_connectedPlayerOutroAnimators)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), "get_connectedPlayerOutroAnimators", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerTimelineMock::get_localPlayerIntroAnimator
// Il2CppName: get_localPlayerIntroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (MultiplayerTimelineMock::*)()>(&MultiplayerTimelineMock::get_localPlayerIntroAnimator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), "get_localPlayerIntroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerTimelineMock::get_localPlayerScoreRingItem
// Il2CppName: get_localPlayerScoreRingItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (MultiplayerTimelineMock::*)()>(&MultiplayerTimelineMock::get_localPlayerScoreRingItem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), "get_localPlayerScoreRingItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerTimelineMock::get_localPlayerOutroAnimator
// Il2CppName: get_localPlayerOutroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (MultiplayerTimelineMock::*)()>(&MultiplayerTimelineMock::get_localPlayerOutroAnimator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), "get_localPlayerOutroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerTimelineMock::get_connectedDuelIntroAnimator
// Il2CppName: get_connectedDuelIntroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (MultiplayerTimelineMock::*)()>(&MultiplayerTimelineMock::get_connectedDuelIntroAnimator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), "get_connectedDuelIntroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerTimelineMock::get_connectedDuelOutroAnimator
// Il2CppName: get_connectedDuelOutroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (MultiplayerTimelineMock::*)()>(&MultiplayerTimelineMock::get_connectedDuelOutroAnimator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), "get_connectedDuelOutroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerTimelineMock::get_localDuelIntroAnimator
// Il2CppName: get_localDuelIntroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (MultiplayerTimelineMock::*)()>(&MultiplayerTimelineMock::get_localDuelIntroAnimator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), "get_localDuelIntroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerTimelineMock::get_localDuelOutroAnimator
// Il2CppName: get_localDuelOutroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (MultiplayerTimelineMock::*)()>(&MultiplayerTimelineMock::get_localDuelOutroAnimator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), "get_localDuelOutroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerTimelineMock::get_resultAvatars
// Il2CppName: get_resultAvatars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::GameObject*>* (MultiplayerTimelineMock::*)()>(&MultiplayerTimelineMock::get_resultAvatars)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), "get_resultAvatars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerTimelineMock::get_badgeTimelines
// Il2CppName: get_badgeTimelines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::GameObject*>* (MultiplayerTimelineMock::*)()>(&MultiplayerTimelineMock::get_badgeTimelines)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), "get_badgeTimelines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerTimelineMock::get_resultsMocks
// Il2CppName: get_resultsMocks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (MultiplayerTimelineMock::*)()>(&MultiplayerTimelineMock::get_resultsMocks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), "get_resultsMocks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerTimelineMock::HandleActivations
// Il2CppName: HandleActivations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerTimelineMock::*)(bool)>(&MultiplayerTimelineMock::HandleActivations)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), "HandleActivations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerTimelineMock::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerTimelineMock::*)()>(&MultiplayerTimelineMock::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerTimelineMock::*)()>(&MultiplayerTimelineMock::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerTimelineMock*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: VRCenterAdjust
#include "GlobalNamespace/VRCenterAdjust.hpp"
// Including type: Vector3SO
#include "GlobalNamespace/Vector3SO.hpp"
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: VRCenterAdjust.Awake
void GlobalNamespace::VRCenterAdjust::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRCenterAdjust::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRCenterAdjust.Start
void GlobalNamespace::VRCenterAdjust::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRCenterAdjust::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRCenterAdjust.OnEnable
void GlobalNamespace::VRCenterAdjust::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRCenterAdjust::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRCenterAdjust.OnDisable
void GlobalNamespace::VRCenterAdjust::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRCenterAdjust::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRCenterAdjust.HandleRoomCenterDidChange
void GlobalNamespace::VRCenterAdjust::HandleRoomCenterDidChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRCenterAdjust::HandleRoomCenterDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleRoomCenterDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRCenterAdjust.HandleRoomRotationDidChange
void GlobalNamespace::VRCenterAdjust::HandleRoomRotationDidChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRCenterAdjust::HandleRoomRotationDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleRoomRotationDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRCenterAdjust.Update
void GlobalNamespace::VRCenterAdjust::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRCenterAdjust::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: VRCenterAdjust.ResetRoom
void GlobalNamespace::VRCenterAdjust::ResetRoom() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRCenterAdjust::ResetRoom");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetRoom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: VRCenterAdjust::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRCenterAdjust::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRCenterAdjust::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRCenterAdjust::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRCenterAdjust::HandleRoomCenterDidChange
// Il2CppName: HandleRoomCenterDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::HandleRoomCenterDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "HandleRoomCenterDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRCenterAdjust::HandleRoomRotationDidChange
// Il2CppName: HandleRoomRotationDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::HandleRoomRotationDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "HandleRoomRotationDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRCenterAdjust::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRCenterAdjust::ResetRoom
// Il2CppName: ResetRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::ResetRoom)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), "ResetRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRCenterAdjust::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRCenterAdjust::*)()>(&VRCenterAdjust::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRCenterAdjust*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ArrayPositionTween
#include "GlobalNamespace/ArrayPositionTween.hpp"
// Including type: TimelineArrayReference
#include "GlobalNamespace/TimelineArrayReference.hpp"
// Including type: CustomTweenBehaviour
#include "GlobalNamespace/CustomTweenBehaviour.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ArrayPositionTween.get_clipCaps
UnityEngine::Timeline::ClipCaps GlobalNamespace::ArrayPositionTween::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArrayPositionTween::get_clipCaps");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clipCaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: ArrayPositionTween.CreatePlayable
UnityEngine::Playables::Playable GlobalNamespace::ArrayPositionTween::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArrayPositionTween::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Writing MetadataGetter for method: ArrayPositionTween::get_clipCaps
// Il2CppName: get_clipCaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::ClipCaps (ArrayPositionTween::*)()>(&ArrayPositionTween::get_clipCaps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArrayPositionTween*), "get_clipCaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ArrayPositionTween::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (ArrayPositionTween::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*)>(&ArrayPositionTween::CreatePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArrayPositionTween*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: ArrayPositionTween::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArrayPositionTween::*)()>(&ArrayPositionTween::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArrayPositionTween*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArrayPositionTween::*)()>(&ArrayPositionTween::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArrayPositionTween*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarColorAsset
#include "GlobalNamespace/AvatarColorAsset.hpp"
// Including type: AvatarColorBehaviour
#include "GlobalNamespace/AvatarColorBehaviour.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarColorAsset.get_clipCaps
UnityEngine::Timeline::ClipCaps GlobalNamespace::AvatarColorAsset::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorAsset::get_clipCaps");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clipCaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: AvatarColorAsset.CreatePlayable
UnityEngine::Playables::Playable GlobalNamespace::AvatarColorAsset::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Writing MetadataGetter for method: AvatarColorAsset::get_clipCaps
// Il2CppName: get_clipCaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::ClipCaps (AvatarColorAsset::*)()>(&AvatarColorAsset::get_clipCaps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarColorAsset*), "get_clipCaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarColorAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (AvatarColorAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*)>(&AvatarColorAsset::CreatePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarColorAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: AvatarColorAsset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarColorAsset::*)()>(&AvatarColorAsset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarColorAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarColorAsset::*)()>(&AvatarColorAsset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarColorAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarColorBehaviour
#include "GlobalNamespace/AvatarColorBehaviour.hpp"
// Including type: AvatarVisualController
#include "GlobalNamespace/AvatarVisualController.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarColorBehaviour.OnGraphStart
void GlobalNamespace::AvatarColorBehaviour::OnGraphStart(UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorBehaviour::OnGraphStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnGraphStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: AvatarColorBehaviour.ProcessFrame
void GlobalNamespace::AvatarColorBehaviour::ProcessFrame(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorBehaviour::ProcessFrame");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable), ::il2cpp_utils::ExtractType(info), ::il2cpp_utils::ExtractType(playerData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable, info, playerData);
}
// Autogenerated method: AvatarColorBehaviour.OnPlayableDestroy
void GlobalNamespace::AvatarColorBehaviour::OnPlayableDestroy(UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorBehaviour::OnPlayableDestroy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPlayableDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable);
}
// Writing MetadataGetter for method: AvatarColorBehaviour::OnGraphStart
// Il2CppName: OnGraphStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarColorBehaviour::*)(UnityEngine::Playables::Playable)>(&AvatarColorBehaviour::OnGraphStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarColorBehaviour*), "OnGraphStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: AvatarColorBehaviour::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarColorBehaviour::*)(UnityEngine::Playables::Playable, UnityEngine::Playables::FrameData, ::Il2CppObject*)>(&AvatarColorBehaviour::ProcessFrame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarColorBehaviour*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::FrameData>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: AvatarColorBehaviour::OnPlayableDestroy
// Il2CppName: OnPlayableDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarColorBehaviour::*)(UnityEngine::Playables::Playable)>(&AvatarColorBehaviour::OnPlayableDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarColorBehaviour*), "OnPlayableDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::Playable>()});
  }
};
// Writing MetadataGetter for method: AvatarColorBehaviour::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarColorBehaviour::*)()>(&AvatarColorBehaviour::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarColorBehaviour*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarColorBehaviour::*)()>(&AvatarColorBehaviour::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarColorBehaviour*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarColorTrack
#include "GlobalNamespace/AvatarColorTrack.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AvatarColorTrack::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarColorTrack::*)()>(&AvatarColorTrack::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarColorTrack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarColorTrack::*)()>(&AvatarColorTrack::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarColorTrack*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BloomFogParamsAsset
#include "GlobalNamespace/BloomFogParamsAsset.hpp"
// Including type: BloomFogParamsBehaviour
#include "GlobalNamespace/BloomFogParamsBehaviour.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BloomFogParamsAsset.get_clipCaps
UnityEngine::Timeline::ClipCaps GlobalNamespace::BloomFogParamsAsset::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogParamsAsset::get_clipCaps");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clipCaps", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: BloomFogParamsAsset.CreatePlayable
UnityEngine::Playables::Playable GlobalNamespace::BloomFogParamsAsset::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BloomFogParamsAsset::CreatePlayable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlayable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(graph), ::il2cpp_utils::ExtractType(go)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Writing MetadataGetter for method: BloomFogParamsAsset::get_clipCaps
// Il2CppName: get_clipCaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Timeline::ClipCaps (BloomFogParamsAsset::*)()>(&BloomFogParamsAsset::get_clipCaps)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAsset*), "get_clipCaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BloomFogParamsAsset::CreatePlayable
// Il2CppName: CreatePlayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Playables::Playable (BloomFogParamsAsset::*)(UnityEngine::Playables::PlayableGraph, UnityEngine::GameObject*)>(&BloomFogParamsAsset::CreatePlayable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAsset*), "CreatePlayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Playables::PlayableGraph>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>()});
  }
};
// Writing MetadataGetter for method: BloomFogParamsAsset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogParamsAsset::*)()>(&BloomFogParamsAsset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BloomFogParamsAsset::*)()>(&BloomFogParamsAsset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BloomFogParamsAsset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
