// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR/VirtualBone
#include "RootMotion/FinalIK/IKSolverVR_VirtualBone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone..ctor
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::VirtualBone::New_ctor(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation) {
  return (IKSolverVR::VirtualBone*)THROW_UNLESS(il2cpp_utils::New("RootMotion.FinalIK", "IKSolverVR/VirtualBone", position, rotation));
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.Read
void RootMotion::FinalIK::IKSolverVR::VirtualBone::Read(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "Read", position, rotation));
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.SwingRotation
void RootMotion::FinalIK::IKSolverVR::VirtualBone::SwingRotation(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int index, UnityEngine::Vector3 swingTarget, float weight) {
  THROW_UNLESS(il2cpp_utils::RunMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "SwingRotation", bones, index, swingTarget, weight));
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.PreSolve
float RootMotion::FinalIK::IKSolverVR::VirtualBone::PreSolve(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*& bones) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "PreSolve", bones));
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.RotateAroundPoint
void RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateAroundPoint(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int index, UnityEngine::Vector3 point, UnityEngine::Quaternion rotation) {
  THROW_UNLESS(il2cpp_utils::RunMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "RotateAroundPoint", bones, index, point, rotation));
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.RotateBy
void RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateBy(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int index, UnityEngine::Quaternion rotation) {
  THROW_UNLESS(il2cpp_utils::RunMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "RotateBy", bones, index, rotation));
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.RotateBy
void RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateBy(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, UnityEngine::Quaternion rotation) {
  THROW_UNLESS(il2cpp_utils::RunMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "RotateBy", bones, rotation));
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.RotateTo
void RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateTo(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int index, UnityEngine::Quaternion rotation) {
  THROW_UNLESS(il2cpp_utils::RunMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "RotateTo", bones, index, rotation));
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.SolveTrigonometric
void RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveTrigonometric(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int first, int second, int third, UnityEngine::Vector3 targetPosition, UnityEngine::Vector3 bendNormal, float weight) {
  THROW_UNLESS(il2cpp_utils::RunMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "SolveTrigonometric", bones, first, second, third, targetPosition, bendNormal, weight));
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.GetDirectionToBendPoint
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::VirtualBone::GetDirectionToBendPoint(UnityEngine::Vector3 direction, float directionMag, UnityEngine::Vector3 bendDirection, float sqrMag1, float sqrMag2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "GetDirectionToBendPoint", direction, directionMag, bendDirection, sqrMag1, sqrMag2));
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.SolveFABRIK
void RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveFABRIK(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, UnityEngine::Vector3 startPosition, UnityEngine::Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length, UnityEngine::Vector3 startOffset) {
  THROW_UNLESS(il2cpp_utils::RunMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "SolveFABRIK", bones, startPosition, targetPosition, weight, minNormalizedTargetDistance, iterations, length, startOffset));
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.SolveFABRIKJoint
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveFABRIKJoint(UnityEngine::Vector3 pos1, UnityEngine::Vector3 pos2, float length) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "SolveFABRIKJoint", pos1, pos2, length));
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.SolveCCD
void RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveCCD(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, UnityEngine::Vector3 targetPosition, float weight, int iterations) {
  THROW_UNLESS(il2cpp_utils::RunMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "SolveCCD", bones, targetPosition, weight, iterations));
}
