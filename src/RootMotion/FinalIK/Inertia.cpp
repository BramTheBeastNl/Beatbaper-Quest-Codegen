// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Inertia
#include "RootMotion/FinalIK/Inertia.hpp"
// Including type: RootMotion.FinalIK.Inertia/Body
#include "RootMotion/FinalIK/Inertia_Body.hpp"
// Including type: RootMotion.FinalIK.OffsetModifier/OffsetLimits
#include "RootMotion/FinalIK/OffsetModifier_OffsetLimits.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Inertia.ResetBodies
void RootMotion::FinalIK::Inertia::ResetBodies() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("Inertia").WithContext("ResetBodies");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "ResetBodies", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Inertia.OnModifyOffset
void RootMotion::FinalIK::Inertia::OnModifyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("Inertia").WithContext("OnModifyOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "OnModifyOffset", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Inertia..ctor
RootMotion::FinalIK::Inertia* RootMotion::FinalIK::Inertia::New_ctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("Inertia").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<Inertia*>());
}
