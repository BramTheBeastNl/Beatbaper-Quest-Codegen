// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.RotationLimitAngle
#include "RootMotion/FinalIK/RotationLimitAngle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.OpenUserManual
void RootMotion::FinalIK::RotationLimitAngle::OpenUserManual() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OpenUserManual"));
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.OpenScriptReference
void RootMotion::FinalIK::RotationLimitAngle::OpenScriptReference() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "OpenScriptReference"));
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.SupportGroup
void RootMotion::FinalIK::RotationLimitAngle::SupportGroup() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SupportGroup"));
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.ASThread
void RootMotion::FinalIK::RotationLimitAngle::ASThread() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ASThread"));
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.LimitSwing
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimitAngle::LimitSwing(UnityEngine::Quaternion rotation) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Quaternion>(this, "LimitSwing", rotation));
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.LimitRotation
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimitAngle::LimitRotation(UnityEngine::Quaternion rotation) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Quaternion>(this, "LimitRotation", rotation));
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle..ctor
RootMotion::FinalIK::RotationLimitAngle* RootMotion::FinalIK::RotationLimitAngle::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<RotationLimitAngle*>());
}
