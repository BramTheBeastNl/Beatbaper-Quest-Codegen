// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.RotationLimitAngle
#include "RootMotion/FinalIK/RotationLimitAngle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.OpenUserManual
void RootMotion::FinalIK::RotationLimitAngle::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitAngle").WithContext("OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.OpenScriptReference
void RootMotion::FinalIK::RotationLimitAngle::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitAngle").WithContext("OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.SupportGroup
void RootMotion::FinalIK::RotationLimitAngle::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitAngle").WithContext("SupportGroup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.ASThread
void RootMotion::FinalIK::RotationLimitAngle::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitAngle").WithContext("ASThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.LimitSwing
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimitAngle::LimitSwing(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitAngle").WithContext("LimitSwing");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LimitSwing", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rotation)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, rotation);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitAngle.LimitRotation
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimitAngle::LimitRotation(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitAngle").WithContext("LimitRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LimitRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rotation)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, rotation);
}
