// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKMappingBone
#include "RootMotion/FinalIK/IKMappingBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.FinalIK.IKMapping/BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.StoreDefaultLocalState
void RootMotion::FinalIK::IKMappingBone::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKMappingBone").WithContext("StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.FixTransforms
void RootMotion::FinalIK::IKMappingBone::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKMappingBone").WithContext("FixTransforms");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.ReadPose
void RootMotion::FinalIK::IKMappingBone::ReadPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKMappingBone").WithContext("ReadPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.WritePose
void RootMotion::FinalIK::IKMappingBone::WritePose(float solverWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKMappingBone").WithContext("WritePose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "WritePose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(solverWeight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solverWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.IsValid
bool RootMotion::FinalIK::IKMappingBone::IsValid(RootMotion::FinalIK::IKSolver* solver, ::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKMappingBone").WithContext("IsValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(solver, message)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, solver, message);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.Initiate
void RootMotion::FinalIK::IKMappingBone::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKMappingBone").WithContext("Initiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(solver)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
