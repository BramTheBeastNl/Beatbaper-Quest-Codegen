// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.RotationLimitPolygonal
#include "RootMotion/FinalIK/RotationLimitPolygonal.hpp"
// Including type: RootMotion.FinalIK.RotationLimitPolygonal/ReachCone
#include "RootMotion/FinalIK/RotationLimitPolygonal_ReachCone.hpp"
// Including type: RootMotion.FinalIK.RotationLimitPolygonal/LimitPoint
#include "RootMotion/FinalIK/RotationLimitPolygonal_LimitPoint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.OpenUserManual
void RootMotion::FinalIK::RotationLimitPolygonal::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext("OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "OpenUserManual", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.OpenScriptReference
void RootMotion::FinalIK::RotationLimitPolygonal::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext("OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "OpenScriptReference", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.SupportGroup
void RootMotion::FinalIK::RotationLimitPolygonal::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext("SupportGroup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "SupportGroup", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.ASThread
void RootMotion::FinalIK::RotationLimitPolygonal::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext("ASThread");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "ASThread", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.SetLimitPoints
void RootMotion::FinalIK::RotationLimitPolygonal::SetLimitPoints(::Array<RootMotion::FinalIK::RotationLimitPolygonal::LimitPoint*>* points) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext("SetLimitPoints");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "SetLimitPoints", {}, ::il2cpp_utils::ExtractTypes(points)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, points);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.Start
void RootMotion::FinalIK::RotationLimitPolygonal::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext("Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "Start", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.ResetToDefault
void RootMotion::FinalIK::RotationLimitPolygonal::ResetToDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext("ResetToDefault");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "ResetToDefault", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.BuildReachCones
void RootMotion::FinalIK::RotationLimitPolygonal::BuildReachCones() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext("BuildReachCones");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "BuildReachCones", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.SmoothPoints
::Array<UnityEngine::Vector3>* RootMotion::FinalIK::RotationLimitPolygonal::SmoothPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext("SmoothPoints");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<::Array<UnityEngine::Vector3>*>(), "SmoothPoints", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Vector3>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.GetScalar
float RootMotion::FinalIK::RotationLimitPolygonal::GetScalar(int k) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext("GetScalar");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<float>(), "GetScalar", {}, ::il2cpp_utils::ExtractTypes(k)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, k);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.PointToTangentPlane
UnityEngine::Vector3 RootMotion::FinalIK::RotationLimitPolygonal::PointToTangentPlane(UnityEngine::Vector3 p, float r) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext("PointToTangentPlane");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<UnityEngine::Vector3>(), "PointToTangentPlane", {}, ::il2cpp_utils::ExtractTypes(p, r)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, p, r);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.TangentPointToSphere
UnityEngine::Vector3 RootMotion::FinalIK::RotationLimitPolygonal::TangentPointToSphere(UnityEngine::Vector3 q, float r) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext("TangentPointToSphere");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<UnityEngine::Vector3>(), "TangentPointToSphere", {}, ::il2cpp_utils::ExtractTypes(q, r)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, q, r);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.LimitSwing
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimitPolygonal::LimitSwing(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext("LimitSwing");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<UnityEngine::Quaternion>(), "LimitSwing", {}, ::il2cpp_utils::ExtractTypes(rotation)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, rotation);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.GetReachCone
int RootMotion::FinalIK::RotationLimitPolygonal::GetReachCone(UnityEngine::Vector3 L) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext("GetReachCone");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<int>(), "GetReachCone", {}, ::il2cpp_utils::ExtractTypes(L)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, L);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal.LimitRotation
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimitPolygonal::LimitRotation(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext("LimitRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<UnityEngine::Quaternion>(), "LimitRotation", {}, ::il2cpp_utils::ExtractTypes(rotation)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, rotation);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimitPolygonal..ctor
RootMotion::FinalIK::RotationLimitPolygonal* RootMotion::FinalIK::RotationLimitPolygonal::New_ctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimitPolygonal").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<RotationLimitPolygonal*>());
}
