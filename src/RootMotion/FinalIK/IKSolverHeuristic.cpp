// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverHeuristic
#include "RootMotion/FinalIK/IKSolverHeuristic.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Bone
#include "RootMotion/FinalIK/IKSolver_Bone.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.SetChain
bool RootMotion::FinalIK::IKSolverHeuristic::SetChain(::Array<UnityEngine::Transform*>* hierarchy, UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("SetChain");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetChain", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hierarchy, root)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, hierarchy, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.AddBone
void RootMotion::FinalIK::IKSolverHeuristic::AddBone(UnityEngine::Transform* bone) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("AddBone");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AddBone", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bone)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.get_minBones
int RootMotion::FinalIK::IKSolverHeuristic::get_minBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("get_minBones");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_minBones", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.get_boneLengthCanBeZero
bool RootMotion::FinalIK::IKSolverHeuristic::get_boneLengthCanBeZero() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("get_boneLengthCanBeZero");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_boneLengthCanBeZero", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.get_allowCommonParent
bool RootMotion::FinalIK::IKSolverHeuristic::get_allowCommonParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("get_allowCommonParent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_allowCommonParent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.InitiateBones
void RootMotion::FinalIK::IKSolverHeuristic::InitiateBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("InitiateBones");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InitiateBones", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.get_localDirection
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverHeuristic::get_localDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("get_localDirection");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_localDirection", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.get_positionOffset
float RootMotion::FinalIK::IKSolverHeuristic::get_positionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("get_positionOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_positionOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.GetSingularityOffset
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverHeuristic::GetSingularityOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("GetSingularityOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetSingularityOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.SingularityDetected
bool RootMotion::FinalIK::IKSolverHeuristic::SingularityDetected() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("SingularityDetected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SingularityDetected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverHeuristic::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.FixTransforms
void RootMotion::FinalIK::IKSolverHeuristic::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("FixTransforms");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.IsValid
bool RootMotion::FinalIK::IKSolverHeuristic::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("IsValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(message)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverHeuristic::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("GetPoints");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverHeuristic::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("GetPoint");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(transform)));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.OnInitiate
void RootMotion::FinalIK::IKSolverHeuristic::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("OnInitiate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.OnUpdate
void RootMotion::FinalIK::IKSolverHeuristic::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("IKSolverHeuristic").WithContext("OnUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
