// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.RotationLimit
#include "RootMotion/FinalIK/RotationLimit.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.RotationLimit.SetDefaultLocalRotation
void RootMotion::FinalIK::RotationLimit::SetDefaultLocalRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("SetDefaultLocalRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetDefaultLocalRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.SetDefaultLocalRotation
void RootMotion::FinalIK::RotationLimit::SetDefaultLocalRotation(UnityEngine::Quaternion localRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("SetDefaultLocalRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetDefaultLocalRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(localRotation)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, localRotation);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.GetLimitedLocalRotation
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimit::GetLimitedLocalRotation(UnityEngine::Quaternion localRotation, bool& changed) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("GetLimitedLocalRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetLimitedLocalRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(localRotation, changed)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, localRotation, changed);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.Apply
bool RootMotion::FinalIK::RotationLimit::Apply() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("Apply");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.Disable
void RootMotion::FinalIK::RotationLimit::Disable() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("Disable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Disable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.get_secondaryAxis
UnityEngine::Vector3 RootMotion::FinalIK::RotationLimit::get_secondaryAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("get_secondaryAxis");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_secondaryAxis", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.get_crossAxis
UnityEngine::Vector3 RootMotion::FinalIK::RotationLimit::get_crossAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("get_crossAxis");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_crossAxis", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.get_defaultLocalRotationOverride
bool RootMotion::FinalIK::RotationLimit::get_defaultLocalRotationOverride() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("get_defaultLocalRotationOverride");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_defaultLocalRotationOverride", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.set_defaultLocalRotationOverride
void RootMotion::FinalIK::RotationLimit::set_defaultLocalRotationOverride(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("set_defaultLocalRotationOverride");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_defaultLocalRotationOverride", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.LimitRotation
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimit::LimitRotation(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("LimitRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LimitRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rotation)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, rotation);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.Awake
void RootMotion::FinalIK::RotationLimit::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.LateUpdate
void RootMotion::FinalIK::RotationLimit::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("LateUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.LogWarning
void RootMotion::FinalIK::RotationLimit::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("LogWarning");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(message)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.Limit1DOF
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimit::Limit1DOF(UnityEngine::Quaternion rotation, UnityEngine::Vector3 axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("Limit1DOF");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion.FinalIK", "RotationLimit", "Limit1DOF", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rotation, axis)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rotation, axis);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.LimitTwist
UnityEngine::Quaternion RootMotion::FinalIK::RotationLimit::LimitTwist(UnityEngine::Quaternion rotation, UnityEngine::Vector3 axis, UnityEngine::Vector3 orthoAxis, float twistLimit) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("LimitTwist");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion.FinalIK", "RotationLimit", "LimitTwist", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rotation, axis, orthoAxis, twistLimit)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rotation, axis, orthoAxis, twistLimit);
}
// Autogenerated method: RootMotion.FinalIK.RotationLimit.GetOrthogonalAngle
float RootMotion::FinalIK::RotationLimit::GetOrthogonalAngle(UnityEngine::Vector3 v1, UnityEngine::Vector3 v2, UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RotationLimit").WithContext("GetOrthogonalAngle");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion.FinalIK", "RotationLimit", "GetOrthogonalAngle", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(v1, v2, normal)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, v1, v2, normal);
}
