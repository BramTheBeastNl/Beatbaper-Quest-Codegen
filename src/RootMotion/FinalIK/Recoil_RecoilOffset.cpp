// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Recoil/RecoilOffset
#include "RootMotion/FinalIK/Recoil_RecoilOffset.hpp"
// Including type: RootMotion.FinalIK.Recoil/RecoilOffset/EffectorLink
#include "RootMotion/FinalIK/Recoil_RecoilOffset_EffectorLink.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Recoil/RecoilOffset.Start
void RootMotion::FinalIK::Recoil::RecoilOffset::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RecoilOffset").WithContext("Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Recoil/RecoilOffset.Apply
void RootMotion::FinalIK::Recoil::RecoilOffset::Apply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, UnityEngine::Quaternion rotation, float masterWeight, float length, float timeLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("RecoilOffset").WithContext("Apply");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(solver, rotation, masterWeight, length, timeLeft)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, rotation, masterWeight, length, timeLeft);
}
