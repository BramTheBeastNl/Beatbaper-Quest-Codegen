// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Amplifier/Body
#include "RootMotion/FinalIK/Amplifier_Body.hpp"
// Including type: RootMotion.FinalIK.Amplifier/Body/EffectorLink
#include "RootMotion/FinalIK/Amplifier_Body_EffectorLink.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Amplifier/Body.Update
void RootMotion::FinalIK::Amplifier::Body::Update(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, float w, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("Body").WithContext("Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(solver, w, deltaTime)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, w, deltaTime);
}
// Autogenerated method: RootMotion.FinalIK.Amplifier/Body.Multiply
UnityEngine::Vector3 RootMotion::FinalIK::Amplifier::Body::Multiply(UnityEngine::Vector3 v1, UnityEngine::Vector3 v2) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("Body").WithContext("Multiply");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion.FinalIK", "Amplifier/Body", "Multiply", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(v1, v2)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, v1, v2);
}
