// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIKCalibrator
#include "RootMotion/FinalIK/VRIKCalibrator.hpp"
// Including type: RootMotion.FinalIK.VRIKCalibrator/Settings
#include "RootMotion/FinalIK/VRIKCalibrator_Settings.hpp"
// Including type: RootMotion.FinalIK.VRIKCalibrator/CalibrationData
#include "RootMotion/FinalIK/VRIKCalibrator_CalibrationData.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/Leg
#include "RootMotion/FinalIK/IKSolverVR_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator.RecalibrateScale
void RootMotion::FinalIK::VRIKCalibrator::RecalibrateScale(RootMotion::FinalIK::VRIK* ik, RootMotion::FinalIK::VRIKCalibrator::Settings* settings) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("VRIKCalibrator").WithContext("RecalibrateScale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIKCalibrator", il2cpp_utils::NoArgClass<void>(), "RecalibrateScale", {}, ::il2cpp_utils::ExtractTypes(ik, settings)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ik, settings);
}
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator.Calibrate
RootMotion::FinalIK::VRIKCalibrator::CalibrationData* RootMotion::FinalIK::VRIKCalibrator::Calibrate(RootMotion::FinalIK::VRIK* ik, RootMotion::FinalIK::VRIKCalibrator::Settings* settings, UnityEngine::Transform* headTracker, UnityEngine::Transform* bodyTracker, UnityEngine::Transform* leftHandTracker, UnityEngine::Transform* rightHandTracker, UnityEngine::Transform* leftFootTracker, UnityEngine::Transform* rightFootTracker) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("VRIKCalibrator").WithContext("Calibrate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIKCalibrator", il2cpp_utils::NoArgClass<RootMotion::FinalIK::VRIKCalibrator::CalibrationData*>(), "Calibrate", {}, ::il2cpp_utils::ExtractTypes(ik, settings, headTracker, bodyTracker, leftHandTracker, rightHandTracker, leftFootTracker, rightFootTracker)));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::VRIKCalibrator::CalibrationData*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ik, settings, headTracker, bodyTracker, leftHandTracker, rightHandTracker, leftFootTracker, rightFootTracker);
}
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator.CalibrateLeg
void RootMotion::FinalIK::VRIKCalibrator::CalibrateLeg(RootMotion::FinalIK::VRIKCalibrator::Settings* settings, UnityEngine::Transform* tracker, RootMotion::FinalIK::IKSolverVR::Leg* leg, UnityEngine::Transform* lastBone, UnityEngine::Vector3 rootForward, bool isLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("VRIKCalibrator").WithContext("CalibrateLeg");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIKCalibrator", il2cpp_utils::NoArgClass<void>(), "CalibrateLeg", {}, ::il2cpp_utils::ExtractTypes(settings, tracker, leg, lastBone, rootForward, isLeft)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, settings, tracker, leg, lastBone, rootForward, isLeft);
}
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator.Calibrate
void RootMotion::FinalIK::VRIKCalibrator::Calibrate(RootMotion::FinalIK::VRIK* ik, RootMotion::FinalIK::VRIKCalibrator::CalibrationData* data, UnityEngine::Transform* headTracker, UnityEngine::Transform* bodyTracker, UnityEngine::Transform* leftHandTracker, UnityEngine::Transform* rightHandTracker, UnityEngine::Transform* leftFootTracker, UnityEngine::Transform* rightFootTracker) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("VRIKCalibrator").WithContext("Calibrate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIKCalibrator", il2cpp_utils::NoArgClass<void>(), "Calibrate", {}, ::il2cpp_utils::ExtractTypes(ik, data, headTracker, bodyTracker, leftHandTracker, rightHandTracker, leftFootTracker, rightFootTracker)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ik, data, headTracker, bodyTracker, leftHandTracker, rightHandTracker, leftFootTracker, rightFootTracker);
}
// Autogenerated method: RootMotion.FinalIK.VRIKCalibrator.CalibrateLeg
void RootMotion::FinalIK::VRIKCalibrator::CalibrateLeg(RootMotion::FinalIK::VRIKCalibrator::CalibrationData* data, UnityEngine::Transform* tracker, RootMotion::FinalIK::IKSolverVR::Leg* leg, UnityEngine::Transform* lastBone, UnityEngine::Vector3 rootForward, bool isLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("VRIKCalibrator").WithContext("CalibrateLeg");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIKCalibrator", il2cpp_utils::NoArgClass<void>(), "CalibrateLeg", {}, ::il2cpp_utils::ExtractTypes(data, tracker, leg, lastBone, rootForward, isLeft)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, data, tracker, leg, lastBone, rootForward, isLeft);
}
