// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolver/Bone
#include "RootMotion/FinalIK/IKSolver_Bone.hpp"
// Including type: RootMotion.FinalIK.RotationLimit
#include "RootMotion/FinalIK/RotationLimit.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolver/Bone.get_rotationLimit
RootMotion::FinalIK::RotationLimit* RootMotion::FinalIK::IKSolver::Bone::get_rotationLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("Bone").WithContext("get_rotationLimit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_rotationLimit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::RotationLimit*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/Bone.set_rotationLimit
void RootMotion::FinalIK::IKSolver::Bone::set_rotationLimit(RootMotion::FinalIK::RotationLimit* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("Bone").WithContext("set_rotationLimit");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_rotationLimit", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/Bone.Swing
void RootMotion::FinalIK::IKSolver::Bone::Swing(UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("Bone").WithContext("Swing");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Swing", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(swingTarget, weight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/Bone.SolverSwing
void RootMotion::FinalIK::IKSolver::Bone::SolverSwing(::Array<RootMotion::FinalIK::IKSolver::Bone*>* bones, int index, UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("Bone").WithContext("SolverSwing");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolver/Bone", "SolverSwing", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bones, index, swingTarget, weight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, index, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/Bone.Swing2D
void RootMotion::FinalIK::IKSolver::Bone::Swing2D(UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("Bone").WithContext("Swing2D");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Swing2D", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(swingTarget, weight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/Bone.SetToSolverPosition
void RootMotion::FinalIK::IKSolver::Bone::SetToSolverPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("RootMotion::FinalIK").WithContext("Bone").WithContext("SetToSolverPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetToSolverPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
