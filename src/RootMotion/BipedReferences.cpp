// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
// Including type: RootMotion.BipedReferences/AutoDetectParams
#include "RootMotion/BipedReferences_AutoDetectParams.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.BipedReferences.get_isFilled
bool RootMotion::BipedReferences::get_isFilled() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isFilled"));
}
// Autogenerated method: RootMotion.BipedReferences.get_isEmpty
bool RootMotion::BipedReferences::get_isEmpty() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isEmpty"));
}
// Autogenerated method: RootMotion.BipedReferences.IsEmpty
bool RootMotion::BipedReferences::IsEmpty(bool includeRoot) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsEmpty", includeRoot));
}
// Autogenerated method: RootMotion.BipedReferences.Contains
bool RootMotion::BipedReferences::Contains(UnityEngine::Transform* t, bool ignoreRoot) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Contains", t, ignoreRoot));
}
// Autogenerated method: RootMotion.BipedReferences.AutoDetectReferences
bool RootMotion::BipedReferences::AutoDetectReferences(RootMotion::BipedReferences*& references, UnityEngine::Transform* root, RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "BipedReferences", "AutoDetectReferences", references, root, autoDetectParams));
}
// Autogenerated method: RootMotion.BipedReferences.DetectReferencesByNaming
void RootMotion::BipedReferences::DetectReferencesByNaming(RootMotion::BipedReferences*& references, UnityEngine::Transform* root, RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  THROW_UNLESS(il2cpp_utils::RunMethod("RootMotion", "BipedReferences", "DetectReferencesByNaming", references, root, autoDetectParams));
}
// Autogenerated method: RootMotion.BipedReferences.AssignHumanoidReferences
void RootMotion::BipedReferences::AssignHumanoidReferences(RootMotion::BipedReferences*& references, UnityEngine::Animator* animator, RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  THROW_UNLESS(il2cpp_utils::RunMethod("RootMotion", "BipedReferences", "AssignHumanoidReferences", references, animator, autoDetectParams));
}
// Autogenerated method: RootMotion.BipedReferences.SetupError
bool RootMotion::BipedReferences::SetupError(RootMotion::BipedReferences* references, ::Il2CppString*& errorMessage) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "BipedReferences", "SetupError", references, errorMessage));
}
// Autogenerated method: RootMotion.BipedReferences.SetupWarning
bool RootMotion::BipedReferences::SetupWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "BipedReferences", "SetupWarning", references, warningMessage));
}
// Autogenerated method: RootMotion.BipedReferences.IsNeckBone
bool RootMotion::BipedReferences::IsNeckBone(UnityEngine::Transform* bone, UnityEngine::Transform* leftUpperArm) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "BipedReferences", "IsNeckBone", bone, leftUpperArm));
}
// Autogenerated method: RootMotion.BipedReferences.AddBoneToEyes
bool RootMotion::BipedReferences::AddBoneToEyes(UnityEngine::Transform* bone, RootMotion::BipedReferences*& references, RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "BipedReferences", "AddBoneToEyes", bone, references, autoDetectParams));
}
// Autogenerated method: RootMotion.BipedReferences.AddBoneToSpine
bool RootMotion::BipedReferences::AddBoneToSpine(UnityEngine::Transform* bone, RootMotion::BipedReferences*& references, RootMotion::BipedReferences::AutoDetectParams autoDetectParams) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "BipedReferences", "AddBoneToSpine", bone, references, autoDetectParams));
}
// Autogenerated method: RootMotion.BipedReferences.DetectLimb
void RootMotion::BipedReferences::DetectLimb(RootMotion::BipedNaming::BoneType boneType, RootMotion::BipedNaming::BoneSide boneSide, UnityEngine::Transform*& firstBone, UnityEngine::Transform*& secondBone, UnityEngine::Transform*& lastBone, ::Array<UnityEngine::Transform*>* transforms) {
  THROW_UNLESS(il2cpp_utils::RunMethod("RootMotion", "BipedReferences", "DetectLimb", boneType, boneSide, firstBone, secondBone, lastBone, transforms));
}
// Autogenerated method: RootMotion.BipedReferences.AddBoneToHierarchy
void RootMotion::BipedReferences::AddBoneToHierarchy(::Array<UnityEngine::Transform*>*& bones, UnityEngine::Transform* transform) {
  THROW_UNLESS(il2cpp_utils::RunMethod("RootMotion", "BipedReferences", "AddBoneToHierarchy", bones, transform));
}
// Autogenerated method: RootMotion.BipedReferences.LimbError
bool RootMotion::BipedReferences::LimbError(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, ::Il2CppString*& errorMessage) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "BipedReferences", "LimbError", bone1, bone2, bone3, errorMessage));
}
// Autogenerated method: RootMotion.BipedReferences.LimbWarning
bool RootMotion::BipedReferences::LimbWarning(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, ::Il2CppString*& warningMessage) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "BipedReferences", "LimbWarning", bone1, bone2, bone3, warningMessage));
}
// Autogenerated method: RootMotion.BipedReferences.SpineError
bool RootMotion::BipedReferences::SpineError(RootMotion::BipedReferences* references, ::Il2CppString*& errorMessage) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "BipedReferences", "SpineError", references, errorMessage));
}
// Autogenerated method: RootMotion.BipedReferences.SpineWarning
bool RootMotion::BipedReferences::SpineWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "BipedReferences", "SpineWarning", references, warningMessage));
}
// Autogenerated method: RootMotion.BipedReferences.EyesError
bool RootMotion::BipedReferences::EyesError(RootMotion::BipedReferences* references, ::Il2CppString*& errorMessage) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "BipedReferences", "EyesError", references, errorMessage));
}
// Autogenerated method: RootMotion.BipedReferences.EyesWarning
bool RootMotion::BipedReferences::EyesWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "BipedReferences", "EyesWarning", references, warningMessage));
}
// Autogenerated method: RootMotion.BipedReferences.RootHeightWarning
bool RootMotion::BipedReferences::RootHeightWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "BipedReferences", "RootHeightWarning", references, warningMessage));
}
// Autogenerated method: RootMotion.BipedReferences.FacingAxisWarning
bool RootMotion::BipedReferences::FacingAxisWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "BipedReferences", "FacingAxisWarning", references, warningMessage));
}
// Autogenerated method: RootMotion.BipedReferences.GetVerticalOffset
float RootMotion::BipedReferences::GetVerticalOffset(UnityEngine::Vector3 p1, UnityEngine::Vector3 p2, UnityEngine::Quaternion rotation) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("RootMotion", "BipedReferences", "GetVerticalOffset", p1, p2, rotation));
}
// Autogenerated method: RootMotion.BipedReferences..ctor
RootMotion::BipedReferences* RootMotion::BipedReferences::New_ctor() {
  return (BipedReferences*)THROW_UNLESS(il2cpp_utils::New("RootMotion", "BipedReferences"));
}
