// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.Hierarchy
#include "RootMotion/Hierarchy.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.Hierarchy.HierarchyIsValid
bool RootMotion::Hierarchy::HierarchyIsValid(::Array<UnityEngine::Transform*>* bones) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "Hierarchy", "HierarchyIsValid", bones));
}
// Autogenerated method: RootMotion.Hierarchy.ContainsDuplicate
UnityEngine::Object* RootMotion::Hierarchy::ContainsDuplicate(::Array<UnityEngine::Object*>* objects) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Object*>("RootMotion", "Hierarchy", "ContainsDuplicate", objects));
}
// Autogenerated method: RootMotion.Hierarchy.IsAncestor
bool RootMotion::Hierarchy::IsAncestor(UnityEngine::Transform* transform, UnityEngine::Transform* ancestor) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "Hierarchy", "IsAncestor", transform, ancestor));
}
// Autogenerated method: RootMotion.Hierarchy.ContainsChild
bool RootMotion::Hierarchy::ContainsChild(UnityEngine::Transform* transform, UnityEngine::Transform* child) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "Hierarchy", "ContainsChild", transform, child));
}
// Autogenerated method: RootMotion.Hierarchy.AddAncestors
void RootMotion::Hierarchy::AddAncestors(UnityEngine::Transform* transform, UnityEngine::Transform* blocker, ::Array<UnityEngine::Transform*>*& array) {
  THROW_UNLESS(il2cpp_utils::RunMethod("RootMotion", "Hierarchy", "AddAncestors", transform, blocker, array));
}
// Autogenerated method: RootMotion.Hierarchy.GetAncestor
UnityEngine::Transform* RootMotion::Hierarchy::GetAncestor(UnityEngine::Transform* transform, int minChildCount) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Transform*>("RootMotion", "Hierarchy", "GetAncestor", transform, minChildCount));
}
// Autogenerated method: RootMotion.Hierarchy.GetFirstCommonAncestor
UnityEngine::Transform* RootMotion::Hierarchy::GetFirstCommonAncestor(UnityEngine::Transform* t1, UnityEngine::Transform* t2) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Transform*>("RootMotion", "Hierarchy", "GetFirstCommonAncestor", t1, t2));
}
// Autogenerated method: RootMotion.Hierarchy.GetFirstCommonAncestor
UnityEngine::Transform* RootMotion::Hierarchy::GetFirstCommonAncestor(::Array<UnityEngine::Transform*>* transforms) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Transform*>("RootMotion", "Hierarchy", "GetFirstCommonAncestor", transforms));
}
// Autogenerated method: RootMotion.Hierarchy.GetFirstCommonAncestorRecursive
UnityEngine::Transform* RootMotion::Hierarchy::GetFirstCommonAncestorRecursive(UnityEngine::Transform* transform, ::Array<UnityEngine::Transform*>* transforms) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Transform*>("RootMotion", "Hierarchy", "GetFirstCommonAncestorRecursive", transform, transforms));
}
// Autogenerated method: RootMotion.Hierarchy.IsCommonAncestor
bool RootMotion::Hierarchy::IsCommonAncestor(UnityEngine::Transform* transform, ::Array<UnityEngine::Transform*>* transforms) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("RootMotion", "Hierarchy", "IsCommonAncestor", transform, transforms));
}
// Autogenerated method: RootMotion.Hierarchy..ctor
RootMotion::Hierarchy* RootMotion::Hierarchy::New_ctor() {
  return (Hierarchy*)THROW_UNLESS(il2cpp_utils::New("RootMotion", "Hierarchy"));
}
