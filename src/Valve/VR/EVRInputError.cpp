// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.EVRInputError
#include "Valve\VR\EVRInputError.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError None
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_None() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError None
void Valve::VR::EVRInputError::_set_None(Valve::VR::EVRInputError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError NameNotFound
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_NameNotFound() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "NameNotFound"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError NameNotFound
void Valve::VR::EVRInputError::_set_NameNotFound(Valve::VR::EVRInputError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "NameNotFound", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError WrongType
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_WrongType() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "WrongType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError WrongType
void Valve::VR::EVRInputError::_set_WrongType(Valve::VR::EVRInputError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "WrongType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidHandle
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidHandle() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidHandle
void Valve::VR::EVRInputError::_set_InvalidHandle(Valve::VR::EVRInputError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidParam
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidParam() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidParam"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidParam
void Valve::VR::EVRInputError::_set_InvalidParam(Valve::VR::EVRInputError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidParam", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError NoSteam
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_NoSteam() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "NoSteam"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError NoSteam
void Valve::VR::EVRInputError::_set_NoSteam(Valve::VR::EVRInputError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "NoSteam", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError MaxCapacityReached
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_MaxCapacityReached() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "MaxCapacityReached"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError MaxCapacityReached
void Valve::VR::EVRInputError::_set_MaxCapacityReached(Valve::VR::EVRInputError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "MaxCapacityReached", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError IPCError
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_IPCError() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "IPCError"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError IPCError
void Valve::VR::EVRInputError::_set_IPCError(Valve::VR::EVRInputError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "IPCError", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError NoActiveActionSet
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_NoActiveActionSet() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "NoActiveActionSet"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError NoActiveActionSet
void Valve::VR::EVRInputError::_set_NoActiveActionSet(Valve::VR::EVRInputError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "NoActiveActionSet", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRInputError InvalidDevice
Valve::VR::EVRInputError Valve::VR::EVRInputError::_get_InvalidDevice() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRInputError>("Valve.VR", "EVRInputError", "InvalidDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRInputError InvalidDevice
void Valve::VR::EVRInputError::_set_InvalidDevice(Valve::VR::EVRInputError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRInputError", "InvalidDevice", value));
}
