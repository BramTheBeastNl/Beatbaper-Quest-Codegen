// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_Success
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_Success() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_Success"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_Success
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_Success(Valve::VR::ETrackedPropertyError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_Success", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDataType
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_WrongDataType() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDataType"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDataType
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_WrongDataType(Valve::VR::ETrackedPropertyError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDataType", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDeviceClass
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_WrongDeviceClass() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDeviceClass"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_WrongDeviceClass
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_WrongDeviceClass(Valve::VR::ETrackedPropertyError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_WrongDeviceClass", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_BufferTooSmall
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_BufferTooSmall() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_BufferTooSmall"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_BufferTooSmall
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_BufferTooSmall(Valve::VR::ETrackedPropertyError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_BufferTooSmall", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_UnknownProperty
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_UnknownProperty() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_UnknownProperty"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_UnknownProperty
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_UnknownProperty(Valve::VR::ETrackedPropertyError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_UnknownProperty", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidDevice
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_InvalidDevice() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidDevice
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_InvalidDevice(Valve::VR::ETrackedPropertyError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CouldNotContactServer
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_CouldNotContactServer() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_CouldNotContactServer"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CouldNotContactServer
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_CouldNotContactServer(Valve::VR::ETrackedPropertyError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_CouldNotContactServer", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_ValueNotProvidedByDevice
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_ValueNotProvidedByDevice() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_ValueNotProvidedByDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_ValueNotProvidedByDevice
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_ValueNotProvidedByDevice(Valve::VR::ETrackedPropertyError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_ValueNotProvidedByDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_StringExceedsMaximumLength
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_StringExceedsMaximumLength() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_StringExceedsMaximumLength"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_StringExceedsMaximumLength
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_StringExceedsMaximumLength(Valve::VR::ETrackedPropertyError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_StringExceedsMaximumLength", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_NotYetAvailable
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_NotYetAvailable() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_NotYetAvailable"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_NotYetAvailable
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_NotYetAvailable(Valve::VR::ETrackedPropertyError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_NotYetAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_PermissionDenied
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_PermissionDenied() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_PermissionDenied"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_PermissionDenied
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_PermissionDenied(Valve::VR::ETrackedPropertyError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_PermissionDenied", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidOperation
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_InvalidOperation() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidOperation"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_InvalidOperation
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_InvalidOperation(Valve::VR::ETrackedPropertyError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_InvalidOperation", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CannotWriteToWildcards
Valve::VR::ETrackedPropertyError Valve::VR::ETrackedPropertyError::_get_TrackedProp_CannotWriteToWildcards() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackedPropertyError>("Valve.VR", "ETrackedPropertyError", "TrackedProp_CannotWriteToWildcards"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackedPropertyError TrackedProp_CannotWriteToWildcards
void Valve::VR::ETrackedPropertyError::_set_TrackedProp_CannotWriteToWildcards(Valve::VR::ETrackedPropertyError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackedPropertyError", "TrackedProp_CannotWriteToWildcards", value));
}
