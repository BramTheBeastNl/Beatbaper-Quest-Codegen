// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.CVROverlay/_PollNextOverlayEventPacked
#include "Valve/VR/CVROverlay__PollNextOverlayEventPacked.hpp"
// Including type: Valve.VR.CVROverlay/PollNextOverlayEventUnion
#include "Valve/VR/CVROverlay_PollNextOverlayEventUnion.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Valve.VR.EVROverlayError
#include "Valve/VR/EVROverlayError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.VROverlayFlags
#include "Valve/VR/VROverlayFlags.hpp"
// Including type: Valve.VR.EColorSpace
#include "Valve/VR/EColorSpace.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
// Including type: Valve.VR.VROverlayTransformType
#include "Valve/VR/VROverlayTransformType.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: Valve.VR.HmdVector2_t
#include "Valve/VR/HmdVector2_t.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: Valve.VR.VROverlayInputMethod
#include "Valve/VR/VROverlayInputMethod.hpp"
// Including type: Valve.VR.VROverlayIntersectionParams_t
#include "Valve/VR/VROverlayIntersectionParams_t.hpp"
// Including type: Valve.VR.VROverlayIntersectionResults_t
#include "Valve/VR/VROverlayIntersectionResults_t.hpp"
// Including type: Valve.VR.EOverlayDirection
#include "Valve/VR/EOverlayDirection.hpp"
// Including type: Valve.VR.EDualAnalogWhich
#include "Valve/VR/EDualAnalogWhich.hpp"
// Including type: Valve.VR.Texture_t
#include "Valve/VR/Texture_t.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Including type: Valve.VR.HmdRect2_t
#include "Valve/VR/HmdRect2_t.hpp"
// Including type: Valve.VR.VROverlayIntersectionMaskPrimitive_t
#include "Valve/VR/VROverlayIntersectionMaskPrimitive_t.hpp"
// Including type: Valve.VR.VRMessageOverlayResponse
#include "Valve/VR/VRMessageOverlayResponse.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVROverlay..ctor
Valve::VR::CVROverlay* Valve::VR::CVROverlay::New_ctor(System::IntPtr pInterface) {
  return (CVROverlay*)THROW_UNLESS(il2cpp_utils::New("Valve.VR", "CVROverlay", pInterface));
}
// Autogenerated method: Valve.VR.CVROverlay.FindOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::FindOverlay(::Il2CppString* pchOverlayKey, uint64_t& pOverlayHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "FindOverlay", pchOverlayKey, pOverlayHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.CreateOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::CreateOverlay(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayName, uint64_t& pOverlayHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "CreateOverlay", pchOverlayKey, pchOverlayName, pOverlayHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.DestroyOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::DestroyOverlay(uint64_t ulOverlayHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "DestroyOverlay", ulOverlayHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.SetHighQualityOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetHighQualityOverlay(uint64_t ulOverlayHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetHighQualityOverlay", ulOverlayHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.GetHighQualityOverlay
uint64_t Valve::VR::CVROverlay::GetHighQualityOverlay() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint64_t>(this, "GetHighQualityOverlay"));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayKey
uint Valve::VR::CVROverlay::GetOverlayKey(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::EVROverlayError& pError) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetOverlayKey", ulOverlayHandle, pchValue, unBufferSize, pError));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayName
uint Valve::VR::CVROverlay::GetOverlayName(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::EVROverlayError& pError) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetOverlayName", ulOverlayHandle, pchValue, unBufferSize, pError));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayName
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayName(uint64_t ulOverlayHandle, ::Il2CppString* pchName) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayName", ulOverlayHandle, pchName));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayImageData
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayImageData(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unBufferSize, uint& punWidth, uint& punHeight) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayImageData", ulOverlayHandle, pvBuffer, unBufferSize, punWidth, punHeight));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayErrorNameFromEnum
::Il2CppString* Valve::VR::CVROverlay::GetOverlayErrorNameFromEnum(Valve::VR::EVROverlayError error) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "GetOverlayErrorNameFromEnum", error));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayRenderingPid
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayRenderingPid(uint64_t ulOverlayHandle, uint unPID) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayRenderingPid", ulOverlayHandle, unPID));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayRenderingPid
uint Valve::VR::CVROverlay::GetOverlayRenderingPid(uint64_t ulOverlayHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetOverlayRenderingPid", ulOverlayHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayFlag
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayFlag(uint64_t ulOverlayHandle, Valve::VR::VROverlayFlags eOverlayFlag, bool bEnabled) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayFlag", ulOverlayHandle, eOverlayFlag, bEnabled));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayFlag
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayFlag(uint64_t ulOverlayHandle, Valve::VR::VROverlayFlags eOverlayFlag, bool& pbEnabled) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayFlag", ulOverlayHandle, eOverlayFlag, pbEnabled));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayColor
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayColor(uint64_t ulOverlayHandle, float fRed, float fGreen, float fBlue) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayColor", ulOverlayHandle, fRed, fGreen, fBlue));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayColor
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayColor(uint64_t ulOverlayHandle, float& pfRed, float& pfGreen, float& pfBlue) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayColor", ulOverlayHandle, pfRed, pfGreen, pfBlue));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayAlpha
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayAlpha(uint64_t ulOverlayHandle, float fAlpha) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayAlpha", ulOverlayHandle, fAlpha));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayAlpha
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayAlpha(uint64_t ulOverlayHandle, float& pfAlpha) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayAlpha", ulOverlayHandle, pfAlpha));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTexelAspect
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTexelAspect(uint64_t ulOverlayHandle, float fTexelAspect) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayTexelAspect", ulOverlayHandle, fTexelAspect));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTexelAspect
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTexelAspect(uint64_t ulOverlayHandle, float& pfTexelAspect) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayTexelAspect", ulOverlayHandle, pfTexelAspect));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlaySortOrder
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlaySortOrder(uint64_t ulOverlayHandle, uint unSortOrder) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlaySortOrder", ulOverlayHandle, unSortOrder));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlaySortOrder
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlaySortOrder(uint64_t ulOverlayHandle, uint& punSortOrder) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlaySortOrder", ulOverlayHandle, punSortOrder));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayWidthInMeters
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayWidthInMeters(uint64_t ulOverlayHandle, float fWidthInMeters) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayWidthInMeters", ulOverlayHandle, fWidthInMeters));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayWidthInMeters
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayWidthInMeters(uint64_t ulOverlayHandle, float& pfWidthInMeters) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayWidthInMeters", ulOverlayHandle, pfWidthInMeters));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayAutoCurveDistanceRangeInMeters
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayAutoCurveDistanceRangeInMeters(uint64_t ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayAutoCurveDistanceRangeInMeters", ulOverlayHandle, fMinDistanceInMeters, fMaxDistanceInMeters));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayAutoCurveDistanceRangeInMeters
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayAutoCurveDistanceRangeInMeters(uint64_t ulOverlayHandle, float& pfMinDistanceInMeters, float& pfMaxDistanceInMeters) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayAutoCurveDistanceRangeInMeters", ulOverlayHandle, pfMinDistanceInMeters, pfMaxDistanceInMeters));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTextureColorSpace
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTextureColorSpace(uint64_t ulOverlayHandle, Valve::VR::EColorSpace eTextureColorSpace) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayTextureColorSpace", ulOverlayHandle, eTextureColorSpace));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTextureColorSpace
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTextureColorSpace(uint64_t ulOverlayHandle, Valve::VR::EColorSpace& peTextureColorSpace) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayTextureColorSpace", ulOverlayHandle, peTextureColorSpace));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTextureBounds
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTextureBounds(uint64_t ulOverlayHandle, Valve::VR::VRTextureBounds_t& pOverlayTextureBounds) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayTextureBounds", ulOverlayHandle, pOverlayTextureBounds));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTextureBounds
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTextureBounds(uint64_t ulOverlayHandle, Valve::VR::VRTextureBounds_t& pOverlayTextureBounds) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayTextureBounds", ulOverlayHandle, pOverlayTextureBounds));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayRenderModel
uint Valve::VR::CVROverlay::GetOverlayRenderModel(uint64_t ulOverlayHandle, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::HmdColor_t& pColor, Valve::VR::EVROverlayError& pError) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetOverlayRenderModel", ulOverlayHandle, pchValue, unBufferSize, pColor, pError));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayRenderModel
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayRenderModel(uint64_t ulOverlayHandle, ::Il2CppString* pchRenderModel, Valve::VR::HmdColor_t& pColor) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayRenderModel", ulOverlayHandle, pchRenderModel, pColor));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformType
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformType(uint64_t ulOverlayHandle, Valve::VR::VROverlayTransformType& peTransformType) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayTransformType", ulOverlayHandle, peTransformType));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformAbsolute
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformAbsolute(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdMatrix34_t& pmatTrackingOriginToOverlayTransform) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayTransformAbsolute", ulOverlayHandle, eTrackingOrigin, pmatTrackingOriginToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformAbsolute
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformAbsolute(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin& peTrackingOrigin, Valve::VR::HmdMatrix34_t& pmatTrackingOriginToOverlayTransform) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayTransformAbsolute", ulOverlayHandle, peTrackingOrigin, pmatTrackingOriginToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformTrackedDeviceRelative
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceRelative(uint64_t ulOverlayHandle, uint unTrackedDevice, Valve::VR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayTransformTrackedDeviceRelative", ulOverlayHandle, unTrackedDevice, pmatTrackedDeviceToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformTrackedDeviceRelative
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceRelative(uint64_t ulOverlayHandle, uint& punTrackedDevice, Valve::VR::HmdMatrix34_t& pmatTrackedDeviceToOverlayTransform) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayTransformTrackedDeviceRelative", ulOverlayHandle, punTrackedDevice, pmatTrackedDeviceToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformTrackedDeviceComponent
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformTrackedDeviceComponent(uint64_t ulOverlayHandle, uint unDeviceIndex, ::Il2CppString* pchComponentName) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayTransformTrackedDeviceComponent", ulOverlayHandle, unDeviceIndex, pchComponentName));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformTrackedDeviceComponent
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformTrackedDeviceComponent(uint64_t ulOverlayHandle, uint& punDeviceIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameSize) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayTransformTrackedDeviceComponent", ulOverlayHandle, punDeviceIndex, pchComponentName, unComponentNameSize));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTransformOverlayRelative
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTransformOverlayRelative(uint64_t ulOverlayHandle, uint64_t& ulOverlayHandleParent, Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayTransformOverlayRelative", ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTransformOverlayRelative
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTransformOverlayRelative(uint64_t ulOverlayHandle, uint64_t ulOverlayHandleParent, Valve::VR::HmdMatrix34_t& pmatParentOverlayToOverlayTransform) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayTransformOverlayRelative", ulOverlayHandle, ulOverlayHandleParent, pmatParentOverlayToOverlayTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.ShowOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::ShowOverlay(uint64_t ulOverlayHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "ShowOverlay", ulOverlayHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.HideOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::HideOverlay(uint64_t ulOverlayHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "HideOverlay", ulOverlayHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.IsOverlayVisible
bool Valve::VR::CVROverlay::IsOverlayVisible(uint64_t ulOverlayHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsOverlayVisible", ulOverlayHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.GetTransformForOverlayCoordinates
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetTransformForOverlayCoordinates(uint64_t ulOverlayHandle, Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdVector2_t coordinatesInOverlay, Valve::VR::HmdMatrix34_t& pmatTransform) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetTransformForOverlayCoordinates", ulOverlayHandle, eTrackingOrigin, coordinatesInOverlay, pmatTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.PollNextOverlayEvent
bool Valve::VR::CVROverlay::PollNextOverlayEvent(uint64_t ulOverlayHandle, Valve::VR::VREvent_t& pEvent, uint uncbVREvent) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "PollNextOverlayEvent", ulOverlayHandle, pEvent, uncbVREvent));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayInputMethod
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayInputMethod(uint64_t ulOverlayHandle, Valve::VR::VROverlayInputMethod& peInputMethod) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayInputMethod", ulOverlayHandle, peInputMethod));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayInputMethod
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayInputMethod(uint64_t ulOverlayHandle, Valve::VR::VROverlayInputMethod eInputMethod) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayInputMethod", ulOverlayHandle, eInputMethod));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayMouseScale
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayMouseScale(uint64_t ulOverlayHandle, Valve::VR::HmdVector2_t& pvecMouseScale) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayMouseScale", ulOverlayHandle, pvecMouseScale));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayMouseScale
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayMouseScale(uint64_t ulOverlayHandle, Valve::VR::HmdVector2_t& pvecMouseScale) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayMouseScale", ulOverlayHandle, pvecMouseScale));
}
// Autogenerated method: Valve.VR.CVROverlay.ComputeOverlayIntersection
bool Valve::VR::CVROverlay::ComputeOverlayIntersection(uint64_t ulOverlayHandle, Valve::VR::VROverlayIntersectionParams_t& pParams, Valve::VR::VROverlayIntersectionResults_t& pResults) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ComputeOverlayIntersection", ulOverlayHandle, pParams, pResults));
}
// Autogenerated method: Valve.VR.CVROverlay.IsHoverTargetOverlay
bool Valve::VR::CVROverlay::IsHoverTargetOverlay(uint64_t ulOverlayHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsHoverTargetOverlay", ulOverlayHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.GetGamepadFocusOverlay
uint64_t Valve::VR::CVROverlay::GetGamepadFocusOverlay() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint64_t>(this, "GetGamepadFocusOverlay"));
}
// Autogenerated method: Valve.VR.CVROverlay.SetGamepadFocusOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetGamepadFocusOverlay(uint64_t ulNewFocusOverlay) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetGamepadFocusOverlay", ulNewFocusOverlay));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayNeighbor
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayNeighbor(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom, uint64_t ulTo) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayNeighbor", eDirection, ulFrom, ulTo));
}
// Autogenerated method: Valve.VR.CVROverlay.MoveGamepadFocusToNeighbor
Valve::VR::EVROverlayError Valve::VR::CVROverlay::MoveGamepadFocusToNeighbor(Valve::VR::EOverlayDirection eDirection, uint64_t ulFrom) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "MoveGamepadFocusToNeighbor", eDirection, ulFrom));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayDualAnalogTransform
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayDualAnalogTransform(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, System::IntPtr vCenter, float fRadius) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayDualAnalogTransform", ulOverlay, eWhich, vCenter, fRadius));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayDualAnalogTransform
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayDualAnalogTransform(uint64_t ulOverlay, Valve::VR::EDualAnalogWhich eWhich, Valve::VR::HmdVector2_t& pvCenter, float& pfRadius) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayDualAnalogTransform", ulOverlay, eWhich, pvCenter, pfRadius));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayTexture
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayTexture(uint64_t ulOverlayHandle, Valve::VR::Texture_t& pTexture) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayTexture", ulOverlayHandle, pTexture));
}
// Autogenerated method: Valve.VR.CVROverlay.ClearOverlayTexture
Valve::VR::EVROverlayError Valve::VR::CVROverlay::ClearOverlayTexture(uint64_t ulOverlayHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "ClearOverlayTexture", ulOverlayHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayRaw
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayRaw(uint64_t ulOverlayHandle, System::IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayRaw", ulOverlayHandle, pvBuffer, unWidth, unHeight, unDepth));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayFromFile
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayFromFile(uint64_t ulOverlayHandle, ::Il2CppString* pchFilePath) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayFromFile", ulOverlayHandle, pchFilePath));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTexture
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTexture(uint64_t ulOverlayHandle, System::IntPtr& pNativeTextureHandle, System::IntPtr pNativeTextureRef, uint& pWidth, uint& pHeight, uint& pNativeFormat, Valve::VR::ETextureType& pAPIType, Valve::VR::EColorSpace& pColorSpace, Valve::VR::VRTextureBounds_t& pTextureBounds) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayTexture", ulOverlayHandle, pNativeTextureHandle, pNativeTextureRef, pWidth, pHeight, pNativeFormat, pAPIType, pColorSpace, pTextureBounds));
}
// Autogenerated method: Valve.VR.CVROverlay.ReleaseNativeOverlayHandle
Valve::VR::EVROverlayError Valve::VR::CVROverlay::ReleaseNativeOverlayHandle(uint64_t ulOverlayHandle, System::IntPtr pNativeTextureHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "ReleaseNativeOverlayHandle", ulOverlayHandle, pNativeTextureHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayTextureSize
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayTextureSize(uint64_t ulOverlayHandle, uint& pWidth, uint& pHeight) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayTextureSize", ulOverlayHandle, pWidth, pHeight));
}
// Autogenerated method: Valve.VR.CVROverlay.CreateDashboardOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::CreateDashboardOverlay(::Il2CppString* pchOverlayKey, ::Il2CppString* pchOverlayFriendlyName, uint64_t& pMainHandle, uint64_t& pThumbnailHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "CreateDashboardOverlay", pchOverlayKey, pchOverlayFriendlyName, pMainHandle, pThumbnailHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.IsDashboardVisible
bool Valve::VR::CVROverlay::IsDashboardVisible() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsDashboardVisible"));
}
// Autogenerated method: Valve.VR.CVROverlay.IsActiveDashboardOverlay
bool Valve::VR::CVROverlay::IsActiveDashboardOverlay(uint64_t ulOverlayHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsActiveDashboardOverlay", ulOverlayHandle));
}
// Autogenerated method: Valve.VR.CVROverlay.SetDashboardOverlaySceneProcess
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetDashboardOverlaySceneProcess(uint64_t ulOverlayHandle, uint unProcessId) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetDashboardOverlaySceneProcess", ulOverlayHandle, unProcessId));
}
// Autogenerated method: Valve.VR.CVROverlay.GetDashboardOverlaySceneProcess
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetDashboardOverlaySceneProcess(uint64_t ulOverlayHandle, uint& punProcessId) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetDashboardOverlaySceneProcess", ulOverlayHandle, punProcessId));
}
// Autogenerated method: Valve.VR.CVROverlay.ShowDashboard
void Valve::VR::CVROverlay::ShowDashboard(::Il2CppString* pchOverlayToShow) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ShowDashboard", pchOverlayToShow));
}
// Autogenerated method: Valve.VR.CVROverlay.GetPrimaryDashboardDevice
uint Valve::VR::CVROverlay::GetPrimaryDashboardDevice() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetPrimaryDashboardDevice"));
}
// Autogenerated method: Valve.VR.CVROverlay.ShowKeyboard
Valve::VR::EVROverlayError Valve::VR::CVROverlay::ShowKeyboard(int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "ShowKeyboard", eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue));
}
// Autogenerated method: Valve.VR.CVROverlay.ShowKeyboardForOverlay
Valve::VR::EVROverlayError Valve::VR::CVROverlay::ShowKeyboardForOverlay(uint64_t ulOverlayHandle, int eInputMode, int eLineInputMode, ::Il2CppString* pchDescription, uint unCharMax, ::Il2CppString* pchExistingText, bool bUseMinimalMode, uint64_t uUserValue) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "ShowKeyboardForOverlay", ulOverlayHandle, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText, bUseMinimalMode, uUserValue));
}
// Autogenerated method: Valve.VR.CVROverlay.GetKeyboardText
uint Valve::VR::CVROverlay::GetKeyboardText(System::Text::StringBuilder* pchText, uint cchText) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetKeyboardText", pchText, cchText));
}
// Autogenerated method: Valve.VR.CVROverlay.HideKeyboard
void Valve::VR::CVROverlay::HideKeyboard() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HideKeyboard"));
}
// Autogenerated method: Valve.VR.CVROverlay.SetKeyboardTransformAbsolute
void Valve::VR::CVROverlay::SetKeyboardTransformAbsolute(Valve::VR::ETrackingUniverseOrigin eTrackingOrigin, Valve::VR::HmdMatrix34_t& pmatTrackingOriginToKeyboardTransform) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetKeyboardTransformAbsolute", eTrackingOrigin, pmatTrackingOriginToKeyboardTransform));
}
// Autogenerated method: Valve.VR.CVROverlay.SetKeyboardPositionForOverlay
void Valve::VR::CVROverlay::SetKeyboardPositionForOverlay(uint64_t ulOverlayHandle, Valve::VR::HmdRect2_t avoidRect) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetKeyboardPositionForOverlay", ulOverlayHandle, avoidRect));
}
// Autogenerated method: Valve.VR.CVROverlay.SetOverlayIntersectionMask
Valve::VR::EVROverlayError Valve::VR::CVROverlay::SetOverlayIntersectionMask(uint64_t ulOverlayHandle, Valve::VR::VROverlayIntersectionMaskPrimitive_t& pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "SetOverlayIntersectionMask", ulOverlayHandle, pMaskPrimitives, unNumMaskPrimitives, unPrimitiveSize));
}
// Autogenerated method: Valve.VR.CVROverlay.GetOverlayFlags
Valve::VR::EVROverlayError Valve::VR::CVROverlay::GetOverlayFlags(uint64_t ulOverlayHandle, uint& pFlags) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVROverlayError>(this, "GetOverlayFlags", ulOverlayHandle, pFlags));
}
// Autogenerated method: Valve.VR.CVROverlay.ShowMessageOverlay
Valve::VR::VRMessageOverlayResponse Valve::VR::CVROverlay::ShowMessageOverlay(::Il2CppString* pchText, ::Il2CppString* pchCaption, ::Il2CppString* pchButton0Text, ::Il2CppString* pchButton1Text, ::Il2CppString* pchButton2Text, ::Il2CppString* pchButton3Text) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::VRMessageOverlayResponse>(this, "ShowMessageOverlay", pchText, pchCaption, pchButton0Text, pchButton1Text, pchButton2Text, pchButton3Text));
}
// Autogenerated method: Valve.VR.CVROverlay.CloseMessageOverlay
void Valve::VR::CVROverlay::CloseMessageOverlay() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CloseMessageOverlay"));
}
