// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.ETrackingResult
#include "Valve/VR/ETrackingResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Uninitialized
Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Uninitialized() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Uninitialized"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Uninitialized
void Valve::VR::ETrackingResult::_set_Uninitialized(Valve::VR::ETrackingResult value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Uninitialized", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Calibrating_InProgress
Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Calibrating_InProgress() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Calibrating_InProgress"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Calibrating_InProgress
void Valve::VR::ETrackingResult::_set_Calibrating_InProgress(Valve::VR::ETrackingResult value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Calibrating_InProgress", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Calibrating_OutOfRange
Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Calibrating_OutOfRange() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Calibrating_OutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Calibrating_OutOfRange
void Valve::VR::ETrackingResult::_set_Calibrating_OutOfRange(Valve::VR::ETrackingResult value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Calibrating_OutOfRange", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Running_OK
Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Running_OK() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Running_OK"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Running_OK
void Valve::VR::ETrackingResult::_set_Running_OK(Valve::VR::ETrackingResult value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Running_OK", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.ETrackingResult Running_OutOfRange
Valve::VR::ETrackingResult Valve::VR::ETrackingResult::_get_Running_OutOfRange() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::ETrackingResult>("Valve.VR", "ETrackingResult", "Running_OutOfRange"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.ETrackingResult Running_OutOfRange
void Valve::VR::ETrackingResult::_set_Running_OutOfRange(Valve::VR::ETrackingResult value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "ETrackingResult", "Running_OutOfRange", value));
}
