// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: Valve.VR.CVRSystem/_PollNextEventPacked
#include "Valve/VR/CVRSystem__PollNextEventPacked.hpp"
// Including type: Valve.VR.CVRSystem/PollNextEventUnion
#include "Valve/VR/CVRSystem_PollNextEventUnion.hpp"
// Including type: Valve.VR.CVRSystem/_GetControllerStatePacked
#include "Valve/VR/CVRSystem__GetControllerStatePacked.hpp"
// Including type: Valve.VR.CVRSystem/GetControllerStateUnion
#include "Valve/VR/CVRSystem_GetControllerStateUnion.hpp"
// Including type: Valve.VR.CVRSystem/_GetControllerStateWithPosePacked
#include "Valve/VR/CVRSystem__GetControllerStateWithPosePacked.hpp"
// Including type: Valve.VR.CVRSystem/GetControllerStateWithPoseUnion
#include "Valve/VR/CVRSystem_GetControllerStateWithPoseUnion.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Valve.VR.HmdMatrix44_t
#include "Valve/VR/HmdMatrix44_t.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: Valve.VR.DistortionCoordinates_t
#include "Valve/VR/DistortionCoordinates_t.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: Valve.VR.ETrackedDeviceClass
#include "Valve/VR/ETrackedDeviceClass.hpp"
// Including type: Valve.VR.EDeviceActivityLevel
#include "Valve/VR/EDeviceActivityLevel.hpp"
// Including type: Valve.VR.ETrackedControllerRole
#include "Valve/VR/ETrackedControllerRole.hpp"
// Including type: Valve.VR.ETrackedDeviceProperty
#include "Valve/VR/ETrackedDeviceProperty.hpp"
// Including type: Valve.VR.ETrackedPropertyError
#include "Valve/VR/ETrackedPropertyError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.VREvent_t
#include "Valve/VR/VREvent_t.hpp"
// Including type: Valve.VR.EVREventType
#include "Valve/VR/EVREventType.hpp"
// Including type: Valve.VR.HiddenAreaMesh_t
#include "Valve/VR/HiddenAreaMesh_t.hpp"
// Including type: Valve.VR.EHiddenAreaMeshType
#include "Valve/VR/EHiddenAreaMeshType.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
// Including type: Valve.VR.EVRButtonId
#include "Valve/VR/EVRButtonId.hpp"
// Including type: Valve.VR.EVRControllerAxisType
#include "Valve/VR/EVRControllerAxisType.hpp"
// Including type: Valve.VR.EVRFirmwareError
#include "Valve/VR/EVRFirmwareError.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRSystem..ctor
Valve::VR::CVRSystem* Valve::VR::CVRSystem::New_ctor(System::IntPtr pInterface) {
  return (CVRSystem*)THROW_UNLESS(il2cpp_utils::New("Valve.VR", "CVRSystem", pInterface));
}
// Autogenerated method: Valve.VR.CVRSystem.GetRecommendedRenderTargetSize
void Valve::VR::CVRSystem::GetRecommendedRenderTargetSize(uint& pnWidth, uint& pnHeight) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GetRecommendedRenderTargetSize", pnWidth, pnHeight));
}
// Autogenerated method: Valve.VR.CVRSystem.GetProjectionMatrix
Valve::VR::HmdMatrix44_t Valve::VR::CVRSystem::GetProjectionMatrix(Valve::VR::EVREye eEye, float fNearZ, float fFarZ) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::HmdMatrix44_t>(this, "GetProjectionMatrix", eEye, fNearZ, fFarZ));
}
// Autogenerated method: Valve.VR.CVRSystem.GetProjectionRaw
void Valve::VR::CVRSystem::GetProjectionRaw(Valve::VR::EVREye eEye, float& pfLeft, float& pfRight, float& pfTop, float& pfBottom) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GetProjectionRaw", eEye, pfLeft, pfRight, pfTop, pfBottom));
}
// Autogenerated method: Valve.VR.CVRSystem.ComputeDistortion
bool Valve::VR::CVRSystem::ComputeDistortion(Valve::VR::EVREye eEye, float fU, float fV, Valve::VR::DistortionCoordinates_t& pDistortionCoordinates) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ComputeDistortion", eEye, fU, fV, pDistortionCoordinates));
}
// Autogenerated method: Valve.VR.CVRSystem.GetEyeToHeadTransform
Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetEyeToHeadTransform(Valve::VR::EVREye eEye) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::HmdMatrix34_t>(this, "GetEyeToHeadTransform", eEye));
}
// Autogenerated method: Valve.VR.CVRSystem.GetTimeSinceLastVsync
bool Valve::VR::CVRSystem::GetTimeSinceLastVsync(float& pfSecondsSinceLastVsync, uint64_t& pulFrameCounter) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetTimeSinceLastVsync", pfSecondsSinceLastVsync, pulFrameCounter));
}
// Autogenerated method: Valve.VR.CVRSystem.GetD3D9AdapterIndex
int Valve::VR::CVRSystem::GetD3D9AdapterIndex() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetD3D9AdapterIndex"));
}
// Autogenerated method: Valve.VR.CVRSystem.GetDXGIOutputInfo
void Valve::VR::CVRSystem::GetDXGIOutputInfo(int& pnAdapterIndex) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GetDXGIOutputInfo", pnAdapterIndex));
}
// Autogenerated method: Valve.VR.CVRSystem.GetOutputDevice
void Valve::VR::CVRSystem::GetOutputDevice(uint64_t& pnDevice, Valve::VR::ETextureType textureType, System::IntPtr pInstance) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GetOutputDevice", pnDevice, textureType, pInstance));
}
// Autogenerated method: Valve.VR.CVRSystem.IsDisplayOnDesktop
bool Valve::VR::CVRSystem::IsDisplayOnDesktop() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsDisplayOnDesktop"));
}
// Autogenerated method: Valve.VR.CVRSystem.SetDisplayVisibility
bool Valve::VR::CVRSystem::SetDisplayVisibility(bool bIsVisibleOnDesktop) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SetDisplayVisibility", bIsVisibleOnDesktop));
}
// Autogenerated method: Valve.VR.CVRSystem.GetDeviceToAbsoluteTrackingPose
void Valve::VR::CVRSystem::GetDeviceToAbsoluteTrackingPose(Valve::VR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, ::Array<Valve::VR::TrackedDevicePose_t>* pTrackedDevicePoseArray) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GetDeviceToAbsoluteTrackingPose", eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray));
}
// Autogenerated method: Valve.VR.CVRSystem.ResetSeatedZeroPose
void Valve::VR::CVRSystem::ResetSeatedZeroPose() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ResetSeatedZeroPose"));
}
// Autogenerated method: Valve.VR.CVRSystem.GetSeatedZeroPoseToStandingAbsoluteTrackingPose
Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetSeatedZeroPoseToStandingAbsoluteTrackingPose() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::HmdMatrix34_t>(this, "GetSeatedZeroPoseToStandingAbsoluteTrackingPose"));
}
// Autogenerated method: Valve.VR.CVRSystem.GetRawZeroPoseToStandingAbsoluteTrackingPose
Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetRawZeroPoseToStandingAbsoluteTrackingPose() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::HmdMatrix34_t>(this, "GetRawZeroPoseToStandingAbsoluteTrackingPose"));
}
// Autogenerated method: Valve.VR.CVRSystem.GetSortedTrackedDeviceIndicesOfClass
uint Valve::VR::CVRSystem::GetSortedTrackedDeviceIndicesOfClass(Valve::VR::ETrackedDeviceClass eTrackedDeviceClass, ::Array<uint>* punTrackedDeviceIndexArray, uint unRelativeToTrackedDeviceIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetSortedTrackedDeviceIndicesOfClass", eTrackedDeviceClass, punTrackedDeviceIndexArray, unRelativeToTrackedDeviceIndex));
}
// Autogenerated method: Valve.VR.CVRSystem.GetTrackedDeviceActivityLevel
Valve::VR::EDeviceActivityLevel Valve::VR::CVRSystem::GetTrackedDeviceActivityLevel(uint unDeviceId) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EDeviceActivityLevel>(this, "GetTrackedDeviceActivityLevel", unDeviceId));
}
// Autogenerated method: Valve.VR.CVRSystem.ApplyTransform
void Valve::VR::CVRSystem::ApplyTransform(Valve::VR::TrackedDevicePose_t& pOutputPose, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose, Valve::VR::HmdMatrix34_t& pTransform) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ApplyTransform", pOutputPose, pTrackedDevicePose, pTransform));
}
// Autogenerated method: Valve.VR.CVRSystem.GetTrackedDeviceIndexForControllerRole
uint Valve::VR::CVRSystem::GetTrackedDeviceIndexForControllerRole(Valve::VR::ETrackedControllerRole unDeviceType) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetTrackedDeviceIndexForControllerRole", unDeviceType));
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerRoleForTrackedDeviceIndex
Valve::VR::ETrackedControllerRole Valve::VR::CVRSystem::GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::ETrackedControllerRole>(this, "GetControllerRoleForTrackedDeviceIndex", unDeviceIndex));
}
// Autogenerated method: Valve.VR.CVRSystem.GetTrackedDeviceClass
Valve::VR::ETrackedDeviceClass Valve::VR::CVRSystem::GetTrackedDeviceClass(uint unDeviceIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::ETrackedDeviceClass>(this, "GetTrackedDeviceClass", unDeviceIndex));
}
// Autogenerated method: Valve.VR.CVRSystem.IsTrackedDeviceConnected
bool Valve::VR::CVRSystem::IsTrackedDeviceConnected(uint unDeviceIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsTrackedDeviceConnected", unDeviceIndex));
}
// Autogenerated method: Valve.VR.CVRSystem.GetBoolTrackedDeviceProperty
bool Valve::VR::CVRSystem::GetBoolTrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetBoolTrackedDeviceProperty", unDeviceIndex, prop, pError));
}
// Autogenerated method: Valve.VR.CVRSystem.GetFloatTrackedDeviceProperty
float Valve::VR::CVRSystem::GetFloatTrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetFloatTrackedDeviceProperty", unDeviceIndex, prop, pError));
}
// Autogenerated method: Valve.VR.CVRSystem.GetInt32TrackedDeviceProperty
int Valve::VR::CVRSystem::GetInt32TrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetInt32TrackedDeviceProperty", unDeviceIndex, prop, pError));
}
// Autogenerated method: Valve.VR.CVRSystem.GetUint64TrackedDeviceProperty
uint64_t Valve::VR::CVRSystem::GetUint64TrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint64_t>(this, "GetUint64TrackedDeviceProperty", unDeviceIndex, prop, pError));
}
// Autogenerated method: Valve.VR.CVRSystem.GetMatrix34TrackedDeviceProperty
Valve::VR::HmdMatrix34_t Valve::VR::CVRSystem::GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, Valve::VR::ETrackedPropertyError& pError) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::HmdMatrix34_t>(this, "GetMatrix34TrackedDeviceProperty", unDeviceIndex, prop, pError));
}
// Autogenerated method: Valve.VR.CVRSystem.GetArrayTrackedDeviceProperty
uint Valve::VR::CVRSystem::GetArrayTrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, uint propType, System::IntPtr pBuffer, uint unBufferSize, Valve::VR::ETrackedPropertyError& pError) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetArrayTrackedDeviceProperty", unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError));
}
// Autogenerated method: Valve.VR.CVRSystem.GetStringTrackedDeviceProperty
uint Valve::VR::CVRSystem::GetStringTrackedDeviceProperty(uint unDeviceIndex, Valve::VR::ETrackedDeviceProperty prop, System::Text::StringBuilder* pchValue, uint unBufferSize, Valve::VR::ETrackedPropertyError& pError) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetStringTrackedDeviceProperty", unDeviceIndex, prop, pchValue, unBufferSize, pError));
}
// Autogenerated method: Valve.VR.CVRSystem.GetPropErrorNameFromEnum
::Il2CppString* Valve::VR::CVRSystem::GetPropErrorNameFromEnum(Valve::VR::ETrackedPropertyError error) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "GetPropErrorNameFromEnum", error));
}
// Autogenerated method: Valve.VR.CVRSystem.PollNextEvent
bool Valve::VR::CVRSystem::PollNextEvent(Valve::VR::VREvent_t& pEvent, uint uncbVREvent) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "PollNextEvent", pEvent, uncbVREvent));
}
// Autogenerated method: Valve.VR.CVRSystem.PollNextEventWithPose
bool Valve::VR::CVRSystem::PollNextEventWithPose(Valve::VR::ETrackingUniverseOrigin eOrigin, Valve::VR::VREvent_t& pEvent, uint uncbVREvent, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "PollNextEventWithPose", eOrigin, pEvent, uncbVREvent, pTrackedDevicePose));
}
// Autogenerated method: Valve.VR.CVRSystem.GetEventTypeNameFromEnum
::Il2CppString* Valve::VR::CVRSystem::GetEventTypeNameFromEnum(Valve::VR::EVREventType eType) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "GetEventTypeNameFromEnum", eType));
}
// Autogenerated method: Valve.VR.CVRSystem.GetHiddenAreaMesh
Valve::VR::HiddenAreaMesh_t Valve::VR::CVRSystem::GetHiddenAreaMesh(Valve::VR::EVREye eEye, Valve::VR::EHiddenAreaMeshType type) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::HiddenAreaMesh_t>(this, "GetHiddenAreaMesh", eEye, type));
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerState
bool Valve::VR::CVRSystem::GetControllerState(uint unControllerDeviceIndex, Valve::VR::VRControllerState_t& pControllerState, uint unControllerStateSize) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetControllerState", unControllerDeviceIndex, pControllerState, unControllerStateSize));
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerStateWithPose
bool Valve::VR::CVRSystem::GetControllerStateWithPose(Valve::VR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, Valve::VR::VRControllerState_t& pControllerState, uint unControllerStateSize, Valve::VR::TrackedDevicePose_t& pTrackedDevicePose) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetControllerStateWithPose", eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose));
}
// Autogenerated method: Valve.VR.CVRSystem.TriggerHapticPulse
void Valve::VR::CVRSystem::TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, ::Il2CppChar usDurationMicroSec) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "TriggerHapticPulse", unControllerDeviceIndex, unAxisId, usDurationMicroSec));
}
// Autogenerated method: Valve.VR.CVRSystem.GetButtonIdNameFromEnum
::Il2CppString* Valve::VR::CVRSystem::GetButtonIdNameFromEnum(Valve::VR::EVRButtonId eButtonId) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "GetButtonIdNameFromEnum", eButtonId));
}
// Autogenerated method: Valve.VR.CVRSystem.GetControllerAxisTypeNameFromEnum
::Il2CppString* Valve::VR::CVRSystem::GetControllerAxisTypeNameFromEnum(Valve::VR::EVRControllerAxisType eAxisType) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "GetControllerAxisTypeNameFromEnum", eAxisType));
}
// Autogenerated method: Valve.VR.CVRSystem.IsInputAvailable
bool Valve::VR::CVRSystem::IsInputAvailable() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsInputAvailable"));
}
// Autogenerated method: Valve.VR.CVRSystem.IsSteamVRDrawingControllers
bool Valve::VR::CVRSystem::IsSteamVRDrawingControllers() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsSteamVRDrawingControllers"));
}
// Autogenerated method: Valve.VR.CVRSystem.ShouldApplicationPause
bool Valve::VR::CVRSystem::ShouldApplicationPause() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ShouldApplicationPause"));
}
// Autogenerated method: Valve.VR.CVRSystem.ShouldApplicationReduceRenderingWork
bool Valve::VR::CVRSystem::ShouldApplicationReduceRenderingWork() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ShouldApplicationReduceRenderingWork"));
}
// Autogenerated method: Valve.VR.CVRSystem.DriverDebugRequest
uint Valve::VR::CVRSystem::DriverDebugRequest(uint unDeviceIndex, ::Il2CppString* pchRequest, System::Text::StringBuilder* pchResponseBuffer, uint unResponseBufferSize) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "DriverDebugRequest", unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize));
}
// Autogenerated method: Valve.VR.CVRSystem.PerformFirmwareUpdate
Valve::VR::EVRFirmwareError Valve::VR::CVRSystem::PerformFirmwareUpdate(uint unDeviceIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVRFirmwareError>(this, "PerformFirmwareUpdate", unDeviceIndex));
}
// Autogenerated method: Valve.VR.CVRSystem.AcknowledgeQuit_Exiting
void Valve::VR::CVRSystem::AcknowledgeQuit_Exiting() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AcknowledgeQuit_Exiting"));
}
// Autogenerated method: Valve.VR.CVRSystem.AcknowledgeQuit_UserPrompt
void Valve::VR::CVRSystem::AcknowledgeQuit_UserPrompt() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AcknowledgeQuit_UserPrompt"));
}
