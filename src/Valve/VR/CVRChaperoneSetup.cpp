// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRChaperoneSetup
#include "Valve/VR/CVRChaperoneSetup.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Valve.VR.EChaperoneConfigFile
#include "Valve/VR/EChaperoneConfigFile.hpp"
// Including type: Valve.VR.HmdQuad_t
#include "Valve/VR/HmdQuad_t.hpp"
// Including type: Valve.VR.HmdMatrix34_t
#include "Valve/VR/HmdMatrix34_t.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRChaperoneSetup..ctor
Valve::VR::CVRChaperoneSetup* Valve::VR::CVRChaperoneSetup::New_ctor(System::IntPtr pInterface) {
  return THROW_UNLESS(il2cpp_utils::New<CVRChaperoneSetup*>(pInterface));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.CommitWorkingCopy
bool Valve::VR::CVRChaperoneSetup::CommitWorkingCopy(Valve::VR::EChaperoneConfigFile configFile) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "CommitWorkingCopy", configFile));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.RevertWorkingCopy
void Valve::VR::CVRChaperoneSetup::RevertWorkingCopy() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "RevertWorkingCopy"));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingPlayAreaSize
bool Valve::VR::CVRChaperoneSetup::GetWorkingPlayAreaSize(float& pSizeX, float& pSizeZ) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetWorkingPlayAreaSize", pSizeX, pSizeZ));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingPlayAreaRect
bool Valve::VR::CVRChaperoneSetup::GetWorkingPlayAreaRect(Valve::VR::HmdQuad_t& rect) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetWorkingPlayAreaRect", rect));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingCollisionBoundsInfo
bool Valve::VR::CVRChaperoneSetup::GetWorkingCollisionBoundsInfo(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetWorkingCollisionBoundsInfo", pQuadsBuffer));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetLiveCollisionBoundsInfo
bool Valve::VR::CVRChaperoneSetup::GetLiveCollisionBoundsInfo(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetLiveCollisionBoundsInfo", pQuadsBuffer));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingSeatedZeroPoseToRawTrackingPose
bool Valve::VR::CVRChaperoneSetup::GetWorkingSeatedZeroPoseToRawTrackingPose(Valve::VR::HmdMatrix34_t& pmatSeatedZeroPoseToRawTrackingPose) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetWorkingSeatedZeroPoseToRawTrackingPose", pmatSeatedZeroPoseToRawTrackingPose));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetWorkingStandingZeroPoseToRawTrackingPose
bool Valve::VR::CVRChaperoneSetup::GetWorkingStandingZeroPoseToRawTrackingPose(Valve::VR::HmdMatrix34_t& pmatStandingZeroPoseToRawTrackingPose) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetWorkingStandingZeroPoseToRawTrackingPose", pmatStandingZeroPoseToRawTrackingPose));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingPlayAreaSize
void Valve::VR::CVRChaperoneSetup::SetWorkingPlayAreaSize(float sizeX, float sizeZ) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetWorkingPlayAreaSize", sizeX, sizeZ));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingCollisionBoundsInfo
void Valve::VR::CVRChaperoneSetup::SetWorkingCollisionBoundsInfo(::Array<Valve::VR::HmdQuad_t>* pQuadsBuffer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetWorkingCollisionBoundsInfo", pQuadsBuffer));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingSeatedZeroPoseToRawTrackingPose
void Valve::VR::CVRChaperoneSetup::SetWorkingSeatedZeroPoseToRawTrackingPose(Valve::VR::HmdMatrix34_t& pMatSeatedZeroPoseToRawTrackingPose) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetWorkingSeatedZeroPoseToRawTrackingPose", pMatSeatedZeroPoseToRawTrackingPose));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingStandingZeroPoseToRawTrackingPose
void Valve::VR::CVRChaperoneSetup::SetWorkingStandingZeroPoseToRawTrackingPose(Valve::VR::HmdMatrix34_t& pMatStandingZeroPoseToRawTrackingPose) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetWorkingStandingZeroPoseToRawTrackingPose", pMatStandingZeroPoseToRawTrackingPose));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.ReloadFromDisk
void Valve::VR::CVRChaperoneSetup::ReloadFromDisk(Valve::VR::EChaperoneConfigFile configFile) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ReloadFromDisk", configFile));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetLiveSeatedZeroPoseToRawTrackingPose
bool Valve::VR::CVRChaperoneSetup::GetLiveSeatedZeroPoseToRawTrackingPose(Valve::VR::HmdMatrix34_t& pmatSeatedZeroPoseToRawTrackingPose) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetLiveSeatedZeroPoseToRawTrackingPose", pmatSeatedZeroPoseToRawTrackingPose));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingCollisionBoundsTagsInfo
void Valve::VR::CVRChaperoneSetup::SetWorkingCollisionBoundsTagsInfo(::Array<uint8_t>* pTagsBuffer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetWorkingCollisionBoundsTagsInfo", pTagsBuffer));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetLiveCollisionBoundsTagsInfo
bool Valve::VR::CVRChaperoneSetup::GetLiveCollisionBoundsTagsInfo(::Array<uint8_t>*& pTagsBuffer) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetLiveCollisionBoundsTagsInfo", pTagsBuffer));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.SetWorkingPhysicalBoundsInfo
bool Valve::VR::CVRChaperoneSetup::SetWorkingPhysicalBoundsInfo(::Array<Valve::VR::HmdQuad_t>* pQuadsBuffer) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "SetWorkingPhysicalBoundsInfo", pQuadsBuffer));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.GetLivePhysicalBoundsInfo
bool Valve::VR::CVRChaperoneSetup::GetLivePhysicalBoundsInfo(::Array<Valve::VR::HmdQuad_t>*& pQuadsBuffer) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetLivePhysicalBoundsInfo", pQuadsBuffer));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.ExportLiveToBuffer
bool Valve::VR::CVRChaperoneSetup::ExportLiveToBuffer(System::Text::StringBuilder* pBuffer, uint& pnBufferLength) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ExportLiveToBuffer", pBuffer, pnBufferLength));
}
// Autogenerated method: Valve.VR.CVRChaperoneSetup.ImportFromBufferToWorking
bool Valve::VR::CVRChaperoneSetup::ImportFromBufferToWorking(::Il2CppString* pBuffer, uint nImportFlags) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ImportFromBufferToWorking", pBuffer, nImportFlags));
}
