// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: Valve.VR.CVRRenderModels/_GetComponentStatePacked
#include "Valve/VR/CVRRenderModels__GetComponentStatePacked.hpp"
// Including type: Valve.VR.CVRRenderModels/GetComponentStateUnion
#include "Valve/VR/CVRRenderModels_GetComponentStateUnion.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Valve.VR.EVRRenderModelError
#include "Valve/VR/EVRRenderModelError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.VRControllerState_t
#include "Valve/VR/VRControllerState_t.hpp"
// Including type: Valve.VR.RenderModel_ControllerMode_State_t
#include "Valve/VR/RenderModel_ControllerMode_State_t.hpp"
// Including type: Valve.VR.RenderModel_ComponentState_t
#include "Valve/VR/RenderModel_ComponentState_t.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRRenderModels..ctor
Valve::VR::CVRRenderModels* Valve::VR::CVRRenderModels::New_ctor(System::IntPtr pInterface) {
  return (CVRRenderModels*)THROW_UNLESS(il2cpp_utils::New("Valve.VR", "CVRRenderModels", pInterface));
}
// Autogenerated method: Valve.VR.CVRRenderModels.LoadRenderModel_Async
Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadRenderModel_Async(::Il2CppString* pchRenderModelName, System::IntPtr& ppRenderModel) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVRRenderModelError>(this, "LoadRenderModel_Async", pchRenderModelName, ppRenderModel));
}
// Autogenerated method: Valve.VR.CVRRenderModels.FreeRenderModel
void Valve::VR::CVRRenderModels::FreeRenderModel(System::IntPtr pRenderModel) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FreeRenderModel", pRenderModel));
}
// Autogenerated method: Valve.VR.CVRRenderModels.LoadTexture_Async
Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadTexture_Async(int textureId, System::IntPtr& ppTexture) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVRRenderModelError>(this, "LoadTexture_Async", textureId, ppTexture));
}
// Autogenerated method: Valve.VR.CVRRenderModels.FreeTexture
void Valve::VR::CVRRenderModels::FreeTexture(System::IntPtr pTexture) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FreeTexture", pTexture));
}
// Autogenerated method: Valve.VR.CVRRenderModels.LoadTextureD3D11_Async
Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadTextureD3D11_Async(int textureId, System::IntPtr pD3D11Device, System::IntPtr& ppD3D11Texture2D) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVRRenderModelError>(this, "LoadTextureD3D11_Async", textureId, pD3D11Device, ppD3D11Texture2D));
}
// Autogenerated method: Valve.VR.CVRRenderModels.LoadIntoTextureD3D11_Async
Valve::VR::EVRRenderModelError Valve::VR::CVRRenderModels::LoadIntoTextureD3D11_Async(int textureId, System::IntPtr pDstTexture) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVRRenderModelError>(this, "LoadIntoTextureD3D11_Async", textureId, pDstTexture));
}
// Autogenerated method: Valve.VR.CVRRenderModels.FreeTextureD3D11
void Valve::VR::CVRRenderModels::FreeTextureD3D11(System::IntPtr pD3D11Texture2D) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FreeTextureD3D11", pD3D11Texture2D));
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelName
uint Valve::VR::CVRRenderModels::GetRenderModelName(uint unRenderModelIndex, System::Text::StringBuilder* pchRenderModelName, uint unRenderModelNameLen) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetRenderModelName", unRenderModelIndex, pchRenderModelName, unRenderModelNameLen));
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelCount
uint Valve::VR::CVRRenderModels::GetRenderModelCount() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetRenderModelCount"));
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentCount
uint Valve::VR::CVRRenderModels::GetComponentCount(::Il2CppString* pchRenderModelName) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetComponentCount", pchRenderModelName));
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentName
uint Valve::VR::CVRRenderModels::GetComponentName(::Il2CppString* pchRenderModelName, uint unComponentIndex, System::Text::StringBuilder* pchComponentName, uint unComponentNameLen) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetComponentName", pchRenderModelName, unComponentIndex, pchComponentName, unComponentNameLen));
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentButtonMask
uint64_t Valve::VR::CVRRenderModels::GetComponentButtonMask(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint64_t>(this, "GetComponentButtonMask", pchRenderModelName, pchComponentName));
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentRenderModelName
uint Valve::VR::CVRRenderModels::GetComponentRenderModelName(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, System::Text::StringBuilder* pchComponentRenderModelName, uint unComponentRenderModelNameLen) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetComponentRenderModelName", pchRenderModelName, pchComponentName, pchComponentRenderModelName, unComponentRenderModelNameLen));
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetComponentState
bool Valve::VR::CVRRenderModels::GetComponentState(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName, Valve::VR::VRControllerState_t& pControllerState, Valve::VR::RenderModel_ControllerMode_State_t& pState, Valve::VR::RenderModel_ComponentState_t& pComponentState) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetComponentState", pchRenderModelName, pchComponentName, pControllerState, pState, pComponentState));
}
// Autogenerated method: Valve.VR.CVRRenderModels.RenderModelHasComponent
bool Valve::VR::CVRRenderModels::RenderModelHasComponent(::Il2CppString* pchRenderModelName, ::Il2CppString* pchComponentName) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "RenderModelHasComponent", pchRenderModelName, pchComponentName));
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelThumbnailURL
uint Valve::VR::CVRRenderModels::GetRenderModelThumbnailURL(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchThumbnailURL, uint unThumbnailURLLen, Valve::VR::EVRRenderModelError& peError) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetRenderModelThumbnailURL", pchRenderModelName, pchThumbnailURL, unThumbnailURLLen, peError));
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelOriginalPath
uint Valve::VR::CVRRenderModels::GetRenderModelOriginalPath(::Il2CppString* pchRenderModelName, System::Text::StringBuilder* pchOriginalPath, uint unOriginalPathLen, Valve::VR::EVRRenderModelError& peError) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetRenderModelOriginalPath", pchRenderModelName, pchOriginalPath, unOriginalPathLen, peError));
}
// Autogenerated method: Valve.VR.CVRRenderModels.GetRenderModelErrorNameFromEnum
::Il2CppString* Valve::VR::CVRRenderModels::GetRenderModelErrorNameFromEnum(Valve::VR::EVRRenderModelError error) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "GetRenderModelErrorNameFromEnum", error));
}
