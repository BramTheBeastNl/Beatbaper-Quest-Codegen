// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError None
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_None() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "None"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError None
void Valve::VR::EVRTrackedCameraError::_set_None(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "None", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError OperationFailed
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_OperationFailed() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "OperationFailed"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError OperationFailed
void Valve::VR::EVRTrackedCameraError::_set_OperationFailed(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "OperationFailed", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidHandle
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidHandle() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidHandle
void Valve::VR::EVRTrackedCameraError::_set_InvalidHandle(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameHeaderVersion
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidFrameHeaderVersion() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidFrameHeaderVersion"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameHeaderVersion
void Valve::VR::EVRTrackedCameraError::_set_InvalidFrameHeaderVersion(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidFrameHeaderVersion", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError OutOfHandles
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_OutOfHandles() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "OutOfHandles"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError OutOfHandles
void Valve::VR::EVRTrackedCameraError::_set_OutOfHandles(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "OutOfHandles", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError IPCFailure
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_IPCFailure() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "IPCFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError IPCFailure
void Valve::VR::EVRTrackedCameraError::_set_IPCFailure(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "IPCFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError NotSupportedForThisDevice
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_NotSupportedForThisDevice() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "NotSupportedForThisDevice"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError NotSupportedForThisDevice
void Valve::VR::EVRTrackedCameraError::_set_NotSupportedForThisDevice(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "NotSupportedForThisDevice", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError SharedMemoryFailure
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_SharedMemoryFailure() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "SharedMemoryFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError SharedMemoryFailure
void Valve::VR::EVRTrackedCameraError::_set_SharedMemoryFailure(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "SharedMemoryFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError FrameBufferingFailure
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_FrameBufferingFailure() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "FrameBufferingFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError FrameBufferingFailure
void Valve::VR::EVRTrackedCameraError::_set_FrameBufferingFailure(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "FrameBufferingFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError StreamSetupFailure
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_StreamSetupFailure() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "StreamSetupFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError StreamSetupFailure
void Valve::VR::EVRTrackedCameraError::_set_StreamSetupFailure(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "StreamSetupFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidGLTextureId
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidGLTextureId() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidGLTextureId"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidGLTextureId
void Valve::VR::EVRTrackedCameraError::_set_InvalidGLTextureId(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidGLTextureId", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidSharedTextureHandle
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidSharedTextureHandle() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidSharedTextureHandle"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidSharedTextureHandle
void Valve::VR::EVRTrackedCameraError::_set_InvalidSharedTextureHandle(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidSharedTextureHandle", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError FailedToGetGLTextureId
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_FailedToGetGLTextureId() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "FailedToGetGLTextureId"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError FailedToGetGLTextureId
void Valve::VR::EVRTrackedCameraError::_set_FailedToGetGLTextureId(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "FailedToGetGLTextureId", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError SharedTextureFailure
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_SharedTextureFailure() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "SharedTextureFailure"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError SharedTextureFailure
void Valve::VR::EVRTrackedCameraError::_set_SharedTextureFailure(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "SharedTextureFailure", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError NoFrameAvailable
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_NoFrameAvailable() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "NoFrameAvailable"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError NoFrameAvailable
void Valve::VR::EVRTrackedCameraError::_set_NoFrameAvailable(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "NoFrameAvailable", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidArgument
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidArgument() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidArgument"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidArgument
void Valve::VR::EVRTrackedCameraError::_set_InvalidArgument(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidArgument", value));
}
// Autogenerated static field getter
// Get static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameBufferSize
Valve::VR::EVRTrackedCameraError Valve::VR::EVRTrackedCameraError::_get_InvalidFrameBufferSize() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::EVRTrackedCameraError>("Valve.VR", "EVRTrackedCameraError", "InvalidFrameBufferSize"));
}
// Autogenerated static field setter
// Set static field: static public Valve.VR.EVRTrackedCameraError InvalidFrameBufferSize
void Valve::VR::EVRTrackedCameraError::_set_InvalidFrameBufferSize(Valve::VR::EVRTrackedCameraError value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "EVRTrackedCameraError", "InvalidFrameBufferSize", value));
}
