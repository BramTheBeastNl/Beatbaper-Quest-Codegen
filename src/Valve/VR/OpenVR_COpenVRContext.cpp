// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.OpenVR/COpenVRContext
#include "Valve/VR/OpenVR_COpenVRContext.hpp"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: Valve.VR.CVRChaperone
#include "Valve/VR/CVRChaperone.hpp"
// Including type: Valve.VR.CVRChaperoneSetup
#include "Valve/VR/CVRChaperoneSetup.hpp"
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: Valve.VR.CVRExtendedDisplay
#include "Valve/VR/CVRExtendedDisplay.hpp"
// Including type: Valve.VR.CVRSettings
#include "Valve/VR/CVRSettings.hpp"
// Including type: Valve.VR.CVRApplications
#include "Valve/VR/CVRApplications.hpp"
// Including type: Valve.VR.CVRScreenshots
#include "Valve/VR/CVRScreenshots.hpp"
// Including type: Valve.VR.CVRTrackedCamera
#include "Valve/VR/CVRTrackedCamera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.Clear
void Valve::VR::OpenVR::COpenVRContext::Clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("COpenVRContext").WithContext("Clear");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "Clear", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.CheckClear
void Valve::VR::OpenVR::COpenVRContext::CheckClear() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("COpenVRContext").WithContext("CheckClear");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<void>(), "CheckClear", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRSystem
Valve::VR::CVRSystem* Valve::VR::OpenVR::COpenVRContext::VRSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("COpenVRContext").WithContext("VRSystem");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Valve::VR::CVRSystem*>(), "VRSystem", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRSystem*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRChaperone
Valve::VR::CVRChaperone* Valve::VR::OpenVR::COpenVRContext::VRChaperone() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("COpenVRContext").WithContext("VRChaperone");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Valve::VR::CVRChaperone*>(), "VRChaperone", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRChaperone*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRChaperoneSetup
Valve::VR::CVRChaperoneSetup* Valve::VR::OpenVR::COpenVRContext::VRChaperoneSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("COpenVRContext").WithContext("VRChaperoneSetup");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Valve::VR::CVRChaperoneSetup*>(), "VRChaperoneSetup", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRChaperoneSetup*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRCompositor
Valve::VR::CVRCompositor* Valve::VR::OpenVR::COpenVRContext::VRCompositor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("COpenVRContext").WithContext("VRCompositor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Valve::VR::CVRCompositor*>(), "VRCompositor", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRCompositor*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VROverlay
Valve::VR::CVROverlay* Valve::VR::OpenVR::COpenVRContext::VROverlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("COpenVRContext").WithContext("VROverlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Valve::VR::CVROverlay*>(), "VROverlay", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVROverlay*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRRenderModels
Valve::VR::CVRRenderModels* Valve::VR::OpenVR::COpenVRContext::VRRenderModels() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("COpenVRContext").WithContext("VRRenderModels");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Valve::VR::CVRRenderModels*>(), "VRRenderModels", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRRenderModels*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRExtendedDisplay
Valve::VR::CVRExtendedDisplay* Valve::VR::OpenVR::COpenVRContext::VRExtendedDisplay() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("COpenVRContext").WithContext("VRExtendedDisplay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Valve::VR::CVRExtendedDisplay*>(), "VRExtendedDisplay", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRExtendedDisplay*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRSettings
Valve::VR::CVRSettings* Valve::VR::OpenVR::COpenVRContext::VRSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("COpenVRContext").WithContext("VRSettings");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Valve::VR::CVRSettings*>(), "VRSettings", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRSettings*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRApplications
Valve::VR::CVRApplications* Valve::VR::OpenVR::COpenVRContext::VRApplications() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("COpenVRContext").WithContext("VRApplications");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Valve::VR::CVRApplications*>(), "VRApplications", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRApplications*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRScreenshots
Valve::VR::CVRScreenshots* Valve::VR::OpenVR::COpenVRContext::VRScreenshots() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("COpenVRContext").WithContext("VRScreenshots");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Valve::VR::CVRScreenshots*>(), "VRScreenshots", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRScreenshots*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext.VRTrackedCamera
Valve::VR::CVRTrackedCamera* Valve::VR::OpenVR::COpenVRContext::VRTrackedCamera() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("COpenVRContext").WithContext("VRTrackedCamera");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Valve::VR::CVRTrackedCamera*>(), "VRTrackedCamera", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::CVRTrackedCamera*, false>(this, ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVR/COpenVRContext..ctor
Valve::VR::OpenVR::COpenVRContext* Valve::VR::OpenVR::COpenVRContext::New_ctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("COpenVRContext").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<OpenVR::COpenVRContext*>());
}
