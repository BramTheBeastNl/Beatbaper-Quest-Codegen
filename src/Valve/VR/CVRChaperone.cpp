// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: Valve.VR.CVRChaperone
#include "Valve/VR/CVRChaperone.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Valve.VR.ChaperoneCalibrationState
#include "Valve/VR/ChaperoneCalibrationState.hpp"
// Including type: Valve.VR.HmdQuad_t
#include "Valve/VR/HmdQuad_t.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRChaperone..ctor
Valve::VR::CVRChaperone* Valve::VR::CVRChaperone::New_ctor(System::IntPtr pInterface) {
  return (CVRChaperone*)THROW_UNLESS(il2cpp_utils::New("Valve.VR", "CVRChaperone", pInterface));
}
// Autogenerated method: Valve.VR.CVRChaperone.GetCalibrationState
Valve::VR::ChaperoneCalibrationState Valve::VR::CVRChaperone::GetCalibrationState() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::ChaperoneCalibrationState>(this, "GetCalibrationState"));
}
// Autogenerated method: Valve.VR.CVRChaperone.GetPlayAreaSize
bool Valve::VR::CVRChaperone::GetPlayAreaSize(float& pSizeX, float& pSizeZ) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetPlayAreaSize", pSizeX, pSizeZ));
}
// Autogenerated method: Valve.VR.CVRChaperone.GetPlayAreaRect
bool Valve::VR::CVRChaperone::GetPlayAreaRect(Valve::VR::HmdQuad_t& rect) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetPlayAreaRect", rect));
}
// Autogenerated method: Valve.VR.CVRChaperone.ReloadInfo
void Valve::VR::CVRChaperone::ReloadInfo() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ReloadInfo"));
}
// Autogenerated method: Valve.VR.CVRChaperone.SetSceneColor
void Valve::VR::CVRChaperone::SetSceneColor(Valve::VR::HmdColor_t color) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetSceneColor", color));
}
// Autogenerated method: Valve.VR.CVRChaperone.GetBoundsColor
void Valve::VR::CVRChaperone::GetBoundsColor(Valve::VR::HmdColor_t& pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, Valve::VR::HmdColor_t& pOutputCameraColor) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GetBoundsColor", pOutputColorArray, nNumOutputColors, flCollisionBoundsFadeDistance, pOutputCameraColor));
}
// Autogenerated method: Valve.VR.CVRChaperone.AreBoundsVisible
bool Valve::VR::CVRChaperone::AreBoundsVisible() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "AreBoundsVisible"));
}
// Autogenerated method: Valve.VR.CVRChaperone.ForceBoundsVisible
void Valve::VR::CVRChaperone::ForceBoundsVisible(bool bForce) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ForceBoundsVisible", bForce));
}
