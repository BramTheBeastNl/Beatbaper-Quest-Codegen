// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.OpenVR
#include "Valve/VR/OpenVR.hpp"
// Including type: Valve.VR.OpenVR/COpenVRContext
#include "Valve/VR/OpenVR_COpenVRContext.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: Valve.VR.EVRInitError
#include "Valve/VR/EVRInitError.hpp"
// Including type: Valve.VR.EVRApplicationType
#include "Valve/VR/EVRApplicationType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Valve.VR.CVRSystem
#include "Valve/VR/CVRSystem.hpp"
// Including type: Valve.VR.CVRChaperone
#include "Valve/VR/CVRChaperone.hpp"
// Including type: Valve.VR.CVRChaperoneSetup
#include "Valve/VR/CVRChaperoneSetup.hpp"
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: Valve.VR.CVROverlay
#include "Valve/VR/CVROverlay.hpp"
// Including type: Valve.VR.CVRRenderModels
#include "Valve/VR/CVRRenderModels.hpp"
// Including type: Valve.VR.CVRExtendedDisplay
#include "Valve/VR/CVRExtendedDisplay.hpp"
// Including type: Valve.VR.CVRSettings
#include "Valve/VR/CVRSettings.hpp"
// Including type: Valve.VR.CVRApplications
#include "Valve/VR/CVRApplications.hpp"
// Including type: Valve.VR.CVRScreenshots
#include "Valve/VR/CVRScreenshots.hpp"
// Including type: Valve.VR.CVRTrackedCamera
#include "Valve/VR/CVRTrackedCamera.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_nDriverNone
uint Valve::VR::OpenVR::_get_k_nDriverNone() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_nDriverNone"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_nDriverNone
void Valve::VR::OpenVR::_set_k_nDriverNone(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_nDriverNone", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxDriverDebugResponseSize
uint Valve::VR::OpenVR::_get_k_unMaxDriverDebugResponseSize() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxDriverDebugResponseSize"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxDriverDebugResponseSize
void Valve::VR::OpenVR::_set_k_unMaxDriverDebugResponseSize(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxDriverDebugResponseSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unTrackedDeviceIndex_Hmd
uint Valve::VR::OpenVR::_get_k_unTrackedDeviceIndex_Hmd() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unTrackedDeviceIndex_Hmd"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unTrackedDeviceIndex_Hmd
void Valve::VR::OpenVR::_set_k_unTrackedDeviceIndex_Hmd(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unTrackedDeviceIndex_Hmd", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxTrackedDeviceCount
uint Valve::VR::OpenVR::_get_k_unMaxTrackedDeviceCount() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxTrackedDeviceCount"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxTrackedDeviceCount
void Valve::VR::OpenVR::_set_k_unMaxTrackedDeviceCount(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxTrackedDeviceCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unTrackedDeviceIndexOther
uint Valve::VR::OpenVR::_get_k_unTrackedDeviceIndexOther() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unTrackedDeviceIndexOther"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unTrackedDeviceIndexOther
void Valve::VR::OpenVR::_set_k_unTrackedDeviceIndexOther(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unTrackedDeviceIndexOther", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unTrackedDeviceIndexInvalid
uint Valve::VR::OpenVR::_get_k_unTrackedDeviceIndexInvalid() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unTrackedDeviceIndexInvalid"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unTrackedDeviceIndexInvalid
void Valve::VR::OpenVR::_set_k_unTrackedDeviceIndexInvalid(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unTrackedDeviceIndexInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 k_ulInvalidPropertyContainer
uint64_t Valve::VR::OpenVR::_get_k_ulInvalidPropertyContainer() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("Valve.VR", "OpenVR", "k_ulInvalidPropertyContainer"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 k_ulInvalidPropertyContainer
void Valve::VR::OpenVR::_set_k_ulInvalidPropertyContainer(uint64_t value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_ulInvalidPropertyContainer", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unInvalidPropertyTag
uint Valve::VR::OpenVR::_get_k_unInvalidPropertyTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unInvalidPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unInvalidPropertyTag
void Valve::VR::OpenVR::_set_k_unInvalidPropertyTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unInvalidPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unFloatPropertyTag
uint Valve::VR::OpenVR::_get_k_unFloatPropertyTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unFloatPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unFloatPropertyTag
void Valve::VR::OpenVR::_set_k_unFloatPropertyTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unFloatPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unInt32PropertyTag
uint Valve::VR::OpenVR::_get_k_unInt32PropertyTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unInt32PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unInt32PropertyTag
void Valve::VR::OpenVR::_set_k_unInt32PropertyTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unInt32PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unUint64PropertyTag
uint Valve::VR::OpenVR::_get_k_unUint64PropertyTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unUint64PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unUint64PropertyTag
void Valve::VR::OpenVR::_set_k_unUint64PropertyTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unUint64PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unBoolPropertyTag
uint Valve::VR::OpenVR::_get_k_unBoolPropertyTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unBoolPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unBoolPropertyTag
void Valve::VR::OpenVR::_set_k_unBoolPropertyTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unBoolPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unStringPropertyTag
uint Valve::VR::OpenVR::_get_k_unStringPropertyTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unStringPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unStringPropertyTag
void Valve::VR::OpenVR::_set_k_unStringPropertyTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unStringPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHmdMatrix34PropertyTag
uint Valve::VR::OpenVR::_get_k_unHmdMatrix34PropertyTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHmdMatrix34PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHmdMatrix34PropertyTag
void Valve::VR::OpenVR::_set_k_unHmdMatrix34PropertyTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHmdMatrix34PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHmdMatrix44PropertyTag
uint Valve::VR::OpenVR::_get_k_unHmdMatrix44PropertyTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHmdMatrix44PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHmdMatrix44PropertyTag
void Valve::VR::OpenVR::_set_k_unHmdMatrix44PropertyTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHmdMatrix44PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHmdVector3PropertyTag
uint Valve::VR::OpenVR::_get_k_unHmdVector3PropertyTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHmdVector3PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHmdVector3PropertyTag
void Valve::VR::OpenVR::_set_k_unHmdVector3PropertyTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHmdVector3PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHmdVector4PropertyTag
uint Valve::VR::OpenVR::_get_k_unHmdVector4PropertyTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHmdVector4PropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHmdVector4PropertyTag
void Valve::VR::OpenVR::_set_k_unHmdVector4PropertyTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHmdVector4PropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHiddenAreaPropertyTag
uint Valve::VR::OpenVR::_get_k_unHiddenAreaPropertyTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHiddenAreaPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHiddenAreaPropertyTag
void Valve::VR::OpenVR::_set_k_unHiddenAreaPropertyTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHiddenAreaPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unPathHandleInfoTag
uint Valve::VR::OpenVR::_get_k_unPathHandleInfoTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unPathHandleInfoTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unPathHandleInfoTag
void Valve::VR::OpenVR::_set_k_unPathHandleInfoTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unPathHandleInfoTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unActionPropertyTag
uint Valve::VR::OpenVR::_get_k_unActionPropertyTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unActionPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unActionPropertyTag
void Valve::VR::OpenVR::_set_k_unActionPropertyTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unActionPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unInputValuePropertyTag
uint Valve::VR::OpenVR::_get_k_unInputValuePropertyTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unInputValuePropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unInputValuePropertyTag
void Valve::VR::OpenVR::_set_k_unInputValuePropertyTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unInputValuePropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unWildcardPropertyTag
uint Valve::VR::OpenVR::_get_k_unWildcardPropertyTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unWildcardPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unWildcardPropertyTag
void Valve::VR::OpenVR::_set_k_unWildcardPropertyTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unWildcardPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unHapticVibrationPropertyTag
uint Valve::VR::OpenVR::_get_k_unHapticVibrationPropertyTag() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unHapticVibrationPropertyTag"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unHapticVibrationPropertyTag
void Valve::VR::OpenVR::_set_k_unHapticVibrationPropertyTag(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unHapticVibrationPropertyTag", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unOpenVRInternalReserved_Start
uint Valve::VR::OpenVR::_get_k_unOpenVRInternalReserved_Start() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unOpenVRInternalReserved_Start"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unOpenVRInternalReserved_Start
void Valve::VR::OpenVR::_set_k_unOpenVRInternalReserved_Start(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unOpenVRInternalReserved_Start", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unOpenVRInternalReserved_End
uint Valve::VR::OpenVR::_get_k_unOpenVRInternalReserved_End() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unOpenVRInternalReserved_End"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unOpenVRInternalReserved_End
void Valve::VR::OpenVR::_set_k_unOpenVRInternalReserved_End(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unOpenVRInternalReserved_End", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxPropertyStringSize
uint Valve::VR::OpenVR::_get_k_unMaxPropertyStringSize() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxPropertyStringSize"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxPropertyStringSize
void Valve::VR::OpenVR::_set_k_unMaxPropertyStringSize(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxPropertyStringSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unControllerStateAxisCount
uint Valve::VR::OpenVR::_get_k_unControllerStateAxisCount() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unControllerStateAxisCount"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unControllerStateAxisCount
void Valve::VR::OpenVR::_set_k_unControllerStateAxisCount(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unControllerStateAxisCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt64 k_ulOverlayHandleInvalid
uint64_t Valve::VR::OpenVR::_get_k_ulOverlayHandleInvalid() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint64_t>("Valve.VR", "OpenVR", "k_ulOverlayHandleInvalid"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt64 k_ulOverlayHandleInvalid
void Valve::VR::OpenVR::_set_k_ulOverlayHandleInvalid(uint64_t value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_ulOverlayHandleInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unScreenshotHandleInvalid
uint Valve::VR::OpenVR::_get_k_unScreenshotHandleInvalid() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unScreenshotHandleInvalid"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unScreenshotHandleInvalid
void Valve::VR::OpenVR::_set_k_unScreenshotHandleInvalid(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unScreenshotHandleInvalid", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRSystem_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRSystem_Version() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRSystem_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRSystem_Version
void Valve::VR::OpenVR::_set_IVRSystem_Version(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRSystem_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRExtendedDisplay_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRExtendedDisplay_Version() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRExtendedDisplay_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRExtendedDisplay_Version
void Valve::VR::OpenVR::_set_IVRExtendedDisplay_Version(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRExtendedDisplay_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRTrackedCamera_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRTrackedCamera_Version() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRTrackedCamera_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRTrackedCamera_Version
void Valve::VR::OpenVR::_set_IVRTrackedCamera_Version(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRTrackedCamera_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxApplicationKeyLength
uint Valve::VR::OpenVR::_get_k_unMaxApplicationKeyLength() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxApplicationKeyLength"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxApplicationKeyLength
void Valve::VR::OpenVR::_set_k_unMaxApplicationKeyLength(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxApplicationKeyLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_MimeType_HomeApp
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_MimeType_HomeApp() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_MimeType_HomeApp"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_MimeType_HomeApp
void Valve::VR::OpenVR::_set_k_pch_MimeType_HomeApp(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_MimeType_HomeApp", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_MimeType_GameTheater
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_MimeType_GameTheater() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_MimeType_GameTheater"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_MimeType_GameTheater
void Valve::VR::OpenVR::_set_k_pch_MimeType_GameTheater(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_MimeType_GameTheater", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRApplications_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRApplications_Version() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRApplications_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRApplications_Version
void Valve::VR::OpenVR::_set_IVRApplications_Version(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRApplications_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRChaperone_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRChaperone_Version() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRChaperone_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRChaperone_Version
void Valve::VR::OpenVR::_set_IVRChaperone_Version(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRChaperone_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRChaperoneSetup_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRChaperoneSetup_Version() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRChaperoneSetup_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRChaperoneSetup_Version
void Valve::VR::OpenVR::_set_IVRChaperoneSetup_Version(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRChaperoneSetup_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRCompositor_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRCompositor_Version() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRCompositor_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRCompositor_Version
void Valve::VR::OpenVR::_set_IVRCompositor_Version(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRCompositor_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unVROverlayMaxKeyLength
uint Valve::VR::OpenVR::_get_k_unVROverlayMaxKeyLength() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unVROverlayMaxKeyLength"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unVROverlayMaxKeyLength
void Valve::VR::OpenVR::_set_k_unVROverlayMaxKeyLength(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unVROverlayMaxKeyLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unVROverlayMaxNameLength
uint Valve::VR::OpenVR::_get_k_unVROverlayMaxNameLength() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unVROverlayMaxNameLength"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unVROverlayMaxNameLength
void Valve::VR::OpenVR::_set_k_unVROverlayMaxNameLength(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unVROverlayMaxNameLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxOverlayCount
uint Valve::VR::OpenVR::_get_k_unMaxOverlayCount() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxOverlayCount"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxOverlayCount
void Valve::VR::OpenVR::_set_k_unMaxOverlayCount(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxOverlayCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxOverlayIntersectionMaskPrimitivesCount
uint Valve::VR::OpenVR::_get_k_unMaxOverlayIntersectionMaskPrimitivesCount() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxOverlayIntersectionMaskPrimitivesCount"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxOverlayIntersectionMaskPrimitivesCount
void Valve::VR::OpenVR::_set_k_unMaxOverlayIntersectionMaskPrimitivesCount(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxOverlayIntersectionMaskPrimitivesCount", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVROverlay_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVROverlay_Version() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVROverlay_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVROverlay_Version
void Valve::VR::OpenVR::_set_IVROverlay_Version(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVROverlay_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Controller_Component_GDC2015
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Controller_Component_GDC2015() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Controller_Component_GDC2015"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Controller_Component_GDC2015
void Valve::VR::OpenVR::_set_k_pch_Controller_Component_GDC2015(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Controller_Component_GDC2015", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Controller_Component_Base
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Controller_Component_Base() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Controller_Component_Base"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Controller_Component_Base
void Valve::VR::OpenVR::_set_k_pch_Controller_Component_Base(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Controller_Component_Base", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Controller_Component_Tip
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Controller_Component_Tip() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Controller_Component_Tip"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Controller_Component_Tip
void Valve::VR::OpenVR::_set_k_pch_Controller_Component_Tip(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Controller_Component_Tip", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Controller_Component_HandGrip
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Controller_Component_HandGrip() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Controller_Component_HandGrip"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Controller_Component_HandGrip
void Valve::VR::OpenVR::_set_k_pch_Controller_Component_HandGrip(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Controller_Component_HandGrip", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Controller_Component_Status
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Controller_Component_Status() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Controller_Component_Status"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Controller_Component_Status
void Valve::VR::OpenVR::_set_k_pch_Controller_Component_Status(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Controller_Component_Status", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRRenderModels_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRRenderModels_Version() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRRenderModels_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRRenderModels_Version
void Valve::VR::OpenVR::_set_IVRRenderModels_Version(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRRenderModels_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unNotificationTextMaxSize
uint Valve::VR::OpenVR::_get_k_unNotificationTextMaxSize() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unNotificationTextMaxSize"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unNotificationTextMaxSize
void Valve::VR::OpenVR::_set_k_unNotificationTextMaxSize(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unNotificationTextMaxSize", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRNotifications_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRNotifications_Version() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRNotifications_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRNotifications_Version
void Valve::VR::OpenVR::_set_IVRNotifications_Version(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRNotifications_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.UInt32 k_unMaxSettingsKeyLength
uint Valve::VR::OpenVR::_get_k_unMaxSettingsKeyLength() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "k_unMaxSettingsKeyLength"));
}
// Autogenerated static field setter
// Set static field: static public System.UInt32 k_unMaxSettingsKeyLength
void Valve::VR::OpenVR::_set_k_unMaxSettingsKeyLength(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_unMaxSettingsKeyLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRSettings_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRSettings_Version() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRSettings_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRSettings_Version
void Valve::VR::OpenVR::_set_IVRSettings_Version(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRSettings_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_Section() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_Section
void Valve::VR::OpenVR::_set_k_pch_SteamVR_Section(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_RequireHmd_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_RequireHmd_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_RequireHmd_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_RequireHmd_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_RequireHmd_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_RequireHmd_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ForcedDriverKey_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ForcedDriverKey_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ForcedDriverKey_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ForcedDriverKey_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ForcedDriverKey_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ForcedDriverKey_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ForcedHmdKey_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ForcedHmdKey_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ForcedHmdKey_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ForcedHmdKey_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ForcedHmdKey_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ForcedHmdKey_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DisplayDebug_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DisplayDebug_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebug_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DisplayDebug_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DisplayDebug_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebug_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DebugProcessPipe_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DebugProcessPipe_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DebugProcessPipe_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DebugProcessPipe_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DebugProcessPipe_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DebugProcessPipe_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DisplayDebugX_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DisplayDebugX_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebugX_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DisplayDebugX_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DisplayDebugX_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebugX_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DisplayDebugY_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DisplayDebugY_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebugY_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DisplayDebugY_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DisplayDebugY_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DisplayDebugY_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_SendSystemButtonToAllApps_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_SendSystemButtonToAllApps_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_SendSystemButtonToAllApps_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_SendSystemButtonToAllApps_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_SendSystemButtonToAllApps_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_SendSystemButtonToAllApps_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_LogLevel_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_LogLevel_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_LogLevel_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_LogLevel_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_LogLevel_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_LogLevel_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_IPD_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_IPD_Float() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_IPD_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_IPD_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_IPD_Float(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_IPD_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_Background_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_Background_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_Background_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_Background_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_Background_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_Background_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_BackgroundUseDomeProjection_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_BackgroundUseDomeProjection_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundUseDomeProjection_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_BackgroundUseDomeProjection_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_BackgroundUseDomeProjection_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundUseDomeProjection_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_BackgroundCameraHeight_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_BackgroundCameraHeight_Float() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundCameraHeight_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_BackgroundCameraHeight_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_BackgroundCameraHeight_Float(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundCameraHeight_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_BackgroundDomeRadius_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_BackgroundDomeRadius_Float() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundDomeRadius_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_BackgroundDomeRadius_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_BackgroundDomeRadius_Float(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_BackgroundDomeRadius_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_GridColor_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_GridColor_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_GridColor_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_GridColor_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_GridColor_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_GridColor_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_PlayAreaColor_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_PlayAreaColor_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_PlayAreaColor_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_PlayAreaColor_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_PlayAreaColor_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_PlayAreaColor_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ShowStage_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ShowStage_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ShowStage_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ShowStage_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ShowStage_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ShowStage_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ActivateMultipleDrivers_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ActivateMultipleDrivers_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ActivateMultipleDrivers_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ActivateMultipleDrivers_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ActivateMultipleDrivers_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ActivateMultipleDrivers_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DirectMode_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DirectMode_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DirectMode_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DirectMode_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DirectMode_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DirectMode_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DirectModeEdidVid_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DirectModeEdidVid_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DirectModeEdidVid_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DirectModeEdidVid_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DirectModeEdidVid_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DirectModeEdidVid_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DirectModeEdidPid_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DirectModeEdidPid_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DirectModeEdidPid_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DirectModeEdidPid_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DirectModeEdidPid_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DirectModeEdidPid_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_UsingSpeakers_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_UsingSpeakers_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_UsingSpeakers_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_UsingSpeakers_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_UsingSpeakers_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_UsingSpeakers_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_BaseStationPowerManagement_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_BaseStationPowerManagement_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_BaseStationPowerManagement_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_BaseStationPowerManagement_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_BaseStationPowerManagement_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_BaseStationPowerManagement_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_NeverKillProcesses_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_NeverKillProcesses_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_NeverKillProcesses_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_NeverKillProcesses_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_NeverKillProcesses_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_NeverKillProcesses_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_SupersampleScale_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_SupersampleScale_Float() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_SupersampleScale_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_SupersampleScale_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_SupersampleScale_Float(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_SupersampleScale_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_AllowAsyncReprojection_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowAsyncReprojection_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowAsyncReprojection_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_AllowAsyncReprojection_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowAsyncReprojection_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowAsyncReprojection_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_AllowReprojection_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowReprojection_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowReprojection_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_AllowReprojection_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowReprojection_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowReprojection_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ForceReprojection_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ForceReprojection_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceReprojection_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ForceReprojection_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ForceReprojection_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceReprojection_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ForceFadeOnBadTracking_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ForceFadeOnBadTracking_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceFadeOnBadTracking_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ForceFadeOnBadTracking_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ForceFadeOnBadTracking_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceFadeOnBadTracking_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_DefaultMirrorView_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_DefaultMirrorView_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_DefaultMirrorView_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_DefaultMirrorView_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_DefaultMirrorView_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_DefaultMirrorView_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ShowMirrorView_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ShowMirrorView_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ShowMirrorView_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ShowMirrorView_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ShowMirrorView_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ShowMirrorView_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_MirrorViewGeometry_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_MirrorViewGeometry_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_MirrorViewGeometry_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_MirrorViewGeometry_String
void Valve::VR::OpenVR::_set_k_pch_SteamVR_MirrorViewGeometry_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_MirrorViewGeometry_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_StartMonitorFromAppLaunch
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_StartMonitorFromAppLaunch() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_StartMonitorFromAppLaunch"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_StartMonitorFromAppLaunch
void Valve::VR::OpenVR::_set_k_pch_SteamVR_StartMonitorFromAppLaunch(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_StartMonitorFromAppLaunch", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_StartCompositorFromAppLaunch_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_StartCompositorFromAppLaunch_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_StartCompositorFromAppLaunch_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_StartCompositorFromAppLaunch_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_StartCompositorFromAppLaunch_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_StartCompositorFromAppLaunch_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_StartDashboardFromAppLaunch_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_StartDashboardFromAppLaunch_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_StartDashboardFromAppLaunch_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_StartDashboardFromAppLaunch_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_StartDashboardFromAppLaunch_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_StartDashboardFromAppLaunch_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_EnableHomeApp
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_EnableHomeApp() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableHomeApp"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_EnableHomeApp
void Valve::VR::OpenVR::_set_k_pch_SteamVR_EnableHomeApp(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableHomeApp", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32
void Valve::VR::OpenVR::_set_k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_RetailDemo_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_RetailDemo_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_RetailDemo_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_RetailDemo_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_RetailDemo_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_RetailDemo_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_IpdOffset_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_IpdOffset_Float() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_IpdOffset_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_IpdOffset_Float
void Valve::VR::OpenVR::_set_k_pch_SteamVR_IpdOffset_Float(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_IpdOffset_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_AllowSupersampleFiltering_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowSupersampleFiltering_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowSupersampleFiltering_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_AllowSupersampleFiltering_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowSupersampleFiltering_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowSupersampleFiltering_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_EnableLinuxVulkanAsync_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_EnableLinuxVulkanAsync_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableLinuxVulkanAsync_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_EnableLinuxVulkanAsync_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_EnableLinuxVulkanAsync_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_EnableLinuxVulkanAsync_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_AllowDisplayLockedMode_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_AllowDisplayLockedMode_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowDisplayLockedMode_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_AllowDisplayLockedMode_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_AllowDisplayLockedMode_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_AllowDisplayLockedMode_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool
void Valve::VR::OpenVR::_set_k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_SteamVR_ForceWindows32bitVRMonitor
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_SteamVR_ForceWindows32bitVRMonitor() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceWindows32bitVRMonitor"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_SteamVR_ForceWindows32bitVRMonitor
void Valve::VR::OpenVR::_set_k_pch_SteamVR_ForceWindows32bitVRMonitor(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_SteamVR_ForceWindows32bitVRMonitor", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_Section() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_Section
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_Section(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_DisableIMU_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_DisableIMU_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisableIMU_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_DisableIMU_Bool
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_DisableIMU_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisableIMU_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_DisableIMUExceptHMD_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_DisableIMUExceptHMD_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisableIMUExceptHMD_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_DisableIMUExceptHMD_Bool
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_DisableIMUExceptHMD_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisableIMUExceptHMD_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_UseDisambiguation_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_UseDisambiguation_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_UseDisambiguation_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_UseDisambiguation_String
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_UseDisambiguation_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_UseDisambiguation_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_DisambiguationDebug_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_DisambiguationDebug_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisambiguationDebug_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_DisambiguationDebug_Int32
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_DisambiguationDebug_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_DisambiguationDebug_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_PrimaryBasestation_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_PrimaryBasestation_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_PrimaryBasestation_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_PrimaryBasestation_Int32
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_PrimaryBasestation_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_PrimaryBasestation_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_DBHistory_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_DBHistory_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_DBHistory_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_DBHistory_Bool
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_DBHistory_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_DBHistory_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Lighthouse_EnableBluetooth_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Lighthouse_EnableBluetooth_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Lighthouse_EnableBluetooth_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Lighthouse_EnableBluetooth_Bool
void Valve::VR::OpenVR::_set_k_pch_Lighthouse_EnableBluetooth_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Lighthouse_EnableBluetooth_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_Section() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_Section
void Valve::VR::OpenVR::_set_k_pch_Null_Section(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_SerialNumber_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_SerialNumber_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_SerialNumber_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_SerialNumber_String
void Valve::VR::OpenVR::_set_k_pch_Null_SerialNumber_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_SerialNumber_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_ModelNumber_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_ModelNumber_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_ModelNumber_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_ModelNumber_String
void Valve::VR::OpenVR::_set_k_pch_Null_ModelNumber_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_ModelNumber_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_WindowX_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_WindowX_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_WindowX_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_WindowX_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_WindowX_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_WindowX_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_WindowY_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_WindowY_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_WindowY_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_WindowY_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_WindowY_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_WindowY_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_WindowWidth_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_WindowWidth_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_WindowWidth_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_WindowWidth_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_WindowWidth_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_WindowWidth_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_WindowHeight_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_WindowHeight_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_WindowHeight_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_WindowHeight_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_WindowHeight_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_WindowHeight_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_RenderWidth_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_RenderWidth_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_RenderWidth_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_RenderWidth_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_RenderWidth_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_RenderWidth_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_RenderHeight_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_RenderHeight_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_RenderHeight_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_RenderHeight_Int32
void Valve::VR::OpenVR::_set_k_pch_Null_RenderHeight_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_RenderHeight_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_SecondsFromVsyncToPhotons_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_SecondsFromVsyncToPhotons_Float() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_SecondsFromVsyncToPhotons_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_SecondsFromVsyncToPhotons_Float
void Valve::VR::OpenVR::_set_k_pch_Null_SecondsFromVsyncToPhotons_Float(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_SecondsFromVsyncToPhotons_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Null_DisplayFrequency_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Null_DisplayFrequency_Float() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Null_DisplayFrequency_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Null_DisplayFrequency_Float
void Valve::VR::OpenVR::_set_k_pch_Null_DisplayFrequency_Float(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Null_DisplayFrequency_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_UserInterface_Section() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_UserInterface_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_Section
void Valve::VR::OpenVR::_set_k_pch_UserInterface_Section(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_StatusAlwaysOnTop_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_UserInterface_StatusAlwaysOnTop_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_UserInterface_StatusAlwaysOnTop_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_StatusAlwaysOnTop_Bool
void Valve::VR::OpenVR::_set_k_pch_UserInterface_StatusAlwaysOnTop_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_StatusAlwaysOnTop_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_MinimizeToTray_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_UserInterface_MinimizeToTray_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_UserInterface_MinimizeToTray_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_MinimizeToTray_Bool
void Valve::VR::OpenVR::_set_k_pch_UserInterface_MinimizeToTray_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_MinimizeToTray_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_Screenshots_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_UserInterface_Screenshots_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_UserInterface_Screenshots_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_Screenshots_Bool
void Valve::VR::OpenVR::_set_k_pch_UserInterface_Screenshots_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_Screenshots_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_UserInterface_ScreenshotType_Int
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_UserInterface_ScreenshotType_Int() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_UserInterface_ScreenshotType_Int"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_UserInterface_ScreenshotType_Int
void Valve::VR::OpenVR::_set_k_pch_UserInterface_ScreenshotType_Int(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_UserInterface_ScreenshotType_Int", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Notifications_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Notifications_Section() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Notifications_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Notifications_Section
void Valve::VR::OpenVR::_set_k_pch_Notifications_Section(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Notifications_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Notifications_DoNotDisturb_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Notifications_DoNotDisturb_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Notifications_DoNotDisturb_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Notifications_DoNotDisturb_Bool
void Valve::VR::OpenVR::_set_k_pch_Notifications_DoNotDisturb_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Notifications_DoNotDisturb_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_Section() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_Section
void Valve::VR::OpenVR::_set_k_pch_Keyboard_Section(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_TutorialCompletions
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_TutorialCompletions() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_TutorialCompletions"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_TutorialCompletions
void Valve::VR::OpenVR::_set_k_pch_Keyboard_TutorialCompletions(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_TutorialCompletions", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_ScaleX
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_ScaleX() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_ScaleX"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_ScaleX
void Valve::VR::OpenVR::_set_k_pch_Keyboard_ScaleX(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_ScaleX", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_ScaleY
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_ScaleY() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_ScaleY"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_ScaleY
void Valve::VR::OpenVR::_set_k_pch_Keyboard_ScaleY(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_ScaleY", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_OffsetLeftX
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_OffsetLeftX() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetLeftX"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_OffsetLeftX
void Valve::VR::OpenVR::_set_k_pch_Keyboard_OffsetLeftX(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetLeftX", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_OffsetRightX
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_OffsetRightX() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetRightX"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_OffsetRightX
void Valve::VR::OpenVR::_set_k_pch_Keyboard_OffsetRightX(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetRightX", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_OffsetY
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_OffsetY() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetY"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_OffsetY
void Valve::VR::OpenVR::_set_k_pch_Keyboard_OffsetY(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_OffsetY", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Keyboard_Smoothing
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Keyboard_Smoothing() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Keyboard_Smoothing"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Keyboard_Smoothing
void Valve::VR::OpenVR::_set_k_pch_Keyboard_Smoothing(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Keyboard_Smoothing", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_Section() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_Section
void Valve::VR::OpenVR::_set_k_pch_Perf_Section(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_HeuristicActive_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_HeuristicActive_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_HeuristicActive_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_HeuristicActive_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_HeuristicActive_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_HeuristicActive_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_NotifyInHMD_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_NotifyInHMD_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_NotifyInHMD_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_NotifyInHMD_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_NotifyInHMD_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_NotifyInHMD_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_NotifyOnlyOnce_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_NotifyOnlyOnce_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_NotifyOnlyOnce_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_NotifyOnlyOnce_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_NotifyOnlyOnce_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_NotifyOnlyOnce_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_AllowTimingStore_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_AllowTimingStore_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_AllowTimingStore_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_AllowTimingStore_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_AllowTimingStore_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_AllowTimingStore_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_SaveTimingsOnExit_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_SaveTimingsOnExit_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_SaveTimingsOnExit_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_SaveTimingsOnExit_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_SaveTimingsOnExit_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_SaveTimingsOnExit_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_TestData_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_TestData_Float() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_TestData_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_TestData_Float
void Valve::VR::OpenVR::_set_k_pch_Perf_TestData_Float(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_TestData_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Perf_LinuxGPUProfiling_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Perf_LinuxGPUProfiling_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Perf_LinuxGPUProfiling_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Perf_LinuxGPUProfiling_Bool
void Valve::VR::OpenVR::_set_k_pch_Perf_LinuxGPUProfiling_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Perf_LinuxGPUProfiling_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_Section() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_Section
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_Section(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_Style_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_Style_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_Style_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_Style_Int32
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_Style_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_Style_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_GroundPerimeterOn_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_GroundPerimeterOn_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_GroundPerimeterOn_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_GroundPerimeterOn_Bool
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_GroundPerimeterOn_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_GroundPerimeterOn_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_CenterMarkerOn_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_CenterMarkerOn_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_CenterMarkerOn_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_CenterMarkerOn_Bool
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_CenterMarkerOn_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_CenterMarkerOn_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_PlaySpaceOn_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_PlaySpaceOn_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_PlaySpaceOn_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_PlaySpaceOn_Bool
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_PlaySpaceOn_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_PlaySpaceOn_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_FadeDistance_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_FadeDistance_Float() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_FadeDistance_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_FadeDistance_Float
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_FadeDistance_Float(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_FadeDistance_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_ColorGammaR_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaR_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaR_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_ColorGammaR_Int32
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaR_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaR_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_ColorGammaG_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaG_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaG_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_ColorGammaG_Int32
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaG_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaG_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_ColorGammaB_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaB_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaB_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_ColorGammaB_Int32
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaB_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaB_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_CollisionBounds_ColorGammaA_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_CollisionBounds_ColorGammaA_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaA_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_CollisionBounds_ColorGammaA_Int32
void Valve::VR::OpenVR::_set_k_pch_CollisionBounds_ColorGammaA_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_CollisionBounds_ColorGammaA_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_Section() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_Section
void Valve::VR::OpenVR::_set_k_pch_Camera_Section(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_EnableCamera_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_EnableCamera_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_EnableCamera_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_EnableCamera_Bool
void Valve::VR::OpenVR::_set_k_pch_Camera_EnableCamera_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_EnableCamera_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_EnableCameraInDashboard_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_EnableCameraInDashboard_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraInDashboard_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_EnableCameraInDashboard_Bool
void Valve::VR::OpenVR::_set_k_pch_Camera_EnableCameraInDashboard_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraInDashboard_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_EnableCameraForCollisionBounds_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_EnableCameraForCollisionBounds_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraForCollisionBounds_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_EnableCameraForCollisionBounds_Bool
void Valve::VR::OpenVR::_set_k_pch_Camera_EnableCameraForCollisionBounds_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraForCollisionBounds_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_EnableCameraForRoomView_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_EnableCameraForRoomView_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraForRoomView_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_EnableCameraForRoomView_Bool
void Valve::VR::OpenVR::_set_k_pch_Camera_EnableCameraForRoomView_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_EnableCameraForRoomView_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_BoundsColorGammaR_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaR_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaR_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_BoundsColorGammaR_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaR_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaR_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_BoundsColorGammaG_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaG_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaG_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_BoundsColorGammaG_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaG_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaG_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_BoundsColorGammaB_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaB_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaB_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_BoundsColorGammaB_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaB_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaB_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_BoundsColorGammaA_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_BoundsColorGammaA_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaA_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_BoundsColorGammaA_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_BoundsColorGammaA_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_BoundsColorGammaA_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Camera_BoundsStrength_Int32
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Camera_BoundsStrength_Int32() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Camera_BoundsStrength_Int32"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Camera_BoundsStrength_Int32
void Valve::VR::OpenVR::_set_k_pch_Camera_BoundsStrength_Int32(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Camera_BoundsStrength_Int32", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_audio_Section() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_audio_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_Section
void Valve::VR::OpenVR::_set_k_pch_audio_Section(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_OnPlaybackDevice_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_audio_OnPlaybackDevice_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_audio_OnPlaybackDevice_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_OnPlaybackDevice_String
void Valve::VR::OpenVR::_set_k_pch_audio_OnPlaybackDevice_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_OnPlaybackDevice_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_OnRecordDevice_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_audio_OnRecordDevice_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_audio_OnRecordDevice_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_OnRecordDevice_String
void Valve::VR::OpenVR::_set_k_pch_audio_OnRecordDevice_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_OnRecordDevice_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_OnPlaybackMirrorDevice_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_audio_OnPlaybackMirrorDevice_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_audio_OnPlaybackMirrorDevice_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_OnPlaybackMirrorDevice_String
void Valve::VR::OpenVR::_set_k_pch_audio_OnPlaybackMirrorDevice_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_OnPlaybackMirrorDevice_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_OffPlaybackDevice_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_audio_OffPlaybackDevice_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_audio_OffPlaybackDevice_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_OffPlaybackDevice_String
void Valve::VR::OpenVR::_set_k_pch_audio_OffPlaybackDevice_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_OffPlaybackDevice_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_OffRecordDevice_String
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_audio_OffRecordDevice_String() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_audio_OffRecordDevice_String"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_OffRecordDevice_String
void Valve::VR::OpenVR::_set_k_pch_audio_OffRecordDevice_String(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_OffRecordDevice_String", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_audio_VIVEHDMIGain
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_audio_VIVEHDMIGain() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_audio_VIVEHDMIGain"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_audio_VIVEHDMIGain
void Valve::VR::OpenVR::_set_k_pch_audio_VIVEHDMIGain(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_audio_VIVEHDMIGain", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Power_Section() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Power_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_Section
void Valve::VR::OpenVR::_set_k_pch_Power_Section(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_PowerOffOnExit_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Power_PowerOffOnExit_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Power_PowerOffOnExit_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_PowerOffOnExit_Bool
void Valve::VR::OpenVR::_set_k_pch_Power_PowerOffOnExit_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_PowerOffOnExit_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_TurnOffScreensTimeout_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Power_TurnOffScreensTimeout_Float() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Power_TurnOffScreensTimeout_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_TurnOffScreensTimeout_Float
void Valve::VR::OpenVR::_set_k_pch_Power_TurnOffScreensTimeout_Float(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_TurnOffScreensTimeout_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_TurnOffControllersTimeout_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Power_TurnOffControllersTimeout_Float() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Power_TurnOffControllersTimeout_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_TurnOffControllersTimeout_Float
void Valve::VR::OpenVR::_set_k_pch_Power_TurnOffControllersTimeout_Float(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_TurnOffControllersTimeout_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_ReturnToWatchdogTimeout_Float
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Power_ReturnToWatchdogTimeout_Float() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Power_ReturnToWatchdogTimeout_Float"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_ReturnToWatchdogTimeout_Float
void Valve::VR::OpenVR::_set_k_pch_Power_ReturnToWatchdogTimeout_Float(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_ReturnToWatchdogTimeout_Float", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_AutoLaunchSteamVROnButtonPress
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Power_AutoLaunchSteamVROnButtonPress() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Power_AutoLaunchSteamVROnButtonPress"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_AutoLaunchSteamVROnButtonPress
void Valve::VR::OpenVR::_set_k_pch_Power_AutoLaunchSteamVROnButtonPress(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_AutoLaunchSteamVROnButtonPress", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Power_PauseCompositorOnStandby_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Power_PauseCompositorOnStandby_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Power_PauseCompositorOnStandby_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Power_PauseCompositorOnStandby_Bool
void Valve::VR::OpenVR::_set_k_pch_Power_PauseCompositorOnStandby_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Power_PauseCompositorOnStandby_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Dashboard_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Dashboard_Section() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Dashboard_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Dashboard_Section
void Valve::VR::OpenVR::_set_k_pch_Dashboard_Section(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Dashboard_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Dashboard_EnableDashboard_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Dashboard_EnableDashboard_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Dashboard_EnableDashboard_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Dashboard_EnableDashboard_Bool
void Valve::VR::OpenVR::_set_k_pch_Dashboard_EnableDashboard_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Dashboard_EnableDashboard_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Dashboard_ArcadeMode_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Dashboard_ArcadeMode_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Dashboard_ArcadeMode_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Dashboard_ArcadeMode_Bool
void Valve::VR::OpenVR::_set_k_pch_Dashboard_ArcadeMode_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Dashboard_ArcadeMode_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_modelskin_Section
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_modelskin_Section() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_modelskin_Section"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_modelskin_Section
void Valve::VR::OpenVR::_set_k_pch_modelskin_Section(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_modelskin_Section", value));
}
// Autogenerated static field getter
// Get static field: static public System.String k_pch_Driver_Enable_Bool
::Il2CppString* Valve::VR::OpenVR::_get_k_pch_Driver_Enable_Bool() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "k_pch_Driver_Enable_Bool"));
}
// Autogenerated static field setter
// Set static field: static public System.String k_pch_Driver_Enable_Bool
void Valve::VR::OpenVR::_set_k_pch_Driver_Enable_Bool(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "k_pch_Driver_Enable_Bool", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRScreenshots_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRScreenshots_Version() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRScreenshots_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRScreenshots_Version
void Valve::VR::OpenVR::_set_IVRScreenshots_Version(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRScreenshots_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRResources_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRResources_Version() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRResources_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRResources_Version
void Valve::VR::OpenVR::_set_IVRResources_Version(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRResources_Version", value));
}
// Autogenerated static field getter
// Get static field: static public System.String IVRDriverManager_Version
::Il2CppString* Valve::VR::OpenVR::_get_IVRDriverManager_Version() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "IVRDriverManager_Version"));
}
// Autogenerated static field setter
// Set static field: static public System.String IVRDriverManager_Version
void Valve::VR::OpenVR::_set_IVRDriverManager_Version(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "IVRDriverManager_Version", value));
}
// Autogenerated static field getter
// Get static field: static private System.UInt32 <VRToken>k__BackingField
uint Valve::VR::OpenVR::_get_$VRToken$k__BackingField() {
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<uint>("Valve.VR", "OpenVR", "<VRToken>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.UInt32 <VRToken>k__BackingField
void Valve::VR::OpenVR::_set_$VRToken$k__BackingField(uint value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "<VRToken>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.String FnTable_Prefix
::Il2CppString* Valve::VR::OpenVR::_get_FnTable_Prefix() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("Valve.VR", "OpenVR", "FnTable_Prefix"));
}
// Autogenerated static field setter
// Set static field: static private System.String FnTable_Prefix
void Valve::VR::OpenVR::_set_FnTable_Prefix(::Il2CppString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "FnTable_Prefix", value));
}
// Autogenerated static field getter
// Get static field: static private Valve.VR.OpenVR/COpenVRContext _OpenVRInternal_ModuleContext
Valve::VR::OpenVR::COpenVRContext* Valve::VR::OpenVR::_get__OpenVRInternal_ModuleContext() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<Valve::VR::OpenVR::COpenVRContext*>("Valve.VR", "OpenVR", "_OpenVRInternal_ModuleContext"));
}
// Autogenerated static field setter
// Set static field: static private Valve.VR.OpenVR/COpenVRContext _OpenVRInternal_ModuleContext
void Valve::VR::OpenVR::_set__OpenVRInternal_ModuleContext(Valve::VR::OpenVR::COpenVRContext* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("Valve.VR", "OpenVR", "_OpenVRInternal_ModuleContext", value));
}
// Autogenerated method: Valve.VR.OpenVR.InitInternal
uint Valve::VR::OpenVR::InitInternal(Valve::VR::EVRInitError& peError, Valve::VR::EVRApplicationType eApplicationType) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>("Valve.VR", "OpenVR", "InitInternal", peError, eApplicationType));
}
// Autogenerated method: Valve.VR.OpenVR.ShutdownInternal
void Valve::VR::OpenVR::ShutdownInternal() {
  THROW_UNLESS(il2cpp_utils::RunMethod("Valve.VR", "OpenVR", "ShutdownInternal"));
}
// Autogenerated method: Valve.VR.OpenVR.IsHmdPresent
bool Valve::VR::OpenVR::IsHmdPresent() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Valve.VR", "OpenVR", "IsHmdPresent"));
}
// Autogenerated method: Valve.VR.OpenVR.IsRuntimeInstalled
bool Valve::VR::OpenVR::IsRuntimeInstalled() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Valve.VR", "OpenVR", "IsRuntimeInstalled"));
}
// Autogenerated method: Valve.VR.OpenVR.GetStringForHmdError
::Il2CppString* Valve::VR::OpenVR::GetStringForHmdError(Valve::VR::EVRInitError error) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>("Valve.VR", "OpenVR", "GetStringForHmdError", error));
}
// Autogenerated method: Valve.VR.OpenVR.GetGenericInterface
System::IntPtr Valve::VR::OpenVR::GetGenericInterface(::Il2CppString* pchInterfaceVersion, Valve::VR::EVRInitError& peError) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::IntPtr>("Valve.VR", "OpenVR", "GetGenericInterface", pchInterfaceVersion, peError));
}
// Autogenerated method: Valve.VR.OpenVR.IsInterfaceVersionValid
bool Valve::VR::OpenVR::IsInterfaceVersionValid(::Il2CppString* pchInterfaceVersion) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("Valve.VR", "OpenVR", "IsInterfaceVersionValid", pchInterfaceVersion));
}
// Autogenerated method: Valve.VR.OpenVR.GetInitToken
uint Valve::VR::OpenVR::GetInitToken() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>("Valve.VR", "OpenVR", "GetInitToken"));
}
// Autogenerated method: Valve.VR.OpenVR.get_VRToken
uint Valve::VR::OpenVR::get_VRToken() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>("Valve.VR", "OpenVR", "get_VRToken"));
}
// Autogenerated method: Valve.VR.OpenVR.set_VRToken
void Valve::VR::OpenVR::set_VRToken(uint value) {
  THROW_UNLESS(il2cpp_utils::RunMethod("Valve.VR", "OpenVR", "set_VRToken", value));
}
// Autogenerated method: Valve.VR.OpenVR.get_OpenVRInternal_ModuleContext
Valve::VR::OpenVR::COpenVRContext* Valve::VR::OpenVR::get_OpenVRInternal_ModuleContext() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::OpenVR::COpenVRContext*>("Valve.VR", "OpenVR", "get_OpenVRInternal_ModuleContext"));
}
// Autogenerated method: Valve.VR.OpenVR.get_System
Valve::VR::CVRSystem* Valve::VR::OpenVR::get_System() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::CVRSystem*>("Valve.VR", "OpenVR", "get_System"));
}
// Autogenerated method: Valve.VR.OpenVR.get_Chaperone
Valve::VR::CVRChaperone* Valve::VR::OpenVR::get_Chaperone() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::CVRChaperone*>("Valve.VR", "OpenVR", "get_Chaperone"));
}
// Autogenerated method: Valve.VR.OpenVR.get_ChaperoneSetup
Valve::VR::CVRChaperoneSetup* Valve::VR::OpenVR::get_ChaperoneSetup() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::CVRChaperoneSetup*>("Valve.VR", "OpenVR", "get_ChaperoneSetup"));
}
// Autogenerated method: Valve.VR.OpenVR.get_Compositor
Valve::VR::CVRCompositor* Valve::VR::OpenVR::get_Compositor() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::CVRCompositor*>("Valve.VR", "OpenVR", "get_Compositor"));
}
// Autogenerated method: Valve.VR.OpenVR.get_Overlay
Valve::VR::CVROverlay* Valve::VR::OpenVR::get_Overlay() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::CVROverlay*>("Valve.VR", "OpenVR", "get_Overlay"));
}
// Autogenerated method: Valve.VR.OpenVR.get_RenderModels
Valve::VR::CVRRenderModels* Valve::VR::OpenVR::get_RenderModels() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::CVRRenderModels*>("Valve.VR", "OpenVR", "get_RenderModels"));
}
// Autogenerated method: Valve.VR.OpenVR.get_ExtendedDisplay
Valve::VR::CVRExtendedDisplay* Valve::VR::OpenVR::get_ExtendedDisplay() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::CVRExtendedDisplay*>("Valve.VR", "OpenVR", "get_ExtendedDisplay"));
}
// Autogenerated method: Valve.VR.OpenVR.get_Settings
Valve::VR::CVRSettings* Valve::VR::OpenVR::get_Settings() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::CVRSettings*>("Valve.VR", "OpenVR", "get_Settings"));
}
// Autogenerated method: Valve.VR.OpenVR.get_Applications
Valve::VR::CVRApplications* Valve::VR::OpenVR::get_Applications() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::CVRApplications*>("Valve.VR", "OpenVR", "get_Applications"));
}
// Autogenerated method: Valve.VR.OpenVR.get_Screenshots
Valve::VR::CVRScreenshots* Valve::VR::OpenVR::get_Screenshots() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::CVRScreenshots*>("Valve.VR", "OpenVR", "get_Screenshots"));
}
// Autogenerated method: Valve.VR.OpenVR.get_TrackedCamera
Valve::VR::CVRTrackedCamera* Valve::VR::OpenVR::get_TrackedCamera() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::CVRTrackedCamera*>("Valve.VR", "OpenVR", "get_TrackedCamera"));
}
// Autogenerated method: Valve.VR.OpenVR.Init
Valve::VR::CVRSystem* Valve::VR::OpenVR::Init(Valve::VR::EVRInitError& peError, Valve::VR::EVRApplicationType eApplicationType) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::CVRSystem*>("Valve.VR", "OpenVR", "Init", peError, eApplicationType));
}
// Autogenerated method: Valve.VR.OpenVR.Shutdown
void Valve::VR::OpenVR::Shutdown() {
  THROW_UNLESS(il2cpp_utils::RunMethod("Valve.VR", "OpenVR", "Shutdown"));
}
// Autogenerated method: Valve.VR.OpenVR..cctor
void Valve::VR::OpenVR::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("Valve.VR", "OpenVR", ".cctor"));
}
// Autogenerated method: Valve.VR.OpenVR..ctor
Valve::VR::OpenVR* Valve::VR::OpenVR::New_ctor() {
  return THROW_UNLESS(il2cpp_utils::New<OpenVR*>());
}
