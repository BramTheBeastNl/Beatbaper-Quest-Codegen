// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.CVRCompositor
#include "Valve/VR/CVRCompositor.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.EVRCompositorError
#include "Valve/VR/EVRCompositorError.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
// Including type: Valve.VR.Texture_t
#include "Valve/VR/Texture_t.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: Valve.VR.EVRSubmitFlags
#include "Valve/VR/EVRSubmitFlags.hpp"
// Including type: Valve.VR.Compositor_FrameTiming
#include "Valve/VR/Compositor_FrameTiming.hpp"
// Including type: Valve.VR.Compositor_CumulativeStats
#include "Valve/VR/Compositor_CumulativeStats.hpp"
// Including type: Valve.VR.HmdColor_t
#include "Valve/VR/HmdColor_t.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: Valve.VR.EVRCompositorTimingMode
#include "Valve/VR/EVRCompositorTimingMode.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.CVRCompositor..ctor
Valve::VR::CVRCompositor* Valve::VR::CVRCompositor::New_ctor(System::IntPtr pInterface) {
  return (CVRCompositor*)THROW_UNLESS(il2cpp_utils::New("Valve.VR", "CVRCompositor", pInterface));
}
// Autogenerated method: Valve.VR.CVRCompositor.SetTrackingSpace
void Valve::VR::CVRCompositor::SetTrackingSpace(Valve::VR::ETrackingUniverseOrigin eOrigin) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetTrackingSpace", eOrigin));
}
// Autogenerated method: Valve.VR.CVRCompositor.GetTrackingSpace
Valve::VR::ETrackingUniverseOrigin Valve::VR::CVRCompositor::GetTrackingSpace() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::ETrackingUniverseOrigin>(this, "GetTrackingSpace"));
}
// Autogenerated method: Valve.VR.CVRCompositor.WaitGetPoses
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::WaitGetPoses(::Array<Valve::VR::TrackedDevicePose_t>* pRenderPoseArray, ::Array<Valve::VR::TrackedDevicePose_t>* pGamePoseArray) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVRCompositorError>(this, "WaitGetPoses", pRenderPoseArray, pGamePoseArray));
}
// Autogenerated method: Valve.VR.CVRCompositor.GetLastPoses
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetLastPoses(::Array<Valve::VR::TrackedDevicePose_t>* pRenderPoseArray, ::Array<Valve::VR::TrackedDevicePose_t>* pGamePoseArray) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVRCompositorError>(this, "GetLastPoses", pRenderPoseArray, pGamePoseArray));
}
// Autogenerated method: Valve.VR.CVRCompositor.GetLastPoseForTrackedDeviceIndex
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, Valve::VR::TrackedDevicePose_t& pOutputPose, Valve::VR::TrackedDevicePose_t& pOutputGamePose) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVRCompositorError>(this, "GetLastPoseForTrackedDeviceIndex", unDeviceIndex, pOutputPose, pOutputGamePose));
}
// Autogenerated method: Valve.VR.CVRCompositor.Submit
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::Submit(Valve::VR::EVREye eEye, Valve::VR::Texture_t& pTexture, Valve::VR::VRTextureBounds_t& pBounds, Valve::VR::EVRSubmitFlags nSubmitFlags) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVRCompositorError>(this, "Submit", eEye, pTexture, pBounds, nSubmitFlags));
}
// Autogenerated method: Valve.VR.CVRCompositor.ClearLastSubmittedFrame
void Valve::VR::CVRCompositor::ClearLastSubmittedFrame() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ClearLastSubmittedFrame"));
}
// Autogenerated method: Valve.VR.CVRCompositor.PostPresentHandoff
void Valve::VR::CVRCompositor::PostPresentHandoff() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PostPresentHandoff"));
}
// Autogenerated method: Valve.VR.CVRCompositor.GetFrameTiming
bool Valve::VR::CVRCompositor::GetFrameTiming(Valve::VR::Compositor_FrameTiming& pTiming, uint unFramesAgo) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetFrameTiming", pTiming, unFramesAgo));
}
// Autogenerated method: Valve.VR.CVRCompositor.GetFrameTimings
uint Valve::VR::CVRCompositor::GetFrameTimings(Valve::VR::Compositor_FrameTiming& pTiming, uint nFrames) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetFrameTimings", pTiming, nFrames));
}
// Autogenerated method: Valve.VR.CVRCompositor.GetFrameTimeRemaining
float Valve::VR::CVRCompositor::GetFrameTimeRemaining() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetFrameTimeRemaining"));
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCumulativeStats
void Valve::VR::CVRCompositor::GetCumulativeStats(Valve::VR::Compositor_CumulativeStats& pStats, uint nStatsSizeInBytes) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GetCumulativeStats", pStats, nStatsSizeInBytes));
}
// Autogenerated method: Valve.VR.CVRCompositor.FadeToColor
void Valve::VR::CVRCompositor::FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FadeToColor", fSeconds, fRed, fGreen, fBlue, fAlpha, bBackground));
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCurrentFadeColor
Valve::VR::HmdColor_t Valve::VR::CVRCompositor::GetCurrentFadeColor(bool bBackground) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::HmdColor_t>(this, "GetCurrentFadeColor", bBackground));
}
// Autogenerated method: Valve.VR.CVRCompositor.FadeGrid
void Valve::VR::CVRCompositor::FadeGrid(float fSeconds, bool bFadeIn) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FadeGrid", fSeconds, bFadeIn));
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCurrentGridAlpha
float Valve::VR::CVRCompositor::GetCurrentGridAlpha() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetCurrentGridAlpha"));
}
// Autogenerated method: Valve.VR.CVRCompositor.SetSkyboxOverride
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::SetSkyboxOverride(::Array<Valve::VR::Texture_t>* pTextures) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVRCompositorError>(this, "SetSkyboxOverride", pTextures));
}
// Autogenerated method: Valve.VR.CVRCompositor.ClearSkyboxOverride
void Valve::VR::CVRCompositor::ClearSkyboxOverride() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ClearSkyboxOverride"));
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorBringToFront
void Valve::VR::CVRCompositor::CompositorBringToFront() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CompositorBringToFront"));
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorGoToBack
void Valve::VR::CVRCompositor::CompositorGoToBack() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CompositorGoToBack"));
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorQuit
void Valve::VR::CVRCompositor::CompositorQuit() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CompositorQuit"));
}
// Autogenerated method: Valve.VR.CVRCompositor.IsFullscreen
bool Valve::VR::CVRCompositor::IsFullscreen() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsFullscreen"));
}
// Autogenerated method: Valve.VR.CVRCompositor.GetCurrentSceneFocusProcess
uint Valve::VR::CVRCompositor::GetCurrentSceneFocusProcess() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetCurrentSceneFocusProcess"));
}
// Autogenerated method: Valve.VR.CVRCompositor.GetLastFrameRenderer
uint Valve::VR::CVRCompositor::GetLastFrameRenderer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetLastFrameRenderer"));
}
// Autogenerated method: Valve.VR.CVRCompositor.CanRenderScene
bool Valve::VR::CVRCompositor::CanRenderScene() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "CanRenderScene"));
}
// Autogenerated method: Valve.VR.CVRCompositor.ShowMirrorWindow
void Valve::VR::CVRCompositor::ShowMirrorWindow() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ShowMirrorWindow"));
}
// Autogenerated method: Valve.VR.CVRCompositor.HideMirrorWindow
void Valve::VR::CVRCompositor::HideMirrorWindow() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HideMirrorWindow"));
}
// Autogenerated method: Valve.VR.CVRCompositor.IsMirrorWindowVisible
bool Valve::VR::CVRCompositor::IsMirrorWindowVisible() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsMirrorWindowVisible"));
}
// Autogenerated method: Valve.VR.CVRCompositor.CompositorDumpImages
void Valve::VR::CVRCompositor::CompositorDumpImages() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CompositorDumpImages"));
}
// Autogenerated method: Valve.VR.CVRCompositor.ShouldAppRenderWithLowResources
bool Valve::VR::CVRCompositor::ShouldAppRenderWithLowResources() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ShouldAppRenderWithLowResources"));
}
// Autogenerated method: Valve.VR.CVRCompositor.ForceInterleavedReprojectionOn
void Valve::VR::CVRCompositor::ForceInterleavedReprojectionOn(bool bOverride) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ForceInterleavedReprojectionOn", bOverride));
}
// Autogenerated method: Valve.VR.CVRCompositor.ForceReconnectProcess
void Valve::VR::CVRCompositor::ForceReconnectProcess() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ForceReconnectProcess"));
}
// Autogenerated method: Valve.VR.CVRCompositor.SuspendRendering
void Valve::VR::CVRCompositor::SuspendRendering(bool bSuspend) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SuspendRendering", bSuspend));
}
// Autogenerated method: Valve.VR.CVRCompositor.GetMirrorTextureD3D11
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetMirrorTextureD3D11(Valve::VR::EVREye eEye, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVRCompositorError>(this, "GetMirrorTextureD3D11", eEye, pD3D11DeviceOrResource, ppD3D11ShaderResourceView));
}
// Autogenerated method: Valve.VR.CVRCompositor.ReleaseMirrorTextureD3D11
void Valve::VR::CVRCompositor::ReleaseMirrorTextureD3D11(System::IntPtr pD3D11ShaderResourceView) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ReleaseMirrorTextureD3D11", pD3D11ShaderResourceView));
}
// Autogenerated method: Valve.VR.CVRCompositor.GetMirrorTextureGL
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::GetMirrorTextureGL(Valve::VR::EVREye eEye, uint& pglTextureId, System::IntPtr pglSharedTextureHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVRCompositorError>(this, "GetMirrorTextureGL", eEye, pglTextureId, pglSharedTextureHandle));
}
// Autogenerated method: Valve.VR.CVRCompositor.ReleaseSharedGLTexture
bool Valve::VR::CVRCompositor::ReleaseSharedGLTexture(uint glTextureId, System::IntPtr glSharedTextureHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ReleaseSharedGLTexture", glTextureId, glSharedTextureHandle));
}
// Autogenerated method: Valve.VR.CVRCompositor.LockGLSharedTextureForAccess
void Valve::VR::CVRCompositor::LockGLSharedTextureForAccess(System::IntPtr glSharedTextureHandle) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LockGLSharedTextureForAccess", glSharedTextureHandle));
}
// Autogenerated method: Valve.VR.CVRCompositor.UnlockGLSharedTextureForAccess
void Valve::VR::CVRCompositor::UnlockGLSharedTextureForAccess(System::IntPtr glSharedTextureHandle) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UnlockGLSharedTextureForAccess", glSharedTextureHandle));
}
// Autogenerated method: Valve.VR.CVRCompositor.GetVulkanInstanceExtensionsRequired
uint Valve::VR::CVRCompositor::GetVulkanInstanceExtensionsRequired(System::Text::StringBuilder* pchValue, uint unBufferSize) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetVulkanInstanceExtensionsRequired", pchValue, unBufferSize));
}
// Autogenerated method: Valve.VR.CVRCompositor.GetVulkanDeviceExtensionsRequired
uint Valve::VR::CVRCompositor::GetVulkanDeviceExtensionsRequired(System::IntPtr pPhysicalDevice, System::Text::StringBuilder* pchValue, uint unBufferSize) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetVulkanDeviceExtensionsRequired", pPhysicalDevice, pchValue, unBufferSize));
}
// Autogenerated method: Valve.VR.CVRCompositor.SetExplicitTimingMode
void Valve::VR::CVRCompositor::SetExplicitTimingMode(Valve::VR::EVRCompositorTimingMode eTimingMode) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetExplicitTimingMode", eTimingMode));
}
// Autogenerated method: Valve.VR.CVRCompositor.SubmitExplicitTimingData
Valve::VR::EVRCompositorError Valve::VR::CVRCompositor::SubmitExplicitTimingData() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<Valve::VR::EVRCompositorError>(this, "SubmitExplicitTimingData"));
}
