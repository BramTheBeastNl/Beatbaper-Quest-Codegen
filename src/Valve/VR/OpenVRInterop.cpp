// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.OpenVRInterop
#include "Valve/VR/OpenVRInterop.hpp"
// Including type: Valve.VR.EVRInitError
#include "Valve/VR/EVRInitError.hpp"
// Including type: Valve.VR.EVRApplicationType
#include "Valve/VR/EVRApplicationType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.OpenVRInterop.InitInternal
uint Valve::VR::OpenVRInterop::InitInternal(Valve::VR::EVRInitError& peError, Valve::VR::EVRApplicationType eApplicationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("OpenVRInterop").WithContext("InitInternal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", il2cpp_utils::NoArgClass<uint>(), "InitInternal", {}, ::il2cpp_utils::ExtractTypes(peError, eApplicationType)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, peError, eApplicationType);
}
// Autogenerated method: Valve.VR.OpenVRInterop.ShutdownInternal
void Valve::VR::OpenVRInterop::ShutdownInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("OpenVRInterop").WithContext("ShutdownInternal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", il2cpp_utils::NoArgClass<void>(), "ShutdownInternal", {}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVRInterop.IsHmdPresent
bool Valve::VR::OpenVRInterop::IsHmdPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("OpenVRInterop").WithContext("IsHmdPresent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", il2cpp_utils::NoArgClass<bool>(), "IsHmdPresent", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVRInterop.IsRuntimeInstalled
bool Valve::VR::OpenVRInterop::IsRuntimeInstalled() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("OpenVRInterop").WithContext("IsRuntimeInstalled");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", il2cpp_utils::NoArgClass<bool>(), "IsRuntimeInstalled", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVRInterop.GetStringForHmdError
System::IntPtr Valve::VR::OpenVRInterop::GetStringForHmdError(Valve::VR::EVRInitError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("OpenVRInterop").WithContext("GetStringForHmdError");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", il2cpp_utils::NoArgClass<System::IntPtr>(), "GetStringForHmdError", {}, ::il2cpp_utils::ExtractTypes(error)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, error);
}
// Autogenerated method: Valve.VR.OpenVRInterop.GetGenericInterface
System::IntPtr Valve::VR::OpenVRInterop::GetGenericInterface(::Il2CppString*& pchInterfaceVersion, Valve::VR::EVRInitError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("OpenVRInterop").WithContext("GetGenericInterface");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", il2cpp_utils::NoArgClass<System::IntPtr>(), "GetGenericInterface", {}, ::il2cpp_utils::ExtractTypes(pchInterfaceVersion, peError)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pchInterfaceVersion, peError);
}
// Autogenerated method: Valve.VR.OpenVRInterop.IsInterfaceVersionValid
bool Valve::VR::OpenVRInterop::IsInterfaceVersionValid(::Il2CppString*& pchInterfaceVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("OpenVRInterop").WithContext("IsInterfaceVersionValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", il2cpp_utils::NoArgClass<bool>(), "IsInterfaceVersionValid", {}, ::il2cpp_utils::ExtractTypes(pchInterfaceVersion)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pchInterfaceVersion);
}
// Autogenerated method: Valve.VR.OpenVRInterop.GetInitToken
uint Valve::VR::OpenVRInterop::GetInitToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("OpenVRInterop").WithContext("GetInitToken");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Valve.VR", "OpenVRInterop", il2cpp_utils::NoArgClass<uint>(), "GetInitToken", {}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: Valve.VR.OpenVRInterop..ctor
Valve::VR::OpenVRInterop* Valve::VR::OpenVRInterop::New_ctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("OpenVRInterop").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<OpenVRInterop*>());
}
