// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRTrackedCamera/_HasCamera
#include "Valve/VR/IVRTrackedCamera__HasCamera.hpp"
// Including type: Valve.VR.EVRTrackedCameraError
#include "Valve/VR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: Valve.VR.IVRTrackedCamera/_HasCamera..ctor
Valve::VR::IVRTrackedCamera::_HasCamera* Valve::VR::IVRTrackedCamera::_HasCamera::New_ctor(::Il2CppObject* object, System::IntPtr method) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("_HasCamera").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<IVRTrackedCamera::_HasCamera*>(object, method));
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_HasCamera.Invoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_HasCamera::Invoke(uint nDeviceIndex, bool& pHasCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("_HasCamera").WithContext("Invoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Valve::VR::EVRTrackedCameraError>(), "Invoke", {}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, pHasCamera)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, pHasCamera);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_HasCamera.BeginInvoke
System::IAsyncResult* Valve::VR::IVRTrackedCamera::_HasCamera::BeginInvoke(uint nDeviceIndex, bool& pHasCamera, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("_HasCamera").WithContext("BeginInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<System::IAsyncResult*>(), "BeginInvoke", {}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, pHasCamera, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, pHasCamera, callback, object);
}
// Autogenerated method: Valve.VR.IVRTrackedCamera/_HasCamera.EndInvoke
Valve::VR::EVRTrackedCameraError Valve::VR::IVRTrackedCamera::_HasCamera::EndInvoke(bool& pHasCamera, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("Valve::VR").WithContext("_HasCamera").WithContext("EndInvoke");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<Valve::VR::EVRTrackedCameraError>(), "EndInvoke", {}, ::il2cpp_utils::ExtractTypes(pHasCamera, result)));
  return ::il2cpp_utils::RunMethodThrow<Valve::VR::EVRTrackedCameraError, false>(this, ___internal__method, pHasCamera, result);
}
