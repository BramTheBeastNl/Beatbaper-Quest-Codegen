// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: FileBrowserTableView
#include "GlobalNamespace/FileBrowserTableView.hpp"
// Including type: FileBrowserTableCell
#include "GlobalNamespace/FileBrowserTableCell.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: FileBrowserItem
#include "GlobalNamespace/FileBrowserItem.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String kCellIdentifier
::Il2CppString* GlobalNamespace::FileBrowserTableView::_get_kCellIdentifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableView::_get_kCellIdentifier");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "FileBrowserTableView", "kCellIdentifier"));
}
// Autogenerated static field setter
// Set static field: static private System.String kCellIdentifier
void GlobalNamespace::FileBrowserTableView::_set_kCellIdentifier(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableView::_set_kCellIdentifier");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "FileBrowserTableView", "kCellIdentifier", value));
}
// Autogenerated method: FileBrowserTableView.add_didSelectRow
void GlobalNamespace::FileBrowserTableView::add_didSelectRow(System::Action_2<GlobalNamespace::FileBrowserTableView*, GlobalNamespace::FileBrowserItem*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableView::add_didSelectRow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectRow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FileBrowserTableView.remove_didSelectRow
void GlobalNamespace::FileBrowserTableView::remove_didSelectRow(System::Action_2<GlobalNamespace::FileBrowserTableView*, GlobalNamespace::FileBrowserItem*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableView::remove_didSelectRow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectRow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: FileBrowserTableView.Init
void GlobalNamespace::FileBrowserTableView::Init(::Array<GlobalNamespace::FileBrowserItem*>* items) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableView::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(items)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, items);
}
// Autogenerated method: FileBrowserTableView.SetItems
void GlobalNamespace::FileBrowserTableView::SetItems(::Array<GlobalNamespace::FileBrowserItem*>* items) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableView::SetItems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetItems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(items)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, items);
}
// Autogenerated method: FileBrowserTableView.SelectAndScrollRowToItemWithPath
bool GlobalNamespace::FileBrowserTableView::SelectAndScrollRowToItemWithPath(::Il2CppString* folderPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableView::SelectAndScrollRowToItemWithPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectAndScrollRowToItemWithPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(folderPath)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, folderPath);
}
// Autogenerated method: FileBrowserTableView.CellSize
float GlobalNamespace::FileBrowserTableView::CellSize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableView::CellSize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: FileBrowserTableView.NumberOfCells
int GlobalNamespace::FileBrowserTableView::NumberOfCells() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableView::NumberOfCells");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NumberOfCells", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: FileBrowserTableView.CellForIdx
HMUI::TableCell* GlobalNamespace::FileBrowserTableView::CellForIdx(HMUI::TableView* tableView, int row) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableView::CellForIdx");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CellForIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableView), ::il2cpp_utils::ExtractType(row)})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::TableCell*, false>(this, ___internal__method, tableView, row);
}
// Autogenerated method: FileBrowserTableView.HandleDidSelectRowEvent
void GlobalNamespace::FileBrowserTableView::HandleDidSelectRowEvent(HMUI::TableView* tableView, int row) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableView::HandleDidSelectRowEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidSelectRowEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tableView), ::il2cpp_utils::ExtractType(row)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tableView, row);
}
// Autogenerated method: FileBrowserTableView.SelectAndScrollRow
void GlobalNamespace::FileBrowserTableView::SelectAndScrollRow(int row) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableView::SelectAndScrollRow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectAndScrollRow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(row)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, row);
}
// Autogenerated method: FileBrowserTableView.ClearSelection
void GlobalNamespace::FileBrowserTableView::ClearSelection(bool animated, bool scrollToRow0) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FileBrowserTableView::ClearSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animated), ::il2cpp_utils::ExtractType(scrollToRow0)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated, scrollToRow0);
}
// Writing MetadataGetter for method: FileBrowserTableView::add_didSelectRow
// Il2CppName: add_didSelectRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileBrowserTableView::*)(System::Action_2<GlobalNamespace::FileBrowserTableView*, GlobalNamespace::FileBrowserItem*>*)>(&FileBrowserTableView::add_didSelectRow)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableView*), "add_didSelectRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::FileBrowserTableView*, GlobalNamespace::FileBrowserItem*>*>()});
  }
};
// Writing MetadataGetter for method: FileBrowserTableView::remove_didSelectRow
// Il2CppName: remove_didSelectRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileBrowserTableView::*)(System::Action_2<GlobalNamespace::FileBrowserTableView*, GlobalNamespace::FileBrowserItem*>*)>(&FileBrowserTableView::remove_didSelectRow)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableView*), "remove_didSelectRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::FileBrowserTableView*, GlobalNamespace::FileBrowserItem*>*>()});
  }
};
// Writing MetadataGetter for method: FileBrowserTableView::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileBrowserTableView::*)(::Array<GlobalNamespace::FileBrowserItem*>*)>(&FileBrowserTableView::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableView*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::FileBrowserItem*>*>()});
  }
};
// Writing MetadataGetter for method: FileBrowserTableView::SetItems
// Il2CppName: SetItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileBrowserTableView::*)(::Array<GlobalNamespace::FileBrowserItem*>*)>(&FileBrowserTableView::SetItems)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableView*), "SetItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<GlobalNamespace::FileBrowserItem*>*>()});
  }
};
// Writing MetadataGetter for method: FileBrowserTableView::SelectAndScrollRowToItemWithPath
// Il2CppName: SelectAndScrollRowToItemWithPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FileBrowserTableView::*)(::Il2CppString*)>(&FileBrowserTableView::SelectAndScrollRowToItemWithPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableView*), "SelectAndScrollRowToItemWithPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: FileBrowserTableView::CellSize
// Il2CppName: CellSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (FileBrowserTableView::*)()>(&FileBrowserTableView::CellSize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableView*), "CellSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileBrowserTableView::NumberOfCells
// Il2CppName: NumberOfCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FileBrowserTableView::*)()>(&FileBrowserTableView::NumberOfCells)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableView*), "NumberOfCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FileBrowserTableView::CellForIdx
// Il2CppName: CellForIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::TableCell* (FileBrowserTableView::*)(HMUI::TableView*, int)>(&FileBrowserTableView::CellForIdx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableView*), "CellForIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::TableView*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FileBrowserTableView::HandleDidSelectRowEvent
// Il2CppName: HandleDidSelectRowEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileBrowserTableView::*)(HMUI::TableView*, int)>(&FileBrowserTableView::HandleDidSelectRowEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableView*), "HandleDidSelectRowEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::TableView*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FileBrowserTableView::SelectAndScrollRow
// Il2CppName: SelectAndScrollRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileBrowserTableView::*)(int)>(&FileBrowserTableView::SelectAndScrollRow)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableView*), "SelectAndScrollRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FileBrowserTableView::ClearSelection
// Il2CppName: ClearSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileBrowserTableView::*)(bool, bool)>(&FileBrowserTableView::ClearSelection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableView*), "ClearSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: FileBrowserTableView::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileBrowserTableView::*)()>(&FileBrowserTableView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FileBrowserTableView::*)()>(&FileBrowserTableView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FileBrowserTableView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ArcadeFlowCoordinator
#include "GlobalNamespace/ArcadeFlowCoordinator.hpp"
// Including type: ArcadeFlowCoordinator/<>c__DisplayClass22_0
#include "GlobalNamespace/ArcadeFlowCoordinator_--c__DisplayClass22_0.hpp"
// Including type: ArcadeFlowCoordinator/<>c__DisplayClass26_0
#include "GlobalNamespace/ArcadeFlowCoordinator_--c__DisplayClass26_0.hpp"
// Including type: LocalLeaderboardsModel
#include "GlobalNamespace/LocalLeaderboardsModel.hpp"
// Including type: MenuLightsPresetSO
#include "GlobalNamespace/MenuLightsPresetSO.hpp"
// Including type: TabBarViewController
#include "GlobalNamespace/TabBarViewController.hpp"
// Including type: LeaderboardViewController
#include "GlobalNamespace/LeaderboardViewController.hpp"
// Including type: MenuLightsManager
#include "GlobalNamespace/MenuLightsManager.hpp"
// Including type: ResultsViewController
#include "GlobalNamespace/ResultsViewController.hpp"
// Including type: LocalLeaderboardViewController
#include "GlobalNamespace/LocalLeaderboardViewController.hpp"
// Including type: EnterPlayerGuestNameViewController
#include "GlobalNamespace/EnterPlayerGuestNameViewController.hpp"
// Including type: MenuTransitionsHelper
#include "GlobalNamespace/MenuTransitionsHelper.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ArcadeFlowCoordinator.WillScoreGoToLeaderboard
bool GlobalNamespace::ArcadeFlowCoordinator::WillScoreGoToLeaderboard(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, bool practice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::WillScoreGoToLeaderboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WillScoreGoToLeaderboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(practice)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, levelCompletionResults, difficultyBeatmap, practice);
}
// Autogenerated method: ArcadeFlowCoordinator.ProcessScore
bool GlobalNamespace::ArcadeFlowCoordinator::ProcessScore(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, bool practice, ::Il2CppString* playerName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::ProcessScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(practice), ::il2cpp_utils::ExtractType(playerName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, levelCompletionResults, difficultyBeatmap, practice, playerName);
}
// Autogenerated method: ArcadeFlowCoordinator.HandleResultsViewControllerContinueButtonPressed
void GlobalNamespace::ArcadeFlowCoordinator::HandleResultsViewControllerContinueButtonPressed(GlobalNamespace::ResultsViewController* resultsViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::HandleResultsViewControllerContinueButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleResultsViewControllerContinueButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, resultsViewController);
}
// Autogenerated method: ArcadeFlowCoordinator.HandleResultsViewControllerRestartButtonPressed
void GlobalNamespace::ArcadeFlowCoordinator::HandleResultsViewControllerRestartButtonPressed(GlobalNamespace::ResultsViewController* resultsViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::HandleResultsViewControllerRestartButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleResultsViewControllerRestartButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, resultsViewController);
}
// Autogenerated method: ArcadeFlowCoordinator.HandleHowToPlayViewControllerDidFinish
void GlobalNamespace::ArcadeFlowCoordinator::HandleHowToPlayViewControllerDidFinish(GlobalNamespace::HowToPlayViewController::HowToPlayOptions howToPlayOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::HandleHowToPlayViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHowToPlayViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(howToPlayOptions)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, howToPlayOptions);
}
// Autogenerated method: ArcadeFlowCoordinator.HandleHowToPlayTabSelected
void GlobalNamespace::ArcadeFlowCoordinator::HandleHowToPlayTabSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::HandleHowToPlayTabSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHowToPlayTabSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ArcadeFlowCoordinator.<SinglePlayerLevelSelectionFlowCoordinatorDidActivate>b__20_0
void GlobalNamespace::ArcadeFlowCoordinator::$SinglePlayerLevelSelectionFlowCoordinatorDidActivate$b__20_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::<SinglePlayerLevelSelectionFlowCoordinatorDidActivate>b__20_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SinglePlayerLevelSelectionFlowCoordinatorDidActivate>b__20_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ArcadeFlowCoordinator.<HandleHowToPlayTabSelected>b__28_0
void GlobalNamespace::ArcadeFlowCoordinator::$HandleHowToPlayTabSelected$b__28_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::<HandleHowToPlayTabSelected>b__28_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleHowToPlayTabSelected>b__28_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ArcadeFlowCoordinator.get_gameMode
::Il2CppString* GlobalNamespace::ArcadeFlowCoordinator::get_gameMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::get_gameMode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: ArcadeFlowCoordinator.get_leaderboardViewController
GlobalNamespace::LeaderboardViewController* GlobalNamespace::ArcadeFlowCoordinator::get_leaderboardViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::get_leaderboardViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leaderboardViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LeaderboardViewController*, false>(this, ___internal__method);
}
// Autogenerated method: ArcadeFlowCoordinator.get_initialTopScreenViewController
HMUI::ViewController* GlobalNamespace::ArcadeFlowCoordinator::get_initialTopScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::get_initialTopScreenViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initialTopScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: ArcadeFlowCoordinator.get_showPlayerStatsInDetailView
bool GlobalNamespace::ArcadeFlowCoordinator::get_showPlayerStatsInDetailView() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::get_showPlayerStatsInDetailView");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_showPlayerStatsInDetailView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ArcadeFlowCoordinator.get_hidePacksIfOneOrNone
bool GlobalNamespace::ArcadeFlowCoordinator::get_hidePacksIfOneOrNone() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::get_hidePacksIfOneOrNone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hidePacksIfOneOrNone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ArcadeFlowCoordinator.SinglePlayerLevelSelectionFlowCoordinatorDidActivate
void GlobalNamespace::ArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate(bool firstActivation, bool addedToHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SinglePlayerLevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy);
}
// Autogenerated method: ArcadeFlowCoordinator.SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
void GlobalNamespace::ArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate(bool removedFromHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy);
}
// Autogenerated method: ArcadeFlowCoordinator.ProcessLevelCompletionResultsAfterLevelDidFinish
void GlobalNamespace::ArcadeFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers, bool practice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessLevelCompletionResultsAfterLevelDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(practice)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelCompletionResults, difficultyBeatmap, gameplayModifiers, practice);
}
// Writing MetadataGetter for method: ArcadeFlowCoordinator::WillScoreGoToLeaderboard
// Il2CppName: WillScoreGoToLeaderboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ArcadeFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, GlobalNamespace::IDifficultyBeatmap*, bool)>(&ArcadeFlowCoordinator::WillScoreGoToLeaderboard)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "WillScoreGoToLeaderboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::ProcessScore
// Il2CppName: ProcessScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ArcadeFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, GlobalNamespace::IDifficultyBeatmap*, bool, ::Il2CppString*)>(&ArcadeFlowCoordinator::ProcessScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "ProcessScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::HandleResultsViewControllerContinueButtonPressed
// Il2CppName: HandleResultsViewControllerContinueButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::*)(GlobalNamespace::ResultsViewController*)>(&ArcadeFlowCoordinator::HandleResultsViewControllerContinueButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "HandleResultsViewControllerContinueButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::HandleResultsViewControllerRestartButtonPressed
// Il2CppName: HandleResultsViewControllerRestartButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::*)(GlobalNamespace::ResultsViewController*)>(&ArcadeFlowCoordinator::HandleResultsViewControllerRestartButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "HandleResultsViewControllerRestartButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::HandleHowToPlayViewControllerDidFinish
// Il2CppName: HandleHowToPlayViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::*)(GlobalNamespace::HowToPlayViewController::HowToPlayOptions)>(&ArcadeFlowCoordinator::HandleHowToPlayViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "HandleHowToPlayViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::HowToPlayViewController::HowToPlayOptions>()});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::HandleHowToPlayTabSelected
// Il2CppName: HandleHowToPlayTabSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::*)()>(&ArcadeFlowCoordinator::HandleHowToPlayTabSelected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "HandleHowToPlayTabSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::$SinglePlayerLevelSelectionFlowCoordinatorDidActivate$b__20_0
// Il2CppName: <SinglePlayerLevelSelectionFlowCoordinatorDidActivate>b__20_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::*)()>(&ArcadeFlowCoordinator::$SinglePlayerLevelSelectionFlowCoordinatorDidActivate$b__20_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "<SinglePlayerLevelSelectionFlowCoordinatorDidActivate>b__20_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::$HandleHowToPlayTabSelected$b__28_0
// Il2CppName: <HandleHowToPlayTabSelected>b__28_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::*)()>(&ArcadeFlowCoordinator::$HandleHowToPlayTabSelected$b__28_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "<HandleHowToPlayTabSelected>b__28_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::get_gameMode
// Il2CppName: get_gameMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ArcadeFlowCoordinator::*)()>(&ArcadeFlowCoordinator::get_gameMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "get_gameMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::get_leaderboardViewController
// Il2CppName: get_leaderboardViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LeaderboardViewController* (ArcadeFlowCoordinator::*)()>(&ArcadeFlowCoordinator::get_leaderboardViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "get_leaderboardViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::get_initialTopScreenViewController
// Il2CppName: get_initialTopScreenViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::ViewController* (ArcadeFlowCoordinator::*)()>(&ArcadeFlowCoordinator::get_initialTopScreenViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "get_initialTopScreenViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::get_showPlayerStatsInDetailView
// Il2CppName: get_showPlayerStatsInDetailView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ArcadeFlowCoordinator::*)()>(&ArcadeFlowCoordinator::get_showPlayerStatsInDetailView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "get_showPlayerStatsInDetailView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::get_hidePacksIfOneOrNone
// Il2CppName: get_hidePacksIfOneOrNone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ArcadeFlowCoordinator::*)()>(&ArcadeFlowCoordinator::get_hidePacksIfOneOrNone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "get_hidePacksIfOneOrNone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate
// Il2CppName: SinglePlayerLevelSelectionFlowCoordinatorDidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::*)(bool, bool)>(&ArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "SinglePlayerLevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
// Il2CppName: SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::*)(bool)>(&ArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish
// Il2CppName: ProcessLevelCompletionResultsAfterLevelDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*, bool)>(&ArcadeFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), "ProcessLevelCompletionResultsAfterLevelDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::*)()>(&ArcadeFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::*)()>(&ArcadeFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ArcadeFlowCoordinator/<>c__DisplayClass22_0
#include "GlobalNamespace/ArcadeFlowCoordinator_--c__DisplayClass22_0.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: EnterPlayerGuestNameViewController
#include "GlobalNamespace/EnterPlayerGuestNameViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ArcadeFlowCoordinator/<>c__DisplayClass22_0.<ProcessLevelCompletionResultsAfterLevelDidFinish>b__0
void GlobalNamespace::ArcadeFlowCoordinator::$$c__DisplayClass22_0::$ProcessLevelCompletionResultsAfterLevelDidFinish$b__0(GlobalNamespace::EnterPlayerGuestNameViewController* viewController, ::Il2CppString* playerName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::$$c__DisplayClass22_0::<ProcessLevelCompletionResultsAfterLevelDidFinish>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ProcessLevelCompletionResultsAfterLevelDidFinish>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(playerName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, playerName);
}
// Writing MetadataGetter for method: ArcadeFlowCoordinator::$$c__DisplayClass22_0::$ProcessLevelCompletionResultsAfterLevelDidFinish$b__0
// Il2CppName: <ProcessLevelCompletionResultsAfterLevelDidFinish>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::$$c__DisplayClass22_0::*)(GlobalNamespace::EnterPlayerGuestNameViewController*, ::Il2CppString*)>(&ArcadeFlowCoordinator::$$c__DisplayClass22_0::$ProcessLevelCompletionResultsAfterLevelDidFinish$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator::$$c__DisplayClass22_0*), "<ProcessLevelCompletionResultsAfterLevelDidFinish>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EnterPlayerGuestNameViewController*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::$$c__DisplayClass22_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::$$c__DisplayClass22_0::*)()>(&ArcadeFlowCoordinator::$$c__DisplayClass22_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator::$$c__DisplayClass22_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::$$c__DisplayClass22_0::*)()>(&ArcadeFlowCoordinator::$$c__DisplayClass22_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator::$$c__DisplayClass22_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ArcadeFlowCoordinator/<>c__DisplayClass26_0
#include "GlobalNamespace/ArcadeFlowCoordinator_--c__DisplayClass26_0.hpp"
// Including type: ResultsViewController
#include "GlobalNamespace/ResultsViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ArcadeFlowCoordinator/<>c__DisplayClass26_0.<HandleResultsViewControllerRestartButtonPressed>b__0
void GlobalNamespace::ArcadeFlowCoordinator::$$c__DisplayClass26_0::$HandleResultsViewControllerRestartButtonPressed$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ArcadeFlowCoordinator::$$c__DisplayClass26_0::<HandleResultsViewControllerRestartButtonPressed>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleResultsViewControllerRestartButtonPressed>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ArcadeFlowCoordinator::$$c__DisplayClass26_0::$HandleResultsViewControllerRestartButtonPressed$b__0
// Il2CppName: <HandleResultsViewControllerRestartButtonPressed>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::$$c__DisplayClass26_0::*)()>(&ArcadeFlowCoordinator::$$c__DisplayClass26_0::$HandleResultsViewControllerRestartButtonPressed$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator::$$c__DisplayClass26_0*), "<HandleResultsViewControllerRestartButtonPressed>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ArcadeFlowCoordinator::$$c__DisplayClass26_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::$$c__DisplayClass26_0::*)()>(&ArcadeFlowCoordinator::$$c__DisplayClass26_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator::$$c__DisplayClass26_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArcadeFlowCoordinator::$$c__DisplayClass26_0::*)()>(&ArcadeFlowCoordinator::$$c__DisplayClass26_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArcadeFlowCoordinator::$$c__DisplayClass26_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CampaignFlowCoordinator
#include "GlobalNamespace/CampaignFlowCoordinator.hpp"
// Including type: CampaignFlowCoordinator/<>c__DisplayClass20_0
#include "GlobalNamespace/CampaignFlowCoordinator_--c__DisplayClass20_0.hpp"
// Including type: CampaignFlowCoordinator/<>c__DisplayClass22_0
#include "GlobalNamespace/CampaignFlowCoordinator_--c__DisplayClass22_0.hpp"
// Including type: MenuLightsPresetSO
#include "GlobalNamespace/MenuLightsPresetSO.hpp"
// Including type: MenuTransitionsHelper
#include "GlobalNamespace/MenuTransitionsHelper.hpp"
// Including type: MenuLightsManager
#include "GlobalNamespace/MenuLightsManager.hpp"
// Including type: MissionSelectionNavigationController
#include "GlobalNamespace/MissionSelectionNavigationController.hpp"
// Including type: MissionResultsViewController
#include "GlobalNamespace/MissionResultsViewController.hpp"
// Including type: GameplaySetupViewController
#include "GlobalNamespace/GameplaySetupViewController.hpp"
// Including type: MissionHelpViewController
#include "GlobalNamespace/MissionHelpViewController.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: CampaignProgressModel
#include "GlobalNamespace/CampaignProgressModel.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: MissionLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/MissionLevelScenesTransitionSetupDataSO.hpp"
// Including type: MissionCompletionResults
#include "GlobalNamespace/MissionCompletionResults.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CampaignFlowCoordinator.add_didFinishEvent
void GlobalNamespace::CampaignFlowCoordinator::add_didFinishEvent(System::Action_1<GlobalNamespace::CampaignFlowCoordinator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::add_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CampaignFlowCoordinator.remove_didFinishEvent
void GlobalNamespace::CampaignFlowCoordinator::remove_didFinishEvent(System::Action_1<GlobalNamespace::CampaignFlowCoordinator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::remove_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CampaignFlowCoordinator.HandleMissionSelectionNavigationControllerDidPressPlayButton
void GlobalNamespace::CampaignFlowCoordinator::HandleMissionSelectionNavigationControllerDidPressPlayButton(GlobalNamespace::MissionSelectionNavigationController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::HandleMissionSelectionNavigationControllerDidPressPlayButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionSelectionNavigationControllerDidPressPlayButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: CampaignFlowCoordinator.HandleMissionHelpViewControllerDidFinish
void GlobalNamespace::CampaignFlowCoordinator::HandleMissionHelpViewControllerDidFinish(GlobalNamespace::MissionHelpViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::HandleMissionHelpViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionHelpViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: CampaignFlowCoordinator.HandleMissionResultsViewControllerContinueButtonPressed
void GlobalNamespace::CampaignFlowCoordinator::HandleMissionResultsViewControllerContinueButtonPressed(GlobalNamespace::MissionResultsViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::HandleMissionResultsViewControllerContinueButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionResultsViewControllerContinueButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: CampaignFlowCoordinator.HandleMissionResultsViewControllerRetryButtonPressed
void GlobalNamespace::CampaignFlowCoordinator::HandleMissionResultsViewControllerRetryButtonPressed(GlobalNamespace::MissionResultsViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::HandleMissionResultsViewControllerRetryButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionResultsViewControllerRetryButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: CampaignFlowCoordinator.StartLevel
void GlobalNamespace::CampaignFlowCoordinator::StartLevel(System::Action* beforeSceneSwitchCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::StartLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beforeSceneSwitchCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beforeSceneSwitchCallback);
}
// Autogenerated method: CampaignFlowCoordinator.HandleMissionLevelSceneDidFinish
void GlobalNamespace::CampaignFlowCoordinator::HandleMissionLevelSceneDidFinish(GlobalNamespace::MissionLevelScenesTransitionSetupDataSO* missionLevelScenesTransitionSetupData, GlobalNamespace::MissionCompletionResults* missionCompletionResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::HandleMissionLevelSceneDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionLevelSceneDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionLevelScenesTransitionSetupData), ::il2cpp_utils::ExtractType(missionCompletionResults)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, missionLevelScenesTransitionSetupData, missionCompletionResults);
}
// Autogenerated method: CampaignFlowCoordinator.<HandleMissionResultsViewControllerContinueButtonPressed>b__21_0
void GlobalNamespace::CampaignFlowCoordinator::$HandleMissionResultsViewControllerContinueButtonPressed$b__21_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::<HandleMissionResultsViewControllerContinueButtonPressed>b__21_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleMissionResultsViewControllerContinueButtonPressed>b__21_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CampaignFlowCoordinator.<HandleMissionResultsViewControllerContinueButtonPressed>b__21_1
void GlobalNamespace::CampaignFlowCoordinator::$HandleMissionResultsViewControllerContinueButtonPressed$b__21_1(bool presented) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::<HandleMissionResultsViewControllerContinueButtonPressed>b__21_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleMissionResultsViewControllerContinueButtonPressed>b__21_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(presented)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, presented);
}
// Autogenerated method: CampaignFlowCoordinator.DidActivate
void GlobalNamespace::CampaignFlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: CampaignFlowCoordinator.DidDeactivate
void GlobalNamespace::CampaignFlowCoordinator::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: CampaignFlowCoordinator.TopViewControllerWillChange
void GlobalNamespace::CampaignFlowCoordinator::TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::TopViewControllerWillChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TopViewControllerWillChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldViewController), ::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldViewController, newViewController, animationType);
}
// Autogenerated method: CampaignFlowCoordinator.BackButtonWasPressed
void GlobalNamespace::CampaignFlowCoordinator::BackButtonWasPressed(HMUI::ViewController* topViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::BackButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(topViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, topViewController);
}
// Writing MetadataGetter for method: CampaignFlowCoordinator::add_didFinishEvent
// Il2CppName: add_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)(System::Action_1<GlobalNamespace::CampaignFlowCoordinator*>*)>(&CampaignFlowCoordinator::add_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), "add_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::CampaignFlowCoordinator*>*>()});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::remove_didFinishEvent
// Il2CppName: remove_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)(System::Action_1<GlobalNamespace::CampaignFlowCoordinator*>*)>(&CampaignFlowCoordinator::remove_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), "remove_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::CampaignFlowCoordinator*>*>()});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::HandleMissionSelectionNavigationControllerDidPressPlayButton
// Il2CppName: HandleMissionSelectionNavigationControllerDidPressPlayButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)(GlobalNamespace::MissionSelectionNavigationController*)>(&CampaignFlowCoordinator::HandleMissionSelectionNavigationControllerDidPressPlayButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), "HandleMissionSelectionNavigationControllerDidPressPlayButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionSelectionNavigationController*>()});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::HandleMissionHelpViewControllerDidFinish
// Il2CppName: HandleMissionHelpViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)(GlobalNamespace::MissionHelpViewController*)>(&CampaignFlowCoordinator::HandleMissionHelpViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), "HandleMissionHelpViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionHelpViewController*>()});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::HandleMissionResultsViewControllerContinueButtonPressed
// Il2CppName: HandleMissionResultsViewControllerContinueButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)(GlobalNamespace::MissionResultsViewController*)>(&CampaignFlowCoordinator::HandleMissionResultsViewControllerContinueButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), "HandleMissionResultsViewControllerContinueButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::HandleMissionResultsViewControllerRetryButtonPressed
// Il2CppName: HandleMissionResultsViewControllerRetryButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)(GlobalNamespace::MissionResultsViewController*)>(&CampaignFlowCoordinator::HandleMissionResultsViewControllerRetryButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), "HandleMissionResultsViewControllerRetryButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::StartLevel
// Il2CppName: StartLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)(System::Action*)>(&CampaignFlowCoordinator::StartLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), "StartLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::HandleMissionLevelSceneDidFinish
// Il2CppName: HandleMissionLevelSceneDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)(GlobalNamespace::MissionLevelScenesTransitionSetupDataSO*, GlobalNamespace::MissionCompletionResults*)>(&CampaignFlowCoordinator::HandleMissionLevelSceneDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), "HandleMissionLevelSceneDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionLevelScenesTransitionSetupDataSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionCompletionResults*>()});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::$HandleMissionResultsViewControllerContinueButtonPressed$b__21_0
// Il2CppName: <HandleMissionResultsViewControllerContinueButtonPressed>b__21_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)()>(&CampaignFlowCoordinator::$HandleMissionResultsViewControllerContinueButtonPressed$b__21_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), "<HandleMissionResultsViewControllerContinueButtonPressed>b__21_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::$HandleMissionResultsViewControllerContinueButtonPressed$b__21_1
// Il2CppName: <HandleMissionResultsViewControllerContinueButtonPressed>b__21_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)(bool)>(&CampaignFlowCoordinator::$HandleMissionResultsViewControllerContinueButtonPressed$b__21_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), "<HandleMissionResultsViewControllerContinueButtonPressed>b__21_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)(bool, bool, bool)>(&CampaignFlowCoordinator::DidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)(bool, bool)>(&CampaignFlowCoordinator::DidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::TopViewControllerWillChange
// Il2CppName: TopViewControllerWillChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&CampaignFlowCoordinator::TopViewControllerWillChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), "TopViewControllerWillChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController::AnimationType>()});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::BackButtonWasPressed
// Il2CppName: BackButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)(HMUI::ViewController*)>(&CampaignFlowCoordinator::BackButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), "BackButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>()});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)()>(&CampaignFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::*)()>(&CampaignFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CampaignFlowCoordinator/<>c__DisplayClass20_0
#include "GlobalNamespace/CampaignFlowCoordinator_--c__DisplayClass20_0.hpp"
// Including type: MissionHelpViewController
#include "GlobalNamespace/MissionHelpViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CampaignFlowCoordinator/<>c__DisplayClass20_0.<HandleMissionHelpViewControllerDidFinish>b__0
void GlobalNamespace::CampaignFlowCoordinator::$$c__DisplayClass20_0::$HandleMissionHelpViewControllerDidFinish$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::$$c__DisplayClass20_0::<HandleMissionHelpViewControllerDidFinish>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleMissionHelpViewControllerDidFinish>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CampaignFlowCoordinator::$$c__DisplayClass20_0::$HandleMissionHelpViewControllerDidFinish$b__0
// Il2CppName: <HandleMissionHelpViewControllerDidFinish>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::$$c__DisplayClass20_0::*)()>(&CampaignFlowCoordinator::$$c__DisplayClass20_0::$HandleMissionHelpViewControllerDidFinish$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator::$$c__DisplayClass20_0*), "<HandleMissionHelpViewControllerDidFinish>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::$$c__DisplayClass20_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::$$c__DisplayClass20_0::*)()>(&CampaignFlowCoordinator::$$c__DisplayClass20_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator::$$c__DisplayClass20_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::$$c__DisplayClass20_0::*)()>(&CampaignFlowCoordinator::$$c__DisplayClass20_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator::$$c__DisplayClass20_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CampaignFlowCoordinator/<>c__DisplayClass22_0
#include "GlobalNamespace/CampaignFlowCoordinator_--c__DisplayClass22_0.hpp"
// Including type: MissionResultsViewController
#include "GlobalNamespace/MissionResultsViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CampaignFlowCoordinator/<>c__DisplayClass22_0.<HandleMissionResultsViewControllerRetryButtonPressed>b__0
void GlobalNamespace::CampaignFlowCoordinator::$$c__DisplayClass22_0::$HandleMissionResultsViewControllerRetryButtonPressed$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CampaignFlowCoordinator::$$c__DisplayClass22_0::<HandleMissionResultsViewControllerRetryButtonPressed>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleMissionResultsViewControllerRetryButtonPressed>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CampaignFlowCoordinator::$$c__DisplayClass22_0::$HandleMissionResultsViewControllerRetryButtonPressed$b__0
// Il2CppName: <HandleMissionResultsViewControllerRetryButtonPressed>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::$$c__DisplayClass22_0::*)()>(&CampaignFlowCoordinator::$$c__DisplayClass22_0::$HandleMissionResultsViewControllerRetryButtonPressed$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator::$$c__DisplayClass22_0*), "<HandleMissionResultsViewControllerRetryButtonPressed>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CampaignFlowCoordinator::$$c__DisplayClass22_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::$$c__DisplayClass22_0::*)()>(&CampaignFlowCoordinator::$$c__DisplayClass22_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator::$$c__DisplayClass22_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CampaignFlowCoordinator::$$c__DisplayClass22_0::*)()>(&CampaignFlowCoordinator::$$c__DisplayClass22_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CampaignFlowCoordinator::$$c__DisplayClass22_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EditAvatarFlowCoordinator
#include "GlobalNamespace/EditAvatarFlowCoordinator.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: AvatarVisualController
#include "GlobalNamespace/AvatarVisualController.hpp"
// Including type: AvatarTweenController
#include "GlobalNamespace/AvatarTweenController.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: EditColorController
#include "GlobalNamespace/EditColorController.hpp"
// Including type: AvatarDataModel
#include "GlobalNamespace/AvatarDataModel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: EditAvatarFlowCoordinator.add_didFinishEvent
void GlobalNamespace::EditAvatarFlowCoordinator::add_didFinishEvent(System::Action_2<GlobalNamespace::EditAvatarFlowCoordinator*, GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditAvatarFlowCoordinator::add_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EditAvatarFlowCoordinator.remove_didFinishEvent
void GlobalNamespace::EditAvatarFlowCoordinator::remove_didFinishEvent(System::Action_2<GlobalNamespace::EditAvatarFlowCoordinator*, GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditAvatarFlowCoordinator::remove_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: EditAvatarFlowCoordinator.Setup
void GlobalNamespace::EditAvatarFlowCoordinator::Setup(GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType editAvatarType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditAvatarFlowCoordinator::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(editAvatarType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, editAvatarType);
}
// Autogenerated method: EditAvatarFlowCoordinator.HandleEditAvatarViewControllerDidRequestColorChange
void GlobalNamespace::EditAvatarFlowCoordinator::HandleEditAvatarViewControllerDidRequestColorChange(System::Action_1<UnityEngine::Color>* colorCallback, UnityEngine::Color currentColor, GlobalNamespace::EditAvatarViewController::AvatarEditPart editPart, int uvSegment) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditAvatarFlowCoordinator::HandleEditAvatarViewControllerDidRequestColorChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEditAvatarViewControllerDidRequestColorChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorCallback), ::il2cpp_utils::ExtractType(currentColor), ::il2cpp_utils::ExtractType(editPart), ::il2cpp_utils::ExtractType(uvSegment)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, colorCallback, currentColor, editPart, uvSegment);
}
// Autogenerated method: EditAvatarFlowCoordinator.HandleEditAvatarViewControllerChangedAvatarPart
void GlobalNamespace::EditAvatarFlowCoordinator::HandleEditAvatarViewControllerChangedAvatarPart(GlobalNamespace::EditAvatarViewController::AvatarEditPart avatarPart) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditAvatarFlowCoordinator::HandleEditAvatarViewControllerChangedAvatarPart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEditAvatarViewControllerChangedAvatarPart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avatarPart)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, avatarPart);
}
// Autogenerated method: EditAvatarFlowCoordinator.HandleEditAvatarViewControllerDidFinished
void GlobalNamespace::EditAvatarFlowCoordinator::HandleEditAvatarViewControllerDidFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditAvatarFlowCoordinator::HandleEditAvatarViewControllerDidFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEditAvatarViewControllerDidFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: EditAvatarFlowCoordinator.HandleEditColorViewControllerDidChangedColor
void GlobalNamespace::EditAvatarFlowCoordinator::HandleEditColorViewControllerDidChangedColor(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditAvatarFlowCoordinator::HandleEditColorViewControllerDidChangedColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEditColorViewControllerDidChangedColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: EditAvatarFlowCoordinator.HandleEditColorViewControllerDidFinish
void GlobalNamespace::EditAvatarFlowCoordinator::HandleEditColorViewControllerDidFinish(bool apply) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditAvatarFlowCoordinator::HandleEditColorViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEditColorViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(apply)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, apply);
}
// Autogenerated method: EditAvatarFlowCoordinator.DidActivate
void GlobalNamespace::EditAvatarFlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditAvatarFlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: EditAvatarFlowCoordinator.DidDeactivate
void GlobalNamespace::EditAvatarFlowCoordinator::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditAvatarFlowCoordinator::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Writing MetadataGetter for method: EditAvatarFlowCoordinator::add_didFinishEvent
// Il2CppName: add_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditAvatarFlowCoordinator::*)(System::Action_2<GlobalNamespace::EditAvatarFlowCoordinator*, GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType>*)>(&EditAvatarFlowCoordinator::add_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditAvatarFlowCoordinator*), "add_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::EditAvatarFlowCoordinator*, GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType>*>()});
  }
};
// Writing MetadataGetter for method: EditAvatarFlowCoordinator::remove_didFinishEvent
// Il2CppName: remove_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditAvatarFlowCoordinator::*)(System::Action_2<GlobalNamespace::EditAvatarFlowCoordinator*, GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType>*)>(&EditAvatarFlowCoordinator::remove_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditAvatarFlowCoordinator*), "remove_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::EditAvatarFlowCoordinator*, GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType>*>()});
  }
};
// Writing MetadataGetter for method: EditAvatarFlowCoordinator::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditAvatarFlowCoordinator::*)(GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType)>(&EditAvatarFlowCoordinator::Setup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditAvatarFlowCoordinator*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType>()});
  }
};
// Writing MetadataGetter for method: EditAvatarFlowCoordinator::HandleEditAvatarViewControllerDidRequestColorChange
// Il2CppName: HandleEditAvatarViewControllerDidRequestColorChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditAvatarFlowCoordinator::*)(System::Action_1<UnityEngine::Color>*, UnityEngine::Color, GlobalNamespace::EditAvatarViewController::AvatarEditPart, int)>(&EditAvatarFlowCoordinator::HandleEditAvatarViewControllerDidRequestColorChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditAvatarFlowCoordinator*), "HandleEditAvatarViewControllerDidRequestColorChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Color>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EditAvatarViewController::AvatarEditPart>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: EditAvatarFlowCoordinator::HandleEditAvatarViewControllerChangedAvatarPart
// Il2CppName: HandleEditAvatarViewControllerChangedAvatarPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditAvatarFlowCoordinator::*)(GlobalNamespace::EditAvatarViewController::AvatarEditPart)>(&EditAvatarFlowCoordinator::HandleEditAvatarViewControllerChangedAvatarPart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditAvatarFlowCoordinator*), "HandleEditAvatarViewControllerChangedAvatarPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EditAvatarViewController::AvatarEditPart>()});
  }
};
// Writing MetadataGetter for method: EditAvatarFlowCoordinator::HandleEditAvatarViewControllerDidFinished
// Il2CppName: HandleEditAvatarViewControllerDidFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditAvatarFlowCoordinator::*)()>(&EditAvatarFlowCoordinator::HandleEditAvatarViewControllerDidFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditAvatarFlowCoordinator*), "HandleEditAvatarViewControllerDidFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: EditAvatarFlowCoordinator::HandleEditColorViewControllerDidChangedColor
// Il2CppName: HandleEditColorViewControllerDidChangedColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditAvatarFlowCoordinator::*)(UnityEngine::Color)>(&EditAvatarFlowCoordinator::HandleEditColorViewControllerDidChangedColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditAvatarFlowCoordinator*), "HandleEditColorViewControllerDidChangedColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: EditAvatarFlowCoordinator::HandleEditColorViewControllerDidFinish
// Il2CppName: HandleEditColorViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditAvatarFlowCoordinator::*)(bool)>(&EditAvatarFlowCoordinator::HandleEditColorViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditAvatarFlowCoordinator*), "HandleEditColorViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: EditAvatarFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditAvatarFlowCoordinator::*)(bool, bool, bool)>(&EditAvatarFlowCoordinator::DidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditAvatarFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: EditAvatarFlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditAvatarFlowCoordinator::*)(bool, bool)>(&EditAvatarFlowCoordinator::DidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditAvatarFlowCoordinator*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: EditAvatarFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditAvatarFlowCoordinator::*)()>(&EditAvatarFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditAvatarFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (EditAvatarFlowCoordinator::*)()>(&EditAvatarFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(EditAvatarFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: EditAvatarFlowCoordinator/EditAvatarType
#include "GlobalNamespace/EditAvatarFlowCoordinator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public EditAvatarFlowCoordinator/EditAvatarType Create
GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType::_get_Create() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType::_get_Create");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType>("", "EditAvatarFlowCoordinator/EditAvatarType", "Create"));
}
// Autogenerated static field setter
// Set static field: static public EditAvatarFlowCoordinator/EditAvatarType Create
void GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType::_set_Create(GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType::_set_Create");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EditAvatarFlowCoordinator/EditAvatarType", "Create", value));
}
// Autogenerated static field getter
// Get static field: static public EditAvatarFlowCoordinator/EditAvatarType Edit
GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType::_get_Edit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType::_get_Edit");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType>("", "EditAvatarFlowCoordinator/EditAvatarType", "Edit"));
}
// Autogenerated static field setter
// Set static field: static public EditAvatarFlowCoordinator/EditAvatarType Edit
void GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType::_set_Edit(GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType::_set_Edit");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "EditAvatarFlowCoordinator/EditAvatarType", "Edit", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HealthWarningFlowCoordinator
#include "GlobalNamespace/HealthWarningFlowCoordinator.hpp"
// Including type: HealthWarningFlowCoordinator/InitData
#include "GlobalNamespace/HealthWarningFlowCoordinator_InitData.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: DlcPromoExperimentModel
#include "GlobalNamespace/DlcPromoExperimentModel.hpp"
// Including type: EulaViewController
#include "GlobalNamespace/EulaViewController.hpp"
// Including type: HealthWarningViewController
#include "GlobalNamespace/HealthWarningViewController.hpp"
// Including type: PrivacyPolicyViewController
#include "GlobalNamespace/PrivacyPolicyViewController.hpp"
// Including type: SelectLanguageViewController
#include "GlobalNamespace/SelectLanguageViewController.hpp"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
// Including type: AppInitScenesTransitionSetupDataContainerSO
#include "GlobalNamespace/AppInitScenesTransitionSetupDataContainerSO.hpp"
// Including type: SimpleDialogPromptViewController
#include "GlobalNamespace/SimpleDialogPromptViewController.hpp"
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HealthWarningFlowCoordinator.GetEulaOrHealthWarningViewController
HMUI::ViewController* GlobalNamespace::HealthWarningFlowCoordinator::GetEulaOrHealthWarningViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthWarningFlowCoordinator::GetEulaOrHealthWarningViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEulaOrHealthWarningViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: HealthWarningFlowCoordinator.Update
void GlobalNamespace::HealthWarningFlowCoordinator::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthWarningFlowCoordinator::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HealthWarningFlowCoordinator.HandleSelectLanguageViewControllerDidChangeLanguage
void GlobalNamespace::HealthWarningFlowCoordinator::HandleSelectLanguageViewControllerDidChangeLanguage() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthWarningFlowCoordinator::HandleSelectLanguageViewControllerDidChangeLanguage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSelectLanguageViewControllerDidChangeLanguage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HealthWarningFlowCoordinator.HandleSelectLanguageViewControllerDidPressContinueButton
void GlobalNamespace::HealthWarningFlowCoordinator::HandleSelectLanguageViewControllerDidPressContinueButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthWarningFlowCoordinator::HandleSelectLanguageViewControllerDidPressContinueButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSelectLanguageViewControllerDidPressContinueButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HealthWarningFlowCoordinator.HandleEulaViewControllerDidFinish
void GlobalNamespace::HealthWarningFlowCoordinator::HandleEulaViewControllerDidFinish(bool agreed) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthWarningFlowCoordinator::HandleEulaViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEulaViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(agreed)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, agreed);
}
// Autogenerated method: HealthWarningFlowCoordinator.HandleHealthWarningViewControllerPrivacyPolicyButtonPressed
void GlobalNamespace::HealthWarningFlowCoordinator::HandleHealthWarningViewControllerPrivacyPolicyButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthWarningFlowCoordinator::HandleHealthWarningViewControllerPrivacyPolicyButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHealthWarningViewControllerPrivacyPolicyButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HealthWarningFlowCoordinator.HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed
void GlobalNamespace::HealthWarningFlowCoordinator::HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthWarningFlowCoordinator::HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HealthWarningFlowCoordinator.HandleHealthWarningViewControllerDidFinish
void GlobalNamespace::HealthWarningFlowCoordinator::HandleHealthWarningViewControllerDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthWarningFlowCoordinator::HandleHealthWarningViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHealthWarningViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HealthWarningFlowCoordinator.GoToNextScene
void GlobalNamespace::HealthWarningFlowCoordinator::GoToNextScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthWarningFlowCoordinator::GoToNextScene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GoToNextScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HealthWarningFlowCoordinator.<HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed>b__23_0
void GlobalNamespace::HealthWarningFlowCoordinator::$HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed$b__23_0(int button) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthWarningFlowCoordinator::<HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed>b__23_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed>b__23_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(button)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, button);
}
// Autogenerated method: HealthWarningFlowCoordinator.DidActivate
void GlobalNamespace::HealthWarningFlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthWarningFlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HealthWarningFlowCoordinator.DidDeactivate
void GlobalNamespace::HealthWarningFlowCoordinator::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthWarningFlowCoordinator::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: HealthWarningFlowCoordinator.TopViewControllerWillChange
void GlobalNamespace::HealthWarningFlowCoordinator::TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthWarningFlowCoordinator::TopViewControllerWillChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TopViewControllerWillChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldViewController), ::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldViewController, newViewController, animationType);
}
// Autogenerated method: HealthWarningFlowCoordinator.BackButtonWasPressed
void GlobalNamespace::HealthWarningFlowCoordinator::BackButtonWasPressed(HMUI::ViewController* topViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthWarningFlowCoordinator::BackButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(topViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, topViewController);
}
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::GetEulaOrHealthWarningViewController
// Il2CppName: GetEulaOrHealthWarningViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::ViewController* (HealthWarningFlowCoordinator::*)()>(&HealthWarningFlowCoordinator::GetEulaOrHealthWarningViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), "GetEulaOrHealthWarningViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::*)()>(&HealthWarningFlowCoordinator::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::HandleSelectLanguageViewControllerDidChangeLanguage
// Il2CppName: HandleSelectLanguageViewControllerDidChangeLanguage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::*)()>(&HealthWarningFlowCoordinator::HandleSelectLanguageViewControllerDidChangeLanguage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), "HandleSelectLanguageViewControllerDidChangeLanguage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::HandleSelectLanguageViewControllerDidPressContinueButton
// Il2CppName: HandleSelectLanguageViewControllerDidPressContinueButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::*)()>(&HealthWarningFlowCoordinator::HandleSelectLanguageViewControllerDidPressContinueButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), "HandleSelectLanguageViewControllerDidPressContinueButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::HandleEulaViewControllerDidFinish
// Il2CppName: HandleEulaViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::*)(bool)>(&HealthWarningFlowCoordinator::HandleEulaViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), "HandleEulaViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::HandleHealthWarningViewControllerPrivacyPolicyButtonPressed
// Il2CppName: HandleHealthWarningViewControllerPrivacyPolicyButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::*)()>(&HealthWarningFlowCoordinator::HandleHealthWarningViewControllerPrivacyPolicyButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), "HandleHealthWarningViewControllerPrivacyPolicyButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed
// Il2CppName: HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::*)()>(&HealthWarningFlowCoordinator::HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), "HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::HandleHealthWarningViewControllerDidFinish
// Il2CppName: HandleHealthWarningViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::*)()>(&HealthWarningFlowCoordinator::HandleHealthWarningViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), "HandleHealthWarningViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::GoToNextScene
// Il2CppName: GoToNextScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::*)()>(&HealthWarningFlowCoordinator::GoToNextScene)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), "GoToNextScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::$HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed$b__23_0
// Il2CppName: <HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed>b__23_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::*)(int)>(&HealthWarningFlowCoordinator::$HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed$b__23_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), "<HandleHealthWarningViewControllerOpenDataPrivacyPolicyButtonPressed>b__23_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::*)(bool, bool, bool)>(&HealthWarningFlowCoordinator::DidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::*)(bool, bool)>(&HealthWarningFlowCoordinator::DidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::TopViewControllerWillChange
// Il2CppName: TopViewControllerWillChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&HealthWarningFlowCoordinator::TopViewControllerWillChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), "TopViewControllerWillChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController::AnimationType>()});
  }
};
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::BackButtonWasPressed
// Il2CppName: BackButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::*)(HMUI::ViewController*)>(&HealthWarningFlowCoordinator::BackButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), "BackButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>()});
  }
};
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::*)()>(&HealthWarningFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::*)()>(&HealthWarningFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HealthWarningFlowCoordinator/InitData
#include "GlobalNamespace/HealthWarningFlowCoordinator_InitData.hpp"
// Including type: ScenesTransitionSetupDataSO
#include "GlobalNamespace/ScenesTransitionSetupDataSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: HealthWarningFlowCoordinator::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::InitData::*)(GlobalNamespace::ScenesTransitionSetupDataSO*)>(&HealthWarningFlowCoordinator::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ScenesTransitionSetupDataSO*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HealthWarningFlowCoordinator::InitData::*)(GlobalNamespace::ScenesTransitionSetupDataSO*)>(&HealthWarningFlowCoordinator::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HealthWarningFlowCoordinator::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ScenesTransitionSetupDataSO*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LevelSelectionFlowCoordinator
#include "GlobalNamespace/LevelSelectionFlowCoordinator.hpp"
// Including type: LevelSelectionFlowCoordinator/State
#include "GlobalNamespace/LevelSelectionFlowCoordinator_State.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: LevelSelectionNavigationController
#include "GlobalNamespace/LevelSelectionNavigationController.hpp"
// Including type: SearchFilterParamsViewController
#include "GlobalNamespace/SearchFilterParamsViewController.hpp"
// Including type: LevelSearchViewController
#include "GlobalNamespace/LevelSearchViewController.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: LevelFilterParams
#include "GlobalNamespace/LevelFilterParams.hpp"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LevelSelectionFlowCoordinator.get_isInRootViewController
bool GlobalNamespace::LevelSelectionFlowCoordinator::get_isInRootViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_isInRootViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInRootViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_selectedLevelCategory
GlobalNamespace::SelectLevelCategoryViewController::LevelCategory GlobalNamespace::LevelSelectionFlowCoordinator::get_selectedLevelCategory() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_selectedLevelCategory");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedLevelCategory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SelectLevelCategoryViewController::LevelCategory, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_selectedBeatmapLevelPack
GlobalNamespace::IBeatmapLevelPack* GlobalNamespace::LevelSelectionFlowCoordinator::get_selectedBeatmapLevelPack() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_selectedBeatmapLevelPack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedBeatmapLevelPack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IBeatmapLevelPack*, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_selectedDifficultyBeatmap
GlobalNamespace::IDifficultyBeatmap* GlobalNamespace::LevelSelectionFlowCoordinator::get_selectedDifficultyBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_selectedDifficultyBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedDifficultyBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IDifficultyBeatmap*, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_selectedBeatmapLevel
GlobalNamespace::IPreviewBeatmapLevel* GlobalNamespace::LevelSelectionFlowCoordinator::get_selectedBeatmapLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_selectedBeatmapLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selectedBeatmapLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IPreviewBeatmapLevel*, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_initialTopScreenViewController
HMUI::ViewController* GlobalNamespace::LevelSelectionFlowCoordinator::get_initialTopScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_initialTopScreenViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initialTopScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_initialLeftScreenViewController
HMUI::ViewController* GlobalNamespace::LevelSelectionFlowCoordinator::get_initialLeftScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_initialLeftScreenViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initialLeftScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_initialRightScreenViewController
HMUI::ViewController* GlobalNamespace::LevelSelectionFlowCoordinator::get_initialRightScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_initialRightScreenViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initialRightScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_showBackButtonForMainViewController
bool GlobalNamespace::LevelSelectionFlowCoordinator::get_showBackButtonForMainViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_showBackButtonForMainViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_showBackButtonForMainViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_hidePacksIfOneOrNone
bool GlobalNamespace::LevelSelectionFlowCoordinator::get_hidePacksIfOneOrNone() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_hidePacksIfOneOrNone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hidePacksIfOneOrNone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_hidePracticeButton
bool GlobalNamespace::LevelSelectionFlowCoordinator::get_hidePracticeButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_hidePracticeButton");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hidePracticeButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_showPlayerStatsInDetailView
bool GlobalNamespace::LevelSelectionFlowCoordinator::get_showPlayerStatsInDetailView() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_showPlayerStatsInDetailView");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_showPlayerStatsInDetailView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_actionButtonText
::Il2CppString* GlobalNamespace::LevelSelectionFlowCoordinator::get_actionButtonText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_actionButtonText");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_actionButtonText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_mainTitle
::Il2CppString* GlobalNamespace::LevelSelectionFlowCoordinator::get_mainTitle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_mainTitle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mainTitle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_enableCustomLevels
bool GlobalNamespace::LevelSelectionFlowCoordinator::get_enableCustomLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_enableCustomLevels");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableCustomLevels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_songPackMask
GlobalNamespace::SongPackMask GlobalNamespace::LevelSelectionFlowCoordinator::get_songPackMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_songPackMask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songPackMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_allowedBeatmapDifficultyMask
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::LevelSelectionFlowCoordinator::get_allowedBeatmapDifficultyMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_allowedBeatmapDifficultyMask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allowedBeatmapDifficultyMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficultyMask, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.get_notAllowedCharacteristics
::Array<GlobalNamespace::BeatmapCharacteristicSO*>* GlobalNamespace::LevelSelectionFlowCoordinator::get_notAllowedCharacteristics() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::get_notAllowedCharacteristics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_notAllowedCharacteristics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::BeatmapCharacteristicSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.LevelSelectionFlowCoordinatorDidActivate
void GlobalNamespace::LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidActivate(bool firstActivation, bool addedToHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy);
}
// Autogenerated method: LevelSelectionFlowCoordinator.LevelSelectionFlowCoordinatorDidDeactivate
void GlobalNamespace::LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidDeactivate(bool removedFromHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy);
}
// Autogenerated method: LevelSelectionFlowCoordinator.LevelSelectionFlowCoordinatorTopViewControllerWillChange
void GlobalNamespace::LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorTopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorTopViewControllerWillChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LevelSelectionFlowCoordinatorTopViewControllerWillChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldViewController), ::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldViewController, newViewController, animationType);
}
// Autogenerated method: LevelSelectionFlowCoordinator.ActionButtonWasPressed
void GlobalNamespace::LevelSelectionFlowCoordinator::ActionButtonWasPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::ActionButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActionButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.PracticeButtonWasPressed
void GlobalNamespace::LevelSelectionFlowCoordinator::PracticeButtonWasPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::PracticeButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PracticeButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.SelectionDidChange
void GlobalNamespace::LevelSelectionFlowCoordinator::SelectionDidChange(GlobalNamespace::IBeatmapLevelPack* pack, GlobalNamespace::IDifficultyBeatmap* beatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::SelectionDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pack), ::il2cpp_utils::ExtractType(beatmap)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pack, beatmap);
}
// Autogenerated method: LevelSelectionFlowCoordinator.Setup
void GlobalNamespace::LevelSelectionFlowCoordinator::Setup(GlobalNamespace::LevelSelectionFlowCoordinator::State* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: LevelSelectionFlowCoordinator.HandleLevelSelectionNavigationControllerDidSelectPack
void GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidSelectPack(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::IBeatmapLevelPack* pack) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidSelectPack");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelSelectionNavigationControllerDidSelectPack", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(pack)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, pack);
}
// Autogenerated method: LevelSelectionFlowCoordinator.HandleSearchFilterParamsViewControllerDidFinish
void GlobalNamespace::LevelSelectionFlowCoordinator::HandleSearchFilterParamsViewControllerDidFinish(GlobalNamespace::SearchFilterParamsViewController* viewController, GlobalNamespace::LevelFilterParams* levelFilterParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::HandleSearchFilterParamsViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSearchFilterParamsViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(levelFilterParams)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, levelFilterParams);
}
// Autogenerated method: LevelSelectionFlowCoordinator.HandleLevelSearchViewControllerDidPressSearchButton
void GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSearchViewControllerDidPressSearchButton(GlobalNamespace::LevelSearchViewController* viewController, GlobalNamespace::LevelFilterParams* levelFilterParams) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSearchViewControllerDidPressSearchButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelSearchViewControllerDidPressSearchButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(levelFilterParams)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, levelFilterParams);
}
// Autogenerated method: LevelSelectionFlowCoordinator.HandleLevelSelectionNavigationControllerDidPressActionButton
void GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidPressActionButton(GlobalNamespace::LevelSelectionNavigationController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidPressActionButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelSelectionNavigationControllerDidPressActionButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: LevelSelectionFlowCoordinator.HandleLevelSelectionNavigationControllerDidPressPracticeButton
void GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidPressPracticeButton(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::IBeatmapLevel* level) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidPressPracticeButton");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelSelectionNavigationControllerDidPressPracticeButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(level)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, level);
}
// Autogenerated method: LevelSelectionFlowCoordinator.HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap
void GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::IDifficultyBeatmap* beatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(beatmap)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, beatmap);
}
// Autogenerated method: LevelSelectionFlowCoordinator.HandleLevelSelectionNavigationControllerDidChangeLevelDetailContent
void GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidChangeLevelDetailContent(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::StandardLevelDetailViewController::ContentType contentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidChangeLevelDetailContent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelSelectionNavigationControllerDidChangeLevelDetailContent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(contentType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, contentType);
}
// Autogenerated method: LevelSelectionFlowCoordinator.Refresh
void GlobalNamespace::LevelSelectionFlowCoordinator::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::Refresh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: LevelSelectionFlowCoordinator.IsMainViewController
bool GlobalNamespace::LevelSelectionFlowCoordinator::IsMainViewController(HMUI::ViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::IsMainViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsMainViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, viewController);
}
// Autogenerated method: LevelSelectionFlowCoordinator.PresentMainViewController
void GlobalNamespace::LevelSelectionFlowCoordinator::PresentMainViewController(System::Action* finishedCallback, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::PresentMainViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentMainViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, finishedCallback, animationType);
}
// Autogenerated method: LevelSelectionFlowCoordinator.DidActivate
void GlobalNamespace::LevelSelectionFlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: LevelSelectionFlowCoordinator.DidDeactivate
void GlobalNamespace::LevelSelectionFlowCoordinator::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: LevelSelectionFlowCoordinator.TopViewControllerWillChange
void GlobalNamespace::LevelSelectionFlowCoordinator::TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelSelectionFlowCoordinator::TopViewControllerWillChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TopViewControllerWillChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldViewController), ::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldViewController, newViewController, animationType);
}
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_isInRootViewController
// Il2CppName: get_isInRootViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_isInRootViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_isInRootViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_selectedLevelCategory
// Il2CppName: get_selectedLevelCategory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SelectLevelCategoryViewController::LevelCategory (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_selectedLevelCategory)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_selectedLevelCategory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_selectedBeatmapLevelPack
// Il2CppName: get_selectedBeatmapLevelPack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IBeatmapLevelPack* (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_selectedBeatmapLevelPack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_selectedBeatmapLevelPack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_selectedDifficultyBeatmap
// Il2CppName: get_selectedDifficultyBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IDifficultyBeatmap* (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_selectedDifficultyBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_selectedDifficultyBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_selectedBeatmapLevel
// Il2CppName: get_selectedBeatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IPreviewBeatmapLevel* (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_selectedBeatmapLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_selectedBeatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_initialTopScreenViewController
// Il2CppName: get_initialTopScreenViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::ViewController* (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_initialTopScreenViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_initialTopScreenViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_initialLeftScreenViewController
// Il2CppName: get_initialLeftScreenViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::ViewController* (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_initialLeftScreenViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_initialLeftScreenViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_initialRightScreenViewController
// Il2CppName: get_initialRightScreenViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::ViewController* (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_initialRightScreenViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_initialRightScreenViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_showBackButtonForMainViewController
// Il2CppName: get_showBackButtonForMainViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_showBackButtonForMainViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_showBackButtonForMainViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_hidePacksIfOneOrNone
// Il2CppName: get_hidePacksIfOneOrNone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_hidePacksIfOneOrNone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_hidePacksIfOneOrNone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_hidePracticeButton
// Il2CppName: get_hidePracticeButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_hidePracticeButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_hidePracticeButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_showPlayerStatsInDetailView
// Il2CppName: get_showPlayerStatsInDetailView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_showPlayerStatsInDetailView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_showPlayerStatsInDetailView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_actionButtonText
// Il2CppName: get_actionButtonText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_actionButtonText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_actionButtonText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_mainTitle
// Il2CppName: get_mainTitle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_mainTitle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_mainTitle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_enableCustomLevels
// Il2CppName: get_enableCustomLevels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_enableCustomLevels)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_enableCustomLevels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_songPackMask
// Il2CppName: get_songPackMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_songPackMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_songPackMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_allowedBeatmapDifficultyMask
// Il2CppName: get_allowedBeatmapDifficultyMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficultyMask (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_allowedBeatmapDifficultyMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_allowedBeatmapDifficultyMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::get_notAllowedCharacteristics
// Il2CppName: get_notAllowedCharacteristics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::BeatmapCharacteristicSO*>* (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::get_notAllowedCharacteristics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "get_notAllowedCharacteristics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidActivate
// Il2CppName: LevelSelectionFlowCoordinatorDidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(bool, bool)>(&LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "LevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidDeactivate
// Il2CppName: LevelSelectionFlowCoordinatorDidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(bool)>(&LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "LevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorTopViewControllerWillChange
// Il2CppName: LevelSelectionFlowCoordinatorTopViewControllerWillChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorTopViewControllerWillChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "LevelSelectionFlowCoordinatorTopViewControllerWillChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController::AnimationType>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::ActionButtonWasPressed
// Il2CppName: ActionButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::ActionButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "ActionButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::PracticeButtonWasPressed
// Il2CppName: PracticeButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::PracticeButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "PracticeButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::SelectionDidChange
// Il2CppName: SelectionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(GlobalNamespace::IBeatmapLevelPack*, GlobalNamespace::IDifficultyBeatmap*)>(&LevelSelectionFlowCoordinator::SelectionDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "SelectionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(GlobalNamespace::LevelSelectionFlowCoordinator::State*)>(&LevelSelectionFlowCoordinator::Setup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelSelectionFlowCoordinator::State*>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidSelectPack
// Il2CppName: HandleLevelSelectionNavigationControllerDidSelectPack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(GlobalNamespace::LevelSelectionNavigationController*, GlobalNamespace::IBeatmapLevelPack*)>(&LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidSelectPack)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "HandleLevelSelectionNavigationControllerDidSelectPack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelSelectionNavigationController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::HandleSearchFilterParamsViewControllerDidFinish
// Il2CppName: HandleSearchFilterParamsViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(GlobalNamespace::SearchFilterParamsViewController*, GlobalNamespace::LevelFilterParams*)>(&LevelSelectionFlowCoordinator::HandleSearchFilterParamsViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "HandleSearchFilterParamsViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SearchFilterParamsViewController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelFilterParams*>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::HandleLevelSearchViewControllerDidPressSearchButton
// Il2CppName: HandleLevelSearchViewControllerDidPressSearchButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(GlobalNamespace::LevelSearchViewController*, GlobalNamespace::LevelFilterParams*)>(&LevelSelectionFlowCoordinator::HandleLevelSearchViewControllerDidPressSearchButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "HandleLevelSearchViewControllerDidPressSearchButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelSearchViewController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelFilterParams*>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidPressActionButton
// Il2CppName: HandleLevelSelectionNavigationControllerDidPressActionButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(GlobalNamespace::LevelSelectionNavigationController*)>(&LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidPressActionButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "HandleLevelSelectionNavigationControllerDidPressActionButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelSelectionNavigationController*>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidPressPracticeButton
// Il2CppName: HandleLevelSelectionNavigationControllerDidPressPracticeButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(GlobalNamespace::LevelSelectionNavigationController*, GlobalNamespace::IBeatmapLevel*)>(&LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidPressPracticeButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "HandleLevelSelectionNavigationControllerDidPressPracticeButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelSelectionNavigationController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevel*>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap
// Il2CppName: HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(GlobalNamespace::LevelSelectionNavigationController*, GlobalNamespace::IDifficultyBeatmap*)>(&LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelSelectionNavigationController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidChangeLevelDetailContent
// Il2CppName: HandleLevelSelectionNavigationControllerDidChangeLevelDetailContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(GlobalNamespace::LevelSelectionNavigationController*, GlobalNamespace::StandardLevelDetailViewController::ContentType)>(&LevelSelectionFlowCoordinator::HandleLevelSelectionNavigationControllerDidChangeLevelDetailContent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "HandleLevelSelectionNavigationControllerDidChangeLevelDetailContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelSelectionNavigationController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardLevelDetailViewController::ContentType>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::IsMainViewController
// Il2CppName: IsMainViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LevelSelectionFlowCoordinator::*)(HMUI::ViewController*)>(&LevelSelectionFlowCoordinator::IsMainViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "IsMainViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::PresentMainViewController
// Il2CppName: PresentMainViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(System::Action*, HMUI::ViewController::AnimationType)>(&LevelSelectionFlowCoordinator::PresentMainViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "PresentMainViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController::AnimationType>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(bool, bool, bool)>(&LevelSelectionFlowCoordinator::DidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(bool, bool)>(&LevelSelectionFlowCoordinator::DidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::TopViewControllerWillChange
// Il2CppName: TopViewControllerWillChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&LevelSelectionFlowCoordinator::TopViewControllerWillChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), "TopViewControllerWillChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController::AnimationType>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::*)()>(&LevelSelectionFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LevelSelectionFlowCoordinator/State
#include "GlobalNamespace/LevelSelectionFlowCoordinator_State.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
// Including type: IPreviewBeatmapLevel
#include "GlobalNamespace/IPreviewBeatmapLevel.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::State::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::State::*)(System::Nullable_1<GlobalNamespace::SelectLevelCategoryViewController::LevelCategory>, GlobalNamespace::IBeatmapLevelPack*, GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::IDifficultyBeatmap*)>(&LevelSelectionFlowCoordinator::State::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator::State*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Nullable_1<GlobalNamespace::SelectLevelCategoryViewController::LevelCategory>>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::State::*)(System::Nullable_1<GlobalNamespace::SelectLevelCategoryViewController::LevelCategory>, GlobalNamespace::IBeatmapLevelPack*, GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::IDifficultyBeatmap*)>(&LevelSelectionFlowCoordinator::State::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator::State*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Nullable_1<GlobalNamespace::SelectLevelCategoryViewController::LevelCategory>>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::State::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::State::*)(GlobalNamespace::IBeatmapLevelPack*)>(&LevelSelectionFlowCoordinator::State::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator::State*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::State::*)(GlobalNamespace::IBeatmapLevelPack*)>(&LevelSelectionFlowCoordinator::State::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator::State*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::State::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::State::*)(GlobalNamespace::IBeatmapLevelPack*, GlobalNamespace::IPreviewBeatmapLevel*)>(&LevelSelectionFlowCoordinator::State::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator::State*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::State::*)(GlobalNamespace::IBeatmapLevelPack*, GlobalNamespace::IPreviewBeatmapLevel*)>(&LevelSelectionFlowCoordinator::State::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator::State*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IPreviewBeatmapLevel*>()});
  }
};
// Writing MetadataGetter for method: LevelSelectionFlowCoordinator::State::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::State::*)(GlobalNamespace::SelectLevelCategoryViewController::LevelCategory, GlobalNamespace::IBeatmapLevelPack*, GlobalNamespace::IDifficultyBeatmap*)>(&LevelSelectionFlowCoordinator::State::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator::State*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SelectLevelCategoryViewController::LevelCategory>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LevelSelectionFlowCoordinator::State::*)(GlobalNamespace::SelectLevelCategoryViewController::LevelCategory, GlobalNamespace::IBeatmapLevelPack*, GlobalNamespace::IDifficultyBeatmap*)>(&LevelSelectionFlowCoordinator::State::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LevelSelectionFlowCoordinator::State*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SelectLevelCategoryViewController::LevelCategory>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MainFlowCoordinator
#include "GlobalNamespace/MainFlowCoordinator.hpp"
// Including type: MainFlowCoordinator/<ProcessMenuDestinationRequestAfterFrameCoroutine>d__40
#include "GlobalNamespace/MainFlowCoordinator_-ProcessMenuDestinationRequestAfterFrameCoroutine-d__40.hpp"
// Including type: MenuLightsPresetSO
#include "GlobalNamespace/MenuLightsPresetSO.hpp"
// Including type: SoloFreePlayFlowCoordinator
#include "GlobalNamespace/SoloFreePlayFlowCoordinator.hpp"
// Including type: PartyFreePlayFlowCoordinator
#include "GlobalNamespace/PartyFreePlayFlowCoordinator.hpp"
// Including type: CampaignFlowCoordinator
#include "GlobalNamespace/CampaignFlowCoordinator.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
// Including type: MultiplayerModeSelectionFlowCoordinator
#include "GlobalNamespace/MultiplayerModeSelectionFlowCoordinator.hpp"
// Including type: LevelSelectionFlowCoordinator
#include "GlobalNamespace/LevelSelectionFlowCoordinator.hpp"
// Including type: SimpleDialogPromptViewController
#include "GlobalNamespace/SimpleDialogPromptViewController.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: PlayerOptionsViewController
#include "GlobalNamespace/PlayerOptionsViewController.hpp"
// Including type: PlayerStatisticsViewController
#include "GlobalNamespace/PlayerStatisticsViewController.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: MenuLightsManager
#include "GlobalNamespace/MenuLightsManager.hpp"
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: BeatmapLevelsModel
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Including type: MenuTransitionsHelper
#include "GlobalNamespace/MenuTransitionsHelper.hpp"
// Including type: AppStaticSettingsSO
#include "GlobalNamespace/AppStaticSettingsSO.hpp"
// Including type: MenuDestination
#include "GlobalNamespace/MenuDestination.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Boolean _startWithSettings
bool GlobalNamespace::MainFlowCoordinator::_get__startWithSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::_get__startWithSettings");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("", "MainFlowCoordinator", "_startWithSettings"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _startWithSettings
void GlobalNamespace::MainFlowCoordinator::_set__startWithSettings(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::_set__startWithSettings");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainFlowCoordinator", "_startWithSettings", value));
}
// Autogenerated method: MainFlowCoordinator.PresentFlowCoordinatorOrAskForTutorial
void GlobalNamespace::MainFlowCoordinator::PresentFlowCoordinatorOrAskForTutorial(HMUI::FlowCoordinator* flowCoordinator) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::PresentFlowCoordinatorOrAskForTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentFlowCoordinatorOrAskForTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flowCoordinator);
}
// Autogenerated method: MainFlowCoordinator.HandleMainMenuViewControllerDidFinish
void GlobalNamespace::MainFlowCoordinator::HandleMainMenuViewControllerDidFinish(GlobalNamespace::MainMenuViewController* viewController, GlobalNamespace::MainMenuViewController::MenuButton subMenuType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::HandleMainMenuViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMainMenuViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(subMenuType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, subMenuType);
}
// Autogenerated method: MainFlowCoordinator.HandleOptionsViewControllerDidFinish
void GlobalNamespace::MainFlowCoordinator::HandleOptionsViewControllerDidFinish(GlobalNamespace::OptionsViewController::OptionsButton optionsType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::HandleOptionsViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleOptionsViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(optionsType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, optionsType);
}
// Autogenerated method: MainFlowCoordinator.HandlePlayerOptionsViewControllerDidFinish
void GlobalNamespace::MainFlowCoordinator::HandlePlayerOptionsViewControllerDidFinish(HMUI::ViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::HandlePlayerOptionsViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePlayerOptionsViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: MainFlowCoordinator.HandleHowToPlayViewControllerDidFinish
void GlobalNamespace::MainFlowCoordinator::HandleHowToPlayViewControllerDidFinish(GlobalNamespace::HowToPlayViewController::HowToPlayOptions howToPlayOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::HandleHowToPlayViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHowToPlayViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(howToPlayOptions)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, howToPlayOptions);
}
// Autogenerated method: MainFlowCoordinator.HandleCampaignFlowCoordinatorDidFinish
void GlobalNamespace::MainFlowCoordinator::HandleCampaignFlowCoordinatorDidFinish(GlobalNamespace::CampaignFlowCoordinator* flowCoordinator) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::HandleCampaignFlowCoordinatorDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCampaignFlowCoordinatorDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flowCoordinator);
}
// Autogenerated method: MainFlowCoordinator.HandleEditAvatarFlowCoordinatorDidFinish
void GlobalNamespace::MainFlowCoordinator::HandleEditAvatarFlowCoordinatorDidFinish(GlobalNamespace::EditAvatarFlowCoordinator* flowCoordinator, GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType editAvatarType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::HandleEditAvatarFlowCoordinatorDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleEditAvatarFlowCoordinatorDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator), ::il2cpp_utils::ExtractType(editAvatarType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flowCoordinator, editAvatarType);
}
// Autogenerated method: MainFlowCoordinator.HandleSoloFreePlayFlowCoordinatorDidFinish
void GlobalNamespace::MainFlowCoordinator::HandleSoloFreePlayFlowCoordinatorDidFinish(GlobalNamespace::LevelSelectionFlowCoordinator* flowCoordinator) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::HandleSoloFreePlayFlowCoordinatorDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSoloFreePlayFlowCoordinatorDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flowCoordinator);
}
// Autogenerated method: MainFlowCoordinator.HandlePartyFreePlayFlowCoordinatorDidFinish
void GlobalNamespace::MainFlowCoordinator::HandlePartyFreePlayFlowCoordinatorDidFinish(GlobalNamespace::LevelSelectionFlowCoordinator* flowCoordinator) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::HandlePartyFreePlayFlowCoordinatorDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePartyFreePlayFlowCoordinatorDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flowCoordinator);
}
// Autogenerated method: MainFlowCoordinator.HandleSettingsFlowCoordinatorDidFinish
void GlobalNamespace::MainFlowCoordinator::HandleSettingsFlowCoordinatorDidFinish(GlobalNamespace::SettingsFlowCoordinator* settingsFlowCoordinator, GlobalNamespace::SettingsFlowCoordinator::FinishAction finishAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::HandleSettingsFlowCoordinatorDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSettingsFlowCoordinatorDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(settingsFlowCoordinator), ::il2cpp_utils::ExtractType(finishAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, settingsFlowCoordinator, finishAction);
}
// Autogenerated method: MainFlowCoordinator.HandleMultiplayerModeSelectionFlowCoordinatorDidFinish
void GlobalNamespace::MainFlowCoordinator::HandleMultiplayerModeSelectionFlowCoordinatorDidFinish(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator* multiplayerModeSelectionFlowCoordinator) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::HandleMultiplayerModeSelectionFlowCoordinatorDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerModeSelectionFlowCoordinatorDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerModeSelectionFlowCoordinator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerModeSelectionFlowCoordinator);
}
// Autogenerated method: MainFlowCoordinator.HandleMainMenuViewControllerMusicPackPromoButtonWasPressed
void GlobalNamespace::MainFlowCoordinator::HandleMainMenuViewControllerMusicPackPromoButtonWasPressed(GlobalNamespace::IBeatmapLevelPack* beatmapLevelPack) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::HandleMainMenuViewControllerMusicPackPromoButtonWasPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMainMenuViewControllerMusicPackPromoButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapLevelPack)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapLevelPack);
}
// Autogenerated method: MainFlowCoordinator.ProcessMenuDestinationRequest
void GlobalNamespace::MainFlowCoordinator::ProcessMenuDestinationRequest(GlobalNamespace::MenuDestination* destination) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::ProcessMenuDestinationRequest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessMenuDestinationRequest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, destination);
}
// Autogenerated method: MainFlowCoordinator.PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator
void GlobalNamespace::MainFlowCoordinator::PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainFlowCoordinator.ProcessMenuDestinationRequestAfterFrameCoroutine
System::Collections::IEnumerator* GlobalNamespace::MainFlowCoordinator::ProcessMenuDestinationRequestAfterFrameCoroutine(GlobalNamespace::MenuDestination* destination) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::ProcessMenuDestinationRequestAfterFrameCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessMenuDestinationRequestAfterFrameCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(destination)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, destination);
}
// Autogenerated method: MainFlowCoordinator.<PresentFlowCoordinatorOrAskForTutorial>b__26_0
void GlobalNamespace::MainFlowCoordinator::$PresentFlowCoordinatorOrAskForTutorial$b__26_0(int buttonNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::<PresentFlowCoordinatorOrAskForTutorial>b__26_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PresentFlowCoordinatorOrAskForTutorial>b__26_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonNumber)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buttonNumber);
}
// Autogenerated method: MainFlowCoordinator.<PresentFlowCoordinatorOrAskForTutorial>b__26_1
void GlobalNamespace::MainFlowCoordinator::$PresentFlowCoordinatorOrAskForTutorial$b__26_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::<PresentFlowCoordinatorOrAskForTutorial>b__26_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PresentFlowCoordinatorOrAskForTutorial>b__26_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainFlowCoordinator.<HandleMainMenuViewControllerDidFinish>b__27_0
void GlobalNamespace::MainFlowCoordinator::$HandleMainMenuViewControllerDidFinish$b__27_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::<HandleMainMenuViewControllerDidFinish>b__27_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleMainMenuViewControllerDidFinish>b__27_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainFlowCoordinator.<HandleMainMenuViewControllerDidFinish>b__27_1
void GlobalNamespace::MainFlowCoordinator::$HandleMainMenuViewControllerDidFinish$b__27_1(int buttonNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::<HandleMainMenuViewControllerDidFinish>b__27_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleMainMenuViewControllerDidFinish>b__27_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonNumber)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buttonNumber);
}
// Autogenerated method: MainFlowCoordinator.<PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator>b__39_0
void GlobalNamespace::MainFlowCoordinator::$PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator$b__39_0(int buttonNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::<PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator>b__39_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator>b__39_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonNumber)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buttonNumber);
}
// Autogenerated method: MainFlowCoordinator.DidActivate
void GlobalNamespace::MainFlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: MainFlowCoordinator.TopViewControllerWillChange
void GlobalNamespace::MainFlowCoordinator::TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::TopViewControllerWillChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TopViewControllerWillChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldViewController), ::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldViewController, newViewController, animationType);
}
// Autogenerated method: MainFlowCoordinator.InitialViewControllerWasPresented
void GlobalNamespace::MainFlowCoordinator::InitialViewControllerWasPresented() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::InitialViewControllerWasPresented");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitialViewControllerWasPresented", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainFlowCoordinator.DidDeactivate
void GlobalNamespace::MainFlowCoordinator::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: MainFlowCoordinator.BackButtonWasPressed
void GlobalNamespace::MainFlowCoordinator::BackButtonWasPressed(HMUI::ViewController* topViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::BackButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(topViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, topViewController);
}
// Writing MetadataGetter for method: MainFlowCoordinator::PresentFlowCoordinatorOrAskForTutorial
// Il2CppName: PresentFlowCoordinatorOrAskForTutorial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(HMUI::FlowCoordinator*)>(&MainFlowCoordinator::PresentFlowCoordinatorOrAskForTutorial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "PresentFlowCoordinatorOrAskForTutorial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::FlowCoordinator*>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::HandleMainMenuViewControllerDidFinish
// Il2CppName: HandleMainMenuViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(GlobalNamespace::MainMenuViewController*, GlobalNamespace::MainMenuViewController::MenuButton)>(&MainFlowCoordinator::HandleMainMenuViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "HandleMainMenuViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MainMenuViewController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MainMenuViewController::MenuButton>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::HandleOptionsViewControllerDidFinish
// Il2CppName: HandleOptionsViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(GlobalNamespace::OptionsViewController::OptionsButton)>(&MainFlowCoordinator::HandleOptionsViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "HandleOptionsViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::OptionsViewController::OptionsButton>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::HandlePlayerOptionsViewControllerDidFinish
// Il2CppName: HandlePlayerOptionsViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(HMUI::ViewController*)>(&MainFlowCoordinator::HandlePlayerOptionsViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "HandlePlayerOptionsViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::HandleHowToPlayViewControllerDidFinish
// Il2CppName: HandleHowToPlayViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(GlobalNamespace::HowToPlayViewController::HowToPlayOptions)>(&MainFlowCoordinator::HandleHowToPlayViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "HandleHowToPlayViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::HowToPlayViewController::HowToPlayOptions>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::HandleCampaignFlowCoordinatorDidFinish
// Il2CppName: HandleCampaignFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(GlobalNamespace::CampaignFlowCoordinator*)>(&MainFlowCoordinator::HandleCampaignFlowCoordinatorDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "HandleCampaignFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::CampaignFlowCoordinator*>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::HandleEditAvatarFlowCoordinatorDidFinish
// Il2CppName: HandleEditAvatarFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(GlobalNamespace::EditAvatarFlowCoordinator*, GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType)>(&MainFlowCoordinator::HandleEditAvatarFlowCoordinatorDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "HandleEditAvatarFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EditAvatarFlowCoordinator*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::HandleSoloFreePlayFlowCoordinatorDidFinish
// Il2CppName: HandleSoloFreePlayFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(GlobalNamespace::LevelSelectionFlowCoordinator*)>(&MainFlowCoordinator::HandleSoloFreePlayFlowCoordinatorDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "HandleSoloFreePlayFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelSelectionFlowCoordinator*>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::HandlePartyFreePlayFlowCoordinatorDidFinish
// Il2CppName: HandlePartyFreePlayFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(GlobalNamespace::LevelSelectionFlowCoordinator*)>(&MainFlowCoordinator::HandlePartyFreePlayFlowCoordinatorDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "HandlePartyFreePlayFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelSelectionFlowCoordinator*>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::HandleSettingsFlowCoordinatorDidFinish
// Il2CppName: HandleSettingsFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(GlobalNamespace::SettingsFlowCoordinator*, GlobalNamespace::SettingsFlowCoordinator::FinishAction)>(&MainFlowCoordinator::HandleSettingsFlowCoordinatorDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "HandleSettingsFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SettingsFlowCoordinator*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SettingsFlowCoordinator::FinishAction>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::HandleMultiplayerModeSelectionFlowCoordinatorDidFinish
// Il2CppName: HandleMultiplayerModeSelectionFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*)>(&MainFlowCoordinator::HandleMultiplayerModeSelectionFlowCoordinatorDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "HandleMultiplayerModeSelectionFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::HandleMainMenuViewControllerMusicPackPromoButtonWasPressed
// Il2CppName: HandleMainMenuViewControllerMusicPackPromoButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(GlobalNamespace::IBeatmapLevelPack*)>(&MainFlowCoordinator::HandleMainMenuViewControllerMusicPackPromoButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "HandleMainMenuViewControllerMusicPackPromoButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::ProcessMenuDestinationRequest
// Il2CppName: ProcessMenuDestinationRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(GlobalNamespace::MenuDestination*)>(&MainFlowCoordinator::ProcessMenuDestinationRequest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "ProcessMenuDestinationRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MenuDestination*>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator
// Il2CppName: PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)()>(&MainFlowCoordinator::PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::ProcessMenuDestinationRequestAfterFrameCoroutine
// Il2CppName: ProcessMenuDestinationRequestAfterFrameCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MainFlowCoordinator::*)(GlobalNamespace::MenuDestination*)>(&MainFlowCoordinator::ProcessMenuDestinationRequestAfterFrameCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "ProcessMenuDestinationRequestAfterFrameCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MenuDestination*>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::$PresentFlowCoordinatorOrAskForTutorial$b__26_0
// Il2CppName: <PresentFlowCoordinatorOrAskForTutorial>b__26_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(int)>(&MainFlowCoordinator::$PresentFlowCoordinatorOrAskForTutorial$b__26_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "<PresentFlowCoordinatorOrAskForTutorial>b__26_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::$PresentFlowCoordinatorOrAskForTutorial$b__26_1
// Il2CppName: <PresentFlowCoordinatorOrAskForTutorial>b__26_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)()>(&MainFlowCoordinator::$PresentFlowCoordinatorOrAskForTutorial$b__26_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "<PresentFlowCoordinatorOrAskForTutorial>b__26_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::$HandleMainMenuViewControllerDidFinish$b__27_0
// Il2CppName: <HandleMainMenuViewControllerDidFinish>b__27_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)()>(&MainFlowCoordinator::$HandleMainMenuViewControllerDidFinish$b__27_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "<HandleMainMenuViewControllerDidFinish>b__27_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::$HandleMainMenuViewControllerDidFinish$b__27_1
// Il2CppName: <HandleMainMenuViewControllerDidFinish>b__27_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(int)>(&MainFlowCoordinator::$HandleMainMenuViewControllerDidFinish$b__27_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "<HandleMainMenuViewControllerDidFinish>b__27_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::$PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator$b__39_0
// Il2CppName: <PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator>b__39_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(int)>(&MainFlowCoordinator::$PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator$b__39_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "<PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator>b__39_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(bool, bool, bool)>(&MainFlowCoordinator::DidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::TopViewControllerWillChange
// Il2CppName: TopViewControllerWillChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&MainFlowCoordinator::TopViewControllerWillChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "TopViewControllerWillChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController::AnimationType>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::InitialViewControllerWasPresented
// Il2CppName: InitialViewControllerWasPresented
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)()>(&MainFlowCoordinator::InitialViewControllerWasPresented)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "InitialViewControllerWasPresented", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(bool, bool)>(&MainFlowCoordinator::DidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::BackButtonWasPressed
// Il2CppName: BackButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)(HMUI::ViewController*)>(&MainFlowCoordinator::BackButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), "BackButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)()>(&MainFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::*)()>(&MainFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MainFlowCoordinator/<ProcessMenuDestinationRequestAfterFrameCoroutine>d__40
#include "GlobalNamespace/MainFlowCoordinator_-ProcessMenuDestinationRequestAfterFrameCoroutine-d__40.hpp"
// Including type: MenuDestination
#include "GlobalNamespace/MenuDestination.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MainFlowCoordinator/<ProcessMenuDestinationRequestAfterFrameCoroutine>d__40.System.IDisposable.Dispose
void GlobalNamespace::MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainFlowCoordinator/<ProcessMenuDestinationRequestAfterFrameCoroutine>d__40.MoveNext
bool GlobalNamespace::MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MainFlowCoordinator/<ProcessMenuDestinationRequestAfterFrameCoroutine>d__40.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MainFlowCoordinator/<ProcessMenuDestinationRequestAfterFrameCoroutine>d__40.System.Collections.IEnumerator.Reset
void GlobalNamespace::MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainFlowCoordinator/<ProcessMenuDestinationRequestAfterFrameCoroutine>d__40.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::*)(int)>(&MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::*)(int)>(&MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::*)()>(&MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::*)()>(&MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::*)()>(&MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::*)()>(&MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::*)()>(&MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ClientGameServerLobbyFlowCoordinator
#include "GlobalNamespace/ClientGameServerLobbyFlowCoordinator.hpp"
// Including type: ClientGameServerLobbyFlowCoordinator/<>c__DisplayClass17_0
#include "GlobalNamespace/ClientGameServerLobbyFlowCoordinator_--c__DisplayClass17_0.hpp"
// Including type: ClientGameServerLobbyFlowCoordinator/<>c__DisplayClass17_1
#include "GlobalNamespace/ClientGameServerLobbyFlowCoordinator_--c__DisplayClass17_1.hpp"
// Including type: ClientLobbySetupViewController
#include "GlobalNamespace/ClientLobbySetupViewController.hpp"
// Including type: IUnifiedNetworkPlayerModel
#include "GlobalNamespace/IUnifiedNetworkPlayerModel.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: MultiplayerGameState
#include "GlobalNamespace/MultiplayerGameState.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: MultiplayerLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/MultiplayerLevelScenesTransitionSetupDataSO.hpp"
// Including type: MultiplayerResultsData
#include "GlobalNamespace/MultiplayerResultsData.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.add_willFinishEvent
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::add_willFinishEvent(System::Action_1<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::add_willFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_willFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.remove_willFinishEvent
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::remove_willFinishEvent(System::Action_1<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::remove_willFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_willFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.add_didFinishedEvent
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::add_didFinishedEvent(System::Action_1<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::add_didFinishedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.remove_didFinishedEvent
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::remove_didFinishedEvent(System::Action_1<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::remove_didFinishedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleLobbyPlayersDataModelDidChange
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyPlayersDataModelDidChange(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyPlayersDataModelDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyPlayersDataModelDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.SetServerLevelGameplaySetupDataToViews
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::SetServerLevelGameplaySetupDataToViews(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::SetServerLevelGameplaySetupDataToViews");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetServerLevelGameplaySetupDataToViews", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.SetLocalPlayerDataModelToViews
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::SetLocalPlayerDataModelToViews(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::SetLocalPlayerDataModelToViews");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerDataModelToViews", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleMenuRpcManagerSetMultiplayerGameState
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleMenuRpcManagerSetMultiplayerGameState(::Il2CppString* userId, GlobalNamespace::MultiplayerGameState gameState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleMenuRpcManagerSetMultiplayerGameState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerSetMultiplayerGameState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(gameState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, gameState);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleClientLobbySetupViewControllerClientSetReady
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleClientLobbySetupViewControllerClientSetReady(bool isReady) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleClientLobbySetupViewControllerClientSetReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleClientLobbySetupViewControllerClientSetReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isReady)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isReady);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleServerPlayerListControllerSelectSuggestedLevel
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedLevel(::Il2CppString* levelId, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, GlobalNamespace::BeatmapDifficulty beatmapDifficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleServerPlayerListControllerSelectSuggestedLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId), ::il2cpp_utils::ExtractType(beatmapCharacteristic), ::il2cpp_utils::ExtractType(beatmapDifficulty)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelId, beatmapCharacteristic, beatmapDifficulty);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleServerPlayerListControllerSelectSuggestedGameplayModifiers
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedGameplayModifiers(GlobalNamespace::GameplayModifiers* modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedGameplayModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleServerPlayerListControllerSelectSuggestedGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(modifiers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, modifiers);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleClientLobbySetupViewControllerClearSelectedBeatmap
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleClientLobbySetupViewControllerClearSelectedBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleClientLobbySetupViewControllerClearSelectedBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleClientLobbySetupViewControllerClearSelectedBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleClientLobbySetupViewControllerClearSelectedModifiers
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleClientLobbySetupViewControllerClearSelectedModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleClientLobbySetupViewControllerClearSelectedModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleClientLobbySetupViewControllerClearSelectedModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleLobbyGameStateControllerStartTimeChanged
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerStartTimeChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerStartTimeChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerStartTimeChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleLobbyGameStateControllerGameStartCancelled
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStartCancelled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStartCancelled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerGameStartCancelled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleLobbyGameStateControllerGameStarted
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerGameStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleLobbyGameStateControllerGameStartedPresentView
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStartedPresentView() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStartedPresentView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerGameStartedPresentView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleLobbyGameStateControllerSongStillDownloading
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerSongStillDownloading() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerSongStillDownloading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerSongStillDownloading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleLobbyGameBeforeSceneSwitchCallback
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyGameBeforeSceneSwitchCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyGameBeforeSceneSwitchCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameBeforeSceneSwitchCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.SetupGameStarting
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::SetupGameStarting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::SetupGameStarting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupGameStarting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.DismissViewControllersAndCoordinators
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::DismissViewControllersAndCoordinators() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::DismissViewControllersAndCoordinators");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DismissViewControllersAndCoordinators", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.DidActivate
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.DidDeactivate
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.TopViewControllerWillChange
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::TopViewControllerWillChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TopViewControllerWillChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldViewController), ::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldViewController, newViewController, animationType);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.BackButtonWasPressed
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::BackButtonWasPressed(HMUI::ViewController* topViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::BackButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(topViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, topViewController);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.InitialViewControllerWasPresented
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::InitialViewControllerWasPresented() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::InitialViewControllerWasPresented");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitialViewControllerWasPresented", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.TransitionDidStart
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::TransitionDidStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::TransitionDidStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionDidStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.TransitionDidFinish
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::TransitionDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::TransitionDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleLobbySetupViewControllerSelectBeatmap
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectBeatmap");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbySetupViewControllerSelectBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleLobbyGameStateControllerLevelFinished
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelScenesTransitionSetupData, GlobalNamespace::MultiplayerResultsData* multiplayerResultsData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerLevelFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerLevelScenesTransitionSetupData), ::il2cpp_utils::ExtractType(multiplayerResultsData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerLevelScenesTransitionSetupData, multiplayerResultsData);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.Finish
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::Finish(System::Action* finishedCallback, bool withFadeOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::Finish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(withFadeOut)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, finishedCallback, withFadeOut);
}
// Autogenerated method: ClientGameServerLobbyFlowCoordinator.HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged(bool isActive) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isActive)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isActive);
}
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::add_willFinishEvent
// Il2CppName: add_willFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(System::Action_1<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>*)>(&ClientGameServerLobbyFlowCoordinator::add_willFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "add_willFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>*>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::remove_willFinishEvent
// Il2CppName: remove_willFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(System::Action_1<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>*)>(&ClientGameServerLobbyFlowCoordinator::remove_willFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "remove_willFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>*>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::add_didFinishedEvent
// Il2CppName: add_didFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(System::Action_1<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>*)>(&ClientGameServerLobbyFlowCoordinator::add_didFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "add_didFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>*>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::remove_didFinishedEvent
// Il2CppName: remove_didFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(System::Action_1<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>*)>(&ClientGameServerLobbyFlowCoordinator::remove_didFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "remove_didFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>*>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleLobbyPlayersDataModelDidChange
// Il2CppName: HandleLobbyPlayersDataModelDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(::Il2CppString*)>(&ClientGameServerLobbyFlowCoordinator::HandleLobbyPlayersDataModelDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleLobbyPlayersDataModelDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::SetServerLevelGameplaySetupDataToViews
// Il2CppName: SetServerLevelGameplaySetupDataToViews
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(::Il2CppString*)>(&ClientGameServerLobbyFlowCoordinator::SetServerLevelGameplaySetupDataToViews)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "SetServerLevelGameplaySetupDataToViews", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::SetLocalPlayerDataModelToViews
// Il2CppName: SetLocalPlayerDataModelToViews
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(::Il2CppString*)>(&ClientGameServerLobbyFlowCoordinator::SetLocalPlayerDataModelToViews)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "SetLocalPlayerDataModelToViews", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleMenuRpcManagerSetMultiplayerGameState
// Il2CppName: HandleMenuRpcManagerSetMultiplayerGameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(::Il2CppString*, GlobalNamespace::MultiplayerGameState)>(&ClientGameServerLobbyFlowCoordinator::HandleMenuRpcManagerSetMultiplayerGameState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleMenuRpcManagerSetMultiplayerGameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerGameState>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleClientLobbySetupViewControllerClientSetReady
// Il2CppName: HandleClientLobbySetupViewControllerClientSetReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(bool)>(&ClientGameServerLobbyFlowCoordinator::HandleClientLobbySetupViewControllerClientSetReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleClientLobbySetupViewControllerClientSetReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedLevel
// Il2CppName: HandleServerPlayerListControllerSelectSuggestedLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(::Il2CppString*, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::BeatmapDifficulty)>(&ClientGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleServerPlayerListControllerSelectSuggestedLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedGameplayModifiers
// Il2CppName: HandleServerPlayerListControllerSelectSuggestedGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(GlobalNamespace::GameplayModifiers*)>(&ClientGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleServerPlayerListControllerSelectSuggestedGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleClientLobbySetupViewControllerClearSelectedBeatmap
// Il2CppName: HandleClientLobbySetupViewControllerClearSelectedBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::HandleClientLobbySetupViewControllerClearSelectedBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleClientLobbySetupViewControllerClearSelectedBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleClientLobbySetupViewControllerClearSelectedModifiers
// Il2CppName: HandleClientLobbySetupViewControllerClearSelectedModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::HandleClientLobbySetupViewControllerClearSelectedModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleClientLobbySetupViewControllerClearSelectedModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerStartTimeChanged
// Il2CppName: HandleLobbyGameStateControllerStartTimeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerStartTimeChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleLobbyGameStateControllerStartTimeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStartCancelled
// Il2CppName: HandleLobbyGameStateControllerGameStartCancelled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStartCancelled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleLobbyGameStateControllerGameStartCancelled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStarted
// Il2CppName: HandleLobbyGameStateControllerGameStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStarted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleLobbyGameStateControllerGameStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStartedPresentView
// Il2CppName: HandleLobbyGameStateControllerGameStartedPresentView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStartedPresentView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleLobbyGameStateControllerGameStartedPresentView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerSongStillDownloading
// Il2CppName: HandleLobbyGameStateControllerSongStillDownloading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerSongStillDownloading)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleLobbyGameStateControllerSongStillDownloading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleLobbyGameBeforeSceneSwitchCallback
// Il2CppName: HandleLobbyGameBeforeSceneSwitchCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::HandleLobbyGameBeforeSceneSwitchCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleLobbyGameBeforeSceneSwitchCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::SetupGameStarting
// Il2CppName: SetupGameStarting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::SetupGameStarting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "SetupGameStarting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::DismissViewControllersAndCoordinators
// Il2CppName: DismissViewControllersAndCoordinators
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::DismissViewControllersAndCoordinators)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "DismissViewControllersAndCoordinators", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(bool, bool, bool)>(&ClientGameServerLobbyFlowCoordinator::DidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(bool, bool)>(&ClientGameServerLobbyFlowCoordinator::DidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::TopViewControllerWillChange
// Il2CppName: TopViewControllerWillChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&ClientGameServerLobbyFlowCoordinator::TopViewControllerWillChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "TopViewControllerWillChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController::AnimationType>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::BackButtonWasPressed
// Il2CppName: BackButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(HMUI::ViewController*)>(&ClientGameServerLobbyFlowCoordinator::BackButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "BackButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::InitialViewControllerWasPresented
// Il2CppName: InitialViewControllerWasPresented
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::InitialViewControllerWasPresented)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "InitialViewControllerWasPresented", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::TransitionDidStart
// Il2CppName: TransitionDidStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::TransitionDidStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "TransitionDidStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::TransitionDidFinish
// Il2CppName: TransitionDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::TransitionDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "TransitionDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectBeatmap
// Il2CppName: HandleLobbySetupViewControllerSelectBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleLobbySetupViewControllerSelectBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished
// Il2CppName: HandleLobbyGameStateControllerLevelFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*)>(&ClientGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleLobbyGameStateControllerLevelFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerResultsData*>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::Finish
// Il2CppName: Finish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(System::Action*, bool)>(&ClientGameServerLobbyFlowCoordinator::Finish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "Finish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged
// Il2CppName: HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)(bool)>(&ClientGameServerLobbyFlowCoordinator::HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), "HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::*)()>(&ClientGameServerLobbyFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ClientGameServerLobbyFlowCoordinator/<>c__DisplayClass17_0
#include "GlobalNamespace/ClientGameServerLobbyFlowCoordinator_--c__DisplayClass17_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_0::*)()>(&ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_0::*)()>(&ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ClientGameServerLobbyFlowCoordinator/<>c__DisplayClass17_1
#include "GlobalNamespace/ClientGameServerLobbyFlowCoordinator_--c__DisplayClass17_1.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: ClientGameServerLobbyFlowCoordinator/<>c__DisplayClass17_0
#include "GlobalNamespace/ClientGameServerLobbyFlowCoordinator_--c__DisplayClass17_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ClientGameServerLobbyFlowCoordinator/<>c__DisplayClass17_1.<Finish>b__0
void GlobalNamespace::ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_1::$Finish$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_1::<Finish>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Finish>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_1::$Finish$b__0
// Il2CppName: <Finish>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_1::*)()>(&ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_1::$Finish$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_1*), "<Finish>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_1::*)()>(&ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_1::*)()>(&ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClientGameServerLobbyFlowCoordinator::$$c__DisplayClass17_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameServerBrowserFlowCoordinator
#include "GlobalNamespace/GameServerBrowserFlowCoordinator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameServerBrowserFlowCoordinator.DidActivate
void GlobalNamespace::GameServerBrowserFlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerBrowserFlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Writing MetadataGetter for method: GameServerBrowserFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerBrowserFlowCoordinator::*)(bool, bool, bool)>(&GameServerBrowserFlowCoordinator::DidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerBrowserFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameServerBrowserFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerBrowserFlowCoordinator::*)()>(&GameServerBrowserFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerBrowserFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerBrowserFlowCoordinator::*)()>(&GameServerBrowserFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerBrowserFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameServerLobbyFlowCoordinator
#include "GlobalNamespace/GameServerLobbyFlowCoordinator.hpp"
// Including type: HMUI.ScreenModeSO
#include "HMUI/ScreenModeSO.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: ServerPlayerListController
#include "GlobalNamespace/ServerPlayerListController.hpp"
// Including type: SelectModifiersViewController
#include "GlobalNamespace/SelectModifiersViewController.hpp"
// Including type: MultiplayerLevelSelectionFlowCoordinator
#include "GlobalNamespace/MultiplayerLevelSelectionFlowCoordinator.hpp"
// Including type: MultiplayerResultsViewController
#include "GlobalNamespace/MultiplayerResultsViewController.hpp"
// Including type: SimpleDialogPromptViewController
#include "GlobalNamespace/SimpleDialogPromptViewController.hpp"
// Including type: ConnectionErrorDialogViewController
#include "GlobalNamespace/ConnectionErrorDialogViewController.hpp"
// Including type: MultiplayerSettingsPanelController
#include "GlobalNamespace/MultiplayerSettingsPanelController.hpp"
// Including type: GameplaySetupViewController
#include "GlobalNamespace/GameplaySetupViewController.hpp"
// Including type: IMenuRpcManager
#include "GlobalNamespace/IMenuRpcManager.hpp"
// Including type: MultiplayerLobbyController
#include "GlobalNamespace/MultiplayerLobbyController.hpp"
// Including type: MultiplayerLobbyCenterStageManager
#include "GlobalNamespace/MultiplayerLobbyCenterStageManager.hpp"
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: CenterStageScreenController
#include "GlobalNamespace/CenterStageScreenController.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: ILobbyStateDataModel
#include "GlobalNamespace/ILobbyStateDataModel.hpp"
// Including type: ILobbyPlayersDataModel
#include "GlobalNamespace/ILobbyPlayersDataModel.hpp"
// Including type: ILobbyGameStateController
#include "GlobalNamespace/ILobbyGameStateController.hpp"
// Including type: HMUI.ScreenModeController
#include "HMUI/ScreenModeController.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: PlatformLeaderboardsModel
#include "GlobalNamespace/PlatformLeaderboardsModel.hpp"
// Including type: SongPreviewPlayer
#include "GlobalNamespace/SongPreviewPlayer.hpp"
// Including type: IAnalyticsModel
#include "GlobalNamespace/IAnalyticsModel.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: MultiplayerLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/MultiplayerLevelScenesTransitionSetupDataSO.hpp"
// Including type: MultiplayerResultsData
#include "GlobalNamespace/MultiplayerResultsData.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
// Including type: LevelSelectionFlowCoordinator/State
#include "GlobalNamespace/LevelSelectionFlowCoordinator_State.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameServerLobbyFlowCoordinator.Finish
void GlobalNamespace::GameServerLobbyFlowCoordinator::Finish(System::Action* finishedCallback, bool withFadeOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::Finish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(withFadeOut)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, finishedCallback, withFadeOut);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.PresentBackButtonConfirmationDialog
void GlobalNamespace::GameServerLobbyFlowCoordinator::PresentBackButtonConfirmationDialog() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::PresentBackButtonConfirmationDialog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentBackButtonConfirmationDialog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.HandleLobbySetupViewControllerSelectBeatmap
void GlobalNamespace::GameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectBeatmap");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbySetupViewControllerSelectBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged
void GlobalNamespace::GameServerLobbyFlowCoordinator::HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged(bool isActive) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isActive)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isActive);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.HandleLobbyGameStateControllerLobbyDisconnected
void GlobalNamespace::GameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLobbyDisconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLobbyDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerLobbyDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel
void GlobalNamespace::GameServerLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel(GlobalNamespace::LevelSelectionFlowCoordinator::State* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.HandleMultiplayerLevelSelectionFlowCoordinatorCancelSelectLevel
void GlobalNamespace::GameServerLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorCancelSelectLevel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorCancelSelectLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerLevelSelectionFlowCoordinatorCancelSelectLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.HandleLobbySetupViewControllerSelectModifiers
void GlobalNamespace::GameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbySetupViewControllerSelectModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.HandleLobbyGameStateControllerLevelFinished
void GlobalNamespace::GameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelScenesTransitionSetupData, GlobalNamespace::MultiplayerResultsData* multiplayerResultsData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerLevelFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerLevelScenesTransitionSetupData), ::il2cpp_utils::ExtractType(multiplayerResultsData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerLevelScenesTransitionSetupData, multiplayerResultsData);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.HandleLobbyGameStateControllerLevelDidGetDisconnected
void GlobalNamespace::GameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelDidGetDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelDidGetDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerLevelDidGetDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.HandleBackToLobbyPressed
void GlobalNamespace::GameServerLobbyFlowCoordinator::HandleBackToLobbyPressed(GlobalNamespace::MultiplayerResultsViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::HandleBackToLobbyPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBackToLobbyPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.ShowSideViewControllers
void GlobalNamespace::GameServerLobbyFlowCoordinator::ShowSideViewControllers(bool showSideViewControllers, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::ShowSideViewControllers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowSideViewControllers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(showSideViewControllers), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, showSideViewControllers, animationType);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.ShowBackButton
void GlobalNamespace::GameServerLobbyFlowCoordinator::ShowBackButton(bool show) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::ShowBackButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowBackButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(show)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, show);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.ShowDisconnectDialogAndFinish
void GlobalNamespace::GameServerLobbyFlowCoordinator::ShowDisconnectDialogAndFinish(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::ShowDisconnectDialogAndFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowDisconnectDialogAndFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.UpdateLocalPlayerIsActiveState
void GlobalNamespace::GameServerLobbyFlowCoordinator::UpdateLocalPlayerIsActiveState(bool isActive) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::UpdateLocalPlayerIsActiveState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLocalPlayerIsActiveState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isActive)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isActive);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.<PresentBackButtonConfirmationDialog>b__31_0
void GlobalNamespace::GameServerLobbyFlowCoordinator::$PresentBackButtonConfirmationDialog$b__31_0(int btnIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::<PresentBackButtonConfirmationDialog>b__31_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PresentBackButtonConfirmationDialog>b__31_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(btnIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, btnIndex);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.<ShowDisconnectDialogAndFinish>b__43_0
void GlobalNamespace::GameServerLobbyFlowCoordinator::$ShowDisconnectDialogAndFinish$b__43_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::<ShowDisconnectDialogAndFinish>b__43_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ShowDisconnectDialogAndFinish>b__43_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.DidActivate
void GlobalNamespace::GameServerLobbyFlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.DidDeactivate
void GlobalNamespace::GameServerLobbyFlowCoordinator::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.TransitionDidStart
void GlobalNamespace::GameServerLobbyFlowCoordinator::TransitionDidStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::TransitionDidStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionDidStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameServerLobbyFlowCoordinator.TransitionDidFinish
void GlobalNamespace::GameServerLobbyFlowCoordinator::TransitionDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::TransitionDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::Finish
// Il2CppName: Finish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)(System::Action*, bool)>(&GameServerLobbyFlowCoordinator::Finish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "Finish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::PresentBackButtonConfirmationDialog
// Il2CppName: PresentBackButtonConfirmationDialog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)()>(&GameServerLobbyFlowCoordinator::PresentBackButtonConfirmationDialog)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "PresentBackButtonConfirmationDialog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectBeatmap
// Il2CppName: HandleLobbySetupViewControllerSelectBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)()>(&GameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "HandleLobbySetupViewControllerSelectBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged
// Il2CppName: HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)(bool)>(&GameServerLobbyFlowCoordinator::HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLobbyDisconnected
// Il2CppName: HandleLobbyGameStateControllerLobbyDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)()>(&GameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLobbyDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "HandleLobbyGameStateControllerLobbyDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel
// Il2CppName: HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)(GlobalNamespace::LevelSelectionFlowCoordinator::State*)>(&GameServerLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelSelectionFlowCoordinator::State*>()});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorCancelSelectLevel
// Il2CppName: HandleMultiplayerLevelSelectionFlowCoordinatorCancelSelectLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)()>(&GameServerLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorCancelSelectLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "HandleMultiplayerLevelSelectionFlowCoordinatorCancelSelectLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectModifiers
// Il2CppName: HandleLobbySetupViewControllerSelectModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)()>(&GameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "HandleLobbySetupViewControllerSelectModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished
// Il2CppName: HandleLobbyGameStateControllerLevelFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*)>(&GameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "HandleLobbyGameStateControllerLevelFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerResultsData*>()});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelDidGetDisconnected
// Il2CppName: HandleLobbyGameStateControllerLevelDidGetDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)(GlobalNamespace::DisconnectedReason)>(&GameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelDidGetDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "HandleLobbyGameStateControllerLevelDidGetDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::HandleBackToLobbyPressed
// Il2CppName: HandleBackToLobbyPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)(GlobalNamespace::MultiplayerResultsViewController*)>(&GameServerLobbyFlowCoordinator::HandleBackToLobbyPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "HandleBackToLobbyPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::ShowSideViewControllers
// Il2CppName: ShowSideViewControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)(bool, HMUI::ViewController::AnimationType)>(&GameServerLobbyFlowCoordinator::ShowSideViewControllers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "ShowSideViewControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController::AnimationType>()});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::ShowBackButton
// Il2CppName: ShowBackButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)(bool)>(&GameServerLobbyFlowCoordinator::ShowBackButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "ShowBackButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::ShowDisconnectDialogAndFinish
// Il2CppName: ShowDisconnectDialogAndFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)(GlobalNamespace::DisconnectedReason)>(&GameServerLobbyFlowCoordinator::ShowDisconnectDialogAndFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "ShowDisconnectDialogAndFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::UpdateLocalPlayerIsActiveState
// Il2CppName: UpdateLocalPlayerIsActiveState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)(bool)>(&GameServerLobbyFlowCoordinator::UpdateLocalPlayerIsActiveState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "UpdateLocalPlayerIsActiveState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::$PresentBackButtonConfirmationDialog$b__31_0
// Il2CppName: <PresentBackButtonConfirmationDialog>b__31_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)(int)>(&GameServerLobbyFlowCoordinator::$PresentBackButtonConfirmationDialog$b__31_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "<PresentBackButtonConfirmationDialog>b__31_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::$ShowDisconnectDialogAndFinish$b__43_0
// Il2CppName: <ShowDisconnectDialogAndFinish>b__43_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)()>(&GameServerLobbyFlowCoordinator::$ShowDisconnectDialogAndFinish$b__43_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "<ShowDisconnectDialogAndFinish>b__43_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)(bool, bool, bool)>(&GameServerLobbyFlowCoordinator::DidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)(bool, bool)>(&GameServerLobbyFlowCoordinator::DidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::TransitionDidStart
// Il2CppName: TransitionDidStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)()>(&GameServerLobbyFlowCoordinator::TransitionDidStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "TransitionDidStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::TransitionDidFinish
// Il2CppName: TransitionDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)()>(&GameServerLobbyFlowCoordinator::TransitionDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), "TransitionDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameServerLobbyFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)()>(&GameServerLobbyFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServerLobbyFlowCoordinator::*)()>(&GameServerLobbyFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServerLobbyFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HostGameServerLobbyFlowCoordinator
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator.hpp"
// Including type: HostGameServerLobbyFlowCoordinator/<>c__DisplayClass23_0
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator_--c__DisplayClass23_0.hpp"
// Including type: HostGameServerLobbyFlowCoordinator/<>c__DisplayClass23_1
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator_--c__DisplayClass23_1.hpp"
// Including type: HostGameServerLobbyFlowCoordinator/<>c__DisplayClass33_0
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator_--c__DisplayClass33_0.hpp"
// Including type: HostGameServerLobbyFlowCoordinator/<>c__DisplayClass43_0
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator_--c__DisplayClass43_0.hpp"
// Including type: HostGameServerLobbyFlowCoordinator/<>c
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator_--c.hpp"
// Including type: HostGameServerLobbyFlowCoordinator/<UpdateMissingEntitlementsAsync>d__43
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator_-UpdateMissingEntitlementsAsync-d__43.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: SimpleDialogPromptViewController
#include "GlobalNamespace/SimpleDialogPromptViewController.hpp"
// Including type: IUnifiedNetworkPlayerModel
#include "GlobalNamespace/IUnifiedNetworkPlayerModel.hpp"
// Including type: ILobbyStateDataModel
#include "GlobalNamespace/ILobbyStateDataModel.hpp"
// Including type: ILobbyHostGameStateController
#include "GlobalNamespace/ILobbyHostGameStateController.hpp"
// Including type: LobbyGameState
#include "GlobalNamespace/LobbyGameState.hpp"
// Including type: NetworkPlayerEntitlementChecker
#include "GlobalNamespace/NetworkPlayerEntitlementChecker.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: MultiplayerResultsViewController
#include "GlobalNamespace/MultiplayerResultsViewController.hpp"
// Including type: MultiplayerLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/MultiplayerLevelScenesTransitionSetupDataSO.hpp"
// Including type: MultiplayerResultsData
#include "GlobalNamespace/MultiplayerResultsData.hpp"
// Including type: HostLobbySetupViewController/CannotStartGameReason
#include "GlobalNamespace/HostLobbySetupViewController_CannotStartGameReason.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
// Including type: LevelSelectionFlowCoordinator/State
#include "GlobalNamespace/LevelSelectionFlowCoordinator_State.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kAllReadyCountdown
float GlobalNamespace::HostGameServerLobbyFlowCoordinator::_get_kAllReadyCountdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::_get_kAllReadyCountdown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "HostGameServerLobbyFlowCoordinator", "kAllReadyCountdown"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kAllReadyCountdown
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::_set_kAllReadyCountdown(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::_set_kAllReadyCountdown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HostGameServerLobbyFlowCoordinator", "kAllReadyCountdown", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kNotReadyCountdown
float GlobalNamespace::HostGameServerLobbyFlowCoordinator::_get_kNotReadyCountdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::_get_kNotReadyCountdown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "HostGameServerLobbyFlowCoordinator", "kNotReadyCountdown"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kNotReadyCountdown
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::_set_kNotReadyCountdown(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::_set_kNotReadyCountdown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "HostGameServerLobbyFlowCoordinator", "kNotReadyCountdown", value));
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.add_willFinishEvent
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::add_willFinishEvent(System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::add_willFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_willFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.remove_willFinishEvent
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::remove_willFinishEvent(System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::remove_willFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_willFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.add_didFinishedEvent
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::add_didFinishedEvent(System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::add_didFinishedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.remove_didFinishedEvent
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::remove_didFinishedEvent(System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::remove_didFinishedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleLobbyPlayersDataModelDidChange
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbyPlayersDataModelDidChange(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbyPlayersDataModelDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyPlayersDataModelDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.SetLobbyPlayerDataToViews
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::SetLobbyPlayerDataToViews(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::SetLobbyPlayerDataToViews");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLobbyPlayerDataToViews", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleMenuRpcManagerSetIsReadyOnCountdown
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleMenuRpcManagerSetIsReadyOnCountdown(::Il2CppString* userId, bool isReady) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleMenuRpcManagerSetIsReadyOnCountdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerSetIsReadyOnCountdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(isReady)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, isReady);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleMenuRpcManagerSetIsInLobby
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleMenuRpcManagerSetIsInLobby(::Il2CppString* userId, bool backInLobby) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleMenuRpcManagerSetIsInLobby");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerSetIsInLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(backInLobby)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, backInLobby);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleLobbyStateDataModelPlayerConnected
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbyStateDataModelPlayerConnected(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbyStateDataModelPlayerConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyStateDataModelPlayerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleLobbyStateDataModelPlayerDisconnected
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbyStateDataModelPlayerDisconnected(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbyStateDataModelPlayerDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyStateDataModelPlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleServerPlayerListControllerSelectSuggestedBeatmap
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedBeatmap(::Il2CppString* levelId, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, GlobalNamespace::BeatmapDifficulty beatmapDifficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleServerPlayerListControllerSelectSuggestedBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId), ::il2cpp_utils::ExtractType(beatmapCharacteristic), ::il2cpp_utils::ExtractType(beatmapDifficulty)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelId, beatmapCharacteristic, beatmapDifficulty);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleServerPlayerListControllerSelectSuggestedGameplayModifiers
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedGameplayModifiers(GlobalNamespace::GameplayModifiers* modifiers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedGameplayModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleServerPlayerListControllerSelectSuggestedGameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(modifiers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, modifiers);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleServerPlayerListControllerKickPlayer
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerKickPlayer(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerKickPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleServerPlayerListControllerKickPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleHostLobbySetupViewControllerStartGame
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleHostLobbySetupViewControllerStartGame() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleHostLobbySetupViewControllerStartGame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHostLobbySetupViewControllerStartGame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleLobbyGameStateControllerStartTimeChanged
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerStartTimeChanged() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerStartTimeChanged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerStartTimeChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleLobbyGameStateControllerSongStillDownloading
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerSongStillDownloading() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerSongStillDownloading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerSongStillDownloading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleHostLobbySetupViewControllerCancelStartGame
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleHostLobbySetupViewControllerCancelStartGame() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleHostLobbySetupViewControllerCancelStartGame");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHostLobbySetupViewControllerCancelStartGame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleLobbyGameBeforeSceneSwitchCallback
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbyGameBeforeSceneSwitchCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbyGameBeforeSceneSwitchCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameBeforeSceneSwitchCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.UpdateGameStartTime
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::UpdateGameStartTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::UpdateGameStartTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateGameStartTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.UpdateStartGameEnabledState
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::UpdateStartGameEnabledState() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::UpdateStartGameEnabledState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStartGameEnabledState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.UpdateMissingEntitlementsAsync
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::UpdateMissingEntitlementsAsync(::Il2CppString* levelId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::UpdateMissingEntitlementsAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMissingEntitlementsAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelId);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.DismissViewControllersAndCoordinators
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::DismissViewControllersAndCoordinators() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::DismissViewControllersAndCoordinators");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DismissViewControllersAndCoordinators", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.DismissStartGameIfAllPlayersSpectating
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::DismissStartGameIfAllPlayersSpectating() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::DismissStartGameIfAllPlayersSpectating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DismissStartGameIfAllPlayersSpectating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.ResolveCannotStartGameReason
GlobalNamespace::HostLobbySetupViewController::CannotStartGameReason GlobalNamespace::HostGameServerLobbyFlowCoordinator::ResolveCannotStartGameReason(bool allPlayersInLobby, bool somePlayersActive) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::ResolveCannotStartGameReason");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveCannotStartGameReason", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(allPlayersInLobby), ::il2cpp_utils::ExtractType(somePlayersActive)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::HostLobbySetupViewController::CannotStartGameReason, false>(this, ___internal__method, allPlayersInLobby, somePlayersActive);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.CheckIfAllPlayersAreReady
bool GlobalNamespace::HostGameServerLobbyFlowCoordinator::CheckIfAllPlayersAreReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::CheckIfAllPlayersAreReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CheckIfAllPlayersAreReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.<DismissStartGameIfAllPlayersSpectating>b__45_0
bool GlobalNamespace::HostGameServerLobbyFlowCoordinator::$DismissStartGameIfAllPlayersSpectating$b__45_0(bool current, GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::<DismissStartGameIfAllPlayersSpectating>b__45_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DismissStartGameIfAllPlayersSpectating>b__45_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current), ::il2cpp_utils::ExtractType(player)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, current, player);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.DidActivate
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.DidDeactivate
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.TopViewControllerWillChange
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::TopViewControllerWillChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TopViewControllerWillChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldViewController), ::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldViewController, newViewController, animationType);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.BackButtonWasPressed
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::BackButtonWasPressed(HMUI::ViewController* topViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::BackButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(topViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, topViewController);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleLobbySetupViewControllerSelectBeatmap
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectBeatmap");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbySetupViewControllerSelectBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel(GlobalNamespace::LevelSelectionFlowCoordinator::State* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.Finish
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::Finish(System::Action* finishedCallback, bool withFadeOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::Finish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(withFadeOut)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, finishedCallback, withFadeOut);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleBackToLobbyPressed
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleBackToLobbyPressed(GlobalNamespace::MultiplayerResultsViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleBackToLobbyPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBackToLobbyPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged(bool isActive) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isActive)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isActive);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator.HandleLobbyGameStateControllerLevelFinished
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelScenesTransitionSetupData, GlobalNamespace::MultiplayerResultsData* multiplayerResultsData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerLevelFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerLevelScenesTransitionSetupData), ::il2cpp_utils::ExtractType(multiplayerResultsData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerLevelScenesTransitionSetupData, multiplayerResultsData);
}
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::add_willFinishEvent
// Il2CppName: add_willFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>*)>(&HostGameServerLobbyFlowCoordinator::add_willFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "add_willFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::remove_willFinishEvent
// Il2CppName: remove_willFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>*)>(&HostGameServerLobbyFlowCoordinator::remove_willFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "remove_willFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::add_didFinishedEvent
// Il2CppName: add_didFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>*)>(&HostGameServerLobbyFlowCoordinator::add_didFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "add_didFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::remove_didFinishedEvent
// Il2CppName: remove_didFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>*)>(&HostGameServerLobbyFlowCoordinator::remove_didFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "remove_didFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleLobbyPlayersDataModelDidChange
// Il2CppName: HandleLobbyPlayersDataModelDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(::Il2CppString*)>(&HostGameServerLobbyFlowCoordinator::HandleLobbyPlayersDataModelDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleLobbyPlayersDataModelDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::SetLobbyPlayerDataToViews
// Il2CppName: SetLobbyPlayerDataToViews
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(::Il2CppString*)>(&HostGameServerLobbyFlowCoordinator::SetLobbyPlayerDataToViews)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "SetLobbyPlayerDataToViews", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleMenuRpcManagerSetIsReadyOnCountdown
// Il2CppName: HandleMenuRpcManagerSetIsReadyOnCountdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(::Il2CppString*, bool)>(&HostGameServerLobbyFlowCoordinator::HandleMenuRpcManagerSetIsReadyOnCountdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleMenuRpcManagerSetIsReadyOnCountdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleMenuRpcManagerSetIsInLobby
// Il2CppName: HandleMenuRpcManagerSetIsInLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(::Il2CppString*, bool)>(&HostGameServerLobbyFlowCoordinator::HandleMenuRpcManagerSetIsInLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleMenuRpcManagerSetIsInLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleLobbyStateDataModelPlayerConnected
// Il2CppName: HandleLobbyStateDataModelPlayerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(GlobalNamespace::IConnectedPlayer*)>(&HostGameServerLobbyFlowCoordinator::HandleLobbyStateDataModelPlayerConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleLobbyStateDataModelPlayerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleLobbyStateDataModelPlayerDisconnected
// Il2CppName: HandleLobbyStateDataModelPlayerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(GlobalNamespace::IConnectedPlayer*)>(&HostGameServerLobbyFlowCoordinator::HandleLobbyStateDataModelPlayerDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleLobbyStateDataModelPlayerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedBeatmap
// Il2CppName: HandleServerPlayerListControllerSelectSuggestedBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(::Il2CppString*, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::BeatmapDifficulty)>(&HostGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleServerPlayerListControllerSelectSuggestedBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedGameplayModifiers
// Il2CppName: HandleServerPlayerListControllerSelectSuggestedGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(GlobalNamespace::GameplayModifiers*)>(&HostGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedGameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleServerPlayerListControllerSelectSuggestedGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerKickPlayer
// Il2CppName: HandleServerPlayerListControllerKickPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(::Il2CppString*)>(&HostGameServerLobbyFlowCoordinator::HandleServerPlayerListControllerKickPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleServerPlayerListControllerKickPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleHostLobbySetupViewControllerStartGame
// Il2CppName: HandleHostLobbySetupViewControllerStartGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)()>(&HostGameServerLobbyFlowCoordinator::HandleHostLobbySetupViewControllerStartGame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleHostLobbySetupViewControllerStartGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerStartTimeChanged
// Il2CppName: HandleLobbyGameStateControllerStartTimeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)()>(&HostGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerStartTimeChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleLobbyGameStateControllerStartTimeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerSongStillDownloading
// Il2CppName: HandleLobbyGameStateControllerSongStillDownloading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)()>(&HostGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerSongStillDownloading)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleLobbyGameStateControllerSongStillDownloading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleHostLobbySetupViewControllerCancelStartGame
// Il2CppName: HandleHostLobbySetupViewControllerCancelStartGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)()>(&HostGameServerLobbyFlowCoordinator::HandleHostLobbySetupViewControllerCancelStartGame)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleHostLobbySetupViewControllerCancelStartGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleLobbyGameBeforeSceneSwitchCallback
// Il2CppName: HandleLobbyGameBeforeSceneSwitchCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)()>(&HostGameServerLobbyFlowCoordinator::HandleLobbyGameBeforeSceneSwitchCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleLobbyGameBeforeSceneSwitchCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::UpdateGameStartTime
// Il2CppName: UpdateGameStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)()>(&HostGameServerLobbyFlowCoordinator::UpdateGameStartTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "UpdateGameStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::UpdateStartGameEnabledState
// Il2CppName: UpdateStartGameEnabledState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)()>(&HostGameServerLobbyFlowCoordinator::UpdateStartGameEnabledState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "UpdateStartGameEnabledState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::UpdateMissingEntitlementsAsync
// Il2CppName: UpdateMissingEntitlementsAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(::Il2CppString*)>(&HostGameServerLobbyFlowCoordinator::UpdateMissingEntitlementsAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "UpdateMissingEntitlementsAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::DismissViewControllersAndCoordinators
// Il2CppName: DismissViewControllersAndCoordinators
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)()>(&HostGameServerLobbyFlowCoordinator::DismissViewControllersAndCoordinators)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "DismissViewControllersAndCoordinators", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::DismissStartGameIfAllPlayersSpectating
// Il2CppName: DismissStartGameIfAllPlayersSpectating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)()>(&HostGameServerLobbyFlowCoordinator::DismissStartGameIfAllPlayersSpectating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "DismissStartGameIfAllPlayersSpectating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::ResolveCannotStartGameReason
// Il2CppName: ResolveCannotStartGameReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::HostLobbySetupViewController::CannotStartGameReason (HostGameServerLobbyFlowCoordinator::*)(bool, bool)>(&HostGameServerLobbyFlowCoordinator::ResolveCannotStartGameReason)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "ResolveCannotStartGameReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::CheckIfAllPlayersAreReady
// Il2CppName: CheckIfAllPlayersAreReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HostGameServerLobbyFlowCoordinator::*)()>(&HostGameServerLobbyFlowCoordinator::CheckIfAllPlayersAreReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "CheckIfAllPlayersAreReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$DismissStartGameIfAllPlayersSpectating$b__45_0
// Il2CppName: <DismissStartGameIfAllPlayersSpectating>b__45_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HostGameServerLobbyFlowCoordinator::*)(bool, GlobalNamespace::IConnectedPlayer*)>(&HostGameServerLobbyFlowCoordinator::$DismissStartGameIfAllPlayersSpectating$b__45_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "<DismissStartGameIfAllPlayersSpectating>b__45_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(bool, bool, bool)>(&HostGameServerLobbyFlowCoordinator::DidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(bool, bool)>(&HostGameServerLobbyFlowCoordinator::DidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::TopViewControllerWillChange
// Il2CppName: TopViewControllerWillChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&HostGameServerLobbyFlowCoordinator::TopViewControllerWillChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "TopViewControllerWillChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController::AnimationType>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::BackButtonWasPressed
// Il2CppName: BackButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(HMUI::ViewController*)>(&HostGameServerLobbyFlowCoordinator::BackButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "BackButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectBeatmap
// Il2CppName: HandleLobbySetupViewControllerSelectBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)()>(&HostGameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleLobbySetupViewControllerSelectBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel
// Il2CppName: HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(GlobalNamespace::LevelSelectionFlowCoordinator::State*)>(&HostGameServerLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelSelectionFlowCoordinator::State*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::Finish
// Il2CppName: Finish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(System::Action*, bool)>(&HostGameServerLobbyFlowCoordinator::Finish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "Finish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleBackToLobbyPressed
// Il2CppName: HandleBackToLobbyPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(GlobalNamespace::MultiplayerResultsViewController*)>(&HostGameServerLobbyFlowCoordinator::HandleBackToLobbyPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleBackToLobbyPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged
// Il2CppName: HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(bool)>(&HostGameServerLobbyFlowCoordinator::HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished
// Il2CppName: HandleLobbyGameStateControllerLevelFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*)>(&HostGameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), "HandleLobbyGameStateControllerLevelFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerResultsData*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)()>(&HostGameServerLobbyFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::*)()>(&HostGameServerLobbyFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HostGameServerLobbyFlowCoordinator/<>c__DisplayClass23_0
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator_--c__DisplayClass23_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_0::*)()>(&HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_0::*)()>(&HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HostGameServerLobbyFlowCoordinator/<>c__DisplayClass23_1
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator_--c__DisplayClass23_1.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: HostGameServerLobbyFlowCoordinator/<>c__DisplayClass23_0
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator_--c__DisplayClass23_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HostGameServerLobbyFlowCoordinator/<>c__DisplayClass23_1.<Finish>b__0
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_1::$Finish$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_1::<Finish>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Finish>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_1::$Finish$b__0
// Il2CppName: <Finish>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_1::*)()>(&HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_1::$Finish$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_1*), "<Finish>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_1::*)()>(&HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_1::*)()>(&HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c__DisplayClass23_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HostGameServerLobbyFlowCoordinator/<>c__DisplayClass33_0
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator_--c__DisplayClass33_0.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HostGameServerLobbyFlowCoordinator/<>c__DisplayClass33_0.<HandleServerPlayerListControllerKickPlayer>b__0
bool GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0::$HandleServerPlayerListControllerKickPlayer$b__0(GlobalNamespace::INetworkPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0::<HandleServerPlayerListControllerKickPlayer>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleServerPlayerListControllerKickPlayer>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, player);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator/<>c__DisplayClass33_0.<HandleServerPlayerListControllerKickPlayer>b__1
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0::$HandleServerPlayerListControllerKickPlayer$b__1(int btnId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0::<HandleServerPlayerListControllerKickPlayer>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleServerPlayerListControllerKickPlayer>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(btnId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, btnId);
}
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0::$HandleServerPlayerListControllerKickPlayer$b__0
// Il2CppName: <HandleServerPlayerListControllerKickPlayer>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0::*)(GlobalNamespace::INetworkPlayer*)>(&HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0::$HandleServerPlayerListControllerKickPlayer$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0*), "<HandleServerPlayerListControllerKickPlayer>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkPlayer*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0::$HandleServerPlayerListControllerKickPlayer$b__1
// Il2CppName: <HandleServerPlayerListControllerKickPlayer>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0::*)(int)>(&HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0::$HandleServerPlayerListControllerKickPlayer$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0*), "<HandleServerPlayerListControllerKickPlayer>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0::*)()>(&HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0::*)()>(&HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c__DisplayClass33_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HostGameServerLobbyFlowCoordinator/<>c__DisplayClass43_0
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator_--c__DisplayClass43_0.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HostGameServerLobbyFlowCoordinator/<>c__DisplayClass43_0.<UpdateMissingEntitlementsAsync>b__1
System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>* GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c__DisplayClass43_0::$UpdateMissingEntitlementsAsync$b__1(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c__DisplayClass43_0::<UpdateMissingEntitlementsAsync>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<UpdateMissingEntitlementsAsync>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>*, false>(this, ___internal__method, player);
}
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c__DisplayClass43_0::$UpdateMissingEntitlementsAsync$b__1
// Il2CppName: <UpdateMissingEntitlementsAsync>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>* (HostGameServerLobbyFlowCoordinator::$$c__DisplayClass43_0::*)(GlobalNamespace::IConnectedPlayer*)>(&HostGameServerLobbyFlowCoordinator::$$c__DisplayClass43_0::$UpdateMissingEntitlementsAsync$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c__DisplayClass43_0*), "<UpdateMissingEntitlementsAsync>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c__DisplayClass43_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$$c__DisplayClass43_0::*)()>(&HostGameServerLobbyFlowCoordinator::$$c__DisplayClass43_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c__DisplayClass43_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$$c__DisplayClass43_0::*)()>(&HostGameServerLobbyFlowCoordinator::$$c__DisplayClass43_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c__DisplayClass43_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HostGameServerLobbyFlowCoordinator/<>c
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator_--c.hpp"
// Including type: HostGameServerLobbyFlowCoordinator/<>c/<<UpdateMissingEntitlementsAsync>b__43_2>d
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator_--c_--UpdateMissingEntitlementsAsync-b__43_2-d.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
// Including type: ILobbyPlayerDataModel
#include "GlobalNamespace/ILobbyPlayerDataModel.hpp"
// Including type: System.Func`3
#include "System/Func_3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly HostGameServerLobbyFlowCoordinator/<>c <>9
GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c* GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c*>("", "HostGameServerLobbyFlowCoordinator/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly HostGameServerLobbyFlowCoordinator/<>c <>9
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_set_$$9(GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "HostGameServerLobbyFlowCoordinator/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<IConnectedPlayer,IConnectedPlayer> <>9__43_0
System::Func_2<GlobalNamespace::IConnectedPlayer*, GlobalNamespace::IConnectedPlayer*>* GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_get_$$9__43_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_get_$$9__43_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::IConnectedPlayer*, GlobalNamespace::IConnectedPlayer*>*>("", "HostGameServerLobbyFlowCoordinator/<>c", "<>9__43_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<IConnectedPlayer,IConnectedPlayer> <>9__43_0
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_set_$$9__43_0(System::Func_2<GlobalNamespace::IConnectedPlayer*, GlobalNamespace::IConnectedPlayer*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_set_$$9__43_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "HostGameServerLobbyFlowCoordinator/<>c", "<>9__43_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Collections.Generic.KeyValuePair`2<IConnectedPlayer,System.Threading.Tasks.Task`1<EntitlementsStatus>>,System.Threading.Tasks.Task`1<System.Collections.Generic.KeyValuePair`2<IConnectedPlayer,EntitlementsStatus>>> <>9__43_2
System::Func_2<System::Collections::Generic::KeyValuePair_2<GlobalNamespace::IConnectedPlayer*, System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>*>, System::Threading::Tasks::Task_1<System::Collections::Generic::KeyValuePair_2<GlobalNamespace::IConnectedPlayer*, GlobalNamespace::EntitlementsStatus>>*>* GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_get_$$9__43_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_get_$$9__43_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Collections::Generic::KeyValuePair_2<GlobalNamespace::IConnectedPlayer*, System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>*>, System::Threading::Tasks::Task_1<System::Collections::Generic::KeyValuePair_2<GlobalNamespace::IConnectedPlayer*, GlobalNamespace::EntitlementsStatus>>*>*>("", "HostGameServerLobbyFlowCoordinator/<>c", "<>9__43_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Collections.Generic.KeyValuePair`2<IConnectedPlayer,System.Threading.Tasks.Task`1<EntitlementsStatus>>,System.Threading.Tasks.Task`1<System.Collections.Generic.KeyValuePair`2<IConnectedPlayer,EntitlementsStatus>>> <>9__43_2
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_set_$$9__43_2(System::Func_2<System::Collections::Generic::KeyValuePair_2<GlobalNamespace::IConnectedPlayer*, System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>*>, System::Threading::Tasks::Task_1<System::Collections::Generic::KeyValuePair_2<GlobalNamespace::IConnectedPlayer*, GlobalNamespace::EntitlementsStatus>>*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_set_$$9__43_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "HostGameServerLobbyFlowCoordinator/<>c", "<>9__43_2", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Collections.Generic.KeyValuePair`2<System.String,ILobbyPlayerDataModel>,System.Boolean> <>9__47_0
System::Func_2<System::Collections::Generic::KeyValuePair_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>, bool>* GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_get_$$9__47_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_get_$$9__47_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Collections::Generic::KeyValuePair_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>, bool>*>("", "HostGameServerLobbyFlowCoordinator/<>c", "<>9__47_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Collections.Generic.KeyValuePair`2<System.String,ILobbyPlayerDataModel>,System.Boolean> <>9__47_0
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_set_$$9__47_0(System::Func_2<System::Collections::Generic::KeyValuePair_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_set_$$9__47_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "HostGameServerLobbyFlowCoordinator/<>c", "<>9__47_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`3<System.Boolean,System.Collections.Generic.KeyValuePair`2<System.String,ILobbyPlayerDataModel>,System.Boolean> <>9__47_1
System::Func_3<bool, System::Collections::Generic::KeyValuePair_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>, bool>* GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_get_$$9__47_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_get_$$9__47_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_3<bool, System::Collections::Generic::KeyValuePair_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>, bool>*>("", "HostGameServerLobbyFlowCoordinator/<>c", "<>9__47_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`3<System.Boolean,System.Collections.Generic.KeyValuePair`2<System.String,ILobbyPlayerDataModel>,System.Boolean> <>9__47_1
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_set_$$9__47_1(System::Func_3<bool, System::Collections::Generic::KeyValuePair_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_set_$$9__47_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "HostGameServerLobbyFlowCoordinator/<>c", "<>9__47_1", value)));
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator/<>c..cctor
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "HostGameServerLobbyFlowCoordinator/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator/<>c.<UpdateMissingEntitlementsAsync>b__43_0
GlobalNamespace::IConnectedPlayer* GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::$UpdateMissingEntitlementsAsync$b__43_0(GlobalNamespace::IConnectedPlayer* player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::<UpdateMissingEntitlementsAsync>b__43_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<UpdateMissingEntitlementsAsync>b__43_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::IConnectedPlayer*, false>(this, ___internal__method, player);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator/<>c.<UpdateMissingEntitlementsAsync>b__43_2
System::Threading::Tasks::Task_1<System::Collections::Generic::KeyValuePair_2<GlobalNamespace::IConnectedPlayer*, GlobalNamespace::EntitlementsStatus>>* GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::$UpdateMissingEntitlementsAsync$b__43_2(System::Collections::Generic::KeyValuePair_2<GlobalNamespace::IConnectedPlayer*, System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>*> pair) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::<UpdateMissingEntitlementsAsync>b__43_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<UpdateMissingEntitlementsAsync>b__43_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pair)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<System::Collections::Generic::KeyValuePair_2<GlobalNamespace::IConnectedPlayer*, GlobalNamespace::EntitlementsStatus>>*, false>(this, ___internal__method, pair);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator/<>c.<CheckIfAllPlayersAreReady>b__47_0
bool GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::$CheckIfAllPlayersAreReady$b__47_0(System::Collections::Generic::KeyValuePair_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*> keyPlayerPair) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::<CheckIfAllPlayersAreReady>b__47_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CheckIfAllPlayersAreReady>b__47_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(keyPlayerPair)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, keyPlayerPair);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator/<>c.<CheckIfAllPlayersAreReady>b__47_1
bool GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::$CheckIfAllPlayersAreReady$b__47_1(bool current, System::Collections::Generic::KeyValuePair_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*> player) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::<CheckIfAllPlayersAreReady>b__47_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CheckIfAllPlayersAreReady>b__47_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current), ::il2cpp_utils::ExtractType(player)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, current, player);
}
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HostGameServerLobbyFlowCoordinator::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c::$UpdateMissingEntitlementsAsync$b__43_0
// Il2CppName: <UpdateMissingEntitlementsAsync>b__43_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (HostGameServerLobbyFlowCoordinator::$$c::*)(GlobalNamespace::IConnectedPlayer*)>(&HostGameServerLobbyFlowCoordinator::$$c::$UpdateMissingEntitlementsAsync$b__43_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c*), "<UpdateMissingEntitlementsAsync>b__43_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c::$UpdateMissingEntitlementsAsync$b__43_2
// Il2CppName: <UpdateMissingEntitlementsAsync>b__43_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<System::Collections::Generic::KeyValuePair_2<GlobalNamespace::IConnectedPlayer*, GlobalNamespace::EntitlementsStatus>>* (HostGameServerLobbyFlowCoordinator::$$c::*)(System::Collections::Generic::KeyValuePair_2<GlobalNamespace::IConnectedPlayer*, System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>*>)>(&HostGameServerLobbyFlowCoordinator::$$c::$UpdateMissingEntitlementsAsync$b__43_2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c*), "<UpdateMissingEntitlementsAsync>b__43_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::KeyValuePair_2<GlobalNamespace::IConnectedPlayer*, System::Threading::Tasks::Task_1<GlobalNamespace::EntitlementsStatus>*>>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c::$CheckIfAllPlayersAreReady$b__47_0
// Il2CppName: <CheckIfAllPlayersAreReady>b__47_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HostGameServerLobbyFlowCoordinator::$$c::*)(System::Collections::Generic::KeyValuePair_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>)>(&HostGameServerLobbyFlowCoordinator::$$c::$CheckIfAllPlayersAreReady$b__47_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c*), "<CheckIfAllPlayersAreReady>b__47_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::KeyValuePair_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c::$CheckIfAllPlayersAreReady$b__47_1
// Il2CppName: <CheckIfAllPlayersAreReady>b__47_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HostGameServerLobbyFlowCoordinator::$$c::*)(bool, System::Collections::Generic::KeyValuePair_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>)>(&HostGameServerLobbyFlowCoordinator::$$c::$CheckIfAllPlayersAreReady$b__47_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c*), "<CheckIfAllPlayersAreReady>b__47_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::KeyValuePair_2<::Il2CppString*, GlobalNamespace::ILobbyPlayerDataModel*>>()});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$$c::*)()>(&HostGameServerLobbyFlowCoordinator::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$$c::*)()>(&HostGameServerLobbyFlowCoordinator::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HostGameServerLobbyFlowCoordinator/<>c/<<UpdateMissingEntitlementsAsync>b__43_2>d
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator_--c_--UpdateMissingEntitlementsAsync-b__43_2-d.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HostGameServerLobbyFlowCoordinator/<>c/<<UpdateMissingEntitlementsAsync>b__43_2>d.MoveNext
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::$$UpdateMissingEntitlementsAsync$b__43_2$d::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::$$UpdateMissingEntitlementsAsync$b__43_2$d::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator/<>c/<<UpdateMissingEntitlementsAsync>b__43_2>d.SetStateMachine
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::$$UpdateMissingEntitlementsAsync$b__43_2$d::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c::$$UpdateMissingEntitlementsAsync$b__43_2$d::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c::$$UpdateMissingEntitlementsAsync$b__43_2$d::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$$c::$$UpdateMissingEntitlementsAsync$b__43_2$d::*)()>(&HostGameServerLobbyFlowCoordinator::$$c::$$UpdateMissingEntitlementsAsync$b__43_2$d::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c::$$UpdateMissingEntitlementsAsync$b__43_2$d), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$$c::$$UpdateMissingEntitlementsAsync$b__43_2$d::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$$c::$$UpdateMissingEntitlementsAsync$b__43_2$d::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&HostGameServerLobbyFlowCoordinator::$$c::$$UpdateMissingEntitlementsAsync$b__43_2$d::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$$c::$$UpdateMissingEntitlementsAsync$b__43_2$d), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HostGameServerLobbyFlowCoordinator/<UpdateMissingEntitlementsAsync>d__43
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator_-UpdateMissingEntitlementsAsync-d__43.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HostGameServerLobbyFlowCoordinator/<UpdateMissingEntitlementsAsync>d__43.MoveNext
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::$UpdateMissingEntitlementsAsync$d__43::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$UpdateMissingEntitlementsAsync$d__43::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: HostGameServerLobbyFlowCoordinator/<UpdateMissingEntitlementsAsync>d__43.SetStateMachine
void GlobalNamespace::HostGameServerLobbyFlowCoordinator::$UpdateMissingEntitlementsAsync$d__43::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::$UpdateMissingEntitlementsAsync$d__43::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$UpdateMissingEntitlementsAsync$d__43::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$UpdateMissingEntitlementsAsync$d__43::*)()>(&HostGameServerLobbyFlowCoordinator::$UpdateMissingEntitlementsAsync$d__43::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$UpdateMissingEntitlementsAsync$d__43), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HostGameServerLobbyFlowCoordinator::$UpdateMissingEntitlementsAsync$d__43::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HostGameServerLobbyFlowCoordinator::$UpdateMissingEntitlementsAsync$d__43::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&HostGameServerLobbyFlowCoordinator::$UpdateMissingEntitlementsAsync$d__43::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HostGameServerLobbyFlowCoordinator::$UpdateMissingEntitlementsAsync$d__43), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerModeSelectionFlowCoordinator
#include "GlobalNamespace/MultiplayerModeSelectionFlowCoordinator.hpp"
// Including type: MultiplayerModeSelectionFlowCoordinator/<TryShowModeSelection>d__53
#include "GlobalNamespace/MultiplayerModeSelectionFlowCoordinator_-TryShowModeSelection-d__53.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: SongPackMaskModelSO
#include "GlobalNamespace/SongPackMaskModelSO.hpp"
// Including type: GameServerBrowserFlowCoordinator
#include "GlobalNamespace/GameServerBrowserFlowCoordinator.hpp"
// Including type: HostGameServerLobbyFlowCoordinator
#include "GlobalNamespace/HostGameServerLobbyFlowCoordinator.hpp"
// Including type: ClientGameServerLobbyFlowCoordinator
#include "GlobalNamespace/ClientGameServerLobbyFlowCoordinator.hpp"
// Including type: QuickPlayLobbyFlowCoordinator
#include "GlobalNamespace/QuickPlayLobbyFlowCoordinator.hpp"
// Including type: INetworkPlayerModel
#include "GlobalNamespace/INetworkPlayerModel.hpp"
// Including type: CreateServerViewController
#include "GlobalNamespace/CreateServerViewController.hpp"
// Including type: JoinQuickPlayViewController
#include "GlobalNamespace/JoinQuickPlayViewController.hpp"
// Including type: ServerCodeEntryViewController
#include "GlobalNamespace/ServerCodeEntryViewController.hpp"
// Including type: SimpleDialogPromptViewController
#include "GlobalNamespace/SimpleDialogPromptViewController.hpp"
// Including type: JoiningLobbyViewController
#include "GlobalNamespace/JoiningLobbyViewController.hpp"
// Including type: IUnifiedNetworkPlayerModel
#include "GlobalNamespace/IUnifiedNetworkPlayerModel.hpp"
// Including type: AvatarDataModel
#include "GlobalNamespace/AvatarDataModel.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: LobbyDataModelsManager
#include "GlobalNamespace/LobbyDataModelsManager.hpp"
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
// Including type: IMasterServerAvailabilityModel
#include "GlobalNamespace/IMasterServerAvailabilityModel.hpp"
// Including type: IMasterServerQuickPlaySetupModel
#include "GlobalNamespace/IMasterServerQuickPlaySetupModel.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: SongPreviewPlayer
#include "GlobalNamespace/SongPreviewPlayer.hpp"
// Including type: IAnalyticsModel
#include "GlobalNamespace/IAnalyticsModel.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Threading.CancellationTokenSource
#include "System/Threading/CancellationTokenSource.hpp"
// Including type: System.Threading.Tasks.TaskCompletionSource`1
#include "System/Threading/Tasks/TaskCompletionSource_1.hpp"
// Including type: MasterServerQuickPlaySetupData
#include "GlobalNamespace/MasterServerQuickPlaySetupData.hpp"
// Including type: SelectMultiplayerLobbyDestination
#include "GlobalNamespace/SelectMultiplayerLobbyDestination.hpp"
// Including type: MultiplayerUnavailableReason
#include "GlobalNamespace/MultiplayerUnavailableReason.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: MultiplayerLobbyConnectionController/LobbyConnectionType
#include "GlobalNamespace/MultiplayerLobbyConnectionController.hpp"
// Including type: MultiplayerModeSelectionViewController/MenuButton
#include "GlobalNamespace/MultiplayerModeSelectionViewController.hpp"
// Including type: UnifiedNetworkPlayerModel/CreatePartyConfig
#include "GlobalNamespace/UnifiedNetworkPlayerModel_CreatePartyConfig.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.add_didFinishEvent
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::add_didFinishEvent(System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::add_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.remove_didFinishEvent
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::remove_didFinishEvent(System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::remove_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.Setup
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::Setup(GlobalNamespace::SelectMultiplayerLobbyDestination* lobbyDestination) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lobbyDestination)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lobbyDestination);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleMultiplayerLobbyConnectionControllerConnectionSuccess
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionSuccess() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionSuccess");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerLobbyConnectionControllerConnectionSuccess", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleMultiplayerLobbyConnectionControllerConnectionFailed
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionFailed(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType connectionType, GlobalNamespace::ConnectionFailedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionFailed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerLobbyConnectionControllerConnectionFailed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectionType), ::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectionType, reason);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleMultiplayerLobbyControllerDidFinish
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyControllerDidFinish(GlobalNamespace::MultiplayerModeSelectionViewController* viewController, GlobalNamespace::MultiplayerModeSelectionViewController::MenuButton menuButton) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerLobbyControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(menuButton)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, menuButton);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleGameServerBrowserFlowCoordinatorDidFinish
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleGameServerBrowserFlowCoordinatorDidFinish(GlobalNamespace::GameServerBrowserFlowCoordinator* flowCoordinator) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleGameServerBrowserFlowCoordinatorDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameServerBrowserFlowCoordinatorDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flowCoordinator);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleJoiningLobbyViewControllerDidFinish
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleJoiningLobbyViewControllerDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleJoiningLobbyViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleJoiningLobbyViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleJoinQuickPlayViewControllerDidFinish
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleJoinQuickPlayViewControllerDidFinish(bool success) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleJoinQuickPlayViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleJoinQuickPlayViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(success)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, success);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleServerCodeEntryViewControllerDidFinish
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleServerCodeEntryViewControllerDidFinish(bool success, ::Il2CppString* code) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleServerCodeEntryViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleServerCodeEntryViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(success), ::il2cpp_utils::ExtractType(code)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, success, code);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleCreateServerViewControllerDidFinish
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleCreateServerViewControllerDidFinish(bool success, GlobalNamespace::UnifiedNetworkPlayerModel::CreatePartyConfig* createPartyConfig) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleCreateServerViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCreateServerViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(success), ::il2cpp_utils::ExtractType(createPartyConfig)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, success, createPartyConfig);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleClientGameServerLobbyFlowCoordinatorDidFinish
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleClientGameServerLobbyFlowCoordinatorDidFinish(GlobalNamespace::ClientGameServerLobbyFlowCoordinator* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleClientGameServerLobbyFlowCoordinatorDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleClientGameServerLobbyFlowCoordinatorDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleClientGameServerLobbyFlowCoordinatorWillFinish
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleClientGameServerLobbyFlowCoordinatorWillFinish(GlobalNamespace::ClientGameServerLobbyFlowCoordinator* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleClientGameServerLobbyFlowCoordinatorWillFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleClientGameServerLobbyFlowCoordinatorWillFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, obj);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleQuickPlayLobbyFlowCoordinatorDidFinish
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleQuickPlayLobbyFlowCoordinatorDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleQuickPlayLobbyFlowCoordinatorDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleQuickPlayLobbyFlowCoordinatorDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleQuickPlayLobbyFlowCoordinatorWillFinish
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleQuickPlayLobbyFlowCoordinatorWillFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleQuickPlayLobbyFlowCoordinatorWillFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleQuickPlayLobbyFlowCoordinatorWillFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleHostGameServerLobbyFlowCoordinatorDidFinish
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleHostGameServerLobbyFlowCoordinatorDidFinish(GlobalNamespace::HostGameServerLobbyFlowCoordinator* flowCoordinator) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleHostGameServerLobbyFlowCoordinatorDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHostGameServerLobbyFlowCoordinatorDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flowCoordinator);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleHostGameServerLobbyFlowCoordinatorWillFinish
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleHostGameServerLobbyFlowCoordinatorWillFinish(GlobalNamespace::HostGameServerLobbyFlowCoordinator* flowCoordinator) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleHostGameServerLobbyFlowCoordinatorWillFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHostGameServerLobbyFlowCoordinatorWillFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(flowCoordinator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, flowCoordinator);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.HandleConnectedPlayerManagerCreated
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleConnectedPlayerManagerCreated(GlobalNamespace::INetworkPlayerModel* networkPlayerModel) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::HandleConnectedPlayerManagerCreated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleConnectedPlayerManagerCreated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(networkPlayerModel)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, networkPlayerModel);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.TryShowModeSelection
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TryShowModeSelection(bool shouldProvideInitialViewControllers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TryShowModeSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryShowModeSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(shouldProvideInitialViewControllers)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, shouldProvideInitialViewControllers);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.ResolveAndPresentNextFlowCoordinator
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::ResolveAndPresentNextFlowCoordinator() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::ResolveAndPresentNextFlowCoordinator");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResolveAndPresentNextFlowCoordinator", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.PresentConnectionErrorDialog
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::PresentConnectionErrorDialog(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType connectionType, GlobalNamespace::ConnectionFailedReason reason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::PresentConnectionErrorDialog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentConnectionErrorDialog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectionType), ::il2cpp_utils::ExtractType(reason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectionType, reason);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.PresentMasterServerUnavailableErrorDialog
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::PresentMasterServerUnavailableErrorDialog(GlobalNamespace::MultiplayerUnavailableReason reason, System::Exception* exception, System::Nullable_1<int64_t> maintenanceWindowEndTime, ::Il2CppString* remoteLocalizedMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::PresentMasterServerUnavailableErrorDialog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentMasterServerUnavailableErrorDialog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reason), ::il2cpp_utils::ExtractType(exception), ::il2cpp_utils::ExtractType(maintenanceWindowEndTime), ::il2cpp_utils::ExtractType(remoteLocalizedMessage)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, reason, exception, maintenanceWindowEndTime, remoteLocalizedMessage);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.ProcessDeeplinkingToLobby
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::ProcessDeeplinkingToLobby() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::ProcessDeeplinkingToLobby");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessDeeplinkingToLobby", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.JoinLobbyWithSecret
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::JoinLobbyWithSecret(::Il2CppString* serverName, ::Il2CppString* secret) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::JoinLobbyWithSecret");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JoinLobbyWithSecret", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serverName), ::il2cpp_utils::ExtractType(secret)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serverName, secret);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.JoinLobbyWithCode
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::JoinLobbyWithCode(::Il2CppString* code) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::JoinLobbyWithCode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "JoinLobbyWithCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(code)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, code);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.<ResolveAndPresentNextFlowCoordinator>b__54_0
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$ResolveAndPresentNextFlowCoordinator$b__54_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::<ResolveAndPresentNextFlowCoordinator>b__54_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ResolveAndPresentNextFlowCoordinator>b__54_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.<PresentConnectionErrorDialog>b__55_0
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$PresentConnectionErrorDialog$b__55_0(int btnId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::<PresentConnectionErrorDialog>b__55_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PresentConnectionErrorDialog>b__55_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(btnId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, btnId);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.<PresentConnectionErrorDialog>b__55_1
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$PresentConnectionErrorDialog$b__55_1(int btnId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::<PresentConnectionErrorDialog>b__55_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PresentConnectionErrorDialog>b__55_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(btnId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, btnId);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.<PresentMasterServerUnavailableErrorDialog>b__56_0
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$PresentMasterServerUnavailableErrorDialog$b__56_0(int btnId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::<PresentMasterServerUnavailableErrorDialog>b__56_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PresentMasterServerUnavailableErrorDialog>b__56_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(btnId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, btnId);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.DidActivate
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.DidDeactivate
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.BackButtonWasPressed
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::BackButtonWasPressed(HMUI::ViewController* topViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::BackButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(topViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, topViewController);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.TopViewControllerWillChange
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TopViewControllerWillChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TopViewControllerWillChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldViewController), ::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldViewController, newViewController, animationType);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.TransitionDidStart
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TransitionDidStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TransitionDidStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionDidStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator.TransitionDidFinish
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TransitionDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::TransitionDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::add_didFinishEvent
// Il2CppName: add_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>*)>(&MultiplayerModeSelectionFlowCoordinator::add_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "add_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::remove_didFinishEvent
// Il2CppName: remove_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>*)>(&MultiplayerModeSelectionFlowCoordinator::remove_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "remove_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::SelectMultiplayerLobbyDestination*)>(&MultiplayerModeSelectionFlowCoordinator::Setup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SelectMultiplayerLobbyDestination*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel
// Il2CppName: HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)()>(&MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleMultiplayerLobbyConnectionControllerConnectionSuccessActivateModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionSuccess
// Il2CppName: HandleMultiplayerLobbyConnectionControllerConnectionSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)()>(&MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionSuccess)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleMultiplayerLobbyConnectionControllerConnectionSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionFailed
// Il2CppName: HandleMultiplayerLobbyConnectionControllerConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType, GlobalNamespace::ConnectionFailedReason)>(&MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyConnectionControllerConnectionFailed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleMultiplayerLobbyConnectionControllerConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyControllerDidFinish
// Il2CppName: HandleMultiplayerLobbyControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::MultiplayerModeSelectionViewController*, GlobalNamespace::MultiplayerModeSelectionViewController::MenuButton)>(&MultiplayerModeSelectionFlowCoordinator::HandleMultiplayerLobbyControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleMultiplayerLobbyControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerModeSelectionViewController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerModeSelectionViewController::MenuButton>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleGameServerBrowserFlowCoordinatorDidFinish
// Il2CppName: HandleGameServerBrowserFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::GameServerBrowserFlowCoordinator*)>(&MultiplayerModeSelectionFlowCoordinator::HandleGameServerBrowserFlowCoordinatorDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleGameServerBrowserFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameServerBrowserFlowCoordinator*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleJoiningLobbyViewControllerDidFinish
// Il2CppName: HandleJoiningLobbyViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)()>(&MultiplayerModeSelectionFlowCoordinator::HandleJoiningLobbyViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleJoiningLobbyViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleJoinQuickPlayViewControllerDidFinish
// Il2CppName: HandleJoinQuickPlayViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(bool)>(&MultiplayerModeSelectionFlowCoordinator::HandleJoinQuickPlayViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleJoinQuickPlayViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleServerCodeEntryViewControllerDidFinish
// Il2CppName: HandleServerCodeEntryViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(bool, ::Il2CppString*)>(&MultiplayerModeSelectionFlowCoordinator::HandleServerCodeEntryViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleServerCodeEntryViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleCreateServerViewControllerDidFinish
// Il2CppName: HandleCreateServerViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(bool, GlobalNamespace::UnifiedNetworkPlayerModel::CreatePartyConfig*)>(&MultiplayerModeSelectionFlowCoordinator::HandleCreateServerViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleCreateServerViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::UnifiedNetworkPlayerModel::CreatePartyConfig*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleClientGameServerLobbyFlowCoordinatorDidFinish
// Il2CppName: HandleClientGameServerLobbyFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::ClientGameServerLobbyFlowCoordinator*)>(&MultiplayerModeSelectionFlowCoordinator::HandleClientGameServerLobbyFlowCoordinatorDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleClientGameServerLobbyFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleClientGameServerLobbyFlowCoordinatorWillFinish
// Il2CppName: HandleClientGameServerLobbyFlowCoordinatorWillFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::ClientGameServerLobbyFlowCoordinator*)>(&MultiplayerModeSelectionFlowCoordinator::HandleClientGameServerLobbyFlowCoordinatorWillFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleClientGameServerLobbyFlowCoordinatorWillFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ClientGameServerLobbyFlowCoordinator*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleQuickPlayLobbyFlowCoordinatorDidFinish
// Il2CppName: HandleQuickPlayLobbyFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)()>(&MultiplayerModeSelectionFlowCoordinator::HandleQuickPlayLobbyFlowCoordinatorDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleQuickPlayLobbyFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleQuickPlayLobbyFlowCoordinatorWillFinish
// Il2CppName: HandleQuickPlayLobbyFlowCoordinatorWillFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)()>(&MultiplayerModeSelectionFlowCoordinator::HandleQuickPlayLobbyFlowCoordinatorWillFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleQuickPlayLobbyFlowCoordinatorWillFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleHostGameServerLobbyFlowCoordinatorDidFinish
// Il2CppName: HandleHostGameServerLobbyFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::HostGameServerLobbyFlowCoordinator*)>(&MultiplayerModeSelectionFlowCoordinator::HandleHostGameServerLobbyFlowCoordinatorDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleHostGameServerLobbyFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleHostGameServerLobbyFlowCoordinatorWillFinish
// Il2CppName: HandleHostGameServerLobbyFlowCoordinatorWillFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::HostGameServerLobbyFlowCoordinator*)>(&MultiplayerModeSelectionFlowCoordinator::HandleHostGameServerLobbyFlowCoordinatorWillFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleHostGameServerLobbyFlowCoordinatorWillFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::HandleConnectedPlayerManagerCreated
// Il2CppName: HandleConnectedPlayerManagerCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::INetworkPlayerModel*)>(&MultiplayerModeSelectionFlowCoordinator::HandleConnectedPlayerManagerCreated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "HandleConnectedPlayerManagerCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::INetworkPlayerModel*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::TryShowModeSelection
// Il2CppName: TryShowModeSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(bool)>(&MultiplayerModeSelectionFlowCoordinator::TryShowModeSelection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "TryShowModeSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::ResolveAndPresentNextFlowCoordinator
// Il2CppName: ResolveAndPresentNextFlowCoordinator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)()>(&MultiplayerModeSelectionFlowCoordinator::ResolveAndPresentNextFlowCoordinator)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "ResolveAndPresentNextFlowCoordinator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::PresentConnectionErrorDialog
// Il2CppName: PresentConnectionErrorDialog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType, GlobalNamespace::ConnectionFailedReason)>(&MultiplayerModeSelectionFlowCoordinator::PresentConnectionErrorDialog)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "PresentConnectionErrorDialog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLobbyConnectionController::LobbyConnectionType>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ConnectionFailedReason>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::PresentMasterServerUnavailableErrorDialog
// Il2CppName: PresentMasterServerUnavailableErrorDialog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(GlobalNamespace::MultiplayerUnavailableReason, System::Exception*, System::Nullable_1<int64_t>, ::Il2CppString*)>(&MultiplayerModeSelectionFlowCoordinator::PresentMasterServerUnavailableErrorDialog)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "PresentMasterServerUnavailableErrorDialog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerUnavailableReason>(), ::il2cpp_utils::ExtractIndependentType<System::Exception*>(), ::il2cpp_utils::ExtractIndependentType<System::Nullable_1<int64_t>>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::ProcessDeeplinkingToLobby
// Il2CppName: ProcessDeeplinkingToLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)()>(&MultiplayerModeSelectionFlowCoordinator::ProcessDeeplinkingToLobby)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "ProcessDeeplinkingToLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::JoinLobbyWithSecret
// Il2CppName: JoinLobbyWithSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(::Il2CppString*, ::Il2CppString*)>(&MultiplayerModeSelectionFlowCoordinator::JoinLobbyWithSecret)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "JoinLobbyWithSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::JoinLobbyWithCode
// Il2CppName: JoinLobbyWithCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(::Il2CppString*)>(&MultiplayerModeSelectionFlowCoordinator::JoinLobbyWithCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "JoinLobbyWithCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::$ResolveAndPresentNextFlowCoordinator$b__54_0
// Il2CppName: <ResolveAndPresentNextFlowCoordinator>b__54_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)()>(&MultiplayerModeSelectionFlowCoordinator::$ResolveAndPresentNextFlowCoordinator$b__54_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "<ResolveAndPresentNextFlowCoordinator>b__54_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::$PresentConnectionErrorDialog$b__55_0
// Il2CppName: <PresentConnectionErrorDialog>b__55_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(int)>(&MultiplayerModeSelectionFlowCoordinator::$PresentConnectionErrorDialog$b__55_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "<PresentConnectionErrorDialog>b__55_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::$PresentConnectionErrorDialog$b__55_1
// Il2CppName: <PresentConnectionErrorDialog>b__55_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(int)>(&MultiplayerModeSelectionFlowCoordinator::$PresentConnectionErrorDialog$b__55_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "<PresentConnectionErrorDialog>b__55_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::$PresentMasterServerUnavailableErrorDialog$b__56_0
// Il2CppName: <PresentMasterServerUnavailableErrorDialog>b__56_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(int)>(&MultiplayerModeSelectionFlowCoordinator::$PresentMasterServerUnavailableErrorDialog$b__56_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "<PresentMasterServerUnavailableErrorDialog>b__56_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(bool, bool, bool)>(&MultiplayerModeSelectionFlowCoordinator::DidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(bool, bool)>(&MultiplayerModeSelectionFlowCoordinator::DidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::BackButtonWasPressed
// Il2CppName: BackButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(HMUI::ViewController*)>(&MultiplayerModeSelectionFlowCoordinator::BackButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "BackButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::TopViewControllerWillChange
// Il2CppName: TopViewControllerWillChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&MultiplayerModeSelectionFlowCoordinator::TopViewControllerWillChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "TopViewControllerWillChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController::AnimationType>()});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::TransitionDidStart
// Il2CppName: TransitionDidStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)()>(&MultiplayerModeSelectionFlowCoordinator::TransitionDidStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "TransitionDidStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::TransitionDidFinish
// Il2CppName: TransitionDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)()>(&MultiplayerModeSelectionFlowCoordinator::TransitionDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), "TransitionDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)()>(&MultiplayerModeSelectionFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::*)()>(&MultiplayerModeSelectionFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerModeSelectionFlowCoordinator/<TryShowModeSelection>d__53
#include "GlobalNamespace/MultiplayerModeSelectionFlowCoordinator_-TryShowModeSelection-d__53.hpp"
// Including type: MasterServerAvailabilityData
#include "GlobalNamespace/MasterServerAvailabilityData.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
// Including type: MasterServerQuickPlaySetupData
#include "GlobalNamespace/MasterServerQuickPlaySetupData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator/<TryShowModeSelection>d__53.MoveNext
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$TryShowModeSelection$d__53::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$TryShowModeSelection$d__53::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: MultiplayerModeSelectionFlowCoordinator/<TryShowModeSelection>d__53.SetStateMachine
void GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$TryShowModeSelection$d__53::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerModeSelectionFlowCoordinator::$TryShowModeSelection$d__53::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::$TryShowModeSelection$d__53::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::$TryShowModeSelection$d__53::*)()>(&MultiplayerModeSelectionFlowCoordinator::$TryShowModeSelection$d__53::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator::$TryShowModeSelection$d__53), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerModeSelectionFlowCoordinator::$TryShowModeSelection$d__53::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerModeSelectionFlowCoordinator::$TryShowModeSelection$d__53::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&MultiplayerModeSelectionFlowCoordinator::$TryShowModeSelection$d__53::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerModeSelectionFlowCoordinator::$TryShowModeSelection$d__53), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: QuickPlayLobbyFlowCoordinator
#include "GlobalNamespace/QuickPlayLobbyFlowCoordinator.hpp"
// Including type: QuickPlayLobbyFlowCoordinator/<>c__DisplayClass61_0
#include "GlobalNamespace/QuickPlayLobbyFlowCoordinator_--c__DisplayClass61_0.hpp"
// Including type: QuickPlayLobbyFlowCoordinator/<>c__DisplayClass61_1
#include "GlobalNamespace/QuickPlayLobbyFlowCoordinator_--c__DisplayClass61_1.hpp"
// Including type: HMUI.ScreenModeSO
#include "HMUI/ScreenModeSO.hpp"
// Including type: BeatmapCharacteristicCollectionSO
#include "GlobalNamespace/BeatmapCharacteristicCollectionSO.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: MultiplayerLevelSelectionFlowCoordinator
#include "GlobalNamespace/MultiplayerLevelSelectionFlowCoordinator.hpp"
// Including type: QuickPlaySetupViewController
#include "GlobalNamespace/QuickPlaySetupViewController.hpp"
// Including type: GameplaySetupViewController
#include "GlobalNamespace/GameplaySetupViewController.hpp"
// Including type: ServerPlayerListController
#include "GlobalNamespace/ServerPlayerListController.hpp"
// Including type: MultiplayerResultsViewController
#include "GlobalNamespace/MultiplayerResultsViewController.hpp"
// Including type: SimpleDialogPromptViewController
#include "GlobalNamespace/SimpleDialogPromptViewController.hpp"
// Including type: ConnectionErrorDialogViewController
#include "GlobalNamespace/ConnectionErrorDialogViewController.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
// Including type: MultiplayerLobbyController
#include "GlobalNamespace/MultiplayerLobbyController.hpp"
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: HMUI.ScreenModeController
#include "HMUI/ScreenModeController.hpp"
// Including type: ILobbyGameStateController
#include "GlobalNamespace/ILobbyGameStateController.hpp"
// Including type: ILobbyStateDataModel
#include "GlobalNamespace/ILobbyStateDataModel.hpp"
// Including type: ILobbyPlayersDataModel
#include "GlobalNamespace/ILobbyPlayersDataModel.hpp"
// Including type: IUnifiedNetworkPlayerModel
#include "GlobalNamespace/IUnifiedNetworkPlayerModel.hpp"
// Including type: IMenuRpcManager
#include "GlobalNamespace/IMenuRpcManager.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: PlatformLeaderboardsModel
#include "GlobalNamespace/PlatformLeaderboardsModel.hpp"
// Including type: CenterStageScreenController
#include "GlobalNamespace/CenterStageScreenController.hpp"
// Including type: BeatmapLevelsModel
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Including type: SongPreviewPlayer
#include "GlobalNamespace/SongPreviewPlayer.hpp"
// Including type: IAnalyticsModel
#include "GlobalNamespace/IAnalyticsModel.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: MultiplayerGameState
#include "GlobalNamespace/MultiplayerGameState.hpp"
// Including type: MultiplayerLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/MultiplayerLevelScenesTransitionSetupDataSO.hpp"
// Including type: MultiplayerResultsData
#include "GlobalNamespace/MultiplayerResultsData.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
// Including type: LevelSelectionFlowCoordinator/State
#include "GlobalNamespace/LevelSelectionFlowCoordinator_State.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: QuickPlayLobbyFlowCoordinator.add_willFinishEvent
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::add_willFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::add_willFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_willFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.remove_willFinishEvent
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::remove_willFinishEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::remove_willFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_willFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.add_didFinishedEvent
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::add_didFinishedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::add_didFinishedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.remove_didFinishedEvent
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::remove_didFinishedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::remove_didFinishedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleLobbyPlayersDataModelDidChange
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyPlayersDataModelDidChange(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyPlayersDataModelDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyPlayersDataModelDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleQuickPlaySetupViewControllerSetPlayerReady
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleQuickPlaySetupViewControllerSetPlayerReady(bool isReady) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleQuickPlaySetupViewControllerSetPlayerReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleQuickPlaySetupViewControllerSetPlayerReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isReady)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isReady);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleQuickPlaySetupViewControllerSuggestBeatmap
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleQuickPlaySetupViewControllerSuggestBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleQuickPlaySetupViewControllerSuggestBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleQuickPlaySetupViewControllerSuggestBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel(GlobalNamespace::LevelSelectionFlowCoordinator::State* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleMultiplayerLevelSelectionFlowCoordinatorDidFinish
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerLevelSelectionFlowCoordinatorDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleQuickPlaySetupViewControllerDeleteSuggestedBeatmap
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleQuickPlaySetupViewControllerDeleteSuggestedBeatmap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleQuickPlaySetupViewControllerDeleteSuggestedBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleQuickPlaySetupViewControllerDeleteSuggestedBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleServerPlayerListControllerSelectSuggestedBeatmap
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedBeatmap(::Il2CppString* levelId, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, GlobalNamespace::BeatmapDifficulty beatmapDifficulty) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedBeatmap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleServerPlayerListControllerSelectSuggestedBeatmap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId), ::il2cpp_utils::ExtractType(beatmapCharacteristic), ::il2cpp_utils::ExtractType(beatmapDifficulty)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelId, beatmapCharacteristic, beatmapDifficulty);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleLobbyGameStateControllerLobbyDisconnected
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerLobbyDisconnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerLobbyDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerLobbyDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleLobbyGameStateControllerGameStarted
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerGameStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleLobbyGameStateControllerGameStartedPresentView
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStartedPresentView() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStartedPresentView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerGameStartedPresentView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleLobbyGameStateControllerCountdownStarted
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerCountdownStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerCountdownStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerCountdownStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleLobbyGameStateControllerCountdownCancelled
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerCountdownCancelled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerCountdownCancelled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerCountdownCancelled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleLobbyGameStateControllerSongStillDownloading
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerSongStillDownloading() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerSongStillDownloading");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerSongStillDownloading", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleMenuRpcManagerSetMultiplayerGameState
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleMenuRpcManagerSetMultiplayerGameState(::Il2CppString* userId, GlobalNamespace::MultiplayerGameState gameState) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleMenuRpcManagerSetMultiplayerGameState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMenuRpcManagerSetMultiplayerGameState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(gameState)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId, gameState);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleLobbyGameStateControllerLevelFinished
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelScenesTransitionSetupData, GlobalNamespace::MultiplayerResultsData* multiplayerResultsData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerLevelFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerLevelScenesTransitionSetupData), ::il2cpp_utils::ExtractType(multiplayerResultsData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerLevelScenesTransitionSetupData, multiplayerResultsData);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleLobbyGameStateControllerLevelDidGetDisconnected
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelDidGetDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelDidGetDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerLevelDidGetDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleLobbyGameStateControllerBeforeSceneSwitch
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerBeforeSceneSwitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerBeforeSceneSwitch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerBeforeSceneSwitch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.HandleMultiplayerResultsViewControllerBackToLobbyPressed
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleMultiplayerResultsViewControllerBackToLobbyPressed(GlobalNamespace::MultiplayerResultsViewController* multiplayerResultsViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::HandleMultiplayerResultsViewControllerBackToLobbyPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerResultsViewControllerBackToLobbyPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplayerResultsViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, multiplayerResultsViewController);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.SetupGameStarting
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::SetupGameStarting() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::SetupGameStarting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupGameStarting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.SetLocalPlayerDataModelToViews
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::SetLocalPlayerDataModelToViews(::Il2CppString* userId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::SetLocalPlayerDataModelToViews");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalPlayerDataModelToViews", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, userId);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.PresentBackButtonConfirmationDialog
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::PresentBackButtonConfirmationDialog() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::PresentBackButtonConfirmationDialog");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentBackButtonConfirmationDialog", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.Finish
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::Finish(System::Action* finishedCallback, bool withFadeOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::Finish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(withFadeOut)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, finishedCallback, withFadeOut);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.DismissViewControllersAndCoordinators
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::DismissViewControllersAndCoordinators() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::DismissViewControllersAndCoordinators");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DismissViewControllersAndCoordinators", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.ShowDisconnectDialogAndFinish
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::ShowDisconnectDialogAndFinish(GlobalNamespace::DisconnectedReason disconnectedReason) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::ShowDisconnectDialogAndFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowDisconnectDialogAndFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(disconnectedReason)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, disconnectedReason);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.<PresentBackButtonConfirmationDialog>b__60_0
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::$PresentBackButtonConfirmationDialog$b__60_0(int btnIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::<PresentBackButtonConfirmationDialog>b__60_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<PresentBackButtonConfirmationDialog>b__60_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(btnIndex)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, btnIndex);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.<ShowDisconnectDialogAndFinish>b__63_0
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::$ShowDisconnectDialogAndFinish$b__63_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::<ShowDisconnectDialogAndFinish>b__63_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ShowDisconnectDialogAndFinish>b__63_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.DidActivate
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.DidDeactivate
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.TopViewControllerWillChange
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::TopViewControllerWillChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TopViewControllerWillChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldViewController), ::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldViewController, newViewController, animationType);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.BackButtonWasPressed
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::BackButtonWasPressed(HMUI::ViewController* topViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::BackButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(topViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, topViewController);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.InitialViewControllerWasPresented
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::InitialViewControllerWasPresented() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::InitialViewControllerWasPresented");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitialViewControllerWasPresented", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.TransitionDidStart
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::TransitionDidStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::TransitionDidStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionDidStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlayLobbyFlowCoordinator.TransitionDidFinish
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::TransitionDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::TransitionDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::add_willFinishEvent
// Il2CppName: add_willFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(System::Action*)>(&QuickPlayLobbyFlowCoordinator::add_willFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "add_willFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::remove_willFinishEvent
// Il2CppName: remove_willFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(System::Action*)>(&QuickPlayLobbyFlowCoordinator::remove_willFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "remove_willFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::add_didFinishedEvent
// Il2CppName: add_didFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(System::Action*)>(&QuickPlayLobbyFlowCoordinator::add_didFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "add_didFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::remove_didFinishedEvent
// Il2CppName: remove_didFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(System::Action*)>(&QuickPlayLobbyFlowCoordinator::remove_didFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "remove_didFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleLobbyPlayersDataModelDidChange
// Il2CppName: HandleLobbyPlayersDataModelDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(::Il2CppString*)>(&QuickPlayLobbyFlowCoordinator::HandleLobbyPlayersDataModelDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleLobbyPlayersDataModelDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleQuickPlaySetupViewControllerSetPlayerReady
// Il2CppName: HandleQuickPlaySetupViewControllerSetPlayerReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(bool)>(&QuickPlayLobbyFlowCoordinator::HandleQuickPlaySetupViewControllerSetPlayerReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleQuickPlaySetupViewControllerSetPlayerReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleQuickPlaySetupViewControllerSuggestBeatmap
// Il2CppName: HandleQuickPlaySetupViewControllerSuggestBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::HandleQuickPlaySetupViewControllerSuggestBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleQuickPlaySetupViewControllerSuggestBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel
// Il2CppName: HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(GlobalNamespace::LevelSelectionFlowCoordinator::State*)>(&QuickPlayLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelSelectionFlowCoordinator::State*>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidFinish
// Il2CppName: HandleMultiplayerLevelSelectionFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleMultiplayerLevelSelectionFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleQuickPlaySetupViewControllerDeleteSuggestedBeatmap
// Il2CppName: HandleQuickPlaySetupViewControllerDeleteSuggestedBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::HandleQuickPlaySetupViewControllerDeleteSuggestedBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleQuickPlaySetupViewControllerDeleteSuggestedBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedBeatmap
// Il2CppName: HandleServerPlayerListControllerSelectSuggestedBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(::Il2CppString*, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::BeatmapDifficulty)>(&QuickPlayLobbyFlowCoordinator::HandleServerPlayerListControllerSelectSuggestedBeatmap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleServerPlayerListControllerSelectSuggestedBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficulty>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerLobbyDisconnected
// Il2CppName: HandleLobbyGameStateControllerLobbyDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerLobbyDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleLobbyGameStateControllerLobbyDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStarted
// Il2CppName: HandleLobbyGameStateControllerGameStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStarted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleLobbyGameStateControllerGameStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStartedPresentView
// Il2CppName: HandleLobbyGameStateControllerGameStartedPresentView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerGameStartedPresentView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleLobbyGameStateControllerGameStartedPresentView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerCountdownStarted
// Il2CppName: HandleLobbyGameStateControllerCountdownStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerCountdownStarted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleLobbyGameStateControllerCountdownStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerCountdownCancelled
// Il2CppName: HandleLobbyGameStateControllerCountdownCancelled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerCountdownCancelled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleLobbyGameStateControllerCountdownCancelled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerSongStillDownloading
// Il2CppName: HandleLobbyGameStateControllerSongStillDownloading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerSongStillDownloading)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleLobbyGameStateControllerSongStillDownloading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleMenuRpcManagerSetMultiplayerGameState
// Il2CppName: HandleMenuRpcManagerSetMultiplayerGameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(::Il2CppString*, GlobalNamespace::MultiplayerGameState)>(&QuickPlayLobbyFlowCoordinator::HandleMenuRpcManagerSetMultiplayerGameState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleMenuRpcManagerSetMultiplayerGameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerGameState>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished
// Il2CppName: HandleLobbyGameStateControllerLevelFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*, GlobalNamespace::MultiplayerResultsData*)>(&QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleLobbyGameStateControllerLevelFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerResultsData*>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelDidGetDisconnected
// Il2CppName: HandleLobbyGameStateControllerLevelDidGetDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(GlobalNamespace::DisconnectedReason)>(&QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelDidGetDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleLobbyGameStateControllerLevelDidGetDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerBeforeSceneSwitch
// Il2CppName: HandleLobbyGameStateControllerBeforeSceneSwitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::HandleLobbyGameStateControllerBeforeSceneSwitch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleLobbyGameStateControllerBeforeSceneSwitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::HandleMultiplayerResultsViewControllerBackToLobbyPressed
// Il2CppName: HandleMultiplayerResultsViewControllerBackToLobbyPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(GlobalNamespace::MultiplayerResultsViewController*)>(&QuickPlayLobbyFlowCoordinator::HandleMultiplayerResultsViewControllerBackToLobbyPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "HandleMultiplayerResultsViewControllerBackToLobbyPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::SetupGameStarting
// Il2CppName: SetupGameStarting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::SetupGameStarting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "SetupGameStarting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::SetLocalPlayerDataModelToViews
// Il2CppName: SetLocalPlayerDataModelToViews
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(::Il2CppString*)>(&QuickPlayLobbyFlowCoordinator::SetLocalPlayerDataModelToViews)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "SetLocalPlayerDataModelToViews", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::PresentBackButtonConfirmationDialog
// Il2CppName: PresentBackButtonConfirmationDialog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::PresentBackButtonConfirmationDialog)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "PresentBackButtonConfirmationDialog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::Finish
// Il2CppName: Finish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(System::Action*, bool)>(&QuickPlayLobbyFlowCoordinator::Finish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "Finish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::DismissViewControllersAndCoordinators
// Il2CppName: DismissViewControllersAndCoordinators
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::DismissViewControllersAndCoordinators)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "DismissViewControllersAndCoordinators", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::ShowDisconnectDialogAndFinish
// Il2CppName: ShowDisconnectDialogAndFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(GlobalNamespace::DisconnectedReason)>(&QuickPlayLobbyFlowCoordinator::ShowDisconnectDialogAndFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "ShowDisconnectDialogAndFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::DisconnectedReason>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::$PresentBackButtonConfirmationDialog$b__60_0
// Il2CppName: <PresentBackButtonConfirmationDialog>b__60_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(int)>(&QuickPlayLobbyFlowCoordinator::$PresentBackButtonConfirmationDialog$b__60_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "<PresentBackButtonConfirmationDialog>b__60_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::$ShowDisconnectDialogAndFinish$b__63_0
// Il2CppName: <ShowDisconnectDialogAndFinish>b__63_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::$ShowDisconnectDialogAndFinish$b__63_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "<ShowDisconnectDialogAndFinish>b__63_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(bool, bool, bool)>(&QuickPlayLobbyFlowCoordinator::DidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(bool, bool)>(&QuickPlayLobbyFlowCoordinator::DidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::TopViewControllerWillChange
// Il2CppName: TopViewControllerWillChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&QuickPlayLobbyFlowCoordinator::TopViewControllerWillChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "TopViewControllerWillChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController::AnimationType>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::BackButtonWasPressed
// Il2CppName: BackButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)(HMUI::ViewController*)>(&QuickPlayLobbyFlowCoordinator::BackButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "BackButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>()});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::InitialViewControllerWasPresented
// Il2CppName: InitialViewControllerWasPresented
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::InitialViewControllerWasPresented)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "InitialViewControllerWasPresented", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::TransitionDidStart
// Il2CppName: TransitionDidStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::TransitionDidStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "TransitionDidStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::TransitionDidFinish
// Il2CppName: TransitionDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::TransitionDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), "TransitionDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::*)()>(&QuickPlayLobbyFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: QuickPlayLobbyFlowCoordinator/<>c__DisplayClass61_0
#include "GlobalNamespace/QuickPlayLobbyFlowCoordinator_--c__DisplayClass61_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_0::*)()>(&QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_0::*)()>(&QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: QuickPlayLobbyFlowCoordinator/<>c__DisplayClass61_1
#include "GlobalNamespace/QuickPlayLobbyFlowCoordinator_--c__DisplayClass61_1.hpp"
// Including type: UnityEngine.EventSystems.EventSystem
#include "UnityEngine/EventSystems/EventSystem.hpp"
// Including type: QuickPlayLobbyFlowCoordinator/<>c__DisplayClass61_0
#include "GlobalNamespace/QuickPlayLobbyFlowCoordinator_--c__DisplayClass61_0.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: QuickPlayLobbyFlowCoordinator/<>c__DisplayClass61_1.<Finish>b__0
void GlobalNamespace::QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_1::$Finish$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_1::<Finish>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Finish>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_1::$Finish$b__0
// Il2CppName: <Finish>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_1::*)()>(&QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_1::$Finish$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_1*), "<Finish>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_1::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_1::*)()>(&QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_1::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_1::*)()>(&QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_1::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlayLobbyFlowCoordinator::$$c__DisplayClass61_1*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLevelSelectionFlowCoordinator
#include "GlobalNamespace/MultiplayerLevelSelectionFlowCoordinator.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: ILobbyGameStateController
#include "GlobalNamespace/ILobbyGameStateController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: LevelSelectionFlowCoordinator/State
#include "GlobalNamespace/LevelSelectionFlowCoordinator_State.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.add_didSelectLevelEvent
void GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::add_didSelectLevelEvent(System::Action_1<GlobalNamespace::LevelSelectionFlowCoordinator::State*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::add_didSelectLevelEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.remove_didSelectLevelEvent
void GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::remove_didSelectLevelEvent(System::Action_1<GlobalNamespace::LevelSelectionFlowCoordinator::State*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::remove_didSelectLevelEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectLevelEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.add_didFinishedEvent
void GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::add_didFinishedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::add_didFinishedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.remove_didFinishedEvent
void GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::remove_didFinishedEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::remove_didFinishedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.Setup
void GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::Setup(GlobalNamespace::LevelSelectionFlowCoordinator::State* state, GlobalNamespace::SongPackMask songPackMask, GlobalNamespace::BeatmapDifficultyMask allowedBeatmapDifficultyMask, ::Il2CppString* actionText, ::Il2CppString* titleText) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state), ::il2cpp_utils::ExtractType(songPackMask), ::il2cpp_utils::ExtractType(allowedBeatmapDifficultyMask), ::il2cpp_utils::ExtractType(actionText), ::il2cpp_utils::ExtractType(titleText)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state, songPackMask, allowedBeatmapDifficultyMask, actionText, titleText);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.HandleLobbyGameStateControllerGameStarted
void GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::HandleLobbyGameStateControllerGameStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::HandleLobbyGameStateControllerGameStarted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyGameStateControllerGameStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.get_hidePracticeButton
bool GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_hidePracticeButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_hidePracticeButton");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hidePracticeButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.get_hidePacksIfOneOrNone
bool GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_hidePacksIfOneOrNone() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_hidePacksIfOneOrNone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hidePacksIfOneOrNone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.get_actionButtonText
::Il2CppString* GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_actionButtonText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_actionButtonText");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_actionButtonText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.get_showBackButtonForMainViewController
bool GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_showBackButtonForMainViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_showBackButtonForMainViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_showBackButtonForMainViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.get_songPackMask
GlobalNamespace::SongPackMask GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_songPackMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_songPackMask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songPackMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::SongPackMask, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.get_enableCustomLevels
bool GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_enableCustomLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_enableCustomLevels");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableCustomLevels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.get_allowedBeatmapDifficultyMask
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_allowedBeatmapDifficultyMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_allowedBeatmapDifficultyMask");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allowedBeatmapDifficultyMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficultyMask, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.get_notAllowedCharacteristics
::Array<GlobalNamespace::BeatmapCharacteristicSO*>* GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_notAllowedCharacteristics() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_notAllowedCharacteristics");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_notAllowedCharacteristics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::BeatmapCharacteristicSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.get_mainTitle
::Il2CppString* GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_mainTitle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::get_mainTitle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mainTitle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.ActionButtonWasPressed
void GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::ActionButtonWasPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::ActionButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActionButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.BackButtonWasPressed
void GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::BackButtonWasPressed(HMUI::ViewController* topViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::BackButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(topViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, topViewController);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.LevelSelectionFlowCoordinatorTopViewControllerWillChange
void GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorTopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorTopViewControllerWillChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LevelSelectionFlowCoordinatorTopViewControllerWillChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldViewController), ::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldViewController, newViewController, animationType);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.TransitionDidStart
void GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::TransitionDidStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::TransitionDidStart");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionDidStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLevelSelectionFlowCoordinator.TransitionDidFinish
void GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::TransitionDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator::TransitionDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::add_didSelectLevelEvent
// Il2CppName: add_didSelectLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelSelectionFlowCoordinator::*)(System::Action_1<GlobalNamespace::LevelSelectionFlowCoordinator::State*>*)>(&MultiplayerLevelSelectionFlowCoordinator::add_didSelectLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "add_didSelectLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::LevelSelectionFlowCoordinator::State*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::remove_didSelectLevelEvent
// Il2CppName: remove_didSelectLevelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelSelectionFlowCoordinator::*)(System::Action_1<GlobalNamespace::LevelSelectionFlowCoordinator::State*>*)>(&MultiplayerLevelSelectionFlowCoordinator::remove_didSelectLevelEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "remove_didSelectLevelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::LevelSelectionFlowCoordinator::State*>*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::add_didFinishedEvent
// Il2CppName: add_didFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelSelectionFlowCoordinator::*)(System::Action*)>(&MultiplayerLevelSelectionFlowCoordinator::add_didFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "add_didFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::remove_didFinishedEvent
// Il2CppName: remove_didFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelSelectionFlowCoordinator::*)(System::Action*)>(&MultiplayerLevelSelectionFlowCoordinator::remove_didFinishedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "remove_didFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelSelectionFlowCoordinator::*)(GlobalNamespace::LevelSelectionFlowCoordinator::State*, GlobalNamespace::SongPackMask, GlobalNamespace::BeatmapDifficultyMask, ::Il2CppString*, ::Il2CppString*)>(&MultiplayerLevelSelectionFlowCoordinator::Setup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelSelectionFlowCoordinator::State*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SongPackMask>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::HandleLobbyGameStateControllerGameStarted
// Il2CppName: HandleLobbyGameStateControllerGameStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelSelectionFlowCoordinator::*)()>(&MultiplayerLevelSelectionFlowCoordinator::HandleLobbyGameStateControllerGameStarted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "HandleLobbyGameStateControllerGameStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::get_hidePracticeButton
// Il2CppName: get_hidePracticeButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerLevelSelectionFlowCoordinator::*)()>(&MultiplayerLevelSelectionFlowCoordinator::get_hidePracticeButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "get_hidePracticeButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::get_hidePacksIfOneOrNone
// Il2CppName: get_hidePacksIfOneOrNone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerLevelSelectionFlowCoordinator::*)()>(&MultiplayerLevelSelectionFlowCoordinator::get_hidePacksIfOneOrNone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "get_hidePacksIfOneOrNone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::get_actionButtonText
// Il2CppName: get_actionButtonText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MultiplayerLevelSelectionFlowCoordinator::*)()>(&MultiplayerLevelSelectionFlowCoordinator::get_actionButtonText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "get_actionButtonText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::get_showBackButtonForMainViewController
// Il2CppName: get_showBackButtonForMainViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerLevelSelectionFlowCoordinator::*)()>(&MultiplayerLevelSelectionFlowCoordinator::get_showBackButtonForMainViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "get_showBackButtonForMainViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::get_songPackMask
// Il2CppName: get_songPackMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::SongPackMask (MultiplayerLevelSelectionFlowCoordinator::*)()>(&MultiplayerLevelSelectionFlowCoordinator::get_songPackMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "get_songPackMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::get_enableCustomLevels
// Il2CppName: get_enableCustomLevels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerLevelSelectionFlowCoordinator::*)()>(&MultiplayerLevelSelectionFlowCoordinator::get_enableCustomLevels)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "get_enableCustomLevels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::get_allowedBeatmapDifficultyMask
// Il2CppName: get_allowedBeatmapDifficultyMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficultyMask (MultiplayerLevelSelectionFlowCoordinator::*)()>(&MultiplayerLevelSelectionFlowCoordinator::get_allowedBeatmapDifficultyMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "get_allowedBeatmapDifficultyMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::get_notAllowedCharacteristics
// Il2CppName: get_notAllowedCharacteristics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::BeatmapCharacteristicSO*>* (MultiplayerLevelSelectionFlowCoordinator::*)()>(&MultiplayerLevelSelectionFlowCoordinator::get_notAllowedCharacteristics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "get_notAllowedCharacteristics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::get_mainTitle
// Il2CppName: get_mainTitle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MultiplayerLevelSelectionFlowCoordinator::*)()>(&MultiplayerLevelSelectionFlowCoordinator::get_mainTitle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "get_mainTitle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::ActionButtonWasPressed
// Il2CppName: ActionButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelSelectionFlowCoordinator::*)()>(&MultiplayerLevelSelectionFlowCoordinator::ActionButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "ActionButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::BackButtonWasPressed
// Il2CppName: BackButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelSelectionFlowCoordinator::*)(HMUI::ViewController*)>(&MultiplayerLevelSelectionFlowCoordinator::BackButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "BackButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorTopViewControllerWillChange
// Il2CppName: LevelSelectionFlowCoordinatorTopViewControllerWillChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelSelectionFlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&MultiplayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorTopViewControllerWillChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "LevelSelectionFlowCoordinatorTopViewControllerWillChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController::AnimationType>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::TransitionDidStart
// Il2CppName: TransitionDidStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelSelectionFlowCoordinator::*)()>(&MultiplayerLevelSelectionFlowCoordinator::TransitionDidStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "TransitionDidStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::TransitionDidFinish
// Il2CppName: TransitionDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelSelectionFlowCoordinator::*)()>(&MultiplayerLevelSelectionFlowCoordinator::TransitionDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), "TransitionDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLevelSelectionFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelSelectionFlowCoordinator::*)()>(&MultiplayerLevelSelectionFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLevelSelectionFlowCoordinator::*)()>(&MultiplayerLevelSelectionFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLevelSelectionFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NetEaseArcadeFlowCoordinator
#include "GlobalNamespace/NetEaseArcadeFlowCoordinator.hpp"
// Including type: NetEaseArcadeFlowCoordinator/<LogoutAsync>d__22
#include "GlobalNamespace/NetEaseArcadeFlowCoordinator_-LogoutAsync-d__22.hpp"
// Including type: NetEaseArcadeFlowCoordinator/<>c__DisplayClass27_0
#include "GlobalNamespace/NetEaseArcadeFlowCoordinator_--c__DisplayClass27_0.hpp"
// Including type: MenuLightsPresetSO
#include "GlobalNamespace/MenuLightsPresetSO.hpp"
// Including type: NetEaseLeaderboardViewController
#include "GlobalNamespace/NetEaseLeaderboardViewController.hpp"
// Including type: TabBarViewController
#include "GlobalNamespace/TabBarViewController.hpp"
// Including type: NetEaseManager
#include "GlobalNamespace/NetEaseManager.hpp"
// Including type: MenuLightsManager
#include "GlobalNamespace/MenuLightsManager.hpp"
// Including type: ResultsViewController
#include "GlobalNamespace/ResultsViewController.hpp"
// Including type: LocalLeaderboardViewController
#include "GlobalNamespace/LocalLeaderboardViewController.hpp"
// Including type: LeaderboardViewController
#include "GlobalNamespace/LeaderboardViewController.hpp"
// Including type: MenuTransitionsHelper
#include "GlobalNamespace/MenuTransitionsHelper.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseArcadeFlowCoordinator.ProcessScore
void GlobalNamespace::NetEaseArcadeFlowCoordinator::ProcessScore(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers, bool practice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::ProcessScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(practice)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelCompletionResults, difficultyBeatmap, gameplayModifiers, practice);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.AddScoreToLeaderboards
void GlobalNamespace::NetEaseArcadeFlowCoordinator::AddScoreToLeaderboards(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers, bool practice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::AddScoreToLeaderboards");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddScoreToLeaderboards", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(practice)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelCompletionResults, difficultyBeatmap, gameplayModifiers, practice);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.LogoutAsync
void GlobalNamespace::NetEaseArcadeFlowCoordinator::LogoutAsync() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::LogoutAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogoutAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.HandleHowToPlayViewControllerDidFinish
void GlobalNamespace::NetEaseArcadeFlowCoordinator::HandleHowToPlayViewControllerDidFinish(GlobalNamespace::HowToPlayViewController::HowToPlayOptions howToPlayOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::HandleHowToPlayViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHowToPlayViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(howToPlayOptions)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, howToPlayOptions);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.HandleHowToPlayTabSelected
void GlobalNamespace::NetEaseArcadeFlowCoordinator::HandleHowToPlayTabSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::HandleHowToPlayTabSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHowToPlayTabSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.HandleLogoutTabWasSelected
void GlobalNamespace::NetEaseArcadeFlowCoordinator::HandleLogoutTabWasSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::HandleLogoutTabWasSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLogoutTabWasSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.HandleResultsViewControllerContinueButtonPressed
void GlobalNamespace::NetEaseArcadeFlowCoordinator::HandleResultsViewControllerContinueButtonPressed(GlobalNamespace::ResultsViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::HandleResultsViewControllerContinueButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleResultsViewControllerContinueButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.HandleResultsViewControllerRestartButtonPressed
void GlobalNamespace::NetEaseArcadeFlowCoordinator::HandleResultsViewControllerRestartButtonPressed(GlobalNamespace::ResultsViewController* resultsViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::HandleResultsViewControllerRestartButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleResultsViewControllerRestartButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, resultsViewController);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.<SinglePlayerLevelSelectionFlowCoordinatorDidActivate>b__17_0
void GlobalNamespace::NetEaseArcadeFlowCoordinator::$SinglePlayerLevelSelectionFlowCoordinatorDidActivate$b__17_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::<SinglePlayerLevelSelectionFlowCoordinatorDidActivate>b__17_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SinglePlayerLevelSelectionFlowCoordinatorDidActivate>b__17_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.<HandleHowToPlayTabSelected>b__24_0
void GlobalNamespace::NetEaseArcadeFlowCoordinator::$HandleHowToPlayTabSelected$b__24_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::<HandleHowToPlayTabSelected>b__24_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleHowToPlayTabSelected>b__24_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.get_gameMode
::Il2CppString* GlobalNamespace::NetEaseArcadeFlowCoordinator::get_gameMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::get_gameMode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.get_leaderboardViewController
GlobalNamespace::LeaderboardViewController* GlobalNamespace::NetEaseArcadeFlowCoordinator::get_leaderboardViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::get_leaderboardViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leaderboardViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LeaderboardViewController*, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.get_initialTopScreenViewController
HMUI::ViewController* GlobalNamespace::NetEaseArcadeFlowCoordinator::get_initialTopScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::get_initialTopScreenViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initialTopScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.get_showPlayerStatsInDetailView
bool GlobalNamespace::NetEaseArcadeFlowCoordinator::get_showPlayerStatsInDetailView() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::get_showPlayerStatsInDetailView");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_showPlayerStatsInDetailView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.SinglePlayerLevelSelectionFlowCoordinatorDidActivate
void GlobalNamespace::NetEaseArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate(bool firstActivation, bool addedToHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SinglePlayerLevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
void GlobalNamespace::NetEaseArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate(bool removedFromHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator.ProcessLevelCompletionResultsAfterLevelDidFinish
void GlobalNamespace::NetEaseArcadeFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers, bool practice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessLevelCompletionResultsAfterLevelDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(practice)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelCompletionResults, difficultyBeatmap, gameplayModifiers, practice);
}
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::ProcessScore
// Il2CppName: ProcessScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*, bool)>(&NetEaseArcadeFlowCoordinator::ProcessScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "ProcessScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::AddScoreToLeaderboards
// Il2CppName: AddScoreToLeaderboards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*, bool)>(&NetEaseArcadeFlowCoordinator::AddScoreToLeaderboards)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "AddScoreToLeaderboards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::LogoutAsync
// Il2CppName: LogoutAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::*)()>(&NetEaseArcadeFlowCoordinator::LogoutAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "LogoutAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::HandleHowToPlayViewControllerDidFinish
// Il2CppName: HandleHowToPlayViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::*)(GlobalNamespace::HowToPlayViewController::HowToPlayOptions)>(&NetEaseArcadeFlowCoordinator::HandleHowToPlayViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "HandleHowToPlayViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::HowToPlayViewController::HowToPlayOptions>()});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::HandleHowToPlayTabSelected
// Il2CppName: HandleHowToPlayTabSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::*)()>(&NetEaseArcadeFlowCoordinator::HandleHowToPlayTabSelected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "HandleHowToPlayTabSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::HandleLogoutTabWasSelected
// Il2CppName: HandleLogoutTabWasSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::*)()>(&NetEaseArcadeFlowCoordinator::HandleLogoutTabWasSelected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "HandleLogoutTabWasSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::HandleResultsViewControllerContinueButtonPressed
// Il2CppName: HandleResultsViewControllerContinueButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::*)(GlobalNamespace::ResultsViewController*)>(&NetEaseArcadeFlowCoordinator::HandleResultsViewControllerContinueButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "HandleResultsViewControllerContinueButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::HandleResultsViewControllerRestartButtonPressed
// Il2CppName: HandleResultsViewControllerRestartButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::*)(GlobalNamespace::ResultsViewController*)>(&NetEaseArcadeFlowCoordinator::HandleResultsViewControllerRestartButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "HandleResultsViewControllerRestartButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::$SinglePlayerLevelSelectionFlowCoordinatorDidActivate$b__17_0
// Il2CppName: <SinglePlayerLevelSelectionFlowCoordinatorDidActivate>b__17_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::*)()>(&NetEaseArcadeFlowCoordinator::$SinglePlayerLevelSelectionFlowCoordinatorDidActivate$b__17_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "<SinglePlayerLevelSelectionFlowCoordinatorDidActivate>b__17_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::$HandleHowToPlayTabSelected$b__24_0
// Il2CppName: <HandleHowToPlayTabSelected>b__24_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::*)()>(&NetEaseArcadeFlowCoordinator::$HandleHowToPlayTabSelected$b__24_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "<HandleHowToPlayTabSelected>b__24_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::get_gameMode
// Il2CppName: get_gameMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (NetEaseArcadeFlowCoordinator::*)()>(&NetEaseArcadeFlowCoordinator::get_gameMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "get_gameMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::get_leaderboardViewController
// Il2CppName: get_leaderboardViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LeaderboardViewController* (NetEaseArcadeFlowCoordinator::*)()>(&NetEaseArcadeFlowCoordinator::get_leaderboardViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "get_leaderboardViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::get_initialTopScreenViewController
// Il2CppName: get_initialTopScreenViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::ViewController* (NetEaseArcadeFlowCoordinator::*)()>(&NetEaseArcadeFlowCoordinator::get_initialTopScreenViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "get_initialTopScreenViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::get_showPlayerStatsInDetailView
// Il2CppName: get_showPlayerStatsInDetailView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NetEaseArcadeFlowCoordinator::*)()>(&NetEaseArcadeFlowCoordinator::get_showPlayerStatsInDetailView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "get_showPlayerStatsInDetailView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate
// Il2CppName: SinglePlayerLevelSelectionFlowCoordinatorDidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::*)(bool, bool)>(&NetEaseArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "SinglePlayerLevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
// Il2CppName: SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::*)(bool)>(&NetEaseArcadeFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish
// Il2CppName: ProcessLevelCompletionResultsAfterLevelDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*, bool)>(&NetEaseArcadeFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), "ProcessLevelCompletionResultsAfterLevelDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::*)()>(&NetEaseArcadeFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::*)()>(&NetEaseArcadeFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEaseArcadeFlowCoordinator/<LogoutAsync>d__22
#include "GlobalNamespace/NetEaseArcadeFlowCoordinator_-LogoutAsync-d__22.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseArcadeFlowCoordinator/<LogoutAsync>d__22.MoveNext
void GlobalNamespace::NetEaseArcadeFlowCoordinator::$LogoutAsync$d__22::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::$LogoutAsync$d__22::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: NetEaseArcadeFlowCoordinator/<LogoutAsync>d__22.SetStateMachine
void GlobalNamespace::NetEaseArcadeFlowCoordinator::$LogoutAsync$d__22::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::$LogoutAsync$d__22::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::$LogoutAsync$d__22::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::$LogoutAsync$d__22::*)()>(&NetEaseArcadeFlowCoordinator::$LogoutAsync$d__22::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator::$LogoutAsync$d__22), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::$LogoutAsync$d__22::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::$LogoutAsync$d__22::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&NetEaseArcadeFlowCoordinator::$LogoutAsync$d__22::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator::$LogoutAsync$d__22), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NetEaseArcadeFlowCoordinator/<>c__DisplayClass27_0
#include "GlobalNamespace/NetEaseArcadeFlowCoordinator_--c__DisplayClass27_0.hpp"
// Including type: ResultsViewController
#include "GlobalNamespace/ResultsViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: NetEaseArcadeFlowCoordinator/<>c__DisplayClass27_0.<HandleResultsViewControllerRestartButtonPressed>b__0
void GlobalNamespace::NetEaseArcadeFlowCoordinator::$$c__DisplayClass27_0::$HandleResultsViewControllerRestartButtonPressed$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseArcadeFlowCoordinator::$$c__DisplayClass27_0::<HandleResultsViewControllerRestartButtonPressed>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleResultsViewControllerRestartButtonPressed>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::$$c__DisplayClass27_0::$HandleResultsViewControllerRestartButtonPressed$b__0
// Il2CppName: <HandleResultsViewControllerRestartButtonPressed>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::$$c__DisplayClass27_0::*)()>(&NetEaseArcadeFlowCoordinator::$$c__DisplayClass27_0::$HandleResultsViewControllerRestartButtonPressed$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator::$$c__DisplayClass27_0*), "<HandleResultsViewControllerRestartButtonPressed>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NetEaseArcadeFlowCoordinator::$$c__DisplayClass27_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::$$c__DisplayClass27_0::*)()>(&NetEaseArcadeFlowCoordinator::$$c__DisplayClass27_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator::$$c__DisplayClass27_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NetEaseArcadeFlowCoordinator::$$c__DisplayClass27_0::*)()>(&NetEaseArcadeFlowCoordinator::$$c__DisplayClass27_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NetEaseArcadeFlowCoordinator::$$c__DisplayClass27_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PartyFreePlayFlowCoordinator
#include "GlobalNamespace/PartyFreePlayFlowCoordinator.hpp"
// Including type: PartyFreePlayFlowCoordinator/<>c__DisplayClass19_0
#include "GlobalNamespace/PartyFreePlayFlowCoordinator_--c__DisplayClass19_0.hpp"
// Including type: PartyFreePlayFlowCoordinator/<>c__DisplayClass24_0
#include "GlobalNamespace/PartyFreePlayFlowCoordinator_--c__DisplayClass24_0.hpp"
// Including type: MenuLightsPresetSO
#include "GlobalNamespace/MenuLightsPresetSO.hpp"
// Including type: MenuLightsManager
#include "GlobalNamespace/MenuLightsManager.hpp"
// Including type: ResultsViewController
#include "GlobalNamespace/ResultsViewController.hpp"
// Including type: LocalLeaderboardViewController
#include "GlobalNamespace/LocalLeaderboardViewController.hpp"
// Including type: EnterPlayerGuestNameViewController
#include "GlobalNamespace/EnterPlayerGuestNameViewController.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: LeaderboardViewController
#include "GlobalNamespace/LeaderboardViewController.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PartyFreePlayFlowCoordinator.WillScoreGoToLeaderboard
bool GlobalNamespace::PartyFreePlayFlowCoordinator::WillScoreGoToLeaderboard(GlobalNamespace::LevelCompletionResults* levelCompletionResults, ::Il2CppString* leaderboardId, bool practice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyFreePlayFlowCoordinator::WillScoreGoToLeaderboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WillScoreGoToLeaderboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(leaderboardId), ::il2cpp_utils::ExtractType(practice)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, levelCompletionResults, leaderboardId, practice);
}
// Autogenerated method: PartyFreePlayFlowCoordinator.IsNewHighScore
bool GlobalNamespace::PartyFreePlayFlowCoordinator::IsNewHighScore(GlobalNamespace::LevelCompletionResults* levelCompletionResults, ::Il2CppString* leaderboardId) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyFreePlayFlowCoordinator::IsNewHighScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsNewHighScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(leaderboardId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, levelCompletionResults, leaderboardId);
}
// Autogenerated method: PartyFreePlayFlowCoordinator.ProcessScore
void GlobalNamespace::PartyFreePlayFlowCoordinator::ProcessScore(GlobalNamespace::LevelCompletionResults* levelCompletionResults, ::Il2CppString* leaderboardId, ::Il2CppString* playerName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyFreePlayFlowCoordinator::ProcessScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(leaderboardId), ::il2cpp_utils::ExtractType(playerName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelCompletionResults, leaderboardId, playerName);
}
// Autogenerated method: PartyFreePlayFlowCoordinator.HandleResultsViewControllerContinueButtonPressed
void GlobalNamespace::PartyFreePlayFlowCoordinator::HandleResultsViewControllerContinueButtonPressed(GlobalNamespace::ResultsViewController* resultsViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyFreePlayFlowCoordinator::HandleResultsViewControllerContinueButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleResultsViewControllerContinueButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, resultsViewController);
}
// Autogenerated method: PartyFreePlayFlowCoordinator.HandleResultsViewControllerRestartButtonPressed
void GlobalNamespace::PartyFreePlayFlowCoordinator::HandleResultsViewControllerRestartButtonPressed(GlobalNamespace::ResultsViewController* resultsViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyFreePlayFlowCoordinator::HandleResultsViewControllerRestartButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleResultsViewControllerRestartButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, resultsViewController);
}
// Autogenerated method: PartyFreePlayFlowCoordinator.get_gameMode
::Il2CppString* GlobalNamespace::PartyFreePlayFlowCoordinator::get_gameMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyFreePlayFlowCoordinator::get_gameMode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PartyFreePlayFlowCoordinator.get_leaderboardViewController
GlobalNamespace::LeaderboardViewController* GlobalNamespace::PartyFreePlayFlowCoordinator::get_leaderboardViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyFreePlayFlowCoordinator::get_leaderboardViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leaderboardViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LeaderboardViewController*, false>(this, ___internal__method);
}
// Autogenerated method: PartyFreePlayFlowCoordinator.get_showPlayerStatsInDetailView
bool GlobalNamespace::PartyFreePlayFlowCoordinator::get_showPlayerStatsInDetailView() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyFreePlayFlowCoordinator::get_showPlayerStatsInDetailView");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_showPlayerStatsInDetailView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PartyFreePlayFlowCoordinator.get_showBackButtonForMainViewController
bool GlobalNamespace::PartyFreePlayFlowCoordinator::get_showBackButtonForMainViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyFreePlayFlowCoordinator::get_showBackButtonForMainViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_showBackButtonForMainViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: PartyFreePlayFlowCoordinator.get_mainTitle
::Il2CppString* GlobalNamespace::PartyFreePlayFlowCoordinator::get_mainTitle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyFreePlayFlowCoordinator::get_mainTitle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mainTitle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: PartyFreePlayFlowCoordinator.SinglePlayerLevelSelectionFlowCoordinatorDidActivate
void GlobalNamespace::PartyFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate(bool firstActivation, bool addedToHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SinglePlayerLevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy);
}
// Autogenerated method: PartyFreePlayFlowCoordinator.SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
void GlobalNamespace::PartyFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate(bool removedFromHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy);
}
// Autogenerated method: PartyFreePlayFlowCoordinator.ProcessLevelCompletionResultsAfterLevelDidFinish
void GlobalNamespace::PartyFreePlayFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers, bool practice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyFreePlayFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessLevelCompletionResultsAfterLevelDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(practice)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelCompletionResults, difficultyBeatmap, gameplayModifiers, practice);
}
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::WillScoreGoToLeaderboard
// Il2CppName: WillScoreGoToLeaderboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PartyFreePlayFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, ::Il2CppString*, bool)>(&PartyFreePlayFlowCoordinator::WillScoreGoToLeaderboard)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator*), "WillScoreGoToLeaderboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::IsNewHighScore
// Il2CppName: IsNewHighScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PartyFreePlayFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, ::Il2CppString*)>(&PartyFreePlayFlowCoordinator::IsNewHighScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator*), "IsNewHighScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::ProcessScore
// Il2CppName: ProcessScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyFreePlayFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, ::Il2CppString*, ::Il2CppString*)>(&PartyFreePlayFlowCoordinator::ProcessScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator*), "ProcessScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::HandleResultsViewControllerContinueButtonPressed
// Il2CppName: HandleResultsViewControllerContinueButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyFreePlayFlowCoordinator::*)(GlobalNamespace::ResultsViewController*)>(&PartyFreePlayFlowCoordinator::HandleResultsViewControllerContinueButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator*), "HandleResultsViewControllerContinueButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::HandleResultsViewControllerRestartButtonPressed
// Il2CppName: HandleResultsViewControllerRestartButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyFreePlayFlowCoordinator::*)(GlobalNamespace::ResultsViewController*)>(&PartyFreePlayFlowCoordinator::HandleResultsViewControllerRestartButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator*), "HandleResultsViewControllerRestartButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::get_gameMode
// Il2CppName: get_gameMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PartyFreePlayFlowCoordinator::*)()>(&PartyFreePlayFlowCoordinator::get_gameMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator*), "get_gameMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::get_leaderboardViewController
// Il2CppName: get_leaderboardViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LeaderboardViewController* (PartyFreePlayFlowCoordinator::*)()>(&PartyFreePlayFlowCoordinator::get_leaderboardViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator*), "get_leaderboardViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::get_showPlayerStatsInDetailView
// Il2CppName: get_showPlayerStatsInDetailView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PartyFreePlayFlowCoordinator::*)()>(&PartyFreePlayFlowCoordinator::get_showPlayerStatsInDetailView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator*), "get_showPlayerStatsInDetailView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::get_showBackButtonForMainViewController
// Il2CppName: get_showBackButtonForMainViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PartyFreePlayFlowCoordinator::*)()>(&PartyFreePlayFlowCoordinator::get_showBackButtonForMainViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator*), "get_showBackButtonForMainViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::get_mainTitle
// Il2CppName: get_mainTitle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PartyFreePlayFlowCoordinator::*)()>(&PartyFreePlayFlowCoordinator::get_mainTitle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator*), "get_mainTitle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate
// Il2CppName: SinglePlayerLevelSelectionFlowCoordinatorDidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyFreePlayFlowCoordinator::*)(bool, bool)>(&PartyFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator*), "SinglePlayerLevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
// Il2CppName: SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyFreePlayFlowCoordinator::*)(bool)>(&PartyFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator*), "SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish
// Il2CppName: ProcessLevelCompletionResultsAfterLevelDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyFreePlayFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*, bool)>(&PartyFreePlayFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator*), "ProcessLevelCompletionResultsAfterLevelDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyFreePlayFlowCoordinator::*)()>(&PartyFreePlayFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyFreePlayFlowCoordinator::*)()>(&PartyFreePlayFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PartyFreePlayFlowCoordinator/<>c__DisplayClass19_0
#include "GlobalNamespace/PartyFreePlayFlowCoordinator_--c__DisplayClass19_0.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: EnterPlayerGuestNameViewController
#include "GlobalNamespace/EnterPlayerGuestNameViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PartyFreePlayFlowCoordinator/<>c__DisplayClass19_0.<ProcessLevelCompletionResultsAfterLevelDidFinish>b__0
void GlobalNamespace::PartyFreePlayFlowCoordinator::$$c__DisplayClass19_0::$ProcessLevelCompletionResultsAfterLevelDidFinish$b__0(GlobalNamespace::EnterPlayerGuestNameViewController* viewController, ::Il2CppString* playerName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyFreePlayFlowCoordinator::$$c__DisplayClass19_0::<ProcessLevelCompletionResultsAfterLevelDidFinish>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ProcessLevelCompletionResultsAfterLevelDidFinish>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(playerName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, playerName);
}
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::$$c__DisplayClass19_0::$ProcessLevelCompletionResultsAfterLevelDidFinish$b__0
// Il2CppName: <ProcessLevelCompletionResultsAfterLevelDidFinish>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyFreePlayFlowCoordinator::$$c__DisplayClass19_0::*)(GlobalNamespace::EnterPlayerGuestNameViewController*, ::Il2CppString*)>(&PartyFreePlayFlowCoordinator::$$c__DisplayClass19_0::$ProcessLevelCompletionResultsAfterLevelDidFinish$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator::$$c__DisplayClass19_0*), "<ProcessLevelCompletionResultsAfterLevelDidFinish>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EnterPlayerGuestNameViewController*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::$$c__DisplayClass19_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyFreePlayFlowCoordinator::$$c__DisplayClass19_0::*)()>(&PartyFreePlayFlowCoordinator::$$c__DisplayClass19_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator::$$c__DisplayClass19_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyFreePlayFlowCoordinator::$$c__DisplayClass19_0::*)()>(&PartyFreePlayFlowCoordinator::$$c__DisplayClass19_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator::$$c__DisplayClass19_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PartyFreePlayFlowCoordinator/<>c__DisplayClass24_0
#include "GlobalNamespace/PartyFreePlayFlowCoordinator_--c__DisplayClass24_0.hpp"
// Including type: ResultsViewController
#include "GlobalNamespace/ResultsViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PartyFreePlayFlowCoordinator/<>c__DisplayClass24_0.<HandleResultsViewControllerRestartButtonPressed>b__0
void GlobalNamespace::PartyFreePlayFlowCoordinator::$$c__DisplayClass24_0::$HandleResultsViewControllerRestartButtonPressed$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PartyFreePlayFlowCoordinator::$$c__DisplayClass24_0::<HandleResultsViewControllerRestartButtonPressed>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleResultsViewControllerRestartButtonPressed>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::$$c__DisplayClass24_0::$HandleResultsViewControllerRestartButtonPressed$b__0
// Il2CppName: <HandleResultsViewControllerRestartButtonPressed>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyFreePlayFlowCoordinator::$$c__DisplayClass24_0::*)()>(&PartyFreePlayFlowCoordinator::$$c__DisplayClass24_0::$HandleResultsViewControllerRestartButtonPressed$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator::$$c__DisplayClass24_0*), "<HandleResultsViewControllerRestartButtonPressed>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PartyFreePlayFlowCoordinator::$$c__DisplayClass24_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyFreePlayFlowCoordinator::$$c__DisplayClass24_0::*)()>(&PartyFreePlayFlowCoordinator::$$c__DisplayClass24_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator::$$c__DisplayClass24_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PartyFreePlayFlowCoordinator::$$c__DisplayClass24_0::*)()>(&PartyFreePlayFlowCoordinator::$$c__DisplayClass24_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PartyFreePlayFlowCoordinator::$$c__DisplayClass24_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SettingsFlowCoordinator
#include "GlobalNamespace/SettingsFlowCoordinator.hpp"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
// Including type: MainSettingsMenuViewController
#include "GlobalNamespace/MainSettingsMenuViewController.hpp"
// Including type: System.Action`2
#include "System/Action_2.hpp"
// Including type: SettingsSubMenuInfo
#include "GlobalNamespace/SettingsSubMenuInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE23090
// Autogenerated static field getter
// Get static field: static private System.Int32 _selectedSettingsSubMenuInfoIdx
int GlobalNamespace::SettingsFlowCoordinator::_get__selectedSettingsSubMenuInfoIdx() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::_get__selectedSettingsSubMenuInfoIdx");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "SettingsFlowCoordinator", "_selectedSettingsSubMenuInfoIdx"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 _selectedSettingsSubMenuInfoIdx
void GlobalNamespace::SettingsFlowCoordinator::_set__selectedSettingsSubMenuInfoIdx(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::_set__selectedSettingsSubMenuInfoIdx");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SettingsFlowCoordinator", "_selectedSettingsSubMenuInfoIdx", value));
}
// Autogenerated method: SettingsFlowCoordinator.add_didFinishEvent
void GlobalNamespace::SettingsFlowCoordinator::add_didFinishEvent(System::Action_2<GlobalNamespace::SettingsFlowCoordinator*, GlobalNamespace::SettingsFlowCoordinator::FinishAction>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::add_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SettingsFlowCoordinator.remove_didFinishEvent
void GlobalNamespace::SettingsFlowCoordinator::remove_didFinishEvent(System::Action_2<GlobalNamespace::SettingsFlowCoordinator*, GlobalNamespace::SettingsFlowCoordinator::FinishAction>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::remove_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SettingsFlowCoordinator.ShowSecretViewController
void GlobalNamespace::SettingsFlowCoordinator::ShowSecretViewController(HMUI::ViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::ShowSecretViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowSecretViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: SettingsFlowCoordinator.HandleDidSelectSettingsSubMenu
void GlobalNamespace::SettingsFlowCoordinator::HandleDidSelectSettingsSubMenu(GlobalNamespace::SettingsSubMenuInfo* settingsSubMenuInfo, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::HandleDidSelectSettingsSubMenu");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleDidSelectSettingsSubMenu", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(settingsSubMenuInfo), ::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, settingsSubMenuInfo, idx);
}
// Autogenerated method: SettingsFlowCoordinator.ReplaceViewController
void GlobalNamespace::SettingsFlowCoordinator::ReplaceViewController(HMUI::ViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::ReplaceViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReplaceViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: SettingsFlowCoordinator.HandleSettingsNavigationControllerDidFinish
void GlobalNamespace::SettingsFlowCoordinator::HandleSettingsNavigationControllerDidFinish(GlobalNamespace::SettingsNavigationController::FinishAction finishAction) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::HandleSettingsNavigationControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSettingsNavigationControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishAction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, finishAction);
}
// Autogenerated method: SettingsFlowCoordinator.ApplySettings
void GlobalNamespace::SettingsFlowCoordinator::ApplySettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::ApplySettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplySettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SettingsFlowCoordinator.CancelSettings
void GlobalNamespace::SettingsFlowCoordinator::CancelSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::CancelSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SettingsFlowCoordinator.DidActivate
void GlobalNamespace::SettingsFlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: SettingsFlowCoordinator.DidDeactivate
void GlobalNamespace::SettingsFlowCoordinator::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Autogenerated method: SettingsFlowCoordinator..cctor
void GlobalNamespace::SettingsFlowCoordinator::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "SettingsFlowCoordinator", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: SettingsFlowCoordinator::add_didFinishEvent
// Il2CppName: add_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SettingsFlowCoordinator::*)(System::Action_2<GlobalNamespace::SettingsFlowCoordinator*, GlobalNamespace::SettingsFlowCoordinator::FinishAction>*)>(&SettingsFlowCoordinator::add_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SettingsFlowCoordinator*), "add_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::SettingsFlowCoordinator*, GlobalNamespace::SettingsFlowCoordinator::FinishAction>*>()});
  }
};
// Writing MetadataGetter for method: SettingsFlowCoordinator::remove_didFinishEvent
// Il2CppName: remove_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SettingsFlowCoordinator::*)(System::Action_2<GlobalNamespace::SettingsFlowCoordinator*, GlobalNamespace::SettingsFlowCoordinator::FinishAction>*)>(&SettingsFlowCoordinator::remove_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SettingsFlowCoordinator*), "remove_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_2<GlobalNamespace::SettingsFlowCoordinator*, GlobalNamespace::SettingsFlowCoordinator::FinishAction>*>()});
  }
};
// Writing MetadataGetter for method: SettingsFlowCoordinator::ShowSecretViewController
// Il2CppName: ShowSecretViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SettingsFlowCoordinator::*)(HMUI::ViewController*)>(&SettingsFlowCoordinator::ShowSecretViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SettingsFlowCoordinator*), "ShowSecretViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>()});
  }
};
// Writing MetadataGetter for method: SettingsFlowCoordinator::HandleDidSelectSettingsSubMenu
// Il2CppName: HandleDidSelectSettingsSubMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SettingsFlowCoordinator::*)(GlobalNamespace::SettingsSubMenuInfo*, int)>(&SettingsFlowCoordinator::HandleDidSelectSettingsSubMenu)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SettingsFlowCoordinator*), "HandleDidSelectSettingsSubMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SettingsSubMenuInfo*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SettingsFlowCoordinator::ReplaceViewController
// Il2CppName: ReplaceViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SettingsFlowCoordinator::*)(HMUI::ViewController*)>(&SettingsFlowCoordinator::ReplaceViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SettingsFlowCoordinator*), "ReplaceViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>()});
  }
};
// Writing MetadataGetter for method: SettingsFlowCoordinator::HandleSettingsNavigationControllerDidFinish
// Il2CppName: HandleSettingsNavigationControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SettingsFlowCoordinator::*)(GlobalNamespace::SettingsNavigationController::FinishAction)>(&SettingsFlowCoordinator::HandleSettingsNavigationControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SettingsFlowCoordinator*), "HandleSettingsNavigationControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SettingsNavigationController::FinishAction>()});
  }
};
// Writing MetadataGetter for method: SettingsFlowCoordinator::ApplySettings
// Il2CppName: ApplySettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SettingsFlowCoordinator::*)()>(&SettingsFlowCoordinator::ApplySettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SettingsFlowCoordinator*), "ApplySettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SettingsFlowCoordinator::CancelSettings
// Il2CppName: CancelSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SettingsFlowCoordinator::*)()>(&SettingsFlowCoordinator::CancelSettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SettingsFlowCoordinator*), "CancelSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SettingsFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SettingsFlowCoordinator::*)(bool, bool, bool)>(&SettingsFlowCoordinator::DidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SettingsFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SettingsFlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SettingsFlowCoordinator::*)(bool, bool)>(&SettingsFlowCoordinator::DidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SettingsFlowCoordinator*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SettingsFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SettingsFlowCoordinator::*)()>(&SettingsFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SettingsFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SettingsFlowCoordinator::*)()>(&SettingsFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SettingsFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SettingsFlowCoordinator::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SettingsFlowCoordinator::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SettingsFlowCoordinator*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SettingsFlowCoordinator/FinishAction
#include "GlobalNamespace/SettingsFlowCoordinator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public SettingsFlowCoordinator/FinishAction Cancel
GlobalNamespace::SettingsFlowCoordinator::FinishAction GlobalNamespace::SettingsFlowCoordinator::FinishAction::_get_Cancel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::FinishAction::_get_Cancel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SettingsFlowCoordinator::FinishAction>("", "SettingsFlowCoordinator/FinishAction", "Cancel"));
}
// Autogenerated static field setter
// Set static field: static public SettingsFlowCoordinator/FinishAction Cancel
void GlobalNamespace::SettingsFlowCoordinator::FinishAction::_set_Cancel(GlobalNamespace::SettingsFlowCoordinator::FinishAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::FinishAction::_set_Cancel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SettingsFlowCoordinator/FinishAction", "Cancel", value));
}
// Autogenerated static field getter
// Get static field: static public SettingsFlowCoordinator/FinishAction Ok
GlobalNamespace::SettingsFlowCoordinator::FinishAction GlobalNamespace::SettingsFlowCoordinator::FinishAction::_get_Ok() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::FinishAction::_get_Ok");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SettingsFlowCoordinator::FinishAction>("", "SettingsFlowCoordinator/FinishAction", "Ok"));
}
// Autogenerated static field setter
// Set static field: static public SettingsFlowCoordinator/FinishAction Ok
void GlobalNamespace::SettingsFlowCoordinator::FinishAction::_set_Ok(GlobalNamespace::SettingsFlowCoordinator::FinishAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::FinishAction::_set_Ok");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SettingsFlowCoordinator/FinishAction", "Ok", value));
}
// Autogenerated static field getter
// Get static field: static public SettingsFlowCoordinator/FinishAction Apply
GlobalNamespace::SettingsFlowCoordinator::FinishAction GlobalNamespace::SettingsFlowCoordinator::FinishAction::_get_Apply() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::FinishAction::_get_Apply");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::SettingsFlowCoordinator::FinishAction>("", "SettingsFlowCoordinator/FinishAction", "Apply"));
}
// Autogenerated static field setter
// Set static field: static public SettingsFlowCoordinator/FinishAction Apply
void GlobalNamespace::SettingsFlowCoordinator::FinishAction::_set_Apply(GlobalNamespace::SettingsFlowCoordinator::FinishAction value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsFlowCoordinator::FinishAction::_set_Apply");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "SettingsFlowCoordinator/FinishAction", "Apply", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ShowcaseFlowCoordinator
#include "GlobalNamespace/ShowcaseFlowCoordinator.hpp"
// Including type: ShowcaseFlowCoordinator/<>c__DisplayClass26_0
#include "GlobalNamespace/ShowcaseFlowCoordinator_--c__DisplayClass26_0.hpp"
// Including type: ShowcaseFlowCoordinator/<>c__DisplayClass30_0
#include "GlobalNamespace/ShowcaseFlowCoordinator_--c__DisplayClass30_0.hpp"
// Including type: LocalLeaderboardsModel
#include "GlobalNamespace/LocalLeaderboardsModel.hpp"
// Including type: TabBarViewController
#include "GlobalNamespace/TabBarViewController.hpp"
// Including type: MenuLightsPresetSO
#include "GlobalNamespace/MenuLightsPresetSO.hpp"
// Including type: LeaderboardViewController
#include "GlobalNamespace/LeaderboardViewController.hpp"
// Including type: MenuLightsManager
#include "GlobalNamespace/MenuLightsManager.hpp"
// Including type: ResultsViewController
#include "GlobalNamespace/ResultsViewController.hpp"
// Including type: LocalLeaderboardViewController
#include "GlobalNamespace/LocalLeaderboardViewController.hpp"
// Including type: EnterPlayerGuestNameViewController
#include "GlobalNamespace/EnterPlayerGuestNameViewController.hpp"
// Including type: MenuTransitionsHelper
#include "GlobalNamespace/MenuTransitionsHelper.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ShowcaseFlowCoordinator.WillScoreGoToLeaderboard
bool GlobalNamespace::ShowcaseFlowCoordinator::WillScoreGoToLeaderboard(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, bool practice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::WillScoreGoToLeaderboard");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WillScoreGoToLeaderboard", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(practice)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, levelCompletionResults, difficultyBeatmap, practice);
}
// Autogenerated method: ShowcaseFlowCoordinator.ProcessScore
bool GlobalNamespace::ShowcaseFlowCoordinator::ProcessScore(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, bool practice, ::Il2CppString* playerName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::ProcessScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(practice), ::il2cpp_utils::ExtractType(playerName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, levelCompletionResults, difficultyBeatmap, practice, playerName);
}
// Autogenerated method: ShowcaseFlowCoordinator.HandleResultsViewControllerContinueButtonPressed
void GlobalNamespace::ShowcaseFlowCoordinator::HandleResultsViewControllerContinueButtonPressed(GlobalNamespace::ResultsViewController* resultsViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::HandleResultsViewControllerContinueButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleResultsViewControllerContinueButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, resultsViewController);
}
// Autogenerated method: ShowcaseFlowCoordinator.HandleResultsViewControllerRestartButtonPressed
void GlobalNamespace::ShowcaseFlowCoordinator::HandleResultsViewControllerRestartButtonPressed(GlobalNamespace::ResultsViewController* resultsViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::HandleResultsViewControllerRestartButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleResultsViewControllerRestartButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, resultsViewController);
}
// Autogenerated method: ShowcaseFlowCoordinator.HandleHowToPlayViewControllerDidFinish
void GlobalNamespace::ShowcaseFlowCoordinator::HandleHowToPlayViewControllerDidFinish(GlobalNamespace::HowToPlayViewController::HowToPlayOptions howToPlayOptions) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::HandleHowToPlayViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHowToPlayViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(howToPlayOptions)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, howToPlayOptions);
}
// Autogenerated method: ShowcaseFlowCoordinator.HandleHowToPlayTabSelected
void GlobalNamespace::ShowcaseFlowCoordinator::HandleHowToPlayTabSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::HandleHowToPlayTabSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleHowToPlayTabSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ShowcaseFlowCoordinator.<SinglePlayerLevelSelectionFlowCoordinatorDidActivate>b__24_0
void GlobalNamespace::ShowcaseFlowCoordinator::$SinglePlayerLevelSelectionFlowCoordinatorDidActivate$b__24_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::<SinglePlayerLevelSelectionFlowCoordinatorDidActivate>b__24_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SinglePlayerLevelSelectionFlowCoordinatorDidActivate>b__24_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ShowcaseFlowCoordinator.<HandleHowToPlayTabSelected>b__32_0
void GlobalNamespace::ShowcaseFlowCoordinator::$HandleHowToPlayTabSelected$b__32_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::<HandleHowToPlayTabSelected>b__32_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleHowToPlayTabSelected>b__32_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ShowcaseFlowCoordinator.get_gameMode
::Il2CppString* GlobalNamespace::ShowcaseFlowCoordinator::get_gameMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::get_gameMode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: ShowcaseFlowCoordinator.get_leaderboardViewController
GlobalNamespace::LeaderboardViewController* GlobalNamespace::ShowcaseFlowCoordinator::get_leaderboardViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::get_leaderboardViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leaderboardViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LeaderboardViewController*, false>(this, ___internal__method);
}
// Autogenerated method: ShowcaseFlowCoordinator.get_initialTopScreenViewController
HMUI::ViewController* GlobalNamespace::ShowcaseFlowCoordinator::get_initialTopScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::get_initialTopScreenViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initialTopScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: ShowcaseFlowCoordinator.get_showPlayerStatsInDetailView
bool GlobalNamespace::ShowcaseFlowCoordinator::get_showPlayerStatsInDetailView() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::get_showPlayerStatsInDetailView");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_showPlayerStatsInDetailView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ShowcaseFlowCoordinator.get_hidePacksIfOneOrNone
bool GlobalNamespace::ShowcaseFlowCoordinator::get_hidePacksIfOneOrNone() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::get_hidePacksIfOneOrNone");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hidePacksIfOneOrNone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ShowcaseFlowCoordinator.get_hideGameplaySetup
bool GlobalNamespace::ShowcaseFlowCoordinator::get_hideGameplaySetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::get_hideGameplaySetup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hideGameplaySetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ShowcaseFlowCoordinator.get_hidePracticeButton
bool GlobalNamespace::ShowcaseFlowCoordinator::get_hidePracticeButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::get_hidePracticeButton");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hidePracticeButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: ShowcaseFlowCoordinator.SinglePlayerLevelSelectionFlowCoordinatorDidActivate
void GlobalNamespace::ShowcaseFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate(bool firstActivation, bool addedToHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SinglePlayerLevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy);
}
// Autogenerated method: ShowcaseFlowCoordinator.SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
void GlobalNamespace::ShowcaseFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate(bool removedFromHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy);
}
// Autogenerated method: ShowcaseFlowCoordinator.ProcessLevelCompletionResultsAfterLevelDidFinish
void GlobalNamespace::ShowcaseFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers, bool practice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessLevelCompletionResultsAfterLevelDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(practice)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelCompletionResults, difficultyBeatmap, gameplayModifiers, practice);
}
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::WillScoreGoToLeaderboard
// Il2CppName: WillScoreGoToLeaderboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ShowcaseFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, GlobalNamespace::IDifficultyBeatmap*, bool)>(&ShowcaseFlowCoordinator::WillScoreGoToLeaderboard)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "WillScoreGoToLeaderboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::ProcessScore
// Il2CppName: ProcessScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ShowcaseFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, GlobalNamespace::IDifficultyBeatmap*, bool, ::Il2CppString*)>(&ShowcaseFlowCoordinator::ProcessScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "ProcessScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::HandleResultsViewControllerContinueButtonPressed
// Il2CppName: HandleResultsViewControllerContinueButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::*)(GlobalNamespace::ResultsViewController*)>(&ShowcaseFlowCoordinator::HandleResultsViewControllerContinueButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "HandleResultsViewControllerContinueButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::HandleResultsViewControllerRestartButtonPressed
// Il2CppName: HandleResultsViewControllerRestartButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::*)(GlobalNamespace::ResultsViewController*)>(&ShowcaseFlowCoordinator::HandleResultsViewControllerRestartButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "HandleResultsViewControllerRestartButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::HandleHowToPlayViewControllerDidFinish
// Il2CppName: HandleHowToPlayViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::*)(GlobalNamespace::HowToPlayViewController::HowToPlayOptions)>(&ShowcaseFlowCoordinator::HandleHowToPlayViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "HandleHowToPlayViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::HowToPlayViewController::HowToPlayOptions>()});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::HandleHowToPlayTabSelected
// Il2CppName: HandleHowToPlayTabSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::*)()>(&ShowcaseFlowCoordinator::HandleHowToPlayTabSelected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "HandleHowToPlayTabSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::$SinglePlayerLevelSelectionFlowCoordinatorDidActivate$b__24_0
// Il2CppName: <SinglePlayerLevelSelectionFlowCoordinatorDidActivate>b__24_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::*)()>(&ShowcaseFlowCoordinator::$SinglePlayerLevelSelectionFlowCoordinatorDidActivate$b__24_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "<SinglePlayerLevelSelectionFlowCoordinatorDidActivate>b__24_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::$HandleHowToPlayTabSelected$b__32_0
// Il2CppName: <HandleHowToPlayTabSelected>b__32_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::*)()>(&ShowcaseFlowCoordinator::$HandleHowToPlayTabSelected$b__32_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "<HandleHowToPlayTabSelected>b__32_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::get_gameMode
// Il2CppName: get_gameMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (ShowcaseFlowCoordinator::*)()>(&ShowcaseFlowCoordinator::get_gameMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "get_gameMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::get_leaderboardViewController
// Il2CppName: get_leaderboardViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LeaderboardViewController* (ShowcaseFlowCoordinator::*)()>(&ShowcaseFlowCoordinator::get_leaderboardViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "get_leaderboardViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::get_initialTopScreenViewController
// Il2CppName: get_initialTopScreenViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::ViewController* (ShowcaseFlowCoordinator::*)()>(&ShowcaseFlowCoordinator::get_initialTopScreenViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "get_initialTopScreenViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::get_showPlayerStatsInDetailView
// Il2CppName: get_showPlayerStatsInDetailView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ShowcaseFlowCoordinator::*)()>(&ShowcaseFlowCoordinator::get_showPlayerStatsInDetailView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "get_showPlayerStatsInDetailView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::get_hidePacksIfOneOrNone
// Il2CppName: get_hidePacksIfOneOrNone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ShowcaseFlowCoordinator::*)()>(&ShowcaseFlowCoordinator::get_hidePacksIfOneOrNone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "get_hidePacksIfOneOrNone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::get_hideGameplaySetup
// Il2CppName: get_hideGameplaySetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ShowcaseFlowCoordinator::*)()>(&ShowcaseFlowCoordinator::get_hideGameplaySetup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "get_hideGameplaySetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::get_hidePracticeButton
// Il2CppName: get_hidePracticeButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (ShowcaseFlowCoordinator::*)()>(&ShowcaseFlowCoordinator::get_hidePracticeButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "get_hidePracticeButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate
// Il2CppName: SinglePlayerLevelSelectionFlowCoordinatorDidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::*)(bool, bool)>(&ShowcaseFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "SinglePlayerLevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
// Il2CppName: SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::*)(bool)>(&ShowcaseFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish
// Il2CppName: ProcessLevelCompletionResultsAfterLevelDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*, bool)>(&ShowcaseFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), "ProcessLevelCompletionResultsAfterLevelDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::*)()>(&ShowcaseFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::*)()>(&ShowcaseFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ShowcaseFlowCoordinator/<>c__DisplayClass26_0
#include "GlobalNamespace/ShowcaseFlowCoordinator_--c__DisplayClass26_0.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: EnterPlayerGuestNameViewController
#include "GlobalNamespace/EnterPlayerGuestNameViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ShowcaseFlowCoordinator/<>c__DisplayClass26_0.<ProcessLevelCompletionResultsAfterLevelDidFinish>b__0
void GlobalNamespace::ShowcaseFlowCoordinator::$$c__DisplayClass26_0::$ProcessLevelCompletionResultsAfterLevelDidFinish$b__0(GlobalNamespace::EnterPlayerGuestNameViewController* viewController, ::Il2CppString* playerName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::$$c__DisplayClass26_0::<ProcessLevelCompletionResultsAfterLevelDidFinish>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ProcessLevelCompletionResultsAfterLevelDidFinish>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(playerName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, playerName);
}
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::$$c__DisplayClass26_0::$ProcessLevelCompletionResultsAfterLevelDidFinish$b__0
// Il2CppName: <ProcessLevelCompletionResultsAfterLevelDidFinish>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::$$c__DisplayClass26_0::*)(GlobalNamespace::EnterPlayerGuestNameViewController*, ::Il2CppString*)>(&ShowcaseFlowCoordinator::$$c__DisplayClass26_0::$ProcessLevelCompletionResultsAfterLevelDidFinish$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator::$$c__DisplayClass26_0*), "<ProcessLevelCompletionResultsAfterLevelDidFinish>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EnterPlayerGuestNameViewController*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::$$c__DisplayClass26_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::$$c__DisplayClass26_0::*)()>(&ShowcaseFlowCoordinator::$$c__DisplayClass26_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator::$$c__DisplayClass26_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::$$c__DisplayClass26_0::*)()>(&ShowcaseFlowCoordinator::$$c__DisplayClass26_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator::$$c__DisplayClass26_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ShowcaseFlowCoordinator/<>c__DisplayClass30_0
#include "GlobalNamespace/ShowcaseFlowCoordinator_--c__DisplayClass30_0.hpp"
// Including type: ResultsViewController
#include "GlobalNamespace/ResultsViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ShowcaseFlowCoordinator/<>c__DisplayClass30_0.<HandleResultsViewControllerRestartButtonPressed>b__0
void GlobalNamespace::ShowcaseFlowCoordinator::$$c__DisplayClass30_0::$HandleResultsViewControllerRestartButtonPressed$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShowcaseFlowCoordinator::$$c__DisplayClass30_0::<HandleResultsViewControllerRestartButtonPressed>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleResultsViewControllerRestartButtonPressed>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::$$c__DisplayClass30_0::$HandleResultsViewControllerRestartButtonPressed$b__0
// Il2CppName: <HandleResultsViewControllerRestartButtonPressed>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::$$c__DisplayClass30_0::*)()>(&ShowcaseFlowCoordinator::$$c__DisplayClass30_0::$HandleResultsViewControllerRestartButtonPressed$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator::$$c__DisplayClass30_0*), "<HandleResultsViewControllerRestartButtonPressed>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShowcaseFlowCoordinator::$$c__DisplayClass30_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::$$c__DisplayClass30_0::*)()>(&ShowcaseFlowCoordinator::$$c__DisplayClass30_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator::$$c__DisplayClass30_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShowcaseFlowCoordinator::$$c__DisplayClass30_0::*)()>(&ShowcaseFlowCoordinator::$$c__DisplayClass30_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShowcaseFlowCoordinator::$$c__DisplayClass30_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleRetailDemoFlowCoordinator
#include "GlobalNamespace/SimpleRetailDemoFlowCoordinator.hpp"
// Including type: SimpleRetailDemoFlowCoordinator/<QuitApplicationCoroutine>d__22
#include "GlobalNamespace/SimpleRetailDemoFlowCoordinator_-QuitApplicationCoroutine-d__22.hpp"
// Including type: SimpleRetailDemoFlowCoordinator/<>c__DisplayClass23_0
#include "GlobalNamespace/SimpleRetailDemoFlowCoordinator_--c__DisplayClass23_0.hpp"
// Including type: MenuTransitionsHelper
#include "GlobalNamespace/MenuTransitionsHelper.hpp"
// Including type: MenuLightsPresetSO
#include "GlobalNamespace/MenuLightsPresetSO.hpp"
// Including type: BeatmapLevelSO
#include "GlobalNamespace/BeatmapLevelSO.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: HowToPlayViewController
#include "GlobalNamespace/HowToPlayViewController.hpp"
// Including type: ResultsViewController
#include "GlobalNamespace/ResultsViewController.hpp"
// Including type: MenuLightsManager
#include "GlobalNamespace/MenuLightsManager.hpp"
// Including type: FadeInOutController
#include "GlobalNamespace/FadeInOutController.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: StandardLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/StandardLevelScenesTransitionSetupDataSO.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SimpleRetailDemoFlowCoordinator.HandleSimpleDemoViewControllerDidFinish
void GlobalNamespace::SimpleRetailDemoFlowCoordinator::HandleSimpleDemoViewControllerDidFinish(GlobalNamespace::SimpleRetailDemoViewController* viewController, GlobalNamespace::SimpleRetailDemoViewController::MenuButton menuButton) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleRetailDemoFlowCoordinator::HandleSimpleDemoViewControllerDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSimpleDemoViewControllerDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController), ::il2cpp_utils::ExtractType(menuButton)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController, menuButton);
}
// Autogenerated method: SimpleRetailDemoFlowCoordinator.HandleResultsViewControllerContinueButtonPressed
void GlobalNamespace::SimpleRetailDemoFlowCoordinator::HandleResultsViewControllerContinueButtonPressed(GlobalNamespace::ResultsViewController* resultsViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleRetailDemoFlowCoordinator::HandleResultsViewControllerContinueButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleResultsViewControllerContinueButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, resultsViewController);
}
// Autogenerated method: SimpleRetailDemoFlowCoordinator.QuitApplicationCoroutine
System::Collections::IEnumerator* GlobalNamespace::SimpleRetailDemoFlowCoordinator::QuitApplicationCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleRetailDemoFlowCoordinator::QuitApplicationCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "QuitApplicationCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: SimpleRetailDemoFlowCoordinator.HandleResultsViewControllerRestartButtonPressed
void GlobalNamespace::SimpleRetailDemoFlowCoordinator::HandleResultsViewControllerRestartButtonPressed(GlobalNamespace::ResultsViewController* resultsViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleRetailDemoFlowCoordinator::HandleResultsViewControllerRestartButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleResultsViewControllerRestartButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, resultsViewController);
}
// Autogenerated method: SimpleRetailDemoFlowCoordinator.StartLevel
void GlobalNamespace::SimpleRetailDemoFlowCoordinator::StartLevel(System::Action* beforeSceneSwitchCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleRetailDemoFlowCoordinator::StartLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beforeSceneSwitchCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beforeSceneSwitchCallback);
}
// Autogenerated method: SimpleRetailDemoFlowCoordinator.HandleLevelDidFinish
void GlobalNamespace::SimpleRetailDemoFlowCoordinator::HandleLevelDidFinish(GlobalNamespace::StandardLevelScenesTransitionSetupDataSO* standardLevelSceneSetupData, GlobalNamespace::LevelCompletionResults* levelCompletionResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleRetailDemoFlowCoordinator::HandleLevelDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLevelDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(standardLevelSceneSetupData), ::il2cpp_utils::ExtractType(levelCompletionResults)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, standardLevelSceneSetupData, levelCompletionResults);
}
// Autogenerated method: SimpleRetailDemoFlowCoordinator.DidActivate
void GlobalNamespace::SimpleRetailDemoFlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleRetailDemoFlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Autogenerated method: SimpleRetailDemoFlowCoordinator.DidDeactivate
void GlobalNamespace::SimpleRetailDemoFlowCoordinator::DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleRetailDemoFlowCoordinator::DidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy), ::il2cpp_utils::ExtractType(screenSystemDisabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy, screenSystemDisabling);
}
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::HandleSimpleDemoViewControllerDidFinish
// Il2CppName: HandleSimpleDemoViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::*)(GlobalNamespace::SimpleRetailDemoViewController*, GlobalNamespace::SimpleRetailDemoViewController::MenuButton)>(&SimpleRetailDemoFlowCoordinator::HandleSimpleDemoViewControllerDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator*), "HandleSimpleDemoViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SimpleRetailDemoViewController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SimpleRetailDemoViewController::MenuButton>()});
  }
};
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::HandleResultsViewControllerContinueButtonPressed
// Il2CppName: HandleResultsViewControllerContinueButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::*)(GlobalNamespace::ResultsViewController*)>(&SimpleRetailDemoFlowCoordinator::HandleResultsViewControllerContinueButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator*), "HandleResultsViewControllerContinueButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::QuitApplicationCoroutine
// Il2CppName: QuitApplicationCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (SimpleRetailDemoFlowCoordinator::*)()>(&SimpleRetailDemoFlowCoordinator::QuitApplicationCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator*), "QuitApplicationCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::HandleResultsViewControllerRestartButtonPressed
// Il2CppName: HandleResultsViewControllerRestartButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::*)(GlobalNamespace::ResultsViewController*)>(&SimpleRetailDemoFlowCoordinator::HandleResultsViewControllerRestartButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator*), "HandleResultsViewControllerRestartButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::StartLevel
// Il2CppName: StartLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::*)(System::Action*)>(&SimpleRetailDemoFlowCoordinator::StartLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator*), "StartLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::HandleLevelDidFinish
// Il2CppName: HandleLevelDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::*)(GlobalNamespace::StandardLevelScenesTransitionSetupDataSO*, GlobalNamespace::LevelCompletionResults*)>(&SimpleRetailDemoFlowCoordinator::HandleLevelDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator*), "HandleLevelDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardLevelScenesTransitionSetupDataSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>()});
  }
};
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::*)(bool, bool, bool)>(&SimpleRetailDemoFlowCoordinator::DidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::*)(bool, bool)>(&SimpleRetailDemoFlowCoordinator::DidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::*)()>(&SimpleRetailDemoFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::*)()>(&SimpleRetailDemoFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SimpleRetailDemoFlowCoordinator/<QuitApplicationCoroutine>d__22
#include "GlobalNamespace/SimpleRetailDemoFlowCoordinator_-QuitApplicationCoroutine-d__22.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SimpleRetailDemoFlowCoordinator/<QuitApplicationCoroutine>d__22.System.IDisposable.Dispose
void GlobalNamespace::SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleRetailDemoFlowCoordinator/<QuitApplicationCoroutine>d__22.MoveNext
bool GlobalNamespace::SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SimpleRetailDemoFlowCoordinator/<QuitApplicationCoroutine>d__22.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SimpleRetailDemoFlowCoordinator/<QuitApplicationCoroutine>d__22.System.Collections.IEnumerator.Reset
void GlobalNamespace::SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleRetailDemoFlowCoordinator/<QuitApplicationCoroutine>d__22.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::*)(int)>(&SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::*)(int)>(&SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::*)()>(&SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::*)()>(&SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::*)()>(&SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::*)()>(&SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::*)()>(&SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator::$QuitApplicationCoroutine$d__22*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleRetailDemoFlowCoordinator/<>c__DisplayClass23_0
#include "GlobalNamespace/SimpleRetailDemoFlowCoordinator_--c__DisplayClass23_0.hpp"
// Including type: ResultsViewController
#include "GlobalNamespace/ResultsViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SimpleRetailDemoFlowCoordinator/<>c__DisplayClass23_0.<HandleResultsViewControllerRestartButtonPressed>b__0
void GlobalNamespace::SimpleRetailDemoFlowCoordinator::$$c__DisplayClass23_0::$HandleResultsViewControllerRestartButtonPressed$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleRetailDemoFlowCoordinator::$$c__DisplayClass23_0::<HandleResultsViewControllerRestartButtonPressed>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleResultsViewControllerRestartButtonPressed>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::$$c__DisplayClass23_0::$HandleResultsViewControllerRestartButtonPressed$b__0
// Il2CppName: <HandleResultsViewControllerRestartButtonPressed>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::$$c__DisplayClass23_0::*)()>(&SimpleRetailDemoFlowCoordinator::$$c__DisplayClass23_0::$HandleResultsViewControllerRestartButtonPressed$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator::$$c__DisplayClass23_0*), "<HandleResultsViewControllerRestartButtonPressed>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleRetailDemoFlowCoordinator::$$c__DisplayClass23_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::$$c__DisplayClass23_0::*)()>(&SimpleRetailDemoFlowCoordinator::$$c__DisplayClass23_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator::$$c__DisplayClass23_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleRetailDemoFlowCoordinator::$$c__DisplayClass23_0::*)()>(&SimpleRetailDemoFlowCoordinator::$$c__DisplayClass23_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleRetailDemoFlowCoordinator::$$c__DisplayClass23_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SinglePlayerLevelSelectionFlowCoordinator
#include "GlobalNamespace/SinglePlayerLevelSelectionFlowCoordinator.hpp"
// Including type: SinglePlayerLevelSelectionFlowCoordinator/<>c__DisplayClass37_0
#include "GlobalNamespace/SinglePlayerLevelSelectionFlowCoordinator_--c__DisplayClass37_0.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: PracticeViewController
#include "GlobalNamespace/PracticeViewController.hpp"
// Including type: GameplaySetupViewController
#include "GlobalNamespace/GameplaySetupViewController.hpp"
// Including type: MenuTransitionsHelper
#include "GlobalNamespace/MenuTransitionsHelper.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
// Including type: AppStaticSettingsSO
#include "GlobalNamespace/AppStaticSettingsSO.hpp"
// Including type: SimpleDialogPromptViewController
#include "GlobalNamespace/SimpleDialogPromptViewController.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: HMUI.ViewController/AnimationType
#include "HMUI/ViewController_AnimationType.hpp"
// Including type: PlayerSpecificSettings
#include "GlobalNamespace/PlayerSpecificSettings.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
// Including type: LeaderboardViewController
#include "GlobalNamespace/LeaderboardViewController.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: StandardLevelScenesTransitionSetupDataSO
#include "GlobalNamespace/StandardLevelScenesTransitionSetupDataSO.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.get_gameMode
::Il2CppString* GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_gameMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_gameMode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.get_isInPracticeView
bool GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_isInPracticeView() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_isInPracticeView");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInPracticeView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.get_playerSettings
GlobalNamespace::PlayerSpecificSettings* GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_playerSettings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_playerSettings");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_playerSettings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PlayerSpecificSettings*, false>(this, ___internal__method);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.get_gameplayModifiers
GlobalNamespace::GameplayModifiers* GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_gameplayModifiers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_gameplayModifiers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameplayModifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifiers*, false>(this, ___internal__method);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.get_hideGameplaySetup
bool GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_hideGameplaySetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_hideGameplaySetup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hideGameplaySetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.get_leaderboardViewController
GlobalNamespace::LeaderboardViewController* GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_leaderboardViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_leaderboardViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leaderboardViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LeaderboardViewController*, false>(this, ___internal__method);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.SinglePlayerLevelSelectionFlowCoordinatorDidActivate
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate(bool firstActivation, bool addedToHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SinglePlayerLevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate(bool removedFromHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.ProcessLevelCompletionResultsAfterLevelDidFinish
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers, bool practice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessLevelCompletionResultsAfterLevelDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(practice)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelCompletionResults, difficultyBeatmap, gameplayModifiers, practice);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.add_didFinishEvent
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::add_didFinishEvent(System::Action_1<GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::add_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.remove_didFinishEvent
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::remove_didFinishEvent(System::Action_1<GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::remove_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.StartLevelOrShow360Prompt
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::StartLevelOrShow360Prompt(System::Action* beforeSceneSwitchCallback, bool practice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::StartLevelOrShow360Prompt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartLevelOrShow360Prompt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beforeSceneSwitchCallback), ::il2cpp_utils::ExtractType(practice)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beforeSceneSwitchCallback, practice);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.StartLevel
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::StartLevel(System::Action* beforeSceneSwitchCallback, bool practice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::StartLevel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartLevel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beforeSceneSwitchCallback), ::il2cpp_utils::ExtractType(practice)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beforeSceneSwitchCallback, practice);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.HandlePracticeViewControllerDidPressPlayButton
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::HandlePracticeViewControllerDidPressPlayButton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::HandlePracticeViewControllerDidPressPlayButton");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePracticeViewControllerDidPressPlayButton", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.HandleStandardLevelDidFinish
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::HandleStandardLevelDidFinish(GlobalNamespace::StandardLevelScenesTransitionSetupDataSO* standardLevelScenesTransitionSetupData, GlobalNamespace::LevelCompletionResults* levelCompletionResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::HandleStandardLevelDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleStandardLevelDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(standardLevelScenesTransitionSetupData), ::il2cpp_utils::ExtractType(levelCompletionResults)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, standardLevelScenesTransitionSetupData, levelCompletionResults);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.SetupGameplaySetupViewController
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::SetupGameplaySetupViewController(bool showModifiers, bool showEnvironmentOverrideSettings, bool showColorSchemesSettings) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::SetupGameplaySetupViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupGameplaySetupViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(showModifiers), ::il2cpp_utils::ExtractType(showEnvironmentOverrideSettings), ::il2cpp_utils::ExtractType(showColorSchemesSettings)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, showModifiers, showEnvironmentOverrideSettings, showColorSchemesSettings);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.HandleBasicLevelCompletionResults
bool GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::HandleBasicLevelCompletionResults(GlobalNamespace::LevelCompletionResults* levelCompletionResults, bool practice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::HandleBasicLevelCompletionResults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBasicLevelCompletionResults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(practice)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, levelCompletionResults, practice);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.DismissPracticeViewController
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::DismissPracticeViewController(System::Action* finishedCallback, bool immediately) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::DismissPracticeViewController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DismissPracticeViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finishedCallback), ::il2cpp_utils::ExtractType(immediately)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, finishedCallback, immediately);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.get_enableCustomLevels
bool GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_enableCustomLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_enableCustomLevels");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enableCustomLevels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.get_initialTopScreenViewController
HMUI::ViewController* GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_initialTopScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_initialTopScreenViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initialTopScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.get_initialLeftScreenViewController
HMUI::ViewController* GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_initialLeftScreenViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::get_initialLeftScreenViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initialLeftScreenViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<HMUI::ViewController*, false>(this, ___internal__method);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.LevelSelectionFlowCoordinatorDidActivate
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidActivate(bool firstActivation, bool addedToHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.LevelSelectionFlowCoordinatorDidDeactivate
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidDeactivate(bool removedFromHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.LevelSelectionFlowCoordinatorTopViewControllerWillChange
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorTopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorTopViewControllerWillChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LevelSelectionFlowCoordinatorTopViewControllerWillChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(oldViewController), ::il2cpp_utils::ExtractType(newViewController), ::il2cpp_utils::ExtractType(animationType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldViewController, newViewController, animationType);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.ActionButtonWasPressed
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::ActionButtonWasPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::ActionButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActionButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.PracticeButtonWasPressed
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::PracticeButtonWasPressed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::PracticeButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PracticeButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.SelectionDidChange
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::SelectionDidChange(GlobalNamespace::IBeatmapLevelPack* pack, GlobalNamespace::IDifficultyBeatmap* beatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::SelectionDidChange");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pack), ::il2cpp_utils::ExtractType(beatmap)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pack, beatmap);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator.BackButtonWasPressed
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::BackButtonWasPressed(HMUI::ViewController* topViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::BackButtonWasPressed");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackButtonWasPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(topViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, topViewController);
}
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::get_gameMode
// Il2CppName: get_gameMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SinglePlayerLevelSelectionFlowCoordinator::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::get_gameMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "get_gameMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::get_isInPracticeView
// Il2CppName: get_isInPracticeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SinglePlayerLevelSelectionFlowCoordinator::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::get_isInPracticeView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "get_isInPracticeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::get_playerSettings
// Il2CppName: get_playerSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlayerSpecificSettings* (SinglePlayerLevelSelectionFlowCoordinator::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::get_playerSettings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "get_playerSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::get_gameplayModifiers
// Il2CppName: get_gameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayModifiers* (SinglePlayerLevelSelectionFlowCoordinator::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::get_gameplayModifiers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "get_gameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::get_hideGameplaySetup
// Il2CppName: get_hideGameplaySetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SinglePlayerLevelSelectionFlowCoordinator::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::get_hideGameplaySetup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "get_hideGameplaySetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::get_leaderboardViewController
// Il2CppName: get_leaderboardViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LeaderboardViewController* (SinglePlayerLevelSelectionFlowCoordinator::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::get_leaderboardViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "get_leaderboardViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate
// Il2CppName: SinglePlayerLevelSelectionFlowCoordinatorDidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)(bool, bool)>(&SinglePlayerLevelSelectionFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "SinglePlayerLevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
// Il2CppName: SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)(bool)>(&SinglePlayerLevelSelectionFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish
// Il2CppName: ProcessLevelCompletionResultsAfterLevelDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*, bool)>(&SinglePlayerLevelSelectionFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "ProcessLevelCompletionResultsAfterLevelDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::add_didFinishEvent
// Il2CppName: add_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)(System::Action_1<GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator*>*)>(&SinglePlayerLevelSelectionFlowCoordinator::add_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "add_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator*>*>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::remove_didFinishEvent
// Il2CppName: remove_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)(System::Action_1<GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator*>*)>(&SinglePlayerLevelSelectionFlowCoordinator::remove_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "remove_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator*>*>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::StartLevelOrShow360Prompt
// Il2CppName: StartLevelOrShow360Prompt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)(System::Action*, bool)>(&SinglePlayerLevelSelectionFlowCoordinator::StartLevelOrShow360Prompt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "StartLevelOrShow360Prompt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::StartLevel
// Il2CppName: StartLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)(System::Action*, bool)>(&SinglePlayerLevelSelectionFlowCoordinator::StartLevel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "StartLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::HandlePracticeViewControllerDidPressPlayButton
// Il2CppName: HandlePracticeViewControllerDidPressPlayButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::HandlePracticeViewControllerDidPressPlayButton)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "HandlePracticeViewControllerDidPressPlayButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::HandleStandardLevelDidFinish
// Il2CppName: HandleStandardLevelDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)(GlobalNamespace::StandardLevelScenesTransitionSetupDataSO*, GlobalNamespace::LevelCompletionResults*)>(&SinglePlayerLevelSelectionFlowCoordinator::HandleStandardLevelDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "HandleStandardLevelDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::StandardLevelScenesTransitionSetupDataSO*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::SetupGameplaySetupViewController
// Il2CppName: SetupGameplaySetupViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)(bool, bool, bool)>(&SinglePlayerLevelSelectionFlowCoordinator::SetupGameplaySetupViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "SetupGameplaySetupViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::HandleBasicLevelCompletionResults
// Il2CppName: HandleBasicLevelCompletionResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SinglePlayerLevelSelectionFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, bool)>(&SinglePlayerLevelSelectionFlowCoordinator::HandleBasicLevelCompletionResults)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "HandleBasicLevelCompletionResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::DismissPracticeViewController
// Il2CppName: DismissPracticeViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)(System::Action*, bool)>(&SinglePlayerLevelSelectionFlowCoordinator::DismissPracticeViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "DismissPracticeViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::get_enableCustomLevels
// Il2CppName: get_enableCustomLevels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SinglePlayerLevelSelectionFlowCoordinator::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::get_enableCustomLevels)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "get_enableCustomLevels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::get_initialTopScreenViewController
// Il2CppName: get_initialTopScreenViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::ViewController* (SinglePlayerLevelSelectionFlowCoordinator::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::get_initialTopScreenViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "get_initialTopScreenViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::get_initialLeftScreenViewController
// Il2CppName: get_initialLeftScreenViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HMUI::ViewController* (SinglePlayerLevelSelectionFlowCoordinator::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::get_initialLeftScreenViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "get_initialLeftScreenViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidActivate
// Il2CppName: LevelSelectionFlowCoordinatorDidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)(bool, bool)>(&SinglePlayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "LevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidDeactivate
// Il2CppName: LevelSelectionFlowCoordinatorDidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)(bool)>(&SinglePlayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "LevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorTopViewControllerWillChange
// Il2CppName: LevelSelectionFlowCoordinatorTopViewControllerWillChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&SinglePlayerLevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorTopViewControllerWillChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "LevelSelectionFlowCoordinatorTopViewControllerWillChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>(), ::il2cpp_utils::ExtractIndependentType<HMUI::ViewController::AnimationType>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::ActionButtonWasPressed
// Il2CppName: ActionButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::ActionButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "ActionButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::PracticeButtonWasPressed
// Il2CppName: PracticeButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::PracticeButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "PracticeButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::SelectionDidChange
// Il2CppName: SelectionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)(GlobalNamespace::IBeatmapLevelPack*, GlobalNamespace::IDifficultyBeatmap*)>(&SinglePlayerLevelSelectionFlowCoordinator::SelectionDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "SelectionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IBeatmapLevelPack*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::BackButtonWasPressed
// Il2CppName: BackButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)(HMUI::ViewController*)>(&SinglePlayerLevelSelectionFlowCoordinator::BackButtonWasPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), "BackButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::ViewController*>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SinglePlayerLevelSelectionFlowCoordinator/<>c__DisplayClass37_0
#include "GlobalNamespace/SinglePlayerLevelSelectionFlowCoordinator_--c__DisplayClass37_0.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator/<>c__DisplayClass37_0.<StartLevelOrShow360Prompt>b__0
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0::$StartLevelOrShow360Prompt$b__0(int buttonNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0::<StartLevelOrShow360Prompt>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartLevelOrShow360Prompt>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buttonNumber)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, buttonNumber);
}
// Autogenerated method: SinglePlayerLevelSelectionFlowCoordinator/<>c__DisplayClass37_0.<StartLevelOrShow360Prompt>b__1
void GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0::$StartLevelOrShow360Prompt$b__1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0::<StartLevelOrShow360Prompt>b__1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<StartLevelOrShow360Prompt>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0::$StartLevelOrShow360Prompt$b__0
// Il2CppName: <StartLevelOrShow360Prompt>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0::*)(int)>(&SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0::$StartLevelOrShow360Prompt$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0*), "<StartLevelOrShow360Prompt>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0::$StartLevelOrShow360Prompt$b__1
// Il2CppName: <StartLevelOrShow360Prompt>b__1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0::$StartLevelOrShow360Prompt$b__1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0*), "<StartLevelOrShow360Prompt>b__1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0::*)()>(&SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SoloFreePlayFlowCoordinator
#include "GlobalNamespace/SoloFreePlayFlowCoordinator.hpp"
// Including type: SoloFreePlayFlowCoordinator/<>c__DisplayClass23_0
#include "GlobalNamespace/SoloFreePlayFlowCoordinator_--c__DisplayClass23_0.hpp"
// Including type: MenuLightsPresetSO
#include "GlobalNamespace/MenuLightsPresetSO.hpp"
// Including type: MenuLightsManager
#include "GlobalNamespace/MenuLightsManager.hpp"
// Including type: ResultsViewController
#include "GlobalNamespace/ResultsViewController.hpp"
// Including type: PlatformLeaderboardViewController
#include "GlobalNamespace/PlatformLeaderboardViewController.hpp"
// Including type: PlatformLeaderboardsModel
#include "GlobalNamespace/PlatformLeaderboardsModel.hpp"
// Including type: PlayerLevelStatsData
#include "GlobalNamespace/PlayerLevelStatsData.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: LeaderboardViewController
#include "GlobalNamespace/LeaderboardViewController.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: GameplayModifiers
#include "GlobalNamespace/GameplayModifiers.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SoloFreePlayFlowCoordinator.IsNewHighScore
bool GlobalNamespace::SoloFreePlayFlowCoordinator::IsNewHighScore(GlobalNamespace::PlayerLevelStatsData* playerLevelStats, GlobalNamespace::LevelCompletionResults* levelCompletionResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SoloFreePlayFlowCoordinator::IsNewHighScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsNewHighScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(playerLevelStats), ::il2cpp_utils::ExtractType(levelCompletionResults)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, playerLevelStats, levelCompletionResults);
}
// Autogenerated method: SoloFreePlayFlowCoordinator.HandleResultsViewControllerContinueButtonPressed
void GlobalNamespace::SoloFreePlayFlowCoordinator::HandleResultsViewControllerContinueButtonPressed(GlobalNamespace::ResultsViewController* viewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SoloFreePlayFlowCoordinator::HandleResultsViewControllerContinueButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleResultsViewControllerContinueButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(viewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, viewController);
}
// Autogenerated method: SoloFreePlayFlowCoordinator.HandleResultsViewControllerRestartButtonPressed
void GlobalNamespace::SoloFreePlayFlowCoordinator::HandleResultsViewControllerRestartButtonPressed(GlobalNamespace::ResultsViewController* resultsViewController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SoloFreePlayFlowCoordinator::HandleResultsViewControllerRestartButtonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleResultsViewControllerRestartButtonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resultsViewController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, resultsViewController);
}
// Autogenerated method: SoloFreePlayFlowCoordinator.get_gameMode
::Il2CppString* GlobalNamespace::SoloFreePlayFlowCoordinator::get_gameMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SoloFreePlayFlowCoordinator::get_gameMode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SoloFreePlayFlowCoordinator.get_leaderboardViewController
GlobalNamespace::LeaderboardViewController* GlobalNamespace::SoloFreePlayFlowCoordinator::get_leaderboardViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SoloFreePlayFlowCoordinator::get_leaderboardViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leaderboardViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::LeaderboardViewController*, false>(this, ___internal__method);
}
// Autogenerated method: SoloFreePlayFlowCoordinator.get_showPlayerStatsInDetailView
bool GlobalNamespace::SoloFreePlayFlowCoordinator::get_showPlayerStatsInDetailView() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SoloFreePlayFlowCoordinator::get_showPlayerStatsInDetailView");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_showPlayerStatsInDetailView", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SoloFreePlayFlowCoordinator.get_showBackButtonForMainViewController
bool GlobalNamespace::SoloFreePlayFlowCoordinator::get_showBackButtonForMainViewController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SoloFreePlayFlowCoordinator::get_showBackButtonForMainViewController");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_showBackButtonForMainViewController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SoloFreePlayFlowCoordinator.get_mainTitle
::Il2CppString* GlobalNamespace::SoloFreePlayFlowCoordinator::get_mainTitle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SoloFreePlayFlowCoordinator::get_mainTitle");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mainTitle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: SoloFreePlayFlowCoordinator.SinglePlayerLevelSelectionFlowCoordinatorDidActivate
void GlobalNamespace::SoloFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate(bool firstActivation, bool addedToHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SoloFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SinglePlayerLevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy);
}
// Autogenerated method: SoloFreePlayFlowCoordinator.SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
void GlobalNamespace::SoloFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate(bool removedFromHierarchy) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SoloFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(removedFromHierarchy)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, removedFromHierarchy);
}
// Autogenerated method: SoloFreePlayFlowCoordinator.ProcessLevelCompletionResultsAfterLevelDidFinish
void GlobalNamespace::SoloFreePlayFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers, bool practice) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SoloFreePlayFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessLevelCompletionResultsAfterLevelDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(gameplayModifiers), ::il2cpp_utils::ExtractType(practice)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelCompletionResults, difficultyBeatmap, gameplayModifiers, practice);
}
// Autogenerated method: SoloFreePlayFlowCoordinator.Refresh
void GlobalNamespace::SoloFreePlayFlowCoordinator::Refresh() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SoloFreePlayFlowCoordinator::Refresh");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Refresh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SoloFreePlayFlowCoordinator::IsNewHighScore
// Il2CppName: IsNewHighScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SoloFreePlayFlowCoordinator::*)(GlobalNamespace::PlayerLevelStatsData*, GlobalNamespace::LevelCompletionResults*)>(&SoloFreePlayFlowCoordinator::IsNewHighScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator*), "IsNewHighScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlayerLevelStatsData*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>()});
  }
};
// Writing MetadataGetter for method: SoloFreePlayFlowCoordinator::HandleResultsViewControllerContinueButtonPressed
// Il2CppName: HandleResultsViewControllerContinueButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SoloFreePlayFlowCoordinator::*)(GlobalNamespace::ResultsViewController*)>(&SoloFreePlayFlowCoordinator::HandleResultsViewControllerContinueButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator*), "HandleResultsViewControllerContinueButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: SoloFreePlayFlowCoordinator::HandleResultsViewControllerRestartButtonPressed
// Il2CppName: HandleResultsViewControllerRestartButtonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SoloFreePlayFlowCoordinator::*)(GlobalNamespace::ResultsViewController*)>(&SoloFreePlayFlowCoordinator::HandleResultsViewControllerRestartButtonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator*), "HandleResultsViewControllerRestartButtonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::ResultsViewController*>()});
  }
};
// Writing MetadataGetter for method: SoloFreePlayFlowCoordinator::get_gameMode
// Il2CppName: get_gameMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SoloFreePlayFlowCoordinator::*)()>(&SoloFreePlayFlowCoordinator::get_gameMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator*), "get_gameMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SoloFreePlayFlowCoordinator::get_leaderboardViewController
// Il2CppName: get_leaderboardViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LeaderboardViewController* (SoloFreePlayFlowCoordinator::*)()>(&SoloFreePlayFlowCoordinator::get_leaderboardViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator*), "get_leaderboardViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SoloFreePlayFlowCoordinator::get_showPlayerStatsInDetailView
// Il2CppName: get_showPlayerStatsInDetailView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SoloFreePlayFlowCoordinator::*)()>(&SoloFreePlayFlowCoordinator::get_showPlayerStatsInDetailView)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator*), "get_showPlayerStatsInDetailView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SoloFreePlayFlowCoordinator::get_showBackButtonForMainViewController
// Il2CppName: get_showBackButtonForMainViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SoloFreePlayFlowCoordinator::*)()>(&SoloFreePlayFlowCoordinator::get_showBackButtonForMainViewController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator*), "get_showBackButtonForMainViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SoloFreePlayFlowCoordinator::get_mainTitle
// Il2CppName: get_mainTitle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (SoloFreePlayFlowCoordinator::*)()>(&SoloFreePlayFlowCoordinator::get_mainTitle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator*), "get_mainTitle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SoloFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate
// Il2CppName: SinglePlayerLevelSelectionFlowCoordinatorDidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SoloFreePlayFlowCoordinator::*)(bool, bool)>(&SoloFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator*), "SinglePlayerLevelSelectionFlowCoordinatorDidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SoloFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
// Il2CppName: SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SoloFreePlayFlowCoordinator::*)(bool)>(&SoloFreePlayFlowCoordinator::SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator*), "SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SoloFreePlayFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish
// Il2CppName: ProcessLevelCompletionResultsAfterLevelDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SoloFreePlayFlowCoordinator::*)(GlobalNamespace::LevelCompletionResults*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*, bool)>(&SoloFreePlayFlowCoordinator::ProcessLevelCompletionResultsAfterLevelDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator*), "ProcessLevelCompletionResultsAfterLevelDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifiers*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SoloFreePlayFlowCoordinator::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SoloFreePlayFlowCoordinator::*)()>(&SoloFreePlayFlowCoordinator::Refresh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SoloFreePlayFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SoloFreePlayFlowCoordinator::*)()>(&SoloFreePlayFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SoloFreePlayFlowCoordinator::*)()>(&SoloFreePlayFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SoloFreePlayFlowCoordinator/<>c__DisplayClass23_0
#include "GlobalNamespace/SoloFreePlayFlowCoordinator_--c__DisplayClass23_0.hpp"
// Including type: ResultsViewController
#include "GlobalNamespace/ResultsViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SoloFreePlayFlowCoordinator/<>c__DisplayClass23_0.<HandleResultsViewControllerRestartButtonPressed>b__0
void GlobalNamespace::SoloFreePlayFlowCoordinator::$$c__DisplayClass23_0::$HandleResultsViewControllerRestartButtonPressed$b__0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SoloFreePlayFlowCoordinator::$$c__DisplayClass23_0::<HandleResultsViewControllerRestartButtonPressed>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<HandleResultsViewControllerRestartButtonPressed>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SoloFreePlayFlowCoordinator::$$c__DisplayClass23_0::$HandleResultsViewControllerRestartButtonPressed$b__0
// Il2CppName: <HandleResultsViewControllerRestartButtonPressed>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SoloFreePlayFlowCoordinator::$$c__DisplayClass23_0::*)()>(&SoloFreePlayFlowCoordinator::$$c__DisplayClass23_0::$HandleResultsViewControllerRestartButtonPressed$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator::$$c__DisplayClass23_0*), "<HandleResultsViewControllerRestartButtonPressed>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SoloFreePlayFlowCoordinator::$$c__DisplayClass23_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SoloFreePlayFlowCoordinator::$$c__DisplayClass23_0::*)()>(&SoloFreePlayFlowCoordinator::$$c__DisplayClass23_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator::$$c__DisplayClass23_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SoloFreePlayFlowCoordinator::$$c__DisplayClass23_0::*)()>(&SoloFreePlayFlowCoordinator::$$c__DisplayClass23_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SoloFreePlayFlowCoordinator::$$c__DisplayClass23_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: TestFlowCoordinator
#include "GlobalNamespace/TestFlowCoordinator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: TestFlowCoordinator.DidActivate
void GlobalNamespace::TestFlowCoordinator::DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TestFlowCoordinator::DidActivate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidActivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(firstActivation), ::il2cpp_utils::ExtractType(addedToHierarchy), ::il2cpp_utils::ExtractType(screenSystemEnabling)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, firstActivation, addedToHierarchy, screenSystemEnabling);
}
// Writing MetadataGetter for method: TestFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestFlowCoordinator::*)(bool, bool, bool)>(&TestFlowCoordinator::DidActivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: TestFlowCoordinator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestFlowCoordinator::*)()>(&TestFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TestFlowCoordinator::*)()>(&TestFlowCoordinator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TestFlowCoordinator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameplayModifierToggle
#include "GlobalNamespace/GameplayModifierToggle.hpp"
// Including type: GameplayModifierParamsSO
#include "GlobalNamespace/GameplayModifierParamsSO.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: HMUI.HoverTextSetter
#include "HMUI/HoverTextSetter.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: UnityEngine.UI.Toggle
#include "UnityEngine/UI/Toggle.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameplayModifierToggle.get_toggle
UnityEngine::UI::Toggle* GlobalNamespace::GameplayModifierToggle::get_toggle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierToggle::get_toggle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_toggle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::UI::Toggle*, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifierToggle.get_gameplayModifier
GlobalNamespace::GameplayModifierParamsSO* GlobalNamespace::GameplayModifierToggle::get_gameplayModifier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierToggle::get_gameplayModifier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameplayModifier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifierParamsSO*, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifierToggle.Start
void GlobalNamespace::GameplayModifierToggle::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifierToggle::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GameplayModifierToggle::get_toggle
// Il2CppName: get_toggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::UI::Toggle* (GameplayModifierToggle::*)()>(&GameplayModifierToggle::get_toggle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifierToggle*), "get_toggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayModifierToggle::get_gameplayModifier
// Il2CppName: get_gameplayModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayModifierParamsSO* (GameplayModifierToggle::*)()>(&GameplayModifierToggle::get_gameplayModifier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifierToggle*), "get_gameplayModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayModifierToggle::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifierToggle::*)()>(&GameplayModifierToggle::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifierToggle*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayModifierToggle::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifierToggle::*)()>(&GameplayModifierToggle::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifierToggle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifierToggle::*)()>(&GameplayModifierToggle::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifierToggle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GuestNameButtonsListItem
#include "GlobalNamespace/GuestNameButtonsListItem.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GuestNameButtonsListItem.set_nameText
void GlobalNamespace::GuestNameButtonsListItem::set_nameText(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GuestNameButtonsListItem::set_nameText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_nameText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GuestNameButtonsListItem.set_buttonPressed
void GlobalNamespace::GuestNameButtonsListItem::set_buttonPressed(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GuestNameButtonsListItem::set_buttonPressed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_buttonPressed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GuestNameButtonsListItem.Awake
void GlobalNamespace::GuestNameButtonsListItem::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GuestNameButtonsListItem::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GuestNameButtonsListItem.<Awake>b__7_0
void GlobalNamespace::GuestNameButtonsListItem::$Awake$b__7_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GuestNameButtonsListItem::<Awake>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GuestNameButtonsListItem::set_nameText
// Il2CppName: set_nameText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GuestNameButtonsListItem::*)(::Il2CppString*)>(&GuestNameButtonsListItem::set_nameText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GuestNameButtonsListItem*), "set_nameText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GuestNameButtonsListItem::set_buttonPressed
// Il2CppName: set_buttonPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GuestNameButtonsListItem::*)(System::Action*)>(&GuestNameButtonsListItem::set_buttonPressed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GuestNameButtonsListItem*), "set_buttonPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: GuestNameButtonsListItem::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GuestNameButtonsListItem::*)()>(&GuestNameButtonsListItem::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GuestNameButtonsListItem*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GuestNameButtonsListItem::$Awake$b__7_0
// Il2CppName: <Awake>b__7_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GuestNameButtonsListItem::*)()>(&GuestNameButtonsListItem::$Awake$b__7_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GuestNameButtonsListItem*), "<Awake>b__7_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GuestNameButtonsListItem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GuestNameButtonsListItem::*)()>(&GuestNameButtonsListItem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GuestNameButtonsListItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GuestNameButtonsListItem::*)()>(&GuestNameButtonsListItem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GuestNameButtonsListItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GuestNameButtonsListItemsList
#include "GlobalNamespace/GuestNameButtonsListItemsList.hpp"
// Including type: GuestNameButtonsListItem
#include "GlobalNamespace/GuestNameButtonsListItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GuestNameButtonsListItemsList::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GuestNameButtonsListItemsList::*)()>(&GuestNameButtonsListItemsList::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GuestNameButtonsListItemsList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GuestNameButtonsListItemsList::*)()>(&GuestNameButtonsListItemsList::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GuestNameButtonsListItemsList*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LeaderboardEntry
#include "GlobalNamespace/LeaderboardEntry.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LeaderboardEntry.SetScore
void GlobalNamespace::LeaderboardEntry::SetScore(int score, ::Il2CppString* playerName, int rank, bool highlighted, bool showSeparator) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LeaderboardEntry::SetScore");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetScore", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(score), ::il2cpp_utils::ExtractType(playerName), ::il2cpp_utils::ExtractType(rank), ::il2cpp_utils::ExtractType(highlighted), ::il2cpp_utils::ExtractType(showSeparator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, score, playerName, rank, highlighted, showSeparator);
}
// Writing MetadataGetter for method: LeaderboardEntry::SetScore
// Il2CppName: SetScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LeaderboardEntry::*)(int, ::Il2CppString*, int, bool, bool)>(&LeaderboardEntry::SetScore)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LeaderboardEntry*), "SetScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: LeaderboardEntry::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LeaderboardEntry::*)()>(&LeaderboardEntry::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LeaderboardEntry*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LeaderboardEntry::*)()>(&LeaderboardEntry::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LeaderboardEntry*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalizedHoverHint
#include "GlobalNamespace/LocalizedHoverHint.hpp"
// Including type: HMUI.HoverHint
#include "HMUI/HoverHint.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LocalizedHoverHint.SetText
void GlobalNamespace::LocalizedHoverHint::SetText(HMUI::HoverHint* hoverHint, ::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalizedHoverHint::SetText");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hoverHint), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hoverHint, value);
}
// Autogenerated method: LocalizedHoverHint.UpdateAlignment
void GlobalNamespace::LocalizedHoverHint::UpdateAlignment(HMUI::HoverHint* hoverHint, Polyglot::LanguageDirection direction) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalizedHoverHint::UpdateAlignment");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAlignment", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hoverHint), ::il2cpp_utils::ExtractType(direction)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hoverHint, direction);
}
// Writing MetadataGetter for method: LocalizedHoverHint::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedHoverHint::*)(HMUI::HoverHint*, ::Il2CppString*)>(&LocalizedHoverHint::SetText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedHoverHint*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::HoverHint*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: LocalizedHoverHint::UpdateAlignment
// Il2CppName: UpdateAlignment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedHoverHint::*)(HMUI::HoverHint*, Polyglot::LanguageDirection)>(&LocalizedHoverHint::UpdateAlignment)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedHoverHint*), "UpdateAlignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::HoverHint*>(), ::il2cpp_utils::ExtractIndependentType<Polyglot::LanguageDirection>()});
  }
};
// Writing MetadataGetter for method: LocalizedHoverHint::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedHoverHint::*)()>(&LocalizedHoverHint::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedHoverHint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LocalizedHoverHint::*)()>(&LocalizedHoverHint::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LocalizedHoverHint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MenuPlayerController
#include "GlobalNamespace/MenuPlayerController.hpp"
// Including type: VRController
#include "GlobalNamespace/VRController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MenuPlayerController.get_leftController
GlobalNamespace::VRController* GlobalNamespace::MenuPlayerController::get_leftController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuPlayerController::get_leftController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRController*, false>(this, ___internal__method);
}
// Autogenerated method: MenuPlayerController.get_rightController
GlobalNamespace::VRController* GlobalNamespace::MenuPlayerController::get_rightController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuPlayerController::get_rightController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VRController*, false>(this, ___internal__method);
}
// Autogenerated method: MenuPlayerController.get_headPos
UnityEngine::Vector3 GlobalNamespace::MenuPlayerController::get_headPos() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuPlayerController::get_headPos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headPos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: MenuPlayerController.get_headRot
UnityEngine::Quaternion GlobalNamespace::MenuPlayerController::get_headRot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuPlayerController::get_headRot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headRot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MenuPlayerController::get_leftController
// Il2CppName: get_leftController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::VRController* (MenuPlayerController::*)()>(&MenuPlayerController::get_leftController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuPlayerController*), "get_leftController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuPlayerController::get_rightController
// Il2CppName: get_rightController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::VRController* (MenuPlayerController::*)()>(&MenuPlayerController::get_rightController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuPlayerController*), "get_rightController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuPlayerController::get_headPos
// Il2CppName: get_headPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (MenuPlayerController::*)()>(&MenuPlayerController::get_headPos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuPlayerController*), "get_headPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuPlayerController::get_headRot
// Il2CppName: get_headRot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (MenuPlayerController::*)()>(&MenuPlayerController::get_headRot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuPlayerController*), "get_headRot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MenuPlayerController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuPlayerController::*)()>(&MenuPlayerController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuPlayerController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MenuPlayerController::*)()>(&MenuPlayerController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MenuPlayerController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionConnectionsGenerator
#include "GlobalNamespace/MissionConnectionsGenerator.hpp"
// Including type: MissionNodesManager
#include "GlobalNamespace/MissionNodesManager.hpp"
// Including type: MissionNodeConnection
#include "GlobalNamespace/MissionNodeConnection.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: MissionNode
#include "GlobalNamespace/MissionNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionConnectionsGenerator.get__rootMissionNode
GlobalNamespace::MissionNode* GlobalNamespace::MissionConnectionsGenerator::get__rootMissionNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionConnectionsGenerator::get__rootMissionNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get__rootMissionNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionNode*, false>(this, ___internal__method);
}
// Autogenerated method: MissionConnectionsGenerator.CreateNodeConnections
void GlobalNamespace::MissionConnectionsGenerator::CreateNodeConnections() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionConnectionsGenerator::CreateNodeConnections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateNodeConnections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionConnectionsGenerator.RemoveOldConnections
void GlobalNamespace::MissionConnectionsGenerator::RemoveOldConnections() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionConnectionsGenerator::RemoveOldConnections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveOldConnections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionConnectionsGenerator.CreateConnections
void GlobalNamespace::MissionConnectionsGenerator::CreateConnections(GlobalNamespace::MissionNode* missionNode, System::Collections::Generic::List_1<GlobalNamespace::MissionNode*>* visitedNodes) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionConnectionsGenerator::CreateConnections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateConnections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionNode), ::il2cpp_utils::ExtractType(visitedNodes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, missionNode, visitedNodes);
}
// Autogenerated method: MissionConnectionsGenerator.CreateConnectionBetweenNodes
GlobalNamespace::MissionNodeConnection* GlobalNamespace::MissionConnectionsGenerator::CreateConnectionBetweenNodes(GlobalNamespace::MissionNode* parentMissionNode, GlobalNamespace::MissionNode* childMissionNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionConnectionsGenerator::CreateConnectionBetweenNodes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateConnectionBetweenNodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentMissionNode), ::il2cpp_utils::ExtractType(childMissionNode)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionNodeConnection*, false>(this, ___internal__method, parentMissionNode, childMissionNode);
}
// Writing MetadataGetter for method: MissionConnectionsGenerator::get__rootMissionNode
// Il2CppName: get__rootMissionNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionNode* (MissionConnectionsGenerator::*)()>(&MissionConnectionsGenerator::get__rootMissionNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionConnectionsGenerator*), "get__rootMissionNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionConnectionsGenerator::CreateNodeConnections
// Il2CppName: CreateNodeConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionConnectionsGenerator::*)()>(&MissionConnectionsGenerator::CreateNodeConnections)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionConnectionsGenerator*), "CreateNodeConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionConnectionsGenerator::RemoveOldConnections
// Il2CppName: RemoveOldConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionConnectionsGenerator::*)()>(&MissionConnectionsGenerator::RemoveOldConnections)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionConnectionsGenerator*), "RemoveOldConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionConnectionsGenerator::CreateConnections
// Il2CppName: CreateConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionConnectionsGenerator::*)(GlobalNamespace::MissionNode*, System::Collections::Generic::List_1<GlobalNamespace::MissionNode*>*)>(&MissionConnectionsGenerator::CreateConnections)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionConnectionsGenerator*), "CreateConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<GlobalNamespace::MissionNode*>*>()});
  }
};
// Writing MetadataGetter for method: MissionConnectionsGenerator::CreateConnectionBetweenNodes
// Il2CppName: CreateConnectionBetweenNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionNodeConnection* (MissionConnectionsGenerator::*)(GlobalNamespace::MissionNode*, GlobalNamespace::MissionNode*)>(&MissionConnectionsGenerator::CreateConnectionBetweenNodes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionConnectionsGenerator*), "CreateConnectionBetweenNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>()});
  }
};
// Writing MetadataGetter for method: MissionConnectionsGenerator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionConnectionsGenerator::*)()>(&MissionConnectionsGenerator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionConnectionsGenerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionConnectionsGenerator::*)()>(&MissionConnectionsGenerator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionConnectionsGenerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionMapAnimationController
#include "GlobalNamespace/MissionMapAnimationController.hpp"
// Including type: MissionMapAnimationController/<UpdateMissionMapCoroutine>d__12
#include "GlobalNamespace/MissionMapAnimationController_-UpdateMissionMapCoroutine-d__12.hpp"
// Including type: MissionMapAnimationController/<UpdateClearedNodeStateCoroutine>d__13
#include "GlobalNamespace/MissionMapAnimationController_-UpdateClearedNodeStateCoroutine-d__13.hpp"
// Including type: MissionMapAnimationController/<UpdateStageCoroutine>d__14
#include "GlobalNamespace/MissionMapAnimationController_-UpdateStageCoroutine-d__14.hpp"
// Including type: MissionMapAnimationController/<>c
#include "GlobalNamespace/MissionMapAnimationController_--c.hpp"
// Including type: MissionMapAnimationController/<UpdateNodesAndConnectionCoroutine>d__15
#include "GlobalNamespace/MissionMapAnimationController_-UpdateNodesAndConnectionCoroutine-d__15.hpp"
// Including type: MissionNodesManager
#include "GlobalNamespace/MissionNodesManager.hpp"
// Including type: HMUI.ScrollView
#include "HMUI/ScrollView.hpp"
// Including type: MenuShockwave
#include "GlobalNamespace/MenuShockwave.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: MissionNode
#include "GlobalNamespace/MissionNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionMapAnimationController.get_animatedUpdateIsRequired
bool GlobalNamespace::MissionMapAnimationController::get_animatedUpdateIsRequired() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::get_animatedUpdateIsRequired");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animatedUpdateIsRequired", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController.ScrollToTopMostNotClearedMission
void GlobalNamespace::MissionMapAnimationController::ScrollToTopMostNotClearedMission() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::ScrollToTopMostNotClearedMission");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ScrollToTopMostNotClearedMission", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController.UpdateMissionMapAfterMissionWasCleared
void GlobalNamespace::MissionMapAnimationController::UpdateMissionMapAfterMissionWasCleared(bool animated, System::Action* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::UpdateMissionMapAfterMissionWasCleared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMissionMapAfterMissionWasCleared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animated), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated, finishCallback);
}
// Autogenerated method: MissionMapAnimationController.UpdateMissionMapCoroutine
System::Collections::IEnumerator* GlobalNamespace::MissionMapAnimationController::UpdateMissionMapCoroutine(GlobalNamespace::MissionNode* lastClearedMissionNode, System::Action* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::UpdateMissionMapCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateMissionMapCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lastClearedMissionNode), ::il2cpp_utils::ExtractType(finishCallback)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, lastClearedMissionNode, finishCallback);
}
// Autogenerated method: MissionMapAnimationController.UpdateClearedNodeStateCoroutine
System::Collections::IEnumerator* GlobalNamespace::MissionMapAnimationController::UpdateClearedNodeStateCoroutine(GlobalNamespace::MissionNode* lastClearedMissionNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::UpdateClearedNodeStateCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateClearedNodeStateCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lastClearedMissionNode)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, lastClearedMissionNode);
}
// Autogenerated method: MissionMapAnimationController.UpdateStageCoroutine
System::Collections::IEnumerator* GlobalNamespace::MissionMapAnimationController::UpdateStageCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::UpdateStageCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStageCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController.UpdateNodesAndConnectionCoroutine
System::Collections::IEnumerator* GlobalNamespace::MissionMapAnimationController::UpdateNodesAndConnectionCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::UpdateNodesAndConnectionCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateNodesAndConnectionCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionMapAnimationController::get_animatedUpdateIsRequired
// Il2CppName: get_animatedUpdateIsRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionMapAnimationController::*)()>(&MissionMapAnimationController::get_animatedUpdateIsRequired)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController*), "get_animatedUpdateIsRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::ScrollToTopMostNotClearedMission
// Il2CppName: ScrollToTopMostNotClearedMission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::*)()>(&MissionMapAnimationController::ScrollToTopMostNotClearedMission)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController*), "ScrollToTopMostNotClearedMission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::UpdateMissionMapAfterMissionWasCleared
// Il2CppName: UpdateMissionMapAfterMissionWasCleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::*)(bool, System::Action*)>(&MissionMapAnimationController::UpdateMissionMapAfterMissionWasCleared)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController*), "UpdateMissionMapAfterMissionWasCleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::UpdateMissionMapCoroutine
// Il2CppName: UpdateMissionMapCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MissionMapAnimationController::*)(GlobalNamespace::MissionNode*, System::Action*)>(&MissionMapAnimationController::UpdateMissionMapCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController*), "UpdateMissionMapCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::UpdateClearedNodeStateCoroutine
// Il2CppName: UpdateClearedNodeStateCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MissionMapAnimationController::*)(GlobalNamespace::MissionNode*)>(&MissionMapAnimationController::UpdateClearedNodeStateCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController*), "UpdateClearedNodeStateCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>()});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::UpdateStageCoroutine
// Il2CppName: UpdateStageCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MissionMapAnimationController::*)()>(&MissionMapAnimationController::UpdateStageCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController*), "UpdateStageCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::UpdateNodesAndConnectionCoroutine
// Il2CppName: UpdateNodesAndConnectionCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MissionMapAnimationController::*)()>(&MissionMapAnimationController::UpdateNodesAndConnectionCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController*), "UpdateNodesAndConnectionCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::*)()>(&MissionMapAnimationController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::*)()>(&MissionMapAnimationController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionMapAnimationController/<UpdateMissionMapCoroutine>d__12
#include "GlobalNamespace/MissionMapAnimationController_-UpdateMissionMapCoroutine-d__12.hpp"
// Including type: MissionNode
#include "GlobalNamespace/MissionNode.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionMapAnimationController/<UpdateMissionMapCoroutine>d__12.System.IDisposable.Dispose
void GlobalNamespace::MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateMissionMapCoroutine>d__12.MoveNext
bool GlobalNamespace::MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateMissionMapCoroutine>d__12.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateMissionMapCoroutine>d__12.System.Collections.IEnumerator.Reset
void GlobalNamespace::MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateMissionMapCoroutine>d__12.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::*)(int)>(&MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::*)(int)>(&MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::*)()>(&MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::*)()>(&MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::*)()>(&MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::*)()>(&MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::*)()>(&MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionMapAnimationController/<UpdateClearedNodeStateCoroutine>d__13
#include "GlobalNamespace/MissionMapAnimationController_-UpdateClearedNodeStateCoroutine-d__13.hpp"
// Including type: MissionNode
#include "GlobalNamespace/MissionNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionMapAnimationController/<UpdateClearedNodeStateCoroutine>d__13.System.IDisposable.Dispose
void GlobalNamespace::MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateClearedNodeStateCoroutine>d__13.MoveNext
bool GlobalNamespace::MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateClearedNodeStateCoroutine>d__13.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateClearedNodeStateCoroutine>d__13.System.Collections.IEnumerator.Reset
void GlobalNamespace::MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateClearedNodeStateCoroutine>d__13.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::*)(int)>(&MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::*)(int)>(&MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::*)()>(&MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::*)()>(&MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::*)()>(&MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::*)()>(&MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::*)()>(&MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionMapAnimationController/<UpdateStageCoroutine>d__14
#include "GlobalNamespace/MissionMapAnimationController_-UpdateStageCoroutine-d__14.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionMapAnimationController/<UpdateStageCoroutine>d__14.System.IDisposable.Dispose
void GlobalNamespace::MissionMapAnimationController::$UpdateStageCoroutine$d__14::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateStageCoroutine$d__14::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateStageCoroutine>d__14.MoveNext
bool GlobalNamespace::MissionMapAnimationController::$UpdateStageCoroutine$d__14::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateStageCoroutine$d__14::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateStageCoroutine>d__14.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MissionMapAnimationController::$UpdateStageCoroutine$d__14::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateStageCoroutine$d__14::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateStageCoroutine>d__14.System.Collections.IEnumerator.Reset
void GlobalNamespace::MissionMapAnimationController::$UpdateStageCoroutine$d__14::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateStageCoroutine$d__14::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateStageCoroutine>d__14.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MissionMapAnimationController::$UpdateStageCoroutine$d__14::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateStageCoroutine$d__14::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateStageCoroutine$d__14::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateStageCoroutine$d__14::*)(int)>(&MissionMapAnimationController::$UpdateStageCoroutine$d__14::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateStageCoroutine$d__14*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateStageCoroutine$d__14::*)(int)>(&MissionMapAnimationController::$UpdateStageCoroutine$d__14::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateStageCoroutine$d__14*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateStageCoroutine$d__14::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateStageCoroutine$d__14::*)()>(&MissionMapAnimationController::$UpdateStageCoroutine$d__14::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateStageCoroutine$d__14*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateStageCoroutine$d__14::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionMapAnimationController::$UpdateStageCoroutine$d__14::*)()>(&MissionMapAnimationController::$UpdateStageCoroutine$d__14::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateStageCoroutine$d__14*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateStageCoroutine$d__14::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MissionMapAnimationController::$UpdateStageCoroutine$d__14::*)()>(&MissionMapAnimationController::$UpdateStageCoroutine$d__14::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateStageCoroutine$d__14*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateStageCoroutine$d__14::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateStageCoroutine$d__14::*)()>(&MissionMapAnimationController::$UpdateStageCoroutine$d__14::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateStageCoroutine$d__14*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateStageCoroutine$d__14::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MissionMapAnimationController::$UpdateStageCoroutine$d__14::*)()>(&MissionMapAnimationController::$UpdateStageCoroutine$d__14::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateStageCoroutine$d__14*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionMapAnimationController/<>c
#include "GlobalNamespace/MissionMapAnimationController_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: MissionNodeConnection
#include "GlobalNamespace/MissionNodeConnection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MissionMapAnimationController/<>c <>9
GlobalNamespace::MissionMapAnimationController::$$c* GlobalNamespace::MissionMapAnimationController::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MissionMapAnimationController::$$c*>("", "MissionMapAnimationController/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MissionMapAnimationController/<>c <>9
void GlobalNamespace::MissionMapAnimationController::$$c::_set_$$9(GlobalNamespace::MissionMapAnimationController::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MissionMapAnimationController/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<MissionNodeConnection,System.Single> <>9__15_0
System::Func_2<GlobalNamespace::MissionNodeConnection*, float>* GlobalNamespace::MissionMapAnimationController::$$c::_get_$$9__15_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$$c::_get_$$9__15_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::MissionNodeConnection*, float>*>("", "MissionMapAnimationController/<>c", "<>9__15_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<MissionNodeConnection,System.Single> <>9__15_0
void GlobalNamespace::MissionMapAnimationController::$$c::_set_$$9__15_0(System::Func_2<GlobalNamespace::MissionNodeConnection*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$$c::_set_$$9__15_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MissionMapAnimationController/<>c", "<>9__15_0", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<MissionNodeConnection,System.Single> <>9__15_1
System::Func_2<GlobalNamespace::MissionNodeConnection*, float>* GlobalNamespace::MissionMapAnimationController::$$c::_get_$$9__15_1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$$c::_get_$$9__15_1");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::MissionNodeConnection*, float>*>("", "MissionMapAnimationController/<>c", "<>9__15_1")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<MissionNodeConnection,System.Single> <>9__15_1
void GlobalNamespace::MissionMapAnimationController::$$c::_set_$$9__15_1(System::Func_2<GlobalNamespace::MissionNodeConnection*, float>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$$c::_set_$$9__15_1");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MissionMapAnimationController/<>c", "<>9__15_1", value)));
}
// Autogenerated method: MissionMapAnimationController/<>c..cctor
void GlobalNamespace::MissionMapAnimationController::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MissionMapAnimationController/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<>c.<UpdateNodesAndConnectionCoroutine>b__15_0
float GlobalNamespace::MissionMapAnimationController::$$c::$UpdateNodesAndConnectionCoroutine$b__15_0(GlobalNamespace::MissionNodeConnection* connection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$$c::<UpdateNodesAndConnectionCoroutine>b__15_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<UpdateNodesAndConnectionCoroutine>b__15_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, connection);
}
// Autogenerated method: MissionMapAnimationController/<>c.<UpdateNodesAndConnectionCoroutine>b__15_1
float GlobalNamespace::MissionMapAnimationController::$$c::$UpdateNodesAndConnectionCoroutine$b__15_1(GlobalNamespace::MissionNodeConnection* connection) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$$c::<UpdateNodesAndConnectionCoroutine>b__15_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<UpdateNodesAndConnectionCoroutine>b__15_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connection)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, connection);
}
// Writing MetadataGetter for method: MissionMapAnimationController::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&MissionMapAnimationController::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$$c::$UpdateNodesAndConnectionCoroutine$b__15_0
// Il2CppName: <UpdateNodesAndConnectionCoroutine>b__15_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MissionMapAnimationController::$$c::*)(GlobalNamespace::MissionNodeConnection*)>(&MissionMapAnimationController::$$c::$UpdateNodesAndConnectionCoroutine$b__15_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$$c*), "<UpdateNodesAndConnectionCoroutine>b__15_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNodeConnection*>()});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$$c::$UpdateNodesAndConnectionCoroutine$b__15_1
// Il2CppName: <UpdateNodesAndConnectionCoroutine>b__15_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MissionMapAnimationController::$$c::*)(GlobalNamespace::MissionNodeConnection*)>(&MissionMapAnimationController::$$c::$UpdateNodesAndConnectionCoroutine$b__15_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$$c*), "<UpdateNodesAndConnectionCoroutine>b__15_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNodeConnection*>()});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$$c::*)()>(&MissionMapAnimationController::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$$c::*)()>(&MissionMapAnimationController::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionMapAnimationController/<UpdateNodesAndConnectionCoroutine>d__15
#include "GlobalNamespace/MissionMapAnimationController_-UpdateNodesAndConnectionCoroutine-d__15.hpp"
// Including type: MissionNodeConnection
#include "GlobalNamespace/MissionNodeConnection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionMapAnimationController/<UpdateNodesAndConnectionCoroutine>d__15.System.IDisposable.Dispose
void GlobalNamespace::MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateNodesAndConnectionCoroutine>d__15.MoveNext
bool GlobalNamespace::MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateNodesAndConnectionCoroutine>d__15.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateNodesAndConnectionCoroutine>d__15.System.Collections.IEnumerator.Reset
void GlobalNamespace::MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionMapAnimationController/<UpdateNodesAndConnectionCoroutine>d__15.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::*)(int)>(&MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::*)(int)>(&MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::*)()>(&MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::*)()>(&MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::*)()>(&MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::*)()>(&MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::*)()>(&MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionNode
#include "GlobalNamespace/MissionNode.hpp"
// Including type: MissionDataSO
#include "GlobalNamespace/MissionDataSO.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: MissionNodeVisualController
#include "GlobalNamespace/MissionNodeVisualController.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionNode.get_missionData
GlobalNamespace::MissionDataSO* GlobalNamespace::MissionNode::get_missionData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNode::get_missionData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_missionData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionDataSO*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNode.get_childNodes
::Array<GlobalNamespace::MissionNode*>* GlobalNamespace::MissionNode::get_childNodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNode::get_childNodes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_childNodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::MissionNode*>*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNode.get_missionNodeVisualController
GlobalNamespace::MissionNodeVisualController* GlobalNamespace::MissionNode::get_missionNodeVisualController() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNode::get_missionNodeVisualController");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_missionNodeVisualController", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionNodeVisualController*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNode.get_letterPartName
::Il2CppString* GlobalNamespace::MissionNode::get_letterPartName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNode::get_letterPartName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_letterPartName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNode.get_numberPartName
int GlobalNamespace::MissionNode::get_numberPartName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNode::get_numberPartName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_numberPartName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: MissionNode.get_missionId
::Il2CppString* GlobalNamespace::MissionNode::get_missionId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNode::get_missionId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_missionId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNode.get_formattedMissionNodeName
::Il2CppString* GlobalNamespace::MissionNode::get_formattedMissionNodeName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNode::get_formattedMissionNodeName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_formattedMissionNodeName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNode.get_position
UnityEngine::Vector2 GlobalNamespace::MissionNode::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNode::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(this, ___internal__method);
}
// Autogenerated method: MissionNode.get_radius
float GlobalNamespace::MissionNode::get_radius() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNode::get_radius");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_radius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionNode::get_missionData
// Il2CppName: get_missionData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionDataSO* (MissionNode::*)()>(&MissionNode::get_missionData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNode*), "get_missionData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNode::get_childNodes
// Il2CppName: get_childNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::MissionNode*>* (MissionNode::*)()>(&MissionNode::get_childNodes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNode*), "get_childNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNode::get_missionNodeVisualController
// Il2CppName: get_missionNodeVisualController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionNodeVisualController* (MissionNode::*)()>(&MissionNode::get_missionNodeVisualController)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNode*), "get_missionNodeVisualController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNode::get_letterPartName
// Il2CppName: get_letterPartName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MissionNode::*)()>(&MissionNode::get_letterPartName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNode*), "get_letterPartName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNode::get_numberPartName
// Il2CppName: get_numberPartName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MissionNode::*)()>(&MissionNode::get_numberPartName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNode*), "get_numberPartName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNode::get_missionId
// Il2CppName: get_missionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MissionNode::*)()>(&MissionNode::get_missionId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNode*), "get_missionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNode::get_formattedMissionNodeName
// Il2CppName: get_formattedMissionNodeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MissionNode::*)()>(&MissionNode::get_formattedMissionNodeName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNode*), "get_formattedMissionNodeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNode::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (MissionNode::*)()>(&MissionNode::get_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNode*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNode::get_radius
// Il2CppName: get_radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MissionNode::*)()>(&MissionNode::get_radius)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNode*), "get_radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNode::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNode::*)()>(&MissionNode::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNode::*)()>(&MissionNode::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionNodeConnection
#include "GlobalNamespace/MissionNodeConnection.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: MissionNodeVisualController
#include "GlobalNamespace/MissionNodeVisualController.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionNodeConnection.get_parentMissionNode
GlobalNamespace::MissionNodeVisualController* GlobalNamespace::MissionNodeConnection::get_parentMissionNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeConnection::get_parentMissionNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_parentMissionNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionNodeVisualController*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeConnection.get_childMissionNode
GlobalNamespace::MissionNodeVisualController* GlobalNamespace::MissionNodeConnection::get_childMissionNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeConnection::get_childMissionNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_childMissionNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionNodeVisualController*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeConnection.get_isActive
bool GlobalNamespace::MissionNodeConnection::get_isActive() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeConnection::get_isActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeConnection.Setup
void GlobalNamespace::MissionNodeConnection::Setup(GlobalNamespace::MissionNodeVisualController* parentMissionNode, GlobalNamespace::MissionNodeVisualController* childMissionNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeConnection::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parentMissionNode), ::il2cpp_utils::ExtractType(childMissionNode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, parentMissionNode, childMissionNode);
}
// Autogenerated method: MissionNodeConnection.UpdateConnectionRectTransform
void GlobalNamespace::MissionNodeConnection::UpdateConnectionRectTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeConnection::UpdateConnectionRectTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateConnectionRectTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeConnection.SetActive
void GlobalNamespace::MissionNodeConnection::SetActive(bool animated) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeConnection::SetActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animated)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated);
}
// Autogenerated method: MissionNodeConnection.MissionConnectionEnabledDidFinish
void GlobalNamespace::MissionNodeConnection::MissionConnectionEnabledDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeConnection::MissionConnectionEnabledDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MissionConnectionEnabledDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionNodeConnection::get_parentMissionNode
// Il2CppName: get_parentMissionNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionNodeVisualController* (MissionNodeConnection::*)()>(&MissionNodeConnection::get_parentMissionNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeConnection*), "get_parentMissionNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeConnection::get_childMissionNode
// Il2CppName: get_childMissionNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionNodeVisualController* (MissionNodeConnection::*)()>(&MissionNodeConnection::get_childMissionNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeConnection*), "get_childMissionNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeConnection::get_isActive
// Il2CppName: get_isActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionNodeConnection::*)()>(&MissionNodeConnection::get_isActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeConnection*), "get_isActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeConnection::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeConnection::*)(GlobalNamespace::MissionNodeVisualController*, GlobalNamespace::MissionNodeVisualController*)>(&MissionNodeConnection::Setup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeConnection*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNodeVisualController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNodeVisualController*>()});
  }
};
// Writing MetadataGetter for method: MissionNodeConnection::UpdateConnectionRectTransform
// Il2CppName: UpdateConnectionRectTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeConnection::*)()>(&MissionNodeConnection::UpdateConnectionRectTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeConnection*), "UpdateConnectionRectTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeConnection::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeConnection::*)(bool)>(&MissionNodeConnection::SetActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeConnection*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MissionNodeConnection::MissionConnectionEnabledDidFinish
// Il2CppName: MissionConnectionEnabledDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeConnection::*)()>(&MissionNodeConnection::MissionConnectionEnabledDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeConnection*), "MissionConnectionEnabledDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeConnection::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeConnection::*)()>(&MissionNodeConnection::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeConnection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeConnection::*)()>(&MissionNodeConnection::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeConnection*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionNodeGizmos
#include "GlobalNamespace/MissionNodeGizmos.hpp"
// Including type: MissionNode
#include "GlobalNamespace/MissionNode.hpp"
// Including type: GameplayModifiersModelSO
#include "GlobalNamespace/GameplayModifiersModelSO.hpp"
// Including type: CampaignProgressModel
#include "GlobalNamespace/CampaignProgressModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MissionNodeGizmos::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeGizmos::*)()>(&MissionNodeGizmos::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeGizmos*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeGizmos::*)()>(&MissionNodeGizmos::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeGizmos*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionNodeNameGenerator
#include "GlobalNamespace/MissionNodeNameGenerator.hpp"
// Including type: MissionNodesManager
#include "GlobalNamespace/MissionNodesManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MissionNodeNameGenerator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeNameGenerator::*)()>(&MissionNodeNameGenerator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeNameGenerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeNameGenerator::*)()>(&MissionNodeNameGenerator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeNameGenerator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionNodeSelectionManager
#include "GlobalNamespace/MissionNodeSelectionManager.hpp"
// Including type: MissionNodesManager
#include "GlobalNamespace/MissionNodesManager.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: MissionNodeVisualController
#include "GlobalNamespace/MissionNodeVisualController.hpp"
// Including type: MissionNode
#include "GlobalNamespace/MissionNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionNodeSelectionManager.add_didSelectMissionNodeEvent
void GlobalNamespace::MissionNodeSelectionManager::add_didSelectMissionNodeEvent(System::Action_1<GlobalNamespace::MissionNodeVisualController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeSelectionManager::add_didSelectMissionNodeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectMissionNodeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionNodeSelectionManager.remove_didSelectMissionNodeEvent
void GlobalNamespace::MissionNodeSelectionManager::remove_didSelectMissionNodeEvent(System::Action_1<GlobalNamespace::MissionNodeVisualController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeSelectionManager::remove_didSelectMissionNodeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectMissionNodeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionNodeSelectionManager.DeselectSelectedNode
void GlobalNamespace::MissionNodeSelectionManager::DeselectSelectedNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeSelectionManager::DeselectSelectedNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeselectSelectedNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeSelectionManager.Start
void GlobalNamespace::MissionNodeSelectionManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeSelectionManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeSelectionManager.OnDestroy
void GlobalNamespace::MissionNodeSelectionManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeSelectionManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeSelectionManager.HandleNodeWasSelect
void GlobalNamespace::MissionNodeSelectionManager::HandleNodeWasSelect(GlobalNamespace::MissionNodeVisualController* missionNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeSelectionManager::HandleNodeWasSelect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNodeWasSelect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionNode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, missionNode);
}
// Autogenerated method: MissionNodeSelectionManager.HandleNodeWasDisplayed
void GlobalNamespace::MissionNodeSelectionManager::HandleNodeWasDisplayed(GlobalNamespace::MissionNodeVisualController* missionNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeSelectionManager::HandleNodeWasDisplayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNodeWasDisplayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionNode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, missionNode);
}
// Writing MetadataGetter for method: MissionNodeSelectionManager::add_didSelectMissionNodeEvent
// Il2CppName: add_didSelectMissionNodeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeSelectionManager::*)(System::Action_1<GlobalNamespace::MissionNodeVisualController*>*)>(&MissionNodeSelectionManager::add_didSelectMissionNodeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeSelectionManager*), "add_didSelectMissionNodeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MissionNodeVisualController*>*>()});
  }
};
// Writing MetadataGetter for method: MissionNodeSelectionManager::remove_didSelectMissionNodeEvent
// Il2CppName: remove_didSelectMissionNodeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeSelectionManager::*)(System::Action_1<GlobalNamespace::MissionNodeVisualController*>*)>(&MissionNodeSelectionManager::remove_didSelectMissionNodeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeSelectionManager*), "remove_didSelectMissionNodeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MissionNodeVisualController*>*>()});
  }
};
// Writing MetadataGetter for method: MissionNodeSelectionManager::DeselectSelectedNode
// Il2CppName: DeselectSelectedNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeSelectionManager::*)()>(&MissionNodeSelectionManager::DeselectSelectedNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeSelectionManager*), "DeselectSelectedNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeSelectionManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeSelectionManager::*)()>(&MissionNodeSelectionManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeSelectionManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeSelectionManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeSelectionManager::*)()>(&MissionNodeSelectionManager::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeSelectionManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeSelectionManager::HandleNodeWasSelect
// Il2CppName: HandleNodeWasSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeSelectionManager::*)(GlobalNamespace::MissionNodeVisualController*)>(&MissionNodeSelectionManager::HandleNodeWasSelect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeSelectionManager*), "HandleNodeWasSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNodeVisualController*>()});
  }
};
// Writing MetadataGetter for method: MissionNodeSelectionManager::HandleNodeWasDisplayed
// Il2CppName: HandleNodeWasDisplayed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeSelectionManager::*)(GlobalNamespace::MissionNodeVisualController*)>(&MissionNodeSelectionManager::HandleNodeWasDisplayed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeSelectionManager*), "HandleNodeWasDisplayed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNodeVisualController*>()});
  }
};
// Writing MetadataGetter for method: MissionNodeSelectionManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeSelectionManager::*)()>(&MissionNodeSelectionManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeSelectionManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeSelectionManager::*)()>(&MissionNodeSelectionManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeSelectionManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionNodeUpdatePositionInEditMode
#include "GlobalNamespace/MissionNodeUpdatePositionInEditMode.hpp"
// Including type: MissionNodeConnection
#include "GlobalNamespace/MissionNodeConnection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MissionNodeUpdatePositionInEditMode::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeUpdatePositionInEditMode::*)()>(&MissionNodeUpdatePositionInEditMode::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeUpdatePositionInEditMode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeUpdatePositionInEditMode::*)()>(&MissionNodeUpdatePositionInEditMode::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeUpdatePositionInEditMode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionNodeVisualController
#include "GlobalNamespace/MissionNodeVisualController.hpp"
// Including type: MissionToggle
#include "GlobalNamespace/MissionToggle.hpp"
// Including type: MissionNode
#include "GlobalNamespace/MissionNode.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionNodeVisualController.add_nodeWasSelectEvent
void GlobalNamespace::MissionNodeVisualController::add_nodeWasSelectEvent(System::Action_1<GlobalNamespace::MissionNodeVisualController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::add_nodeWasSelectEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_nodeWasSelectEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionNodeVisualController.remove_nodeWasSelectEvent
void GlobalNamespace::MissionNodeVisualController::remove_nodeWasSelectEvent(System::Action_1<GlobalNamespace::MissionNodeVisualController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::remove_nodeWasSelectEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_nodeWasSelectEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionNodeVisualController.add_nodeWasDisplayedEvent
void GlobalNamespace::MissionNodeVisualController::add_nodeWasDisplayedEvent(System::Action_1<GlobalNamespace::MissionNodeVisualController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::add_nodeWasDisplayedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_nodeWasDisplayedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionNodeVisualController.remove_nodeWasDisplayedEvent
void GlobalNamespace::MissionNodeVisualController::remove_nodeWasDisplayedEvent(System::Action_1<GlobalNamespace::MissionNodeVisualController*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::remove_nodeWasDisplayedEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_nodeWasDisplayedEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionNodeVisualController.get_missionNode
GlobalNamespace::MissionNode* GlobalNamespace::MissionNodeVisualController::get_missionNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::get_missionNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_missionNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionNode*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeVisualController.get_selected
bool GlobalNamespace::MissionNodeVisualController::get_selected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::get_selected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeVisualController.get_isInitialized
bool GlobalNamespace::MissionNodeVisualController::get_isInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::get_isInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeVisualController.get_cleared
bool GlobalNamespace::MissionNodeVisualController::get_cleared() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::get_cleared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_cleared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeVisualController.get_interactable
bool GlobalNamespace::MissionNodeVisualController::get_interactable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::get_interactable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_interactable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeVisualController.SetSelected
void GlobalNamespace::MissionNodeVisualController::SetSelected(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::SetSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionNodeVisualController.OnEnable
void GlobalNamespace::MissionNodeVisualController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeVisualController.Awake
void GlobalNamespace::MissionNodeVisualController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeVisualController.Start
void GlobalNamespace::MissionNodeVisualController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeVisualController.Reset
void GlobalNamespace::MissionNodeVisualController::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeVisualController.OnDestroy
void GlobalNamespace::MissionNodeVisualController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeVisualController.Init
void GlobalNamespace::MissionNodeVisualController::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeVisualController.Setup
void GlobalNamespace::MissionNodeVisualController::Setup(bool cleared, bool interactable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(cleared), ::il2cpp_utils::ExtractType(interactable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, cleared, interactable);
}
// Autogenerated method: MissionNodeVisualController.SetupToggle
void GlobalNamespace::MissionNodeVisualController::SetupToggle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::SetupToggle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupToggle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeVisualController.SetMissionCleared
void GlobalNamespace::MissionNodeVisualController::SetMissionCleared() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::SetMissionCleared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetMissionCleared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeVisualController.SetInteractable
void GlobalNamespace::MissionNodeVisualController::SetInteractable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::SetInteractable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetInteractable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodeVisualController.ChangeNodeSelection
void GlobalNamespace::MissionNodeVisualController::ChangeNodeSelection(bool selected) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::ChangeNodeSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeNodeSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(selected)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, selected);
}
// Autogenerated method: MissionNodeVisualController.HandleMissionToggleSelectionDidChange
void GlobalNamespace::MissionNodeVisualController::HandleMissionToggleSelectionDidChange(GlobalNamespace::MissionToggle* toggle) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeVisualController::HandleMissionToggleSelectionDidChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMissionToggleSelectionDidChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toggle)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toggle);
}
// Writing MetadataGetter for method: MissionNodeVisualController::add_nodeWasSelectEvent
// Il2CppName: add_nodeWasSelectEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)(System::Action_1<GlobalNamespace::MissionNodeVisualController*>*)>(&MissionNodeVisualController::add_nodeWasSelectEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "add_nodeWasSelectEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MissionNodeVisualController*>*>()});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::remove_nodeWasSelectEvent
// Il2CppName: remove_nodeWasSelectEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)(System::Action_1<GlobalNamespace::MissionNodeVisualController*>*)>(&MissionNodeVisualController::remove_nodeWasSelectEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "remove_nodeWasSelectEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MissionNodeVisualController*>*>()});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::add_nodeWasDisplayedEvent
// Il2CppName: add_nodeWasDisplayedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)(System::Action_1<GlobalNamespace::MissionNodeVisualController*>*)>(&MissionNodeVisualController::add_nodeWasDisplayedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "add_nodeWasDisplayedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MissionNodeVisualController*>*>()});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::remove_nodeWasDisplayedEvent
// Il2CppName: remove_nodeWasDisplayedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)(System::Action_1<GlobalNamespace::MissionNodeVisualController*>*)>(&MissionNodeVisualController::remove_nodeWasDisplayedEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "remove_nodeWasDisplayedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MissionNodeVisualController*>*>()});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::get_missionNode
// Il2CppName: get_missionNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionNode* (MissionNodeVisualController::*)()>(&MissionNodeVisualController::get_missionNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "get_missionNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::get_selected
// Il2CppName: get_selected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionNodeVisualController::*)()>(&MissionNodeVisualController::get_selected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "get_selected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::get_isInitialized
// Il2CppName: get_isInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionNodeVisualController::*)()>(&MissionNodeVisualController::get_isInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "get_isInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::get_cleared
// Il2CppName: get_cleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionNodeVisualController::*)()>(&MissionNodeVisualController::get_cleared)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "get_cleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::get_interactable
// Il2CppName: get_interactable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionNodeVisualController::*)()>(&MissionNodeVisualController::get_interactable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "get_interactable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::SetSelected
// Il2CppName: SetSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)(bool)>(&MissionNodeVisualController::SetSelected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "SetSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)()>(&MissionNodeVisualController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)()>(&MissionNodeVisualController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)()>(&MissionNodeVisualController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)()>(&MissionNodeVisualController::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)()>(&MissionNodeVisualController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)()>(&MissionNodeVisualController::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)(bool, bool)>(&MissionNodeVisualController::Setup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::SetupToggle
// Il2CppName: SetupToggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)()>(&MissionNodeVisualController::SetupToggle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "SetupToggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::SetMissionCleared
// Il2CppName: SetMissionCleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)()>(&MissionNodeVisualController::SetMissionCleared)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "SetMissionCleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::SetInteractable
// Il2CppName: SetInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)()>(&MissionNodeVisualController::SetInteractable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "SetInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::ChangeNodeSelection
// Il2CppName: ChangeNodeSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)(bool)>(&MissionNodeVisualController::ChangeNodeSelection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "ChangeNodeSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::HandleMissionToggleSelectionDidChange
// Il2CppName: HandleMissionToggleSelectionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)(GlobalNamespace::MissionToggle*)>(&MissionNodeVisualController::HandleMissionToggleSelectionDidChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), "HandleMissionToggleSelectionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionToggle*>()});
  }
};
// Writing MetadataGetter for method: MissionNodeVisualController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)()>(&MissionNodeVisualController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodeVisualController::*)()>(&MissionNodeVisualController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodeVisualController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionNodesHelper
#include "GlobalNamespace/MissionNodesHelper.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: MissionNode
#include "GlobalNamespace/MissionNode.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionNodesHelper.GetAllNodesFromRoot
System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>* GlobalNamespace::MissionNodesHelper::GetAllNodesFromRoot(GlobalNamespace::MissionNode* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesHelper::GetAllNodesFromRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MissionNodesHelper", "GetAllNodesFromRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, root);
}
// Autogenerated method: MissionNodesHelper.VisitAllTree
void GlobalNamespace::MissionNodesHelper::VisitAllTree(GlobalNamespace::MissionNode* node, System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>* visitedNodes) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesHelper::VisitAllTree");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MissionNodesHelper", "VisitAllTree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(visitedNodes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, node, visitedNodes);
}
// Autogenerated method: MissionNodesHelper.CycleDetection
bool GlobalNamespace::MissionNodesHelper::CycleDetection(GlobalNamespace::MissionNode* node) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesHelper::CycleDetection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MissionNodesHelper", "CycleDetection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, node);
}
// Autogenerated method: MissionNodesHelper.CycleDetection
bool GlobalNamespace::MissionNodesHelper::CycleDetection(GlobalNamespace::MissionNode* node, int layer, System::Collections::Generic::Dictionary_2<GlobalNamespace::MissionNode*, int>* layers) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesHelper::CycleDetection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MissionNodesHelper", "CycleDetection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(layer), ::il2cpp_utils::ExtractType(layers)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, node, layer, layers);
}
// Autogenerated method: MissionNodesHelper.FinalNodeIsFinal
bool GlobalNamespace::MissionNodesHelper::FinalNodeIsFinal(GlobalNamespace::MissionNode* finalNode, GlobalNamespace::MissionNode* rootNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesHelper::FinalNodeIsFinal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MissionNodesHelper", "FinalNodeIsFinal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finalNode), ::il2cpp_utils::ExtractType(rootNode)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, finalNode, rootNode);
}
// Autogenerated method: MissionNodesHelper.FinalNodeIsFinal
bool GlobalNamespace::MissionNodesHelper::FinalNodeIsFinal(GlobalNamespace::MissionNode* finalNode, GlobalNamespace::MissionNode* node, System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>* visitedNodes) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesHelper::FinalNodeIsFinal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MissionNodesHelper", "FinalNodeIsFinal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(finalNode), ::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(visitedNodes)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, finalNode, node, visitedNodes);
}
// Writing MetadataGetter for method: MissionNodesHelper::GetAllNodesFromRoot
// Il2CppName: GetAllNodesFromRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>* (*)(GlobalNamespace::MissionNode*)>(&MissionNodesHelper::GetAllNodesFromRoot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesHelper*), "GetAllNodesFromRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>()});
  }
};
// Writing MetadataGetter for method: MissionNodesHelper::VisitAllTree
// Il2CppName: VisitAllTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::MissionNode*, System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>*)>(&MissionNodesHelper::VisitAllTree)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesHelper*), "VisitAllTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>*>()});
  }
};
// Writing MetadataGetter for method: MissionNodesHelper::CycleDetection
// Il2CppName: CycleDetection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::MissionNode*)>(&MissionNodesHelper::CycleDetection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesHelper*), "CycleDetection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>()});
  }
};
// Writing MetadataGetter for method: MissionNodesHelper::CycleDetection
// Il2CppName: CycleDetection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::MissionNode*, int, System::Collections::Generic::Dictionary_2<GlobalNamespace::MissionNode*, int>*)>(&MissionNodesHelper::CycleDetection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesHelper*), "CycleDetection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::Dictionary_2<GlobalNamespace::MissionNode*, int>*>()});
  }
};
// Writing MetadataGetter for method: MissionNodesHelper::FinalNodeIsFinal
// Il2CppName: FinalNodeIsFinal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::MissionNode*, GlobalNamespace::MissionNode*)>(&MissionNodesHelper::FinalNodeIsFinal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesHelper*), "FinalNodeIsFinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>()});
  }
};
// Writing MetadataGetter for method: MissionNodesHelper::FinalNodeIsFinal
// Il2CppName: FinalNodeIsFinal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::MissionNode*, GlobalNamespace::MissionNode*, System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>*)>(&MissionNodesHelper::FinalNodeIsFinal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesHelper*), "FinalNodeIsFinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>*>()});
  }
};
// Writing MetadataGetter for method: MissionNodesHelper::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodesHelper::*)()>(&MissionNodesHelper::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodesHelper::*)()>(&MissionNodesHelper::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesHelper*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionNodesManager
#include "GlobalNamespace/MissionNodesManager.hpp"
// Including type: MissionNode
#include "GlobalNamespace/MissionNode.hpp"
// Including type: MissionStagesManager
#include "GlobalNamespace/MissionStagesManager.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: CampaignProgressModel
#include "GlobalNamespace/CampaignProgressModel.hpp"
// Including type: MissionNodeConnection
#include "GlobalNamespace/MissionNodeConnection.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: MissionNodeVisualController
#include "GlobalNamespace/MissionNodeVisualController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionNodesManager.get_rootMissionNode
GlobalNamespace::MissionNode* GlobalNamespace::MissionNodesManager::get_rootMissionNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::get_rootMissionNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootMissionNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionNode*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.get_finalMissionNode
GlobalNamespace::MissionNode* GlobalNamespace::MissionNodesManager::get_finalMissionNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::get_finalMissionNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_finalMissionNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionNode*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.get_missionStagesManager
GlobalNamespace::MissionStagesManager* GlobalNamespace::MissionNodesManager::get_missionStagesManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::get_missionStagesManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_missionStagesManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionStagesManager*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.get_missionProgressModel
GlobalNamespace::CampaignProgressModel* GlobalNamespace::MissionNodesManager::get_missionProgressModel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::get_missionProgressModel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_missionProgressModel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::CampaignProgressModel*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.get_allMissionNodes
::Array<GlobalNamespace::MissionNode*>* GlobalNamespace::MissionNodesManager::get_allMissionNodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::get_allMissionNodes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allMissionNodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::MissionNode*>*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.get_IsInitialized
bool GlobalNamespace::MissionNodesManager::get_IsInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::get_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsInitialized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.Awake
void GlobalNamespace::MissionNodesManager::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.SetupNodeMap
void GlobalNamespace::MissionNodesManager::SetupNodeMap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::SetupNodeMap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupNodeMap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.MissionWasCleared
bool GlobalNamespace::MissionNodesManager::MissionWasCleared(GlobalNamespace::MissionNode* missionNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::MissionWasCleared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MissionWasCleared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionNode)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, missionNode);
}
// Autogenerated method: MissionNodesManager.GetMissionNodeWithModelClearedStateInconsistency
GlobalNamespace::MissionNode* GlobalNamespace::MissionNodesManager::GetMissionNodeWithModelClearedStateInconsistency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::GetMissionNodeWithModelClearedStateInconsistency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMissionNodeWithModelClearedStateInconsistency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionNode*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.DidFirstLockedMissionStageChange
bool GlobalNamespace::MissionNodesManager::DidFirstLockedMissionStageChange() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::DidFirstLockedMissionStageChange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DidFirstLockedMissionStageChange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.UpdateStageLockText
void GlobalNamespace::MissionNodesManager::UpdateStageLockText() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::UpdateStageLockText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStageLockText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.GetTopMostNotClearedMissionNode
GlobalNamespace::MissionNode* GlobalNamespace::MissionNodesManager::GetTopMostNotClearedMissionNode() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::GetTopMostNotClearedMissionNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTopMostNotClearedMissionNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionNode*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.GetAllMissionNodes
void GlobalNamespace::MissionNodesManager::GetAllMissionNodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::GetAllMissionNodes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllMissionNodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.GetAllMissionNodes
System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>* GlobalNamespace::MissionNodesManager::GetAllMissionNodes(GlobalNamespace::MissionNode* node, System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>* visited) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::GetAllMissionNodes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAllMissionNodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(visited)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>*, false>(this, ___internal__method, node, visited);
}
// Autogenerated method: MissionNodesManager.GetNewEnabledConnection
::Array<GlobalNamespace::MissionNodeConnection*>* GlobalNamespace::MissionNodesManager::GetNewEnabledConnection() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::GetNewEnabledConnection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNewEnabledConnection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::MissionNodeConnection*>*, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.ResetAllNodes
void GlobalNamespace::MissionNodesManager::ResetAllNodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::ResetAllNodes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetAllNodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.SetupStages
void GlobalNamespace::MissionNodesManager::SetupStages() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::SetupStages");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupStages", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.RegisterAllNodes
void GlobalNamespace::MissionNodesManager::RegisterAllNodes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::RegisterAllNodes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterAllNodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionNodesManager.SetupNodeTree
void GlobalNamespace::MissionNodesManager::SetupNodeTree(GlobalNamespace::MissionNodeVisualController* node, bool parentCleared) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::SetupNodeTree");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupNodeTree", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(parentCleared)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, parentCleared);
}
// Autogenerated method: MissionNodesManager.IsNodeInteractable
bool GlobalNamespace::MissionNodesManager::IsNodeInteractable(GlobalNamespace::MissionNodeVisualController* node, bool parentCleared) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::IsNodeInteractable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsNodeInteractable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node), ::il2cpp_utils::ExtractType(parentCleared)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, node, parentCleared);
}
// Autogenerated method: MissionNodesManager.SetupNodeConnections
void GlobalNamespace::MissionNodesManager::SetupNodeConnections() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::SetupNodeConnections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetupNodeConnections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionNodesManager::get_rootMissionNode
// Il2CppName: get_rootMissionNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionNode* (MissionNodesManager::*)()>(&MissionNodesManager::get_rootMissionNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "get_rootMissionNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::get_finalMissionNode
// Il2CppName: get_finalMissionNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionNode* (MissionNodesManager::*)()>(&MissionNodesManager::get_finalMissionNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "get_finalMissionNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::get_missionStagesManager
// Il2CppName: get_missionStagesManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionStagesManager* (MissionNodesManager::*)()>(&MissionNodesManager::get_missionStagesManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "get_missionStagesManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::get_missionProgressModel
// Il2CppName: get_missionProgressModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::CampaignProgressModel* (MissionNodesManager::*)()>(&MissionNodesManager::get_missionProgressModel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "get_missionProgressModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::get_allMissionNodes
// Il2CppName: get_allMissionNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::MissionNode*>* (MissionNodesManager::*)()>(&MissionNodesManager::get_allMissionNodes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "get_allMissionNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::get_IsInitialized
// Il2CppName: get_IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionNodesManager::*)()>(&MissionNodesManager::get_IsInitialized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "get_IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodesManager::*)()>(&MissionNodesManager::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::SetupNodeMap
// Il2CppName: SetupNodeMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodesManager::*)()>(&MissionNodesManager::SetupNodeMap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "SetupNodeMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::MissionWasCleared
// Il2CppName: MissionWasCleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionNodesManager::*)(GlobalNamespace::MissionNode*)>(&MissionNodesManager::MissionWasCleared)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "MissionWasCleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>()});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::GetMissionNodeWithModelClearedStateInconsistency
// Il2CppName: GetMissionNodeWithModelClearedStateInconsistency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionNode* (MissionNodesManager::*)()>(&MissionNodesManager::GetMissionNodeWithModelClearedStateInconsistency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "GetMissionNodeWithModelClearedStateInconsistency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::DidFirstLockedMissionStageChange
// Il2CppName: DidFirstLockedMissionStageChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionNodesManager::*)()>(&MissionNodesManager::DidFirstLockedMissionStageChange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "DidFirstLockedMissionStageChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::UpdateStageLockText
// Il2CppName: UpdateStageLockText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodesManager::*)()>(&MissionNodesManager::UpdateStageLockText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "UpdateStageLockText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::GetTopMostNotClearedMissionNode
// Il2CppName: GetTopMostNotClearedMissionNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionNode* (MissionNodesManager::*)()>(&MissionNodesManager::GetTopMostNotClearedMissionNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "GetTopMostNotClearedMissionNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::GetAllMissionNodes
// Il2CppName: GetAllMissionNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodesManager::*)()>(&MissionNodesManager::GetAllMissionNodes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "GetAllMissionNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::GetAllMissionNodes
// Il2CppName: GetAllMissionNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>* (MissionNodesManager::*)(GlobalNamespace::MissionNode*, System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>*)>(&MissionNodesManager::GetAllMissionNodes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "GetAllMissionNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>*>()});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::GetNewEnabledConnection
// Il2CppName: GetNewEnabledConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::MissionNodeConnection*>* (MissionNodesManager::*)()>(&MissionNodesManager::GetNewEnabledConnection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "GetNewEnabledConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::ResetAllNodes
// Il2CppName: ResetAllNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodesManager::*)()>(&MissionNodesManager::ResetAllNodes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "ResetAllNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::SetupStages
// Il2CppName: SetupStages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodesManager::*)()>(&MissionNodesManager::SetupStages)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "SetupStages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::RegisterAllNodes
// Il2CppName: RegisterAllNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodesManager::*)()>(&MissionNodesManager::RegisterAllNodes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "RegisterAllNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::SetupNodeTree
// Il2CppName: SetupNodeTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodesManager::*)(GlobalNamespace::MissionNodeVisualController*, bool)>(&MissionNodesManager::SetupNodeTree)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "SetupNodeTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNodeVisualController*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::IsNodeInteractable
// Il2CppName: IsNodeInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionNodesManager::*)(GlobalNamespace::MissionNodeVisualController*, bool)>(&MissionNodesManager::IsNodeInteractable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "IsNodeInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNodeVisualController*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::SetupNodeConnections
// Il2CppName: SetupNodeConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodesManager::*)()>(&MissionNodesManager::SetupNodeConnections)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), "SetupNodeConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionNodesManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodesManager::*)()>(&MissionNodesManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionNodesManager::*)()>(&MissionNodesManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionNodesManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionStageLockView
#include "GlobalNamespace/MissionStageLockView.hpp"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionStageLockView.UpdateLocalPositionY
void GlobalNamespace::MissionStageLockView::UpdateLocalPositionY(float dstPosY, bool animated, float animationDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStageLockView::UpdateLocalPositionY");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateLocalPositionY", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dstPosY), ::il2cpp_utils::ExtractType(animated), ::il2cpp_utils::ExtractType(animationDuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dstPosY, animated, animationDuration);
}
// Autogenerated method: MissionStageLockView.Update
void GlobalNamespace::MissionStageLockView::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStageLockView::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionStageLockView.UpdateStageLockText
void GlobalNamespace::MissionStageLockView::UpdateStageLockText(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStageLockView::UpdateStageLockText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStageLockText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Writing MetadataGetter for method: MissionStageLockView::UpdateLocalPositionY
// Il2CppName: UpdateLocalPositionY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStageLockView::*)(float, bool, float)>(&MissionStageLockView::UpdateLocalPositionY)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStageLockView*), "UpdateLocalPositionY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MissionStageLockView::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStageLockView::*)()>(&MissionStageLockView::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStageLockView*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionStageLockView::UpdateStageLockText
// Il2CppName: UpdateStageLockText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStageLockView::*)(::Il2CppString*)>(&MissionStageLockView::UpdateStageLockText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStageLockView*), "UpdateStageLockText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MissionStageLockView::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStageLockView::*)()>(&MissionStageLockView::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStageLockView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStageLockView::*)()>(&MissionStageLockView::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStageLockView*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionStagesManager
#include "GlobalNamespace/MissionStagesManager.hpp"
// Including type: MissionStagesManager/<>c
#include "GlobalNamespace/MissionStagesManager_--c.hpp"
// Including type: MissionStageLockView
#include "GlobalNamespace/MissionStageLockView.hpp"
// Including type: MissionStage
#include "GlobalNamespace/MissionStage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionStagesManager.get_firstLockedMissionStage
GlobalNamespace::MissionStage* GlobalNamespace::MissionStagesManager::get_firstLockedMissionStage() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStagesManager::get_firstLockedMissionStage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_firstLockedMissionStage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::MissionStage*, false>(this, ___internal__method);
}
// Autogenerated method: MissionStagesManager.UpdateFirtsLockedMissionStage
void GlobalNamespace::MissionStagesManager::UpdateFirtsLockedMissionStage(int numberOfClearedMissions) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStagesManager::UpdateFirtsLockedMissionStage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFirtsLockedMissionStage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(numberOfClearedMissions)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, numberOfClearedMissions);
}
// Autogenerated method: MissionStagesManager.InitStages
void GlobalNamespace::MissionStagesManager::InitStages() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStagesManager::InitStages");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitStages", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionStagesManager.UpdateStageLockPosition
void GlobalNamespace::MissionStagesManager::UpdateStageLockPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStagesManager::UpdateStageLockPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStageLockPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionStagesManager.UpdateStageLockPositionAnimated
void GlobalNamespace::MissionStagesManager::UpdateStageLockPositionAnimated(bool animated, float animationDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStagesManager::UpdateStageLockPositionAnimated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStageLockPositionAnimated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animated), ::il2cpp_utils::ExtractType(animationDuration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animated, animationDuration);
}
// Autogenerated method: MissionStagesManager.UpdateStageLockText
void GlobalNamespace::MissionStagesManager::UpdateStageLockText(int numberOfClearedMissions) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStagesManager::UpdateStageLockText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStageLockText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(numberOfClearedMissions)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, numberOfClearedMissions);
}
// Writing MetadataGetter for method: MissionStagesManager::get_firstLockedMissionStage
// Il2CppName: get_firstLockedMissionStage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MissionStage* (MissionStagesManager::*)()>(&MissionStagesManager::get_firstLockedMissionStage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStagesManager*), "get_firstLockedMissionStage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionStagesManager::UpdateFirtsLockedMissionStage
// Il2CppName: UpdateFirtsLockedMissionStage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStagesManager::*)(int)>(&MissionStagesManager::UpdateFirtsLockedMissionStage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStagesManager*), "UpdateFirtsLockedMissionStage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MissionStagesManager::InitStages
// Il2CppName: InitStages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStagesManager::*)()>(&MissionStagesManager::InitStages)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStagesManager*), "InitStages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionStagesManager::UpdateStageLockPosition
// Il2CppName: UpdateStageLockPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStagesManager::*)()>(&MissionStagesManager::UpdateStageLockPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStagesManager*), "UpdateStageLockPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionStagesManager::UpdateStageLockPositionAnimated
// Il2CppName: UpdateStageLockPositionAnimated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStagesManager::*)(bool, float)>(&MissionStagesManager::UpdateStageLockPositionAnimated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStagesManager*), "UpdateStageLockPositionAnimated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MissionStagesManager::UpdateStageLockText
// Il2CppName: UpdateStageLockText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStagesManager::*)(int)>(&MissionStagesManager::UpdateStageLockText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStagesManager*), "UpdateStageLockText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MissionStagesManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStagesManager::*)()>(&MissionStagesManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStagesManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStagesManager::*)()>(&MissionStagesManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStagesManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MissionStagesManager/<>c
#include "GlobalNamespace/MissionStagesManager_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: MissionStage
#include "GlobalNamespace/MissionStage.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MissionStagesManager/<>c <>9
GlobalNamespace::MissionStagesManager::$$c* GlobalNamespace::MissionStagesManager::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStagesManager::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MissionStagesManager::$$c*>("", "MissionStagesManager/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MissionStagesManager/<>c <>9
void GlobalNamespace::MissionStagesManager::$$c::_set_$$9(GlobalNamespace::MissionStagesManager::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStagesManager::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MissionStagesManager/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<MissionStage,System.Int32> <>9__6_0
System::Func_2<GlobalNamespace::MissionStage*, int>* GlobalNamespace::MissionStagesManager::$$c::_get_$$9__6_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStagesManager::$$c::_get_$$9__6_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::MissionStage*, int>*>("", "MissionStagesManager/<>c", "<>9__6_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<MissionStage,System.Int32> <>9__6_0
void GlobalNamespace::MissionStagesManager::$$c::_set_$$9__6_0(System::Func_2<GlobalNamespace::MissionStage*, int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStagesManager::$$c::_set_$$9__6_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MissionStagesManager/<>c", "<>9__6_0", value)));
}
// Autogenerated method: MissionStagesManager/<>c..cctor
void GlobalNamespace::MissionStagesManager::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStagesManager::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MissionStagesManager/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MissionStagesManager/<>c.<InitStages>b__6_0
int GlobalNamespace::MissionStagesManager::$$c::$InitStages$b__6_0(GlobalNamespace::MissionStage* stage) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionStagesManager::$$c::<InitStages>b__6_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<InitStages>b__6_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stage)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, stage);
}
// Writing MetadataGetter for method: MissionStagesManager::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&MissionStagesManager::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStagesManager::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionStagesManager::$$c::$InitStages$b__6_0
// Il2CppName: <InitStages>b__6_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (MissionStagesManager::$$c::*)(GlobalNamespace::MissionStage*)>(&MissionStagesManager::$$c::$InitStages$b__6_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStagesManager::$$c*), "<InitStages>b__6_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionStage*>()});
  }
};
// Writing MetadataGetter for method: MissionStagesManager::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStagesManager::$$c::*)()>(&MissionStagesManager::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStagesManager::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionStagesManager::$$c::*)()>(&MissionStagesManager::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionStagesManager::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MissionToggle
#include "GlobalNamespace/MissionToggle.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.UI.Image
#include "UnityEngine/UI/Image.hpp"
// Including type: HMUI.Interactable
#include "HMUI/Interactable.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.EventSystems.PointerEventData
#include "UnityEngine/EventSystems/PointerEventData.hpp"
// Including type: UnityEngine.EventSystems.BaseEventData
#include "UnityEngine/EventSystems/BaseEventData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MissionToggle.add_selectionDidChangeEvent
void GlobalNamespace::MissionToggle::add_selectionDidChangeEvent(System::Action_1<GlobalNamespace::MissionToggle*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::add_selectionDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_selectionDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionToggle.remove_selectionDidChangeEvent
void GlobalNamespace::MissionToggle::remove_selectionDidChangeEvent(System::Action_1<GlobalNamespace::MissionToggle*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::remove_selectionDidChangeEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_selectionDidChangeEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionToggle.set_missionCleared
void GlobalNamespace::MissionToggle::set_missionCleared(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::set_missionCleared");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_missionCleared", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionToggle.get_selected
bool GlobalNamespace::MissionToggle::get_selected() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::get_selected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_selected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionToggle.set_selected
void GlobalNamespace::MissionToggle::set_selected(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::set_selected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_selected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionToggle.get_interactable
bool GlobalNamespace::MissionToggle::get_interactable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::get_interactable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_interactable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionToggle.set_interactable
void GlobalNamespace::MissionToggle::set_interactable(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::set_interactable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_interactable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MissionToggle.get_highlighted
bool GlobalNamespace::MissionToggle::get_highlighted() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::get_highlighted");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_highlighted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MissionToggle.ChangeSelection
void GlobalNamespace::MissionToggle::ChangeSelection(bool value, bool callSelectionDidChange, bool ignoreCurrentValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::ChangeSelection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeSelection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(callSelectionDidChange), ::il2cpp_utils::ExtractType(ignoreCurrentValue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value, callSelectionDidChange, ignoreCurrentValue);
}
// Autogenerated method: MissionToggle.ChangeHighlight
void GlobalNamespace::MissionToggle::ChangeHighlight(bool value, bool ignoreCurrentValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::ChangeHighlight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChangeHighlight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(ignoreCurrentValue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value, ignoreCurrentValue);
}
// Autogenerated method: MissionToggle.SetText
void GlobalNamespace::MissionToggle::SetText(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::SetText");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetText", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: MissionToggle.InternalToggle
void GlobalNamespace::MissionToggle::InternalToggle() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::InternalToggle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InternalToggle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionToggle.RefreshUI
void GlobalNamespace::MissionToggle::RefreshUI() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::RefreshUI");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RefreshUI", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MissionToggle.OnPointerClick
void GlobalNamespace::MissionToggle::OnPointerClick(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::OnPointerClick");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerClick", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: MissionToggle.OnSubmit
void GlobalNamespace::MissionToggle::OnSubmit(UnityEngine::EventSystems::BaseEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::OnSubmit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSubmit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: MissionToggle.OnPointerEnter
void GlobalNamespace::MissionToggle::OnPointerEnter(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::OnPointerEnter");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: MissionToggle.OnPointerExit
void GlobalNamespace::MissionToggle::OnPointerExit(UnityEngine::EventSystems::PointerEventData* eventData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::OnPointerExit");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPointerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(eventData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eventData);
}
// Autogenerated method: MissionToggle.Start
void GlobalNamespace::MissionToggle::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionToggle::Start");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MissionToggle::add_selectionDidChangeEvent
// Il2CppName: add_selectionDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)(System::Action_1<GlobalNamespace::MissionToggle*>*)>(&MissionToggle::add_selectionDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "add_selectionDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MissionToggle*>*>()});
  }
};
// Writing MetadataGetter for method: MissionToggle::remove_selectionDidChangeEvent
// Il2CppName: remove_selectionDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)(System::Action_1<GlobalNamespace::MissionToggle*>*)>(&MissionToggle::remove_selectionDidChangeEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "remove_selectionDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::MissionToggle*>*>()});
  }
};
// Writing MetadataGetter for method: MissionToggle::set_missionCleared
// Il2CppName: set_missionCleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)(bool)>(&MissionToggle::set_missionCleared)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "set_missionCleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MissionToggle::get_selected
// Il2CppName: get_selected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionToggle::*)()>(&MissionToggle::get_selected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "get_selected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionToggle::set_selected
// Il2CppName: set_selected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)(bool)>(&MissionToggle::set_selected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "set_selected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MissionToggle::get_interactable
// Il2CppName: get_interactable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionToggle::*)()>(&MissionToggle::get_interactable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "get_interactable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionToggle::set_interactable
// Il2CppName: set_interactable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)(bool)>(&MissionToggle::set_interactable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "set_interactable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MissionToggle::get_highlighted
// Il2CppName: get_highlighted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MissionToggle::*)()>(&MissionToggle::get_highlighted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "get_highlighted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionToggle::ChangeSelection
// Il2CppName: ChangeSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)(bool, bool, bool)>(&MissionToggle::ChangeSelection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "ChangeSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MissionToggle::ChangeHighlight
// Il2CppName: ChangeHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)(bool, bool)>(&MissionToggle::ChangeHighlight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "ChangeHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MissionToggle::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)(::Il2CppString*)>(&MissionToggle::SetText)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MissionToggle::InternalToggle
// Il2CppName: InternalToggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)()>(&MissionToggle::InternalToggle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "InternalToggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionToggle::RefreshUI
// Il2CppName: RefreshUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)()>(&MissionToggle::RefreshUI)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "RefreshUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionToggle::OnPointerClick
// Il2CppName: OnPointerClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)(UnityEngine::EventSystems::PointerEventData*)>(&MissionToggle::OnPointerClick)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "OnPointerClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: MissionToggle::OnSubmit
// Il2CppName: OnSubmit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)(UnityEngine::EventSystems::BaseEventData*)>(&MissionToggle::OnSubmit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "OnSubmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::BaseEventData*>()});
  }
};
// Writing MetadataGetter for method: MissionToggle::OnPointerEnter
// Il2CppName: OnPointerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)(UnityEngine::EventSystems::PointerEventData*)>(&MissionToggle::OnPointerEnter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "OnPointerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: MissionToggle::OnPointerExit
// Il2CppName: OnPointerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)(UnityEngine::EventSystems::PointerEventData*)>(&MissionToggle::OnPointerExit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "OnPointerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::EventSystems::PointerEventData*>()});
  }
};
// Writing MetadataGetter for method: MissionToggle::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)()>(&MissionToggle::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MissionToggle::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)()>(&MissionToggle::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MissionToggle::*)()>(&MissionToggle::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MissionToggle*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AutoSetupController
#include "GlobalNamespace/AutoSetupController.hpp"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
// Including type: UnityEngine.UI.Toggle
#include "UnityEngine/UI/Toggle.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: AutoSetupData
#include "GlobalNamespace/AutoSetupData.hpp"
// Including type: HMUI.ButtonBinder
#include "HMUI/ButtonBinder.hpp"
// Including type: HMUI.ToggleBinder
#include "HMUI/ToggleBinder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AutoSetupController.add_didFinishEvent
void GlobalNamespace::AutoSetupController::add_didFinishEvent(System::Action_1<GlobalNamespace::AutoSetupData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutoSetupController::add_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AutoSetupController.remove_didFinishEvent
void GlobalNamespace::AutoSetupController::remove_didFinishEvent(System::Action_1<GlobalNamespace::AutoSetupData*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutoSetupController::remove_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AutoSetupController.Setup
void GlobalNamespace::AutoSetupController::Setup(GlobalNamespace::AutoSetupData* autoSetupData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutoSetupController::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(autoSetupData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, autoSetupData);
}
// Autogenerated method: AutoSetupController.OnEnable
void GlobalNamespace::AutoSetupController::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutoSetupController::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AutoSetupController.OnDisable
void GlobalNamespace::AutoSetupController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutoSetupController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AutoSetupController.<OnEnable>b__12_0
void GlobalNamespace::AutoSetupController::$OnEnable$b__12_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutoSetupController::<OnEnable>b__12_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnEnable>b__12_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AutoSetupController.<OnEnable>b__12_1
void GlobalNamespace::AutoSetupController::$OnEnable$b__12_1(bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutoSetupController::<OnEnable>b__12_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnEnable>b__12_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isOn);
}
// Autogenerated method: AutoSetupController.<OnEnable>b__12_2
void GlobalNamespace::AutoSetupController::$OnEnable$b__12_2(bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutoSetupController::<OnEnable>b__12_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnEnable>b__12_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isOn);
}
// Autogenerated method: AutoSetupController.<OnEnable>b__12_3
void GlobalNamespace::AutoSetupController::$OnEnable$b__12_3(bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutoSetupController::<OnEnable>b__12_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnEnable>b__12_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isOn);
}
// Autogenerated method: AutoSetupController.<OnEnable>b__12_4
void GlobalNamespace::AutoSetupController::$OnEnable$b__12_4(bool isOn) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutoSetupController::<OnEnable>b__12_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnEnable>b__12_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isOn)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isOn);
}
// Writing MetadataGetter for method: AutoSetupController::add_didFinishEvent
// Il2CppName: add_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutoSetupController::*)(System::Action_1<GlobalNamespace::AutoSetupData*>*)>(&AutoSetupController::add_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutoSetupController*), "add_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::AutoSetupData*>*>()});
  }
};
// Writing MetadataGetter for method: AutoSetupController::remove_didFinishEvent
// Il2CppName: remove_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutoSetupController::*)(System::Action_1<GlobalNamespace::AutoSetupData*>*)>(&AutoSetupController::remove_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutoSetupController*), "remove_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::AutoSetupData*>*>()});
  }
};
// Writing MetadataGetter for method: AutoSetupController::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutoSetupController::*)(GlobalNamespace::AutoSetupData*)>(&AutoSetupController::Setup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutoSetupController*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AutoSetupData*>()});
  }
};
// Writing MetadataGetter for method: AutoSetupController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutoSetupController::*)()>(&AutoSetupController::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutoSetupController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutoSetupController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutoSetupController::*)()>(&AutoSetupController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutoSetupController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutoSetupController::$OnEnable$b__12_0
// Il2CppName: <OnEnable>b__12_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutoSetupController::*)()>(&AutoSetupController::$OnEnable$b__12_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutoSetupController*), "<OnEnable>b__12_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutoSetupController::$OnEnable$b__12_1
// Il2CppName: <OnEnable>b__12_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutoSetupController::*)(bool)>(&AutoSetupController::$OnEnable$b__12_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutoSetupController*), "<OnEnable>b__12_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AutoSetupController::$OnEnable$b__12_2
// Il2CppName: <OnEnable>b__12_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutoSetupController::*)(bool)>(&AutoSetupController::$OnEnable$b__12_2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutoSetupController*), "<OnEnable>b__12_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AutoSetupController::$OnEnable$b__12_3
// Il2CppName: <OnEnable>b__12_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutoSetupController::*)(bool)>(&AutoSetupController::$OnEnable$b__12_3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutoSetupController*), "<OnEnable>b__12_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AutoSetupController::$OnEnable$b__12_4
// Il2CppName: <OnEnable>b__12_4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutoSetupController::*)(bool)>(&AutoSetupController::$OnEnable$b__12_4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutoSetupController*), "<OnEnable>b__12_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AutoSetupController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutoSetupController::*)()>(&AutoSetupController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutoSetupController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutoSetupController::*)()>(&AutoSetupController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutoSetupController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AutoSetupData
#include "GlobalNamespace/AutoSetupData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AutoSetupData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutoSetupData::*)()>(&AutoSetupData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutoSetupData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutoSetupData::*)()>(&AutoSetupData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutoSetupData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CountdownController
#include "GlobalNamespace/CountdownController.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: CountdownElementController
#include "GlobalNamespace/CountdownElementController.hpp"
// Including type: ITimeProvider
#include "GlobalNamespace/ITimeProvider.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kGongTime
float GlobalNamespace::CountdownController::_get_kGongTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CountdownController::_get_kGongTime");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "CountdownController", "kGongTime"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kGongTime
void GlobalNamespace::CountdownController::_set_kGongTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CountdownController::_set_kGongTime");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CountdownController", "kGongTime", value));
}
// Autogenerated method: CountdownController.Awake
void GlobalNamespace::CountdownController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CountdownController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CountdownController.Update
void GlobalNamespace::CountdownController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CountdownController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CountdownController.StartCountdown
void GlobalNamespace::CountdownController::StartCountdown(float countdownEndTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CountdownController::StartCountdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartCountdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(countdownEndTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, countdownEndTime);
}
// Autogenerated method: CountdownController.UpdateCountdown
void GlobalNamespace::CountdownController::UpdateCountdown(float countdownEndTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CountdownController::UpdateCountdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCountdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(countdownEndTime)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, countdownEndTime);
}
// Autogenerated method: CountdownController.StopCountdown
void GlobalNamespace::CountdownController::StopCountdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CountdownController::StopCountdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopCountdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CountdownController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CountdownController::*)()>(&CountdownController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CountdownController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CountdownController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CountdownController::*)()>(&CountdownController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CountdownController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CountdownController::StartCountdown
// Il2CppName: StartCountdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CountdownController::*)(float)>(&CountdownController::StartCountdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CountdownController*), "StartCountdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CountdownController::UpdateCountdown
// Il2CppName: UpdateCountdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CountdownController::*)(float)>(&CountdownController::UpdateCountdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CountdownController*), "UpdateCountdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CountdownController::StopCountdown
// Il2CppName: StopCountdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CountdownController::*)()>(&CountdownController::StopCountdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CountdownController*), "StopCountdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CountdownController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CountdownController::*)()>(&CountdownController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CountdownController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CountdownController::*)()>(&CountdownController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CountdownController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CountdownElementController
#include "GlobalNamespace/CountdownElementController.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CountdownElementController.SetTextAndRunAnimation
void GlobalNamespace::CountdownElementController::SetTextAndRunAnimation(::Il2CppString* text) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CountdownElementController::SetTextAndRunAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTextAndRunAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(text)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, text);
}
// Autogenerated method: CountdownElementController.StopAndHide
void GlobalNamespace::CountdownElementController::StopAndHide() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CountdownElementController::StopAndHide");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopAndHide", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CountdownElementController::SetTextAndRunAnimation
// Il2CppName: SetTextAndRunAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CountdownElementController::*)(::Il2CppString*)>(&CountdownElementController::SetTextAndRunAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CountdownElementController*), "SetTextAndRunAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CountdownElementController::StopAndHide
// Il2CppName: StopAndHide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CountdownElementController::*)()>(&CountdownElementController::StopAndHide)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CountdownElementController*), "StopAndHide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CountdownElementController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CountdownElementController::*)()>(&CountdownElementController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CountdownElementController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CountdownElementController::*)()>(&CountdownElementController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CountdownElementController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLobbyCenterScreenLayoutAnimator
#include "GlobalNamespace/MultiplayerLobbyCenterScreenLayoutAnimator.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: Tweening.TweeningManager
#include "Tweening/TweeningManager.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLobbyCenterScreenLayoutAnimator.StartCountdown
void GlobalNamespace::MultiplayerLobbyCenterScreenLayoutAnimator::StartCountdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyCenterScreenLayoutAnimator::StartCountdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartCountdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyCenterScreenLayoutAnimator.StopCountdown
void GlobalNamespace::MultiplayerLobbyCenterScreenLayoutAnimator::StopCountdown(bool instant) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyCenterScreenLayoutAnimator::StopCountdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopCountdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instant)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, instant);
}
// Autogenerated method: MultiplayerLobbyCenterScreenLayoutAnimator.Move
void GlobalNamespace::MultiplayerLobbyCenterScreenLayoutAnimator::Move(UnityEngine::Vector3 from, UnityEngine::Vector3 to, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyCenterScreenLayoutAnimator::Move");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Move", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, from, to, duration);
}
// Autogenerated method: MultiplayerLobbyCenterScreenLayoutAnimator.<Move>b__7_0
void GlobalNamespace::MultiplayerLobbyCenterScreenLayoutAnimator::$Move$b__7_0(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyCenterScreenLayoutAnimator::<Move>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Move>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos);
}
// Writing MetadataGetter for method: MultiplayerLobbyCenterScreenLayoutAnimator::StartCountdown
// Il2CppName: StartCountdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterScreenLayoutAnimator::*)()>(&MultiplayerLobbyCenterScreenLayoutAnimator::StartCountdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterScreenLayoutAnimator*), "StartCountdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyCenterScreenLayoutAnimator::StopCountdown
// Il2CppName: StopCountdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterScreenLayoutAnimator::*)(bool)>(&MultiplayerLobbyCenterScreenLayoutAnimator::StopCountdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterScreenLayoutAnimator*), "StopCountdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyCenterScreenLayoutAnimator::Move
// Il2CppName: Move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterScreenLayoutAnimator::*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&MultiplayerLobbyCenterScreenLayoutAnimator::Move)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterScreenLayoutAnimator*), "Move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyCenterScreenLayoutAnimator::$Move$b__7_0
// Il2CppName: <Move>b__7_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterScreenLayoutAnimator::*)(UnityEngine::Vector3)>(&MultiplayerLobbyCenterScreenLayoutAnimator::$Move$b__7_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterScreenLayoutAnimator*), "<Move>b__7_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyCenterScreenLayoutAnimator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterScreenLayoutAnimator::*)()>(&MultiplayerLobbyCenterScreenLayoutAnimator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterScreenLayoutAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterScreenLayoutAnimator::*)()>(&MultiplayerLobbyCenterScreenLayoutAnimator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterScreenLayoutAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLobbyCenterScreenSystem
#include "GlobalNamespace/MultiplayerLobbyCenterScreenSystem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MultiplayerLobbyCenterScreenSystem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterScreenSystem::*)()>(&MultiplayerLobbyCenterScreenSystem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterScreenSystem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterScreenSystem::*)()>(&MultiplayerLobbyCenterScreenSystem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterScreenSystem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLobbyCenterStageLayoutAnimator
#include "GlobalNamespace/MultiplayerLobbyCenterStageLayoutAnimator.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: Tweening.TweeningManager
#include "Tweening/TweeningManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLobbyCenterStageLayoutAnimator.StartCountdown
void GlobalNamespace::MultiplayerLobbyCenterStageLayoutAnimator::StartCountdown() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyCenterStageLayoutAnimator::StartCountdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartCountdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyCenterStageLayoutAnimator.StopCountdown
void GlobalNamespace::MultiplayerLobbyCenterStageLayoutAnimator::StopCountdown(bool instant) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyCenterStageLayoutAnimator::StopCountdown");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopCountdown", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instant)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, instant);
}
// Autogenerated method: MultiplayerLobbyCenterStageLayoutAnimator.Move
void GlobalNamespace::MultiplayerLobbyCenterStageLayoutAnimator::Move(UnityEngine::Vector3 from, UnityEngine::Vector3 to, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyCenterStageLayoutAnimator::Move");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Move", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, from, to, duration);
}
// Autogenerated method: MultiplayerLobbyCenterStageLayoutAnimator.<Move>b__7_0
void GlobalNamespace::MultiplayerLobbyCenterStageLayoutAnimator::$Move$b__7_0(UnityEngine::Vector3 pos) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyCenterStageLayoutAnimator::<Move>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Move>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos);
}
// Writing MetadataGetter for method: MultiplayerLobbyCenterStageLayoutAnimator::StartCountdown
// Il2CppName: StartCountdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterStageLayoutAnimator::*)()>(&MultiplayerLobbyCenterStageLayoutAnimator::StartCountdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterStageLayoutAnimator*), "StartCountdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyCenterStageLayoutAnimator::StopCountdown
// Il2CppName: StopCountdown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterStageLayoutAnimator::*)(bool)>(&MultiplayerLobbyCenterStageLayoutAnimator::StopCountdown)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterStageLayoutAnimator*), "StopCountdown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyCenterStageLayoutAnimator::Move
// Il2CppName: Move
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterStageLayoutAnimator::*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&MultiplayerLobbyCenterStageLayoutAnimator::Move)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterStageLayoutAnimator*), "Move", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyCenterStageLayoutAnimator::$Move$b__7_0
// Il2CppName: <Move>b__7_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterStageLayoutAnimator::*)(UnityEngine::Vector3)>(&MultiplayerLobbyCenterStageLayoutAnimator::$Move$b__7_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterStageLayoutAnimator*), "<Move>b__7_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyCenterStageLayoutAnimator::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterStageLayoutAnimator::*)()>(&MultiplayerLobbyCenterStageLayoutAnimator::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterStageLayoutAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterStageLayoutAnimator::*)()>(&MultiplayerLobbyCenterStageLayoutAnimator::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterStageLayoutAnimator*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLobbyCenterStageManager
#include "GlobalNamespace/MultiplayerLobbyCenterStageManager.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: CenterStageScreenController
#include "GlobalNamespace/CenterStageScreenController.hpp"
// Including type: ILobbyStateDataModel
#include "GlobalNamespace/ILobbyStateDataModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLobbyCenterStageManager.Init
void GlobalNamespace::MultiplayerLobbyCenterStageManager::Init(float innerCircleRadius, float minOuterCircleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyCenterStageManager::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(innerCircleRadius), ::il2cpp_utils::ExtractType(minOuterCircleRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, innerCircleRadius, minOuterCircleRadius);
}
// Autogenerated method: MultiplayerLobbyCenterStageManager.ActivateCenterStageManager
void GlobalNamespace::MultiplayerLobbyCenterStageManager::ActivateCenterStageManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyCenterStageManager::ActivateCenterStageManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateCenterStageManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyCenterStageManager.DeactivateCenterStageManager
void GlobalNamespace::MultiplayerLobbyCenterStageManager::DeactivateCenterStageManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyCenterStageManager::DeactivateCenterStageManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeactivateCenterStageManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyCenterStageManager.RecalculateCenterPosition
void GlobalNamespace::MultiplayerLobbyCenterStageManager::RecalculateCenterPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyCenterStageManager::RecalculateCenterPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecalculateCenterPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerLobbyCenterStageManager::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterStageManager::*)(float, float)>(&MultiplayerLobbyCenterStageManager::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterStageManager*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyCenterStageManager::ActivateCenterStageManager
// Il2CppName: ActivateCenterStageManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterStageManager::*)()>(&MultiplayerLobbyCenterStageManager::ActivateCenterStageManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterStageManager*), "ActivateCenterStageManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyCenterStageManager::DeactivateCenterStageManager
// Il2CppName: DeactivateCenterStageManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterStageManager::*)()>(&MultiplayerLobbyCenterStageManager::DeactivateCenterStageManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterStageManager*), "DeactivateCenterStageManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyCenterStageManager::RecalculateCenterPosition
// Il2CppName: RecalculateCenterPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterStageManager::*)()>(&MultiplayerLobbyCenterStageManager::RecalculateCenterPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterStageManager*), "RecalculateCenterPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyCenterStageManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterStageManager::*)()>(&MultiplayerLobbyCenterStageManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterStageManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyCenterStageManager::*)()>(&MultiplayerLobbyCenterStageManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyCenterStageManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CreateServerFormController
#include "GlobalNamespace/CreateServerFormController.hpp"
// Including type: FormattedFloatListSettingsController
#include "GlobalNamespace/FormattedFloatListSettingsController.hpp"
// Including type: CreateServerFormData
#include "GlobalNamespace/CreateServerFormData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMinPlayers
int GlobalNamespace::CreateServerFormController::_get_kMinPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreateServerFormController::_get_kMinPlayers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CreateServerFormController", "kMinPlayers"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMinPlayers
void GlobalNamespace::CreateServerFormController::_set_kMinPlayers(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreateServerFormController::_set_kMinPlayers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CreateServerFormController", "kMinPlayers", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxPlayers
int GlobalNamespace::CreateServerFormController::_get_kMaxPlayers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreateServerFormController::_get_kMaxPlayers");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "CreateServerFormController", "kMaxPlayers"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxPlayers
void GlobalNamespace::CreateServerFormController::_set_kMaxPlayers(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreateServerFormController::_set_kMaxPlayers");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "CreateServerFormController", "kMaxPlayers", value));
}
// Autogenerated method: CreateServerFormController.get_formData
GlobalNamespace::CreateServerFormData GlobalNamespace::CreateServerFormController::get_formData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreateServerFormController::get_formData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_formData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::CreateServerFormData, false>(this, ___internal__method);
}
// Autogenerated method: CreateServerFormController.Setup
void GlobalNamespace::CreateServerFormController::Setup(int selectedNumberOfPlayers, bool netDiscoverable) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CreateServerFormController::Setup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Setup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(selectedNumberOfPlayers), ::il2cpp_utils::ExtractType(netDiscoverable)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, selectedNumberOfPlayers, netDiscoverable);
}
// Writing MetadataGetter for method: CreateServerFormController::get_formData
// Il2CppName: get_formData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::CreateServerFormData (CreateServerFormController::*)()>(&CreateServerFormController::get_formData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateServerFormController*), "get_formData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CreateServerFormController::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateServerFormController::*)(int, bool)>(&CreateServerFormController::Setup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateServerFormController*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: CreateServerFormController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateServerFormController::*)()>(&CreateServerFormController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateServerFormController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateServerFormController::*)()>(&CreateServerFormController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateServerFormController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BeatmapCharacteristicsDropdown
#include "GlobalNamespace/BeatmapCharacteristicsDropdown.hpp"
// Including type: BeatmapCharacteristicsDropdown/<>c
#include "GlobalNamespace/BeatmapCharacteristicsDropdown_--c.hpp"
// Including type: HMUI.SimpleTextDropdown
#include "HMUI/SimpleTextDropdown.hpp"
// Including type: BeatmapCharacteristicCollectionSO
#include "GlobalNamespace/BeatmapCharacteristicCollectionSO.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
// Including type: HMUI.DropdownWithTableView
#include "HMUI/DropdownWithTableView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapCharacteristicsDropdown.add_didSelectCellWithIdxEvent
void GlobalNamespace::BeatmapCharacteristicsDropdown::add_didSelectCellWithIdxEvent(System::Action_1<GlobalNamespace::BeatmapCharacteristicSO*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicsDropdown::add_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapCharacteristicsDropdown.remove_didSelectCellWithIdxEvent
void GlobalNamespace::BeatmapCharacteristicsDropdown::remove_didSelectCellWithIdxEvent(System::Action_1<GlobalNamespace::BeatmapCharacteristicSO*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicsDropdown::remove_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapCharacteristicsDropdown.Start
void GlobalNamespace::BeatmapCharacteristicsDropdown::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicsDropdown::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapCharacteristicsDropdown.OnDestroy
void GlobalNamespace::BeatmapCharacteristicsDropdown::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicsDropdown::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapCharacteristicsDropdown.GetSelectedBeatmapCharacteristic
GlobalNamespace::BeatmapCharacteristicSO* GlobalNamespace::BeatmapCharacteristicsDropdown::GetSelectedBeatmapCharacteristic() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicsDropdown::GetSelectedBeatmapCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSelectedBeatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapCharacteristicSO*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapCharacteristicsDropdown.SelectCellWithBeatmapCharacteristic
void GlobalNamespace::BeatmapCharacteristicsDropdown::SelectCellWithBeatmapCharacteristic(GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicsDropdown::SelectCellWithBeatmapCharacteristic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectCellWithBeatmapCharacteristic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapCharacteristic)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapCharacteristic);
}
// Autogenerated method: BeatmapCharacteristicsDropdown.HandleSimpleTextDropdownDidSelectCellWithIdx
void GlobalNamespace::BeatmapCharacteristicsDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx(HMUI::DropdownWithTableView* dropdownWithTableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicsDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSimpleTextDropdownDidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dropdownWithTableView), ::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dropdownWithTableView, idx);
}
// Writing MetadataGetter for method: BeatmapCharacteristicsDropdown::add_didSelectCellWithIdxEvent
// Il2CppName: add_didSelectCellWithIdxEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicsDropdown::*)(System::Action_1<GlobalNamespace::BeatmapCharacteristicSO*>*)>(&BeatmapCharacteristicsDropdown::add_didSelectCellWithIdxEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicsDropdown*), "add_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::BeatmapCharacteristicSO*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCharacteristicsDropdown::remove_didSelectCellWithIdxEvent
// Il2CppName: remove_didSelectCellWithIdxEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicsDropdown::*)(System::Action_1<GlobalNamespace::BeatmapCharacteristicSO*>*)>(&BeatmapCharacteristicsDropdown::remove_didSelectCellWithIdxEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicsDropdown*), "remove_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::BeatmapCharacteristicSO*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCharacteristicsDropdown::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicsDropdown::*)()>(&BeatmapCharacteristicsDropdown::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicsDropdown*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapCharacteristicsDropdown::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicsDropdown::*)()>(&BeatmapCharacteristicsDropdown::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicsDropdown*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapCharacteristicsDropdown::GetSelectedBeatmapCharacteristic
// Il2CppName: GetSelectedBeatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapCharacteristicSO* (BeatmapCharacteristicsDropdown::*)()>(&BeatmapCharacteristicsDropdown::GetSelectedBeatmapCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicsDropdown*), "GetSelectedBeatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapCharacteristicsDropdown::SelectCellWithBeatmapCharacteristic
// Il2CppName: SelectCellWithBeatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicsDropdown::*)(GlobalNamespace::BeatmapCharacteristicSO*)>(&BeatmapCharacteristicsDropdown::SelectCellWithBeatmapCharacteristic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicsDropdown*), "SelectCellWithBeatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCharacteristicsDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx
// Il2CppName: HandleSimpleTextDropdownDidSelectCellWithIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicsDropdown::*)(HMUI::DropdownWithTableView*, int)>(&BeatmapCharacteristicsDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicsDropdown*), "HandleSimpleTextDropdownDidSelectCellWithIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::DropdownWithTableView*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BeatmapCharacteristicsDropdown::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicsDropdown::*)()>(&BeatmapCharacteristicsDropdown::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicsDropdown*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicsDropdown::*)()>(&BeatmapCharacteristicsDropdown::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicsDropdown*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapCharacteristicsDropdown/<>c
#include "GlobalNamespace/BeatmapCharacteristicsDropdown_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: BeatmapCharacteristicSO
#include "GlobalNamespace/BeatmapCharacteristicSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly BeatmapCharacteristicsDropdown/<>c <>9
GlobalNamespace::BeatmapCharacteristicsDropdown::$$c* GlobalNamespace::BeatmapCharacteristicsDropdown::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicsDropdown::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapCharacteristicsDropdown::$$c*>("", "BeatmapCharacteristicsDropdown/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly BeatmapCharacteristicsDropdown/<>c <>9
void GlobalNamespace::BeatmapCharacteristicsDropdown::$$c::_set_$$9(GlobalNamespace::BeatmapCharacteristicsDropdown::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicsDropdown::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BeatmapCharacteristicsDropdown/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<BeatmapCharacteristicSO,System.String> <>9__5_0
System::Func_2<GlobalNamespace::BeatmapCharacteristicSO*, ::Il2CppString*>* GlobalNamespace::BeatmapCharacteristicsDropdown::$$c::_get_$$9__5_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicsDropdown::$$c::_get_$$9__5_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::BeatmapCharacteristicSO*, ::Il2CppString*>*>("", "BeatmapCharacteristicsDropdown/<>c", "<>9__5_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<BeatmapCharacteristicSO,System.String> <>9__5_0
void GlobalNamespace::BeatmapCharacteristicsDropdown::$$c::_set_$$9__5_0(System::Func_2<GlobalNamespace::BeatmapCharacteristicSO*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicsDropdown::$$c::_set_$$9__5_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BeatmapCharacteristicsDropdown/<>c", "<>9__5_0", value)));
}
// Autogenerated method: BeatmapCharacteristicsDropdown/<>c..cctor
void GlobalNamespace::BeatmapCharacteristicsDropdown::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicsDropdown::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapCharacteristicsDropdown/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: BeatmapCharacteristicsDropdown/<>c.<Start>b__5_0
::Il2CppString* GlobalNamespace::BeatmapCharacteristicsDropdown::$$c::$Start$b__5_0(GlobalNamespace::BeatmapCharacteristicSO* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapCharacteristicsDropdown::$$c::<Start>b__5_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__5_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: BeatmapCharacteristicsDropdown::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BeatmapCharacteristicsDropdown::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicsDropdown::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapCharacteristicsDropdown::$$c::$Start$b__5_0
// Il2CppName: <Start>b__5_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (BeatmapCharacteristicsDropdown::$$c::*)(GlobalNamespace::BeatmapCharacteristicSO*)>(&BeatmapCharacteristicsDropdown::$$c::$Start$b__5_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicsDropdown::$$c*), "<Start>b__5_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapCharacteristicSO*>()});
  }
};
// Writing MetadataGetter for method: BeatmapCharacteristicsDropdown::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicsDropdown::$$c::*)()>(&BeatmapCharacteristicsDropdown::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicsDropdown::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapCharacteristicsDropdown::$$c::*)()>(&BeatmapCharacteristicsDropdown::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapCharacteristicsDropdown::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapDifficultyDropdown
#include "GlobalNamespace/BeatmapDifficultyDropdown.hpp"
// Including type: BeatmapDifficultyDropdown/<>c
#include "GlobalNamespace/BeatmapDifficultyDropdown_--c.hpp"
// Including type: HMUI.SimpleTextDropdown
#include "HMUI/SimpleTextDropdown.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
// Including type: HMUI.DropdownWithTableView
#include "HMUI/DropdownWithTableView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BeatmapDifficultyDropdown.add_didSelectCellWithIdxEvent
void GlobalNamespace::BeatmapDifficultyDropdown::add_didSelectCellWithIdxEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::add_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapDifficultyDropdown.remove_didSelectCellWithIdxEvent
void GlobalNamespace::BeatmapDifficultyDropdown::remove_didSelectCellWithIdxEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::remove_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapDifficultyDropdown.get_beatmapDifficultyData
System::Collections::Generic::IReadOnlyList_1<System::Tuple_2<GlobalNamespace::BeatmapDifficultyMask, ::Il2CppString*>*>* GlobalNamespace::BeatmapDifficultyDropdown::get_beatmapDifficultyData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::get_beatmapDifficultyData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_beatmapDifficultyData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<System::Tuple_2<GlobalNamespace::BeatmapDifficultyMask, ::Il2CppString*>*>*, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapDifficultyDropdown.get_includeAllDifficulties
bool GlobalNamespace::BeatmapDifficultyDropdown::get_includeAllDifficulties() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::get_includeAllDifficulties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_includeAllDifficulties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapDifficultyDropdown.set_includeAllDifficulties
void GlobalNamespace::BeatmapDifficultyDropdown::set_includeAllDifficulties(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::set_includeAllDifficulties");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_includeAllDifficulties", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BeatmapDifficultyDropdown.Start
void GlobalNamespace::BeatmapDifficultyDropdown::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapDifficultyDropdown.OnDestroy
void GlobalNamespace::BeatmapDifficultyDropdown::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapDifficultyDropdown.GetSelectedBeatmapDifficultyMask
GlobalNamespace::BeatmapDifficultyMask GlobalNamespace::BeatmapDifficultyDropdown::GetSelectedBeatmapDifficultyMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::GetSelectedBeatmapDifficultyMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSelectedBeatmapDifficultyMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::BeatmapDifficultyMask, false>(this, ___internal__method);
}
// Autogenerated method: BeatmapDifficultyDropdown.SelectCellWithBeatmapDifficultyMask
void GlobalNamespace::BeatmapDifficultyDropdown::SelectCellWithBeatmapDifficultyMask(GlobalNamespace::BeatmapDifficultyMask beatmapDifficultyMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::SelectCellWithBeatmapDifficultyMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectCellWithBeatmapDifficultyMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapDifficultyMask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, beatmapDifficultyMask);
}
// Autogenerated method: BeatmapDifficultyDropdown.GetIdxForBeatmapDifficultyMask
int GlobalNamespace::BeatmapDifficultyDropdown::GetIdxForBeatmapDifficultyMask(GlobalNamespace::BeatmapDifficultyMask beatmapDifficultyMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::GetIdxForBeatmapDifficultyMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIdxForBeatmapDifficultyMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(beatmapDifficultyMask)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, beatmapDifficultyMask);
}
// Autogenerated method: BeatmapDifficultyDropdown.HandleSimpleTextDropdownDidSelectCellWithIdx
void GlobalNamespace::BeatmapDifficultyDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx(HMUI::DropdownWithTableView* dropdownWithTableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSimpleTextDropdownDidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dropdownWithTableView), ::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dropdownWithTableView, idx);
}
// Writing MetadataGetter for method: BeatmapDifficultyDropdown::add_didSelectCellWithIdxEvent
// Il2CppName: add_didSelectCellWithIdxEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapDifficultyDropdown::*)(System::Action_1<int>*)>(&BeatmapDifficultyDropdown::add_didSelectCellWithIdxEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown*), "add_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyDropdown::remove_didSelectCellWithIdxEvent
// Il2CppName: remove_didSelectCellWithIdxEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapDifficultyDropdown::*)(System::Action_1<int>*)>(&BeatmapDifficultyDropdown::remove_didSelectCellWithIdxEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown*), "remove_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyDropdown::get_beatmapDifficultyData
// Il2CppName: get_beatmapDifficultyData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IReadOnlyList_1<System::Tuple_2<GlobalNamespace::BeatmapDifficultyMask, ::Il2CppString*>*>* (BeatmapDifficultyDropdown::*)()>(&BeatmapDifficultyDropdown::get_beatmapDifficultyData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown*), "get_beatmapDifficultyData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyDropdown::get_includeAllDifficulties
// Il2CppName: get_includeAllDifficulties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BeatmapDifficultyDropdown::*)()>(&BeatmapDifficultyDropdown::get_includeAllDifficulties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown*), "get_includeAllDifficulties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyDropdown::set_includeAllDifficulties
// Il2CppName: set_includeAllDifficulties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapDifficultyDropdown::*)(bool)>(&BeatmapDifficultyDropdown::set_includeAllDifficulties)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown*), "set_includeAllDifficulties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyDropdown::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapDifficultyDropdown::*)()>(&BeatmapDifficultyDropdown::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyDropdown::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapDifficultyDropdown::*)()>(&BeatmapDifficultyDropdown::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyDropdown::GetSelectedBeatmapDifficultyMask
// Il2CppName: GetSelectedBeatmapDifficultyMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficultyMask (BeatmapDifficultyDropdown::*)()>(&BeatmapDifficultyDropdown::GetSelectedBeatmapDifficultyMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown*), "GetSelectedBeatmapDifficultyMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyDropdown::SelectCellWithBeatmapDifficultyMask
// Il2CppName: SelectCellWithBeatmapDifficultyMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapDifficultyDropdown::*)(GlobalNamespace::BeatmapDifficultyMask)>(&BeatmapDifficultyDropdown::SelectCellWithBeatmapDifficultyMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown*), "SelectCellWithBeatmapDifficultyMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>()});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyDropdown::GetIdxForBeatmapDifficultyMask
// Il2CppName: GetIdxForBeatmapDifficultyMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BeatmapDifficultyDropdown::*)(GlobalNamespace::BeatmapDifficultyMask)>(&BeatmapDifficultyDropdown::GetIdxForBeatmapDifficultyMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown*), "GetIdxForBeatmapDifficultyMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BeatmapDifficultyMask>()});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx
// Il2CppName: HandleSimpleTextDropdownDidSelectCellWithIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapDifficultyDropdown::*)(HMUI::DropdownWithTableView*, int)>(&BeatmapDifficultyDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown*), "HandleSimpleTextDropdownDidSelectCellWithIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::DropdownWithTableView*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyDropdown::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapDifficultyDropdown::*)()>(&BeatmapDifficultyDropdown::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapDifficultyDropdown::*)()>(&BeatmapDifficultyDropdown::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapDifficultyDropdown/<>c
#include "GlobalNamespace/BeatmapDifficultyDropdown_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly BeatmapDifficultyDropdown/<>c <>9
GlobalNamespace::BeatmapDifficultyDropdown::$$c* GlobalNamespace::BeatmapDifficultyDropdown::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::BeatmapDifficultyDropdown::$$c*>("", "BeatmapDifficultyDropdown/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly BeatmapDifficultyDropdown/<>c <>9
void GlobalNamespace::BeatmapDifficultyDropdown::$$c::_set_$$9(GlobalNamespace::BeatmapDifficultyDropdown::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BeatmapDifficultyDropdown/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Tuple`2<BeatmapDifficultyMask,System.String>,System.String> <>9__11_0
System::Func_2<System::Tuple_2<GlobalNamespace::BeatmapDifficultyMask, ::Il2CppString*>*, ::Il2CppString*>* GlobalNamespace::BeatmapDifficultyDropdown::$$c::_get_$$9__11_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::$$c::_get_$$9__11_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Tuple_2<GlobalNamespace::BeatmapDifficultyMask, ::Il2CppString*>*, ::Il2CppString*>*>("", "BeatmapDifficultyDropdown/<>c", "<>9__11_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Tuple`2<BeatmapDifficultyMask,System.String>,System.String> <>9__11_0
void GlobalNamespace::BeatmapDifficultyDropdown::$$c::_set_$$9__11_0(System::Func_2<System::Tuple_2<GlobalNamespace::BeatmapDifficultyMask, ::Il2CppString*>*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::$$c::_set_$$9__11_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "BeatmapDifficultyDropdown/<>c", "<>9__11_0", value)));
}
// Autogenerated method: BeatmapDifficultyDropdown/<>c..cctor
void GlobalNamespace::BeatmapDifficultyDropdown::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "BeatmapDifficultyDropdown/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: BeatmapDifficultyDropdown/<>c.<Start>b__11_0
::Il2CppString* GlobalNamespace::BeatmapDifficultyDropdown::$$c::$Start$b__11_0(System::Tuple_2<GlobalNamespace::BeatmapDifficultyMask, ::Il2CppString*>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDifficultyDropdown::$$c::<Start>b__11_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__11_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: BeatmapDifficultyDropdown::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&BeatmapDifficultyDropdown::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyDropdown::$$c::$Start$b__11_0
// Il2CppName: <Start>b__11_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (BeatmapDifficultyDropdown::$$c::*)(System::Tuple_2<GlobalNamespace::BeatmapDifficultyMask, ::Il2CppString*>*)>(&BeatmapDifficultyDropdown::$$c::$Start$b__11_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown::$$c*), "<Start>b__11_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Tuple_2<GlobalNamespace::BeatmapDifficultyMask, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: BeatmapDifficultyDropdown::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapDifficultyDropdown::$$c::*)()>(&BeatmapDifficultyDropdown::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BeatmapDifficultyDropdown::$$c::*)()>(&BeatmapDifficultyDropdown::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapDifficultyDropdown::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: GameServersFilter
#include "GlobalNamespace/GameServersFilter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GameServersFilter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServersFilter::*)()>(&GameServersFilter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServersFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameServersFilter::*)()>(&GameServersFilter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameServersFilter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameplayModifiersDropdown
#include "GlobalNamespace/GameplayModifiersDropdown.hpp"
// Including type: GameplayModifiersDropdown/<>c
#include "GlobalNamespace/GameplayModifiersDropdown_--c.hpp"
// Including type: HMUI.SimpleTextDropdown
#include "HMUI/SimpleTextDropdown.hpp"
// Including type: GameplayModifiersModelSO
#include "GlobalNamespace/GameplayModifiersModelSO.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
// Including type: HMUI.DropdownWithTableView
#include "HMUI/DropdownWithTableView.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: GameplayModifiersDropdown.add_didSelectCellWithIdxEvent
void GlobalNamespace::GameplayModifiersDropdown::add_didSelectCellWithIdxEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::add_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayModifiersDropdown.remove_didSelectCellWithIdxEvent
void GlobalNamespace::GameplayModifiersDropdown::remove_didSelectCellWithIdxEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::remove_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: GameplayModifiersDropdown.get_gameplayModifiersData
System::Collections::Generic::IReadOnlyList_1<System::Tuple_2<GlobalNamespace::GameplayModifierMask, ::Il2CppString*>*>* GlobalNamespace::GameplayModifiersDropdown::get_gameplayModifiersData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::get_gameplayModifiersData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameplayModifiersData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IReadOnlyList_1<System::Tuple_2<GlobalNamespace::GameplayModifierMask, ::Il2CppString*>*>*, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiersDropdown.Start
void GlobalNamespace::GameplayModifiersDropdown::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiersDropdown.OnDestroy
void GlobalNamespace::GameplayModifiersDropdown::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiersDropdown.GetSelectedGameplayModifierMask
GlobalNamespace::GameplayModifierMask GlobalNamespace::GameplayModifiersDropdown::GetSelectedGameplayModifierMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::GetSelectedGameplayModifierMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSelectedGameplayModifierMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::GameplayModifierMask, false>(this, ___internal__method);
}
// Autogenerated method: GameplayModifiersDropdown.SelectCellWithGameplayModifierMask
void GlobalNamespace::GameplayModifiersDropdown::SelectCellWithGameplayModifierMask(GlobalNamespace::GameplayModifierMask gameplayModifierMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::SelectCellWithGameplayModifierMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectCellWithGameplayModifierMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameplayModifierMask)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, gameplayModifierMask);
}
// Autogenerated method: GameplayModifiersDropdown.GetIdxForGameplayModifierMask
int GlobalNamespace::GameplayModifiersDropdown::GetIdxForGameplayModifierMask(GlobalNamespace::GameplayModifierMask gameplayModifierMask) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::GetIdxForGameplayModifierMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIdxForGameplayModifierMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(gameplayModifierMask)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, gameplayModifierMask);
}
// Autogenerated method: GameplayModifiersDropdown.HandleSimpleTextDropdownDidSelectCellWithIdx
void GlobalNamespace::GameplayModifiersDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx(HMUI::DropdownWithTableView* dropdownWithTableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSimpleTextDropdownDidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dropdownWithTableView), ::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dropdownWithTableView, idx);
}
// Autogenerated method: GameplayModifiersDropdown.<get_gameplayModifiersData>b__7_0
System::Tuple_2<GlobalNamespace::GameplayModifierMask, ::Il2CppString*>* GlobalNamespace::GameplayModifiersDropdown::$get_gameplayModifiersData$b__7_0(GlobalNamespace::GameplayModifierMask value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::<get_gameplayModifiersData>b__7_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_gameplayModifiersData>b__7_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<System::Tuple_2<GlobalNamespace::GameplayModifierMask, ::Il2CppString*>*, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: GameplayModifiersDropdown::add_didSelectCellWithIdxEvent
// Il2CppName: add_didSelectCellWithIdxEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifiersDropdown::*)(System::Action_1<int>*)>(&GameplayModifiersDropdown::add_didSelectCellWithIdxEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown*), "add_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: GameplayModifiersDropdown::remove_didSelectCellWithIdxEvent
// Il2CppName: remove_didSelectCellWithIdxEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifiersDropdown::*)(System::Action_1<int>*)>(&GameplayModifiersDropdown::remove_didSelectCellWithIdxEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown*), "remove_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: GameplayModifiersDropdown::get_gameplayModifiersData
// Il2CppName: get_gameplayModifiersData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IReadOnlyList_1<System::Tuple_2<GlobalNamespace::GameplayModifierMask, ::Il2CppString*>*>* (GameplayModifiersDropdown::*)()>(&GameplayModifiersDropdown::get_gameplayModifiersData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown*), "get_gameplayModifiersData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayModifiersDropdown::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifiersDropdown::*)()>(&GameplayModifiersDropdown::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayModifiersDropdown::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifiersDropdown::*)()>(&GameplayModifiersDropdown::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayModifiersDropdown::GetSelectedGameplayModifierMask
// Il2CppName: GetSelectedGameplayModifierMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayModifierMask (GameplayModifiersDropdown::*)()>(&GameplayModifiersDropdown::GetSelectedGameplayModifierMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown*), "GetSelectedGameplayModifierMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayModifiersDropdown::SelectCellWithGameplayModifierMask
// Il2CppName: SelectCellWithGameplayModifierMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifiersDropdown::*)(GlobalNamespace::GameplayModifierMask)>(&GameplayModifiersDropdown::SelectCellWithGameplayModifierMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown*), "SelectCellWithGameplayModifierMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifierMask>()});
  }
};
// Writing MetadataGetter for method: GameplayModifiersDropdown::GetIdxForGameplayModifierMask
// Il2CppName: GetIdxForGameplayModifierMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GameplayModifiersDropdown::*)(GlobalNamespace::GameplayModifierMask)>(&GameplayModifiersDropdown::GetIdxForGameplayModifierMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown*), "GetIdxForGameplayModifierMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifierMask>()});
  }
};
// Writing MetadataGetter for method: GameplayModifiersDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx
// Il2CppName: HandleSimpleTextDropdownDidSelectCellWithIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifiersDropdown::*)(HMUI::DropdownWithTableView*, int)>(&GameplayModifiersDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown*), "HandleSimpleTextDropdownDidSelectCellWithIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::DropdownWithTableView*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GameplayModifiersDropdown::$get_gameplayModifiersData$b__7_0
// Il2CppName: <get_gameplayModifiersData>b__7_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Tuple_2<GlobalNamespace::GameplayModifierMask, ::Il2CppString*>* (GameplayModifiersDropdown::*)(GlobalNamespace::GameplayModifierMask)>(&GameplayModifiersDropdown::$get_gameplayModifiersData$b__7_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown*), "<get_gameplayModifiersData>b__7_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayModifierMask>()});
  }
};
// Writing MetadataGetter for method: GameplayModifiersDropdown::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifiersDropdown::*)()>(&GameplayModifiersDropdown::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifiersDropdown::*)()>(&GameplayModifiersDropdown::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameplayModifiersDropdown/<>c
#include "GlobalNamespace/GameplayModifiersDropdown_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: System.Tuple`2
#include "System/Tuple_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly GameplayModifiersDropdown/<>c <>9
GlobalNamespace::GameplayModifiersDropdown::$$c* GlobalNamespace::GameplayModifiersDropdown::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::GameplayModifiersDropdown::$$c*>("", "GameplayModifiersDropdown/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly GameplayModifiersDropdown/<>c <>9
void GlobalNamespace::GameplayModifiersDropdown::$$c::_set_$$9(GlobalNamespace::GameplayModifiersDropdown::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "GameplayModifiersDropdown/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<System.Tuple`2<GameplayModifierMask,System.String>,System.String> <>9__8_0
System::Func_2<System::Tuple_2<GlobalNamespace::GameplayModifierMask, ::Il2CppString*>*, ::Il2CppString*>* GlobalNamespace::GameplayModifiersDropdown::$$c::_get_$$9__8_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::$$c::_get_$$9__8_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Tuple_2<GlobalNamespace::GameplayModifierMask, ::Il2CppString*>*, ::Il2CppString*>*>("", "GameplayModifiersDropdown/<>c", "<>9__8_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<System.Tuple`2<GameplayModifierMask,System.String>,System.String> <>9__8_0
void GlobalNamespace::GameplayModifiersDropdown::$$c::_set_$$9__8_0(System::Func_2<System::Tuple_2<GlobalNamespace::GameplayModifierMask, ::Il2CppString*>*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::$$c::_set_$$9__8_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "GameplayModifiersDropdown/<>c", "<>9__8_0", value)));
}
// Autogenerated method: GameplayModifiersDropdown/<>c..cctor
void GlobalNamespace::GameplayModifiersDropdown::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "GameplayModifiersDropdown/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: GameplayModifiersDropdown/<>c.<Start>b__8_0
::Il2CppString* GlobalNamespace::GameplayModifiersDropdown::$$c::$Start$b__8_0(System::Tuple_2<GlobalNamespace::GameplayModifierMask, ::Il2CppString*>* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiersDropdown::$$c::<Start>b__8_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Start>b__8_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: GameplayModifiersDropdown::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GameplayModifiersDropdown::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameplayModifiersDropdown::$$c::$Start$b__8_0
// Il2CppName: <Start>b__8_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GameplayModifiersDropdown::$$c::*)(System::Tuple_2<GlobalNamespace::GameplayModifierMask, ::Il2CppString*>*)>(&GameplayModifiersDropdown::$$c::$Start$b__8_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown::$$c*), "<Start>b__8_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Tuple_2<GlobalNamespace::GameplayModifierMask, ::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: GameplayModifiersDropdown::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifiersDropdown::$$c::*)()>(&GameplayModifiersDropdown::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameplayModifiersDropdown::$$c::*)()>(&GameplayModifiersDropdown::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameplayModifiersDropdown::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: QuickPlaySongPacksDropdown
#include "GlobalNamespace/QuickPlaySongPacksDropdown.hpp"
// Including type: QuickPlaySongPacksDropdown/SongPackMaskItem
#include "GlobalNamespace/QuickPlaySongPacksDropdown_SongPackMaskItem.hpp"
// Including type: QuickPlaySongPacksDropdown/<>c__DisplayClass13_0
#include "GlobalNamespace/QuickPlaySongPacksDropdown_--c__DisplayClass13_0.hpp"
// Including type: QuickPlaySongPacksDropdown/<>c
#include "GlobalNamespace/QuickPlaySongPacksDropdown_--c.hpp"
// Including type: HMUI.SimpleTextDropdown
#include "HMUI/SimpleTextDropdown.hpp"
// Including type: SongPackMaskModelSO
#include "GlobalNamespace/SongPackMaskModelSO.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: HMUI.DropdownWithTableView
#include "HMUI/DropdownWithTableView.hpp"
// Including type: MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride/PredefinedPack
#include "GlobalNamespace/MasterServerQuickPlaySetupData_QuickPlaySongPacksOverride_PredefinedPack.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: QuickPlaySongPacksDropdown.add_didSelectCellWithIdxEvent
void GlobalNamespace::QuickPlaySongPacksDropdown::add_didSelectCellWithIdxEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::add_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: QuickPlaySongPacksDropdown.remove_didSelectCellWithIdxEvent
void GlobalNamespace::QuickPlaySongPacksDropdown::remove_didSelectCellWithIdxEvent(System::Action_1<int>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::remove_didSelectCellWithIdxEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: QuickPlaySongPacksDropdown.Start
void GlobalNamespace::QuickPlaySongPacksDropdown::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlaySongPacksDropdown.OnDestroy
void GlobalNamespace::QuickPlaySongPacksDropdown::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlaySongPacksDropdown.SetOverrideSongPacks
void GlobalNamespace::QuickPlaySongPacksDropdown::SetOverrideSongPacks(GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride* quickPlaySongPacksOverride) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::SetOverrideSongPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetOverrideSongPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(quickPlaySongPacksOverride)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, quickPlaySongPacksOverride);
}
// Autogenerated method: QuickPlaySongPacksDropdown.GetSelectedSerializedName
::Il2CppString* GlobalNamespace::QuickPlaySongPacksDropdown::GetSelectedSerializedName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::GetSelectedSerializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSelectedSerializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlaySongPacksDropdown.SelectCellWithSerializedName
void GlobalNamespace::QuickPlaySongPacksDropdown::SelectCellWithSerializedName(::Il2CppString* serializedName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::SelectCellWithSerializedName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SelectCellWithSerializedName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializedName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, serializedName);
}
// Autogenerated method: QuickPlaySongPacksDropdown.HandleSimpleTextDropdownDidSelectCellWithIdx
void GlobalNamespace::QuickPlaySongPacksDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx(HMUI::DropdownWithTableView* dropdownWithTableView, int idx) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSimpleTextDropdownDidSelectCellWithIdx", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dropdownWithTableView), ::il2cpp_utils::ExtractType(idx)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, dropdownWithTableView, idx);
}
// Autogenerated method: QuickPlaySongPacksDropdown.LazyInit
void GlobalNamespace::QuickPlaySongPacksDropdown::LazyInit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::LazyInit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LazyInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuickPlaySongPacksDropdown.<LazyInit>b__15_0
GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem* GlobalNamespace::QuickPlaySongPacksDropdown::$LazyInit$b__15_0(::Il2CppString* serializedName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::<LazyInit>b__15_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LazyInit>b__15_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(serializedName)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem*, false>(this, ___internal__method, serializedName);
}
// Autogenerated method: QuickPlaySongPacksDropdown.<LazyInit>b__15_1
GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem* GlobalNamespace::QuickPlaySongPacksDropdown::$LazyInit$b__15_1(GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::PredefinedPack* pack) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::<LazyInit>b__15_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LazyInit>b__15_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pack)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem*, false>(this, ___internal__method, pack);
}
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::add_didSelectCellWithIdxEvent
// Il2CppName: add_didSelectCellWithIdxEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::*)(System::Action_1<int>*)>(&QuickPlaySongPacksDropdown::add_didSelectCellWithIdxEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown*), "add_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::remove_didSelectCellWithIdxEvent
// Il2CppName: remove_didSelectCellWithIdxEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::*)(System::Action_1<int>*)>(&QuickPlaySongPacksDropdown::remove_didSelectCellWithIdxEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown*), "remove_didSelectCellWithIdxEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<int>*>()});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::*)()>(&QuickPlaySongPacksDropdown::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::*)()>(&QuickPlaySongPacksDropdown::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::SetOverrideSongPacks
// Il2CppName: SetOverrideSongPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::*)(GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride*)>(&QuickPlaySongPacksDropdown::SetOverrideSongPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown*), "SetOverrideSongPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride*>()});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::GetSelectedSerializedName
// Il2CppName: GetSelectedSerializedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (QuickPlaySongPacksDropdown::*)()>(&QuickPlaySongPacksDropdown::GetSelectedSerializedName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown*), "GetSelectedSerializedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::SelectCellWithSerializedName
// Il2CppName: SelectCellWithSerializedName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::*)(::Il2CppString*)>(&QuickPlaySongPacksDropdown::SelectCellWithSerializedName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown*), "SelectCellWithSerializedName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx
// Il2CppName: HandleSimpleTextDropdownDidSelectCellWithIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::*)(HMUI::DropdownWithTableView*, int)>(&QuickPlaySongPacksDropdown::HandleSimpleTextDropdownDidSelectCellWithIdx)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown*), "HandleSimpleTextDropdownDidSelectCellWithIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<HMUI::DropdownWithTableView*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::LazyInit
// Il2CppName: LazyInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::*)()>(&QuickPlaySongPacksDropdown::LazyInit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown*), "LazyInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::$LazyInit$b__15_0
// Il2CppName: <LazyInit>b__15_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem* (QuickPlaySongPacksDropdown::*)(::Il2CppString*)>(&QuickPlaySongPacksDropdown::$LazyInit$b__15_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown*), "<LazyInit>b__15_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::$LazyInit$b__15_1
// Il2CppName: <LazyInit>b__15_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem* (QuickPlaySongPacksDropdown::*)(GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::PredefinedPack*)>(&QuickPlaySongPacksDropdown::$LazyInit$b__15_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown*), "<LazyInit>b__15_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::PredefinedPack*>()});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::*)()>(&QuickPlaySongPacksDropdown::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::*)()>(&QuickPlaySongPacksDropdown::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: QuickPlaySongPacksDropdown/SongPackMaskItem
#include "GlobalNamespace/QuickPlaySongPacksDropdown_SongPackMaskItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::SongPackMaskItem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::SongPackMaskItem::*)()>(&QuickPlaySongPacksDropdown::SongPackMaskItem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown::SongPackMaskItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::SongPackMaskItem::*)()>(&QuickPlaySongPacksDropdown::SongPackMaskItem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown::SongPackMaskItem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: QuickPlaySongPacksDropdown/<>c__DisplayClass13_0
#include "GlobalNamespace/QuickPlaySongPacksDropdown_--c__DisplayClass13_0.hpp"
// Including type: QuickPlaySongPacksDropdown/SongPackMaskItem
#include "GlobalNamespace/QuickPlaySongPacksDropdown_SongPackMaskItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: QuickPlaySongPacksDropdown/<>c__DisplayClass13_0.<SelectCellWithSerializedName>b__0
bool GlobalNamespace::QuickPlaySongPacksDropdown::$$c__DisplayClass13_0::$SelectCellWithSerializedName$b__0(GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::$$c__DisplayClass13_0::<SelectCellWithSerializedName>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<SelectCellWithSerializedName>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item);
}
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::$$c__DisplayClass13_0::$SelectCellWithSerializedName$b__0
// Il2CppName: <SelectCellWithSerializedName>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (QuickPlaySongPacksDropdown::$$c__DisplayClass13_0::*)(GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem*)>(&QuickPlaySongPacksDropdown::$$c__DisplayClass13_0::$SelectCellWithSerializedName$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown::$$c__DisplayClass13_0*), "<SelectCellWithSerializedName>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem*>()});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::$$c__DisplayClass13_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::$$c__DisplayClass13_0::*)()>(&QuickPlaySongPacksDropdown::$$c__DisplayClass13_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown::$$c__DisplayClass13_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::$$c__DisplayClass13_0::*)()>(&QuickPlaySongPacksDropdown::$$c__DisplayClass13_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown::$$c__DisplayClass13_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: QuickPlaySongPacksDropdown/<>c
#include "GlobalNamespace/QuickPlaySongPacksDropdown_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride/LocalizedCustomPackName
#include "GlobalNamespace/MasterServerQuickPlaySetupData_QuickPlaySongPacksOverride_LocalizedCustomPackName.hpp"
// Including type: MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride/LocalizedCustomPack
#include "GlobalNamespace/MasterServerQuickPlaySetupData_QuickPlaySongPacksOverride_LocalizedCustomPack.hpp"
// Including type: QuickPlaySongPacksDropdown/SongPackMaskItem
#include "GlobalNamespace/QuickPlaySongPacksDropdown_SongPackMaskItem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly QuickPlaySongPacksDropdown/<>c <>9
GlobalNamespace::QuickPlaySongPacksDropdown::$$c* GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::QuickPlaySongPacksDropdown::$$c*>("", "QuickPlaySongPacksDropdown/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly QuickPlaySongPacksDropdown/<>c <>9
void GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_set_$$9(GlobalNamespace::QuickPlaySongPacksDropdown::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "QuickPlaySongPacksDropdown/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride/LocalizedCustomPackName,System.Boolean> <>9__15_4
System::Func_2<GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPackName*, bool>* GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_get_$$9__15_4() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_get_$$9__15_4");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPackName*, bool>*>("", "QuickPlaySongPacksDropdown/<>c", "<>9__15_4")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride/LocalizedCustomPackName,System.Boolean> <>9__15_4
void GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_set_$$9__15_4(System::Func_2<GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPackName*, bool>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_set_$$9__15_4");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "QuickPlaySongPacksDropdown/<>c", "<>9__15_4", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride/LocalizedCustomPack,QuickPlaySongPacksDropdown/SongPackMaskItem> <>9__15_2
System::Func_2<GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPack*, GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem*>* GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_get_$$9__15_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_get_$$9__15_2");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPack*, GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem*>*>("", "QuickPlaySongPacksDropdown/<>c", "<>9__15_2")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<MasterServerQuickPlaySetupData/QuickPlaySongPacksOverride/LocalizedCustomPack,QuickPlaySongPacksDropdown/SongPackMaskItem> <>9__15_2
void GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_set_$$9__15_2(System::Func_2<GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPack*, GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_set_$$9__15_2");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "QuickPlaySongPacksDropdown/<>c", "<>9__15_2", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<QuickPlaySongPacksDropdown/SongPackMaskItem,System.String> <>9__15_3
System::Func_2<GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem*, ::Il2CppString*>* GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_get_$$9__15_3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_get_$$9__15_3");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem*, ::Il2CppString*>*>("", "QuickPlaySongPacksDropdown/<>c", "<>9__15_3")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<QuickPlaySongPacksDropdown/SongPackMaskItem,System.String> <>9__15_3
void GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_set_$$9__15_3(System::Func_2<GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem*, ::Il2CppString*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_set_$$9__15_3");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "QuickPlaySongPacksDropdown/<>c", "<>9__15_3", value)));
}
// Autogenerated method: QuickPlaySongPacksDropdown/<>c..cctor
void GlobalNamespace::QuickPlaySongPacksDropdown::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "QuickPlaySongPacksDropdown/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: QuickPlaySongPacksDropdown/<>c.<LazyInit>b__15_2
GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem* GlobalNamespace::QuickPlaySongPacksDropdown::$$c::$LazyInit$b__15_2(GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPack* localizedPack) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::$$c::<LazyInit>b__15_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LazyInit>b__15_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(localizedPack)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem*, false>(this, ___internal__method, localizedPack);
}
// Autogenerated method: QuickPlaySongPacksDropdown/<>c.<LazyInit>b__15_4
bool GlobalNamespace::QuickPlaySongPacksDropdown::$$c::$LazyInit$b__15_4(GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPackName* packName) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::$$c::<LazyInit>b__15_4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LazyInit>b__15_4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, packName);
}
// Autogenerated method: QuickPlaySongPacksDropdown/<>c.<LazyInit>b__15_3
::Il2CppString* GlobalNamespace::QuickPlaySongPacksDropdown::$$c::$LazyInit$b__15_3(GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem* item) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuickPlaySongPacksDropdown::$$c::<LazyInit>b__15_3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<LazyInit>b__15_3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(item)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method, item);
}
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&QuickPlaySongPacksDropdown::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::$$c::$LazyInit$b__15_2
// Il2CppName: <LazyInit>b__15_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem* (QuickPlaySongPacksDropdown::$$c::*)(GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPack*)>(&QuickPlaySongPacksDropdown::$$c::$LazyInit$b__15_2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown::$$c*), "<LazyInit>b__15_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPack*>()});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::$$c::$LazyInit$b__15_4
// Il2CppName: <LazyInit>b__15_4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (QuickPlaySongPacksDropdown::$$c::*)(GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPackName*)>(&QuickPlaySongPacksDropdown::$$c::$LazyInit$b__15_4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown::$$c*), "<LazyInit>b__15_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MasterServerQuickPlaySetupData::QuickPlaySongPacksOverride::LocalizedCustomPackName*>()});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::$$c::$LazyInit$b__15_3
// Il2CppName: <LazyInit>b__15_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (QuickPlaySongPacksDropdown::$$c::*)(GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem*)>(&QuickPlaySongPacksDropdown::$$c::$LazyInit$b__15_3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown::$$c*), "<LazyInit>b__15_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::QuickPlaySongPacksDropdown::SongPackMaskItem*>()});
  }
};
// Writing MetadataGetter for method: QuickPlaySongPacksDropdown::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::$$c::*)()>(&QuickPlaySongPacksDropdown::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuickPlaySongPacksDropdown::$$c::*)()>(&QuickPlaySongPacksDropdown::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuickPlaySongPacksDropdown::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
