// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRScreenFade
#include "GlobalNamespace/OVRScreenFade.hpp"
// Including type: OVRScreenFade/<Fade>d__20
#include "GlobalNamespace/OVRScreenFade_-Fade-d__20.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRScreenFade.get_currentAlpha
float GlobalNamespace::OVRScreenFade::get_currentAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::get_currentAlpha");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_currentAlpha", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade.set_currentAlpha
void GlobalNamespace::OVRScreenFade::set_currentAlpha(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::set_currentAlpha");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_currentAlpha", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRScreenFade.Start
void GlobalNamespace::OVRScreenFade::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade.FadeOut
void GlobalNamespace::OVRScreenFade::FadeOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::FadeOut");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade.OnLevelFinishedLoading
void GlobalNamespace::OVRScreenFade::OnLevelFinishedLoading(int level) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::OnLevelFinishedLoading");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnLevelFinishedLoading", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(level)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, level);
}
// Autogenerated method: OVRScreenFade.OnEnable
void GlobalNamespace::OVRScreenFade::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade.OnDestroy
void GlobalNamespace::OVRScreenFade::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade.SetUIFade
void GlobalNamespace::OVRScreenFade::SetUIFade(float level) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::SetUIFade");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetUIFade", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(level)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, level);
}
// Autogenerated method: OVRScreenFade.SetFadeLevel
void GlobalNamespace::OVRScreenFade::SetFadeLevel(float level) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::SetFadeLevel");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetFadeLevel", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(level)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, level);
}
// Autogenerated method: OVRScreenFade.Fade
System::Collections::IEnumerator* GlobalNamespace::OVRScreenFade::Fade(float startAlpha, float endAlpha) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::Fade");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Fade", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(startAlpha, endAlpha)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, startAlpha, endAlpha);
}
// Autogenerated method: OVRScreenFade.SetMaterialAlpha
void GlobalNamespace::OVRScreenFade::SetMaterialAlpha() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::SetMaterialAlpha");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetMaterialAlpha", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRScreenFade/<Fade>d__20
#include "GlobalNamespace/OVRScreenFade_-Fade-d__20.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRScreenFade/<Fade>d__20.System.IDisposable.Dispose
void GlobalNamespace::OVRScreenFade::$Fade$d__20::System_IDisposable_Dispose_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::$Fade$d__20::System.IDisposable.Dispose_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade/<Fade>d__20.MoveNext
bool GlobalNamespace::OVRScreenFade::$Fade$d__20::MoveNext_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::$Fade$d__20::MoveNext_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade/<Fade>d__20.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::OVRScreenFade::$Fade$d__20::System_Collections_Generic_IEnumerator$System_Object$_get_Current_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::$Fade$d__20::System.Collections.Generic.IEnumerator<System.Object>.get_Current_NEW");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade/<Fade>d__20.System.Collections.IEnumerator.Reset
void GlobalNamespace::OVRScreenFade::$Fade$d__20::System_Collections_IEnumerator_Reset_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::$Fade$d__20::System.Collections.IEnumerator.Reset_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRScreenFade/<Fade>d__20.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::OVRScreenFade::$Fade$d__20::System_Collections_IEnumerator_get_Current_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::$Fade$d__20::System.Collections.IEnumerator.get_Current_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeleton
#include "GlobalNamespace/OVRSkeleton.hpp"
// Including type: OVRSkeleton/IOVRSkeletonDataProvider
#include "GlobalNamespace/OVRSkeleton_IOVRSkeletonDataProvider.hpp"
// Including type: OVRSkeleton/SkeletonPoseData
#include "GlobalNamespace/OVRSkeleton_SkeletonPoseData.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: OVRSkeleton/BoneId
#include "GlobalNamespace/OVRSkeleton_BoneId.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: OVRBone
#include "GlobalNamespace/OVRBone.hpp"
// Including type: OVRBoneCapsule
#include "GlobalNamespace/OVRBoneCapsule.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: OVRPlugin/Skeleton
#include "GlobalNamespace/OVRPlugin_Skeleton.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRSkeleton.get_IsInitialized
bool GlobalNamespace::OVRSkeleton::get_IsInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::get_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IsInitialized", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.set_IsInitialized
void GlobalNamespace::OVRSkeleton::set_IsInitialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::set_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IsInitialized", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton.get_IsDataValid
bool GlobalNamespace::OVRSkeleton::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.set_IsDataValid
void GlobalNamespace::OVRSkeleton::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton.get_IsDataHighConfidence
bool GlobalNamespace::OVRSkeleton::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.set_IsDataHighConfidence
void GlobalNamespace::OVRSkeleton::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton.get_Bones
System::Collections::Generic::IList_1<GlobalNamespace::OVRBone*>* GlobalNamespace::OVRSkeleton::get_Bones() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::get_Bones");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Bones", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IList_1<GlobalNamespace::OVRBone*>*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.set_Bones
void GlobalNamespace::OVRSkeleton::set_Bones(System::Collections::Generic::IList_1<GlobalNamespace::OVRBone*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::set_Bones");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_Bones", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton.get_BindPoses
System::Collections::Generic::IList_1<GlobalNamespace::OVRBone*>* GlobalNamespace::OVRSkeleton::get_BindPoses() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::get_BindPoses");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_BindPoses", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IList_1<GlobalNamespace::OVRBone*>*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.set_BindPoses
void GlobalNamespace::OVRSkeleton::set_BindPoses(System::Collections::Generic::IList_1<GlobalNamespace::OVRBone*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::set_BindPoses");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_BindPoses", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton.get_Capsules
System::Collections::Generic::IList_1<GlobalNamespace::OVRBoneCapsule*>* GlobalNamespace::OVRSkeleton::get_Capsules() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::get_Capsules");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Capsules", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IList_1<GlobalNamespace::OVRBoneCapsule*>*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.set_Capsules
void GlobalNamespace::OVRSkeleton::set_Capsules(System::Collections::Generic::IList_1<GlobalNamespace::OVRBoneCapsule*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::set_Capsules");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_Capsules", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton.GetSkeletonType
GlobalNamespace::OVRSkeleton::SkeletonType GlobalNamespace::OVRSkeleton::GetSkeletonType() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::GetSkeletonType");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetSkeletonType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSkeleton::SkeletonType, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.Awake
void GlobalNamespace::OVRSkeleton::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.Start
void GlobalNamespace::OVRSkeleton::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.Initialize
void GlobalNamespace::OVRSkeleton::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::Initialize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.InitializeBones
void GlobalNamespace::OVRSkeleton::InitializeBones(GlobalNamespace::OVRPlugin::Skeleton skeleton) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::InitializeBones_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InitializeBones", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(skeleton)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, skeleton);
}
// Autogenerated method: OVRSkeleton.InitializeBindPose
void GlobalNamespace::OVRSkeleton::InitializeBindPose(GlobalNamespace::OVRPlugin::Skeleton skeleton) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::InitializeBindPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InitializeBindPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(skeleton)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, skeleton);
}
// Autogenerated method: OVRSkeleton.InitializeCapsules
void GlobalNamespace::OVRSkeleton::InitializeCapsules(GlobalNamespace::OVRPlugin::Skeleton skeleton) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::InitializeCapsules");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InitializeCapsules", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(skeleton)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, skeleton);
}
// Autogenerated method: OVRSkeleton.Update
void GlobalNamespace::OVRSkeleton::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.FixedUpdate
void GlobalNamespace::OVRSkeleton::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.GetCurrentStartBoneId
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::GetCurrentStartBoneId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::GetCurrentStartBoneId");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCurrentStartBoneId", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSkeleton::BoneId, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.GetCurrentEndBoneId
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::GetCurrentEndBoneId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::GetCurrentEndBoneId");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCurrentEndBoneId", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSkeleton::BoneId, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.GetCurrentMaxSkinnableBoneId
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::GetCurrentMaxSkinnableBoneId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::GetCurrentMaxSkinnableBoneId");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCurrentMaxSkinnableBoneId", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSkeleton::BoneId, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.GetCurrentNumBones
int GlobalNamespace::OVRSkeleton::GetCurrentNumBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::GetCurrentNumBones");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCurrentNumBones", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton.GetCurrentNumSkinnableBones
int GlobalNamespace::OVRSkeleton::GetCurrentNumSkinnableBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::GetCurrentNumSkinnableBones");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetCurrentNumSkinnableBones", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeleton/IOVRSkeletonDataProvider
#include "GlobalNamespace/OVRSkeleton_IOVRSkeletonDataProvider.hpp"
// Including type: OVRSkeleton/SkeletonPoseData
#include "GlobalNamespace/OVRSkeleton_SkeletonPoseData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRSkeleton/IOVRSkeletonDataProvider.GetSkeletonType
GlobalNamespace::OVRSkeleton::SkeletonType GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider::GetSkeletonType_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider::GetSkeletonType_NEW");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetSkeletonType", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSkeleton::SkeletonType, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeleton/IOVRSkeletonDataProvider.GetSkeletonPoseData
GlobalNamespace::OVRSkeleton::SkeletonPoseData GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider::GetSkeletonPoseData_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::IOVRSkeletonDataProvider::GetSkeletonPoseData_NEW");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetSkeletonPoseData", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSkeleton::SkeletonPoseData, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRSkeleton/SkeletonPoseData
#include "GlobalNamespace/OVRSkeleton_SkeletonPoseData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRSkeleton/SkeletonPoseData.get_RootPose
GlobalNamespace::OVRPlugin::Posef GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_RootPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_RootPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_RootPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRPlugin::Posef, false>(*this, ___internal__method);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.set_RootPose
void GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_RootPose(GlobalNamespace::OVRPlugin::Posef value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_RootPose");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "set_RootPose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.get_RootScale
float GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_RootScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_RootScale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_RootScale", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.set_RootScale
void GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_RootScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_RootScale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "set_RootScale", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.get_BoneRotations
::Array<GlobalNamespace::OVRPlugin::Quatf>* GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_BoneRotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_BoneRotations");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_BoneRotations", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::OVRPlugin::Quatf>*, false>(*this, ___internal__method);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.set_BoneRotations
void GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_BoneRotations(::Array<GlobalNamespace::OVRPlugin::Quatf>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_BoneRotations");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "set_BoneRotations", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.get_IsDataValid
bool GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.set_IsDataValid
void GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.get_IsDataHighConfidence
bool GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonPoseData::get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: OVRSkeleton/SkeletonPoseData.set_IsDataHighConfidence
void GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonPoseData::set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeleton/SkeletonType
#include "GlobalNamespace/OVRSkeleton.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/SkeletonType None
GlobalNamespace::OVRSkeleton::SkeletonType GlobalNamespace::OVRSkeleton::SkeletonType::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonType::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::SkeletonType>("", "OVRSkeleton/SkeletonType", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/SkeletonType None
void GlobalNamespace::OVRSkeleton::SkeletonType::_set_None(GlobalNamespace::OVRSkeleton::SkeletonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonType::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/SkeletonType", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/SkeletonType HandLeft
GlobalNamespace::OVRSkeleton::SkeletonType GlobalNamespace::OVRSkeleton::SkeletonType::_get_HandLeft() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonType::_get_HandLeft");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::SkeletonType>("", "OVRSkeleton/SkeletonType", "HandLeft"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/SkeletonType HandLeft
void GlobalNamespace::OVRSkeleton::SkeletonType::_set_HandLeft(GlobalNamespace::OVRSkeleton::SkeletonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonType::_set_HandLeft");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/SkeletonType", "HandLeft", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/SkeletonType HandRight
GlobalNamespace::OVRSkeleton::SkeletonType GlobalNamespace::OVRSkeleton::SkeletonType::_get_HandRight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonType::_get_HandRight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::SkeletonType>("", "OVRSkeleton/SkeletonType", "HandRight"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/SkeletonType HandRight
void GlobalNamespace::OVRSkeleton::SkeletonType::_set_HandRight(GlobalNamespace::OVRSkeleton::SkeletonType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::SkeletonType::_set_HandRight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/SkeletonType", "HandRight", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeleton/BoneId
#include "GlobalNamespace/OVRSkeleton_BoneId.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Invalid
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Invalid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Invalid");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Invalid"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Invalid
void GlobalNamespace::OVRSkeleton::BoneId::_set_Invalid(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Invalid");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Invalid", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Start
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Start");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Start"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Start
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Start(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Start");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Start", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_WristRoot
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_WristRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_WristRoot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_WristRoot"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_WristRoot
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_WristRoot(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_WristRoot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_WristRoot", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_ForearmStub
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_ForearmStub() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_ForearmStub");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_ForearmStub"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_ForearmStub
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_ForearmStub(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_ForearmStub");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_ForearmStub", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Thumb0
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Thumb0"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Thumb0
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb0(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Thumb0", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Thumb1
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Thumb1"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Thumb1
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb1(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Thumb1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Thumb2
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Thumb2"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Thumb2
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb2(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Thumb2", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Thumb3
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Thumb3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Thumb3"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Thumb3
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb3(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Thumb3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Thumb3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Index1
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Index1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Index1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Index1"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Index1
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Index1(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Index1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Index1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Index2
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Index2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Index2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Index2"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Index2
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Index2(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Index2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Index2", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Index3
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Index3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Index3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Index3"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Index3
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Index3(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Index3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Index3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Middle1
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Middle1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Middle1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Middle1"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Middle1
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Middle1(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Middle1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Middle1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Middle2
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Middle2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Middle2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Middle2"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Middle2
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Middle2(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Middle2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Middle2", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Middle3
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Middle3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Middle3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Middle3"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Middle3
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Middle3(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Middle3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Middle3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Ring1
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Ring1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Ring1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Ring1"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Ring1
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Ring1(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Ring1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Ring1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Ring2
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Ring2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Ring2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Ring2"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Ring2
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Ring2(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Ring2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Ring2", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Ring3
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Ring3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Ring3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Ring3"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Ring3
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Ring3(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Ring3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Ring3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Pinky0
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky0");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Pinky0"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Pinky0
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky0(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky0");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Pinky0", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Pinky1
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Pinky1"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Pinky1
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky1(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Pinky1", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Pinky2
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Pinky2"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Pinky2
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky2(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Pinky2", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_Pinky3
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky3() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_Pinky3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_Pinky3"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_Pinky3
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky3(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_Pinky3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_Pinky3", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_MaxSkinnable
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_MaxSkinnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_MaxSkinnable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_MaxSkinnable"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_MaxSkinnable
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_MaxSkinnable(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_MaxSkinnable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_MaxSkinnable", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_ThumbTip
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_ThumbTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_ThumbTip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_ThumbTip"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_ThumbTip
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_ThumbTip(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_ThumbTip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_ThumbTip", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_IndexTip
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_IndexTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_IndexTip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_IndexTip"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_IndexTip
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_IndexTip(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_IndexTip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_IndexTip", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_MiddleTip
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_MiddleTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_MiddleTip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_MiddleTip"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_MiddleTip
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_MiddleTip(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_MiddleTip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_MiddleTip", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_RingTip
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_RingTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_RingTip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_RingTip"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_RingTip
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_RingTip(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_RingTip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_RingTip", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_PinkyTip
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_PinkyTip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_PinkyTip");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_PinkyTip"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_PinkyTip
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_PinkyTip(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_PinkyTip");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_PinkyTip", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Hand_End
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_End() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Hand_End");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Hand_End"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Hand_End
void GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_End(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Hand_End");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Hand_End", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeleton/BoneId Max
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRSkeleton::BoneId::_get_Max() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_get_Max");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeleton::BoneId>("", "OVRSkeleton/BoneId", "Max"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeleton/BoneId Max
void GlobalNamespace::OVRSkeleton::BoneId::_set_Max(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeleton::BoneId::_set_Max");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeleton/BoneId", "Max", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRBone
#include "GlobalNamespace/OVRBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRBone.get_Id
GlobalNamespace::OVRSkeleton::BoneId GlobalNamespace::OVRBone::get_Id() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRBone::get_Id");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Id", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSkeleton::BoneId, false>(this, ___internal__method);
}
// Autogenerated method: OVRBone.set_Id
void GlobalNamespace::OVRBone::set_Id(GlobalNamespace::OVRSkeleton::BoneId value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRBone::set_Id");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_Id", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRBone.get_ParentBoneIndex
int16_t GlobalNamespace::OVRBone::get_ParentBoneIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRBone::get_ParentBoneIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_ParentBoneIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int16_t, false>(this, ___internal__method);
}
// Autogenerated method: OVRBone.set_ParentBoneIndex
void GlobalNamespace::OVRBone::set_ParentBoneIndex(int16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRBone::set_ParentBoneIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_ParentBoneIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRBone.get_Transform
UnityEngine::Transform* GlobalNamespace::OVRBone::get_Transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRBone::get_Transform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Transform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: OVRBone.set_Transform
void GlobalNamespace::OVRBone::set_Transform(UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRBone::set_Transform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_Transform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRBoneCapsule
#include "GlobalNamespace/OVRBoneCapsule.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.CapsuleCollider
#include "UnityEngine/CapsuleCollider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRBoneCapsule.get_BoneIndex
int16_t GlobalNamespace::OVRBoneCapsule::get_BoneIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRBoneCapsule::get_BoneIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_BoneIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int16_t, false>(this, ___internal__method);
}
// Autogenerated method: OVRBoneCapsule.set_BoneIndex
void GlobalNamespace::OVRBoneCapsule::set_BoneIndex(int16_t value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRBoneCapsule::set_BoneIndex");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_BoneIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRBoneCapsule.get_CapsuleRigidbody
UnityEngine::Rigidbody* GlobalNamespace::OVRBoneCapsule::get_CapsuleRigidbody() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRBoneCapsule::get_CapsuleRigidbody");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_CapsuleRigidbody", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rigidbody*, false>(this, ___internal__method);
}
// Autogenerated method: OVRBoneCapsule.set_CapsuleRigidbody
void GlobalNamespace::OVRBoneCapsule::set_CapsuleRigidbody(UnityEngine::Rigidbody* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRBoneCapsule::set_CapsuleRigidbody");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_CapsuleRigidbody", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRBoneCapsule.get_CapsuleCollider
UnityEngine::CapsuleCollider* GlobalNamespace::OVRBoneCapsule::get_CapsuleCollider() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRBoneCapsule::get_CapsuleCollider");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_CapsuleCollider", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::CapsuleCollider*, false>(this, ___internal__method);
}
// Autogenerated method: OVRBoneCapsule.set_CapsuleCollider
void GlobalNamespace::OVRBoneCapsule::set_CapsuleCollider(UnityEngine::CapsuleCollider* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRBoneCapsule::set_CapsuleCollider");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_CapsuleCollider", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeletonRenderer
#include "GlobalNamespace/OVRSkeletonRenderer.hpp"
// Including type: OVRSkeletonRenderer/IOVRSkeletonRendererDataProvider
#include "GlobalNamespace/OVRSkeletonRenderer_IOVRSkeletonRendererDataProvider.hpp"
// Including type: OVRSkeletonRenderer/SkeletonRendererData
#include "GlobalNamespace/OVRSkeletonRenderer_SkeletonRendererData.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: OVRSkeletonRenderer/BoneVisualization
#include "GlobalNamespace/OVRSkeletonRenderer_BoneVisualization.hpp"
// Including type: OVRSkeletonRenderer/CapsuleVisualization
#include "GlobalNamespace/OVRSkeletonRenderer_CapsuleVisualization.hpp"
// Including type: OVRSkeleton
#include "GlobalNamespace/OVRSkeleton.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single LINE_RENDERER_WIDTH
float GlobalNamespace::OVRSkeletonRenderer::_get_LINE_RENDERER_WIDTH() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::_get_LINE_RENDERER_WIDTH");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "OVRSkeletonRenderer", "LINE_RENDERER_WIDTH"));
}
// Autogenerated static field setter
// Set static field: static private System.Single LINE_RENDERER_WIDTH
void GlobalNamespace::OVRSkeletonRenderer::_set_LINE_RENDERER_WIDTH(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::_set_LINE_RENDERER_WIDTH");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeletonRenderer", "LINE_RENDERER_WIDTH", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Quaternion _capsuleRotationOffset
UnityEngine::Quaternion GlobalNamespace::OVRSkeletonRenderer::_get__capsuleRotationOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::_get__capsuleRotationOffset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Quaternion>("", "OVRSkeletonRenderer", "_capsuleRotationOffset"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Quaternion _capsuleRotationOffset
void GlobalNamespace::OVRSkeletonRenderer::_set__capsuleRotationOffset(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::_set__capsuleRotationOffset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeletonRenderer", "_capsuleRotationOffset", value));
}
// Autogenerated method: OVRSkeletonRenderer.get_IsInitialized
bool GlobalNamespace::OVRSkeletonRenderer::get_IsInitialized() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::get_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IsInitialized", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.set_IsInitialized
void GlobalNamespace::OVRSkeletonRenderer::set_IsInitialized(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::set_IsInitialized");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IsInitialized", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeletonRenderer.get_IsDataValid
bool GlobalNamespace::OVRSkeletonRenderer::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.set_IsDataValid
void GlobalNamespace::OVRSkeletonRenderer::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeletonRenderer.get_IsDataHighConfidence
bool GlobalNamespace::OVRSkeletonRenderer::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.set_IsDataHighConfidence
void GlobalNamespace::OVRSkeletonRenderer::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeletonRenderer.get_ShouldUseSystemGestureMaterial
bool GlobalNamespace::OVRSkeletonRenderer::get_ShouldUseSystemGestureMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::get_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.set_ShouldUseSystemGestureMaterial
void GlobalNamespace::OVRSkeletonRenderer::set_ShouldUseSystemGestureMaterial(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::set_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: OVRSkeletonRenderer.Awake
void GlobalNamespace::OVRSkeletonRenderer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.Start
void GlobalNamespace::OVRSkeletonRenderer::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::Start");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.Initialize
void GlobalNamespace::OVRSkeletonRenderer::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::Initialize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.Update
void GlobalNamespace::OVRSkeletonRenderer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer.OnDestroy
void GlobalNamespace::OVRSkeletonRenderer::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer..cctor
void GlobalNamespace::OVRSkeletonRenderer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::.cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRSkeletonRenderer", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeletonRenderer/IOVRSkeletonRendererDataProvider
#include "GlobalNamespace/OVRSkeletonRenderer_IOVRSkeletonRendererDataProvider.hpp"
// Including type: OVRSkeletonRenderer/SkeletonRendererData
#include "GlobalNamespace/OVRSkeletonRenderer_SkeletonRendererData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRSkeletonRenderer/IOVRSkeletonRendererDataProvider.GetSkeletonRendererData
GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData GlobalNamespace::OVRSkeletonRenderer::IOVRSkeletonRendererDataProvider::GetSkeletonRendererData_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::IOVRSkeletonRendererDataProvider::GetSkeletonRendererData_NEW");
  auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetSkeletonRendererData", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeletonRenderer/SkeletonRendererData
#include "GlobalNamespace/OVRSkeletonRenderer_SkeletonRendererData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.get_RootScale
float GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_RootScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_RootScale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_RootScale", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.set_RootScale
void GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_RootScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_RootScale");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "set_RootScale", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.get_IsDataValid
bool GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_IsDataValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_IsDataValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.set_IsDataValid
void GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_IsDataValid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_IsDataValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "set_IsDataValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.get_IsDataHighConfidence
bool GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_IsDataHighConfidence() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.set_IsDataHighConfidence
void GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_IsDataHighConfidence(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_IsDataHighConfidence");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "set_IsDataHighConfidence", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.get_ShouldUseSystemGestureMaterial
bool GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_ShouldUseSystemGestureMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::get_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
}
// Autogenerated method: OVRSkeletonRenderer/SkeletonRendererData.set_ShouldUseSystemGestureMaterial
void GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_ShouldUseSystemGestureMaterial(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::SkeletonRendererData::set_ShouldUseSystemGestureMaterial");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "set_ShouldUseSystemGestureMaterial", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeletonRenderer/ConfidenceBehavior
#include "GlobalNamespace/OVRSkeletonRenderer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRSkeletonRenderer/ConfidenceBehavior None
GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior>("", "OVRSkeletonRenderer/ConfidenceBehavior", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeletonRenderer/ConfidenceBehavior None
void GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_set_None(GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeletonRenderer/ConfidenceBehavior", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeletonRenderer/ConfidenceBehavior ToggleRenderer
GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_get_ToggleRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_get_ToggleRenderer");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior>("", "OVRSkeletonRenderer/ConfidenceBehavior", "ToggleRenderer"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeletonRenderer/ConfidenceBehavior ToggleRenderer
void GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_set_ToggleRenderer(GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior::_set_ToggleRenderer");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeletonRenderer/ConfidenceBehavior", "ToggleRenderer", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeletonRenderer/SystemGestureBehavior
#include "GlobalNamespace/OVRSkeletonRenderer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRSkeletonRenderer/SystemGestureBehavior None
GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior>("", "OVRSkeletonRenderer/SystemGestureBehavior", "None"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeletonRenderer/SystemGestureBehavior None
void GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_set_None(GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeletonRenderer/SystemGestureBehavior", "None", value));
}
// Autogenerated static field getter
// Get static field: static public OVRSkeletonRenderer/SystemGestureBehavior SwapMaterial
GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_get_SwapMaterial() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_get_SwapMaterial");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior>("", "OVRSkeletonRenderer/SystemGestureBehavior", "SwapMaterial"));
}
// Autogenerated static field setter
// Set static field: static public OVRSkeletonRenderer/SystemGestureBehavior SwapMaterial
void GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_set_SwapMaterial(GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior::_set_SwapMaterial");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSkeletonRenderer/SystemGestureBehavior", "SwapMaterial", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeletonRenderer/BoneVisualization
#include "GlobalNamespace/OVRSkeletonRenderer_BoneVisualization.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.LineRenderer
#include "UnityEngine/LineRenderer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRSkeletonRenderer/BoneVisualization.Update
void GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::Update(float scale, bool shouldRender, bool shouldUseSystemGestureMaterial, GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior confidenceBehavior, GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior systemGestureBehavior) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::BoneVisualization::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(scale, shouldRender, shouldUseSystemGestureMaterial, confidenceBehavior, systemGestureBehavior)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scale, shouldRender, shouldUseSystemGestureMaterial, confidenceBehavior, systemGestureBehavior);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSkeletonRenderer/CapsuleVisualization
#include "GlobalNamespace/OVRSkeletonRenderer_CapsuleVisualization.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: OVRBoneCapsule
#include "GlobalNamespace/OVRBoneCapsule.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRSkeletonRenderer/CapsuleVisualization.Update
void GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::Update(float scale, bool shouldRender, bool shouldUseSystemGestureMaterial, GlobalNamespace::OVRSkeletonRenderer::ConfidenceBehavior confidenceBehavior, GlobalNamespace::OVRSkeletonRenderer::SystemGestureBehavior systemGestureBehavior) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSkeletonRenderer::CapsuleVisualization::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(scale, shouldRender, shouldUseSystemGestureMaterial, confidenceBehavior, systemGestureBehavior)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, scale, shouldRender, shouldUseSystemGestureMaterial, confidenceBehavior, systemGestureBehavior);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSystemPerfMetrics
#include "GlobalNamespace/OVRSystemPerfMetrics.hpp"
// Including type: OVRSystemPerfMetrics/PerfMetrics
#include "GlobalNamespace/OVRSystemPerfMetrics_PerfMetrics.hpp"
// Including type: OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer
#include "GlobalNamespace/OVRSystemPerfMetrics_OVRSystemPerfMetricsTcpServer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Int32 TcpListeningPort
int GlobalNamespace::OVRSystemPerfMetrics::_get_TcpListeningPort() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::_get_TcpListeningPort");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRSystemPerfMetrics", "TcpListeningPort"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 TcpListeningPort
void GlobalNamespace::OVRSystemPerfMetrics::_set_TcpListeningPort(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::_set_TcpListeningPort");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSystemPerfMetrics", "TcpListeningPort", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 PayloadTypeMetrics
int GlobalNamespace::OVRSystemPerfMetrics::_get_PayloadTypeMetrics() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::_get_PayloadTypeMetrics");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRSystemPerfMetrics", "PayloadTypeMetrics"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 PayloadTypeMetrics
void GlobalNamespace::OVRSystemPerfMetrics::_set_PayloadTypeMetrics(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::_set_PayloadTypeMetrics");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSystemPerfMetrics", "PayloadTypeMetrics", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MaxBufferLength
int GlobalNamespace::OVRSystemPerfMetrics::_get_MaxBufferLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::_get_MaxBufferLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRSystemPerfMetrics", "MaxBufferLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaxBufferLength
void GlobalNamespace::OVRSystemPerfMetrics::_set_MaxBufferLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::_set_MaxBufferLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSystemPerfMetrics", "MaxBufferLength", value));
}
// Autogenerated static field getter
// Get static field: static public System.Int32 MaxMessageLength
int GlobalNamespace::OVRSystemPerfMetrics::_get_MaxMessageLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::_get_MaxMessageLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "OVRSystemPerfMetrics", "MaxMessageLength"));
}
// Autogenerated static field setter
// Set static field: static public System.Int32 MaxMessageLength
void GlobalNamespace::OVRSystemPerfMetrics::_set_MaxMessageLength(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::_set_MaxMessageLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSystemPerfMetrics", "MaxMessageLength", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRSystemPerfMetrics/PerfMetrics
#include "GlobalNamespace/OVRSystemPerfMetrics_PerfMetrics.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRSystemPerfMetrics/PerfMetrics.ToJSON
::Il2CppString* GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::ToJSON() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::ToJSON");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ToJSON", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSystemPerfMetrics/PerfMetrics.LoadFromJSON
bool GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::LoadFromJSON(::Il2CppString* json) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics::LoadFromJSON");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LoadFromJSON", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(json)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, json);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer
#include "GlobalNamespace/OVRSystemPerfMetrics_OVRSystemPerfMetricsTcpServer.hpp"
// Including type: OVRNetwork/OVRNetworkTcpServer
#include "GlobalNamespace/OVRNetwork_OVRNetworkTcpServer.hpp"
// Including type: OVRSystemPerfMetrics/PerfMetrics
#include "GlobalNamespace/OVRSystemPerfMetrics_PerfMetrics.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer singleton
GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer* GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::_get_singleton() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::_get_singleton");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer*>("", "OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer", "singleton"));
}
// Autogenerated static field setter
// Set static field: static public OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer singleton
void GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::_set_singleton(GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::_set_singleton");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer", "singleton", value));
}
// Autogenerated method: OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer.OnEnable
void GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer.OnDisable
void GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer.Update
void GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer.GatherPerfMetrics
GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics* GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::GatherPerfMetrics() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::GatherPerfMetrics");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GatherPerfMetrics", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::OVRSystemPerfMetrics::PerfMetrics*, false>(this, ___internal__method);
}
// Autogenerated method: OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer..cctor
void GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSystemPerfMetrics::OVRSystemPerfMetricsTcpServer::.cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRSystemPerfMetrics/OVRSystemPerfMetricsTcpServer", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRVignette
#include "GlobalNamespace/OVRVignette.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.Rendering.ScriptableRenderContext
#include "UnityEngine/Rendering/ScriptableRenderContext.hpp"
// Including type: UnityEngine.Shader
#include "UnityEngine/Shader.hpp"
// Including type: UnityEngine.MeshRenderer
#include "UnityEngine/MeshRenderer.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Camera/StereoscopicEye
#include "UnityEngine/Camera_StereoscopicEye.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.String QUADRATIC_FALLOFF
::Il2CppString* GlobalNamespace::OVRVignette::_get_QUADRATIC_FALLOFF() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::_get_QUADRATIC_FALLOFF");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "OVRVignette", "QUADRATIC_FALLOFF"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.String QUADRATIC_FALLOFF
void GlobalNamespace::OVRVignette::_set_QUADRATIC_FALLOFF(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::_set_QUADRATIC_FALLOFF");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette", "QUADRATIC_FALLOFF", value));
}
// Autogenerated method: OVRVignette.GetTriangleCount
int GlobalNamespace::OVRVignette::GetTriangleCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::GetTriangleCount");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTriangleCount", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.BuildMeshes
void GlobalNamespace::OVRVignette::BuildMeshes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::BuildMeshes");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BuildMeshes", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.BuildMaterials
void GlobalNamespace::OVRVignette::BuildMaterials() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::BuildMaterials");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BuildMaterials", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.OnEnable
void GlobalNamespace::OVRVignette::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.OnDisable
void GlobalNamespace::OVRVignette::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::OnDisable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.Awake
void GlobalNamespace::OVRVignette::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::Awake");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.GetTanFovAndOffsetForStereoEye
void GlobalNamespace::OVRVignette::GetTanFovAndOffsetForStereoEye(UnityEngine::Camera::StereoscopicEye eye, float& tanFovX, float& tanFovY, float& offsetX, float& offsetY) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::GetTanFovAndOffsetForStereoEye");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTanFovAndOffsetForStereoEye", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eye, tanFovX, tanFovY, offsetX, offsetY)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eye, tanFovX, tanFovY, offsetX, offsetY);
}
// Autogenerated method: OVRVignette.GetTanFovAndOffsetForMonoEye
void GlobalNamespace::OVRVignette::GetTanFovAndOffsetForMonoEye(float& tanFovX, float& tanFovY, float& offsetX, float& offsetY) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::GetTanFovAndOffsetForMonoEye");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetTanFovAndOffsetForMonoEye", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(tanFovX, tanFovY, offsetX, offsetY)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, tanFovX, tanFovY, offsetX, offsetY);
}
// Autogenerated method: OVRVignette.VisibilityTest
bool GlobalNamespace::OVRVignette::VisibilityTest(float scaleX, float scaleY, float offsetX, float offsetY) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::VisibilityTest");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "VisibilityTest", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(scaleX, scaleY, offsetX, offsetY)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, scaleX, scaleY, offsetX, offsetY);
}
// Autogenerated method: OVRVignette.Update
void GlobalNamespace::OVRVignette::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.EnableRenderers
void GlobalNamespace::OVRVignette::EnableRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::EnableRenderers");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EnableRenderers", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.DisableRenderers
void GlobalNamespace::OVRVignette::DisableRenderers() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::DisableRenderers");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DisableRenderers", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.OnPreCull
void GlobalNamespace::OVRVignette::OnPreCull() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::OnPreCull");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnPreCull", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.OnPostRender
void GlobalNamespace::OVRVignette::OnPostRender() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::OnPostRender");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnPostRender", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVRVignette.OnBeginCameraRendering
void GlobalNamespace::OVRVignette::OnBeginCameraRendering(UnityEngine::Rendering::ScriptableRenderContext context, UnityEngine::Camera* camera) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::OnBeginCameraRendering");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnBeginCameraRendering", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(context, camera)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, context, camera);
}
// Autogenerated method: OVRVignette..cctor
void GlobalNamespace::OVRVignette::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::.cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "OVRVignette", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRVignette/MeshComplexityLevel
#include "GlobalNamespace/OVRVignette.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRVignette/MeshComplexityLevel VerySimple
GlobalNamespace::OVRVignette::MeshComplexityLevel GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_VerySimple() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_VerySimple");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRVignette::MeshComplexityLevel>("", "OVRVignette/MeshComplexityLevel", "VerySimple"));
}
// Autogenerated static field setter
// Set static field: static public OVRVignette/MeshComplexityLevel VerySimple
void GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_VerySimple(GlobalNamespace::OVRVignette::MeshComplexityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_VerySimple");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette/MeshComplexityLevel", "VerySimple", value));
}
// Autogenerated static field getter
// Get static field: static public OVRVignette/MeshComplexityLevel Simple
GlobalNamespace::OVRVignette::MeshComplexityLevel GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_Simple() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_Simple");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRVignette::MeshComplexityLevel>("", "OVRVignette/MeshComplexityLevel", "Simple"));
}
// Autogenerated static field setter
// Set static field: static public OVRVignette/MeshComplexityLevel Simple
void GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_Simple(GlobalNamespace::OVRVignette::MeshComplexityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_Simple");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette/MeshComplexityLevel", "Simple", value));
}
// Autogenerated static field getter
// Get static field: static public OVRVignette/MeshComplexityLevel Normal
GlobalNamespace::OVRVignette::MeshComplexityLevel GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_Normal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_Normal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRVignette::MeshComplexityLevel>("", "OVRVignette/MeshComplexityLevel", "Normal"));
}
// Autogenerated static field setter
// Set static field: static public OVRVignette/MeshComplexityLevel Normal
void GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_Normal(GlobalNamespace::OVRVignette::MeshComplexityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_Normal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette/MeshComplexityLevel", "Normal", value));
}
// Autogenerated static field getter
// Get static field: static public OVRVignette/MeshComplexityLevel Detailed
GlobalNamespace::OVRVignette::MeshComplexityLevel GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_Detailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_Detailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRVignette::MeshComplexityLevel>("", "OVRVignette/MeshComplexityLevel", "Detailed"));
}
// Autogenerated static field setter
// Set static field: static public OVRVignette/MeshComplexityLevel Detailed
void GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_Detailed(GlobalNamespace::OVRVignette::MeshComplexityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_Detailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette/MeshComplexityLevel", "Detailed", value));
}
// Autogenerated static field getter
// Get static field: static public OVRVignette/MeshComplexityLevel VeryDetailed
GlobalNamespace::OVRVignette::MeshComplexityLevel GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_VeryDetailed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::MeshComplexityLevel::_get_VeryDetailed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRVignette::MeshComplexityLevel>("", "OVRVignette/MeshComplexityLevel", "VeryDetailed"));
}
// Autogenerated static field setter
// Set static field: static public OVRVignette/MeshComplexityLevel VeryDetailed
void GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_VeryDetailed(GlobalNamespace::OVRVignette::MeshComplexityLevel value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::MeshComplexityLevel::_set_VeryDetailed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette/MeshComplexityLevel", "VeryDetailed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRVignette/FalloffType
#include "GlobalNamespace/OVRVignette.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public OVRVignette/FalloffType Linear
GlobalNamespace::OVRVignette::FalloffType GlobalNamespace::OVRVignette::FalloffType::_get_Linear() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::FalloffType::_get_Linear");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRVignette::FalloffType>("", "OVRVignette/FalloffType", "Linear"));
}
// Autogenerated static field setter
// Set static field: static public OVRVignette/FalloffType Linear
void GlobalNamespace::OVRVignette::FalloffType::_set_Linear(GlobalNamespace::OVRVignette::FalloffType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::FalloffType::_set_Linear");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette/FalloffType", "Linear", value));
}
// Autogenerated static field getter
// Get static field: static public OVRVignette/FalloffType Quadratic
GlobalNamespace::OVRVignette::FalloffType GlobalNamespace::OVRVignette::FalloffType::_get_Quadratic() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::FalloffType::_get_Quadratic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::OVRVignette::FalloffType>("", "OVRVignette/FalloffType", "Quadratic"));
}
// Autogenerated static field setter
// Set static field: static public OVRVignette/FalloffType Quadratic
void GlobalNamespace::OVRVignette::FalloffType::_set_Quadratic(GlobalNamespace::OVRVignette::FalloffType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRVignette::FalloffType::_set_Quadratic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "OVRVignette/FalloffType", "Quadratic", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVRWaitCursor
#include "GlobalNamespace/OVRWaitCursor.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVRWaitCursor.Update
void GlobalNamespace::OVRWaitCursor::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRWaitCursor::Update");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetRecommendedRenderTargetSize
#include "OVR/OpenVR/IVRSystem__GetRecommendedRenderTargetSize.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetRecommendedRenderTargetSize.Invoke
void OVR::OpenVR::IVRSystem::_GetRecommendedRenderTargetSize::Invoke_NEW(uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetRecommendedRenderTargetSize::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnWidth, pnHeight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnWidth, pnHeight);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetRecommendedRenderTargetSize.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetRecommendedRenderTargetSize::BeginInvoke_NEW(uint& pnWidth, uint& pnHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetRecommendedRenderTargetSize::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnWidth, pnHeight, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pnWidth, pnHeight, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetRecommendedRenderTargetSize.EndInvoke
void OVR::OpenVR::IVRSystem::_GetRecommendedRenderTargetSize::EndInvoke_NEW(uint& pnWidth, uint& pnHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetRecommendedRenderTargetSize::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnWidth, pnHeight, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnWidth, pnHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetProjectionMatrix
#include "OVR/OpenVR/IVRSystem__GetProjectionMatrix.hpp"
// Including type: OVR.OpenVR.HmdMatrix44_t
#include "OVR/OpenVR/HmdMatrix44_t.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetProjectionMatrix.Invoke
OVR::OpenVR::HmdMatrix44_t OVR::OpenVR::IVRSystem::_GetProjectionMatrix::Invoke_NEW(OVR::OpenVR::EVREye eEye, float fNearZ, float fFarZ) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetProjectionMatrix::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, fNearZ, fFarZ)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix44_t, false>(this, ___internal__method, eEye, fNearZ, fFarZ);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetProjectionMatrix.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetProjectionMatrix::BeginInvoke_NEW(OVR::OpenVR::EVREye eEye, float fNearZ, float fFarZ, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetProjectionMatrix::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, fNearZ, fFarZ, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, fNearZ, fFarZ, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetProjectionMatrix.EndInvoke
OVR::OpenVR::HmdMatrix44_t OVR::OpenVR::IVRSystem::_GetProjectionMatrix::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetProjectionMatrix::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix44_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetProjectionRaw
#include "OVR/OpenVR/IVRSystem__GetProjectionRaw.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetProjectionRaw.Invoke
void OVR::OpenVR::IVRSystem::_GetProjectionRaw::Invoke_NEW(OVR::OpenVR::EVREye eEye, float& pfLeft, float& pfRight, float& pfTop, float& pfBottom) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetProjectionRaw::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pfLeft, pfRight, pfTop, pfBottom)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eEye, pfLeft, pfRight, pfTop, pfBottom);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetProjectionRaw.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetProjectionRaw::BeginInvoke_NEW(OVR::OpenVR::EVREye eEye, float& pfLeft, float& pfRight, float& pfTop, float& pfBottom, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetProjectionRaw::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pfLeft, pfRight, pfTop, pfBottom, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, pfLeft, pfRight, pfTop, pfBottom, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetProjectionRaw.EndInvoke
void OVR::OpenVR::IVRSystem::_GetProjectionRaw::EndInvoke_NEW(float& pfLeft, float& pfRight, float& pfTop, float& pfBottom, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetProjectionRaw::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pfLeft, pfRight, pfTop, pfBottom, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pfLeft, pfRight, pfTop, pfBottom, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_ComputeDistortion
#include "OVR/OpenVR/IVRSystem__ComputeDistortion.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
// Including type: OVR.OpenVR.DistortionCoordinates_t
#include "OVR/OpenVR/DistortionCoordinates_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_ComputeDistortion.Invoke
bool OVR::OpenVR::IVRSystem::_ComputeDistortion::Invoke_NEW(OVR::OpenVR::EVREye eEye, float fU, float fV, OVR::OpenVR::DistortionCoordinates_t& pDistortionCoordinates) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_ComputeDistortion::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, fU, fV, pDistortionCoordinates)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eEye, fU, fV, pDistortionCoordinates);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_ComputeDistortion.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_ComputeDistortion::BeginInvoke_NEW(OVR::OpenVR::EVREye eEye, float fU, float fV, OVR::OpenVR::DistortionCoordinates_t& pDistortionCoordinates, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_ComputeDistortion::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, fU, fV, pDistortionCoordinates, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, fU, fV, pDistortionCoordinates, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_ComputeDistortion.EndInvoke
bool OVR::OpenVR::IVRSystem::_ComputeDistortion::EndInvoke_NEW(OVR::OpenVR::DistortionCoordinates_t& pDistortionCoordinates, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_ComputeDistortion::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pDistortionCoordinates, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pDistortionCoordinates, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetEyeToHeadTransform
#include "OVR/OpenVR/IVRSystem__GetEyeToHeadTransform.hpp"
// Including type: OVR.OpenVR.HmdMatrix34_t
#include "OVR/OpenVR/HmdMatrix34_t.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetEyeToHeadTransform.Invoke
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::IVRSystem::_GetEyeToHeadTransform::Invoke_NEW(OVR::OpenVR::EVREye eEye) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetEyeToHeadTransform::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method, eEye);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetEyeToHeadTransform.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetEyeToHeadTransform::BeginInvoke_NEW(OVR::OpenVR::EVREye eEye, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetEyeToHeadTransform::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetEyeToHeadTransform.EndInvoke
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::IVRSystem::_GetEyeToHeadTransform::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetEyeToHeadTransform::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetTimeSinceLastVsync
#include "OVR/OpenVR/IVRSystem__GetTimeSinceLastVsync.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetTimeSinceLastVsync.Invoke
bool OVR::OpenVR::IVRSystem::_GetTimeSinceLastVsync::Invoke_NEW(float& pfSecondsSinceLastVsync, uint64_t& pulFrameCounter) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetTimeSinceLastVsync::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pfSecondsSinceLastVsync, pulFrameCounter)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pfSecondsSinceLastVsync, pulFrameCounter);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetTimeSinceLastVsync.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetTimeSinceLastVsync::BeginInvoke_NEW(float& pfSecondsSinceLastVsync, uint64_t& pulFrameCounter, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetTimeSinceLastVsync::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pfSecondsSinceLastVsync, pulFrameCounter, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pfSecondsSinceLastVsync, pulFrameCounter, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetTimeSinceLastVsync.EndInvoke
bool OVR::OpenVR::IVRSystem::_GetTimeSinceLastVsync::EndInvoke_NEW(float& pfSecondsSinceLastVsync, uint64_t& pulFrameCounter, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetTimeSinceLastVsync::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pfSecondsSinceLastVsync, pulFrameCounter, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pfSecondsSinceLastVsync, pulFrameCounter, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetD3D9AdapterIndex
#include "OVR/OpenVR/IVRSystem__GetD3D9AdapterIndex.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetD3D9AdapterIndex.Invoke
int OVR::OpenVR::IVRSystem::_GetD3D9AdapterIndex::Invoke_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetD3D9AdapterIndex::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetD3D9AdapterIndex.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetD3D9AdapterIndex::BeginInvoke_NEW(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetD3D9AdapterIndex::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetD3D9AdapterIndex.EndInvoke
int OVR::OpenVR::IVRSystem::_GetD3D9AdapterIndex::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetD3D9AdapterIndex::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetDXGIOutputInfo
#include "OVR/OpenVR/IVRSystem__GetDXGIOutputInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetDXGIOutputInfo.Invoke
void OVR::OpenVR::IVRSystem::_GetDXGIOutputInfo::Invoke_NEW(int& pnAdapterIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetDXGIOutputInfo::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnAdapterIndex)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetDXGIOutputInfo.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetDXGIOutputInfo::BeginInvoke_NEW(int& pnAdapterIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetDXGIOutputInfo::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnAdapterIndex, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pnAdapterIndex, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetDXGIOutputInfo.EndInvoke
void OVR::OpenVR::IVRSystem::_GetDXGIOutputInfo::EndInvoke_NEW(int& pnAdapterIndex, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetDXGIOutputInfo::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnAdapterIndex, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetOutputDevice
#include "OVR/OpenVR/IVRSystem__GetOutputDevice.hpp"
// Including type: OVR.OpenVR.ETextureType
#include "OVR/OpenVR/ETextureType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetOutputDevice.Invoke
void OVR::OpenVR::IVRSystem::_GetOutputDevice::Invoke_NEW(uint64_t& pnDevice, OVR::OpenVR::ETextureType textureType, System::IntPtr pInstance) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetOutputDevice::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnDevice, textureType, pInstance)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnDevice, textureType, pInstance);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetOutputDevice.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetOutputDevice::BeginInvoke_NEW(uint64_t& pnDevice, OVR::OpenVR::ETextureType textureType, System::IntPtr pInstance, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetOutputDevice::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnDevice, textureType, pInstance, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pnDevice, textureType, pInstance, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetOutputDevice.EndInvoke
void OVR::OpenVR::IVRSystem::_GetOutputDevice::EndInvoke_NEW(uint64_t& pnDevice, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetOutputDevice::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnDevice, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnDevice, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_IsDisplayOnDesktop
#include "OVR/OpenVR/IVRSystem__IsDisplayOnDesktop.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_IsDisplayOnDesktop.Invoke
bool OVR::OpenVR::IVRSystem::_IsDisplayOnDesktop::Invoke_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_IsDisplayOnDesktop::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_IsDisplayOnDesktop.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_IsDisplayOnDesktop::BeginInvoke_NEW(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_IsDisplayOnDesktop::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_IsDisplayOnDesktop.EndInvoke
bool OVR::OpenVR::IVRSystem::_IsDisplayOnDesktop::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_IsDisplayOnDesktop::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_SetDisplayVisibility
#include "OVR/OpenVR/IVRSystem__SetDisplayVisibility.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_SetDisplayVisibility.Invoke
bool OVR::OpenVR::IVRSystem::_SetDisplayVisibility::Invoke_NEW(bool bIsVisibleOnDesktop) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_SetDisplayVisibility::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bIsVisibleOnDesktop)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bIsVisibleOnDesktop);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_SetDisplayVisibility.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_SetDisplayVisibility::BeginInvoke_NEW(bool bIsVisibleOnDesktop, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_SetDisplayVisibility::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(bIsVisibleOnDesktop, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, bIsVisibleOnDesktop, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_SetDisplayVisibility.EndInvoke
bool OVR::OpenVR::IVRSystem::_SetDisplayVisibility::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_SetDisplayVisibility::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetDeviceToAbsoluteTrackingPose
#include "OVR/OpenVR/IVRSystem__GetDeviceToAbsoluteTrackingPose.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetDeviceToAbsoluteTrackingPose.Invoke
void OVR::OpenVR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::Invoke_NEW(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, ::Array<OVR::OpenVR::TrackedDevicePose_t>*& pTrackedDevicePoseArray, uint unTrackedDevicePoseArrayCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray, unTrackedDevicePoseArrayCount)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray, unTrackedDevicePoseArrayCount);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetDeviceToAbsoluteTrackingPose.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::BeginInvoke_NEW(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, ::Array<OVR::OpenVR::TrackedDevicePose_t>*& pTrackedDevicePoseArray, uint unTrackedDevicePoseArrayCount, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray, unTrackedDevicePoseArrayCount, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eOrigin, fPredictedSecondsToPhotonsFromNow, pTrackedDevicePoseArray, unTrackedDevicePoseArrayCount, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetDeviceToAbsoluteTrackingPose.EndInvoke
void OVR::OpenVR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetDeviceToAbsoluteTrackingPose::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_ResetSeatedZeroPose
#include "OVR/OpenVR/IVRSystem__ResetSeatedZeroPose.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_ResetSeatedZeroPose.Invoke
void OVR::OpenVR::IVRSystem::_ResetSeatedZeroPose::Invoke_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_ResetSeatedZeroPose::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_ResetSeatedZeroPose.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_ResetSeatedZeroPose::BeginInvoke_NEW(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_ResetSeatedZeroPose::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_ResetSeatedZeroPose.EndInvoke
void OVR::OpenVR::IVRSystem::_ResetSeatedZeroPose::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_ResetSeatedZeroPose::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetSeatedZeroPoseToStandingAbsoluteTrackingPose
#include "OVR/OpenVR/IVRSystem__GetSeatedZeroPoseToStandingAbsoluteTrackingPose.hpp"
// Including type: OVR.OpenVR.HmdMatrix34_t
#include "OVR/OpenVR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetSeatedZeroPoseToStandingAbsoluteTrackingPose.Invoke
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::Invoke_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetSeatedZeroPoseToStandingAbsoluteTrackingPose.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::BeginInvoke_NEW(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetSeatedZeroPoseToStandingAbsoluteTrackingPose.EndInvoke
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetSeatedZeroPoseToStandingAbsoluteTrackingPose::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetRawZeroPoseToStandingAbsoluteTrackingPose
#include "OVR/OpenVR/IVRSystem__GetRawZeroPoseToStandingAbsoluteTrackingPose.hpp"
// Including type: OVR.OpenVR.HmdMatrix34_t
#include "OVR/OpenVR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetRawZeroPoseToStandingAbsoluteTrackingPose.Invoke
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::Invoke_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetRawZeroPoseToStandingAbsoluteTrackingPose.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::BeginInvoke_NEW(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetRawZeroPoseToStandingAbsoluteTrackingPose.EndInvoke
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetRawZeroPoseToStandingAbsoluteTrackingPose::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetSortedTrackedDeviceIndicesOfClass
#include "OVR/OpenVR/IVRSystem__GetSortedTrackedDeviceIndicesOfClass.hpp"
// Including type: OVR.OpenVR.ETrackedDeviceClass
#include "OVR/OpenVR/ETrackedDeviceClass.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetSortedTrackedDeviceIndicesOfClass.Invoke
uint OVR::OpenVR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::Invoke_NEW(OVR::OpenVR::ETrackedDeviceClass eTrackedDeviceClass, ::Array<uint>*& punTrackedDeviceIndexArray, uint unTrackedDeviceIndexArrayCount, uint unRelativeToTrackedDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eTrackedDeviceClass, punTrackedDeviceIndexArray, unTrackedDeviceIndexArrayCount, unRelativeToTrackedDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, eTrackedDeviceClass, punTrackedDeviceIndexArray, unTrackedDeviceIndexArrayCount, unRelativeToTrackedDeviceIndex);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetSortedTrackedDeviceIndicesOfClass.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::BeginInvoke_NEW(OVR::OpenVR::ETrackedDeviceClass eTrackedDeviceClass, ::Array<uint>*& punTrackedDeviceIndexArray, uint unTrackedDeviceIndexArrayCount, uint unRelativeToTrackedDeviceIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eTrackedDeviceClass, punTrackedDeviceIndexArray, unTrackedDeviceIndexArrayCount, unRelativeToTrackedDeviceIndex, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eTrackedDeviceClass, punTrackedDeviceIndexArray, unTrackedDeviceIndexArrayCount, unRelativeToTrackedDeviceIndex, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetSortedTrackedDeviceIndicesOfClass.EndInvoke
uint OVR::OpenVR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetSortedTrackedDeviceIndicesOfClass::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetTrackedDeviceActivityLevel
#include "OVR/OpenVR/IVRSystem__GetTrackedDeviceActivityLevel.hpp"
// Including type: OVR.OpenVR.EDeviceActivityLevel
#include "OVR/OpenVR/EDeviceActivityLevel.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetTrackedDeviceActivityLevel.Invoke
OVR::OpenVR::EDeviceActivityLevel OVR::OpenVR::IVRSystem::_GetTrackedDeviceActivityLevel::Invoke_NEW(uint unDeviceId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetTrackedDeviceActivityLevel::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceId)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EDeviceActivityLevel, false>(this, ___internal__method, unDeviceId);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetTrackedDeviceActivityLevel.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetTrackedDeviceActivityLevel::BeginInvoke_NEW(uint unDeviceId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetTrackedDeviceActivityLevel::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceId, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetTrackedDeviceActivityLevel.EndInvoke
OVR::OpenVR::EDeviceActivityLevel OVR::OpenVR::IVRSystem::_GetTrackedDeviceActivityLevel::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetTrackedDeviceActivityLevel::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EDeviceActivityLevel, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_ApplyTransform
#include "OVR/OpenVR/IVRSystem__ApplyTransform.hpp"
// Including type: OVR.OpenVR.TrackedDevicePose_t
#include "OVR/OpenVR/TrackedDevicePose_t.hpp"
// Including type: OVR.OpenVR.HmdMatrix34_t
#include "OVR/OpenVR/HmdMatrix34_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_ApplyTransform.Invoke
void OVR::OpenVR::IVRSystem::_ApplyTransform::Invoke_NEW(OVR::OpenVR::TrackedDevicePose_t& pOutputPose, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose, OVR::OpenVR::HmdMatrix34_t& pTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_ApplyTransform::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutputPose, pTrackedDevicePose, pTransform)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pOutputPose, pTrackedDevicePose, pTransform);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_ApplyTransform.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_ApplyTransform::BeginInvoke_NEW(OVR::OpenVR::TrackedDevicePose_t& pOutputPose, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose, OVR::OpenVR::HmdMatrix34_t& pTransform, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_ApplyTransform::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutputPose, pTrackedDevicePose, pTransform, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pOutputPose, pTrackedDevicePose, pTransform, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_ApplyTransform.EndInvoke
void OVR::OpenVR::IVRSystem::_ApplyTransform::EndInvoke_NEW(OVR::OpenVR::TrackedDevicePose_t& pOutputPose, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose, OVR::OpenVR::HmdMatrix34_t& pTransform, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_ApplyTransform::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pOutputPose, pTrackedDevicePose, pTransform, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pOutputPose, pTrackedDevicePose, pTransform, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetTrackedDeviceIndexForControllerRole
#include "OVR/OpenVR/IVRSystem__GetTrackedDeviceIndexForControllerRole.hpp"
// Including type: OVR.OpenVR.ETrackedControllerRole
#include "OVR/OpenVR/ETrackedControllerRole.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetTrackedDeviceIndexForControllerRole.Invoke
uint OVR::OpenVR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::Invoke_NEW(OVR::OpenVR::ETrackedControllerRole unDeviceType) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceType)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceType);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetTrackedDeviceIndexForControllerRole.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::BeginInvoke_NEW(OVR::OpenVR::ETrackedControllerRole unDeviceType, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceType, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceType, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetTrackedDeviceIndexForControllerRole.EndInvoke
uint OVR::OpenVR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetTrackedDeviceIndexForControllerRole::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetControllerRoleForTrackedDeviceIndex
#include "OVR/OpenVR/IVRSystem__GetControllerRoleForTrackedDeviceIndex.hpp"
// Including type: OVR.OpenVR.ETrackedControllerRole
#include "OVR/OpenVR/ETrackedControllerRole.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetControllerRoleForTrackedDeviceIndex.Invoke
OVR::OpenVR::ETrackedControllerRole OVR::OpenVR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::Invoke_NEW(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::ETrackedControllerRole, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetControllerRoleForTrackedDeviceIndex.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::BeginInvoke_NEW(uint unDeviceIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetControllerRoleForTrackedDeviceIndex.EndInvoke
OVR::OpenVR::ETrackedControllerRole OVR::OpenVR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetControllerRoleForTrackedDeviceIndex::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::ETrackedControllerRole, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetTrackedDeviceClass
#include "OVR/OpenVR/IVRSystem__GetTrackedDeviceClass.hpp"
// Including type: OVR.OpenVR.ETrackedDeviceClass
#include "OVR/OpenVR/ETrackedDeviceClass.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetTrackedDeviceClass.Invoke
OVR::OpenVR::ETrackedDeviceClass OVR::OpenVR::IVRSystem::_GetTrackedDeviceClass::Invoke_NEW(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetTrackedDeviceClass::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::ETrackedDeviceClass, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetTrackedDeviceClass.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetTrackedDeviceClass::BeginInvoke_NEW(uint unDeviceIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetTrackedDeviceClass::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetTrackedDeviceClass.EndInvoke
OVR::OpenVR::ETrackedDeviceClass OVR::OpenVR::IVRSystem::_GetTrackedDeviceClass::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetTrackedDeviceClass::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::ETrackedDeviceClass, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_IsTrackedDeviceConnected
#include "OVR/OpenVR/IVRSystem__IsTrackedDeviceConnected.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_IsTrackedDeviceConnected.Invoke
bool OVR::OpenVR::IVRSystem::_IsTrackedDeviceConnected::Invoke_NEW(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_IsTrackedDeviceConnected::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_IsTrackedDeviceConnected.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_IsTrackedDeviceConnected::BeginInvoke_NEW(uint unDeviceIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_IsTrackedDeviceConnected::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_IsTrackedDeviceConnected.EndInvoke
bool OVR::OpenVR::IVRSystem::_IsTrackedDeviceConnected::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_IsTrackedDeviceConnected::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetBoolTrackedDeviceProperty
#include "OVR/OpenVR/IVRSystem__GetBoolTrackedDeviceProperty.hpp"
// Including type: OVR.OpenVR.ETrackedDeviceProperty
#include "OVR/OpenVR/ETrackedDeviceProperty.hpp"
// Including type: OVR.OpenVR.ETrackedPropertyError
#include "OVR/OpenVR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetBoolTrackedDeviceProperty.Invoke
bool OVR::OpenVR::IVRSystem::_GetBoolTrackedDeviceProperty::Invoke_NEW(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetBoolTrackedDeviceProperty::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetBoolTrackedDeviceProperty.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetBoolTrackedDeviceProperty::BeginInvoke_NEW(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetBoolTrackedDeviceProperty::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetBoolTrackedDeviceProperty.EndInvoke
bool OVR::OpenVR::IVRSystem::_GetBoolTrackedDeviceProperty::EndInvoke_NEW(OVR::OpenVR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetBoolTrackedDeviceProperty::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetFloatTrackedDeviceProperty
#include "OVR/OpenVR/IVRSystem__GetFloatTrackedDeviceProperty.hpp"
// Including type: OVR.OpenVR.ETrackedDeviceProperty
#include "OVR/OpenVR/ETrackedDeviceProperty.hpp"
// Including type: OVR.OpenVR.ETrackedPropertyError
#include "OVR/OpenVR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetFloatTrackedDeviceProperty.Invoke
float OVR::OpenVR::IVRSystem::_GetFloatTrackedDeviceProperty::Invoke_NEW(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetFloatTrackedDeviceProperty::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetFloatTrackedDeviceProperty.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetFloatTrackedDeviceProperty::BeginInvoke_NEW(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetFloatTrackedDeviceProperty::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetFloatTrackedDeviceProperty.EndInvoke
float OVR::OpenVR::IVRSystem::_GetFloatTrackedDeviceProperty::EndInvoke_NEW(OVR::OpenVR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetFloatTrackedDeviceProperty::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetInt32TrackedDeviceProperty
#include "OVR/OpenVR/IVRSystem__GetInt32TrackedDeviceProperty.hpp"
// Including type: OVR.OpenVR.ETrackedDeviceProperty
#include "OVR/OpenVR/ETrackedDeviceProperty.hpp"
// Including type: OVR.OpenVR.ETrackedPropertyError
#include "OVR/OpenVR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetInt32TrackedDeviceProperty.Invoke
int OVR::OpenVR::IVRSystem::_GetInt32TrackedDeviceProperty::Invoke_NEW(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetInt32TrackedDeviceProperty::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetInt32TrackedDeviceProperty.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetInt32TrackedDeviceProperty::BeginInvoke_NEW(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetInt32TrackedDeviceProperty::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetInt32TrackedDeviceProperty.EndInvoke
int OVR::OpenVR::IVRSystem::_GetInt32TrackedDeviceProperty::EndInvoke_NEW(OVR::OpenVR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetInt32TrackedDeviceProperty::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetUint64TrackedDeviceProperty
#include "OVR/OpenVR/IVRSystem__GetUint64TrackedDeviceProperty.hpp"
// Including type: OVR.OpenVR.ETrackedDeviceProperty
#include "OVR/OpenVR/ETrackedDeviceProperty.hpp"
// Including type: OVR.OpenVR.ETrackedPropertyError
#include "OVR/OpenVR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetUint64TrackedDeviceProperty.Invoke
uint64_t OVR::OpenVR::IVRSystem::_GetUint64TrackedDeviceProperty::Invoke_NEW(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetUint64TrackedDeviceProperty::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetUint64TrackedDeviceProperty.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetUint64TrackedDeviceProperty::BeginInvoke_NEW(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetUint64TrackedDeviceProperty::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetUint64TrackedDeviceProperty.EndInvoke
uint64_t OVR::OpenVR::IVRSystem::_GetUint64TrackedDeviceProperty::EndInvoke_NEW(OVR::OpenVR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetUint64TrackedDeviceProperty::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetMatrix34TrackedDeviceProperty
#include "OVR/OpenVR/IVRSystem__GetMatrix34TrackedDeviceProperty.hpp"
// Including type: OVR.OpenVR.HmdMatrix34_t
#include "OVR/OpenVR/HmdMatrix34_t.hpp"
// Including type: OVR.OpenVR.ETrackedDeviceProperty
#include "OVR/OpenVR/ETrackedDeviceProperty.hpp"
// Including type: OVR.OpenVR.ETrackedPropertyError
#include "OVR/OpenVR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetMatrix34TrackedDeviceProperty.Invoke
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::IVRSystem::_GetMatrix34TrackedDeviceProperty::Invoke_NEW(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetMatrix34TrackedDeviceProperty::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method, unDeviceIndex, prop, pError);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetMatrix34TrackedDeviceProperty.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetMatrix34TrackedDeviceProperty::BeginInvoke_NEW(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, OVR::OpenVR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetMatrix34TrackedDeviceProperty::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetMatrix34TrackedDeviceProperty.EndInvoke
OVR::OpenVR::HmdMatrix34_t OVR::OpenVR::IVRSystem::_GetMatrix34TrackedDeviceProperty::EndInvoke_NEW(OVR::OpenVR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetMatrix34TrackedDeviceProperty::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HmdMatrix34_t, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetArrayTrackedDeviceProperty
#include "OVR/OpenVR/IVRSystem__GetArrayTrackedDeviceProperty.hpp"
// Including type: OVR.OpenVR.ETrackedDeviceProperty
#include "OVR/OpenVR/ETrackedDeviceProperty.hpp"
// Including type: OVR.OpenVR.ETrackedPropertyError
#include "OVR/OpenVR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetArrayTrackedDeviceProperty.Invoke
uint OVR::OpenVR::IVRSystem::_GetArrayTrackedDeviceProperty::Invoke_NEW(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, uint propType, System::IntPtr pBuffer, uint unBufferSize, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetArrayTrackedDeviceProperty::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetArrayTrackedDeviceProperty.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetArrayTrackedDeviceProperty::BeginInvoke_NEW(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, uint propType, System::IntPtr pBuffer, uint unBufferSize, OVR::OpenVR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetArrayTrackedDeviceProperty::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, propType, pBuffer, unBufferSize, pError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetArrayTrackedDeviceProperty.EndInvoke
uint OVR::OpenVR::IVRSystem::_GetArrayTrackedDeviceProperty::EndInvoke_NEW(OVR::OpenVR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetArrayTrackedDeviceProperty::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetStringTrackedDeviceProperty
#include "OVR/OpenVR/IVRSystem__GetStringTrackedDeviceProperty.hpp"
// Including type: OVR.OpenVR.ETrackedDeviceProperty
#include "OVR/OpenVR/ETrackedDeviceProperty.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.ETrackedPropertyError
#include "OVR/OpenVR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetStringTrackedDeviceProperty.Invoke
uint OVR::OpenVR::IVRSystem::_GetStringTrackedDeviceProperty::Invoke_NEW(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, System::Text::StringBuilder* pchValue, uint unBufferSize, OVR::OpenVR::ETrackedPropertyError& pError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetStringTrackedDeviceProperty::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pchValue, unBufferSize, pError)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, prop, pchValue, unBufferSize, pError);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetStringTrackedDeviceProperty.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetStringTrackedDeviceProperty::BeginInvoke_NEW(uint unDeviceIndex, OVR::OpenVR::ETrackedDeviceProperty prop, System::Text::StringBuilder* pchValue, uint unBufferSize, OVR::OpenVR::ETrackedPropertyError& pError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetStringTrackedDeviceProperty::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, prop, pchValue, unBufferSize, pError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, prop, pchValue, unBufferSize, pError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetStringTrackedDeviceProperty.EndInvoke
uint OVR::OpenVR::IVRSystem::_GetStringTrackedDeviceProperty::EndInvoke_NEW(OVR::OpenVR::ETrackedPropertyError& pError, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetStringTrackedDeviceProperty::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pError, result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, pError, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetPropErrorNameFromEnum
#include "OVR/OpenVR/IVRSystem__GetPropErrorNameFromEnum.hpp"
// Including type: OVR.OpenVR.ETrackedPropertyError
#include "OVR/OpenVR/ETrackedPropertyError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetPropErrorNameFromEnum.Invoke
System::IntPtr OVR::OpenVR::IVRSystem::_GetPropErrorNameFromEnum::Invoke_NEW(OVR::OpenVR::ETrackedPropertyError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetPropErrorNameFromEnum::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, error);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetPropErrorNameFromEnum.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetPropErrorNameFromEnum::BeginInvoke_NEW(OVR::OpenVR::ETrackedPropertyError error, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetPropErrorNameFromEnum::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, error, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetPropErrorNameFromEnum.EndInvoke
System::IntPtr OVR::OpenVR::IVRSystem::_GetPropErrorNameFromEnum::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetPropErrorNameFromEnum::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_PollNextEvent
#include "OVR/OpenVR/IVRSystem__PollNextEvent.hpp"
// Including type: OVR.OpenVR.VREvent_t
#include "OVR/OpenVR/VREvent_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_PollNextEvent.Invoke
bool OVR::OpenVR::IVRSystem::_PollNextEvent::Invoke_NEW(OVR::OpenVR::VREvent_t& pEvent, uint uncbVREvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_PollNextEvent::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, uncbVREvent)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, uncbVREvent);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_PollNextEvent.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_PollNextEvent::BeginInvoke_NEW(OVR::OpenVR::VREvent_t& pEvent, uint uncbVREvent, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_PollNextEvent::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, uncbVREvent, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pEvent, uncbVREvent, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_PollNextEvent.EndInvoke
bool OVR::OpenVR::IVRSystem::_PollNextEvent::EndInvoke_NEW(OVR::OpenVR::VREvent_t& pEvent, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_PollNextEvent::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_PollNextEventWithPose
#include "OVR/OpenVR/IVRSystem__PollNextEventWithPose.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.VREvent_t
#include "OVR/OpenVR/VREvent_t.hpp"
// Including type: OVR.OpenVR.TrackedDevicePose_t
#include "OVR/OpenVR/TrackedDevicePose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_PollNextEventWithPose.Invoke
bool OVR::OpenVR::IVRSystem::_PollNextEventWithPose::Invoke_NEW(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::VREvent_t& pEvent, uint uncbVREvent, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_PollNextEventWithPose::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, pEvent, uncbVREvent, pTrackedDevicePose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, pEvent, uncbVREvent, pTrackedDevicePose);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_PollNextEventWithPose.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_PollNextEventWithPose::BeginInvoke_NEW(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, OVR::OpenVR::VREvent_t& pEvent, uint uncbVREvent, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_PollNextEventWithPose::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, pEvent, uncbVREvent, pTrackedDevicePose, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eOrigin, pEvent, uncbVREvent, pTrackedDevicePose, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_PollNextEventWithPose.EndInvoke
bool OVR::OpenVR::IVRSystem::_PollNextEventWithPose::EndInvoke_NEW(OVR::OpenVR::VREvent_t& pEvent, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_PollNextEventWithPose::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pEvent, pTrackedDevicePose, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pEvent, pTrackedDevicePose, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetEventTypeNameFromEnum
#include "OVR/OpenVR/IVRSystem__GetEventTypeNameFromEnum.hpp"
// Including type: OVR.OpenVR.EVREventType
#include "OVR/OpenVR/EVREventType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetEventTypeNameFromEnum.Invoke
System::IntPtr OVR::OpenVR::IVRSystem::_GetEventTypeNameFromEnum::Invoke_NEW(OVR::OpenVR::EVREventType eType) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetEventTypeNameFromEnum::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eType)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eType);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetEventTypeNameFromEnum.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetEventTypeNameFromEnum::BeginInvoke_NEW(OVR::OpenVR::EVREventType eType, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetEventTypeNameFromEnum::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eType, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eType, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetEventTypeNameFromEnum.EndInvoke
System::IntPtr OVR::OpenVR::IVRSystem::_GetEventTypeNameFromEnum::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetEventTypeNameFromEnum::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetHiddenAreaMesh
#include "OVR/OpenVR/IVRSystem__GetHiddenAreaMesh.hpp"
// Including type: OVR.OpenVR.HiddenAreaMesh_t
#include "OVR/OpenVR/HiddenAreaMesh_t.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
// Including type: OVR.OpenVR.EHiddenAreaMeshType
#include "OVR/OpenVR/EHiddenAreaMeshType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetHiddenAreaMesh.Invoke
OVR::OpenVR::HiddenAreaMesh_t OVR::OpenVR::IVRSystem::_GetHiddenAreaMesh::Invoke_NEW(OVR::OpenVR::EVREye eEye, OVR::OpenVR::EHiddenAreaMeshType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetHiddenAreaMesh::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, type)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HiddenAreaMesh_t, false>(this, ___internal__method, eEye, type);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetHiddenAreaMesh.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetHiddenAreaMesh::BeginInvoke_NEW(OVR::OpenVR::EVREye eEye, OVR::OpenVR::EHiddenAreaMeshType type, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetHiddenAreaMesh::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, type, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, type, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetHiddenAreaMesh.EndInvoke
OVR::OpenVR::HiddenAreaMesh_t OVR::OpenVR::IVRSystem::_GetHiddenAreaMesh::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetHiddenAreaMesh::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::HiddenAreaMesh_t, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetControllerState
#include "OVR/OpenVR/IVRSystem__GetControllerState.hpp"
// Including type: OVR.OpenVR.VRControllerState_t
#include "OVR/OpenVR/VRControllerState_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetControllerState.Invoke
bool OVR::OpenVR::IVRSystem::_GetControllerState::Invoke_NEW(uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t& pControllerState, uint unControllerStateSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetControllerState::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, pControllerState, unControllerStateSize)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetControllerState.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetControllerState::BeginInvoke_NEW(uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t& pControllerState, uint unControllerStateSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetControllerState::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, pControllerState, unControllerStateSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unControllerDeviceIndex, pControllerState, unControllerStateSize, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetControllerState.EndInvoke
bool OVR::OpenVR::IVRSystem::_GetControllerState::EndInvoke_NEW(OVR::OpenVR::VRControllerState_t& pControllerState, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetControllerState::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pControllerState, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetControllerStateWithPose
#include "OVR/OpenVR/IVRSystem__GetControllerStateWithPose.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.VRControllerState_t
#include "OVR/OpenVR/VRControllerState_t.hpp"
// Including type: OVR.OpenVR.TrackedDevicePose_t
#include "OVR/OpenVR/TrackedDevicePose_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetControllerStateWithPose.Invoke
bool OVR::OpenVR::IVRSystem::_GetControllerStateWithPose::Invoke_NEW(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t& pControllerState, uint unControllerStateSize, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetControllerStateWithPose::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetControllerStateWithPose.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetControllerStateWithPose::BeginInvoke_NEW(OVR::OpenVR::ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, OVR::OpenVR::VRControllerState_t& pControllerState, uint unControllerStateSize, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetControllerStateWithPose::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eOrigin, unControllerDeviceIndex, pControllerState, unControllerStateSize, pTrackedDevicePose, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetControllerStateWithPose.EndInvoke
bool OVR::OpenVR::IVRSystem::_GetControllerStateWithPose::EndInvoke_NEW(OVR::OpenVR::VRControllerState_t& pControllerState, OVR::OpenVR::TrackedDevicePose_t& pTrackedDevicePose, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetControllerStateWithPose::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pControllerState, pTrackedDevicePose, result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pControllerState, pTrackedDevicePose, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_TriggerHapticPulse
#include "OVR/OpenVR/IVRSystem__TriggerHapticPulse.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_TriggerHapticPulse.Invoke
void OVR::OpenVR::IVRSystem::_TriggerHapticPulse::Invoke_NEW(uint unControllerDeviceIndex, uint unAxisId, uint16_t usDurationMicroSec) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_TriggerHapticPulse::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, unAxisId, usDurationMicroSec)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, unControllerDeviceIndex, unAxisId, usDurationMicroSec);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_TriggerHapticPulse.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_TriggerHapticPulse::BeginInvoke_NEW(uint unControllerDeviceIndex, uint unAxisId, uint16_t usDurationMicroSec, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_TriggerHapticPulse::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unControllerDeviceIndex, unAxisId, usDurationMicroSec, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unControllerDeviceIndex, unAxisId, usDurationMicroSec, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_TriggerHapticPulse.EndInvoke
void OVR::OpenVR::IVRSystem::_TriggerHapticPulse::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_TriggerHapticPulse::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetButtonIdNameFromEnum
#include "OVR/OpenVR/IVRSystem__GetButtonIdNameFromEnum.hpp"
// Including type: OVR.OpenVR.EVRButtonId
#include "OVR/OpenVR/EVRButtonId.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetButtonIdNameFromEnum.Invoke
System::IntPtr OVR::OpenVR::IVRSystem::_GetButtonIdNameFromEnum::Invoke_NEW(OVR::OpenVR::EVRButtonId eButtonId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetButtonIdNameFromEnum::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eButtonId)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eButtonId);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetButtonIdNameFromEnum.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetButtonIdNameFromEnum::BeginInvoke_NEW(OVR::OpenVR::EVRButtonId eButtonId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetButtonIdNameFromEnum::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eButtonId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eButtonId, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetButtonIdNameFromEnum.EndInvoke
System::IntPtr OVR::OpenVR::IVRSystem::_GetButtonIdNameFromEnum::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetButtonIdNameFromEnum::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_GetControllerAxisTypeNameFromEnum
#include "OVR/OpenVR/IVRSystem__GetControllerAxisTypeNameFromEnum.hpp"
// Including type: OVR.OpenVR.EVRControllerAxisType
#include "OVR/OpenVR/EVRControllerAxisType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetControllerAxisTypeNameFromEnum.Invoke
System::IntPtr OVR::OpenVR::IVRSystem::_GetControllerAxisTypeNameFromEnum::Invoke_NEW(OVR::OpenVR::EVRControllerAxisType eAxisType) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetControllerAxisTypeNameFromEnum::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eAxisType)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eAxisType);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetControllerAxisTypeNameFromEnum.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_GetControllerAxisTypeNameFromEnum::BeginInvoke_NEW(OVR::OpenVR::EVRControllerAxisType eAxisType, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetControllerAxisTypeNameFromEnum::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eAxisType, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eAxisType, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_GetControllerAxisTypeNameFromEnum.EndInvoke
System::IntPtr OVR::OpenVR::IVRSystem::_GetControllerAxisTypeNameFromEnum::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_GetControllerAxisTypeNameFromEnum::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_IsInputAvailable
#include "OVR/OpenVR/IVRSystem__IsInputAvailable.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_IsInputAvailable.Invoke
bool OVR::OpenVR::IVRSystem::_IsInputAvailable::Invoke_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_IsInputAvailable::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_IsInputAvailable.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_IsInputAvailable::BeginInvoke_NEW(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_IsInputAvailable::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_IsInputAvailable.EndInvoke
bool OVR::OpenVR::IVRSystem::_IsInputAvailable::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_IsInputAvailable::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_IsSteamVRDrawingControllers
#include "OVR/OpenVR/IVRSystem__IsSteamVRDrawingControllers.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_IsSteamVRDrawingControllers.Invoke
bool OVR::OpenVR::IVRSystem::_IsSteamVRDrawingControllers::Invoke_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_IsSteamVRDrawingControllers::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_IsSteamVRDrawingControllers.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_IsSteamVRDrawingControllers::BeginInvoke_NEW(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_IsSteamVRDrawingControllers::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_IsSteamVRDrawingControllers.EndInvoke
bool OVR::OpenVR::IVRSystem::_IsSteamVRDrawingControllers::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_IsSteamVRDrawingControllers::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_ShouldApplicationPause
#include "OVR/OpenVR/IVRSystem__ShouldApplicationPause.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_ShouldApplicationPause.Invoke
bool OVR::OpenVR::IVRSystem::_ShouldApplicationPause::Invoke_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_ShouldApplicationPause::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_ShouldApplicationPause.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_ShouldApplicationPause::BeginInvoke_NEW(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_ShouldApplicationPause::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_ShouldApplicationPause.EndInvoke
bool OVR::OpenVR::IVRSystem::_ShouldApplicationPause::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_ShouldApplicationPause::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_ShouldApplicationReduceRenderingWork
#include "OVR/OpenVR/IVRSystem__ShouldApplicationReduceRenderingWork.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_ShouldApplicationReduceRenderingWork.Invoke
bool OVR::OpenVR::IVRSystem::_ShouldApplicationReduceRenderingWork::Invoke_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_ShouldApplicationReduceRenderingWork::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_ShouldApplicationReduceRenderingWork.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_ShouldApplicationReduceRenderingWork::BeginInvoke_NEW(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_ShouldApplicationReduceRenderingWork::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_ShouldApplicationReduceRenderingWork.EndInvoke
bool OVR::OpenVR::IVRSystem::_ShouldApplicationReduceRenderingWork::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_ShouldApplicationReduceRenderingWork::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_DriverDebugRequest
#include "OVR/OpenVR/IVRSystem__DriverDebugRequest.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_DriverDebugRequest.Invoke
uint OVR::OpenVR::IVRSystem::_DriverDebugRequest::Invoke_NEW(uint unDeviceIndex, ::Il2CppString* pchRequest, System::Text::StringBuilder* pchResponseBuffer, uint unResponseBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_DriverDebugRequest::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_DriverDebugRequest.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_DriverDebugRequest::BeginInvoke_NEW(uint unDeviceIndex, ::Il2CppString* pchRequest, System::Text::StringBuilder* pchResponseBuffer, uint unResponseBufferSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_DriverDebugRequest::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, pchRequest, pchResponseBuffer, unResponseBufferSize, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_DriverDebugRequest.EndInvoke
uint OVR::OpenVR::IVRSystem::_DriverDebugRequest::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_DriverDebugRequest::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_PerformFirmwareUpdate
#include "OVR/OpenVR/IVRSystem__PerformFirmwareUpdate.hpp"
// Including type: OVR.OpenVR.EVRFirmwareError
#include "OVR/OpenVR/EVRFirmwareError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_PerformFirmwareUpdate.Invoke
OVR::OpenVR::EVRFirmwareError OVR::OpenVR::IVRSystem::_PerformFirmwareUpdate::Invoke_NEW(uint unDeviceIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_PerformFirmwareUpdate::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRFirmwareError, false>(this, ___internal__method, unDeviceIndex);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_PerformFirmwareUpdate.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_PerformFirmwareUpdate::BeginInvoke_NEW(uint unDeviceIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_PerformFirmwareUpdate::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unDeviceIndex, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unDeviceIndex, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_PerformFirmwareUpdate.EndInvoke
OVR::OpenVR::EVRFirmwareError OVR::OpenVR::IVRSystem::_PerformFirmwareUpdate::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_PerformFirmwareUpdate::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRFirmwareError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_AcknowledgeQuit_Exiting
#include "OVR/OpenVR/IVRSystem__AcknowledgeQuit_Exiting.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_AcknowledgeQuit_Exiting.Invoke
void OVR::OpenVR::IVRSystem::_AcknowledgeQuit_Exiting::Invoke_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_AcknowledgeQuit_Exiting::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_AcknowledgeQuit_Exiting.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_AcknowledgeQuit_Exiting::BeginInvoke_NEW(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_AcknowledgeQuit_Exiting::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_AcknowledgeQuit_Exiting.EndInvoke
void OVR::OpenVR::IVRSystem::_AcknowledgeQuit_Exiting::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_AcknowledgeQuit_Exiting::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRSystem/_AcknowledgeQuit_UserPrompt
#include "OVR/OpenVR/IVRSystem__AcknowledgeQuit_UserPrompt.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRSystem/_AcknowledgeQuit_UserPrompt.Invoke
void OVR::OpenVR::IVRSystem::_AcknowledgeQuit_UserPrompt::Invoke_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_AcknowledgeQuit_UserPrompt::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_AcknowledgeQuit_UserPrompt.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRSystem::_AcknowledgeQuit_UserPrompt::BeginInvoke_NEW(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_AcknowledgeQuit_UserPrompt::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRSystem/_AcknowledgeQuit_UserPrompt.EndInvoke
void OVR::OpenVR::IVRSystem::_AcknowledgeQuit_UserPrompt::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRSystem::_AcknowledgeQuit_UserPrompt::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRExtendedDisplay/_GetWindowBounds
#include "OVR/OpenVR/IVRExtendedDisplay__GetWindowBounds.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRExtendedDisplay/_GetWindowBounds.Invoke
void OVR::OpenVR::IVRExtendedDisplay::_GetWindowBounds::Invoke_NEW(int& pnX, int& pnY, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRExtendedDisplay::_GetWindowBounds::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnX, pnY, pnWidth, pnHeight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnX, pnY, pnWidth, pnHeight);
}
// Autogenerated method: OVR.OpenVR.IVRExtendedDisplay/_GetWindowBounds.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRExtendedDisplay::_GetWindowBounds::BeginInvoke_NEW(int& pnX, int& pnY, uint& pnWidth, uint& pnHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRExtendedDisplay::_GetWindowBounds::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnX, pnY, pnWidth, pnHeight, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pnX, pnY, pnWidth, pnHeight, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRExtendedDisplay/_GetWindowBounds.EndInvoke
void OVR::OpenVR::IVRExtendedDisplay::_GetWindowBounds::EndInvoke_NEW(int& pnX, int& pnY, uint& pnWidth, uint& pnHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRExtendedDisplay::_GetWindowBounds::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnX, pnY, pnWidth, pnHeight, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnX, pnY, pnWidth, pnHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRExtendedDisplay/_GetEyeOutputViewport
#include "OVR/OpenVR/IVRExtendedDisplay__GetEyeOutputViewport.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRExtendedDisplay/_GetEyeOutputViewport.Invoke
void OVR::OpenVR::IVRExtendedDisplay::_GetEyeOutputViewport::Invoke_NEW(OVR::OpenVR::EVREye eEye, uint& pnX, uint& pnY, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRExtendedDisplay::_GetEyeOutputViewport::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pnX, pnY, pnWidth, pnHeight)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, eEye, pnX, pnY, pnWidth, pnHeight);
}
// Autogenerated method: OVR.OpenVR.IVRExtendedDisplay/_GetEyeOutputViewport.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRExtendedDisplay::_GetEyeOutputViewport::BeginInvoke_NEW(OVR::OpenVR::EVREye eEye, uint& pnX, uint& pnY, uint& pnWidth, uint& pnHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRExtendedDisplay::_GetEyeOutputViewport::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eEye, pnX, pnY, pnWidth, pnHeight, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eEye, pnX, pnY, pnWidth, pnHeight, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRExtendedDisplay/_GetEyeOutputViewport.EndInvoke
void OVR::OpenVR::IVRExtendedDisplay::_GetEyeOutputViewport::EndInvoke_NEW(uint& pnX, uint& pnY, uint& pnWidth, uint& pnHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRExtendedDisplay::_GetEyeOutputViewport::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnX, pnY, pnWidth, pnHeight, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnX, pnY, pnWidth, pnHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRExtendedDisplay/_GetDXGIOutputInfo
#include "OVR/OpenVR/IVRExtendedDisplay__GetDXGIOutputInfo.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRExtendedDisplay/_GetDXGIOutputInfo.Invoke
void OVR::OpenVR::IVRExtendedDisplay::_GetDXGIOutputInfo::Invoke_NEW(int& pnAdapterIndex, int& pnAdapterOutputIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRExtendedDisplay::_GetDXGIOutputInfo::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnAdapterIndex, pnAdapterOutputIndex)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex, pnAdapterOutputIndex);
}
// Autogenerated method: OVR.OpenVR.IVRExtendedDisplay/_GetDXGIOutputInfo.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRExtendedDisplay::_GetDXGIOutputInfo::BeginInvoke_NEW(int& pnAdapterIndex, int& pnAdapterOutputIndex, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRExtendedDisplay::_GetDXGIOutputInfo::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnAdapterIndex, pnAdapterOutputIndex, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pnAdapterIndex, pnAdapterOutputIndex, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRExtendedDisplay/_GetDXGIOutputInfo.EndInvoke
void OVR::OpenVR::IVRExtendedDisplay::_GetDXGIOutputInfo::EndInvoke_NEW(int& pnAdapterIndex, int& pnAdapterOutputIndex, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRExtendedDisplay::_GetDXGIOutputInfo::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnAdapterIndex, pnAdapterOutputIndex, result)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pnAdapterIndex, pnAdapterOutputIndex, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRTrackedCamera/_GetCameraErrorNameFromEnum
#include "OVR/OpenVR/IVRTrackedCamera__GetCameraErrorNameFromEnum.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraError
#include "OVR/OpenVR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetCameraErrorNameFromEnum.Invoke
System::IntPtr OVR::OpenVR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::Invoke_NEW(OVR::OpenVR::EVRTrackedCameraError eCameraError) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eCameraError)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, eCameraError);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetCameraErrorNameFromEnum.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::BeginInvoke_NEW(OVR::OpenVR::EVRTrackedCameraError eCameraError, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(eCameraError, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, eCameraError, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetCameraErrorNameFromEnum.EndInvoke
System::IntPtr OVR::OpenVR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetCameraErrorNameFromEnum::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRTrackedCamera/_HasCamera
#include "OVR/OpenVR/IVRTrackedCamera__HasCamera.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraError
#include "OVR/OpenVR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_HasCamera.Invoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_HasCamera::Invoke_NEW(uint nDeviceIndex, bool& pHasCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_HasCamera::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, pHasCamera)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, pHasCamera);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_HasCamera.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRTrackedCamera::_HasCamera::BeginInvoke_NEW(uint nDeviceIndex, bool& pHasCamera, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_HasCamera::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, pHasCamera, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, pHasCamera, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_HasCamera.EndInvoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_HasCamera::EndInvoke_NEW(bool& pHasCamera, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_HasCamera::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pHasCamera, result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, pHasCamera, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRTrackedCamera/_GetCameraFrameSize
#include "OVR/OpenVR/IVRTrackedCamera__GetCameraFrameSize.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraError
#include "OVR/OpenVR/EVRTrackedCameraError.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraFrameType
#include "OVR/OpenVR/EVRTrackedCameraFrameType.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetCameraFrameSize.Invoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_GetCameraFrameSize::Invoke_NEW(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, uint& pnWidth, uint& pnHeight, uint& pnFrameBufferSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetCameraFrameSize::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, pnWidth, pnHeight, pnFrameBufferSize)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pnWidth, pnHeight, pnFrameBufferSize);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetCameraFrameSize.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRTrackedCamera::_GetCameraFrameSize::BeginInvoke_NEW(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, uint& pnWidth, uint& pnHeight, uint& pnFrameBufferSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetCameraFrameSize::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, pnWidth, pnHeight, pnFrameBufferSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, eFrameType, pnWidth, pnHeight, pnFrameBufferSize, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetCameraFrameSize.EndInvoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_GetCameraFrameSize::EndInvoke_NEW(uint& pnWidth, uint& pnHeight, uint& pnFrameBufferSize, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetCameraFrameSize::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pnWidth, pnHeight, pnFrameBufferSize, result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, pnWidth, pnHeight, pnFrameBufferSize, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRTrackedCamera/_GetCameraIntrinsics
#include "OVR/OpenVR/IVRTrackedCamera__GetCameraIntrinsics.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraError
#include "OVR/OpenVR/EVRTrackedCameraError.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraFrameType
#include "OVR/OpenVR/EVRTrackedCameraFrameType.hpp"
// Including type: OVR.OpenVR.HmdVector2_t
#include "OVR/OpenVR/HmdVector2_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetCameraIntrinsics.Invoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_GetCameraIntrinsics::Invoke_NEW(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, OVR::OpenVR::HmdVector2_t& pFocalLength, OVR::OpenVR::HmdVector2_t& pCenter) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetCameraIntrinsics::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, pFocalLength, pCenter)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pFocalLength, pCenter);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetCameraIntrinsics.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRTrackedCamera::_GetCameraIntrinsics::BeginInvoke_NEW(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, OVR::OpenVR::HmdVector2_t& pFocalLength, OVR::OpenVR::HmdVector2_t& pCenter, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetCameraIntrinsics::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, pFocalLength, pCenter, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, eFrameType, pFocalLength, pCenter, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetCameraIntrinsics.EndInvoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_GetCameraIntrinsics::EndInvoke_NEW(OVR::OpenVR::HmdVector2_t& pFocalLength, OVR::OpenVR::HmdVector2_t& pCenter, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetCameraIntrinsics::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pFocalLength, pCenter, result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, pFocalLength, pCenter, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRTrackedCamera/_GetCameraProjection
#include "OVR/OpenVR/IVRTrackedCamera__GetCameraProjection.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraError
#include "OVR/OpenVR/EVRTrackedCameraError.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraFrameType
#include "OVR/OpenVR/EVRTrackedCameraFrameType.hpp"
// Including type: OVR.OpenVR.HmdMatrix44_t
#include "OVR/OpenVR/HmdMatrix44_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetCameraProjection.Invoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_GetCameraProjection::Invoke_NEW(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, OVR::OpenVR::HmdMatrix44_t& pProjection) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetCameraProjection::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, flZNear, flZFar, pProjection)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, flZNear, flZFar, pProjection);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetCameraProjection.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRTrackedCamera::_GetCameraProjection::BeginInvoke_NEW(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, OVR::OpenVR::HmdMatrix44_t& pProjection, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetCameraProjection::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, flZNear, flZFar, pProjection, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, eFrameType, flZNear, flZFar, pProjection, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetCameraProjection.EndInvoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_GetCameraProjection::EndInvoke_NEW(OVR::OpenVR::HmdMatrix44_t& pProjection, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetCameraProjection::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pProjection, result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, pProjection, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRTrackedCamera/_AcquireVideoStreamingService
#include "OVR/OpenVR/IVRTrackedCamera__AcquireVideoStreamingService.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraError
#include "OVR/OpenVR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_AcquireVideoStreamingService.Invoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_AcquireVideoStreamingService::Invoke_NEW(uint nDeviceIndex, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_AcquireVideoStreamingService::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, pHandle)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, pHandle);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_AcquireVideoStreamingService.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRTrackedCamera::_AcquireVideoStreamingService::BeginInvoke_NEW(uint nDeviceIndex, uint64_t& pHandle, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_AcquireVideoStreamingService::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, pHandle, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, pHandle, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_AcquireVideoStreamingService.EndInvoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_AcquireVideoStreamingService::EndInvoke_NEW(uint64_t& pHandle, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_AcquireVideoStreamingService::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pHandle, result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, pHandle, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRTrackedCamera/_ReleaseVideoStreamingService
#include "OVR/OpenVR/IVRTrackedCamera__ReleaseVideoStreamingService.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraError
#include "OVR/OpenVR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_ReleaseVideoStreamingService.Invoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamingService::Invoke_NEW(uint64_t hTrackedCamera) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamingService::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_ReleaseVideoStreamingService.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamingService::BeginInvoke_NEW(uint64_t hTrackedCamera, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamingService::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, hTrackedCamera, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_ReleaseVideoStreamingService.EndInvoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamingService::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamingService::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamFrameBuffer
#include "OVR/OpenVR/IVRTrackedCamera__GetVideoStreamFrameBuffer.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraError
#include "OVR/OpenVR/EVRTrackedCameraError.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraFrameType
#include "OVR/OpenVR/EVRTrackedCameraFrameType.hpp"
// Including type: OVR.OpenVR.CameraVideoStreamFrameHeader_t
#include "OVR/OpenVR/CameraVideoStreamFrameHeader_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamFrameBuffer.Invoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::Invoke_NEW(uint64_t hTrackedCamera, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pFrameBuffer, uint nFrameBufferSize, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, pFrameHeader, nFrameHeaderSize)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamFrameBuffer.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::BeginInvoke_NEW(uint64_t hTrackedCamera, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pFrameBuffer, uint nFrameBufferSize, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, pFrameHeader, nFrameHeaderSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, pFrameHeader, nFrameHeaderSize, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamFrameBuffer.EndInvoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::EndInvoke_NEW(OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamFrameBuffer::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pFrameHeader, result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, pFrameHeader, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamTextureSize
#include "OVR/OpenVR/IVRTrackedCamera__GetVideoStreamTextureSize.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraError
#include "OVR/OpenVR/EVRTrackedCameraError.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraFrameType
#include "OVR/OpenVR/EVRTrackedCameraFrameType.hpp"
// Including type: OVR.OpenVR.VRTextureBounds_t
#include "OVR/OpenVR/VRTextureBounds_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamTextureSize.Invoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureSize::Invoke_NEW(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, OVR::OpenVR::VRTextureBounds_t& pTextureBounds, uint& pnWidth, uint& pnHeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureSize::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, pTextureBounds, pnWidth, pnHeight)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, nDeviceIndex, eFrameType, pTextureBounds, pnWidth, pnHeight);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamTextureSize.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureSize::BeginInvoke_NEW(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, OVR::OpenVR::VRTextureBounds_t& pTextureBounds, uint& pnWidth, uint& pnHeight, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureSize::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(nDeviceIndex, eFrameType, pTextureBounds, pnWidth, pnHeight, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, nDeviceIndex, eFrameType, pTextureBounds, pnWidth, pnHeight, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamTextureSize.EndInvoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureSize::EndInvoke_NEW(OVR::OpenVR::VRTextureBounds_t& pTextureBounds, uint& pnWidth, uint& pnHeight, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureSize::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pTextureBounds, pnWidth, pnHeight, result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, pTextureBounds, pnWidth, pnHeight, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamTextureD3D11
#include "OVR/OpenVR/IVRTrackedCamera__GetVideoStreamTextureD3D11.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraError
#include "OVR/OpenVR/EVRTrackedCameraError.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraFrameType
#include "OVR/OpenVR/EVRTrackedCameraFrameType.hpp"
// Including type: OVR.OpenVR.CameraVideoStreamFrameHeader_t
#include "OVR/OpenVR/CameraVideoStreamFrameHeader_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamTextureD3D11.Invoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::Invoke_NEW(uint64_t hTrackedCamera, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, eFrameType, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, pFrameHeader, nFrameHeaderSize)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamTextureD3D11.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::BeginInvoke_NEW(uint64_t hTrackedCamera, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, eFrameType, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, pFrameHeader, nFrameHeaderSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, hTrackedCamera, eFrameType, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, pFrameHeader, nFrameHeaderSize, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamTextureD3D11.EndInvoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::EndInvoke_NEW(System::IntPtr& ppD3D11ShaderResourceView, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureD3D11::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ppD3D11ShaderResourceView, pFrameHeader, result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, ppD3D11ShaderResourceView, pFrameHeader, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamTextureGL
#include "OVR/OpenVR/IVRTrackedCamera__GetVideoStreamTextureGL.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraError
#include "OVR/OpenVR/EVRTrackedCameraError.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraFrameType
#include "OVR/OpenVR/EVRTrackedCameraFrameType.hpp"
// Including type: OVR.OpenVR.CameraVideoStreamFrameHeader_t
#include "OVR/OpenVR/CameraVideoStreamFrameHeader_t.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamTextureGL.Invoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureGL::Invoke_NEW(uint64_t hTrackedCamera, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, uint& pglTextureId, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureGL::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, eFrameType, pglTextureId, pFrameHeader, nFrameHeaderSize)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, eFrameType, pglTextureId, pFrameHeader, nFrameHeaderSize);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamTextureGL.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureGL::BeginInvoke_NEW(uint64_t hTrackedCamera, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, uint& pglTextureId, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureGL::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, eFrameType, pglTextureId, pFrameHeader, nFrameHeaderSize, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, hTrackedCamera, eFrameType, pglTextureId, pFrameHeader, nFrameHeaderSize, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamTextureGL.EndInvoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureGL::EndInvoke_NEW(uint& pglTextureId, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureGL::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pglTextureId, pFrameHeader, result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, pglTextureId, pFrameHeader, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRTrackedCamera/_ReleaseVideoStreamTextureGL
#include "OVR/OpenVR/IVRTrackedCamera__ReleaseVideoStreamTextureGL.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraError
#include "OVR/OpenVR/EVRTrackedCameraError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_ReleaseVideoStreamTextureGL.Invoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::Invoke_NEW(uint64_t hTrackedCamera, uint glTextureId) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, glTextureId)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, hTrackedCamera, glTextureId);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_ReleaseVideoStreamTextureGL.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::BeginInvoke_NEW(uint64_t hTrackedCamera, uint glTextureId, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(hTrackedCamera, glTextureId, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, hTrackedCamera, glTextureId, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRTrackedCamera/_ReleaseVideoStreamTextureGL.EndInvoke
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRTrackedCameraError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRApplications/_AddApplicationManifest
#include "OVR/OpenVR/IVRApplications__AddApplicationManifest.hpp"
// Including type: OVR.OpenVR.EVRApplicationError
#include "OVR/OpenVR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRApplications/_AddApplicationManifest.Invoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_AddApplicationManifest::Invoke_NEW(::Il2CppString* pchApplicationManifestFullPath, bool bTemporary) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_AddApplicationManifest::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchApplicationManifestFullPath, bTemporary)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath, bTemporary);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_AddApplicationManifest.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRApplications::_AddApplicationManifest::BeginInvoke_NEW(::Il2CppString* pchApplicationManifestFullPath, bool bTemporary, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_AddApplicationManifest::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchApplicationManifestFullPath, bTemporary, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchApplicationManifestFullPath, bTemporary, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_AddApplicationManifest.EndInvoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_AddApplicationManifest::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_AddApplicationManifest::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRApplications/_RemoveApplicationManifest
#include "OVR/OpenVR/IVRApplications__RemoveApplicationManifest.hpp"
// Including type: OVR.OpenVR.EVRApplicationError
#include "OVR/OpenVR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRApplications/_RemoveApplicationManifest.Invoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_RemoveApplicationManifest::Invoke_NEW(::Il2CppString* pchApplicationManifestFullPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_RemoveApplicationManifest::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchApplicationManifestFullPath)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchApplicationManifestFullPath);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_RemoveApplicationManifest.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRApplications::_RemoveApplicationManifest::BeginInvoke_NEW(::Il2CppString* pchApplicationManifestFullPath, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_RemoveApplicationManifest::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchApplicationManifestFullPath, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchApplicationManifestFullPath, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_RemoveApplicationManifest.EndInvoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_RemoveApplicationManifest::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_RemoveApplicationManifest::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRApplications/_IsApplicationInstalled
#include "OVR/OpenVR/IVRApplications__IsApplicationInstalled.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRApplications/_IsApplicationInstalled.Invoke
bool OVR::OpenVR::IVRApplications::_IsApplicationInstalled::Invoke_NEW(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_IsApplicationInstalled::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_IsApplicationInstalled.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRApplications::_IsApplicationInstalled::BeginInvoke_NEW(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_IsApplicationInstalled::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_IsApplicationInstalled.EndInvoke
bool OVR::OpenVR::IVRApplications::_IsApplicationInstalled::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_IsApplicationInstalled::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRApplications/_GetApplicationCount
#include "OVR/OpenVR/IVRApplications__GetApplicationCount.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRApplications/_GetApplicationCount.Invoke
uint OVR::OpenVR::IVRApplications::_GetApplicationCount::Invoke_NEW() {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_GetApplicationCount::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_GetApplicationCount.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRApplications::_GetApplicationCount::BeginInvoke_NEW(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_GetApplicationCount::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_GetApplicationCount.EndInvoke
uint OVR::OpenVR::IVRApplications::_GetApplicationCount::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_GetApplicationCount::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRApplications/_GetApplicationKeyByIndex
#include "OVR/OpenVR/IVRApplications__GetApplicationKeyByIndex.hpp"
// Including type: OVR.OpenVR.EVRApplicationError
#include "OVR/OpenVR/EVRApplicationError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRApplications/_GetApplicationKeyByIndex.Invoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_GetApplicationKeyByIndex::Invoke_NEW(uint unApplicationIndex, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_GetApplicationKeyByIndex::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_GetApplicationKeyByIndex.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRApplications::_GetApplicationKeyByIndex::BeginInvoke_NEW(uint unApplicationIndex, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_GetApplicationKeyByIndex::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unApplicationIndex, pchAppKeyBuffer, unAppKeyBufferLen, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_GetApplicationKeyByIndex.EndInvoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_GetApplicationKeyByIndex::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_GetApplicationKeyByIndex::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRApplications/_GetApplicationKeyByProcessId
#include "OVR/OpenVR/IVRApplications__GetApplicationKeyByProcessId.hpp"
// Including type: OVR.OpenVR.EVRApplicationError
#include "OVR/OpenVR/EVRApplicationError.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRApplications/_GetApplicationKeyByProcessId.Invoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_GetApplicationKeyByProcessId::Invoke_NEW(uint unProcessId, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_GetApplicationKeyByProcessId::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unProcessId, pchAppKeyBuffer, unAppKeyBufferLen)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, unProcessId, pchAppKeyBuffer, unAppKeyBufferLen);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_GetApplicationKeyByProcessId.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRApplications::_GetApplicationKeyByProcessId::BeginInvoke_NEW(uint unProcessId, System::Text::StringBuilder* pchAppKeyBuffer, uint unAppKeyBufferLen, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_GetApplicationKeyByProcessId::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(unProcessId, pchAppKeyBuffer, unAppKeyBufferLen, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, unProcessId, pchAppKeyBuffer, unAppKeyBufferLen, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_GetApplicationKeyByProcessId.EndInvoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_GetApplicationKeyByProcessId::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_GetApplicationKeyByProcessId::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRApplications/_LaunchApplication
#include "OVR/OpenVR/IVRApplications__LaunchApplication.hpp"
// Including type: OVR.OpenVR.EVRApplicationError
#include "OVR/OpenVR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRApplications/_LaunchApplication.Invoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_LaunchApplication::Invoke_NEW(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_LaunchApplication::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_LaunchApplication.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRApplications::_LaunchApplication::BeginInvoke_NEW(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_LaunchApplication::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_LaunchApplication.EndInvoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_LaunchApplication::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_LaunchApplication::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRApplications/_LaunchTemplateApplication
#include "OVR/OpenVR/IVRApplications__LaunchTemplateApplication.hpp"
// Including type: OVR.OpenVR.EVRApplicationError
#include "OVR/OpenVR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRApplications/_LaunchTemplateApplication.Invoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_LaunchTemplateApplication::Invoke_NEW(::Il2CppString* pchTemplateAppKey, ::Il2CppString* pchNewAppKey, ::Array<OVR::OpenVR::AppOverrideKeys_t>*& pKeys, uint unKeys) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_LaunchTemplateApplication::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchTemplateAppKey, pchNewAppKey, pKeys, unKeys)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchTemplateAppKey, pchNewAppKey, pKeys, unKeys);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_LaunchTemplateApplication.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRApplications::_LaunchTemplateApplication::BeginInvoke_NEW(::Il2CppString* pchTemplateAppKey, ::Il2CppString* pchNewAppKey, ::Array<OVR::OpenVR::AppOverrideKeys_t>*& pKeys, uint unKeys, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_LaunchTemplateApplication::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchTemplateAppKey, pchNewAppKey, pKeys, unKeys, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchTemplateAppKey, pchNewAppKey, pKeys, unKeys, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_LaunchTemplateApplication.EndInvoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_LaunchTemplateApplication::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_LaunchTemplateApplication::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRApplications/_LaunchApplicationFromMimeType
#include "OVR/OpenVR/IVRApplications__LaunchApplicationFromMimeType.hpp"
// Including type: OVR.OpenVR.EVRApplicationError
#include "OVR/OpenVR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRApplications/_LaunchApplicationFromMimeType.Invoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_LaunchApplicationFromMimeType::Invoke_NEW(::Il2CppString* pchMimeType, ::Il2CppString* pchArgs) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_LaunchApplicationFromMimeType::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchMimeType, pchArgs)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchMimeType, pchArgs);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_LaunchApplicationFromMimeType.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRApplications::_LaunchApplicationFromMimeType::BeginInvoke_NEW(::Il2CppString* pchMimeType, ::Il2CppString* pchArgs, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_LaunchApplicationFromMimeType::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchMimeType, pchArgs, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchMimeType, pchArgs, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_LaunchApplicationFromMimeType.EndInvoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_LaunchApplicationFromMimeType::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_LaunchApplicationFromMimeType::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRApplications/_LaunchDashboardOverlay
#include "OVR/OpenVR/IVRApplications__LaunchDashboardOverlay.hpp"
// Including type: OVR.OpenVR.EVRApplicationError
#include "OVR/OpenVR/EVRApplicationError.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRApplications/_LaunchDashboardOverlay.Invoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_LaunchDashboardOverlay::Invoke_NEW(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_LaunchDashboardOverlay::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_LaunchDashboardOverlay.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRApplications::_LaunchDashboardOverlay::BeginInvoke_NEW(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_LaunchDashboardOverlay::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_LaunchDashboardOverlay.EndInvoke
OVR::OpenVR::EVRApplicationError OVR::OpenVR::IVRApplications::_LaunchDashboardOverlay::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_LaunchDashboardOverlay::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRApplicationError, false>(this, ___internal__method, result);
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRApplications/_CancelApplicationLaunch
#include "OVR/OpenVR/IVRApplications__CancelApplicationLaunch.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRApplications/_CancelApplicationLaunch.Invoke
bool OVR::OpenVR::IVRApplications::_CancelApplicationLaunch::Invoke_NEW(::Il2CppString* pchAppKey) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_CancelApplicationLaunch::Invoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pchAppKey);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_CancelApplicationLaunch.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRApplications::_CancelApplicationLaunch::BeginInvoke_NEW(::Il2CppString* pchAppKey, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_CancelApplicationLaunch::BeginInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchAppKey, callback, object)));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, pchAppKey, callback, object);
}
// Autogenerated method: OVR.OpenVR.IVRApplications/_CancelApplicationLaunch.EndInvoke
bool OVR::OpenVR::IVRApplications::_CancelApplicationLaunch::EndInvoke_NEW(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::IVRApplications::_CancelApplicationLaunch::EndInvoke_NEW");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(result)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, result);
}
