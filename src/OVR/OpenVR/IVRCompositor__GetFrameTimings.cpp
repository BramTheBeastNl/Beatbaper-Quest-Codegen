// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRCompositor/_GetFrameTimings
#include "OVR/OpenVR/IVRCompositor__GetFrameTimings.hpp"
// Including type: OVR.OpenVR.Compositor_FrameTiming
#include "OVR/OpenVR/Compositor_FrameTiming.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.IVRCompositor/_GetFrameTimings..ctor
OVR::OpenVR::IVRCompositor::_GetFrameTimings* OVR::OpenVR::IVRCompositor::_GetFrameTimings::New_ctor(::CsObject* object, System::IntPtr method) {
  return (IVRCompositor::_GetFrameTimings*)THROW_UNLESS(il2cpp_utils::New("OVR.OpenVR", "IVRCompositor/_GetFrameTimings", object, method));
}
// Autogenerated method: OVR.OpenVR.IVRCompositor/_GetFrameTimings.Invoke
uint OVR::OpenVR::IVRCompositor::_GetFrameTimings::Invoke(OVR::OpenVR::Compositor_FrameTiming& pTiming, uint nFrames) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "Invoke", pTiming, nFrames));
}
// Autogenerated method: OVR.OpenVR.IVRCompositor/_GetFrameTimings.BeginInvoke
System::IAsyncResult* OVR::OpenVR::IVRCompositor::_GetFrameTimings::BeginInvoke(OVR::OpenVR::Compositor_FrameTiming& pTiming, uint nFrames, System::AsyncCallback* callback, ::CsObject* object) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::IAsyncResult*>(this, "BeginInvoke", pTiming, nFrames, callback, object));
}
// Autogenerated method: OVR.OpenVR.IVRCompositor/_GetFrameTimings.EndInvoke
uint OVR::OpenVR::IVRCompositor::_GetFrameTimings::EndInvoke(OVR::OpenVR::Compositor_FrameTiming& pTiming, System::IAsyncResult* result) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "EndInvoke", pTiming, result));
}
