// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.OpenVRInterop
#include "OVR/OpenVR/OpenVRInterop.hpp"
// Including type: OVR.OpenVR.EVRInitError
#include "OVR/OpenVR/EVRInitError.hpp"
// Including type: OVR.OpenVR.EVRApplicationType
#include "OVR/OpenVR/EVRApplicationType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.OpenVRInterop.InitInternal
uint OVR::OpenVR::OpenVRInterop::InitInternal(OVR::OpenVR::EVRInitError& peError, OVR::OpenVR::EVRApplicationType eApplicationType) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("OpenVRInterop").WithContext("InitInternal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "InitInternal", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, eApplicationType)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, peError, eApplicationType);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.InitInternal2
uint OVR::OpenVR::OpenVRInterop::InitInternal2(OVR::OpenVR::EVRInitError& peError, OVR::OpenVR::EVRApplicationType eApplicationType, ::Il2CppString*& pStartupInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("OpenVRInterop").WithContext("InitInternal2");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "InitInternal2", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(peError, eApplicationType, pStartupInfo)));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, peError, eApplicationType, pStartupInfo);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.ShutdownInternal
void OVR::OpenVR::OpenVRInterop::ShutdownInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("OpenVRInterop").WithContext("ShutdownInternal");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "ShutdownInternal", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.IsHmdPresent
bool OVR::OpenVR::OpenVRInterop::IsHmdPresent() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("OpenVRInterop").WithContext("IsHmdPresent");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "IsHmdPresent", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.IsRuntimeInstalled
bool OVR::OpenVR::OpenVRInterop::IsRuntimeInstalled() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("OpenVRInterop").WithContext("IsRuntimeInstalled");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "IsRuntimeInstalled", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.GetStringForHmdError
System::IntPtr OVR::OpenVR::OpenVRInterop::GetStringForHmdError(OVR::OpenVR::EVRInitError error) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("OpenVRInterop").WithContext("GetStringForHmdError");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "GetStringForHmdError", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(error)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, error);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.GetGenericInterface
System::IntPtr OVR::OpenVR::OpenVRInterop::GetGenericInterface(::Il2CppString*& pchInterfaceVersion, OVR::OpenVR::EVRInitError& peError) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("OpenVRInterop").WithContext("GetGenericInterface");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "GetGenericInterface", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchInterfaceVersion, peError)));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pchInterfaceVersion, peError);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.IsInterfaceVersionValid
bool OVR::OpenVR::OpenVRInterop::IsInterfaceVersionValid(::Il2CppString*& pchInterfaceVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("OpenVRInterop").WithContext("IsInterfaceVersionValid");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "IsInterfaceVersionValid", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(pchInterfaceVersion)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pchInterfaceVersion);
}
// Autogenerated method: OVR.OpenVR.OpenVRInterop.GetInitToken
uint OVR::OpenVR::OpenVRInterop::GetInitToken() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("OpenVRInterop").WithContext("GetInitToken");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("OVR.OpenVR", "OpenVRInterop", "GetInitToken", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<uint, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
