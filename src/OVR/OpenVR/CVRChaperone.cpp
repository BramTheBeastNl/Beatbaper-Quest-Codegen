// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: OVR.OpenVR.CVRChaperone
#include "OVR/OpenVR/CVRChaperone.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVR.OpenVR.ChaperoneCalibrationState
#include "OVR/OpenVR/ChaperoneCalibrationState.hpp"
// Including type: OVR.OpenVR.HmdQuad_t
#include "OVR/OpenVR/HmdQuad_t.hpp"
// Including type: OVR.OpenVR.HmdColor_t
#include "OVR/OpenVR/HmdColor_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRChaperone..ctor
OVR::OpenVR::CVRChaperone* OVR::OpenVR::CVRChaperone::New_ctor(System::IntPtr pInterface) {
  return THROW_UNLESS(il2cpp_utils::New<CVRChaperone*>(pInterface));
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.GetCalibrationState
OVR::OpenVR::ChaperoneCalibrationState OVR::OpenVR::CVRChaperone::GetCalibrationState() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::ChaperoneCalibrationState>(this, "GetCalibrationState"));
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.GetPlayAreaSize
bool OVR::OpenVR::CVRChaperone::GetPlayAreaSize(float& pSizeX, float& pSizeZ) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetPlayAreaSize", pSizeX, pSizeZ));
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.GetPlayAreaRect
bool OVR::OpenVR::CVRChaperone::GetPlayAreaRect(OVR::OpenVR::HmdQuad_t& rect) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetPlayAreaRect", rect));
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.ReloadInfo
void OVR::OpenVR::CVRChaperone::ReloadInfo() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ReloadInfo"));
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.SetSceneColor
void OVR::OpenVR::CVRChaperone::SetSceneColor(OVR::OpenVR::HmdColor_t color) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetSceneColor", color));
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.GetBoundsColor
void OVR::OpenVR::CVRChaperone::GetBoundsColor(OVR::OpenVR::HmdColor_t& pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, OVR::OpenVR::HmdColor_t& pOutputCameraColor) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GetBoundsColor", pOutputColorArray, nNumOutputColors, flCollisionBoundsFadeDistance, pOutputCameraColor));
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.AreBoundsVisible
bool OVR::OpenVR::CVRChaperone::AreBoundsVisible() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "AreBoundsVisible"));
}
// Autogenerated method: OVR.OpenVR.CVRChaperone.ForceBoundsVisible
void OVR::OpenVR::CVRChaperone::ForceBoundsVisible(bool bForce) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ForceBoundsVisible", bForce));
}
