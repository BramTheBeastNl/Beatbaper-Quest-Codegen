// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRCompositor
#include "OVR/OpenVR/CVRCompositor.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.EVRCompositorError
#include "OVR/OpenVR/EVRCompositorError.hpp"
// Including type: OVR.OpenVR.TrackedDevicePose_t
#include "OVR/OpenVR/TrackedDevicePose_t.hpp"
// Including type: OVR.OpenVR.EVREye
#include "OVR/OpenVR/EVREye.hpp"
// Including type: OVR.OpenVR.Texture_t
#include "OVR/OpenVR/Texture_t.hpp"
// Including type: OVR.OpenVR.VRTextureBounds_t
#include "OVR/OpenVR/VRTextureBounds_t.hpp"
// Including type: OVR.OpenVR.EVRSubmitFlags
#include "OVR/OpenVR/EVRSubmitFlags.hpp"
// Including type: OVR.OpenVR.Compositor_FrameTiming
#include "OVR/OpenVR/Compositor_FrameTiming.hpp"
// Including type: OVR.OpenVR.Compositor_CumulativeStats
#include "OVR/OpenVR/Compositor_CumulativeStats.hpp"
// Including type: OVR.OpenVR.HmdColor_t
#include "OVR/OpenVR/HmdColor_t.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.EVRCompositorTimingMode
#include "OVR/OpenVR/EVRCompositorTimingMode.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRCompositor..ctor
OVR::OpenVR::CVRCompositor* OVR::OpenVR::CVRCompositor::New_ctor(System::IntPtr pInterface) {
  return (CVRCompositor*)THROW_UNLESS(il2cpp_utils::New("OVR.OpenVR", "CVRCompositor", pInterface));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.SetTrackingSpace
void OVR::OpenVR::CVRCompositor::SetTrackingSpace(OVR::OpenVR::ETrackingUniverseOrigin eOrigin) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetTrackingSpace", eOrigin));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetTrackingSpace
OVR::OpenVR::ETrackingUniverseOrigin OVR::OpenVR::CVRCompositor::GetTrackingSpace() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::ETrackingUniverseOrigin>(this, "GetTrackingSpace"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.WaitGetPoses
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::WaitGetPoses(::Array<OVR::OpenVR::TrackedDevicePose_t>* pRenderPoseArray, ::Array<OVR::OpenVR::TrackedDevicePose_t>* pGamePoseArray) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRCompositorError>(this, "WaitGetPoses", pRenderPoseArray, pGamePoseArray));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetLastPoses
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::GetLastPoses(::Array<OVR::OpenVR::TrackedDevicePose_t>* pRenderPoseArray, ::Array<OVR::OpenVR::TrackedDevicePose_t>* pGamePoseArray) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRCompositorError>(this, "GetLastPoses", pRenderPoseArray, pGamePoseArray));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetLastPoseForTrackedDeviceIndex
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, OVR::OpenVR::TrackedDevicePose_t& pOutputPose, OVR::OpenVR::TrackedDevicePose_t& pOutputGamePose) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRCompositorError>(this, "GetLastPoseForTrackedDeviceIndex", unDeviceIndex, pOutputPose, pOutputGamePose));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.Submit
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::Submit(OVR::OpenVR::EVREye eEye, OVR::OpenVR::Texture_t& pTexture, OVR::OpenVR::VRTextureBounds_t& pBounds, OVR::OpenVR::EVRSubmitFlags nSubmitFlags) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRCompositorError>(this, "Submit", eEye, pTexture, pBounds, nSubmitFlags));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ClearLastSubmittedFrame
void OVR::OpenVR::CVRCompositor::ClearLastSubmittedFrame() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ClearLastSubmittedFrame"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.PostPresentHandoff
void OVR::OpenVR::CVRCompositor::PostPresentHandoff() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "PostPresentHandoff"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetFrameTiming
bool OVR::OpenVR::CVRCompositor::GetFrameTiming(OVR::OpenVR::Compositor_FrameTiming& pTiming, uint unFramesAgo) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "GetFrameTiming", pTiming, unFramesAgo));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetFrameTimings
uint OVR::OpenVR::CVRCompositor::GetFrameTimings(OVR::OpenVR::Compositor_FrameTiming& pTiming, uint nFrames) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetFrameTimings", pTiming, nFrames));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetFrameTimeRemaining
float OVR::OpenVR::CVRCompositor::GetFrameTimeRemaining() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetFrameTimeRemaining"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetCumulativeStats
void OVR::OpenVR::CVRCompositor::GetCumulativeStats(OVR::OpenVR::Compositor_CumulativeStats& pStats, uint nStatsSizeInBytes) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GetCumulativeStats", pStats, nStatsSizeInBytes));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.FadeToColor
void OVR::OpenVR::CVRCompositor::FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FadeToColor", fSeconds, fRed, fGreen, fBlue, fAlpha, bBackground));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetCurrentFadeColor
OVR::OpenVR::HmdColor_t OVR::OpenVR::CVRCompositor::GetCurrentFadeColor(bool bBackground) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::HmdColor_t>(this, "GetCurrentFadeColor", bBackground));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.FadeGrid
void OVR::OpenVR::CVRCompositor::FadeGrid(float fSeconds, bool bFadeIn) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FadeGrid", fSeconds, bFadeIn));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetCurrentGridAlpha
float OVR::OpenVR::CVRCompositor::GetCurrentGridAlpha() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetCurrentGridAlpha"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.SetSkyboxOverride
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::SetSkyboxOverride(::Array<OVR::OpenVR::Texture_t>* pTextures) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRCompositorError>(this, "SetSkyboxOverride", pTextures));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ClearSkyboxOverride
void OVR::OpenVR::CVRCompositor::ClearSkyboxOverride() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ClearSkyboxOverride"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.CompositorBringToFront
void OVR::OpenVR::CVRCompositor::CompositorBringToFront() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CompositorBringToFront"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.CompositorGoToBack
void OVR::OpenVR::CVRCompositor::CompositorGoToBack() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CompositorGoToBack"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.CompositorQuit
void OVR::OpenVR::CVRCompositor::CompositorQuit() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CompositorQuit"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.IsFullscreen
bool OVR::OpenVR::CVRCompositor::IsFullscreen() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsFullscreen"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetCurrentSceneFocusProcess
uint OVR::OpenVR::CVRCompositor::GetCurrentSceneFocusProcess() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetCurrentSceneFocusProcess"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetLastFrameRenderer
uint OVR::OpenVR::CVRCompositor::GetLastFrameRenderer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetLastFrameRenderer"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.CanRenderScene
bool OVR::OpenVR::CVRCompositor::CanRenderScene() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "CanRenderScene"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ShowMirrorWindow
void OVR::OpenVR::CVRCompositor::ShowMirrorWindow() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ShowMirrorWindow"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.HideMirrorWindow
void OVR::OpenVR::CVRCompositor::HideMirrorWindow() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "HideMirrorWindow"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.IsMirrorWindowVisible
bool OVR::OpenVR::CVRCompositor::IsMirrorWindowVisible() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsMirrorWindowVisible"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.CompositorDumpImages
void OVR::OpenVR::CVRCompositor::CompositorDumpImages() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CompositorDumpImages"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ShouldAppRenderWithLowResources
bool OVR::OpenVR::CVRCompositor::ShouldAppRenderWithLowResources() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ShouldAppRenderWithLowResources"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ForceInterleavedReprojectionOn
void OVR::OpenVR::CVRCompositor::ForceInterleavedReprojectionOn(bool bOverride) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ForceInterleavedReprojectionOn", bOverride));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ForceReconnectProcess
void OVR::OpenVR::CVRCompositor::ForceReconnectProcess() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ForceReconnectProcess"));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.SuspendRendering
void OVR::OpenVR::CVRCompositor::SuspendRendering(bool bSuspend) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SuspendRendering", bSuspend));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetMirrorTextureD3D11
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::GetMirrorTextureD3D11(OVR::OpenVR::EVREye eEye, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRCompositorError>(this, "GetMirrorTextureD3D11", eEye, pD3D11DeviceOrResource, ppD3D11ShaderResourceView));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ReleaseMirrorTextureD3D11
void OVR::OpenVR::CVRCompositor::ReleaseMirrorTextureD3D11(System::IntPtr pD3D11ShaderResourceView) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ReleaseMirrorTextureD3D11", pD3D11ShaderResourceView));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetMirrorTextureGL
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::GetMirrorTextureGL(OVR::OpenVR::EVREye eEye, uint& pglTextureId, System::IntPtr pglSharedTextureHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRCompositorError>(this, "GetMirrorTextureGL", eEye, pglTextureId, pglSharedTextureHandle));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.ReleaseSharedGLTexture
bool OVR::OpenVR::CVRCompositor::ReleaseSharedGLTexture(uint glTextureId, System::IntPtr glSharedTextureHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ReleaseSharedGLTexture", glTextureId, glSharedTextureHandle));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.LockGLSharedTextureForAccess
void OVR::OpenVR::CVRCompositor::LockGLSharedTextureForAccess(System::IntPtr glSharedTextureHandle) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LockGLSharedTextureForAccess", glSharedTextureHandle));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.UnlockGLSharedTextureForAccess
void OVR::OpenVR::CVRCompositor::UnlockGLSharedTextureForAccess(System::IntPtr glSharedTextureHandle) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UnlockGLSharedTextureForAccess", glSharedTextureHandle));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetVulkanInstanceExtensionsRequired
uint OVR::OpenVR::CVRCompositor::GetVulkanInstanceExtensionsRequired(System::Text::StringBuilder* pchValue, uint unBufferSize) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetVulkanInstanceExtensionsRequired", pchValue, unBufferSize));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.GetVulkanDeviceExtensionsRequired
uint OVR::OpenVR::CVRCompositor::GetVulkanDeviceExtensionsRequired(System::IntPtr pPhysicalDevice, System::Text::StringBuilder* pchValue, uint unBufferSize) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>(this, "GetVulkanDeviceExtensionsRequired", pPhysicalDevice, pchValue, unBufferSize));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.SetExplicitTimingMode
void OVR::OpenVR::CVRCompositor::SetExplicitTimingMode(OVR::OpenVR::EVRCompositorTimingMode eTimingMode) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetExplicitTimingMode", eTimingMode));
}
// Autogenerated method: OVR.OpenVR.CVRCompositor.SubmitExplicitTimingData
OVR::OpenVR::EVRCompositorError OVR::OpenVR::CVRCompositor::SubmitExplicitTimingData() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRCompositorError>(this, "SubmitExplicitTimingData"));
}
