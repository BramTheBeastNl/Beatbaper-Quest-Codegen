// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRInput
#include "OVR/OpenVR/CVRInput.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.VRActiveActionSet_t
#include "OVR/OpenVR/VRActiveActionSet_t.hpp"
// Including type: OVR.OpenVR.InputDigitalActionData_t
#include "OVR/OpenVR/InputDigitalActionData_t.hpp"
// Including type: OVR.OpenVR.InputAnalogActionData_t
#include "OVR/OpenVR/InputAnalogActionData_t.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.InputPoseActionData_t
#include "OVR/OpenVR/InputPoseActionData_t.hpp"
// Including type: OVR.OpenVR.InputSkeletalActionData_t
#include "OVR/OpenVR/InputSkeletalActionData_t.hpp"
// Including type: OVR.OpenVR.EVRSkeletalTransformSpace
#include "OVR/OpenVR/EVRSkeletalTransformSpace.hpp"
// Including type: OVR.OpenVR.EVRSkeletalMotionRange
#include "OVR/OpenVR/EVRSkeletalMotionRange.hpp"
// Including type: OVR.OpenVR.VRBoneTransform_t
#include "OVR/OpenVR/VRBoneTransform_t.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.InputOriginInfo_t
#include "OVR/OpenVR/InputOriginInfo_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRInput..ctor
OVR::OpenVR::CVRInput* OVR::OpenVR::CVRInput::New_ctor(System::IntPtr pInterface) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext(".ctor");
  return THROW_UNLESS(::il2cpp_utils::New<CVRInput*>(pInterface));
}
// Autogenerated method: OVR.OpenVR.CVRInput.SetActionManifestPath
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::SetActionManifestPath(::Il2CppString* pchActionManifestPath) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("SetActionManifestPath");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "SetActionManifestPath", {}, ::il2cpp_utils::ExtractTypes(pchActionManifestPath)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchActionManifestPath);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetActionSetHandle
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetActionSetHandle(::Il2CppString* pchActionSetName, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("GetActionSetHandle");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "GetActionSetHandle", {}, ::il2cpp_utils::ExtractTypes(pchActionSetName, pHandle)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchActionSetName, pHandle);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetActionHandle
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetActionHandle(::Il2CppString* pchActionName, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("GetActionHandle");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "GetActionHandle", {}, ::il2cpp_utils::ExtractTypes(pchActionName, pHandle)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchActionName, pHandle);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetInputSourceHandle
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetInputSourceHandle(::Il2CppString* pchInputSourcePath, uint64_t& pHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("GetInputSourceHandle");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "GetInputSourceHandle", {}, ::il2cpp_utils::ExtractTypes(pchInputSourcePath, pHandle)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pchInputSourcePath, pHandle);
}
// Autogenerated method: OVR.OpenVR.CVRInput.UpdateActionState
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::UpdateActionState(::Array<OVR::OpenVR::VRActiveActionSet_t>* pSets, uint unSizeOfVRSelectedActionSet_t) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("UpdateActionState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "UpdateActionState", {}, ::il2cpp_utils::ExtractTypes(pSets, unSizeOfVRSelectedActionSet_t)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetDigitalActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetDigitalActionData(uint64_t action, OVR::OpenVR::InputDigitalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("GetDigitalActionData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "GetDigitalActionData", {}, ::il2cpp_utils::ExtractTypes(action, pActionData, unActionDataSize, ulRestrictToDevice)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetAnalogActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetAnalogActionData(uint64_t action, OVR::OpenVR::InputAnalogActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("GetAnalogActionData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "GetAnalogActionData", {}, ::il2cpp_utils::ExtractTypes(action, pActionData, unActionDataSize, ulRestrictToDevice)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetPoseActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetPoseActionData(uint64_t action, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, OVR::OpenVR::InputPoseActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("GetPoseActionData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "GetPoseActionData", {}, ::il2cpp_utils::ExtractTypes(action, eOrigin, fPredictedSecondsFromNow, pActionData, unActionDataSize, ulRestrictToDevice)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, eOrigin, fPredictedSecondsFromNow, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetSkeletalActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetSkeletalActionData(uint64_t action, OVR::OpenVR::InputSkeletalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("GetSkeletalActionData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "GetSkeletalActionData", {}, ::il2cpp_utils::ExtractTypes(action, pActionData, unActionDataSize, ulRestrictToDevice)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, pActionData, unActionDataSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetSkeletalBoneData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetSkeletalBoneData(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, ::Array<OVR::OpenVR::VRBoneTransform_t>* pTransformArray, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("GetSkeletalBoneData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "GetSkeletalBoneData", {}, ::il2cpp_utils::ExtractTypes(action, eTransformSpace, eMotionRange, pTransformArray, ulRestrictToDevice)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, pTransformArray, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetSkeletalBoneDataCompressed
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetSkeletalBoneDataCompressed(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, System::IntPtr pvCompressedData, uint unCompressedSize, uint& punRequiredCompressedSize, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("GetSkeletalBoneDataCompressed");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "GetSkeletalBoneDataCompressed", {}, ::il2cpp_utils::ExtractTypes(action, eTransformSpace, eMotionRange, pvCompressedData, unCompressedSize, punRequiredCompressedSize, ulRestrictToDevice)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, eTransformSpace, eMotionRange, pvCompressedData, unCompressedSize, punRequiredCompressedSize, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.DecompressSkeletalBoneData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::DecompressSkeletalBoneData(System::IntPtr pvCompressedBuffer, uint unCompressedBufferSize, OVR::OpenVR::EVRSkeletalTransformSpace& peTransformSpace, ::Array<OVR::OpenVR::VRBoneTransform_t>* pTransformArray) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("DecompressSkeletalBoneData");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "DecompressSkeletalBoneData", {}, ::il2cpp_utils::ExtractTypes(pvCompressedBuffer, unCompressedBufferSize, peTransformSpace, pTransformArray)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pvCompressedBuffer, unCompressedBufferSize, peTransformSpace, pTransformArray);
}
// Autogenerated method: OVR.OpenVR.CVRInput.TriggerHapticVibrationAction
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::TriggerHapticVibrationAction(uint64_t action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, uint64_t ulRestrictToDevice) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("TriggerHapticVibrationAction");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "TriggerHapticVibrationAction", {}, ::il2cpp_utils::ExtractTypes(action, fStartSecondsFromNow, fDurationSeconds, fFrequency, fAmplitude, ulRestrictToDevice)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, action, fStartSecondsFromNow, fDurationSeconds, fFrequency, fAmplitude, ulRestrictToDevice);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetActionOrigins
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetActionOrigins(uint64_t actionSetHandle, uint64_t digitalActionHandle, ::Array<uint64_t>* originsOut) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("GetActionOrigins");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "GetActionOrigins", {}, ::il2cpp_utils::ExtractTypes(actionSetHandle, digitalActionHandle, originsOut)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, actionSetHandle, digitalActionHandle, originsOut);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetOriginLocalizedName
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetOriginLocalizedName(uint64_t origin, System::Text::StringBuilder* pchNameArray, uint unNameArraySize) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("GetOriginLocalizedName");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "GetOriginLocalizedName", {}, ::il2cpp_utils::ExtractTypes(origin, pchNameArray, unNameArraySize)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, origin, pchNameArray, unNameArraySize);
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetOriginTrackedDeviceInfo
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetOriginTrackedDeviceInfo(uint64_t origin, OVR::OpenVR::InputOriginInfo_t& pOriginInfo, uint unOriginInfoSize) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("GetOriginTrackedDeviceInfo");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "GetOriginTrackedDeviceInfo", {}, ::il2cpp_utils::ExtractTypes(origin, pOriginInfo, unOriginInfoSize)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, origin, pOriginInfo, unOriginInfoSize);
}
// Autogenerated method: OVR.OpenVR.CVRInput.ShowActionOrigins
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::ShowActionOrigins(uint64_t actionSetHandle, uint64_t ulActionHandle) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("ShowActionOrigins");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "ShowActionOrigins", {}, ::il2cpp_utils::ExtractTypes(actionSetHandle, ulActionHandle)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, actionSetHandle, ulActionHandle);
}
// Autogenerated method: OVR.OpenVR.CVRInput.ShowBindingsForActionSet
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::ShowBindingsForActionSet(::Array<OVR::OpenVR::VRActiveActionSet_t>* pSets, uint unSizeOfVRSelectedActionSet_t, uint64_t originToHighlight) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("OVR::OpenVR").WithContext("CVRInput").WithContext("ShowBindingsForActionSet");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, il2cpp_utils::NoArgClass<OVR::OpenVR::EVRInputError>(), "ShowBindingsForActionSet", {}, ::il2cpp_utils::ExtractTypes(pSets, unSizeOfVRSelectedActionSet_t, originToHighlight)));
  return ::il2cpp_utils::RunMethodThrow<OVR::OpenVR::EVRInputError, false>(this, ___internal__method, pSets, unSizeOfVRSelectedActionSet_t, originToHighlight);
}
