// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRInput
#include "OVR/OpenVR/CVRInput.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVR.OpenVR.EVRInputError
#include "OVR/OpenVR/EVRInputError.hpp"
// Including type: OVR.OpenVR.VRActiveActionSet_t
#include "OVR/OpenVR/VRActiveActionSet_t.hpp"
// Including type: OVR.OpenVR.InputDigitalActionData_t
#include "OVR/OpenVR/InputDigitalActionData_t.hpp"
// Including type: OVR.OpenVR.InputAnalogActionData_t
#include "OVR/OpenVR/InputAnalogActionData_t.hpp"
// Including type: OVR.OpenVR.ETrackingUniverseOrigin
#include "OVR/OpenVR/ETrackingUniverseOrigin.hpp"
// Including type: OVR.OpenVR.InputPoseActionData_t
#include "OVR/OpenVR/InputPoseActionData_t.hpp"
// Including type: OVR.OpenVR.InputSkeletalActionData_t
#include "OVR/OpenVR/InputSkeletalActionData_t.hpp"
// Including type: OVR.OpenVR.EVRSkeletalTransformSpace
#include "OVR/OpenVR/EVRSkeletalTransformSpace.hpp"
// Including type: OVR.OpenVR.EVRSkeletalMotionRange
#include "OVR/OpenVR/EVRSkeletalMotionRange.hpp"
// Including type: OVR.OpenVR.VRBoneTransform_t
#include "OVR/OpenVR/VRBoneTransform_t.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
// Including type: OVR.OpenVR.InputOriginInfo_t
#include "OVR/OpenVR/InputOriginInfo_t.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRInput..ctor
OVR::OpenVR::CVRInput* OVR::OpenVR::CVRInput::New_ctor(System::IntPtr pInterface) {
  return (CVRInput*)THROW_UNLESS(il2cpp_utils::New("OVR.OpenVR", "CVRInput", pInterface));
}
// Autogenerated method: OVR.OpenVR.CVRInput.SetActionManifestPath
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::SetActionManifestPath(::Il2CppString* pchActionManifestPath) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "SetActionManifestPath", pchActionManifestPath));
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetActionSetHandle
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetActionSetHandle(::Il2CppString* pchActionSetName, uint64_t& pHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "GetActionSetHandle", pchActionSetName, pHandle));
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetActionHandle
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetActionHandle(::Il2CppString* pchActionName, uint64_t& pHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "GetActionHandle", pchActionName, pHandle));
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetInputSourceHandle
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetInputSourceHandle(::Il2CppString* pchInputSourcePath, uint64_t& pHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "GetInputSourceHandle", pchInputSourcePath, pHandle));
}
// Autogenerated method: OVR.OpenVR.CVRInput.UpdateActionState
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::UpdateActionState(::Array<OVR::OpenVR::VRActiveActionSet_t>* pSets, uint unSizeOfVRSelectedActionSet_t) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "UpdateActionState", pSets, unSizeOfVRSelectedActionSet_t));
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetDigitalActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetDigitalActionData(uint64_t action, OVR::OpenVR::InputDigitalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "GetDigitalActionData", action, pActionData, unActionDataSize, ulRestrictToDevice));
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetAnalogActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetAnalogActionData(uint64_t action, OVR::OpenVR::InputAnalogActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "GetAnalogActionData", action, pActionData, unActionDataSize, ulRestrictToDevice));
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetPoseActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetPoseActionData(uint64_t action, OVR::OpenVR::ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, OVR::OpenVR::InputPoseActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "GetPoseActionData", action, eOrigin, fPredictedSecondsFromNow, pActionData, unActionDataSize, ulRestrictToDevice));
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetSkeletalActionData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetSkeletalActionData(uint64_t action, OVR::OpenVR::InputSkeletalActionData_t& pActionData, uint unActionDataSize, uint64_t ulRestrictToDevice) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "GetSkeletalActionData", action, pActionData, unActionDataSize, ulRestrictToDevice));
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetSkeletalBoneData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetSkeletalBoneData(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, ::Array<OVR::OpenVR::VRBoneTransform_t>* pTransformArray, uint64_t ulRestrictToDevice) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "GetSkeletalBoneData", action, eTransformSpace, eMotionRange, pTransformArray, ulRestrictToDevice));
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetSkeletalBoneDataCompressed
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetSkeletalBoneDataCompressed(uint64_t action, OVR::OpenVR::EVRSkeletalTransformSpace eTransformSpace, OVR::OpenVR::EVRSkeletalMotionRange eMotionRange, System::IntPtr pvCompressedData, uint unCompressedSize, uint& punRequiredCompressedSize, uint64_t ulRestrictToDevice) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "GetSkeletalBoneDataCompressed", action, eTransformSpace, eMotionRange, pvCompressedData, unCompressedSize, punRequiredCompressedSize, ulRestrictToDevice));
}
// Autogenerated method: OVR.OpenVR.CVRInput.DecompressSkeletalBoneData
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::DecompressSkeletalBoneData(System::IntPtr pvCompressedBuffer, uint unCompressedBufferSize, OVR::OpenVR::EVRSkeletalTransformSpace& peTransformSpace, ::Array<OVR::OpenVR::VRBoneTransform_t>* pTransformArray) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "DecompressSkeletalBoneData", pvCompressedBuffer, unCompressedBufferSize, peTransformSpace, pTransformArray));
}
// Autogenerated method: OVR.OpenVR.CVRInput.TriggerHapticVibrationAction
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::TriggerHapticVibrationAction(uint64_t action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, uint64_t ulRestrictToDevice) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "TriggerHapticVibrationAction", action, fStartSecondsFromNow, fDurationSeconds, fFrequency, fAmplitude, ulRestrictToDevice));
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetActionOrigins
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetActionOrigins(uint64_t actionSetHandle, uint64_t digitalActionHandle, ::Array<uint64_t>* originsOut) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "GetActionOrigins", actionSetHandle, digitalActionHandle, originsOut));
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetOriginLocalizedName
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetOriginLocalizedName(uint64_t origin, System::Text::StringBuilder* pchNameArray, uint unNameArraySize) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "GetOriginLocalizedName", origin, pchNameArray, unNameArraySize));
}
// Autogenerated method: OVR.OpenVR.CVRInput.GetOriginTrackedDeviceInfo
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::GetOriginTrackedDeviceInfo(uint64_t origin, OVR::OpenVR::InputOriginInfo_t& pOriginInfo, uint unOriginInfoSize) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "GetOriginTrackedDeviceInfo", origin, pOriginInfo, unOriginInfoSize));
}
// Autogenerated method: OVR.OpenVR.CVRInput.ShowActionOrigins
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::ShowActionOrigins(uint64_t actionSetHandle, uint64_t ulActionHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "ShowActionOrigins", actionSetHandle, ulActionHandle));
}
// Autogenerated method: OVR.OpenVR.CVRInput.ShowBindingsForActionSet
OVR::OpenVR::EVRInputError OVR::OpenVR::CVRInput::ShowBindingsForActionSet(::Array<OVR::OpenVR::VRActiveActionSet_t>* pSets, uint unSizeOfVRSelectedActionSet_t, uint64_t originToHighlight) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRInputError>(this, "ShowBindingsForActionSet", pSets, unSizeOfVRSelectedActionSet_t, originToHighlight));
}
