// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.CVRTrackedCamera
#include "OVR/OpenVR/CVRTrackedCamera.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraError
#include "OVR/OpenVR/EVRTrackedCameraError.hpp"
// Including type: OVR.OpenVR.EVRTrackedCameraFrameType
#include "OVR/OpenVR/EVRTrackedCameraFrameType.hpp"
// Including type: OVR.OpenVR.HmdVector2_t
#include "OVR/OpenVR/HmdVector2_t.hpp"
// Including type: OVR.OpenVR.HmdMatrix44_t
#include "OVR/OpenVR/HmdMatrix44_t.hpp"
// Including type: OVR.OpenVR.CameraVideoStreamFrameHeader_t
#include "OVR/OpenVR/CameraVideoStreamFrameHeader_t.hpp"
// Including type: OVR.OpenVR.VRTextureBounds_t
#include "OVR/OpenVR/VRTextureBounds_t.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera..ctor
OVR::OpenVR::CVRTrackedCamera* OVR::OpenVR::CVRTrackedCamera::New_ctor(System::IntPtr pInterface) {
  return THROW_UNLESS(il2cpp_utils::New<CVRTrackedCamera*>(pInterface));
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetCameraErrorNameFromEnum
::Il2CppString* OVR::OpenVR::CVRTrackedCamera::GetCameraErrorNameFromEnum(OVR::OpenVR::EVRTrackedCameraError eCameraError) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(this, "GetCameraErrorNameFromEnum", eCameraError));
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.HasCamera
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::HasCamera(uint nDeviceIndex, bool& pHasCamera) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRTrackedCameraError>(this, "HasCamera", nDeviceIndex, pHasCamera));
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetCameraFrameSize
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetCameraFrameSize(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, uint& pnWidth, uint& pnHeight, uint& pnFrameBufferSize) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRTrackedCameraError>(this, "GetCameraFrameSize", nDeviceIndex, eFrameType, pnWidth, pnHeight, pnFrameBufferSize));
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetCameraIntrinsics
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetCameraIntrinsics(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, OVR::OpenVR::HmdVector2_t& pFocalLength, OVR::OpenVR::HmdVector2_t& pCenter) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRTrackedCameraError>(this, "GetCameraIntrinsics", nDeviceIndex, eFrameType, pFocalLength, pCenter));
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetCameraProjection
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetCameraProjection(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, OVR::OpenVR::HmdMatrix44_t& pProjection) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRTrackedCameraError>(this, "GetCameraProjection", nDeviceIndex, eFrameType, flZNear, flZFar, pProjection));
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.AcquireVideoStreamingService
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::AcquireVideoStreamingService(uint nDeviceIndex, uint64_t& pHandle) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRTrackedCameraError>(this, "AcquireVideoStreamingService", nDeviceIndex, pHandle));
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.ReleaseVideoStreamingService
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::ReleaseVideoStreamingService(uint64_t hTrackedCamera) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRTrackedCameraError>(this, "ReleaseVideoStreamingService", hTrackedCamera));
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetVideoStreamFrameBuffer
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetVideoStreamFrameBuffer(uint64_t hTrackedCamera, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pFrameBuffer, uint nFrameBufferSize, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRTrackedCameraError>(this, "GetVideoStreamFrameBuffer", hTrackedCamera, eFrameType, pFrameBuffer, nFrameBufferSize, pFrameHeader, nFrameHeaderSize));
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetVideoStreamTextureSize
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetVideoStreamTextureSize(uint nDeviceIndex, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, OVR::OpenVR::VRTextureBounds_t& pTextureBounds, uint& pnWidth, uint& pnHeight) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRTrackedCameraError>(this, "GetVideoStreamTextureSize", nDeviceIndex, eFrameType, pTextureBounds, pnWidth, pnHeight));
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetVideoStreamTextureD3D11
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetVideoStreamTextureD3D11(uint64_t hTrackedCamera, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, System::IntPtr pD3D11DeviceOrResource, System::IntPtr& ppD3D11ShaderResourceView, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRTrackedCameraError>(this, "GetVideoStreamTextureD3D11", hTrackedCamera, eFrameType, pD3D11DeviceOrResource, ppD3D11ShaderResourceView, pFrameHeader, nFrameHeaderSize));
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.GetVideoStreamTextureGL
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::GetVideoStreamTextureGL(uint64_t hTrackedCamera, OVR::OpenVR::EVRTrackedCameraFrameType eFrameType, uint& pglTextureId, OVR::OpenVR::CameraVideoStreamFrameHeader_t& pFrameHeader, uint nFrameHeaderSize) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRTrackedCameraError>(this, "GetVideoStreamTextureGL", hTrackedCamera, eFrameType, pglTextureId, pFrameHeader, nFrameHeaderSize));
}
// Autogenerated method: OVR.OpenVR.CVRTrackedCamera.ReleaseVideoStreamTextureGL
OVR::OpenVR::EVRTrackedCameraError OVR::OpenVR::CVRTrackedCamera::ReleaseVideoStreamTextureGL(uint64_t hTrackedCamera, uint glTextureId) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<OVR::OpenVR::EVRTrackedCameraError>(this, "ReleaseVideoStreamTextureGL", hTrackedCamera, glTextureId));
}
