// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Color.ToString
::Il2CppString* UnityEngine::Color::ToString(::Il2CppString* format) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::ToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method, format);
}
// Autogenerated method: UnityEngine.Color.Equals
bool UnityEngine::Color::Equals(UnityEngine::Color other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Color.Lerp
UnityEngine::Color UnityEngine::Color::Lerp(UnityEngine::Color a, UnityEngine::Color b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: UnityEngine.Color.LerpUnclamped
UnityEngine::Color UnityEngine::Color::LerpUnclamped(UnityEngine::Color a, UnityEngine::Color b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::LerpUnclamped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "LerpUnclamped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: UnityEngine.Color.RGBMultiplied
UnityEngine::Color UnityEngine::Color::RGBMultiplied(float multiplier) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::RGBMultiplied");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "RGBMultiplied", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiplier)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(*this, ___internal__method, multiplier);
}
// Autogenerated method: UnityEngine.Color.get_red
UnityEngine::Color UnityEngine::Color::get_red() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::get_red");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "get_red", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Color.get_green
UnityEngine::Color UnityEngine::Color::get_green() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::get_green");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "get_green", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Color.get_blue
UnityEngine::Color UnityEngine::Color::get_blue() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::get_blue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "get_blue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Color.get_white
UnityEngine::Color UnityEngine::Color::get_white() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::get_white");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "get_white", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Color.get_black
UnityEngine::Color UnityEngine::Color::get_black() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::get_black");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "get_black", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Color.get_yellow
UnityEngine::Color UnityEngine::Color::get_yellow() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::get_yellow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "get_yellow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Color.get_cyan
UnityEngine::Color UnityEngine::Color::get_cyan() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::get_cyan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "get_cyan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Color.get_magenta
UnityEngine::Color UnityEngine::Color::get_magenta() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::get_magenta");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "get_magenta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Color.get_gray
UnityEngine::Color UnityEngine::Color::get_gray() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::get_gray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "get_gray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Color.get_clear
UnityEngine::Color UnityEngine::Color::get_clear() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::get_clear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "get_clear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Color.get_grayscale
float UnityEngine::Color::get_grayscale() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::get_grayscale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_grayscale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Color.get_linear
UnityEngine::Color UnityEngine::Color::get_linear() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::get_linear");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_linear", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Color.get_maxColorComponent
float UnityEngine::Color::get_maxColorComponent() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::get_maxColorComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_maxColorComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Color.RGBToHSV
void UnityEngine::Color::RGBToHSV(UnityEngine::Color rgbColor, float& H, float& S, float& V) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::RGBToHSV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "RGBToHSV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rgbColor), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rgbColor, H, S, V);
}
// Autogenerated method: UnityEngine.Color.RGBToHSVHelper
void UnityEngine::Color::RGBToHSVHelper(float offset, float dominantcolor, float colorone, float colortwo, float& H, float& S, float& V) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::RGBToHSVHelper");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "RGBToHSVHelper", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(dominantcolor), ::il2cpp_utils::ExtractType(colorone), ::il2cpp_utils::ExtractType(colortwo), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, offset, dominantcolor, colorone, colortwo, H, S, V);
}
// Autogenerated method: UnityEngine.Color.HSVToRGB
UnityEngine::Color UnityEngine::Color::HSVToRGB(float H, float S, float V) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::HSVToRGB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "HSVToRGB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(H), ::il2cpp_utils::ExtractType(S), ::il2cpp_utils::ExtractType(V)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, H, S, V);
}
// Autogenerated method: UnityEngine.Color.HSVToRGB
UnityEngine::Color UnityEngine::Color::HSVToRGB(float H, float S, float V, bool hdr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::HSVToRGB");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "HSVToRGB", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(H), ::il2cpp_utils::ExtractType(S), ::il2cpp_utils::ExtractType(V), ::il2cpp_utils::ExtractType(hdr)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, H, S, V, hdr);
}
// Autogenerated method: UnityEngine.Color.ToString
::Il2CppString* UnityEngine::Color::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Color.GetHashCode
int UnityEngine::Color::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Color.Equals
bool UnityEngine::Color::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Color.op_Addition
UnityEngine::Color UnityEngine::operator+(const UnityEngine::Color& a, const UnityEngine::Color& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Color.op_Subtraction
UnityEngine::Color UnityEngine::operator-(const UnityEngine::Color& a, const UnityEngine::Color& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Color.op_Multiply
UnityEngine::Color UnityEngine::operator*(const UnityEngine::Color& a, const UnityEngine::Color& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Color.op_Multiply
UnityEngine::Color UnityEngine::operator*(const UnityEngine::Color& a, const float& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Color.op_Multiply
UnityEngine::Color UnityEngine::operator*(const float& b, const UnityEngine::Color& a) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(a)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, b, a);
}
// Autogenerated method: UnityEngine.Color.op_Division
UnityEngine::Color UnityEngine::operator/(const UnityEngine::Color& a, const float& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::op_Division");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "op_Division", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Color.op_Equality
bool UnityEngine::operator ==(const UnityEngine::Color& lhs, const UnityEngine::Color& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Color.op_Inequality
bool UnityEngine::operator !=(const UnityEngine::Color& lhs, const UnityEngine::Color& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Writing MetadataGetter for method: Color::Color
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Color::*)(float, float, float, float)>(&Color::Color<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Color::*)(float, float, float, float)>(&Color::Color<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Color::Color
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Color::*)(float, float, float)>(&Color::Color<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Color::*)(float, float, float)>(&Color::Color<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Color::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Color::*)(::Il2CppString*)>(&Color::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Color::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Color::*)(UnityEngine::Color)>(&Color::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: Color::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(UnityEngine::Color, UnityEngine::Color, float)>(&Color::Lerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Color::LerpUnclamped
// Il2CppName: LerpUnclamped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(UnityEngine::Color, UnityEngine::Color, float)>(&Color::LerpUnclamped)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "LerpUnclamped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Color::RGBMultiplied
// Il2CppName: RGBMultiplied
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (Color::*)(float)>(&Color::RGBMultiplied)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "RGBMultiplied", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Color::get_red
// Il2CppName: get_red
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)()>(&Color::get_red)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "get_red", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color::get_green
// Il2CppName: get_green
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)()>(&Color::get_green)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "get_green", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color::get_blue
// Il2CppName: get_blue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)()>(&Color::get_blue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "get_blue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color::get_white
// Il2CppName: get_white
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)()>(&Color::get_white)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "get_white", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color::get_black
// Il2CppName: get_black
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)()>(&Color::get_black)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "get_black", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color::get_yellow
// Il2CppName: get_yellow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)()>(&Color::get_yellow)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "get_yellow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color::get_cyan
// Il2CppName: get_cyan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)()>(&Color::get_cyan)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "get_cyan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color::get_magenta
// Il2CppName: get_magenta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)()>(&Color::get_magenta)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "get_magenta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color::get_gray
// Il2CppName: get_gray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)()>(&Color::get_gray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "get_gray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color::get_clear
// Il2CppName: get_clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)()>(&Color::get_clear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "get_clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color::get_grayscale
// Il2CppName: get_grayscale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Color::*)()>(&Color::get_grayscale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "get_grayscale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color::get_linear
// Il2CppName: get_linear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (Color::*)()>(&Color::get_linear)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "get_linear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color::get_maxColorComponent
// Il2CppName: get_maxColorComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Color::*)()>(&Color::get_maxColorComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "get_maxColorComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color::RGBToHSV
// Il2CppName: RGBToHSV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Color, float&, float&, float&)>(&Color::RGBToHSV)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "RGBToHSV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: Color::RGBToHSVHelper
// Il2CppName: RGBToHSVHelper
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, float, float, float&, float&, float&)>(&Color::RGBToHSVHelper)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "RGBToHSVHelper", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: Color::HSVToRGB
// Il2CppName: HSVToRGB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(float, float, float)>(&Color::HSVToRGB)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "HSVToRGB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Color::HSVToRGB
// Il2CppName: HSVToRGB
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(float, float, float, bool)>(&Color::HSVToRGB)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "HSVToRGB", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Color::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Color::*)()>(&Color::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Color::*)()>(&Color::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Color::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Color::*)(::Il2CppObject*)>(&Color::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Color::operator+
// Il2CppName: op_Addition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(const UnityEngine::Color&, const UnityEngine::Color&)>(&Color::operator+)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "op_Addition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Color&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Color&>()});
  }
};
// Writing MetadataGetter for method: Color::operator-
// Il2CppName: op_Subtraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(const UnityEngine::Color&, const UnityEngine::Color&)>(&Color::operator-)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "op_Subtraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Color&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Color&>()});
  }
};
// Writing MetadataGetter for method: Color::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(const UnityEngine::Color&, const UnityEngine::Color&)>(&Color::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Color&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Color&>()});
  }
};
// Writing MetadataGetter for method: Color::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(const UnityEngine::Color&, const float&)>(&Color::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Color&>(), ::il2cpp_utils::ExtractIndependentType<const float&>()});
  }
};
// Writing MetadataGetter for method: Color::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(const float&, const UnityEngine::Color&)>(&Color::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const float&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Color&>()});
  }
};
// Writing MetadataGetter for method: Color::operator/
// Il2CppName: op_Division
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(const UnityEngine::Color&, const float&)>(&Color::operator/)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "op_Division", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Color&>(), ::il2cpp_utils::ExtractIndependentType<const float&>()});
  }
};
// Writing MetadataGetter for method: Color::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Color&, const UnityEngine::Color&)>(&Color::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Color&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Color&>()});
  }
};
// Writing MetadataGetter for method: Color::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Color&, const UnityEngine::Color&)>(&Color::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Color&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Color&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Color32.Lerp
UnityEngine::Color32 UnityEngine::Color32::Lerp(UnityEngine::Color32 a, UnityEngine::Color32 b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color32::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Color32", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color32, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: UnityEngine.Color32.ToString
::Il2CppString* UnityEngine::Color32::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Color32::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: Color32::Color32
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Color32::*)(uint8_t, uint8_t, uint8_t, uint8_t)>(&Color32::Color32<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color32), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Color32::*)(uint8_t, uint8_t, uint8_t, uint8_t)>(&Color32::Color32<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color32), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>(), ::il2cpp_utils::ExtractIndependentType<uint8_t>()});
  }
};
// Writing MetadataGetter for method: Color32::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color32 (*)(UnityEngine::Color32, UnityEngine::Color32, float)>(&Color32::Lerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color32), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color32>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Color32::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Color32::*)()>(&Color32::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Color32), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Gradient
#include "UnityEngine/Gradient.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Gradient.Init
System::IntPtr UnityEngine::Gradient::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Gradient::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Gradient", "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Gradient.Cleanup
void UnityEngine::Gradient::Cleanup() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Gradient::Cleanup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Cleanup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Gradient.Internal_Equals
bool UnityEngine::Gradient::Internal_Equals(System::IntPtr other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Gradient::Internal_Equals");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Internal_Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Gradient.Evaluate
UnityEngine::Color UnityEngine::Gradient::Evaluate(float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Gradient::Evaluate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Evaluate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, time);
}
// Autogenerated method: UnityEngine.Gradient.get_colorKeys
::Array<UnityEngine::GradientColorKey>* UnityEngine::Gradient::get_colorKeys() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Gradient::get_colorKeys");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_colorKeys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::GradientColorKey>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Gradient.get_alphaKeys
::Array<UnityEngine::GradientAlphaKey>* UnityEngine::Gradient::get_alphaKeys() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Gradient::get_alphaKeys");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_alphaKeys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::GradientAlphaKey>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Gradient.SetKeys
void UnityEngine::Gradient::SetKeys(::Array<UnityEngine::GradientColorKey>* colorKeys, ::Array<UnityEngine::GradientAlphaKey>* alphaKeys) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Gradient::SetKeys");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetKeys", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colorKeys), ::il2cpp_utils::ExtractType(alphaKeys)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, colorKeys, alphaKeys);
}
// Autogenerated method: UnityEngine.Gradient.Equals
bool UnityEngine::Gradient::Equals(UnityEngine::Gradient* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Gradient::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Gradient.Evaluate_Injected
void UnityEngine::Gradient::Evaluate_Injected(float time, UnityEngine::Color& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Gradient::Evaluate_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Evaluate_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time, ret);
}
// Autogenerated method: UnityEngine.Gradient.Finalize
void UnityEngine::Gradient::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Gradient::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Gradient.Equals
bool UnityEngine::Gradient::Equals(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Gradient::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, o);
}
// Autogenerated method: UnityEngine.Gradient.GetHashCode
int UnityEngine::Gradient::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Gradient::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Gradient::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (*)()>(&Gradient::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Gradient*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Gradient::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Gradient::*)()>(&Gradient::Cleanup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Gradient*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Gradient::Internal_Equals
// Il2CppName: Internal_Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Gradient::*)(System::IntPtr)>(&Gradient::Internal_Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Gradient*), "Internal_Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: Gradient::Evaluate
// Il2CppName: Evaluate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (Gradient::*)(float)>(&Gradient::Evaluate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Gradient*), "Evaluate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Gradient::get_colorKeys
// Il2CppName: get_colorKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::GradientColorKey>* (Gradient::*)()>(&Gradient::get_colorKeys)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Gradient*), "get_colorKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Gradient::get_alphaKeys
// Il2CppName: get_alphaKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::GradientAlphaKey>* (Gradient::*)()>(&Gradient::get_alphaKeys)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Gradient*), "get_alphaKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Gradient::SetKeys
// Il2CppName: SetKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Gradient::*)(::Array<UnityEngine::GradientColorKey>*, ::Array<UnityEngine::GradientAlphaKey>*)>(&Gradient::SetKeys)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Gradient*), "SetKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::GradientColorKey>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::GradientAlphaKey>*>()});
  }
};
// Writing MetadataGetter for method: Gradient::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Gradient::*)(UnityEngine::Gradient*)>(&Gradient::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Gradient*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Gradient*>()});
  }
};
// Writing MetadataGetter for method: Gradient::Evaluate_Injected
// Il2CppName: Evaluate_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Gradient::*)(float, UnityEngine::Color&)>(&Gradient::Evaluate_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Gradient*), "Evaluate_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color&>()});
  }
};
// Writing MetadataGetter for method: Gradient::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Gradient::*)()>(&Gradient::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Gradient*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Gradient::*)()>(&Gradient::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Gradient*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Gradient::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Gradient::*)()>(&Gradient::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Gradient*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Gradient::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Gradient::*)(::Il2CppObject*)>(&Gradient::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Gradient*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Gradient::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Gradient::*)()>(&Gradient::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Gradient*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Matrix4x4 zeroMatrix
UnityEngine::Matrix4x4 UnityEngine::Matrix4x4::_get_zeroMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::_get_zeroMatrix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Matrix4x4>("UnityEngine", "Matrix4x4", "zeroMatrix"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Matrix4x4 zeroMatrix
void UnityEngine::Matrix4x4::_set_zeroMatrix(UnityEngine::Matrix4x4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::_set_zeroMatrix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Matrix4x4", "zeroMatrix", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Matrix4x4 identityMatrix
UnityEngine::Matrix4x4 UnityEngine::Matrix4x4::_get_identityMatrix() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::_get_identityMatrix");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Matrix4x4>("UnityEngine", "Matrix4x4", "identityMatrix"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Matrix4x4 identityMatrix
void UnityEngine::Matrix4x4::_set_identityMatrix(UnityEngine::Matrix4x4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::_set_identityMatrix");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Matrix4x4", "identityMatrix", value));
}
// Autogenerated method: UnityEngine.Matrix4x4.GetLossyScale
UnityEngine::Vector3 UnityEngine::Matrix4x4::GetLossyScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::GetLossyScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetLossyScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Matrix4x4.get_lossyScale
UnityEngine::Vector3 UnityEngine::Matrix4x4::get_lossyScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::get_lossyScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_lossyScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Matrix4x4.TRS
UnityEngine::Matrix4x4 UnityEngine::Matrix4x4::TRS(UnityEngine::Vector3 pos, UnityEngine::Quaternion q, UnityEngine::Vector3 s) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::TRS");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Matrix4x4", "TRS", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(q), ::il2cpp_utils::ExtractType(s)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Matrix4x4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pos, q, s);
}
// Autogenerated method: UnityEngine.Matrix4x4.Inverse
UnityEngine::Matrix4x4 UnityEngine::Matrix4x4::Inverse(UnityEngine::Matrix4x4 m) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::Inverse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Matrix4x4", "Inverse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Matrix4x4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, m);
}
// Autogenerated method: UnityEngine.Matrix4x4.get_inverse
UnityEngine::Matrix4x4 UnityEngine::Matrix4x4::get_inverse() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::get_inverse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_inverse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Matrix4x4, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Matrix4x4.Transpose
UnityEngine::Matrix4x4 UnityEngine::Matrix4x4::Transpose(UnityEngine::Matrix4x4 m) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::Transpose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Matrix4x4", "Transpose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Matrix4x4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, m);
}
// Autogenerated method: UnityEngine.Matrix4x4.get_transpose
UnityEngine::Matrix4x4 UnityEngine::Matrix4x4::get_transpose() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::get_transpose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_transpose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Matrix4x4, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Matrix4x4.Ortho
UnityEngine::Matrix4x4 UnityEngine::Matrix4x4::Ortho(float left, float right, float bottom, float top, float zNear, float zFar) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::Ortho");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Matrix4x4", "Ortho", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(bottom), ::il2cpp_utils::ExtractType(top), ::il2cpp_utils::ExtractType(zNear), ::il2cpp_utils::ExtractType(zFar)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Matrix4x4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, bottom, top, zNear, zFar);
}
// Autogenerated method: UnityEngine.Matrix4x4.get_Item
float UnityEngine::Matrix4x4::get_Item(int row, int column) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(row), ::il2cpp_utils::ExtractType(column)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method, row, column);
}
// Autogenerated method: UnityEngine.Matrix4x4.set_Item
void UnityEngine::Matrix4x4::set_Item(int row, int column, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(row), ::il2cpp_utils::ExtractType(column), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, row, column, value);
}
// Autogenerated method: UnityEngine.Matrix4x4.get_Item
float UnityEngine::Matrix4x4::get_Item(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Matrix4x4.set_Item
void UnityEngine::Matrix4x4::set_Item(int index, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, index, value);
}
// Autogenerated method: UnityEngine.Matrix4x4.Equals
bool UnityEngine::Matrix4x4::Equals(UnityEngine::Matrix4x4 other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Matrix4x4.GetColumn
UnityEngine::Vector4 UnityEngine::Matrix4x4::GetColumn(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::GetColumn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetColumn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(*this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Matrix4x4.SetColumn
void UnityEngine::Matrix4x4::SetColumn(int index, UnityEngine::Vector4 column) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::SetColumn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetColumn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(column)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, index, column);
}
// Autogenerated method: UnityEngine.Matrix4x4.MultiplyPoint
UnityEngine::Vector3 UnityEngine::Matrix4x4::MultiplyPoint(UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::MultiplyPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MultiplyPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(*this, ___internal__method, point);
}
// Autogenerated method: UnityEngine.Matrix4x4.MultiplyPoint3x4
UnityEngine::Vector3 UnityEngine::Matrix4x4::MultiplyPoint3x4(UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::MultiplyPoint3x4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MultiplyPoint3x4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(*this, ___internal__method, point);
}
// Autogenerated method: UnityEngine.Matrix4x4.MultiplyVector
UnityEngine::Vector3 UnityEngine::Matrix4x4::MultiplyVector(UnityEngine::Vector3 vector) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::MultiplyVector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MultiplyVector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vector)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(*this, ___internal__method, vector);
}
// Autogenerated method: UnityEngine.Matrix4x4.Rotate
UnityEngine::Matrix4x4 UnityEngine::Matrix4x4::Rotate(UnityEngine::Quaternion q) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::Rotate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Matrix4x4", "Rotate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Matrix4x4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, q);
}
// Autogenerated method: UnityEngine.Matrix4x4.get_identity
UnityEngine::Matrix4x4 UnityEngine::Matrix4x4::get_identity() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::get_identity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Matrix4x4", "get_identity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Matrix4x4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Matrix4x4..cctor
void UnityEngine::Matrix4x4::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Matrix4x4", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Matrix4x4.GetLossyScale_Injected
void UnityEngine::Matrix4x4::GetLossyScale_Injected(UnityEngine::Matrix4x4& _unity_self, UnityEngine::Vector3& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::GetLossyScale_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Matrix4x4", "GetLossyScale_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(_unity_self), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, _unity_self, ret);
}
// Autogenerated method: UnityEngine.Matrix4x4.TRS_Injected
void UnityEngine::Matrix4x4::TRS_Injected(UnityEngine::Vector3& pos, UnityEngine::Quaternion& q, UnityEngine::Vector3& s, UnityEngine::Matrix4x4& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::TRS_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Matrix4x4", "TRS_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(q), ::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pos, q, s, ret);
}
// Autogenerated method: UnityEngine.Matrix4x4.Inverse_Injected
void UnityEngine::Matrix4x4::Inverse_Injected(UnityEngine::Matrix4x4& m, UnityEngine::Matrix4x4& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::Inverse_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Matrix4x4", "Inverse_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, m, ret);
}
// Autogenerated method: UnityEngine.Matrix4x4.Transpose_Injected
void UnityEngine::Matrix4x4::Transpose_Injected(UnityEngine::Matrix4x4& m, UnityEngine::Matrix4x4& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::Transpose_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Matrix4x4", "Transpose_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(m), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, m, ret);
}
// Autogenerated method: UnityEngine.Matrix4x4.Ortho_Injected
void UnityEngine::Matrix4x4::Ortho_Injected(float left, float right, float bottom, float top, float zNear, float zFar, UnityEngine::Matrix4x4& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::Ortho_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Matrix4x4", "Ortho_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(left), ::il2cpp_utils::ExtractType(right), ::il2cpp_utils::ExtractType(bottom), ::il2cpp_utils::ExtractType(top), ::il2cpp_utils::ExtractType(zNear), ::il2cpp_utils::ExtractType(zFar), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, left, right, bottom, top, zNear, zFar, ret);
}
// Autogenerated method: UnityEngine.Matrix4x4.GetHashCode
int UnityEngine::Matrix4x4::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Matrix4x4.Equals
bool UnityEngine::Matrix4x4::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Matrix4x4.ToString
::Il2CppString* UnityEngine::Matrix4x4::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Matrix4x4.op_Multiply
UnityEngine::Matrix4x4 UnityEngine::operator*(const UnityEngine::Matrix4x4& lhs, const UnityEngine::Matrix4x4& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Matrix4x4", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Matrix4x4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Matrix4x4.op_Multiply
UnityEngine::Vector4 UnityEngine::operator*(const UnityEngine::Matrix4x4& lhs, const UnityEngine::Vector4& vector) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Matrix4x4::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Matrix4x4", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(vector)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, vector);
}
// Writing MetadataGetter for method: Matrix4x4::GetLossyScale
// Il2CppName: GetLossyScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Matrix4x4::*)()>(&Matrix4x4::GetLossyScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "GetLossyScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Matrix4x4::get_lossyScale
// Il2CppName: get_lossyScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Matrix4x4::*)()>(&Matrix4x4::get_lossyScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "get_lossyScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Matrix4x4::TRS
// Il2CppName: TRS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (*)(UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Vector3)>(&Matrix4x4::TRS)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "TRS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::Inverse
// Il2CppName: Inverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (*)(UnityEngine::Matrix4x4)>(&Matrix4x4::Inverse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "Inverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::get_inverse
// Il2CppName: get_inverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (Matrix4x4::*)()>(&Matrix4x4::get_inverse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "get_inverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Matrix4x4::Transpose
// Il2CppName: Transpose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (*)(UnityEngine::Matrix4x4)>(&Matrix4x4::Transpose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "Transpose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::get_transpose
// Il2CppName: get_transpose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (Matrix4x4::*)()>(&Matrix4x4::get_transpose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "get_transpose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Matrix4x4::Ortho
// Il2CppName: Ortho
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (*)(float, float, float, float, float, float)>(&Matrix4x4::Ortho)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "Ortho", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::Matrix4x4
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Matrix4x4::*)(UnityEngine::Vector4, UnityEngine::Vector4, UnityEngine::Vector4, UnityEngine::Vector4)>(&Matrix4x4::Matrix4x4<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Matrix4x4::*)(UnityEngine::Vector4, UnityEngine::Vector4, UnityEngine::Vector4, UnityEngine::Vector4)>(&Matrix4x4::Matrix4x4<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Matrix4x4::*)(int, int)>(&Matrix4x4::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Matrix4x4::*)(int, int, float)>(&Matrix4x4::set_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Matrix4x4::*)(int)>(&Matrix4x4::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Matrix4x4::*)(int, float)>(&Matrix4x4::set_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Matrix4x4::*)(UnityEngine::Matrix4x4)>(&Matrix4x4::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::GetColumn
// Il2CppName: GetColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector4 (Matrix4x4::*)(int)>(&Matrix4x4::GetColumn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "GetColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::SetColumn
// Il2CppName: SetColumn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Matrix4x4::*)(int, UnityEngine::Vector4)>(&Matrix4x4::SetColumn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "SetColumn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::MultiplyPoint
// Il2CppName: MultiplyPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Matrix4x4::*)(UnityEngine::Vector3)>(&Matrix4x4::MultiplyPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "MultiplyPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::MultiplyPoint3x4
// Il2CppName: MultiplyPoint3x4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Matrix4x4::*)(UnityEngine::Vector3)>(&Matrix4x4::MultiplyPoint3x4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "MultiplyPoint3x4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::MultiplyVector
// Il2CppName: MultiplyVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Matrix4x4::*)(UnityEngine::Vector3)>(&Matrix4x4::MultiplyVector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "MultiplyVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::Rotate
// Il2CppName: Rotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (*)(UnityEngine::Quaternion)>(&Matrix4x4::Rotate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "Rotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::get_identity
// Il2CppName: get_identity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (*)()>(&Matrix4x4::get_identity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "get_identity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Matrix4x4::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Matrix4x4::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Matrix4x4::GetLossyScale_Injected
// Il2CppName: GetLossyScale_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Matrix4x4&, UnityEngine::Vector3&)>(&Matrix4x4::GetLossyScale_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "GetLossyScale_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::TRS_Injected
// Il2CppName: TRS_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Vector3&, UnityEngine::Quaternion&, UnityEngine::Vector3&, UnityEngine::Matrix4x4&)>(&Matrix4x4::TRS_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "TRS_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::Inverse_Injected
// Il2CppName: Inverse_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Matrix4x4&, UnityEngine::Matrix4x4&)>(&Matrix4x4::Inverse_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "Inverse_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::Transpose_Injected
// Il2CppName: Transpose_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Matrix4x4&, UnityEngine::Matrix4x4&)>(&Matrix4x4::Transpose_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "Transpose_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::Ortho_Injected
// Il2CppName: Ortho_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, float, float, float, float, float, UnityEngine::Matrix4x4&)>(&Matrix4x4::Ortho_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "Ortho_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Matrix4x4&>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Matrix4x4::*)()>(&Matrix4x4::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Matrix4x4::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Matrix4x4::*)(::Il2CppObject*)>(&Matrix4x4::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Matrix4x4::*)()>(&Matrix4x4::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Matrix4x4::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Matrix4x4 (*)(const UnityEngine::Matrix4x4&, const UnityEngine::Matrix4x4&)>(&Matrix4x4::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Matrix4x4&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Matrix4x4&>()});
  }
};
// Writing MetadataGetter for method: Matrix4x4::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector4 (*)(const UnityEngine::Matrix4x4&, const UnityEngine::Vector4&)>(&Matrix4x4::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Matrix4x4), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Matrix4x4&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector4&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kEpsilon
float UnityEngine::Vector3::_get_kEpsilon() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_get_kEpsilon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngine", "Vector3", "kEpsilon"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kEpsilon
void UnityEngine::Vector3::_set_kEpsilon(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_set_kEpsilon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "kEpsilon", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kEpsilonNormalSqrt
float UnityEngine::Vector3::_get_kEpsilonNormalSqrt() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_get_kEpsilonNormalSqrt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngine", "Vector3", "kEpsilonNormalSqrt"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kEpsilonNormalSqrt
void UnityEngine::Vector3::_set_kEpsilonNormalSqrt(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_set_kEpsilonNormalSqrt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "kEpsilonNormalSqrt", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 zeroVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_zeroVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_get_zeroVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "zeroVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 zeroVector
void UnityEngine::Vector3::_set_zeroVector(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_set_zeroVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "zeroVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 oneVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_oneVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_get_oneVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "oneVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 oneVector
void UnityEngine::Vector3::_set_oneVector(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_set_oneVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "oneVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 upVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_upVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_get_upVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "upVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 upVector
void UnityEngine::Vector3::_set_upVector(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_set_upVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "upVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 downVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_downVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_get_downVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "downVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 downVector
void UnityEngine::Vector3::_set_downVector(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_set_downVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "downVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 leftVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_leftVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_get_leftVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "leftVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 leftVector
void UnityEngine::Vector3::_set_leftVector(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_set_leftVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "leftVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 rightVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_rightVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_get_rightVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "rightVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 rightVector
void UnityEngine::Vector3::_set_rightVector(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_set_rightVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "rightVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 forwardVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_forwardVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_get_forwardVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "forwardVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 forwardVector
void UnityEngine::Vector3::_set_forwardVector(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_set_forwardVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "forwardVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 backVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_backVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_get_backVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "backVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 backVector
void UnityEngine::Vector3::_set_backVector(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_set_backVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "backVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 positiveInfinityVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_positiveInfinityVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_get_positiveInfinityVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "positiveInfinityVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 positiveInfinityVector
void UnityEngine::Vector3::_set_positiveInfinityVector(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_set_positiveInfinityVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "positiveInfinityVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 negativeInfinityVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_negativeInfinityVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_get_negativeInfinityVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "negativeInfinityVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 negativeInfinityVector
void UnityEngine::Vector3::_set_negativeInfinityVector(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::_set_negativeInfinityVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "negativeInfinityVector", value));
}
// Autogenerated method: UnityEngine.Vector3.Slerp
UnityEngine::Vector3 UnityEngine::Vector3::Slerp(UnityEngine::Vector3 a, UnityEngine::Vector3 b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Slerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "Slerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: UnityEngine.Vector3.OrthoNormalize2
void UnityEngine::Vector3::OrthoNormalize2(UnityEngine::Vector3& a, UnityEngine::Vector3& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::OrthoNormalize2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "OrthoNormalize2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Vector3.OrthoNormalize
void UnityEngine::Vector3::OrthoNormalize(UnityEngine::Vector3& normal, UnityEngine::Vector3& tangent) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::OrthoNormalize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "OrthoNormalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normal), ::il2cpp_utils::ExtractType(tangent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, normal, tangent);
}
// Autogenerated method: UnityEngine.Vector3.RotateTowards
UnityEngine::Vector3 UnityEngine::Vector3::RotateTowards(UnityEngine::Vector3 current, UnityEngine::Vector3 target, float maxRadiansDelta, float maxMagnitudeDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::RotateTowards");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "RotateTowards", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(maxRadiansDelta), ::il2cpp_utils::ExtractType(maxMagnitudeDelta)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, current, target, maxRadiansDelta, maxMagnitudeDelta);
}
// Autogenerated method: UnityEngine.Vector3.Lerp
UnityEngine::Vector3 UnityEngine::Vector3::Lerp(UnityEngine::Vector3 a, UnityEngine::Vector3 b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: UnityEngine.Vector3.LerpUnclamped
UnityEngine::Vector3 UnityEngine::Vector3::LerpUnclamped(UnityEngine::Vector3 a, UnityEngine::Vector3 b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::LerpUnclamped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "LerpUnclamped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: UnityEngine.Vector3.SmoothDamp
UnityEngine::Vector3 UnityEngine::Vector3::SmoothDamp(UnityEngine::Vector3 current, UnityEngine::Vector3 target, UnityEngine::Vector3& currentVelocity, float smoothTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::SmoothDamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "SmoothDamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(currentVelocity), ::il2cpp_utils::ExtractType(smoothTime)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, current, target, currentVelocity, smoothTime);
}
// Autogenerated method: UnityEngine.Vector3.SmoothDamp
UnityEngine::Vector3 UnityEngine::Vector3::SmoothDamp(UnityEngine::Vector3 current, UnityEngine::Vector3 target, UnityEngine::Vector3& currentVelocity, float smoothTime, float maxSpeed, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::SmoothDamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "SmoothDamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(currentVelocity), ::il2cpp_utils::ExtractType(smoothTime), ::il2cpp_utils::ExtractType(maxSpeed), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, current, target, currentVelocity, smoothTime, maxSpeed, deltaTime);
}
// Autogenerated method: UnityEngine.Vector3.get_Item
float UnityEngine::Vector3::get_Item(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Vector3.set_Item
void UnityEngine::Vector3::set_Item(int index, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, index, value);
}
// Autogenerated method: UnityEngine.Vector3.Scale
UnityEngine::Vector3 UnityEngine::Vector3::Scale(UnityEngine::Vector3 a, UnityEngine::Vector3 b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Scale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "Scale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Vector3.Scale
void UnityEngine::Vector3::Scale(UnityEngine::Vector3 scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Scale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Scale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, scale);
}
// Autogenerated method: UnityEngine.Vector3.Cross
UnityEngine::Vector3 UnityEngine::Vector3::Cross(UnityEngine::Vector3 lhs, UnityEngine::Vector3 rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Cross");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "Cross", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Vector3.Equals
bool UnityEngine::Vector3::Equals(UnityEngine::Vector3 other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Vector3.Reflect
UnityEngine::Vector3 UnityEngine::Vector3::Reflect(UnityEngine::Vector3 inDirection, UnityEngine::Vector3 inNormal) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Reflect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "Reflect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inDirection), ::il2cpp_utils::ExtractType(inNormal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, inDirection, inNormal);
}
// Autogenerated method: UnityEngine.Vector3.Normalize
UnityEngine::Vector3 UnityEngine::Vector3::Normalize(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Normalize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "Normalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Vector3.Normalize
void UnityEngine::Vector3::Normalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Normalize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Normalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.get_normalized
UnityEngine::Vector3 UnityEngine::Vector3::get_normalized() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::get_normalized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_normalized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.Dot
float UnityEngine::Vector3::Dot(UnityEngine::Vector3 lhs, UnityEngine::Vector3 rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Dot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "Dot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Vector3.Project
UnityEngine::Vector3 UnityEngine::Vector3::Project(UnityEngine::Vector3 vector, UnityEngine::Vector3 onNormal) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Project");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "Project", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vector), ::il2cpp_utils::ExtractType(onNormal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vector, onNormal);
}
// Autogenerated method: UnityEngine.Vector3.ProjectOnPlane
UnityEngine::Vector3 UnityEngine::Vector3::ProjectOnPlane(UnityEngine::Vector3 vector, UnityEngine::Vector3 planeNormal) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::ProjectOnPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "ProjectOnPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vector), ::il2cpp_utils::ExtractType(planeNormal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vector, planeNormal);
}
// Autogenerated method: UnityEngine.Vector3.Angle
float UnityEngine::Vector3::Angle(UnityEngine::Vector3 from, UnityEngine::Vector3 to) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Angle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "Angle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, from, to);
}
// Autogenerated method: UnityEngine.Vector3.SignedAngle
float UnityEngine::Vector3::SignedAngle(UnityEngine::Vector3 from, UnityEngine::Vector3 to, UnityEngine::Vector3 axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::SignedAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "SignedAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to), ::il2cpp_utils::ExtractType(axis)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, from, to, axis);
}
// Autogenerated method: UnityEngine.Vector3.Distance
float UnityEngine::Vector3::Distance(UnityEngine::Vector3 a, UnityEngine::Vector3 b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Distance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "Distance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Vector3.ClampMagnitude
UnityEngine::Vector3 UnityEngine::Vector3::ClampMagnitude(UnityEngine::Vector3 vector, float maxLength) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::ClampMagnitude");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "ClampMagnitude", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vector), ::il2cpp_utils::ExtractType(maxLength)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vector, maxLength);
}
// Autogenerated method: UnityEngine.Vector3.Magnitude
float UnityEngine::Vector3::Magnitude(UnityEngine::Vector3 vector) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Magnitude");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "Magnitude", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vector)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vector);
}
// Autogenerated method: UnityEngine.Vector3.get_magnitude
float UnityEngine::Vector3::get_magnitude() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::get_magnitude");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_magnitude", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.SqrMagnitude
float UnityEngine::Vector3::SqrMagnitude(UnityEngine::Vector3 vector) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::SqrMagnitude");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "SqrMagnitude", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vector)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, vector);
}
// Autogenerated method: UnityEngine.Vector3.get_sqrMagnitude
float UnityEngine::Vector3::get_sqrMagnitude() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::get_sqrMagnitude");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_sqrMagnitude", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.Min
UnityEngine::Vector3 UnityEngine::Vector3::Min(UnityEngine::Vector3 lhs, UnityEngine::Vector3 rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Min");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "Min", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Vector3.Max
UnityEngine::Vector3 UnityEngine::Vector3::Max(UnityEngine::Vector3 lhs, UnityEngine::Vector3 rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Max");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "Max", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Vector3.get_zero
UnityEngine::Vector3 UnityEngine::Vector3::get_zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::get_zero");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "get_zero", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.get_one
UnityEngine::Vector3 UnityEngine::Vector3::get_one() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::get_one");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "get_one", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.get_forward
UnityEngine::Vector3 UnityEngine::Vector3::get_forward() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::get_forward");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "get_forward", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.get_back
UnityEngine::Vector3 UnityEngine::Vector3::get_back() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::get_back");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "get_back", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.get_up
UnityEngine::Vector3 UnityEngine::Vector3::get_up() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::get_up");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "get_up", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.get_down
UnityEngine::Vector3 UnityEngine::Vector3::get_down() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::get_down");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "get_down", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.get_left
UnityEngine::Vector3 UnityEngine::Vector3::get_left() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::get_left");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "get_left", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.get_right
UnityEngine::Vector3 UnityEngine::Vector3::get_right() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::get_right");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "get_right", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.get_positiveInfinity
UnityEngine::Vector3 UnityEngine::Vector3::get_positiveInfinity() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::get_positiveInfinity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "get_positiveInfinity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.ToString
::Il2CppString* UnityEngine::Vector3::ToString(::Il2CppString* format) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::ToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method, format);
}
// Autogenerated method: UnityEngine.Vector3..cctor
void UnityEngine::Vector3::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.Slerp_Injected
void UnityEngine::Vector3::Slerp_Injected(UnityEngine::Vector3& a, UnityEngine::Vector3& b, float t, UnityEngine::Vector3& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Slerp_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "Slerp_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t, ret);
}
// Autogenerated method: UnityEngine.Vector3.RotateTowards_Injected
void UnityEngine::Vector3::RotateTowards_Injected(UnityEngine::Vector3& current, UnityEngine::Vector3& target, float maxRadiansDelta, float maxMagnitudeDelta, UnityEngine::Vector3& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::RotateTowards_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "RotateTowards_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(maxRadiansDelta), ::il2cpp_utils::ExtractType(maxMagnitudeDelta), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, current, target, maxRadiansDelta, maxMagnitudeDelta, ret);
}
// Autogenerated method: UnityEngine.Vector3.GetHashCode
int UnityEngine::Vector3::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.Equals
bool UnityEngine::Vector3::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Vector3.ToString
::Il2CppString* UnityEngine::Vector3::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector3.op_Addition
UnityEngine::Vector3 UnityEngine::operator+(const UnityEngine::Vector3& a, const UnityEngine::Vector3& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Vector3.op_Subtraction
UnityEngine::Vector3 UnityEngine::operator-(const UnityEngine::Vector3& a, const UnityEngine::Vector3& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Vector3.op_UnaryNegation
UnityEngine::Vector3 UnityEngine::operator-(const UnityEngine::Vector3& a) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::op_UnaryNegation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "op_UnaryNegation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a);
}
// Autogenerated method: UnityEngine.Vector3.op_Multiply
UnityEngine::Vector3 UnityEngine::operator*(const UnityEngine::Vector3& a, const float& d) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(d)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, d);
}
// Autogenerated method: UnityEngine.Vector3.op_Multiply
UnityEngine::Vector3 UnityEngine::operator*(const float& d, const UnityEngine::Vector3& a) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d), ::il2cpp_utils::ExtractType(a)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, d, a);
}
// Autogenerated method: UnityEngine.Vector3.op_Division
UnityEngine::Vector3 UnityEngine::operator/(const UnityEngine::Vector3& a, const float& d) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::op_Division");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "op_Division", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(d)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, d);
}
// Autogenerated method: UnityEngine.Vector3.op_Equality
bool UnityEngine::operator ==(const UnityEngine::Vector3& lhs, const UnityEngine::Vector3& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Vector3.op_Inequality
bool UnityEngine::operator !=(const UnityEngine::Vector3& lhs, const UnityEngine::Vector3& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector3::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector3", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Writing MetadataGetter for method: Vector3::Slerp
// Il2CppName: Slerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&Vector3::Slerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Slerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector3::OrthoNormalize2
// Il2CppName: OrthoNormalize2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Vector3&, UnityEngine::Vector3&)>(&Vector3::OrthoNormalize2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "OrthoNormalize2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Vector3::OrthoNormalize
// Il2CppName: OrthoNormalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Vector3&, UnityEngine::Vector3&)>(&Vector3::OrthoNormalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "OrthoNormalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Vector3::RotateTowards
// Il2CppName: RotateTowards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3, float, float)>(&Vector3::RotateTowards)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "RotateTowards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector3::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&Vector3::Lerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector3::LerpUnclamped
// Il2CppName: LerpUnclamped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&Vector3::LerpUnclamped)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "LerpUnclamped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector3::SmoothDamp
// Il2CppName: SmoothDamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3&, float)>(&Vector3::SmoothDamp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "SmoothDamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector3::SmoothDamp
// Il2CppName: SmoothDamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3&, float, float, float)>(&Vector3::SmoothDamp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "SmoothDamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector3::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Vector3::*)(int)>(&Vector3::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Vector3::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3::*)(int, float)>(&Vector3::set_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector3::Vector3
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3::*)(float, float, float)>(&Vector3::Vector3<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3::*)(float, float, float)>(&Vector3::Vector3<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector3::Vector3
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3::*)(float, float)>(&Vector3::Vector3<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3::*)(float, float)>(&Vector3::Vector3<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector3::Scale
// Il2CppName: Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Vector3::Scale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::Scale
// Il2CppName: Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3::*)(UnityEngine::Vector3)>(&Vector3::Scale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::Cross
// Il2CppName: Cross
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Vector3::Cross)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Cross", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector3::*)(UnityEngine::Vector3)>(&Vector3::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::Reflect
// Il2CppName: Reflect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Vector3::Reflect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Reflect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::Normalize
// Il2CppName: Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3)>(&Vector3::Normalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::Normalize
// Il2CppName: Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector3::*)()>(&Vector3::Normalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::get_normalized
// Il2CppName: get_normalized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Vector3::*)()>(&Vector3::get_normalized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "get_normalized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::Dot
// Il2CppName: Dot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Vector3::Dot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Dot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::Project
// Il2CppName: Project
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Vector3::Project)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Project", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::ProjectOnPlane
// Il2CppName: ProjectOnPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Vector3::ProjectOnPlane)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "ProjectOnPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::Angle
// Il2CppName: Angle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Vector3::Angle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Angle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::SignedAngle
// Il2CppName: SignedAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3)>(&Vector3::SignedAngle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "SignedAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::Distance
// Il2CppName: Distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Vector3::Distance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::ClampMagnitude
// Il2CppName: ClampMagnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, float)>(&Vector3::ClampMagnitude)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "ClampMagnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector3::Magnitude
// Il2CppName: Magnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Vector3)>(&Vector3::Magnitude)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Magnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::get_magnitude
// Il2CppName: get_magnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Vector3::*)()>(&Vector3::get_magnitude)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "get_magnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::SqrMagnitude
// Il2CppName: SqrMagnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Vector3)>(&Vector3::SqrMagnitude)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "SqrMagnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::get_sqrMagnitude
// Il2CppName: get_sqrMagnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Vector3::*)()>(&Vector3::get_sqrMagnitude)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "get_sqrMagnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::Min
// Il2CppName: Min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Vector3::Min)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::Max
// Il2CppName: Max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Vector3::Max)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Vector3::get_zero
// Il2CppName: get_zero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)()>(&Vector3::get_zero)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "get_zero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::get_one
// Il2CppName: get_one
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)()>(&Vector3::get_one)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "get_one", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::get_forward
// Il2CppName: get_forward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)()>(&Vector3::get_forward)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "get_forward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::get_back
// Il2CppName: get_back
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)()>(&Vector3::get_back)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "get_back", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::get_up
// Il2CppName: get_up
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)()>(&Vector3::get_up)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "get_up", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::get_down
// Il2CppName: get_down
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)()>(&Vector3::get_down)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "get_down", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::get_left
// Il2CppName: get_left
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)()>(&Vector3::get_left)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "get_left", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::get_right
// Il2CppName: get_right
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)()>(&Vector3::get_right)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "get_right", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::get_positiveInfinity
// Il2CppName: get_positiveInfinity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)()>(&Vector3::get_positiveInfinity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "get_positiveInfinity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Vector3::*)(::Il2CppString*)>(&Vector3::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Vector3::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vector3::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::Slerp_Injected
// Il2CppName: Slerp_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Vector3&, UnityEngine::Vector3&, float, UnityEngine::Vector3&)>(&Vector3::Slerp_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Slerp_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Vector3::RotateTowards_Injected
// Il2CppName: RotateTowards_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Vector3&, UnityEngine::Vector3&, float, float, UnityEngine::Vector3&)>(&Vector3::RotateTowards_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "RotateTowards_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Vector3::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vector3::*)()>(&Vector3::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector3::*)(::Il2CppObject*)>(&Vector3::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Vector3::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Vector3::*)()>(&Vector3::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector3::operator+
// Il2CppName: op_Addition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(const UnityEngine::Vector3&, const UnityEngine::Vector3&)>(&Vector3::operator+)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "op_Addition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Vector3::operator-
// Il2CppName: op_Subtraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(const UnityEngine::Vector3&, const UnityEngine::Vector3&)>(&Vector3::operator-)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "op_Subtraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Vector3::operator-
// Il2CppName: op_UnaryNegation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(const UnityEngine::Vector3&)>(&Vector3::operator-)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "op_UnaryNegation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Vector3::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(const UnityEngine::Vector3&, const float&)>(&Vector3::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<const float&>()});
  }
};
// Writing MetadataGetter for method: Vector3::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(const float&, const UnityEngine::Vector3&)>(&Vector3::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const float&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Vector3::operator/
// Il2CppName: op_Division
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(const UnityEngine::Vector3&, const float&)>(&Vector3::operator/)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "op_Division", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<const float&>()});
  }
};
// Writing MetadataGetter for method: Vector3::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Vector3&, const UnityEngine::Vector3&)>(&Vector3::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Vector3::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Vector3&, const UnityEngine::Vector3&)>(&Vector3::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector3), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector3&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Quaternion identityQuaternion
UnityEngine::Quaternion UnityEngine::Quaternion::_get_identityQuaternion() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::_get_identityQuaternion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Quaternion>("UnityEngine", "Quaternion", "identityQuaternion"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Quaternion identityQuaternion
void UnityEngine::Quaternion::_set_identityQuaternion(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::_set_identityQuaternion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Quaternion", "identityQuaternion", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kEpsilon
float UnityEngine::Quaternion::_get_kEpsilon() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::_get_kEpsilon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngine", "Quaternion", "kEpsilon"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kEpsilon
void UnityEngine::Quaternion::_set_kEpsilon(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::_set_kEpsilon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Quaternion", "kEpsilon", value));
}
// Autogenerated method: UnityEngine.Quaternion.FromToRotation
UnityEngine::Quaternion UnityEngine::Quaternion::FromToRotation(UnityEngine::Vector3 fromDirection, UnityEngine::Vector3 toDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::FromToRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "FromToRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromDirection), ::il2cpp_utils::ExtractType(toDirection)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fromDirection, toDirection);
}
// Autogenerated method: UnityEngine.Quaternion.Inverse
UnityEngine::Quaternion UnityEngine::Quaternion::Inverse(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Inverse");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Inverse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rotation);
}
// Autogenerated method: UnityEngine.Quaternion.Slerp
UnityEngine::Quaternion UnityEngine::Quaternion::Slerp(UnityEngine::Quaternion a, UnityEngine::Quaternion b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Slerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Slerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: UnityEngine.Quaternion.SlerpUnclamped
UnityEngine::Quaternion UnityEngine::Quaternion::SlerpUnclamped(UnityEngine::Quaternion a, UnityEngine::Quaternion b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::SlerpUnclamped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "SlerpUnclamped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: UnityEngine.Quaternion.Lerp
UnityEngine::Quaternion UnityEngine::Quaternion::Lerp(UnityEngine::Quaternion a, UnityEngine::Quaternion b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: UnityEngine.Quaternion.Internal_FromEulerRad
UnityEngine::Quaternion UnityEngine::Quaternion::Internal_FromEulerRad(UnityEngine::Vector3 euler) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Internal_FromEulerRad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Internal_FromEulerRad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(euler)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, euler);
}
// Autogenerated method: UnityEngine.Quaternion.Internal_ToEulerRad
UnityEngine::Vector3 UnityEngine::Quaternion::Internal_ToEulerRad(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Internal_ToEulerRad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Internal_ToEulerRad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rotation);
}
// Autogenerated method: UnityEngine.Quaternion.Internal_ToAxisAngleRad
void UnityEngine::Quaternion::Internal_ToAxisAngleRad(UnityEngine::Quaternion q, UnityEngine::Vector3& axis, float& angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Internal_ToAxisAngleRad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Internal_ToAxisAngleRad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, q, axis, angle);
}
// Autogenerated method: UnityEngine.Quaternion.AngleAxis
UnityEngine::Quaternion UnityEngine::Quaternion::AngleAxis(float angle, UnityEngine::Vector3 axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::AngleAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "AngleAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(angle), ::il2cpp_utils::ExtractType(axis)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, angle, axis);
}
// Autogenerated method: UnityEngine.Quaternion.LookRotation
UnityEngine::Quaternion UnityEngine::Quaternion::LookRotation(UnityEngine::Vector3 forward, UnityEngine::Vector3 upwards) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::LookRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "LookRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(forward), ::il2cpp_utils::ExtractType(upwards)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, forward, upwards);
}
// Autogenerated method: UnityEngine.Quaternion.LookRotation
UnityEngine::Quaternion UnityEngine::Quaternion::LookRotation(UnityEngine::Vector3 forward) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::LookRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "LookRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(forward)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, forward);
}
// Autogenerated method: UnityEngine.Quaternion.get_identity
UnityEngine::Quaternion UnityEngine::Quaternion::get_identity() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::get_identity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "get_identity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Quaternion.IsEqualUsingDot
bool UnityEngine::Quaternion::IsEqualUsingDot(float dot) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::IsEqualUsingDot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "IsEqualUsingDot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dot)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, dot);
}
// Autogenerated method: UnityEngine.Quaternion.Dot
float UnityEngine::Quaternion::Dot(UnityEngine::Quaternion a, UnityEngine::Quaternion b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Dot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Dot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Quaternion.SetLookRotation
void UnityEngine::Quaternion::SetLookRotation(UnityEngine::Vector3 view) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::SetLookRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetLookRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(view)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, view);
}
// Autogenerated method: UnityEngine.Quaternion.SetLookRotation
void UnityEngine::Quaternion::SetLookRotation(UnityEngine::Vector3 view, UnityEngine::Vector3 up) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::SetLookRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetLookRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(view), ::il2cpp_utils::ExtractType(up)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, view, up);
}
// Autogenerated method: UnityEngine.Quaternion.Angle
float UnityEngine::Quaternion::Angle(UnityEngine::Quaternion a, UnityEngine::Quaternion b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Angle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Angle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Quaternion.Internal_MakePositive
UnityEngine::Vector3 UnityEngine::Quaternion::Internal_MakePositive(UnityEngine::Vector3 euler) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Internal_MakePositive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Internal_MakePositive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(euler)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, euler);
}
// Autogenerated method: UnityEngine.Quaternion.get_eulerAngles
UnityEngine::Vector3 UnityEngine::Quaternion::get_eulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::get_eulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_eulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Quaternion.set_eulerAngles
void UnityEngine::Quaternion::set_eulerAngles(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::set_eulerAngles");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_eulerAngles", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Quaternion.Euler
UnityEngine::Quaternion UnityEngine::Quaternion::Euler(float x, float y, float z) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Euler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Euler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(z)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x, y, z);
}
// Autogenerated method: UnityEngine.Quaternion.Euler
UnityEngine::Quaternion UnityEngine::Quaternion::Euler(UnityEngine::Vector3 euler) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Euler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Euler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(euler)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, euler);
}
// Autogenerated method: UnityEngine.Quaternion.ToAngleAxis
void UnityEngine::Quaternion::ToAngleAxis(float& angle, UnityEngine::Vector3& axis) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::ToAngleAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToAngleAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, angle, axis);
}
// Autogenerated method: UnityEngine.Quaternion.RotateTowards
UnityEngine::Quaternion UnityEngine::Quaternion::RotateTowards(UnityEngine::Quaternion from, UnityEngine::Quaternion to, float maxDegreesDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::RotateTowards");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "RotateTowards", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to), ::il2cpp_utils::ExtractType(maxDegreesDelta)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, from, to, maxDegreesDelta);
}
// Autogenerated method: UnityEngine.Quaternion.Normalize
UnityEngine::Quaternion UnityEngine::Quaternion::Normalize(UnityEngine::Quaternion q) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Normalize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Normalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, q);
}
// Autogenerated method: UnityEngine.Quaternion.Normalize
void UnityEngine::Quaternion::Normalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Normalize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Normalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Quaternion.Equals
bool UnityEngine::Quaternion::Equals(UnityEngine::Quaternion other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Quaternion..cctor
void UnityEngine::Quaternion::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Quaternion.FromToRotation_Injected
void UnityEngine::Quaternion::FromToRotation_Injected(UnityEngine::Vector3& fromDirection, UnityEngine::Vector3& toDirection, UnityEngine::Quaternion& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::FromToRotation_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "FromToRotation_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromDirection), ::il2cpp_utils::ExtractType(toDirection), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, fromDirection, toDirection, ret);
}
// Autogenerated method: UnityEngine.Quaternion.Inverse_Injected
void UnityEngine::Quaternion::Inverse_Injected(UnityEngine::Quaternion& rotation, UnityEngine::Quaternion& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Inverse_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Inverse_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rotation, ret);
}
// Autogenerated method: UnityEngine.Quaternion.Slerp_Injected
void UnityEngine::Quaternion::Slerp_Injected(UnityEngine::Quaternion& a, UnityEngine::Quaternion& b, float t, UnityEngine::Quaternion& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Slerp_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Slerp_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t, ret);
}
// Autogenerated method: UnityEngine.Quaternion.SlerpUnclamped_Injected
void UnityEngine::Quaternion::SlerpUnclamped_Injected(UnityEngine::Quaternion& a, UnityEngine::Quaternion& b, float t, UnityEngine::Quaternion& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::SlerpUnclamped_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "SlerpUnclamped_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t, ret);
}
// Autogenerated method: UnityEngine.Quaternion.Lerp_Injected
void UnityEngine::Quaternion::Lerp_Injected(UnityEngine::Quaternion& a, UnityEngine::Quaternion& b, float t, UnityEngine::Quaternion& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Lerp_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Lerp_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t, ret);
}
// Autogenerated method: UnityEngine.Quaternion.Internal_FromEulerRad_Injected
void UnityEngine::Quaternion::Internal_FromEulerRad_Injected(UnityEngine::Vector3& euler, UnityEngine::Quaternion& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Internal_FromEulerRad_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Internal_FromEulerRad_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(euler), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, euler, ret);
}
// Autogenerated method: UnityEngine.Quaternion.Internal_ToEulerRad_Injected
void UnityEngine::Quaternion::Internal_ToEulerRad_Injected(UnityEngine::Quaternion& rotation, UnityEngine::Vector3& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Internal_ToEulerRad_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Internal_ToEulerRad_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rotation, ret);
}
// Autogenerated method: UnityEngine.Quaternion.Internal_ToAxisAngleRad_Injected
void UnityEngine::Quaternion::Internal_ToAxisAngleRad_Injected(UnityEngine::Quaternion& q, UnityEngine::Vector3& axis, float& angle) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Internal_ToAxisAngleRad_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "Internal_ToAxisAngleRad_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(q), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, q, axis, angle);
}
// Autogenerated method: UnityEngine.Quaternion.AngleAxis_Injected
void UnityEngine::Quaternion::AngleAxis_Injected(float angle, UnityEngine::Vector3& axis, UnityEngine::Quaternion& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::AngleAxis_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "AngleAxis_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(angle), ::il2cpp_utils::ExtractType(axis), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, angle, axis, ret);
}
// Autogenerated method: UnityEngine.Quaternion.LookRotation_Injected
void UnityEngine::Quaternion::LookRotation_Injected(UnityEngine::Vector3& forward, UnityEngine::Vector3& upwards, UnityEngine::Quaternion& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::LookRotation_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "LookRotation_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(forward), ::il2cpp_utils::ExtractType(upwards), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, forward, upwards, ret);
}
// Autogenerated method: UnityEngine.Quaternion.GetHashCode
int UnityEngine::Quaternion::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Quaternion.Equals
bool UnityEngine::Quaternion::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Quaternion.ToString
::Il2CppString* UnityEngine::Quaternion::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Quaternion.op_Multiply
UnityEngine::Quaternion UnityEngine::operator*(const UnityEngine::Quaternion& lhs, const UnityEngine::Quaternion& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Quaternion.op_Multiply
UnityEngine::Vector3 UnityEngine::operator*(const UnityEngine::Quaternion& rotation, const UnityEngine::Vector3& point) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(point)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rotation, point);
}
// Autogenerated method: UnityEngine.Quaternion.op_Equality
bool UnityEngine::operator ==(const UnityEngine::Quaternion& lhs, const UnityEngine::Quaternion& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Quaternion.op_Inequality
bool UnityEngine::operator !=(const UnityEngine::Quaternion& lhs, const UnityEngine::Quaternion& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Quaternion::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Quaternion", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Writing MetadataGetter for method: Quaternion::FromToRotation
// Il2CppName: FromToRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Quaternion::FromToRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "FromToRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Inverse
// Il2CppName: Inverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Quaternion)>(&Quaternion::Inverse)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Inverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Slerp
// Il2CppName: Slerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Quaternion, UnityEngine::Quaternion, float)>(&Quaternion::Slerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Slerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Quaternion::SlerpUnclamped
// Il2CppName: SlerpUnclamped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Quaternion, UnityEngine::Quaternion, float)>(&Quaternion::SlerpUnclamped)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "SlerpUnclamped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Quaternion, UnityEngine::Quaternion, float)>(&Quaternion::Lerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Internal_FromEulerRad
// Il2CppName: Internal_FromEulerRad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Vector3)>(&Quaternion::Internal_FromEulerRad)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Internal_FromEulerRad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Internal_ToEulerRad
// Il2CppName: Internal_ToEulerRad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Quaternion)>(&Quaternion::Internal_ToEulerRad)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Internal_ToEulerRad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Internal_ToAxisAngleRad
// Il2CppName: Internal_ToAxisAngleRad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Quaternion, UnityEngine::Vector3&, float&)>(&Quaternion::Internal_ToAxisAngleRad)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Internal_ToAxisAngleRad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: Quaternion::AngleAxis
// Il2CppName: AngleAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(float, UnityEngine::Vector3)>(&Quaternion::AngleAxis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "AngleAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Quaternion::LookRotation
// Il2CppName: LookRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Quaternion::LookRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "LookRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Quaternion::LookRotation
// Il2CppName: LookRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Vector3)>(&Quaternion::LookRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "LookRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Quaternion
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Quaternion::*)(float, float, float, float)>(&Quaternion::Quaternion<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Quaternion::*)(float, float, float, float)>(&Quaternion::Quaternion<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Quaternion::get_identity
// Il2CppName: get_identity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)()>(&Quaternion::get_identity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "get_identity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Quaternion::IsEqualUsingDot
// Il2CppName: IsEqualUsingDot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float)>(&Quaternion::IsEqualUsingDot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "IsEqualUsingDot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Dot
// Il2CppName: Dot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Quaternion, UnityEngine::Quaternion)>(&Quaternion::Dot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Dot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: Quaternion::SetLookRotation
// Il2CppName: SetLookRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Quaternion::*)(UnityEngine::Vector3)>(&Quaternion::SetLookRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "SetLookRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Quaternion::SetLookRotation
// Il2CppName: SetLookRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Quaternion::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Quaternion::SetLookRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "SetLookRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Angle
// Il2CppName: Angle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Quaternion, UnityEngine::Quaternion)>(&Quaternion::Angle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Angle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Internal_MakePositive
// Il2CppName: Internal_MakePositive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3)>(&Quaternion::Internal_MakePositive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Internal_MakePositive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Quaternion::get_eulerAngles
// Il2CppName: get_eulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Quaternion::*)()>(&Quaternion::get_eulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "get_eulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Quaternion::set_eulerAngles
// Il2CppName: set_eulerAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Quaternion::*)(UnityEngine::Vector3)>(&Quaternion::set_eulerAngles)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "set_eulerAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Euler
// Il2CppName: Euler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(float, float, float)>(&Quaternion::Euler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Euler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Euler
// Il2CppName: Euler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Vector3)>(&Quaternion::Euler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Euler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Quaternion::ToAngleAxis
// Il2CppName: ToAngleAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Quaternion::*)(float&, UnityEngine::Vector3&)>(&Quaternion::ToAngleAxis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "ToAngleAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Quaternion::RotateTowards
// Il2CppName: RotateTowards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Quaternion, UnityEngine::Quaternion, float)>(&Quaternion::RotateTowards)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "RotateTowards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Normalize
// Il2CppName: Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Quaternion)>(&Quaternion::Normalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Normalize
// Il2CppName: Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Quaternion::*)()>(&Quaternion::Normalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Quaternion::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Quaternion::*)(UnityEngine::Quaternion)>(&Quaternion::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: Quaternion::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Quaternion::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Quaternion::FromToRotation_Injected
// Il2CppName: FromToRotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Vector3&, UnityEngine::Vector3&, UnityEngine::Quaternion&)>(&Quaternion::FromToRotation_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "FromToRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Inverse_Injected
// Il2CppName: Inverse_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Quaternion&, UnityEngine::Quaternion&)>(&Quaternion::Inverse_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Inverse_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Slerp_Injected
// Il2CppName: Slerp_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Quaternion&, UnityEngine::Quaternion&, float, UnityEngine::Quaternion&)>(&Quaternion::Slerp_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Slerp_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Quaternion::SlerpUnclamped_Injected
// Il2CppName: SlerpUnclamped_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Quaternion&, UnityEngine::Quaternion&, float, UnityEngine::Quaternion&)>(&Quaternion::SlerpUnclamped_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "SlerpUnclamped_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Lerp_Injected
// Il2CppName: Lerp_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Quaternion&, UnityEngine::Quaternion&, float, UnityEngine::Quaternion&)>(&Quaternion::Lerp_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Lerp_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Internal_FromEulerRad_Injected
// Il2CppName: Internal_FromEulerRad_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Vector3&, UnityEngine::Quaternion&)>(&Quaternion::Internal_FromEulerRad_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Internal_FromEulerRad_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Internal_ToEulerRad_Injected
// Il2CppName: Internal_ToEulerRad_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Quaternion&, UnityEngine::Vector3&)>(&Quaternion::Internal_ToEulerRad_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Internal_ToEulerRad_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Quaternion::Internal_ToAxisAngleRad_Injected
// Il2CppName: Internal_ToAxisAngleRad_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Quaternion&, UnityEngine::Vector3&, float&)>(&Quaternion::Internal_ToAxisAngleRad_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Internal_ToAxisAngleRad_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: Quaternion::AngleAxis_Injected
// Il2CppName: AngleAxis_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float, UnityEngine::Vector3&, UnityEngine::Quaternion&)>(&Quaternion::AngleAxis_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "AngleAxis_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Quaternion::LookRotation_Injected
// Il2CppName: LookRotation_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Vector3&, UnityEngine::Vector3&, UnityEngine::Quaternion&)>(&Quaternion::LookRotation_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "LookRotation_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Quaternion::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Quaternion::*)()>(&Quaternion::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Quaternion::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Quaternion::*)(::Il2CppObject*)>(&Quaternion::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Quaternion::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Quaternion::*)()>(&Quaternion::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Quaternion::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(const UnityEngine::Quaternion&, const UnityEngine::Quaternion&)>(&Quaternion::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Quaternion::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(const UnityEngine::Quaternion&, const UnityEngine::Vector3&)>(&Quaternion::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Quaternion::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Quaternion&, const UnityEngine::Quaternion&)>(&Quaternion::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Quaternion::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Quaternion&, const UnityEngine::Quaternion&)>(&Quaternion::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Quaternion), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Quaternion&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Mathf
#include "UnityEngine/Mathf.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly System.Single Epsilon
float UnityEngine::Mathf::_get_Epsilon() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::_get_Epsilon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngine", "Mathf", "Epsilon"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Single Epsilon
void UnityEngine::Mathf::_set_Epsilon(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::_set_Epsilon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Mathf", "Epsilon", value));
}
// Autogenerated method: UnityEngine.Mathf.NextPowerOfTwo
int UnityEngine::Mathf::NextPowerOfTwo(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::NextPowerOfTwo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "NextPowerOfTwo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Mathf.GammaToLinearSpace
float UnityEngine::Mathf::GammaToLinearSpace(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::GammaToLinearSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "GammaToLinearSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Mathf.LinearToGammaSpace
float UnityEngine::Mathf::LinearToGammaSpace(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::LinearToGammaSpace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "LinearToGammaSpace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Mathf.PerlinNoise
float UnityEngine::Mathf::PerlinNoise(float x, float y) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::PerlinNoise");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "PerlinNoise", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(y)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x, y);
}
// Autogenerated method: UnityEngine.Mathf.Sin
float UnityEngine::Mathf::Sin(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Sin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Sin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.Cos
float UnityEngine::Mathf::Cos(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Cos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Cos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.Tan
float UnityEngine::Mathf::Tan(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Tan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Tan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.Asin
float UnityEngine::Mathf::Asin(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Asin");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Asin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.Acos
float UnityEngine::Mathf::Acos(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Acos");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Acos", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.Atan
float UnityEngine::Mathf::Atan(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Atan");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Atan", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.Atan2
float UnityEngine::Mathf::Atan2(float y, float x) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Atan2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Atan2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(y), ::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, y, x);
}
// Autogenerated method: UnityEngine.Mathf.Sqrt
float UnityEngine::Mathf::Sqrt(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Sqrt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Sqrt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.Abs
float UnityEngine::Mathf::Abs(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Abs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Abs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.Abs
int UnityEngine::Mathf::Abs(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Abs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Abs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Mathf.Min
float UnityEngine::Mathf::Min(float a, float b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Min");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Min", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Mathf.Min
int UnityEngine::Mathf::Min(int a, int b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Min");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Min", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Mathf.Max
float UnityEngine::Mathf::Max(float a, float b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Max");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Max", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Mathf.Max
float UnityEngine::Mathf::Max(::Array<float>* values) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Max");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Max", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, values);
}
// Creating initializer_list -> params proxy for: System.Single Max(params System.Single[] values)
float UnityEngine::Mathf::Max(std::initializer_list<float> values) {
  return UnityEngine::Mathf::Max(::Array<float>::New(values));
}
// Autogenerated method: UnityEngine.Mathf.Max
int UnityEngine::Mathf::Max(int a, int b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Max");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Max", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Mathf.Pow
float UnityEngine::Mathf::Pow(float f, float p) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Pow");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Pow", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f), ::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f, p);
}
// Autogenerated method: UnityEngine.Mathf.Log
float UnityEngine::Mathf::Log(float f, float p) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f), ::il2cpp_utils::ExtractType(p)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f, p);
}
// Autogenerated method: UnityEngine.Mathf.Log
float UnityEngine::Mathf::Log(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Log");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Log", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.Ceil
float UnityEngine::Mathf::Ceil(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Ceil");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Ceil", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.Floor
float UnityEngine::Mathf::Floor(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Floor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Floor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.Round
float UnityEngine::Mathf::Round(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Round");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Round", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.CeilToInt
int UnityEngine::Mathf::CeilToInt(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::CeilToInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "CeilToInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.FloorToInt
int UnityEngine::Mathf::FloorToInt(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::FloorToInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "FloorToInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.RoundToInt
int UnityEngine::Mathf::RoundToInt(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::RoundToInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "RoundToInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.Sign
float UnityEngine::Mathf::Sign(float f) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Sign");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Sign", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, f);
}
// Autogenerated method: UnityEngine.Mathf.Clamp
float UnityEngine::Mathf::Clamp(float value, float min, float max) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Clamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Clamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value, min, max);
}
// Autogenerated method: UnityEngine.Mathf.Clamp
int UnityEngine::Mathf::Clamp(int value, int min, int max) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Clamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Clamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value, min, max);
}
// Autogenerated method: UnityEngine.Mathf.Clamp01
float UnityEngine::Mathf::Clamp01(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Clamp01");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Clamp01", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Mathf.Lerp
float UnityEngine::Mathf::Lerp(float a, float b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: UnityEngine.Mathf.LerpUnclamped
float UnityEngine::Mathf::LerpUnclamped(float a, float b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::LerpUnclamped");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "LerpUnclamped", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: UnityEngine.Mathf.LerpAngle
float UnityEngine::Mathf::LerpAngle(float a, float b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::LerpAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "LerpAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: UnityEngine.Mathf.MoveTowards
float UnityEngine::Mathf::MoveTowards(float current, float target, float maxDelta) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::MoveTowards");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "MoveTowards", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(maxDelta)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, current, target, maxDelta);
}
// Autogenerated method: UnityEngine.Mathf.Approximately
bool UnityEngine::Mathf::Approximately(float a, float b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Approximately");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Approximately", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Mathf.SmoothDamp
float UnityEngine::Mathf::SmoothDamp(float current, float target, float& currentVelocity, float smoothTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::SmoothDamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "SmoothDamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(currentVelocity), ::il2cpp_utils::ExtractType(smoothTime)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, current, target, currentVelocity, smoothTime);
}
// Autogenerated method: UnityEngine.Mathf.SmoothDamp
float UnityEngine::Mathf::SmoothDamp(float current, float target, float& currentVelocity, float smoothTime, float maxSpeed, float deltaTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::SmoothDamp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "SmoothDamp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(currentVelocity), ::il2cpp_utils::ExtractType(smoothTime), ::il2cpp_utils::ExtractType(maxSpeed), ::il2cpp_utils::ExtractType(deltaTime)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, current, target, currentVelocity, smoothTime, maxSpeed, deltaTime);
}
// Autogenerated method: UnityEngine.Mathf.Repeat
float UnityEngine::Mathf::Repeat(float t, float length) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::Repeat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "Repeat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, length);
}
// Autogenerated method: UnityEngine.Mathf.InverseLerp
float UnityEngine::Mathf::InverseLerp(float a, float b, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::InverseLerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "InverseLerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, value);
}
// Autogenerated method: UnityEngine.Mathf.DeltaAngle
float UnityEngine::Mathf::DeltaAngle(float current, float target) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::DeltaAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", "DeltaAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(current), ::il2cpp_utils::ExtractType(target)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, current, target);
}
// Autogenerated method: UnityEngine.Mathf..cctor
void UnityEngine::Mathf::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Mathf::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Mathf", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Mathf::NextPowerOfTwo
// Il2CppName: NextPowerOfTwo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Mathf::NextPowerOfTwo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "NextPowerOfTwo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Mathf::GammaToLinearSpace
// Il2CppName: GammaToLinearSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::GammaToLinearSpace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "GammaToLinearSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::LinearToGammaSpace
// Il2CppName: LinearToGammaSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::LinearToGammaSpace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "LinearToGammaSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::PerlinNoise
// Il2CppName: PerlinNoise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Mathf::PerlinNoise)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "PerlinNoise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Sin
// Il2CppName: Sin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::Sin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Sin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Cos
// Il2CppName: Cos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::Cos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Cos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Tan
// Il2CppName: Tan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::Tan)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Tan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Asin
// Il2CppName: Asin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::Asin)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Asin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Acos
// Il2CppName: Acos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::Acos)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Acos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Atan
// Il2CppName: Atan
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::Atan)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Atan", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Atan2
// Il2CppName: Atan2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Mathf::Atan2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Atan2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Sqrt
// Il2CppName: Sqrt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::Sqrt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Sqrt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Abs
// Il2CppName: Abs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::Abs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Abs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Abs
// Il2CppName: Abs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&Mathf::Abs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Abs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Mathf::Min
// Il2CppName: Min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Mathf::Min)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Min
// Il2CppName: Min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&Mathf::Min)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Mathf::Max
// Il2CppName: Max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Mathf::Max)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Max
// Il2CppName: Max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Array<float>*)>(&Mathf::Max)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<float>*>()});
  }
};
// Writing MetadataGetter for method: Mathf::Max
// Il2CppName: Max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&Mathf::Max)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Mathf::Pow
// Il2CppName: Pow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Mathf::Pow)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Pow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Mathf::Log)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::Log)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Ceil
// Il2CppName: Ceil
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::Ceil)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Ceil", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Floor
// Il2CppName: Floor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::Floor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Floor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Round
// Il2CppName: Round
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::Round)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Round", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::CeilToInt
// Il2CppName: CeilToInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&Mathf::CeilToInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "CeilToInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::FloorToInt
// Il2CppName: FloorToInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&Mathf::FloorToInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "FloorToInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::RoundToInt
// Il2CppName: RoundToInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(float)>(&Mathf::RoundToInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "RoundToInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Sign
// Il2CppName: Sign
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::Sign)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Sign", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Clamp
// Il2CppName: Clamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&Mathf::Clamp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Clamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Clamp
// Il2CppName: Clamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int, int)>(&Mathf::Clamp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Clamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Mathf::Clamp01
// Il2CppName: Clamp01
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float)>(&Mathf::Clamp01)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Clamp01", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&Mathf::Lerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::LerpUnclamped
// Il2CppName: LerpUnclamped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&Mathf::LerpUnclamped)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "LerpUnclamped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::LerpAngle
// Il2CppName: LerpAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&Mathf::LerpAngle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "LerpAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::MoveTowards
// Il2CppName: MoveTowards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&Mathf::MoveTowards)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "MoveTowards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Approximately
// Il2CppName: Approximately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, float)>(&Mathf::Approximately)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Approximately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::SmoothDamp
// Il2CppName: SmoothDamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float&, float)>(&Mathf::SmoothDamp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "SmoothDamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::SmoothDamp
// Il2CppName: SmoothDamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float&, float, float, float)>(&Mathf::SmoothDamp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "SmoothDamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::Repeat
// Il2CppName: Repeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Mathf::Repeat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "Repeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::InverseLerp
// Il2CppName: InverseLerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, float)>(&Mathf::InverseLerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "InverseLerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::DeltaAngle
// Il2CppName: DeltaAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Mathf::DeltaAngle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), "DeltaAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Mathf::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Mathf::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Mathf), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2 zeroVector
UnityEngine::Vector2 UnityEngine::Vector2::_get_zeroVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_get_zeroVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("UnityEngine", "Vector2", "zeroVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2 zeroVector
void UnityEngine::Vector2::_set_zeroVector(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_set_zeroVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2", "zeroVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2 oneVector
UnityEngine::Vector2 UnityEngine::Vector2::_get_oneVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_get_oneVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("UnityEngine", "Vector2", "oneVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2 oneVector
void UnityEngine::Vector2::_set_oneVector(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_set_oneVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2", "oneVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2 upVector
UnityEngine::Vector2 UnityEngine::Vector2::_get_upVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_get_upVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("UnityEngine", "Vector2", "upVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2 upVector
void UnityEngine::Vector2::_set_upVector(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_set_upVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2", "upVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2 downVector
UnityEngine::Vector2 UnityEngine::Vector2::_get_downVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_get_downVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("UnityEngine", "Vector2", "downVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2 downVector
void UnityEngine::Vector2::_set_downVector(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_set_downVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2", "downVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2 leftVector
UnityEngine::Vector2 UnityEngine::Vector2::_get_leftVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_get_leftVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("UnityEngine", "Vector2", "leftVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2 leftVector
void UnityEngine::Vector2::_set_leftVector(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_set_leftVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2", "leftVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2 rightVector
UnityEngine::Vector2 UnityEngine::Vector2::_get_rightVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_get_rightVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("UnityEngine", "Vector2", "rightVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2 rightVector
void UnityEngine::Vector2::_set_rightVector(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_set_rightVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2", "rightVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2 positiveInfinityVector
UnityEngine::Vector2 UnityEngine::Vector2::_get_positiveInfinityVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_get_positiveInfinityVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("UnityEngine", "Vector2", "positiveInfinityVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2 positiveInfinityVector
void UnityEngine::Vector2::_set_positiveInfinityVector(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_set_positiveInfinityVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2", "positiveInfinityVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2 negativeInfinityVector
UnityEngine::Vector2 UnityEngine::Vector2::_get_negativeInfinityVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_get_negativeInfinityVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("UnityEngine", "Vector2", "negativeInfinityVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2 negativeInfinityVector
void UnityEngine::Vector2::_set_negativeInfinityVector(UnityEngine::Vector2 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_set_negativeInfinityVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2", "negativeInfinityVector", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kEpsilon
float UnityEngine::Vector2::_get_kEpsilon() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_get_kEpsilon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngine", "Vector2", "kEpsilon"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kEpsilon
void UnityEngine::Vector2::_set_kEpsilon(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_set_kEpsilon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2", "kEpsilon", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kEpsilonNormalSqrt
float UnityEngine::Vector2::_get_kEpsilonNormalSqrt() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_get_kEpsilonNormalSqrt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngine", "Vector2", "kEpsilonNormalSqrt"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kEpsilonNormalSqrt
void UnityEngine::Vector2::_set_kEpsilonNormalSqrt(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::_set_kEpsilonNormalSqrt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2", "kEpsilonNormalSqrt", value));
}
// Autogenerated method: UnityEngine.Vector2.get_Item
float UnityEngine::Vector2::get_Item(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Vector2.set_Item
void UnityEngine::Vector2::set_Item(int index, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, index, value);
}
// Autogenerated method: UnityEngine.Vector2.Lerp
UnityEngine::Vector2 UnityEngine::Vector2::Lerp(UnityEngine::Vector2 a, UnityEngine::Vector2 b, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::Lerp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "Lerp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b, t);
}
// Autogenerated method: UnityEngine.Vector2.Scale
UnityEngine::Vector2 UnityEngine::Vector2::Scale(UnityEngine::Vector2 a, UnityEngine::Vector2 b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::Scale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "Scale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Vector2.Scale
void UnityEngine::Vector2::Scale(UnityEngine::Vector2 scale) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::Scale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Scale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(scale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, scale);
}
// Autogenerated method: UnityEngine.Vector2.Normalize
void UnityEngine::Vector2::Normalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::Normalize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Normalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2.get_normalized
UnityEngine::Vector2 UnityEngine::Vector2::get_normalized() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::get_normalized");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_normalized", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2.ToString
::Il2CppString* UnityEngine::Vector2::ToString(::Il2CppString* format) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::ToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method, format);
}
// Autogenerated method: UnityEngine.Vector2.Equals
bool UnityEngine::Vector2::Equals(UnityEngine::Vector2 other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Vector2.Perpendicular
UnityEngine::Vector2 UnityEngine::Vector2::Perpendicular(UnityEngine::Vector2 inDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::Perpendicular");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "Perpendicular", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(inDirection)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, inDirection);
}
// Autogenerated method: UnityEngine.Vector2.Dot
float UnityEngine::Vector2::Dot(UnityEngine::Vector2 lhs, UnityEngine::Vector2 rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::Dot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "Dot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Vector2.get_magnitude
float UnityEngine::Vector2::get_magnitude() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::get_magnitude");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_magnitude", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2.get_sqrMagnitude
float UnityEngine::Vector2::get_sqrMagnitude() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::get_sqrMagnitude");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_sqrMagnitude", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2.Angle
float UnityEngine::Vector2::Angle(UnityEngine::Vector2 from, UnityEngine::Vector2 to) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::Angle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "Angle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, from, to);
}
// Autogenerated method: UnityEngine.Vector2.SignedAngle
float UnityEngine::Vector2::SignedAngle(UnityEngine::Vector2 from, UnityEngine::Vector2 to) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::SignedAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "SignedAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(from), ::il2cpp_utils::ExtractType(to)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, from, to);
}
// Autogenerated method: UnityEngine.Vector2.Distance
float UnityEngine::Vector2::Distance(UnityEngine::Vector2 a, UnityEngine::Vector2 b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::Distance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "Distance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Vector2.get_zero
UnityEngine::Vector2 UnityEngine::Vector2::get_zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::get_zero");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "get_zero", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2.get_one
UnityEngine::Vector2 UnityEngine::Vector2::get_one() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::get_one");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "get_one", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2.get_up
UnityEngine::Vector2 UnityEngine::Vector2::get_up() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::get_up");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "get_up", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2.get_right
UnityEngine::Vector2 UnityEngine::Vector2::get_right() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::get_right");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "get_right", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2..cctor
void UnityEngine::Vector2::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2.ToString
::Il2CppString* UnityEngine::Vector2::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2.GetHashCode
int UnityEngine::Vector2::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2.Equals
bool UnityEngine::Vector2::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Vector2.op_Addition
UnityEngine::Vector2 UnityEngine::operator+(const UnityEngine::Vector2& a, const UnityEngine::Vector2& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Vector2.op_Subtraction
UnityEngine::Vector2 UnityEngine::operator-(const UnityEngine::Vector2& a, const UnityEngine::Vector2& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Vector2.op_Multiply
UnityEngine::Vector2 UnityEngine::operator*(const UnityEngine::Vector2& a, const UnityEngine::Vector2& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Vector2.op_Division
UnityEngine::Vector2 UnityEngine::operator/(const UnityEngine::Vector2& a, const UnityEngine::Vector2& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::op_Division");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "op_Division", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Vector2.op_UnaryNegation
UnityEngine::Vector2 UnityEngine::operator-(const UnityEngine::Vector2& a) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::op_UnaryNegation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "op_UnaryNegation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a);
}
// Autogenerated method: UnityEngine.Vector2.op_Multiply
UnityEngine::Vector2 UnityEngine::operator*(const UnityEngine::Vector2& a, const float& d) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(d)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, d);
}
// Autogenerated method: UnityEngine.Vector2.op_Multiply
UnityEngine::Vector2 UnityEngine::operator*(const float& d, const UnityEngine::Vector2& a) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(d), ::il2cpp_utils::ExtractType(a)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, d, a);
}
// Autogenerated method: UnityEngine.Vector2.op_Division
UnityEngine::Vector2 UnityEngine::operator/(const UnityEngine::Vector2& a, const float& d) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::op_Division");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "op_Division", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(d)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, d);
}
// Autogenerated method: UnityEngine.Vector2.op_Equality
bool UnityEngine::operator ==(const UnityEngine::Vector2& lhs, const UnityEngine::Vector2& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Vector2.op_Inequality
bool UnityEngine::operator !=(const UnityEngine::Vector2& lhs, const UnityEngine::Vector2& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Writing MetadataGetter for method: Vector2::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Vector2::*)(int)>(&Vector2::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Vector2::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector2::*)(int, float)>(&Vector2::set_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector2::Vector2
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector2::*)(float, float)>(&Vector2::Vector2<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector2::*)(float, float)>(&Vector2::Vector2<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector2::Lerp
// Il2CppName: Lerp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(UnityEngine::Vector2, UnityEngine::Vector2, float)>(&Vector2::Lerp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "Lerp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector2::Scale
// Il2CppName: Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(UnityEngine::Vector2, UnityEngine::Vector2)>(&Vector2::Scale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: Vector2::Scale
// Il2CppName: Scale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector2::*)(UnityEngine::Vector2)>(&Vector2::Scale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "Scale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: Vector2::Normalize
// Il2CppName: Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector2::*)()>(&Vector2::Normalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2::get_normalized
// Il2CppName: get_normalized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (Vector2::*)()>(&Vector2::get_normalized)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "get_normalized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Vector2::*)(::Il2CppString*)>(&Vector2::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Vector2::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector2::*)(UnityEngine::Vector2)>(&Vector2::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: Vector2::Perpendicular
// Il2CppName: Perpendicular
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(UnityEngine::Vector2)>(&Vector2::Perpendicular)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "Perpendicular", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: Vector2::Dot
// Il2CppName: Dot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Vector2, UnityEngine::Vector2)>(&Vector2::Dot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "Dot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: Vector2::get_magnitude
// Il2CppName: get_magnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Vector2::*)()>(&Vector2::get_magnitude)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "get_magnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2::get_sqrMagnitude
// Il2CppName: get_sqrMagnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Vector2::*)()>(&Vector2::get_sqrMagnitude)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "get_sqrMagnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2::Angle
// Il2CppName: Angle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Vector2, UnityEngine::Vector2)>(&Vector2::Angle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "Angle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: Vector2::SignedAngle
// Il2CppName: SignedAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Vector2, UnityEngine::Vector2)>(&Vector2::SignedAngle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "SignedAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: Vector2::Distance
// Il2CppName: Distance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Vector2, UnityEngine::Vector2)>(&Vector2::Distance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "Distance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2>()});
  }
};
// Writing MetadataGetter for method: Vector2::get_zero
// Il2CppName: get_zero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)()>(&Vector2::get_zero)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "get_zero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2::get_one
// Il2CppName: get_one
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)()>(&Vector2::get_one)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "get_one", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2::get_up
// Il2CppName: get_up
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)()>(&Vector2::get_up)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "get_up", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2::get_right
// Il2CppName: get_right
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)()>(&Vector2::get_right)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "get_right", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vector2::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Vector2::*)()>(&Vector2::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vector2::*)()>(&Vector2::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector2::*)(::Il2CppObject*)>(&Vector2::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Vector2::operator+
// Il2CppName: op_Addition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(const UnityEngine::Vector2&, const UnityEngine::Vector2&)>(&Vector2::operator+)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "op_Addition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>()});
  }
};
// Writing MetadataGetter for method: Vector2::operator-
// Il2CppName: op_Subtraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(const UnityEngine::Vector2&, const UnityEngine::Vector2&)>(&Vector2::operator-)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "op_Subtraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>()});
  }
};
// Writing MetadataGetter for method: Vector2::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(const UnityEngine::Vector2&, const UnityEngine::Vector2&)>(&Vector2::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>()});
  }
};
// Writing MetadataGetter for method: Vector2::operator/
// Il2CppName: op_Division
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(const UnityEngine::Vector2&, const UnityEngine::Vector2&)>(&Vector2::operator/)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "op_Division", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>()});
  }
};
// Writing MetadataGetter for method: Vector2::operator-
// Il2CppName: op_UnaryNegation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(const UnityEngine::Vector2&)>(&Vector2::operator-)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "op_UnaryNegation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>()});
  }
};
// Writing MetadataGetter for method: Vector2::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(const UnityEngine::Vector2&, const float&)>(&Vector2::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<const float&>()});
  }
};
// Writing MetadataGetter for method: Vector2::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(const float&, const UnityEngine::Vector2&)>(&Vector2::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const float&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>()});
  }
};
// Writing MetadataGetter for method: Vector2::operator/
// Il2CppName: op_Division
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (*)(const UnityEngine::Vector2&, const float&)>(&Vector2::operator/)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "op_Division", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<const float&>()});
  }
};
// Writing MetadataGetter for method: Vector2::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Vector2&, const UnityEngine::Vector2&)>(&Vector2::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>()});
  }
};
// Writing MetadataGetter for method: Vector2::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Vector2&, const UnityEngine::Vector2&)>(&Vector2::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Vector2Int
#include "UnityEngine/Vector2Int.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2Int s_Zero
UnityEngine::Vector2Int UnityEngine::Vector2Int::_get_s_Zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::_get_s_Zero");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2Int>("UnityEngine", "Vector2Int", "s_Zero"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2Int s_Zero
void UnityEngine::Vector2Int::_set_s_Zero(UnityEngine::Vector2Int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::_set_s_Zero");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2Int", "s_Zero", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2Int s_One
UnityEngine::Vector2Int UnityEngine::Vector2Int::_get_s_One() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::_get_s_One");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2Int>("UnityEngine", "Vector2Int", "s_One"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2Int s_One
void UnityEngine::Vector2Int::_set_s_One(UnityEngine::Vector2Int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::_set_s_One");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2Int", "s_One", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2Int s_Up
UnityEngine::Vector2Int UnityEngine::Vector2Int::_get_s_Up() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::_get_s_Up");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2Int>("UnityEngine", "Vector2Int", "s_Up"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2Int s_Up
void UnityEngine::Vector2Int::_set_s_Up(UnityEngine::Vector2Int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::_set_s_Up");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2Int", "s_Up", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2Int s_Down
UnityEngine::Vector2Int UnityEngine::Vector2Int::_get_s_Down() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::_get_s_Down");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2Int>("UnityEngine", "Vector2Int", "s_Down"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2Int s_Down
void UnityEngine::Vector2Int::_set_s_Down(UnityEngine::Vector2Int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::_set_s_Down");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2Int", "s_Down", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2Int s_Left
UnityEngine::Vector2Int UnityEngine::Vector2Int::_get_s_Left() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::_get_s_Left");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2Int>("UnityEngine", "Vector2Int", "s_Left"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2Int s_Left
void UnityEngine::Vector2Int::_set_s_Left(UnityEngine::Vector2Int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::_set_s_Left");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2Int", "s_Left", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector2Int s_Right
UnityEngine::Vector2Int UnityEngine::Vector2Int::_get_s_Right() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::_get_s_Right");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2Int>("UnityEngine", "Vector2Int", "s_Right"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector2Int s_Right
void UnityEngine::Vector2Int::_set_s_Right(UnityEngine::Vector2Int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::_set_s_Right");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector2Int", "s_Right", value));
}
// Autogenerated method: UnityEngine.Vector2Int.get_x
int UnityEngine::Vector2Int::get_x() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::get_x");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_x", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2Int.set_x
void UnityEngine::Vector2Int::set_x(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::set_x");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_x", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Vector2Int.get_y
int UnityEngine::Vector2Int::get_y() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::get_y");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_y", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2Int.set_y
void UnityEngine::Vector2Int::set_y(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::set_y");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_y", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Vector2Int.Equals
bool UnityEngine::Vector2Int::Equals(UnityEngine::Vector2Int other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Vector2Int.get_one
UnityEngine::Vector2Int UnityEngine::Vector2Int::get_one() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::get_one");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2Int", "get_one", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2Int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2Int..cctor
void UnityEngine::Vector2Int::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2Int", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2Int.Equals
bool UnityEngine::Vector2Int::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Vector2Int.GetHashCode
int UnityEngine::Vector2Int::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2Int.ToString
::Il2CppString* UnityEngine::Vector2Int::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector2Int.op_Multiply
UnityEngine::Vector2Int UnityEngine::operator*(const UnityEngine::Vector2Int& a, const int& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector2Int::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector2Int", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector2Int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Writing MetadataGetter for method: Vector2Int::get_x
// Il2CppName: get_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vector2Int::*)()>(&Vector2Int::get_x)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2Int), "get_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2Int::set_x
// Il2CppName: set_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector2Int::*)(int)>(&Vector2Int::set_x)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2Int), "set_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Vector2Int::get_y
// Il2CppName: get_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vector2Int::*)()>(&Vector2Int::get_y)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2Int), "get_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2Int::set_y
// Il2CppName: set_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector2Int::*)(int)>(&Vector2Int::set_y)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2Int), "set_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Vector2Int::Vector2Int
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector2Int::*)(int, int)>(&Vector2Int::Vector2Int<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2Int), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector2Int::*)(int, int)>(&Vector2Int::Vector2Int<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2Int), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Vector2Int::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector2Int::*)(UnityEngine::Vector2Int)>(&Vector2Int::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2Int), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector2Int>()});
  }
};
// Writing MetadataGetter for method: Vector2Int::get_one
// Il2CppName: get_one
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2Int (*)()>(&Vector2Int::get_one)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2Int), "get_one", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2Int::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vector2Int::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2Int), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2Int::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector2Int::*)(::Il2CppObject*)>(&Vector2Int::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2Int), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Vector2Int::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vector2Int::*)()>(&Vector2Int::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2Int), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2Int::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Vector2Int::*)()>(&Vector2Int::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2Int), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector2Int::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2Int (*)(const UnityEngine::Vector2Int&, const int&)>(&Vector2Int::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector2Int), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector2Int&>(), ::il2cpp_utils::ExtractIndependentType<const int&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kEpsilon
float UnityEngine::Vector4::_get_kEpsilon() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::_get_kEpsilon");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngine", "Vector4", "kEpsilon"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kEpsilon
void UnityEngine::Vector4::_set_kEpsilon(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::_set_kEpsilon");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector4", "kEpsilon", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector4 zeroVector
UnityEngine::Vector4 UnityEngine::Vector4::_get_zeroVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::_get_zeroVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector4>("UnityEngine", "Vector4", "zeroVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector4 zeroVector
void UnityEngine::Vector4::_set_zeroVector(UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::_set_zeroVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector4", "zeroVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector4 oneVector
UnityEngine::Vector4 UnityEngine::Vector4::_get_oneVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::_get_oneVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector4>("UnityEngine", "Vector4", "oneVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector4 oneVector
void UnityEngine::Vector4::_set_oneVector(UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::_set_oneVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector4", "oneVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector4 positiveInfinityVector
UnityEngine::Vector4 UnityEngine::Vector4::_get_positiveInfinityVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::_get_positiveInfinityVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector4>("UnityEngine", "Vector4", "positiveInfinityVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector4 positiveInfinityVector
void UnityEngine::Vector4::_set_positiveInfinityVector(UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::_set_positiveInfinityVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector4", "positiveInfinityVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector4 negativeInfinityVector
UnityEngine::Vector4 UnityEngine::Vector4::_get_negativeInfinityVector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::_get_negativeInfinityVector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector4>("UnityEngine", "Vector4", "negativeInfinityVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector4 negativeInfinityVector
void UnityEngine::Vector4::_set_negativeInfinityVector(UnityEngine::Vector4 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::_set_negativeInfinityVector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector4", "negativeInfinityVector", value));
}
// Autogenerated method: UnityEngine.Vector4.get_Item
float UnityEngine::Vector4::get_Item(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::get_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method, index);
}
// Autogenerated method: UnityEngine.Vector4.set_Item
void UnityEngine::Vector4::set_Item(int index, float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::set_Item");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_Item", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, index, value);
}
// Autogenerated method: UnityEngine.Vector4.Equals
bool UnityEngine::Vector4::Equals(UnityEngine::Vector4 other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Vector4.Normalize
void UnityEngine::Vector4::Normalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::Normalize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Normalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector4.Dot
float UnityEngine::Vector4::Dot(UnityEngine::Vector4 a, UnityEngine::Vector4 b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::Dot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector4", "Dot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Vector4.Magnitude
float UnityEngine::Vector4::Magnitude(UnityEngine::Vector4 a) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::Magnitude");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector4", "Magnitude", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a);
}
// Autogenerated method: UnityEngine.Vector4.get_magnitude
float UnityEngine::Vector4::get_magnitude() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::get_magnitude");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_magnitude", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector4.get_sqrMagnitude
float UnityEngine::Vector4::get_sqrMagnitude() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::get_sqrMagnitude");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_sqrMagnitude", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector4.get_zero
UnityEngine::Vector4 UnityEngine::Vector4::get_zero() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::get_zero");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector4", "get_zero", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector4.get_one
UnityEngine::Vector4 UnityEngine::Vector4::get_one() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::get_one");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector4", "get_one", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector4.ToString
::Il2CppString* UnityEngine::Vector4::ToString(::Il2CppString* format) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::ToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method, format);
}
// Autogenerated method: UnityEngine.Vector4..cctor
void UnityEngine::Vector4::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector4", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Vector4.GetHashCode
int UnityEngine::Vector4::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector4.Equals
bool UnityEngine::Vector4::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Vector4.ToString
::Il2CppString* UnityEngine::Vector4::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.Vector4.op_Addition
UnityEngine::Vector4 UnityEngine::operator+(const UnityEngine::Vector4& a, const UnityEngine::Vector4& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::op_Addition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector4", "op_Addition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Vector4.op_Subtraction
UnityEngine::Vector4 UnityEngine::operator-(const UnityEngine::Vector4& a, const UnityEngine::Vector4& b) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::op_Subtraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector4", "op_Subtraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, b);
}
// Autogenerated method: UnityEngine.Vector4.op_Multiply
UnityEngine::Vector4 UnityEngine::operator*(const UnityEngine::Vector4& a, const float& d) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::op_Multiply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector4", "op_Multiply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(d)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, d);
}
// Autogenerated method: UnityEngine.Vector4.op_Division
UnityEngine::Vector4 UnityEngine::operator/(const UnityEngine::Vector4& a, const float& d) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::op_Division");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector4", "op_Division", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(d)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector4, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, a, d);
}
// Autogenerated method: UnityEngine.Vector4.op_Equality
bool UnityEngine::operator ==(const UnityEngine::Vector4& lhs, const UnityEngine::Vector4& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector4", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Vector4.op_Inequality
bool UnityEngine::operator !=(const UnityEngine::Vector4& lhs, const UnityEngine::Vector4& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Vector4::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Vector4", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Writing MetadataGetter for method: Vector4::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Vector4::*)(int)>(&Vector4::get_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Vector4::set_Item
// Il2CppName: set_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector4::*)(int, float)>(&Vector4::set_Item)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "set_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector4::Vector4
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector4::*)(float, float, float, float)>(&Vector4::Vector4<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector4::*)(float, float, float, float)>(&Vector4::Vector4<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector4::Vector4
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector4::*)(float, float, float)>(&Vector4::Vector4<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector4::*)(float, float, float)>(&Vector4::Vector4<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Vector4::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector4::*)(UnityEngine::Vector4)>(&Vector4::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: Vector4::Normalize
// Il2CppName: Normalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Vector4::*)()>(&Vector4::Normalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "Normalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector4::Dot
// Il2CppName: Dot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Vector4, UnityEngine::Vector4)>(&Vector4::Dot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "Dot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: Vector4::Magnitude
// Il2CppName: Magnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(UnityEngine::Vector4)>(&Vector4::Magnitude)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "Magnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector4>()});
  }
};
// Writing MetadataGetter for method: Vector4::get_magnitude
// Il2CppName: get_magnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Vector4::*)()>(&Vector4::get_magnitude)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "get_magnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector4::get_sqrMagnitude
// Il2CppName: get_sqrMagnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Vector4::*)()>(&Vector4::get_sqrMagnitude)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "get_sqrMagnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector4::get_zero
// Il2CppName: get_zero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector4 (*)()>(&Vector4::get_zero)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "get_zero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector4::get_one
// Il2CppName: get_one
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector4 (*)()>(&Vector4::get_one)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "get_one", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector4::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Vector4::*)(::Il2CppString*)>(&Vector4::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Vector4::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Vector4::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector4::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Vector4::*)()>(&Vector4::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector4::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Vector4::*)(::Il2CppObject*)>(&Vector4::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Vector4::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Vector4::*)()>(&Vector4::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Vector4::operator+
// Il2CppName: op_Addition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector4 (*)(const UnityEngine::Vector4&, const UnityEngine::Vector4&)>(&Vector4::operator+)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "op_Addition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector4&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector4&>()});
  }
};
// Writing MetadataGetter for method: Vector4::operator-
// Il2CppName: op_Subtraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector4 (*)(const UnityEngine::Vector4&, const UnityEngine::Vector4&)>(&Vector4::operator-)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "op_Subtraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector4&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector4&>()});
  }
};
// Writing MetadataGetter for method: Vector4::operator*
// Il2CppName: op_Multiply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector4 (*)(const UnityEngine::Vector4&, const float&)>(&Vector4::operator*)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "op_Multiply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector4&>(), ::il2cpp_utils::ExtractIndependentType<const float&>()});
  }
};
// Writing MetadataGetter for method: Vector4::operator/
// Il2CppName: op_Division
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector4 (*)(const UnityEngine::Vector4&, const float&)>(&Vector4::operator/)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "op_Division", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector4&>(), ::il2cpp_utils::ExtractIndependentType<const float&>()});
  }
};
// Writing MetadataGetter for method: Vector4::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Vector4&, const UnityEngine::Vector4&)>(&Vector4::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector4&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector4&>()});
  }
};
// Writing MetadataGetter for method: Vector4::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::Vector4&, const UnityEngine::Vector4&)>(&Vector4::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Vector4), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector4&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::Vector4&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.IPlayerEditorConnectionNative
#include "UnityEngine/IPlayerEditorConnectionNative.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.IPlayerEditorConnectionNative.Initialize
void UnityEngine::IPlayerEditorConnectionNative::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::IPlayerEditorConnectionNative::Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.IPlayerEditorConnectionNative.DisconnectAll
void UnityEngine::IPlayerEditorConnectionNative::DisconnectAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::IPlayerEditorConnectionNative::DisconnectAll");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisconnectAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.IPlayerEditorConnectionNative.SendMessage
void UnityEngine::IPlayerEditorConnectionNative::SendMessage(System::Guid messageId, ::Array<uint8_t>* data, int playerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::IPlayerEditorConnectionNative::SendMessage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(messageId), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(playerId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, messageId, data, playerId);
}
// Autogenerated method: UnityEngine.IPlayerEditorConnectionNative.TrySendMessage
bool UnityEngine::IPlayerEditorConnectionNative::TrySendMessage(System::Guid messageId, ::Array<uint8_t>* data, int playerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::IPlayerEditorConnectionNative::TrySendMessage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TrySendMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(messageId), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(playerId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, messageId, data, playerId);
}
// Autogenerated method: UnityEngine.IPlayerEditorConnectionNative.Poll
void UnityEngine::IPlayerEditorConnectionNative::Poll() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::IPlayerEditorConnectionNative::Poll");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Poll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.IPlayerEditorConnectionNative.RegisterInternal
void UnityEngine::IPlayerEditorConnectionNative::RegisterInternal(System::Guid messageId) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::IPlayerEditorConnectionNative::RegisterInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(messageId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, messageId);
}
// Autogenerated method: UnityEngine.IPlayerEditorConnectionNative.UnregisterInternal
void UnityEngine::IPlayerEditorConnectionNative::UnregisterInternal(System::Guid messageId) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::IPlayerEditorConnectionNative::UnregisterInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnregisterInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(messageId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, messageId);
}
// Autogenerated method: UnityEngine.IPlayerEditorConnectionNative.IsConnected
bool UnityEngine::IPlayerEditorConnectionNative::IsConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::IPlayerEditorConnectionNative::IsConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IPlayerEditorConnectionNative::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPlayerEditorConnectionNative::*)()>(&IPlayerEditorConnectionNative::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayerEditorConnectionNative*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPlayerEditorConnectionNative::DisconnectAll
// Il2CppName: DisconnectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPlayerEditorConnectionNative::*)()>(&IPlayerEditorConnectionNative::DisconnectAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayerEditorConnectionNative*), "DisconnectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPlayerEditorConnectionNative::SendMessage
// Il2CppName: SendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPlayerEditorConnectionNative::*)(System::Guid, ::Array<uint8_t>*, int)>(&IPlayerEditorConnectionNative::SendMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayerEditorConnectionNative*), "SendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Guid>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IPlayerEditorConnectionNative::TrySendMessage
// Il2CppName: TrySendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IPlayerEditorConnectionNative::*)(System::Guid, ::Array<uint8_t>*, int)>(&IPlayerEditorConnectionNative::TrySendMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayerEditorConnectionNative*), "TrySendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Guid>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IPlayerEditorConnectionNative::Poll
// Il2CppName: Poll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPlayerEditorConnectionNative::*)()>(&IPlayerEditorConnectionNative::Poll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayerEditorConnectionNative*), "Poll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IPlayerEditorConnectionNative::RegisterInternal
// Il2CppName: RegisterInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPlayerEditorConnectionNative::*)(System::Guid)>(&IPlayerEditorConnectionNative::RegisterInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayerEditorConnectionNative*), "RegisterInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Guid>()});
  }
};
// Writing MetadataGetter for method: IPlayerEditorConnectionNative::UnregisterInternal
// Il2CppName: UnregisterInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IPlayerEditorConnectionNative::*)(System::Guid)>(&IPlayerEditorConnectionNative::UnregisterInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayerEditorConnectionNative*), "UnregisterInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Guid>()});
  }
};
// Writing MetadataGetter for method: IPlayerEditorConnectionNative::IsConnected
// Il2CppName: IsConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IPlayerEditorConnectionNative::*)()>(&IPlayerEditorConnectionNative::IsConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IPlayerEditorConnectionNative*), "IsConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.PlayerConnectionInternal
#include "UnityEngine/PlayerConnectionInternal.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.PlayerConnectionInternal.UnityEngine.IPlayerEditorConnectionNative.SendMessage
void UnityEngine::PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_SendMessage(System::Guid messageId, ::Array<uint8_t>* data, int playerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::UnityEngine.IPlayerEditorConnectionNative.SendMessage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.IPlayerEditorConnectionNative.SendMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(messageId), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(playerId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, messageId, data, playerId);
}
// Autogenerated method: UnityEngine.PlayerConnectionInternal.UnityEngine.IPlayerEditorConnectionNative.TrySendMessage
bool UnityEngine::PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_TrySendMessage(System::Guid messageId, ::Array<uint8_t>* data, int playerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::UnityEngine.IPlayerEditorConnectionNative.TrySendMessage");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.IPlayerEditorConnectionNative.TrySendMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(messageId), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(playerId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, messageId, data, playerId);
}
// Autogenerated method: UnityEngine.PlayerConnectionInternal.UnityEngine.IPlayerEditorConnectionNative.Poll
void UnityEngine::PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_Poll() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::UnityEngine.IPlayerEditorConnectionNative.Poll");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.IPlayerEditorConnectionNative.Poll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.PlayerConnectionInternal.UnityEngine.IPlayerEditorConnectionNative.RegisterInternal
void UnityEngine::PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_RegisterInternal(System::Guid messageId) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::UnityEngine.IPlayerEditorConnectionNative.RegisterInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.IPlayerEditorConnectionNative.RegisterInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(messageId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, messageId);
}
// Autogenerated method: UnityEngine.PlayerConnectionInternal.UnityEngine.IPlayerEditorConnectionNative.UnregisterInternal
void UnityEngine::PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_UnregisterInternal(System::Guid messageId) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::UnityEngine.IPlayerEditorConnectionNative.UnregisterInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.IPlayerEditorConnectionNative.UnregisterInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(messageId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, messageId);
}
// Autogenerated method: UnityEngine.PlayerConnectionInternal.UnityEngine.IPlayerEditorConnectionNative.Initialize
void UnityEngine::PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::UnityEngine.IPlayerEditorConnectionNative.Initialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.IPlayerEditorConnectionNative.Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.PlayerConnectionInternal.UnityEngine.IPlayerEditorConnectionNative.IsConnected
bool UnityEngine::PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_IsConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::UnityEngine.IPlayerEditorConnectionNative.IsConnected");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.IPlayerEditorConnectionNative.IsConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.PlayerConnectionInternal.UnityEngine.IPlayerEditorConnectionNative.DisconnectAll
void UnityEngine::PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_DisconnectAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::UnityEngine.IPlayerEditorConnectionNative.DisconnectAll");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnityEngine.IPlayerEditorConnectionNative.DisconnectAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.PlayerConnectionInternal.IsConnected
bool UnityEngine::PlayerConnectionInternal::IsConnected() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::IsConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerConnectionInternal", "IsConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.PlayerConnectionInternal.Initialize
void UnityEngine::PlayerConnectionInternal::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerConnectionInternal", "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.PlayerConnectionInternal.RegisterInternal
void UnityEngine::PlayerConnectionInternal::RegisterInternal(::Il2CppString* messageId) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::RegisterInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerConnectionInternal", "RegisterInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(messageId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, messageId);
}
// Autogenerated method: UnityEngine.PlayerConnectionInternal.UnregisterInternal
void UnityEngine::PlayerConnectionInternal::UnregisterInternal(::Il2CppString* messageId) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::UnregisterInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerConnectionInternal", "UnregisterInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(messageId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, messageId);
}
// Autogenerated method: UnityEngine.PlayerConnectionInternal.SendMessage
void UnityEngine::PlayerConnectionInternal::SendMessage(::Il2CppString* messageId, ::Array<uint8_t>* data, int playerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::SendMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerConnectionInternal", "SendMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(messageId), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(playerId)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, messageId, data, playerId);
}
// Autogenerated method: UnityEngine.PlayerConnectionInternal.TrySendMessage
bool UnityEngine::PlayerConnectionInternal::TrySendMessage(::Il2CppString* messageId, ::Array<uint8_t>* data, int playerId) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::TrySendMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerConnectionInternal", "TrySendMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(messageId), ::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(playerId)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, messageId, data, playerId);
}
// Autogenerated method: UnityEngine.PlayerConnectionInternal.PollInternal
void UnityEngine::PlayerConnectionInternal::PollInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::PollInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerConnectionInternal", "PollInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.PlayerConnectionInternal.DisconnectAll
void UnityEngine::PlayerConnectionInternal::DisconnectAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerConnectionInternal::DisconnectAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerConnectionInternal", "DisconnectAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_SendMessage
// Il2CppName: UnityEngine.IPlayerEditorConnectionNative.SendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerConnectionInternal::*)(System::Guid, ::Array<uint8_t>*, int)>(&PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_SendMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "UnityEngine.IPlayerEditorConnectionNative.SendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Guid>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_TrySendMessage
// Il2CppName: UnityEngine.IPlayerEditorConnectionNative.TrySendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayerConnectionInternal::*)(System::Guid, ::Array<uint8_t>*, int)>(&PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_TrySendMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "UnityEngine.IPlayerEditorConnectionNative.TrySendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Guid>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_Poll
// Il2CppName: UnityEngine.IPlayerEditorConnectionNative.Poll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerConnectionInternal::*)()>(&PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_Poll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "UnityEngine.IPlayerEditorConnectionNative.Poll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_RegisterInternal
// Il2CppName: UnityEngine.IPlayerEditorConnectionNative.RegisterInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerConnectionInternal::*)(System::Guid)>(&PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_RegisterInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "UnityEngine.IPlayerEditorConnectionNative.RegisterInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Guid>()});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_UnregisterInternal
// Il2CppName: UnityEngine.IPlayerEditorConnectionNative.UnregisterInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerConnectionInternal::*)(System::Guid)>(&PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_UnregisterInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "UnityEngine.IPlayerEditorConnectionNative.UnregisterInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Guid>()});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_Initialize
// Il2CppName: UnityEngine.IPlayerEditorConnectionNative.Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerConnectionInternal::*)()>(&PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "UnityEngine.IPlayerEditorConnectionNative.Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_IsConnected
// Il2CppName: UnityEngine.IPlayerEditorConnectionNative.IsConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PlayerConnectionInternal::*)()>(&PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_IsConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "UnityEngine.IPlayerEditorConnectionNative.IsConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_DisconnectAll
// Il2CppName: UnityEngine.IPlayerEditorConnectionNative.DisconnectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerConnectionInternal::*)()>(&PlayerConnectionInternal::UnityEngine_IPlayerEditorConnectionNative_DisconnectAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "UnityEngine.IPlayerEditorConnectionNative.DisconnectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::IsConnected
// Il2CppName: IsConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&PlayerConnectionInternal::IsConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "IsConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayerConnectionInternal::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::RegisterInternal
// Il2CppName: RegisterInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&PlayerConnectionInternal::RegisterInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "RegisterInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::UnregisterInternal
// Il2CppName: UnregisterInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&PlayerConnectionInternal::UnregisterInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "UnregisterInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::SendMessage
// Il2CppName: SendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Array<uint8_t>*, int)>(&PlayerConnectionInternal::SendMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "SendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::TrySendMessage
// Il2CppName: TrySendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Array<uint8_t>*, int)>(&PlayerConnectionInternal::TrySendMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "TrySendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::PollInternal
// Il2CppName: PollInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayerConnectionInternal::PollInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "PollInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::DisconnectAll
// Il2CppName: DisconnectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayerConnectionInternal::DisconnectAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), "DisconnectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayerConnectionInternal::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerConnectionInternal::*)()>(&PlayerConnectionInternal::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerConnectionInternal::*)()>(&PlayerConnectionInternal::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerConnectionInternal*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.PlayerPrefsException
#include "UnityEngine/PlayerPrefsException.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PlayerPrefsException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerPrefsException::*)(::Il2CppString*)>(&PlayerPrefsException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerPrefsException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayerPrefsException::*)(::Il2CppString*)>(&PlayerPrefsException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerPrefsException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.PlayerPrefs
#include "UnityEngine/PlayerPrefs.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.PlayerPrefs.TrySetInt
bool UnityEngine::PlayerPrefs::TrySetInt(::Il2CppString* key, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerPrefs::TrySetInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerPrefs", "TrySetInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key, value);
}
// Autogenerated method: UnityEngine.PlayerPrefs.TrySetSetString
bool UnityEngine::PlayerPrefs::TrySetSetString(::Il2CppString* key, ::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerPrefs::TrySetSetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerPrefs", "TrySetSetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key, value);
}
// Autogenerated method: UnityEngine.PlayerPrefs.SetInt
void UnityEngine::PlayerPrefs::SetInt(::Il2CppString* key, int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerPrefs::SetInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerPrefs", "SetInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key, value);
}
// Autogenerated method: UnityEngine.PlayerPrefs.GetInt
int UnityEngine::PlayerPrefs::GetInt(::Il2CppString* key, int defaultValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerPrefs::GetInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerPrefs", "GetInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(defaultValue)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key, defaultValue);
}
// Autogenerated method: UnityEngine.PlayerPrefs.GetInt
int UnityEngine::PlayerPrefs::GetInt(::Il2CppString* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerPrefs::GetInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerPrefs", "GetInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key);
}
// Autogenerated method: UnityEngine.PlayerPrefs.SetString
void UnityEngine::PlayerPrefs::SetString(::Il2CppString* key, ::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerPrefs::SetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerPrefs", "SetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key, value);
}
// Autogenerated method: UnityEngine.PlayerPrefs.GetString
::Il2CppString* UnityEngine::PlayerPrefs::GetString(::Il2CppString* key, ::Il2CppString* defaultValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerPrefs::GetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerPrefs", "GetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key), ::il2cpp_utils::ExtractType(defaultValue)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key, defaultValue);
}
// Autogenerated method: UnityEngine.PlayerPrefs.GetString
::Il2CppString* UnityEngine::PlayerPrefs::GetString(::Il2CppString* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerPrefs::GetString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerPrefs", "GetString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(key)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key);
}
// Autogenerated method: UnityEngine.PlayerPrefs.DeleteAll
void UnityEngine::PlayerPrefs::DeleteAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PlayerPrefs::DeleteAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PlayerPrefs", "DeleteAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: PlayerPrefs::TrySetInt
// Il2CppName: TrySetInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, int)>(&PlayerPrefs::TrySetInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerPrefs*), "TrySetInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayerPrefs::TrySetSetString
// Il2CppName: TrySetSetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString*)>(&PlayerPrefs::TrySetSetString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerPrefs*), "TrySetSetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayerPrefs::SetInt
// Il2CppName: SetInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, int)>(&PlayerPrefs::SetInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerPrefs*), "SetInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayerPrefs::GetInt
// Il2CppName: GetInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*, int)>(&PlayerPrefs::GetInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerPrefs*), "GetInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: PlayerPrefs::GetInt
// Il2CppName: GetInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*)>(&PlayerPrefs::GetInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerPrefs*), "GetInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayerPrefs::SetString
// Il2CppName: SetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*)>(&PlayerPrefs::SetString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerPrefs*), "SetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayerPrefs::GetString
// Il2CppName: GetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppString*)>(&PlayerPrefs::GetString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerPrefs*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayerPrefs::GetString
// Il2CppName: GetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&PlayerPrefs::GetString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerPrefs*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PlayerPrefs::DeleteAll
// Il2CppName: DeleteAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&PlayerPrefs::DeleteAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayerPrefs*), "DeleteAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.PropertyAttribute
#include "UnityEngine/PropertyAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: PropertyAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PropertyAttribute::*)()>(&PropertyAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PropertyAttribute::*)()>(&PropertyAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ContextMenuItemAttribute
#include "UnityEngine/ContextMenuItemAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ContextMenuItemAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContextMenuItemAttribute::*)(::Il2CppString*, ::Il2CppString*)>(&ContextMenuItemAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContextMenuItemAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContextMenuItemAttribute::*)(::Il2CppString*, ::Il2CppString*)>(&ContextMenuItemAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContextMenuItemAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.TooltipAttribute
#include "UnityEngine/TooltipAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TooltipAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TooltipAttribute::*)(::Il2CppString*)>(&TooltipAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TooltipAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TooltipAttribute::*)(::Il2CppString*)>(&TooltipAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TooltipAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.SpaceAttribute
#include "UnityEngine/SpaceAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SpaceAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpaceAttribute::*)(float)>(&SpaceAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpaceAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpaceAttribute::*)(float)>(&SpaceAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpaceAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SpaceAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpaceAttribute::*)()>(&SpaceAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpaceAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SpaceAttribute::*)()>(&SpaceAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SpaceAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.HeaderAttribute
#include "UnityEngine/HeaderAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: HeaderAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HeaderAttribute::*)(::Il2CppString*)>(&HeaderAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HeaderAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HeaderAttribute::*)(::Il2CppString*)>(&HeaderAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HeaderAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.RangeAttribute
#include "UnityEngine/RangeAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: RangeAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeAttribute::*)(float, float)>(&RangeAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeAttribute::*)(float, float)>(&RangeAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.MinAttribute
#include "UnityEngine/MinAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MinAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MinAttribute::*)(float)>(&MinAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MinAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MinAttribute::*)(float)>(&MinAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MinAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.MultilineAttribute
#include "UnityEngine/MultilineAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MultilineAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultilineAttribute::*)()>(&MultilineAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultilineAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultilineAttribute::*)()>(&MultilineAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultilineAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.TextAreaAttribute
#include "UnityEngine/TextAreaAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: TextAreaAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextAreaAttribute::*)(int, int)>(&TextAreaAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextAreaAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TextAreaAttribute::*)(int, int)>(&TextAreaAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextAreaAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.ColorUsageAttribute
#include "UnityEngine/ColorUsageAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ColorUsageAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorUsageAttribute::*)(bool)>(&ColorUsageAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorUsageAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorUsageAttribute::*)(bool)>(&ColorUsageAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorUsageAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ColorUsageAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorUsageAttribute::*)(bool, bool)>(&ColorUsageAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorUsageAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ColorUsageAttribute::*)(bool, bool)>(&ColorUsageAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ColorUsageAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.PropertyNameUtils
#include "UnityEngine/PropertyNameUtils.hpp"
// Including type: UnityEngine.PropertyName
#include "UnityEngine/PropertyName.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.PropertyNameUtils.PropertyNameFromString
UnityEngine::PropertyName UnityEngine::PropertyNameUtils::PropertyNameFromString(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PropertyNameUtils::PropertyNameFromString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PropertyNameUtils", "PropertyNameFromString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::PropertyName, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name);
}
// Autogenerated method: UnityEngine.PropertyNameUtils.PropertyNameFromString_Injected
void UnityEngine::PropertyNameUtils::PropertyNameFromString_Injected(::Il2CppString* name, UnityEngine::PropertyName& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PropertyNameUtils::PropertyNameFromString_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PropertyNameUtils", "PropertyNameFromString_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractIndependentType<UnityEngine::PropertyName&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name, ret);
}
// Writing MetadataGetter for method: PropertyNameUtils::PropertyNameFromString
// Il2CppName: PropertyNameFromString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::PropertyName (*)(::Il2CppString*)>(&PropertyNameUtils::PropertyNameFromString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyNameUtils*), "PropertyNameFromString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PropertyNameUtils::PropertyNameFromString_Injected
// Il2CppName: PropertyNameFromString_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, UnityEngine::PropertyName&)>(&PropertyNameUtils::PropertyNameFromString_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyNameUtils*), "PropertyNameFromString_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::PropertyName&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.PropertyName
#include "UnityEngine/PropertyName.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.PropertyName.Equals
bool UnityEngine::PropertyName::Equals(UnityEngine::PropertyName other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PropertyName::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.PropertyName.GetHashCode
int UnityEngine::PropertyName::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PropertyName::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.PropertyName.Equals
bool UnityEngine::PropertyName::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PropertyName::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.PropertyName.ToString
::Il2CppString* UnityEngine::PropertyName::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PropertyName::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.PropertyName.op_Equality
bool UnityEngine::operator ==(const UnityEngine::PropertyName& lhs, const UnityEngine::PropertyName& rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PropertyName::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "PropertyName", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Writing MetadataGetter for method: PropertyName::PropertyName
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PropertyName::*)(::Il2CppString*)>(&PropertyName::PropertyName<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyName), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PropertyName::*)(::Il2CppString*)>(&PropertyName::PropertyName<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyName), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: PropertyName::PropertyName
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PropertyName::*)(UnityEngine::PropertyName)>(&PropertyName::PropertyName<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyName), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::PropertyName>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PropertyName::*)(UnityEngine::PropertyName)>(&PropertyName::PropertyName<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyName), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::PropertyName>()});
  }
};
// Writing MetadataGetter for method: PropertyName::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PropertyName::*)(UnityEngine::PropertyName)>(&PropertyName::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyName), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::PropertyName>()});
  }
};
// Writing MetadataGetter for method: PropertyName::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (PropertyName::*)()>(&PropertyName::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyName), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyName::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (PropertyName::*)(::Il2CppObject*)>(&PropertyName::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyName), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: PropertyName::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (PropertyName::*)()>(&PropertyName::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyName), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PropertyName::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(const UnityEngine::PropertyName&, const UnityEngine::PropertyName&)>(&PropertyName::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PropertyName), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<const UnityEngine::PropertyName&>(), ::il2cpp_utils::ExtractIndependentType<const UnityEngine::PropertyName&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Random
#include "UnityEngine/Random.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Random.InitState
void UnityEngine::Random::InitState(int seed) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Random::InitState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Random", "InitState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(seed)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, seed);
}
// Autogenerated method: UnityEngine.Random.Range
float UnityEngine::Random::Range(float min, float max) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Random::Range");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Random", "Range", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, min, max);
}
// Autogenerated method: UnityEngine.Random.Range
int UnityEngine::Random::Range(int min, int max) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Random::Range");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Random", "Range", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, min, max);
}
// Autogenerated method: UnityEngine.Random.RandomRangeInt
int UnityEngine::Random::RandomRangeInt(int min, int max) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Random::RandomRangeInt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Random", "RandomRangeInt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, min, max);
}
// Autogenerated method: UnityEngine.Random.get_value
float UnityEngine::Random::get_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Random::get_value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Random", "get_value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Random.get_insideUnitSphere
UnityEngine::Vector3 UnityEngine::Random::get_insideUnitSphere() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Random::get_insideUnitSphere");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Random", "get_insideUnitSphere", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Random.get_onUnitSphere
UnityEngine::Vector3 UnityEngine::Random::get_onUnitSphere() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Random::get_onUnitSphere");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Random", "get_onUnitSphere", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Random.ColorHSV
UnityEngine::Color UnityEngine::Random::ColorHSV() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Random::ColorHSV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Random", "ColorHSV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Random.ColorHSV
UnityEngine::Color UnityEngine::Random::ColorHSV(float hueMin, float hueMax, float saturationMin, float saturationMax, float valueMin, float valueMax, float alphaMin, float alphaMax) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Random::ColorHSV");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Random", "ColorHSV", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hueMin), ::il2cpp_utils::ExtractType(hueMax), ::il2cpp_utils::ExtractType(saturationMin), ::il2cpp_utils::ExtractType(saturationMax), ::il2cpp_utils::ExtractType(valueMin), ::il2cpp_utils::ExtractType(valueMax), ::il2cpp_utils::ExtractType(alphaMin), ::il2cpp_utils::ExtractType(alphaMax)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, hueMin, hueMax, saturationMin, saturationMax, valueMin, valueMax, alphaMin, alphaMax);
}
// Autogenerated method: UnityEngine.Random.get_insideUnitSphere_Injected
void UnityEngine::Random::get_insideUnitSphere_Injected(UnityEngine::Vector3& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Random::get_insideUnitSphere_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Random", "get_insideUnitSphere_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ret);
}
// Autogenerated method: UnityEngine.Random.get_onUnitSphere_Injected
void UnityEngine::Random::get_onUnitSphere_Injected(UnityEngine::Vector3& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Random::get_onUnitSphere_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Random", "get_onUnitSphere_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ret);
}
// Writing MetadataGetter for method: Random::InitState
// Il2CppName: InitState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Random::InitState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Random*), "InitState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Random::Range
// Il2CppName: Range
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float)>(&Random::Range)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Random*), "Range", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Random::Range
// Il2CppName: Range
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&Random::Range)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Random*), "Range", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Random::RandomRangeInt
// Il2CppName: RandomRangeInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int, int)>(&Random::RandomRangeInt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Random*), "RandomRangeInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Random::get_value
// Il2CppName: get_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Random::get_value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Random*), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Random::get_insideUnitSphere
// Il2CppName: get_insideUnitSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)()>(&Random::get_insideUnitSphere)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Random*), "get_insideUnitSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Random::get_onUnitSphere
// Il2CppName: get_onUnitSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)()>(&Random::get_onUnitSphere)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Random*), "get_onUnitSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Random::ColorHSV
// Il2CppName: ColorHSV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)()>(&Random::ColorHSV)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Random*), "ColorHSV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Random::ColorHSV
// Il2CppName: ColorHSV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (*)(float, float, float, float, float, float, float, float)>(&Random::ColorHSV)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Random*), "ColorHSV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Random::get_insideUnitSphere_Injected
// Il2CppName: get_insideUnitSphere_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Vector3&)>(&Random::get_insideUnitSphere_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Random*), "get_insideUnitSphere_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: Random::get_onUnitSphere_Injected
// Il2CppName: get_onUnitSphere_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Vector3&)>(&Random::get_onUnitSphere_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Random*), "get_onUnitSphere_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ResourceRequest
#include "UnityEngine/ResourceRequest.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.ResourceRequest.get_asset
UnityEngine::Object* UnityEngine::ResourceRequest::get_asset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ResourceRequest::get_asset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_asset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ResourceRequest::get_asset
// Il2CppName: get_asset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (ResourceRequest::*)()>(&ResourceRequest::get_asset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceRequest*), "get_asset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResourceRequest::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceRequest::*)()>(&ResourceRequest::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResourceRequest::*)()>(&ResourceRequest::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResourceRequest*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Resources
#include "UnityEngine/Resources.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.ResourceRequest
#include "UnityEngine/ResourceRequest.hpp"
// Including type: UnityEngine.AsyncOperation
#include "UnityEngine/AsyncOperation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Resources.FindObjectsOfTypeAll
::Array<UnityEngine::Object*>* UnityEngine::Resources::FindObjectsOfTypeAll(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Resources::FindObjectsOfTypeAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Resources", "FindObjectsOfTypeAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Object*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: UnityEngine.Resources.Load
UnityEngine::Object* UnityEngine::Resources::Load(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Resources::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Resources", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: UnityEngine.Resources.Load
UnityEngine::Object* UnityEngine::Resources::Load(::Il2CppString* path, System::Type* systemTypeInstance) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Resources::Load");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Resources", "Load", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(systemTypeInstance)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, systemTypeInstance);
}
// Autogenerated method: UnityEngine.Resources.LoadAsync
UnityEngine::ResourceRequest* UnityEngine::Resources::LoadAsync(::Il2CppString* path, System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Resources::LoadAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Resources", "LoadAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::ResourceRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, type);
}
// Autogenerated method: UnityEngine.Resources.LoadAsyncInternal
UnityEngine::ResourceRequest* UnityEngine::Resources::LoadAsyncInternal(::Il2CppString* path, System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Resources::LoadAsyncInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Resources", "LoadAsyncInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::ResourceRequest*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, type);
}
// Autogenerated method: UnityEngine.Resources.LoadAll
::Array<UnityEngine::Object*>* UnityEngine::Resources::LoadAll(::Il2CppString* path, System::Type* systemTypeInstance) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Resources::LoadAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Resources", "LoadAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(systemTypeInstance)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Object*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path, systemTypeInstance);
}
// Autogenerated method: UnityEngine.Resources.LoadAll
::Array<UnityEngine::Object*>* UnityEngine::Resources::LoadAll(::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Resources::LoadAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Resources", "LoadAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Object*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, path);
}
// Autogenerated method: UnityEngine.Resources.GetBuiltinResource
UnityEngine::Object* UnityEngine::Resources::GetBuiltinResource(System::Type* type, ::Il2CppString* path) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Resources::GetBuiltinResource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Resources", "GetBuiltinResource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(path)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type, path);
}
// Autogenerated method: UnityEngine.Resources.UnloadAsset
void UnityEngine::Resources::UnloadAsset(UnityEngine::Object* assetToUnload) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Resources::UnloadAsset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Resources", "UnloadAsset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assetToUnload)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, assetToUnload);
}
// Autogenerated method: UnityEngine.Resources.UnloadUnusedAssets
UnityEngine::AsyncOperation* UnityEngine::Resources::UnloadUnusedAssets() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Resources::UnloadUnusedAssets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Resources", "UnloadUnusedAssets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AsyncOperation*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: Resources::ConvertObjects
// Il2CppName: ConvertObjects
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Resources::FindObjectsOfTypeAll
// Il2CppName: FindObjectsOfTypeAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Object*>* (*)(System::Type*)>(&Resources::FindObjectsOfTypeAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Resources*), "FindObjectsOfTypeAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Resources::FindObjectsOfTypeAll
// Il2CppName: FindObjectsOfTypeAll
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Resources::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(::Il2CppString*)>(&Resources::Load)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Resources*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Resources::Load
// Il2CppName: Load
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Resources::Load
// Il2CppName: Load
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(::Il2CppString*, System::Type*)>(&Resources::Load)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Resources*), "Load", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Resources::LoadAsync
// Il2CppName: LoadAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::ResourceRequest* (*)(::Il2CppString*, System::Type*)>(&Resources::LoadAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Resources*), "LoadAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Resources::LoadAsyncInternal
// Il2CppName: LoadAsyncInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::ResourceRequest* (*)(::Il2CppString*, System::Type*)>(&Resources::LoadAsyncInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Resources*), "LoadAsyncInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Resources::LoadAll
// Il2CppName: LoadAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Object*>* (*)(::Il2CppString*, System::Type*)>(&Resources::LoadAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Resources*), "LoadAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Resources::LoadAll
// Il2CppName: LoadAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Object*>* (*)(::Il2CppString*)>(&Resources::LoadAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Resources*), "LoadAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Resources::GetBuiltinResource
// Il2CppName: GetBuiltinResource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(System::Type*, ::Il2CppString*)>(&Resources::GetBuiltinResource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Resources*), "GetBuiltinResource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Resources::GetBuiltinResource
// Il2CppName: GetBuiltinResource
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Resources::UnloadAsset
// Il2CppName: UnloadAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*)>(&Resources::UnloadAsset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Resources*), "UnloadAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: Resources::UnloadUnusedAssets
// Il2CppName: UnloadUnusedAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AsyncOperation* (*)()>(&Resources::UnloadUnusedAssets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Resources*), "UnloadUnusedAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.AsyncOperation
#include "UnityEngine/AsyncOperation.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.AsyncOperation.InternalDestroy
void UnityEngine::AsyncOperation::InternalDestroy(System::IntPtr ptr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AsyncOperation::InternalDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AsyncOperation", "InternalDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ptr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ptr);
}
// Autogenerated method: UnityEngine.AsyncOperation.get_isDone
bool UnityEngine::AsyncOperation::get_isDone() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AsyncOperation::get_isDone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isDone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AsyncOperation.get_progress
float UnityEngine::AsyncOperation::get_progress() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AsyncOperation::get_progress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_progress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AsyncOperation.set_priority
void UnityEngine::AsyncOperation::set_priority(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AsyncOperation::set_priority");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_priority", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AsyncOperation.get_allowSceneActivation
bool UnityEngine::AsyncOperation::get_allowSceneActivation() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AsyncOperation::get_allowSceneActivation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allowSceneActivation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AsyncOperation.set_allowSceneActivation
void UnityEngine::AsyncOperation::set_allowSceneActivation(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AsyncOperation::set_allowSceneActivation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_allowSceneActivation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AsyncOperation.InvokeCompletionEvent
void UnityEngine::AsyncOperation::InvokeCompletionEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AsyncOperation::InvokeCompletionEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeCompletionEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.AsyncOperation.add_completed
void UnityEngine::AsyncOperation::add_completed(System::Action_1<UnityEngine::AsyncOperation*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AsyncOperation::add_completed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_completed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AsyncOperation.remove_completed
void UnityEngine::AsyncOperation::remove_completed(System::Action_1<UnityEngine::AsyncOperation*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AsyncOperation::remove_completed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_completed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.AsyncOperation.Finalize
void UnityEngine::AsyncOperation::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AsyncOperation::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AsyncOperation::InternalDestroy
// Il2CppName: InternalDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr)>(&AsyncOperation::InternalDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncOperation*), "InternalDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: AsyncOperation::get_isDone
// Il2CppName: get_isDone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AsyncOperation::*)()>(&AsyncOperation::get_isDone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncOperation*), "get_isDone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AsyncOperation::get_progress
// Il2CppName: get_progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AsyncOperation::*)()>(&AsyncOperation::get_progress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncOperation*), "get_progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AsyncOperation::set_priority
// Il2CppName: set_priority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsyncOperation::*)(int)>(&AsyncOperation::set_priority)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncOperation*), "set_priority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AsyncOperation::get_allowSceneActivation
// Il2CppName: get_allowSceneActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AsyncOperation::*)()>(&AsyncOperation::get_allowSceneActivation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncOperation*), "get_allowSceneActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AsyncOperation::set_allowSceneActivation
// Il2CppName: set_allowSceneActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsyncOperation::*)(bool)>(&AsyncOperation::set_allowSceneActivation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncOperation*), "set_allowSceneActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AsyncOperation::InvokeCompletionEvent
// Il2CppName: InvokeCompletionEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsyncOperation::*)()>(&AsyncOperation::InvokeCompletionEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncOperation*), "InvokeCompletionEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AsyncOperation::add_completed
// Il2CppName: add_completed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsyncOperation::*)(System::Action_1<UnityEngine::AsyncOperation*>*)>(&AsyncOperation::add_completed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncOperation*), "add_completed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::AsyncOperation*>*>()});
  }
};
// Writing MetadataGetter for method: AsyncOperation::remove_completed
// Il2CppName: remove_completed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsyncOperation::*)(System::Action_1<UnityEngine::AsyncOperation*>*)>(&AsyncOperation::remove_completed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncOperation*), "remove_completed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::AsyncOperation*>*>()});
  }
};
// Writing MetadataGetter for method: AsyncOperation::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsyncOperation::*)()>(&AsyncOperation::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncOperation*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AsyncOperation::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsyncOperation::*)()>(&AsyncOperation::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncOperation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AsyncOperation::*)()>(&AsyncOperation::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AsyncOperation*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.AttributeHelperEngine
#include "UnityEngine/AttributeHelperEngine.hpp"
// Including type: UnityEngine.DisallowMultipleComponent
#include "UnityEngine/DisallowMultipleComponent.hpp"
// Including type: UnityEngine.ExecuteInEditMode
#include "UnityEngine/ExecuteInEditMode.hpp"
// Including type: UnityEngine.RequireComponent
#include "UnityEngine/RequireComponent.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.DisallowMultipleComponent[] _disallowMultipleComponentArray
::Array<UnityEngine::DisallowMultipleComponent*>* UnityEngine::AttributeHelperEngine::_get__disallowMultipleComponentArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AttributeHelperEngine::_get__disallowMultipleComponentArray");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::DisallowMultipleComponent*>*>("UnityEngine", "AttributeHelperEngine", "_disallowMultipleComponentArray"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.DisallowMultipleComponent[] _disallowMultipleComponentArray
void UnityEngine::AttributeHelperEngine::_set__disallowMultipleComponentArray(::Array<UnityEngine::DisallowMultipleComponent*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AttributeHelperEngine::_set__disallowMultipleComponentArray");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AttributeHelperEngine", "_disallowMultipleComponentArray", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.ExecuteInEditMode[] _executeInEditModeArray
::Array<UnityEngine::ExecuteInEditMode*>* UnityEngine::AttributeHelperEngine::_get__executeInEditModeArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AttributeHelperEngine::_get__executeInEditModeArray");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::ExecuteInEditMode*>*>("UnityEngine", "AttributeHelperEngine", "_executeInEditModeArray"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.ExecuteInEditMode[] _executeInEditModeArray
void UnityEngine::AttributeHelperEngine::_set__executeInEditModeArray(::Array<UnityEngine::ExecuteInEditMode*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AttributeHelperEngine::_set__executeInEditModeArray");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AttributeHelperEngine", "_executeInEditModeArray", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RequireComponent[] _requireComponentArray
::Array<UnityEngine::RequireComponent*>* UnityEngine::AttributeHelperEngine::_get__requireComponentArray() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AttributeHelperEngine::_get__requireComponentArray");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::RequireComponent*>*>("UnityEngine", "AttributeHelperEngine", "_requireComponentArray"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RequireComponent[] _requireComponentArray
void UnityEngine::AttributeHelperEngine::_set__requireComponentArray(::Array<UnityEngine::RequireComponent*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AttributeHelperEngine::_set__requireComponentArray");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AttributeHelperEngine", "_requireComponentArray", value));
}
// Autogenerated method: UnityEngine.AttributeHelperEngine.GetParentTypeDisallowingMultipleInclusion
System::Type* UnityEngine::AttributeHelperEngine::GetParentTypeDisallowingMultipleInclusion(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AttributeHelperEngine::GetParentTypeDisallowingMultipleInclusion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AttributeHelperEngine", "GetParentTypeDisallowingMultipleInclusion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<System::Type*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: UnityEngine.AttributeHelperEngine.GetRequiredComponents
::Array<System::Type*>* UnityEngine::AttributeHelperEngine::GetRequiredComponents(System::Type* klass) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AttributeHelperEngine::GetRequiredComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AttributeHelperEngine", "GetRequiredComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(klass)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<System::Type*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, klass);
}
// Autogenerated method: UnityEngine.AttributeHelperEngine.GetExecuteMode
int UnityEngine::AttributeHelperEngine::GetExecuteMode(System::Type* klass) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AttributeHelperEngine::GetExecuteMode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AttributeHelperEngine", "GetExecuteMode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(klass)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, klass);
}
// Autogenerated method: UnityEngine.AttributeHelperEngine.CheckIsEditorScript
int UnityEngine::AttributeHelperEngine::CheckIsEditorScript(System::Type* klass) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AttributeHelperEngine::CheckIsEditorScript");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AttributeHelperEngine", "CheckIsEditorScript", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(klass)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, klass);
}
// Autogenerated method: UnityEngine.AttributeHelperEngine.GetDefaultExecutionOrderFor
int UnityEngine::AttributeHelperEngine::GetDefaultExecutionOrderFor(System::Type* klass) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AttributeHelperEngine::GetDefaultExecutionOrderFor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AttributeHelperEngine", "GetDefaultExecutionOrderFor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(klass)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, klass);
}
// Autogenerated method: UnityEngine.AttributeHelperEngine..cctor
void UnityEngine::AttributeHelperEngine::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::AttributeHelperEngine::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "AttributeHelperEngine", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: AttributeHelperEngine::GetParentTypeDisallowingMultipleInclusion
// Il2CppName: GetParentTypeDisallowingMultipleInclusion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Type* (*)(System::Type*)>(&AttributeHelperEngine::GetParentTypeDisallowingMultipleInclusion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AttributeHelperEngine*), "GetParentTypeDisallowingMultipleInclusion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: AttributeHelperEngine::GetRequiredComponents
// Il2CppName: GetRequiredComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Type*>* (*)(System::Type*)>(&AttributeHelperEngine::GetRequiredComponents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AttributeHelperEngine*), "GetRequiredComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: AttributeHelperEngine::GetExecuteMode
// Il2CppName: GetExecuteMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::Type*)>(&AttributeHelperEngine::GetExecuteMode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AttributeHelperEngine*), "GetExecuteMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: AttributeHelperEngine::CheckIsEditorScript
// Il2CppName: CheckIsEditorScript
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::Type*)>(&AttributeHelperEngine::CheckIsEditorScript)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AttributeHelperEngine*), "CheckIsEditorScript", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: AttributeHelperEngine::GetDefaultExecutionOrderFor
// Il2CppName: GetDefaultExecutionOrderFor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::Type*)>(&AttributeHelperEngine::GetDefaultExecutionOrderFor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AttributeHelperEngine*), "GetDefaultExecutionOrderFor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: AttributeHelperEngine::GetCustomAttributeOfType
// Il2CppName: GetCustomAttributeOfType
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: AttributeHelperEngine::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AttributeHelperEngine::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AttributeHelperEngine*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.DisallowMultipleComponent
#include "UnityEngine/DisallowMultipleComponent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: DisallowMultipleComponent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisallowMultipleComponent::*)()>(&DisallowMultipleComponent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisallowMultipleComponent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisallowMultipleComponent::*)()>(&DisallowMultipleComponent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisallowMultipleComponent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.RequireComponent
#include "UnityEngine/RequireComponent.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: RequireComponent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RequireComponent::*)(System::Type*)>(&RequireComponent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RequireComponent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RequireComponent::*)(System::Type*)>(&RequireComponent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RequireComponent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: RequireComponent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RequireComponent::*)(System::Type*, System::Type*)>(&RequireComponent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RequireComponent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RequireComponent::*)(System::Type*, System::Type*)>(&RequireComponent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RequireComponent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.AddComponentMenu
#include "UnityEngine/AddComponentMenu.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AddComponentMenu::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddComponentMenu::*)(::Il2CppString*)>(&AddComponentMenu::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddComponentMenu*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddComponentMenu::*)(::Il2CppString*)>(&AddComponentMenu::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddComponentMenu*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: AddComponentMenu::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddComponentMenu::*)(::Il2CppString*, int)>(&AddComponentMenu::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddComponentMenu*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AddComponentMenu::*)(::Il2CppString*, int)>(&AddComponentMenu::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AddComponentMenu*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.CreateAssetMenuAttribute
#include "UnityEngine/CreateAssetMenuAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.CreateAssetMenuAttribute.set_menuName
void UnityEngine::CreateAssetMenuAttribute::set_menuName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::CreateAssetMenuAttribute::set_menuName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_menuName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.CreateAssetMenuAttribute.set_fileName
void UnityEngine::CreateAssetMenuAttribute::set_fileName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::CreateAssetMenuAttribute::set_fileName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_fileName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: CreateAssetMenuAttribute::set_menuName
// Il2CppName: set_menuName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateAssetMenuAttribute::*)(::Il2CppString*)>(&CreateAssetMenuAttribute::set_menuName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateAssetMenuAttribute*), "set_menuName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CreateAssetMenuAttribute::set_fileName
// Il2CppName: set_fileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateAssetMenuAttribute::*)(::Il2CppString*)>(&CreateAssetMenuAttribute::set_fileName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateAssetMenuAttribute*), "set_fileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: CreateAssetMenuAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateAssetMenuAttribute::*)()>(&CreateAssetMenuAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateAssetMenuAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CreateAssetMenuAttribute::*)()>(&CreateAssetMenuAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CreateAssetMenuAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ContextMenu
#include "UnityEngine/ContextMenu.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ContextMenu::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContextMenu::*)(::Il2CppString*)>(&ContextMenu::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContextMenu*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContextMenu::*)(::Il2CppString*)>(&ContextMenu::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContextMenu*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: ContextMenu::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContextMenu::*)(::Il2CppString*, bool)>(&ContextMenu::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContextMenu*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContextMenu::*)(::Il2CppString*, bool)>(&ContextMenu::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContextMenu*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ContextMenu::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContextMenu::*)(::Il2CppString*, bool, int)>(&ContextMenu::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContextMenu*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ContextMenu::*)(::Il2CppString*, bool, int)>(&ContextMenu::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ContextMenu*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.ExecuteInEditMode
#include "UnityEngine/ExecuteInEditMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ExecuteInEditMode::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExecuteInEditMode::*)()>(&ExecuteInEditMode::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExecuteInEditMode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExecuteInEditMode::*)()>(&ExecuteInEditMode::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExecuteInEditMode*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.ExecuteAlways
#include "UnityEngine/ExecuteAlways.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ExecuteAlways::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExecuteAlways::*)()>(&ExecuteAlways::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExecuteAlways*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExecuteAlways::*)()>(&ExecuteAlways::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExecuteAlways*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.HideInInspector
#include "UnityEngine/HideInInspector.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: HideInInspector::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HideInInspector::*)()>(&HideInInspector::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HideInInspector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HideInInspector::*)()>(&HideInInspector::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HideInInspector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.HelpURLAttribute
#include "UnityEngine/HelpURLAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: HelpURLAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HelpURLAttribute::*)(::Il2CppString*)>(&HelpURLAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HelpURLAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HelpURLAttribute::*)(::Il2CppString*)>(&HelpURLAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HelpURLAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.DefaultExecutionOrder
#include "UnityEngine/DefaultExecutionOrder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.DefaultExecutionOrder.get_order
int UnityEngine::DefaultExecutionOrder::get_order() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::DefaultExecutionOrder::get_order");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_order", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: DefaultExecutionOrder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultExecutionOrder::*)(int)>(&DefaultExecutionOrder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultExecutionOrder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DefaultExecutionOrder::*)(int)>(&DefaultExecutionOrder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultExecutionOrder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: DefaultExecutionOrder::get_order
// Il2CppName: get_order
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (DefaultExecutionOrder::*)()>(&DefaultExecutionOrder::get_order)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DefaultExecutionOrder*), "get_order", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.ExcludeFromPresetAttribute
#include "UnityEngine/ExcludeFromPresetAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ExcludeFromPresetAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExcludeFromPresetAttribute::*)()>(&ExcludeFromPresetAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExcludeFromPresetAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExcludeFromPresetAttribute::*)()>(&ExcludeFromPresetAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExcludeFromPresetAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Behaviour
#include "UnityEngine/Behaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Behaviour.get_enabled
bool UnityEngine::Behaviour::get_enabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Behaviour::get_enabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Behaviour.set_enabled
void UnityEngine::Behaviour::set_enabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Behaviour::set_enabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_enabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Behaviour.get_isActiveAndEnabled
bool UnityEngine::Behaviour::get_isActiveAndEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Behaviour::get_isActiveAndEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isActiveAndEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Behaviour::get_enabled
// Il2CppName: get_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Behaviour::*)()>(&Behaviour::get_enabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Behaviour*), "get_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Behaviour::set_enabled
// Il2CppName: set_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Behaviour::*)(bool)>(&Behaviour::set_enabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Behaviour*), "set_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Behaviour::get_isActiveAndEnabled
// Il2CppName: get_isActiveAndEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Behaviour::*)()>(&Behaviour::get_isActiveAndEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Behaviour*), "get_isActiveAndEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Behaviour::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Behaviour::*)()>(&Behaviour::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Behaviour*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Behaviour::*)()>(&Behaviour::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Behaviour*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.ClassLibraryInitializer
#include "UnityEngine/ClassLibraryInitializer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.ClassLibraryInitializer.Init
void UnityEngine::ClassLibraryInitializer::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ClassLibraryInitializer::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "ClassLibraryInitializer", "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: ClassLibraryInitializer::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&ClassLibraryInitializer::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ClassLibraryInitializer*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Component.get_transform
UnityEngine::Transform* UnityEngine::Component::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Component::get_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Component.get_gameObject
UnityEngine::GameObject* UnityEngine::Component::get_gameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Component::get_gameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Component.GetComponent
UnityEngine::Component* UnityEngine::Component::GetComponent(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Component::GetComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, type);
}
// Autogenerated method: UnityEngine.Component.GetComponentFastPath
void UnityEngine::Component::GetComponentFastPath(System::Type* type, System::IntPtr oneFurtherThanResultValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Component::GetComponentFastPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentFastPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(oneFurtherThanResultValue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, type, oneFurtherThanResultValue);
}
// Autogenerated method: UnityEngine.Component.GetComponentInChildren
UnityEngine::Component* UnityEngine::Component::GetComponentInChildren(System::Type* t, bool includeInactive) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Component::GetComponentInChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentInChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(includeInactive)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, t, includeInactive);
}
// Autogenerated method: UnityEngine.Component.GetComponentsInChildren
::Array<UnityEngine::Component*>* UnityEngine::Component::GetComponentsInChildren(System::Type* t, bool includeInactive) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Component::GetComponentsInChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentsInChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(includeInactive)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Component*>*, false>(this, ___internal__method, t, includeInactive);
}
// Autogenerated method: UnityEngine.Component.GetComponentInParent
UnityEngine::Component* UnityEngine::Component::GetComponentInParent(System::Type* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Component::GetComponentInParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentInParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, t);
}
// Autogenerated method: UnityEngine.Component.GetComponentsInParent
::Array<UnityEngine::Component*>* UnityEngine::Component::GetComponentsInParent(System::Type* t, bool includeInactive) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Component::GetComponentsInParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentsInParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t), ::il2cpp_utils::ExtractType(includeInactive)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Component*>*, false>(this, ___internal__method, t, includeInactive);
}
// Autogenerated method: UnityEngine.Component.GetComponents
::Array<UnityEngine::Component*>* UnityEngine::Component::GetComponents(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Component::GetComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Component*>*, false>(this, ___internal__method, type);
}
// Autogenerated method: UnityEngine.Component.GetComponentsForListInternal
void UnityEngine::Component::GetComponentsForListInternal(System::Type* searchType, ::Il2CppObject* resultList) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Component::GetComponentsForListInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentsForListInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(searchType), ::il2cpp_utils::ExtractType(resultList)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, searchType, resultList);
}
// Autogenerated method: UnityEngine.Component.GetComponents
void UnityEngine::Component::GetComponents(System::Type* type, System::Collections::Generic::List_1<UnityEngine::Component*>* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Component::GetComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, type, results);
}
// Autogenerated method: UnityEngine.Component.get_tag
::Il2CppString* UnityEngine::Component::get_tag() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Component::get_tag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Component.set_tag
void UnityEngine::Component::set_tag(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Component::set_tag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Component.CompareTag
bool UnityEngine::Component::CompareTag(::Il2CppString* tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Component::CompareTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompareTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tag)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, tag);
}
// Writing MetadataGetter for method: Component::get_transform
// Il2CppName: get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (Component::*)()>(&Component::get_transform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Component::get_gameObject
// Il2CppName: get_gameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (Component::*)()>(&Component::get_gameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "get_gameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Component::GetComponent
// Il2CppName: GetComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (Component::*)(System::Type*)>(&Component::GetComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "GetComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Component::GetComponentFastPath
// Il2CppName: GetComponentFastPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Component::*)(System::Type*, System::IntPtr)>(&Component::GetComponentFastPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "GetComponentFastPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: Component::GetComponent
// Il2CppName: GetComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Component::TryGetComponent
// Il2CppName: TryGetComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Component::GetComponentInChildren
// Il2CppName: GetComponentInChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (Component::*)(System::Type*, bool)>(&Component::GetComponentInChildren)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "GetComponentInChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Component::GetComponentInChildren
// Il2CppName: GetComponentInChildren
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Component::GetComponentInChildren
// Il2CppName: GetComponentInChildren
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Component::GetComponentsInChildren
// Il2CppName: GetComponentsInChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Component*>* (Component::*)(System::Type*, bool)>(&Component::GetComponentsInChildren)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "GetComponentsInChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Component::GetComponentsInChildren
// Il2CppName: GetComponentsInChildren
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Component::GetComponentsInChildren
// Il2CppName: GetComponentsInChildren
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Component::GetComponentsInChildren
// Il2CppName: GetComponentsInChildren
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Component::GetComponentsInChildren
// Il2CppName: GetComponentsInChildren
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Component::GetComponentInParent
// Il2CppName: GetComponentInParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (Component::*)(System::Type*)>(&Component::GetComponentInParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "GetComponentInParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Component::GetComponentInParent
// Il2CppName: GetComponentInParent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Component::GetComponentsInParent
// Il2CppName: GetComponentsInParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Component*>* (Component::*)(System::Type*, bool)>(&Component::GetComponentsInParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "GetComponentsInParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Component::GetComponentsInParent
// Il2CppName: GetComponentsInParent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Component::GetComponentsInParent
// Il2CppName: GetComponentsInParent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Component::GetComponentsInParent
// Il2CppName: GetComponentsInParent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Component::GetComponents
// Il2CppName: GetComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Component*>* (Component::*)(System::Type*)>(&Component::GetComponents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "GetComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Component::GetComponentsForListInternal
// Il2CppName: GetComponentsForListInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Component::*)(System::Type*, ::Il2CppObject*)>(&Component::GetComponentsForListInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "GetComponentsForListInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Component::GetComponents
// Il2CppName: GetComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Component::*)(System::Type*, System::Collections::Generic::List_1<UnityEngine::Component*>*)>(&Component::GetComponents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "GetComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Component*>*>()});
  }
};
// Writing MetadataGetter for method: Component::GetComponents
// Il2CppName: GetComponents
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Component::get_tag
// Il2CppName: get_tag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Component::*)()>(&Component::get_tag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "get_tag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Component::set_tag
// Il2CppName: set_tag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Component::*)(::Il2CppString*)>(&Component::set_tag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "set_tag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Component::GetComponents
// Il2CppName: GetComponents
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Component::CompareTag
// Il2CppName: CompareTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Component::*)(::Il2CppString*)>(&Component::CompareTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), "CompareTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Component::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Component::*)()>(&Component::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Component::*)()>(&Component::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Component*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Coroutine.ReleaseCoroutine
void UnityEngine::Coroutine::ReleaseCoroutine(System::IntPtr ptr) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Coroutine::ReleaseCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Coroutine", "ReleaseCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ptr)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, ptr);
}
// Autogenerated method: UnityEngine.Coroutine.Finalize
void UnityEngine::Coroutine::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Coroutine::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Coroutine::ReleaseCoroutine
// Il2CppName: ReleaseCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IntPtr)>(&Coroutine::ReleaseCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Coroutine*), "ReleaseCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: Coroutine::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Coroutine::*)()>(&Coroutine::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Coroutine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Coroutine::*)()>(&Coroutine::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Coroutine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Coroutine::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Coroutine::*)()>(&Coroutine::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Coroutine*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.SetupCoroutine
#include "UnityEngine/SetupCoroutine.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.SetupCoroutine.InvokeMoveNext
void UnityEngine::SetupCoroutine::InvokeMoveNext(System::Collections::IEnumerator* enumerator, System::IntPtr returnValueAddress) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SetupCoroutine::InvokeMoveNext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SetupCoroutine", "InvokeMoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enumerator), ::il2cpp_utils::ExtractType(returnValueAddress)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, enumerator, returnValueAddress);
}
// Autogenerated method: UnityEngine.SetupCoroutine.InvokeMember
::Il2CppObject* UnityEngine::SetupCoroutine::InvokeMember(::Il2CppObject* behaviour, ::Il2CppString* name, ::Il2CppObject* variable) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SetupCoroutine::InvokeMember");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SetupCoroutine", "InvokeMember", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(behaviour), ::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(variable)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, behaviour, name, variable);
}
// Writing MetadataGetter for method: SetupCoroutine::InvokeMoveNext
// Il2CppName: InvokeMoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::IEnumerator*, System::IntPtr)>(&SetupCoroutine::InvokeMoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetupCoroutine*), "InvokeMoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerator*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: SetupCoroutine::InvokeMember
// Il2CppName: InvokeMember
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (*)(::Il2CppObject*, ::Il2CppString*, ::Il2CppObject*)>(&SetupCoroutine::InvokeMember)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SetupCoroutine*), "InvokeMember", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.CustomYieldInstruction
#include "UnityEngine/CustomYieldInstruction.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.CustomYieldInstruction.get_keepWaiting
bool UnityEngine::CustomYieldInstruction::get_keepWaiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::CustomYieldInstruction::get_keepWaiting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_keepWaiting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.CustomYieldInstruction.get_Current
::Il2CppObject* UnityEngine::CustomYieldInstruction::get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::CustomYieldInstruction::get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.CustomYieldInstruction.MoveNext
bool UnityEngine::CustomYieldInstruction::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::CustomYieldInstruction::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.CustomYieldInstruction.Reset
void UnityEngine::CustomYieldInstruction::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::CustomYieldInstruction::Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CustomYieldInstruction::get_keepWaiting
// Il2CppName: get_keepWaiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CustomYieldInstruction::*)()>(&CustomYieldInstruction::get_keepWaiting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomYieldInstruction*), "get_keepWaiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CustomYieldInstruction::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (CustomYieldInstruction::*)()>(&CustomYieldInstruction::get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomYieldInstruction*), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CustomYieldInstruction::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CustomYieldInstruction::*)()>(&CustomYieldInstruction::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomYieldInstruction*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CustomYieldInstruction::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomYieldInstruction::*)()>(&CustomYieldInstruction::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomYieldInstruction*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CustomYieldInstruction::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomYieldInstruction::*)()>(&CustomYieldInstruction::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomYieldInstruction*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CustomYieldInstruction::*)()>(&CustomYieldInstruction::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CustomYieldInstruction*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.ExcludeFromObjectFactoryAttribute
#include "UnityEngine/ExcludeFromObjectFactoryAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ExcludeFromObjectFactoryAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExcludeFromObjectFactoryAttribute::*)()>(&ExcludeFromObjectFactoryAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExcludeFromObjectFactoryAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExcludeFromObjectFactoryAttribute::*)()>(&ExcludeFromObjectFactoryAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExcludeFromObjectFactoryAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.ExtensionOfNativeClassAttribute
#include "UnityEngine/ExtensionOfNativeClassAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: ExtensionOfNativeClassAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtensionOfNativeClassAttribute::*)()>(&ExtensionOfNativeClassAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtensionOfNativeClassAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ExtensionOfNativeClassAttribute::*)()>(&ExtensionOfNativeClassAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ExtensionOfNativeClassAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.PrimitiveType
#include "UnityEngine/PrimitiveType.hpp"
// Including type: UnityEngine.Component
#include "UnityEngine/Component.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: System.Array
#include "System/Array.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.SendMessageOptions
#include "UnityEngine/SendMessageOptions.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.SceneManagement.Scene
#include "UnityEngine/SceneManagement/Scene.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.GameObject.CreatePrimitive
UnityEngine::GameObject* UnityEngine::GameObject::CreatePrimitive(UnityEngine::PrimitiveType type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::CreatePrimitive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "GameObject", "CreatePrimitive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: UnityEngine.GameObject.GetComponent
UnityEngine::Component* UnityEngine::GameObject::GetComponent(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::GetComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, type);
}
// Autogenerated method: UnityEngine.GameObject.GetComponentFastPath
void UnityEngine::GameObject::GetComponentFastPath(System::Type* type, System::IntPtr oneFurtherThanResultValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::GetComponentFastPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentFastPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(oneFurtherThanResultValue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, type, oneFurtherThanResultValue);
}
// Autogenerated method: UnityEngine.GameObject.GetComponentByName
UnityEngine::Component* UnityEngine::GameObject::GetComponentByName(::Il2CppString* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::GetComponentByName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentByName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, type);
}
// Autogenerated method: UnityEngine.GameObject.GetComponent
UnityEngine::Component* UnityEngine::GameObject::GetComponent(::Il2CppString* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::GetComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, type);
}
// Autogenerated method: UnityEngine.GameObject.GetComponentInChildren
UnityEngine::Component* UnityEngine::GameObject::GetComponentInChildren(System::Type* type, bool includeInactive) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::GetComponentInChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentInChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(includeInactive)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, type, includeInactive);
}
// Autogenerated method: UnityEngine.GameObject.GetComponentInChildren
UnityEngine::Component* UnityEngine::GameObject::GetComponentInChildren(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::GetComponentInChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentInChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, type);
}
// Autogenerated method: UnityEngine.GameObject.GetComponentInParent
UnityEngine::Component* UnityEngine::GameObject::GetComponentInParent(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::GetComponentInParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentInParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, type);
}
// Autogenerated method: UnityEngine.GameObject.GetComponentsInternal
System::Array* UnityEngine::GameObject::GetComponentsInternal(System::Type* type, bool useSearchTypeAsArrayReturnType, bool recursive, bool includeInactive, bool reverse, ::Il2CppObject* resultList) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::GetComponentsInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentsInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(useSearchTypeAsArrayReturnType), ::il2cpp_utils::ExtractType(recursive), ::il2cpp_utils::ExtractType(includeInactive), ::il2cpp_utils::ExtractType(reverse), ::il2cpp_utils::ExtractType(resultList)})));
  return ::il2cpp_utils::RunMethodThrow<System::Array*, false>(this, ___internal__method, type, useSearchTypeAsArrayReturnType, recursive, includeInactive, reverse, resultList);
}
// Autogenerated method: UnityEngine.GameObject.GetComponents
::Array<UnityEngine::Component*>* UnityEngine::GameObject::GetComponents(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::GetComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Component*>*, false>(this, ___internal__method, type);
}
// Autogenerated method: UnityEngine.GameObject.GetComponents
void UnityEngine::GameObject::GetComponents(System::Type* type, System::Collections::Generic::List_1<UnityEngine::Component*>* results) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::GetComponents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(results)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, type, results);
}
// Autogenerated method: UnityEngine.GameObject.GetComponentsInChildren
::Array<UnityEngine::Component*>* UnityEngine::GameObject::GetComponentsInChildren(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::GetComponentsInChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentsInChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Component*>*, false>(this, ___internal__method, type);
}
// Autogenerated method: UnityEngine.GameObject.GetComponentsInChildren
::Array<UnityEngine::Component*>* UnityEngine::GameObject::GetComponentsInChildren(System::Type* type, bool includeInactive) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::GetComponentsInChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentsInChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(includeInactive)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Component*>*, false>(this, ___internal__method, type, includeInactive);
}
// Autogenerated method: UnityEngine.GameObject.GetComponentsInParent
::Array<UnityEngine::Component*>* UnityEngine::GameObject::GetComponentsInParent(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::GetComponentsInParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentsInParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Component*>*, false>(this, ___internal__method, type);
}
// Autogenerated method: UnityEngine.GameObject.GetComponentsInParent
::Array<UnityEngine::Component*>* UnityEngine::GameObject::GetComponentsInParent(System::Type* type, bool includeInactive) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::GetComponentsInParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetComponentsInParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(includeInactive)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Component*>*, false>(this, ___internal__method, type, includeInactive);
}
// Autogenerated method: UnityEngine.GameObject.TryGetComponent
bool UnityEngine::GameObject::TryGetComponent(System::Type* type, UnityEngine::Component*& component) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::TryGetComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Component*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, type, component);
}
// Autogenerated method: UnityEngine.GameObject.TryGetComponentInternal
UnityEngine::Component* UnityEngine::GameObject::TryGetComponentInternal(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::TryGetComponentInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetComponentInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, type);
}
// Autogenerated method: UnityEngine.GameObject.TryGetComponentFastPath
void UnityEngine::GameObject::TryGetComponentFastPath(System::Type* type, System::IntPtr oneFurtherThanResultValue) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::TryGetComponentFastPath");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryGetComponentFastPath", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(oneFurtherThanResultValue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, type, oneFurtherThanResultValue);
}
// Autogenerated method: UnityEngine.GameObject.FindWithTag
UnityEngine::GameObject* UnityEngine::GameObject::FindWithTag(::Il2CppString* tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::FindWithTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "GameObject", "FindWithTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tag)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, tag);
}
// Autogenerated method: UnityEngine.GameObject.SendMessageUpwards
void UnityEngine::GameObject::SendMessageUpwards(::Il2CppString* methodName, UnityEngine::SendMessageOptions options) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::SendMessageUpwards");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessageUpwards", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName, options);
}
// Autogenerated method: UnityEngine.GameObject.SendMessage
void UnityEngine::GameObject::SendMessage(::Il2CppString* methodName, UnityEngine::SendMessageOptions options) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::SendMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName, options);
}
// Autogenerated method: UnityEngine.GameObject.BroadcastMessage
void UnityEngine::GameObject::BroadcastMessage(::Il2CppString* methodName, UnityEngine::SendMessageOptions options) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::BroadcastMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BroadcastMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName, options);
}
// Autogenerated method: UnityEngine.GameObject.AddComponentInternal
UnityEngine::Component* UnityEngine::GameObject::AddComponentInternal(::Il2CppString* className) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::AddComponentInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddComponentInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(className)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, className);
}
// Autogenerated method: UnityEngine.GameObject.Internal_AddComponentWithType
UnityEngine::Component* UnityEngine::GameObject::Internal_AddComponentWithType(System::Type* componentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::Internal_AddComponentWithType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Internal_AddComponentWithType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(componentType)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, componentType);
}
// Autogenerated method: UnityEngine.GameObject.AddComponent
UnityEngine::Component* UnityEngine::GameObject::AddComponent(System::Type* componentType) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::AddComponent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddComponent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(componentType)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Component*, false>(this, ___internal__method, componentType);
}
// Autogenerated method: UnityEngine.GameObject.get_transform
UnityEngine::Transform* UnityEngine::GameObject::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::get_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.GameObject.get_layer
int UnityEngine::GameObject::get_layer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::get_layer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_layer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.GameObject.set_layer
void UnityEngine::GameObject::set_layer(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::set_layer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_layer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.GameObject.get_active
bool UnityEngine::GameObject::get_active() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::get_active");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_active", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.GameObject.set_active
void UnityEngine::GameObject::set_active(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::set_active");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_active", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.GameObject.SetActive
void UnityEngine::GameObject::SetActive(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::SetActive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.GameObject.get_activeSelf
bool UnityEngine::GameObject::get_activeSelf() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::get_activeSelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeSelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.GameObject.get_activeInHierarchy
bool UnityEngine::GameObject::get_activeInHierarchy() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::get_activeInHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeInHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.GameObject.SetActiveRecursively
void UnityEngine::GameObject::SetActiveRecursively(bool state) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::SetActiveRecursively");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetActiveRecursively", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, state);
}
// Autogenerated method: UnityEngine.GameObject.get_isStatic
bool UnityEngine::GameObject::get_isStatic() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::get_isStatic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isStatic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.GameObject.set_isStatic
void UnityEngine::GameObject::set_isStatic(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::set_isStatic");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isStatic", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.GameObject.get_isStaticBatchable
bool UnityEngine::GameObject::get_isStaticBatchable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::get_isStaticBatchable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isStaticBatchable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.GameObject.get_tag
::Il2CppString* UnityEngine::GameObject::get_tag() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::get_tag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_tag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.GameObject.set_tag
void UnityEngine::GameObject::set_tag(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::set_tag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.GameObject.CompareTag
bool UnityEngine::GameObject::CompareTag(::Il2CppString* tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::CompareTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CompareTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tag)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, tag);
}
// Autogenerated method: UnityEngine.GameObject.FindGameObjectWithTag
UnityEngine::GameObject* UnityEngine::GameObject::FindGameObjectWithTag(::Il2CppString* tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::FindGameObjectWithTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "GameObject", "FindGameObjectWithTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tag)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, tag);
}
// Autogenerated method: UnityEngine.GameObject.FindGameObjectsWithTag
::Array<UnityEngine::GameObject*>* UnityEngine::GameObject::FindGameObjectsWithTag(::Il2CppString* tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::FindGameObjectsWithTag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "GameObject", "FindGameObjectsWithTag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(tag)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::GameObject*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, tag);
}
// Autogenerated method: UnityEngine.GameObject.SendMessageUpwards
void UnityEngine::GameObject::SendMessageUpwards(::Il2CppString* methodName, ::Il2CppObject* value, UnityEngine::SendMessageOptions options) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::SendMessageUpwards");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessageUpwards", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName, value, options);
}
// Autogenerated method: UnityEngine.GameObject.SendMessageUpwards
void UnityEngine::GameObject::SendMessageUpwards(::Il2CppString* methodName, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::SendMessageUpwards");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessageUpwards", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName, value);
}
// Autogenerated method: UnityEngine.GameObject.SendMessageUpwards
void UnityEngine::GameObject::SendMessageUpwards(::Il2CppString* methodName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::SendMessageUpwards");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessageUpwards", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName);
}
// Autogenerated method: UnityEngine.GameObject.SendMessage
void UnityEngine::GameObject::SendMessage(::Il2CppString* methodName, ::Il2CppObject* value, UnityEngine::SendMessageOptions options) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::SendMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName, value, options);
}
// Autogenerated method: UnityEngine.GameObject.SendMessage
void UnityEngine::GameObject::SendMessage(::Il2CppString* methodName, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::SendMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName, value);
}
// Autogenerated method: UnityEngine.GameObject.SendMessage
void UnityEngine::GameObject::SendMessage(::Il2CppString* methodName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::SendMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName);
}
// Autogenerated method: UnityEngine.GameObject.BroadcastMessage
void UnityEngine::GameObject::BroadcastMessage(::Il2CppString* methodName, ::Il2CppObject* parameter, UnityEngine::SendMessageOptions options) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::BroadcastMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BroadcastMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(parameter), ::il2cpp_utils::ExtractType(options)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName, parameter, options);
}
// Autogenerated method: UnityEngine.GameObject.BroadcastMessage
void UnityEngine::GameObject::BroadcastMessage(::Il2CppString* methodName, ::Il2CppObject* parameter) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::BroadcastMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BroadcastMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(parameter)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName, parameter);
}
// Autogenerated method: UnityEngine.GameObject.BroadcastMessage
void UnityEngine::GameObject::BroadcastMessage(::Il2CppString* methodName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::BroadcastMessage");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BroadcastMessage", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName);
}
// Autogenerated method: UnityEngine.GameObject.Internal_CreateGameObject
void UnityEngine::GameObject::Internal_CreateGameObject(UnityEngine::GameObject* self, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::Internal_CreateGameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "GameObject", "Internal_CreateGameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self), ::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, self, name);
}
// Autogenerated method: UnityEngine.GameObject.Find
UnityEngine::GameObject* UnityEngine::GameObject::Find(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::Find");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "GameObject", "Find", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, name);
}
// Autogenerated method: UnityEngine.GameObject.get_scene
UnityEngine::SceneManagement::Scene UnityEngine::GameObject::get_scene() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::get_scene");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::SceneManagement::Scene, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.GameObject.get_sceneCullingMask
uint64_t UnityEngine::GameObject::get_sceneCullingMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::get_sceneCullingMask");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sceneCullingMask", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<uint64_t, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.GameObject.get_gameObject
UnityEngine::GameObject* UnityEngine::GameObject::get_gameObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::get_gameObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_gameObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::GameObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.GameObject.get_scene_Injected
void UnityEngine::GameObject::get_scene_Injected(UnityEngine::SceneManagement::Scene& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::GameObject::get_scene_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_scene_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::SceneManagement::Scene&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ret);
}
// Writing MetadataGetter for method: GameObject::CreatePrimitive
// Il2CppName: CreatePrimitive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (*)(UnityEngine::PrimitiveType)>(&GameObject::CreatePrimitive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "CreatePrimitive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::PrimitiveType>()});
  }
};
// Writing MetadataGetter for method: GameObject::GetComponent
// Il2CppName: GetComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GameObject::GetComponent
// Il2CppName: GetComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (GameObject::*)(System::Type*)>(&GameObject::GetComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "GetComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: GameObject::GetComponentFastPath
// Il2CppName: GetComponentFastPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(System::Type*, System::IntPtr)>(&GameObject::GetComponentFastPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "GetComponentFastPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: GameObject::GetComponentByName
// Il2CppName: GetComponentByName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (GameObject::*)(::Il2CppString*)>(&GameObject::GetComponentByName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "GetComponentByName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObject::GetComponent
// Il2CppName: GetComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (GameObject::*)(::Il2CppString*)>(&GameObject::GetComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "GetComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObject::GetComponentInChildren
// Il2CppName: GetComponentInChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (GameObject::*)(System::Type*, bool)>(&GameObject::GetComponentInChildren)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "GetComponentInChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameObject::GetComponentInChildren
// Il2CppName: GetComponentInChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (GameObject::*)(System::Type*)>(&GameObject::GetComponentInChildren)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "GetComponentInChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: GameObject::GetComponentInChildren
// Il2CppName: GetComponentInChildren
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GameObject::GetComponentInChildren
// Il2CppName: GetComponentInChildren
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GameObject::GetComponentInParent
// Il2CppName: GetComponentInParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (GameObject::*)(System::Type*)>(&GameObject::GetComponentInParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "GetComponentInParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: GameObject::GetComponentInParent
// Il2CppName: GetComponentInParent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GameObject::GetComponentsInternal
// Il2CppName: GetComponentsInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Array* (GameObject::*)(System::Type*, bool, bool, bool, bool, ::Il2CppObject*)>(&GameObject::GetComponentsInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "GetComponentsInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: GameObject::GetComponents
// Il2CppName: GetComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Component*>* (GameObject::*)(System::Type*)>(&GameObject::GetComponents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "GetComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: GameObject::GetComponents
// Il2CppName: GetComponents
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GameObject::GetComponents
// Il2CppName: GetComponents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(System::Type*, System::Collections::Generic::List_1<UnityEngine::Component*>*)>(&GameObject::GetComponents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "GetComponents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::Component*>*>()});
  }
};
// Writing MetadataGetter for method: GameObject::GetComponents
// Il2CppName: GetComponents
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GameObject::GetComponentsInChildren
// Il2CppName: GetComponentsInChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Component*>* (GameObject::*)(System::Type*)>(&GameObject::GetComponentsInChildren)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "GetComponentsInChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: GameObject::GetComponentsInChildren
// Il2CppName: GetComponentsInChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Component*>* (GameObject::*)(System::Type*, bool)>(&GameObject::GetComponentsInChildren)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "GetComponentsInChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameObject::GetComponentsInChildren
// Il2CppName: GetComponentsInChildren
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GameObject::GetComponentsInChildren
// Il2CppName: GetComponentsInChildren
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GameObject::GetComponentsInChildren
// Il2CppName: GetComponentsInChildren
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GameObject::GetComponentsInChildren
// Il2CppName: GetComponentsInChildren
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GameObject::GetComponentsInParent
// Il2CppName: GetComponentsInParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Component*>* (GameObject::*)(System::Type*)>(&GameObject::GetComponentsInParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "GetComponentsInParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: GameObject::GetComponentsInParent
// Il2CppName: GetComponentsInParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Component*>* (GameObject::*)(System::Type*, bool)>(&GameObject::GetComponentsInParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "GetComponentsInParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameObject::GetComponentsInParent
// Il2CppName: GetComponentsInParent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GameObject::GetComponentsInParent
// Il2CppName: GetComponentsInParent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GameObject::GetComponentsInParent
// Il2CppName: GetComponentsInParent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GameObject::TryGetComponent
// Il2CppName: TryGetComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GameObject::TryGetComponent
// Il2CppName: TryGetComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameObject::*)(System::Type*, UnityEngine::Component*&)>(&GameObject::TryGetComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "TryGetComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Component*&>()});
  }
};
// Writing MetadataGetter for method: GameObject::TryGetComponentInternal
// Il2CppName: TryGetComponentInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (GameObject::*)(System::Type*)>(&GameObject::TryGetComponentInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "TryGetComponentInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: GameObject::TryGetComponentFastPath
// Il2CppName: TryGetComponentFastPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(System::Type*, System::IntPtr)>(&GameObject::TryGetComponentFastPath)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "TryGetComponentFastPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: GameObject::FindWithTag
// Il2CppName: FindWithTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (*)(::Il2CppString*)>(&GameObject::FindWithTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "FindWithTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObject::SendMessageUpwards
// Il2CppName: SendMessageUpwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*, UnityEngine::SendMessageOptions)>(&GameObject::SendMessageUpwards)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "SendMessageUpwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::SendMessageOptions>()});
  }
};
// Writing MetadataGetter for method: GameObject::SendMessage
// Il2CppName: SendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*, UnityEngine::SendMessageOptions)>(&GameObject::SendMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "SendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::SendMessageOptions>()});
  }
};
// Writing MetadataGetter for method: GameObject::BroadcastMessage
// Il2CppName: BroadcastMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*, UnityEngine::SendMessageOptions)>(&GameObject::BroadcastMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "BroadcastMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::SendMessageOptions>()});
  }
};
// Writing MetadataGetter for method: GameObject::AddComponentInternal
// Il2CppName: AddComponentInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (GameObject::*)(::Il2CppString*)>(&GameObject::AddComponentInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "AddComponentInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObject::Internal_AddComponentWithType
// Il2CppName: Internal_AddComponentWithType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (GameObject::*)(System::Type*)>(&GameObject::Internal_AddComponentWithType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "Internal_AddComponentWithType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: GameObject::AddComponent
// Il2CppName: AddComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Component* (GameObject::*)(System::Type*)>(&GameObject::AddComponent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "AddComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: GameObject::AddComponent
// Il2CppName: AddComponent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GameObject::get_transform
// Il2CppName: get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (GameObject::*)()>(&GameObject::get_transform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObject::get_layer
// Il2CppName: get_layer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GameObject::*)()>(&GameObject::get_layer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "get_layer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObject::set_layer
// Il2CppName: set_layer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(int)>(&GameObject::set_layer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "set_layer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GameObject::get_active
// Il2CppName: get_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameObject::*)()>(&GameObject::get_active)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "get_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObject::set_active
// Il2CppName: set_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(bool)>(&GameObject::set_active)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "set_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameObject::SetActive
// Il2CppName: SetActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(bool)>(&GameObject::SetActive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "SetActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameObject::get_activeSelf
// Il2CppName: get_activeSelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameObject::*)()>(&GameObject::get_activeSelf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "get_activeSelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObject::get_activeInHierarchy
// Il2CppName: get_activeInHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameObject::*)()>(&GameObject::get_activeInHierarchy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "get_activeInHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObject::SetActiveRecursively
// Il2CppName: SetActiveRecursively
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(bool)>(&GameObject::SetActiveRecursively)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "SetActiveRecursively", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameObject::get_isStatic
// Il2CppName: get_isStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameObject::*)()>(&GameObject::get_isStatic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "get_isStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObject::set_isStatic
// Il2CppName: set_isStatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(bool)>(&GameObject::set_isStatic)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "set_isStatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: GameObject::get_isStaticBatchable
// Il2CppName: get_isStaticBatchable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameObject::*)()>(&GameObject::get_isStaticBatchable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "get_isStaticBatchable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObject::get_tag
// Il2CppName: get_tag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GameObject::*)()>(&GameObject::get_tag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "get_tag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObject::set_tag
// Il2CppName: set_tag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*)>(&GameObject::set_tag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "set_tag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObject::CompareTag
// Il2CppName: CompareTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GameObject::*)(::Il2CppString*)>(&GameObject::CompareTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "CompareTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObject::FindGameObjectWithTag
// Il2CppName: FindGameObjectWithTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (*)(::Il2CppString*)>(&GameObject::FindGameObjectWithTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "FindGameObjectWithTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObject::FindGameObjectsWithTag
// Il2CppName: FindGameObjectsWithTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::GameObject*>* (*)(::Il2CppString*)>(&GameObject::FindGameObjectsWithTag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "FindGameObjectsWithTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObject::SendMessageUpwards
// Il2CppName: SendMessageUpwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*, ::Il2CppObject*, UnityEngine::SendMessageOptions)>(&GameObject::SendMessageUpwards)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "SendMessageUpwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::SendMessageOptions>()});
  }
};
// Writing MetadataGetter for method: GameObject::SendMessageUpwards
// Il2CppName: SendMessageUpwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*, ::Il2CppObject*)>(&GameObject::SendMessageUpwards)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "SendMessageUpwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: GameObject::SendMessageUpwards
// Il2CppName: SendMessageUpwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*)>(&GameObject::SendMessageUpwards)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "SendMessageUpwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObject::SendMessage
// Il2CppName: SendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*, ::Il2CppObject*, UnityEngine::SendMessageOptions)>(&GameObject::SendMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "SendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::SendMessageOptions>()});
  }
};
// Writing MetadataGetter for method: GameObject::SendMessage
// Il2CppName: SendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*, ::Il2CppObject*)>(&GameObject::SendMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "SendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: GameObject::SendMessage
// Il2CppName: SendMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*)>(&GameObject::SendMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "SendMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObject::BroadcastMessage
// Il2CppName: BroadcastMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*, ::Il2CppObject*, UnityEngine::SendMessageOptions)>(&GameObject::BroadcastMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "BroadcastMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::SendMessageOptions>()});
  }
};
// Writing MetadataGetter for method: GameObject::BroadcastMessage
// Il2CppName: BroadcastMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*, ::Il2CppObject*)>(&GameObject::BroadcastMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "BroadcastMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: GameObject::BroadcastMessage
// Il2CppName: BroadcastMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*)>(&GameObject::BroadcastMessage)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "BroadcastMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObject::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*)>(&GameObject::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*)>(&GameObject::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObject::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*, ::Array<System::Type*>*)>(&GameObject::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(::Il2CppString*, ::Array<System::Type*>*)>(&GameObject::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<System::Type*>*>()});
  }
};
// Writing MetadataGetter for method: GameObject::Internal_CreateGameObject
// Il2CppName: Internal_CreateGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::GameObject*, ::Il2CppString*)>(&GameObject::Internal_CreateGameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "Internal_CreateGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::GameObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObject::Find
// Il2CppName: Find
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (*)(::Il2CppString*)>(&GameObject::Find)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "Find", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: GameObject::get_scene
// Il2CppName: get_scene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::SceneManagement::Scene (GameObject::*)()>(&GameObject::get_scene)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "get_scene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObject::get_sceneCullingMask
// Il2CppName: get_sceneCullingMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (GameObject::*)()>(&GameObject::get_sceneCullingMask)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "get_sceneCullingMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObject::get_gameObject
// Il2CppName: get_gameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (GameObject::*)()>(&GameObject::get_gameObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "get_gameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GameObject::get_scene_Injected
// Il2CppName: get_scene_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)(UnityEngine::SceneManagement::Scene&)>(&GameObject::get_scene_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), "get_scene_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::SceneManagement::Scene&>()});
  }
};
// Writing MetadataGetter for method: GameObject::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)()>(&GameObject::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GameObject::*)()>(&GameObject::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GameObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.LayerMask.get_value
int UnityEngine::LayerMask::get_value() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LayerMask::get_value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Autogenerated method: UnityEngine.LayerMask.set_value
void UnityEngine::LayerMask::set_value(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LayerMask::set_value");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_value", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.LayerMask.LayerToName
::Il2CppString* UnityEngine::LayerMask::LayerToName(int layer) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LayerMask::LayerToName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "LayerMask", "LayerToName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layer)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layer);
}
// Autogenerated method: UnityEngine.LayerMask.NameToLayer
int UnityEngine::LayerMask::NameToLayer(::Il2CppString* layerName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LayerMask::NameToLayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "LayerMask", "NameToLayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(layerName)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, layerName);
}
// Writing MetadataGetter for method: LayerMask::get_value
// Il2CppName: get_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LayerMask::*)()>(&LayerMask::get_value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LayerMask), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LayerMask::set_value
// Il2CppName: set_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LayerMask::*)(int)>(&LayerMask::set_value)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LayerMask), "set_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LayerMask::LayerToName
// Il2CppName: LayerToName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(int)>(&LayerMask::LayerToName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LayerMask), "LayerToName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: LayerMask::NameToLayer
// Il2CppName: NameToLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::Il2CppString*)>(&LayerMask::NameToLayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LayerMask), "NameToLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ManagedStreamHelpers
#include "UnityEngine/ManagedStreamHelpers.hpp"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.ManagedStreamHelpers.ValidateLoadFromStream
void UnityEngine::ManagedStreamHelpers::ValidateLoadFromStream(System::IO::Stream* stream) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ManagedStreamHelpers::ValidateLoadFromStream");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "ManagedStreamHelpers", "ValidateLoadFromStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stream);
}
// Autogenerated method: UnityEngine.ManagedStreamHelpers.ManagedStreamRead
void UnityEngine::ManagedStreamHelpers::ManagedStreamRead(::Array<uint8_t>* buffer, int offset, int count, System::IO::Stream* stream, System::IntPtr returnValueAddress) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ManagedStreamHelpers::ManagedStreamRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "ManagedStreamHelpers", "ManagedStreamRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buffer), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(returnValueAddress)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, buffer, offset, count, stream, returnValueAddress);
}
// Autogenerated method: UnityEngine.ManagedStreamHelpers.ManagedStreamSeek
void UnityEngine::ManagedStreamHelpers::ManagedStreamSeek(int64_t offset, uint origin, System::IO::Stream* stream, System::IntPtr returnValueAddress) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ManagedStreamHelpers::ManagedStreamSeek");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "ManagedStreamHelpers", "ManagedStreamSeek", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(origin), ::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(returnValueAddress)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, offset, origin, stream, returnValueAddress);
}
// Autogenerated method: UnityEngine.ManagedStreamHelpers.ManagedStreamLength
void UnityEngine::ManagedStreamHelpers::ManagedStreamLength(System::IO::Stream* stream, System::IntPtr returnValueAddress) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ManagedStreamHelpers::ManagedStreamLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "ManagedStreamHelpers", "ManagedStreamLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stream), ::il2cpp_utils::ExtractType(returnValueAddress)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stream, returnValueAddress);
}
// Writing MetadataGetter for method: ManagedStreamHelpers::ValidateLoadFromStream
// Il2CppName: ValidateLoadFromStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IO::Stream*)>(&ManagedStreamHelpers::ValidateLoadFromStream)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ManagedStreamHelpers*), "ValidateLoadFromStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>()});
  }
};
// Writing MetadataGetter for method: ManagedStreamHelpers::ManagedStreamRead
// Il2CppName: ManagedStreamRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<uint8_t>*, int, int, System::IO::Stream*, System::IntPtr)>(&ManagedStreamHelpers::ManagedStreamRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ManagedStreamHelpers*), "ManagedStreamRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<uint8_t>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: ManagedStreamHelpers::ManagedStreamSeek
// Il2CppName: ManagedStreamSeek
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t, uint, System::IO::Stream*, System::IntPtr)>(&ManagedStreamHelpers::ManagedStreamSeek)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ManagedStreamHelpers*), "ManagedStreamSeek", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>(), ::il2cpp_utils::ExtractIndependentType<uint>(), ::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: ManagedStreamHelpers::ManagedStreamLength
// Il2CppName: ManagedStreamLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::IO::Stream*, System::IntPtr)>(&ManagedStreamHelpers::ManagedStreamLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ManagedStreamHelpers*), "ManagedStreamLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IO::Stream*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.MonoBehaviour.IsInvoking
bool UnityEngine::MonoBehaviour::IsInvoking() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::IsInvoking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInvoking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.MonoBehaviour.CancelInvoke
void UnityEngine::MonoBehaviour::CancelInvoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::CancelInvoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.MonoBehaviour.Invoke
void UnityEngine::MonoBehaviour::Invoke(::Il2CppString* methodName, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::Invoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName, time);
}
// Autogenerated method: UnityEngine.MonoBehaviour.InvokeRepeating
void UnityEngine::MonoBehaviour::InvokeRepeating(::Il2CppString* methodName, float time, float repeatRate) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::InvokeRepeating");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvokeRepeating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(repeatRate)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName, time, repeatRate);
}
// Autogenerated method: UnityEngine.MonoBehaviour.CancelInvoke
void UnityEngine::MonoBehaviour::CancelInvoke(::Il2CppString* methodName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::CancelInvoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CancelInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName);
}
// Autogenerated method: UnityEngine.MonoBehaviour.IsInvoking
bool UnityEngine::MonoBehaviour::IsInvoking(::Il2CppString* methodName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::IsInvoking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInvoking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, methodName);
}
// Autogenerated method: UnityEngine.MonoBehaviour.StartCoroutine
UnityEngine::Coroutine* UnityEngine::MonoBehaviour::StartCoroutine(::Il2CppString* methodName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::StartCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Coroutine*, false>(this, ___internal__method, methodName);
}
// Autogenerated method: UnityEngine.MonoBehaviour.StartCoroutine
UnityEngine::Coroutine* UnityEngine::MonoBehaviour::StartCoroutine(::Il2CppString* methodName, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::StartCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Coroutine*, false>(this, ___internal__method, methodName, value);
}
// Autogenerated method: UnityEngine.MonoBehaviour.StartCoroutine
UnityEngine::Coroutine* UnityEngine::MonoBehaviour::StartCoroutine(System::Collections::IEnumerator* routine) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::StartCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(routine)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Coroutine*, false>(this, ___internal__method, routine);
}
// Autogenerated method: UnityEngine.MonoBehaviour.StartCoroutine_Auto
UnityEngine::Coroutine* UnityEngine::MonoBehaviour::StartCoroutine_Auto(System::Collections::IEnumerator* routine) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::StartCoroutine_Auto");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartCoroutine_Auto", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(routine)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Coroutine*, false>(this, ___internal__method, routine);
}
// Autogenerated method: UnityEngine.MonoBehaviour.StopCoroutine
void UnityEngine::MonoBehaviour::StopCoroutine(System::Collections::IEnumerator* routine) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::StopCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(routine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, routine);
}
// Autogenerated method: UnityEngine.MonoBehaviour.StopCoroutine
void UnityEngine::MonoBehaviour::StopCoroutine(UnityEngine::Coroutine* routine) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::StopCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(routine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, routine);
}
// Autogenerated method: UnityEngine.MonoBehaviour.StopCoroutine
void UnityEngine::MonoBehaviour::StopCoroutine(::Il2CppString* methodName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::StopCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, methodName);
}
// Autogenerated method: UnityEngine.MonoBehaviour.StopAllCoroutines
void UnityEngine::MonoBehaviour::StopAllCoroutines() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::StopAllCoroutines");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopAllCoroutines", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.MonoBehaviour.get_useGUILayout
bool UnityEngine::MonoBehaviour::get_useGUILayout() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::get_useGUILayout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useGUILayout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.MonoBehaviour.set_useGUILayout
void UnityEngine::MonoBehaviour::set_useGUILayout(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::set_useGUILayout");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_useGUILayout", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.MonoBehaviour.print
void UnityEngine::MonoBehaviour::print(::Il2CppObject* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::print");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "MonoBehaviour", "print", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, message);
}
// Autogenerated method: UnityEngine.MonoBehaviour.Internal_CancelInvokeAll
void UnityEngine::MonoBehaviour::Internal_CancelInvokeAll(UnityEngine::MonoBehaviour* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::Internal_CancelInvokeAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "MonoBehaviour", "Internal_CancelInvokeAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, self);
}
// Autogenerated method: UnityEngine.MonoBehaviour.Internal_IsInvokingAll
bool UnityEngine::MonoBehaviour::Internal_IsInvokingAll(UnityEngine::MonoBehaviour* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::Internal_IsInvokingAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "MonoBehaviour", "Internal_IsInvokingAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, self);
}
// Autogenerated method: UnityEngine.MonoBehaviour.InvokeDelayed
void UnityEngine::MonoBehaviour::InvokeDelayed(UnityEngine::MonoBehaviour* self, ::Il2CppString* methodName, float time, float repeatRate) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::InvokeDelayed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "MonoBehaviour", "InvokeDelayed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self), ::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(time), ::il2cpp_utils::ExtractType(repeatRate)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, self, methodName, time, repeatRate);
}
// Autogenerated method: UnityEngine.MonoBehaviour.CancelInvoke
void UnityEngine::MonoBehaviour::CancelInvoke(UnityEngine::MonoBehaviour* self, ::Il2CppString* methodName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::CancelInvoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "MonoBehaviour", "CancelInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self), ::il2cpp_utils::ExtractType(methodName)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, self, methodName);
}
// Autogenerated method: UnityEngine.MonoBehaviour.IsInvoking
bool UnityEngine::MonoBehaviour::IsInvoking(UnityEngine::MonoBehaviour* self, ::Il2CppString* methodName) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::IsInvoking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "MonoBehaviour", "IsInvoking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self), ::il2cpp_utils::ExtractType(methodName)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, self, methodName);
}
// Autogenerated method: UnityEngine.MonoBehaviour.IsObjectMonoBehaviour
bool UnityEngine::MonoBehaviour::IsObjectMonoBehaviour(UnityEngine::Object* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::IsObjectMonoBehaviour");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "MonoBehaviour", "IsObjectMonoBehaviour", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: UnityEngine.MonoBehaviour.StartCoroutineManaged
UnityEngine::Coroutine* UnityEngine::MonoBehaviour::StartCoroutineManaged(::Il2CppString* methodName, ::Il2CppObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::StartCoroutineManaged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartCoroutineManaged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(methodName), ::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Coroutine*, false>(this, ___internal__method, methodName, value);
}
// Autogenerated method: UnityEngine.MonoBehaviour.StartCoroutineManaged2
UnityEngine::Coroutine* UnityEngine::MonoBehaviour::StartCoroutineManaged2(System::Collections::IEnumerator* enumerator) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::StartCoroutineManaged2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartCoroutineManaged2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(enumerator)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Coroutine*, false>(this, ___internal__method, enumerator);
}
// Autogenerated method: UnityEngine.MonoBehaviour.StopCoroutineManaged
void UnityEngine::MonoBehaviour::StopCoroutineManaged(UnityEngine::Coroutine* routine) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::StopCoroutineManaged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopCoroutineManaged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(routine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, routine);
}
// Autogenerated method: UnityEngine.MonoBehaviour.StopCoroutineFromEnumeratorManaged
void UnityEngine::MonoBehaviour::StopCoroutineFromEnumeratorManaged(System::Collections::IEnumerator* routine) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::StopCoroutineFromEnumeratorManaged");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopCoroutineFromEnumeratorManaged", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(routine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, routine);
}
// Autogenerated method: UnityEngine.MonoBehaviour.GetScriptClassName
::Il2CppString* UnityEngine::MonoBehaviour::GetScriptClassName() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::MonoBehaviour::GetScriptClassName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetScriptClassName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MonoBehaviour::IsInvoking
// Il2CppName: IsInvoking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoBehaviour::*)()>(&MonoBehaviour::IsInvoking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "IsInvoking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::CancelInvoke
// Il2CppName: CancelInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoBehaviour::*)()>(&MonoBehaviour::CancelInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "CancelInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoBehaviour::*)(::Il2CppString*, float)>(&MonoBehaviour::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::InvokeRepeating
// Il2CppName: InvokeRepeating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoBehaviour::*)(::Il2CppString*, float, float)>(&MonoBehaviour::InvokeRepeating)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "InvokeRepeating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::CancelInvoke
// Il2CppName: CancelInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoBehaviour::*)(::Il2CppString*)>(&MonoBehaviour::CancelInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "CancelInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::IsInvoking
// Il2CppName: IsInvoking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoBehaviour::*)(::Il2CppString*)>(&MonoBehaviour::IsInvoking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "IsInvoking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::StartCoroutine
// Il2CppName: StartCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Coroutine* (MonoBehaviour::*)(::Il2CppString*)>(&MonoBehaviour::StartCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "StartCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::StartCoroutine
// Il2CppName: StartCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Coroutine* (MonoBehaviour::*)(::Il2CppString*, ::Il2CppObject*)>(&MonoBehaviour::StartCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "StartCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::StartCoroutine
// Il2CppName: StartCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Coroutine* (MonoBehaviour::*)(System::Collections::IEnumerator*)>(&MonoBehaviour::StartCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "StartCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerator*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::StartCoroutine_Auto
// Il2CppName: StartCoroutine_Auto
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Coroutine* (MonoBehaviour::*)(System::Collections::IEnumerator*)>(&MonoBehaviour::StartCoroutine_Auto)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "StartCoroutine_Auto", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerator*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::StopCoroutine
// Il2CppName: StopCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoBehaviour::*)(System::Collections::IEnumerator*)>(&MonoBehaviour::StopCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "StopCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerator*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::StopCoroutine
// Il2CppName: StopCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoBehaviour::*)(UnityEngine::Coroutine*)>(&MonoBehaviour::StopCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "StopCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Coroutine*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::StopCoroutine
// Il2CppName: StopCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoBehaviour::*)(::Il2CppString*)>(&MonoBehaviour::StopCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "StopCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::StopAllCoroutines
// Il2CppName: StopAllCoroutines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoBehaviour::*)()>(&MonoBehaviour::StopAllCoroutines)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "StopAllCoroutines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::get_useGUILayout
// Il2CppName: get_useGUILayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MonoBehaviour::*)()>(&MonoBehaviour::get_useGUILayout)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "get_useGUILayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::set_useGUILayout
// Il2CppName: set_useGUILayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoBehaviour::*)(bool)>(&MonoBehaviour::set_useGUILayout)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "set_useGUILayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::print
// Il2CppName: print
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*)>(&MonoBehaviour::print)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "print", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::Internal_CancelInvokeAll
// Il2CppName: Internal_CancelInvokeAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::MonoBehaviour*)>(&MonoBehaviour::Internal_CancelInvokeAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "Internal_CancelInvokeAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::MonoBehaviour*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::Internal_IsInvokingAll
// Il2CppName: Internal_IsInvokingAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::MonoBehaviour*)>(&MonoBehaviour::Internal_IsInvokingAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "Internal_IsInvokingAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::MonoBehaviour*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::InvokeDelayed
// Il2CppName: InvokeDelayed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::MonoBehaviour*, ::Il2CppString*, float, float)>(&MonoBehaviour::InvokeDelayed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "InvokeDelayed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::MonoBehaviour*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::CancelInvoke
// Il2CppName: CancelInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::MonoBehaviour*, ::Il2CppString*)>(&MonoBehaviour::CancelInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "CancelInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::MonoBehaviour*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::IsInvoking
// Il2CppName: IsInvoking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::MonoBehaviour*, ::Il2CppString*)>(&MonoBehaviour::IsInvoking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "IsInvoking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::MonoBehaviour*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::IsObjectMonoBehaviour
// Il2CppName: IsObjectMonoBehaviour
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Object*)>(&MonoBehaviour::IsObjectMonoBehaviour)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "IsObjectMonoBehaviour", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::StartCoroutineManaged
// Il2CppName: StartCoroutineManaged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Coroutine* (MonoBehaviour::*)(::Il2CppString*, ::Il2CppObject*)>(&MonoBehaviour::StartCoroutineManaged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "StartCoroutineManaged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::StartCoroutineManaged2
// Il2CppName: StartCoroutineManaged2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Coroutine* (MonoBehaviour::*)(System::Collections::IEnumerator*)>(&MonoBehaviour::StartCoroutineManaged2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "StartCoroutineManaged2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerator*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::StopCoroutineManaged
// Il2CppName: StopCoroutineManaged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoBehaviour::*)(UnityEngine::Coroutine*)>(&MonoBehaviour::StopCoroutineManaged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "StopCoroutineManaged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Coroutine*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::StopCoroutineFromEnumeratorManaged
// Il2CppName: StopCoroutineFromEnumeratorManaged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoBehaviour::*)(System::Collections::IEnumerator*)>(&MonoBehaviour::StopCoroutineFromEnumeratorManaged)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "StopCoroutineFromEnumeratorManaged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::IEnumerator*>()});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::GetScriptClassName
// Il2CppName: GetScriptClassName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (MonoBehaviour::*)()>(&MonoBehaviour::GetScriptClassName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), "GetScriptClassName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MonoBehaviour::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoBehaviour::*)()>(&MonoBehaviour::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MonoBehaviour::*)()>(&MonoBehaviour::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MonoBehaviour*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.NoAllocHelpers
#include "UnityEngine/NoAllocHelpers.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Array
#include "System/Array.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.NoAllocHelpers.SafeLength
int UnityEngine::NoAllocHelpers::SafeLength(System::Array* values) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::NoAllocHelpers::SafeLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "NoAllocHelpers", "SafeLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(values)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, values);
}
// Autogenerated method: UnityEngine.NoAllocHelpers.Internal_ResizeList
void UnityEngine::NoAllocHelpers::Internal_ResizeList(::Il2CppObject* list, int size) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::NoAllocHelpers::Internal_ResizeList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "NoAllocHelpers", "Internal_ResizeList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(size)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, list, size);
}
// Autogenerated method: UnityEngine.NoAllocHelpers.ExtractArrayFromList
System::Array* UnityEngine::NoAllocHelpers::ExtractArrayFromList(::Il2CppObject* list) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::NoAllocHelpers::ExtractArrayFromList");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "NoAllocHelpers", "ExtractArrayFromList", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(list)})));
  return ::il2cpp_utils::RunMethodThrow<System::Array*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, list);
}
// Writing MetadataGetter for method: NoAllocHelpers::ResizeList
// Il2CppName: ResizeList
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: NoAllocHelpers::EnsureListElemCount
// Il2CppName: EnsureListElemCount
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: NoAllocHelpers::SafeLength
// Il2CppName: SafeLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(System::Array*)>(&NoAllocHelpers::SafeLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoAllocHelpers*), "SafeLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Array*>()});
  }
};
// Writing MetadataGetter for method: NoAllocHelpers::SafeLength
// Il2CppName: SafeLength
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: NoAllocHelpers::ExtractArrayFromListT
// Il2CppName: ExtractArrayFromListT
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: NoAllocHelpers::Internal_ResizeList
// Il2CppName: Internal_ResizeList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, int)>(&NoAllocHelpers::Internal_ResizeList)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoAllocHelpers*), "Internal_ResizeList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: NoAllocHelpers::ExtractArrayFromList
// Il2CppName: ExtractArrayFromList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Array* (*)(::Il2CppObject*)>(&NoAllocHelpers::ExtractArrayFromList)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoAllocHelpers*), "ExtractArrayFromList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.RangeInt
#include "UnityEngine/RangeInt.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.RangeInt.get_end
int UnityEngine::RangeInt::get_end() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RangeInt::get_end");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "get_end", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: RangeInt::get_end
// Il2CppName: get_end
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (RangeInt::*)()>(&RangeInt::get_end)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeInt), "get_end", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RangeInt::RangeInt
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeInt::*)(int, int)>(&RangeInt::RangeInt<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeInt), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RangeInt::*)(int, int)>(&RangeInt::RangeInt<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RangeInt), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.RuntimeInitializeLoadType
#include "UnityEngine/RuntimeInitializeLoadType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimeInitializeLoadType AfterSceneLoad
UnityEngine::RuntimeInitializeLoadType UnityEngine::RuntimeInitializeLoadType::_get_AfterSceneLoad() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimeInitializeLoadType::_get_AfterSceneLoad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimeInitializeLoadType>("UnityEngine", "RuntimeInitializeLoadType", "AfterSceneLoad"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimeInitializeLoadType AfterSceneLoad
void UnityEngine::RuntimeInitializeLoadType::_set_AfterSceneLoad(UnityEngine::RuntimeInitializeLoadType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimeInitializeLoadType::_set_AfterSceneLoad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimeInitializeLoadType", "AfterSceneLoad", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimeInitializeLoadType BeforeSceneLoad
UnityEngine::RuntimeInitializeLoadType UnityEngine::RuntimeInitializeLoadType::_get_BeforeSceneLoad() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimeInitializeLoadType::_get_BeforeSceneLoad");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimeInitializeLoadType>("UnityEngine", "RuntimeInitializeLoadType", "BeforeSceneLoad"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimeInitializeLoadType BeforeSceneLoad
void UnityEngine::RuntimeInitializeLoadType::_set_BeforeSceneLoad(UnityEngine::RuntimeInitializeLoadType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimeInitializeLoadType::_set_BeforeSceneLoad");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimeInitializeLoadType", "BeforeSceneLoad", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimeInitializeLoadType AfterAssembliesLoaded
UnityEngine::RuntimeInitializeLoadType UnityEngine::RuntimeInitializeLoadType::_get_AfterAssembliesLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimeInitializeLoadType::_get_AfterAssembliesLoaded");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimeInitializeLoadType>("UnityEngine", "RuntimeInitializeLoadType", "AfterAssembliesLoaded"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimeInitializeLoadType AfterAssembliesLoaded
void UnityEngine::RuntimeInitializeLoadType::_set_AfterAssembliesLoaded(UnityEngine::RuntimeInitializeLoadType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimeInitializeLoadType::_set_AfterAssembliesLoaded");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimeInitializeLoadType", "AfterAssembliesLoaded", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimeInitializeLoadType BeforeSplashScreen
UnityEngine::RuntimeInitializeLoadType UnityEngine::RuntimeInitializeLoadType::_get_BeforeSplashScreen() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimeInitializeLoadType::_get_BeforeSplashScreen");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimeInitializeLoadType>("UnityEngine", "RuntimeInitializeLoadType", "BeforeSplashScreen"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimeInitializeLoadType BeforeSplashScreen
void UnityEngine::RuntimeInitializeLoadType::_set_BeforeSplashScreen(UnityEngine::RuntimeInitializeLoadType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimeInitializeLoadType::_set_BeforeSplashScreen");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimeInitializeLoadType", "BeforeSplashScreen", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.RuntimeInitializeLoadType SubsystemRegistration
UnityEngine::RuntimeInitializeLoadType UnityEngine::RuntimeInitializeLoadType::_get_SubsystemRegistration() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimeInitializeLoadType::_get_SubsystemRegistration");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::RuntimeInitializeLoadType>("UnityEngine", "RuntimeInitializeLoadType", "SubsystemRegistration"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.RuntimeInitializeLoadType SubsystemRegistration
void UnityEngine::RuntimeInitializeLoadType::_set_SubsystemRegistration(UnityEngine::RuntimeInitializeLoadType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimeInitializeLoadType::_set_SubsystemRegistration");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "RuntimeInitializeLoadType", "SubsystemRegistration", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.RuntimeInitializeOnLoadMethodAttribute
#include "UnityEngine/RuntimeInitializeOnLoadMethodAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.RuntimeInitializeOnLoadMethodAttribute.set_loadType
void UnityEngine::RuntimeInitializeOnLoadMethodAttribute::set_loadType(UnityEngine::RuntimeInitializeLoadType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::RuntimeInitializeOnLoadMethodAttribute::set_loadType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_loadType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: RuntimeInitializeOnLoadMethodAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeInitializeOnLoadMethodAttribute::*)(UnityEngine::RuntimeInitializeLoadType)>(&RuntimeInitializeOnLoadMethodAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeInitializeOnLoadMethodAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RuntimeInitializeLoadType>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeInitializeOnLoadMethodAttribute::*)(UnityEngine::RuntimeInitializeLoadType)>(&RuntimeInitializeOnLoadMethodAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeInitializeOnLoadMethodAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RuntimeInitializeLoadType>()});
  }
};
// Writing MetadataGetter for method: RuntimeInitializeOnLoadMethodAttribute::set_loadType
// Il2CppName: set_loadType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeInitializeOnLoadMethodAttribute::*)(UnityEngine::RuntimeInitializeLoadType)>(&RuntimeInitializeOnLoadMethodAttribute::set_loadType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeInitializeOnLoadMethodAttribute*), "set_loadType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RuntimeInitializeLoadType>()});
  }
};
// Writing MetadataGetter for method: RuntimeInitializeOnLoadMethodAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeInitializeOnLoadMethodAttribute::*)()>(&RuntimeInitializeOnLoadMethodAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeInitializeOnLoadMethodAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RuntimeInitializeOnLoadMethodAttribute::*)()>(&RuntimeInitializeOnLoadMethodAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RuntimeInitializeOnLoadMethodAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: System.Type
#include "System/Type.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.ScriptableObject.CreateInstance
UnityEngine::ScriptableObject* UnityEngine::ScriptableObject::CreateInstance(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ScriptableObject::CreateInstance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "ScriptableObject", "CreateInstance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::ScriptableObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: UnityEngine.ScriptableObject.CreateScriptableObject
void UnityEngine::ScriptableObject::CreateScriptableObject(UnityEngine::ScriptableObject* self) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ScriptableObject::CreateScriptableObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "ScriptableObject", "CreateScriptableObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(self)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, self);
}
// Autogenerated method: UnityEngine.ScriptableObject.CreateScriptableObjectInstanceFromType
UnityEngine::ScriptableObject* UnityEngine::ScriptableObject::CreateScriptableObjectInstanceFromType(System::Type* type, bool applyDefaultsAndReset) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ScriptableObject::CreateScriptableObjectInstanceFromType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "ScriptableObject", "CreateScriptableObjectInstanceFromType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(applyDefaultsAndReset)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::ScriptableObject*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type, applyDefaultsAndReset);
}
// Writing MetadataGetter for method: ScriptableObject::CreateInstance
// Il2CppName: CreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::ScriptableObject* (*)(System::Type*)>(&ScriptableObject::CreateInstance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObject*), "CreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: ScriptableObject::CreateInstance
// Il2CppName: CreateInstance
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: ScriptableObject::CreateScriptableObject
// Il2CppName: CreateScriptableObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::ScriptableObject*)>(&ScriptableObject::CreateScriptableObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObject*), "CreateScriptableObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::ScriptableObject*>()});
  }
};
// Writing MetadataGetter for method: ScriptableObject::CreateScriptableObjectInstanceFromType
// Il2CppName: CreateScriptableObjectInstanceFromType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::ScriptableObject* (*)(System::Type*, bool)>(&ScriptableObject::CreateScriptableObjectInstanceFromType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObject*), "CreateScriptableObjectInstanceFromType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: ScriptableObject::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObject::*)()>(&ScriptableObject::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ScriptableObject::*)()>(&ScriptableObject::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptableObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.ScriptingUtility
#include "UnityEngine/ScriptingUtility.hpp"
// Including type: UnityEngine.ScriptingUtility/TestClass
#include "UnityEngine/ScriptingUtility_TestClass.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.ScriptingUtility.IsManagedCodeWorking
bool UnityEngine::ScriptingUtility::IsManagedCodeWorking() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ScriptingUtility::IsManagedCodeWorking");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "ScriptingUtility", "IsManagedCodeWorking", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: ScriptingUtility::IsManagedCodeWorking
// Il2CppName: IsManagedCodeWorking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&ScriptingUtility::IsManagedCodeWorking)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ScriptingUtility*), "IsManagedCodeWorking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.SelectionBaseAttribute
#include "UnityEngine/SelectionBaseAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SelectionBaseAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SelectionBaseAttribute::*)()>(&SelectionBaseAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SelectionBaseAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SelectionBaseAttribute::*)()>(&SelectionBaseAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SelectionBaseAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.StackTraceUtility
#include "UnityEngine/StackTraceUtility.hpp"
// Including type: System.Diagnostics.StackTrace
#include "System/Diagnostics/StackTrace.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String projectFolder
::Il2CppString* UnityEngine::StackTraceUtility::_get_projectFolder() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::StackTraceUtility::_get_projectFolder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("UnityEngine", "StackTraceUtility", "projectFolder"));
}
// Autogenerated static field setter
// Set static field: static private System.String projectFolder
void UnityEngine::StackTraceUtility::_set_projectFolder(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::StackTraceUtility::_set_projectFolder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "StackTraceUtility", "projectFolder", value));
}
// Autogenerated method: UnityEngine.StackTraceUtility.SetProjectFolder
void UnityEngine::StackTraceUtility::SetProjectFolder(::Il2CppString* folder) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::StackTraceUtility::SetProjectFolder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "StackTraceUtility", "SetProjectFolder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(folder)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, folder);
}
// Autogenerated method: UnityEngine.StackTraceUtility.ExtractStackTrace
::Il2CppString* UnityEngine::StackTraceUtility::ExtractStackTrace() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::StackTraceUtility::ExtractStackTrace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "StackTraceUtility", "ExtractStackTrace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.StackTraceUtility.ExtractStringFromExceptionInternal
void UnityEngine::StackTraceUtility::ExtractStringFromExceptionInternal(::Il2CppObject* exceptiono, ::Il2CppString*& message, ::Il2CppString*& stackTrace) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::StackTraceUtility::ExtractStringFromExceptionInternal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "StackTraceUtility", "ExtractStringFromExceptionInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(exceptiono), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, exceptiono, message, stackTrace);
}
// Autogenerated method: UnityEngine.StackTraceUtility.ExtractFormattedStackTrace
::Il2CppString* UnityEngine::StackTraceUtility::ExtractFormattedStackTrace(System::Diagnostics::StackTrace* stackTrace) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::StackTraceUtility::ExtractFormattedStackTrace");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "StackTraceUtility", "ExtractFormattedStackTrace", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stackTrace)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, stackTrace);
}
// Autogenerated method: UnityEngine.StackTraceUtility..cctor
void UnityEngine::StackTraceUtility::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::StackTraceUtility::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "StackTraceUtility", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: StackTraceUtility::SetProjectFolder
// Il2CppName: SetProjectFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&StackTraceUtility::SetProjectFolder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StackTraceUtility*), "SetProjectFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: StackTraceUtility::ExtractStackTrace
// Il2CppName: ExtractStackTrace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&StackTraceUtility::ExtractStackTrace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StackTraceUtility*), "ExtractStackTrace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: StackTraceUtility::ExtractStringFromExceptionInternal
// Il2CppName: ExtractStringFromExceptionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppString*&, ::Il2CppString*&)>(&StackTraceUtility::ExtractStringFromExceptionInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StackTraceUtility*), "ExtractStringFromExceptionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: StackTraceUtility::ExtractFormattedStackTrace
// Il2CppName: ExtractFormattedStackTrace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(System::Diagnostics::StackTrace*)>(&StackTraceUtility::ExtractFormattedStackTrace)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StackTraceUtility*), "ExtractFormattedStackTrace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Diagnostics::StackTrace*>()});
  }
};
// Writing MetadataGetter for method: StackTraceUtility::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&StackTraceUtility::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(StackTraceUtility*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UnityException
#include "UnityEngine/UnityException.hpp"
// Including type: System.Runtime.Serialization.SerializationInfo
#include "System/Runtime/Serialization/SerializationInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: UnityException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityException::*)()>(&UnityException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityException::*)()>(&UnityException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityException::*)(::Il2CppString*)>(&UnityException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityException::*)(::Il2CppString*)>(&UnityException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: UnityException::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&UnityException::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityException::*)(System::Runtime::Serialization::SerializationInfo*, System::Runtime::Serialization::StreamingContext)>(&UnityException::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityException*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::SerializationInfo*>(), ::il2cpp_utils::ExtractIndependentType<System::Runtime::Serialization::StreamingContext>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.TextAsset
#include "UnityEngine/TextAsset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.TextAsset.get_text
::Il2CppString* UnityEngine::TextAsset::get_text() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::TextAsset::get_text");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_text", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.TextAsset.get_bytes
::Array<uint8_t>* UnityEngine::TextAsset::get_bytes() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::TextAsset::get_bytes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bytes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<uint8_t>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.TextAsset.ToString
::Il2CppString* UnityEngine::TextAsset::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::TextAsset::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TextAsset::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TextAsset::*)()>(&TextAsset::get_text)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextAsset*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextAsset::get_bytes
// Il2CppName: get_bytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<uint8_t>* (TextAsset::*)()>(&TextAsset::get_bytes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextAsset*), "get_bytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TextAsset::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (TextAsset::*)()>(&TextAsset::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TextAsset*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.TrackedReference
#include "UnityEngine/TrackedReference.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.TrackedReference.Equals
bool UnityEngine::TrackedReference::Equals(::Il2CppObject* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::TrackedReference::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, o);
}
// Autogenerated method: UnityEngine.TrackedReference.GetHashCode
int UnityEngine::TrackedReference::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::TrackedReference::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.TrackedReference.op_Equality
bool UnityEngine::operator ==(UnityEngine::TrackedReference* x, UnityEngine::TrackedReference& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::TrackedReference::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "TrackedReference", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(&y)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x, &y);
}
// Writing MetadataGetter for method: TrackedReference::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackedReference::*)()>(&TrackedReference::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackedReference*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrackedReference::*)()>(&TrackedReference::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackedReference*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackedReference::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TrackedReference::*)(::Il2CppObject*)>(&TrackedReference::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackedReference*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: TrackedReference::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TrackedReference::*)()>(&TrackedReference::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackedReference*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrackedReference::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::TrackedReference*, UnityEngine::TrackedReference&)>(&TrackedReference::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrackedReference*), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TrackedReference*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::TrackedReference&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.UnhandledExceptionHandler
#include "UnityEngine/UnhandledExceptionHandler.hpp"
// Including type: UnityEngine.UnhandledExceptionHandler/<>c
#include "UnityEngine/UnhandledExceptionHandler_--c.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.UnhandledExceptionHandler.RegisterUECatcher
void UnityEngine::UnhandledExceptionHandler::RegisterUECatcher() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnhandledExceptionHandler::RegisterUECatcher");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "UnhandledExceptionHandler", "RegisterUECatcher", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: UnhandledExceptionHandler::RegisterUECatcher
// Il2CppName: RegisterUECatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnhandledExceptionHandler::RegisterUECatcher)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnhandledExceptionHandler*), "RegisterUECatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UnhandledExceptionHandler/<>c
#include "UnityEngine/UnhandledExceptionHandler_--c.hpp"
// Including type: System.UnhandledExceptionEventHandler
#include "System/UnhandledExceptionEventHandler.hpp"
// Including type: System.UnhandledExceptionEventArgs
#include "System/UnhandledExceptionEventArgs.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.UnhandledExceptionHandler/<>c <>9
UnityEngine::UnhandledExceptionHandler::$$c* UnityEngine::UnhandledExceptionHandler::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnhandledExceptionHandler::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<UnityEngine::UnhandledExceptionHandler::$$c*>("UnityEngine", "UnhandledExceptionHandler/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.UnhandledExceptionHandler/<>c <>9
void UnityEngine::UnhandledExceptionHandler::$$c::_set_$$9(UnityEngine::UnhandledExceptionHandler::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnhandledExceptionHandler::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("UnityEngine", "UnhandledExceptionHandler/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.UnhandledExceptionEventHandler <>9__0_0
System::UnhandledExceptionEventHandler* UnityEngine::UnhandledExceptionHandler::$$c::_get_$$9__0_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnhandledExceptionHandler::$$c::_get_$$9__0_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::UnhandledExceptionEventHandler*>("UnityEngine", "UnhandledExceptionHandler/<>c", "<>9__0_0")));
}
// Autogenerated static field setter
// Set static field: static public System.UnhandledExceptionEventHandler <>9__0_0
void UnityEngine::UnhandledExceptionHandler::$$c::_set_$$9__0_0(System::UnhandledExceptionEventHandler* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnhandledExceptionHandler::$$c::_set_$$9__0_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("UnityEngine", "UnhandledExceptionHandler/<>c", "<>9__0_0", value)));
}
// Autogenerated method: UnityEngine.UnhandledExceptionHandler/<>c..cctor
void UnityEngine::UnhandledExceptionHandler::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnhandledExceptionHandler::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "UnhandledExceptionHandler/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.UnhandledExceptionHandler/<>c.<RegisterUECatcher>b__0_0
void UnityEngine::UnhandledExceptionHandler::$$c::$RegisterUECatcher$b__0_0(::Il2CppObject* sender, System::UnhandledExceptionEventArgs* e) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnhandledExceptionHandler::$$c::<RegisterUECatcher>b__0_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterUECatcher>b__0_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(sender), ::il2cpp_utils::ExtractType(e)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sender, e);
}
// Writing MetadataGetter for method: UnhandledExceptionHandler::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnhandledExceptionHandler::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnhandledExceptionHandler::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnhandledExceptionHandler::$$c::$RegisterUECatcher$b__0_0
// Il2CppName: <RegisterUECatcher>b__0_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnhandledExceptionHandler::$$c::*)(::Il2CppObject*, System::UnhandledExceptionEventArgs*)>(&UnhandledExceptionHandler::$$c::$RegisterUECatcher$b__0_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnhandledExceptionHandler::$$c*), "<RegisterUECatcher>b__0_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::UnhandledExceptionEventArgs*>()});
  }
};
// Writing MetadataGetter for method: UnhandledExceptionHandler::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnhandledExceptionHandler::$$c::*)()>(&UnhandledExceptionHandler::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnhandledExceptionHandler::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnhandledExceptionHandler::$$c::*)()>(&UnhandledExceptionHandler::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnhandledExceptionHandler::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UnityAPICompatibilityVersionAttribute
#include "UnityEngine/UnityAPICompatibilityVersionAttribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: UnityAPICompatibilityVersionAttribute::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityAPICompatibilityVersionAttribute::*)(::Il2CppString*, ::Array<::Il2CppString*>*)>(&UnityAPICompatibilityVersionAttribute::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityAPICompatibilityVersionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityAPICompatibilityVersionAttribute::*)(::Il2CppString*, ::Array<::Il2CppString*>*)>(&UnityAPICompatibilityVersionAttribute::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityAPICompatibilityVersionAttribute*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.HideFlags
#include "UnityEngine/HideFlags.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.HideFlags None
UnityEngine::HideFlags UnityEngine::HideFlags::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::HideFlags>("UnityEngine", "HideFlags", "None"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.HideFlags None
void UnityEngine::HideFlags::_set_None(UnityEngine::HideFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "HideFlags", "None", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.HideFlags HideInHierarchy
UnityEngine::HideFlags UnityEngine::HideFlags::_get_HideInHierarchy() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_get_HideInHierarchy");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::HideFlags>("UnityEngine", "HideFlags", "HideInHierarchy"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.HideFlags HideInHierarchy
void UnityEngine::HideFlags::_set_HideInHierarchy(UnityEngine::HideFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_set_HideInHierarchy");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "HideFlags", "HideInHierarchy", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.HideFlags HideInInspector
UnityEngine::HideFlags UnityEngine::HideFlags::_get_HideInInspector() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_get_HideInInspector");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::HideFlags>("UnityEngine", "HideFlags", "HideInInspector"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.HideFlags HideInInspector
void UnityEngine::HideFlags::_set_HideInInspector(UnityEngine::HideFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_set_HideInInspector");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "HideFlags", "HideInInspector", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.HideFlags DontSaveInEditor
UnityEngine::HideFlags UnityEngine::HideFlags::_get_DontSaveInEditor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_get_DontSaveInEditor");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::HideFlags>("UnityEngine", "HideFlags", "DontSaveInEditor"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.HideFlags DontSaveInEditor
void UnityEngine::HideFlags::_set_DontSaveInEditor(UnityEngine::HideFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_set_DontSaveInEditor");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "HideFlags", "DontSaveInEditor", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.HideFlags NotEditable
UnityEngine::HideFlags UnityEngine::HideFlags::_get_NotEditable() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_get_NotEditable");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::HideFlags>("UnityEngine", "HideFlags", "NotEditable"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.HideFlags NotEditable
void UnityEngine::HideFlags::_set_NotEditable(UnityEngine::HideFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_set_NotEditable");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "HideFlags", "NotEditable", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.HideFlags DontSaveInBuild
UnityEngine::HideFlags UnityEngine::HideFlags::_get_DontSaveInBuild() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_get_DontSaveInBuild");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::HideFlags>("UnityEngine", "HideFlags", "DontSaveInBuild"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.HideFlags DontSaveInBuild
void UnityEngine::HideFlags::_set_DontSaveInBuild(UnityEngine::HideFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_set_DontSaveInBuild");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "HideFlags", "DontSaveInBuild", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.HideFlags DontUnloadUnusedAsset
UnityEngine::HideFlags UnityEngine::HideFlags::_get_DontUnloadUnusedAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_get_DontUnloadUnusedAsset");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::HideFlags>("UnityEngine", "HideFlags", "DontUnloadUnusedAsset"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.HideFlags DontUnloadUnusedAsset
void UnityEngine::HideFlags::_set_DontUnloadUnusedAsset(UnityEngine::HideFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_set_DontUnloadUnusedAsset");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "HideFlags", "DontUnloadUnusedAsset", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.HideFlags DontSave
UnityEngine::HideFlags UnityEngine::HideFlags::_get_DontSave() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_get_DontSave");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::HideFlags>("UnityEngine", "HideFlags", "DontSave"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.HideFlags DontSave
void UnityEngine::HideFlags::_set_DontSave(UnityEngine::HideFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_set_DontSave");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "HideFlags", "DontSave", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.HideFlags HideAndDontSave
UnityEngine::HideFlags UnityEngine::HideFlags::_get_HideAndDontSave() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_get_HideAndDontSave");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::HideFlags>("UnityEngine", "HideFlags", "HideAndDontSave"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.HideFlags HideAndDontSave
void UnityEngine::HideFlags::_set_HideAndDontSave(UnityEngine::HideFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::HideFlags::_set_HideAndDontSave");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "HideFlags", "HideAndDontSave", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.HideFlags
#include "UnityEngine/HideFlags.hpp"
// Including type: System.Type
#include "System/Type.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static System.Int32 OffsetOfInstanceIDInCPlusPlusObject
int UnityEngine::Object::_get_OffsetOfInstanceIDInCPlusPlusObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::_get_OffsetOfInstanceIDInCPlusPlusObject");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityEngine", "Object", "OffsetOfInstanceIDInCPlusPlusObject"));
}
// Autogenerated static field setter
// Set static field: static System.Int32 OffsetOfInstanceIDInCPlusPlusObject
void UnityEngine::Object::_set_OffsetOfInstanceIDInCPlusPlusObject(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::_set_OffsetOfInstanceIDInCPlusPlusObject");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Object", "OffsetOfInstanceIDInCPlusPlusObject", value));
}
// Autogenerated static field getter
// Get static field: static private System.String objectIsNullMessage
::Il2CppString* UnityEngine::Object::_get_objectIsNullMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::_get_objectIsNullMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("UnityEngine", "Object", "objectIsNullMessage"));
}
// Autogenerated static field setter
// Set static field: static private System.String objectIsNullMessage
void UnityEngine::Object::_set_objectIsNullMessage(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::_set_objectIsNullMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Object", "objectIsNullMessage", value));
}
// Autogenerated static field getter
// Get static field: static private System.String cloneDestroyedMessage
::Il2CppString* UnityEngine::Object::_get_cloneDestroyedMessage() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::_get_cloneDestroyedMessage");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("UnityEngine", "Object", "cloneDestroyedMessage"));
}
// Autogenerated static field setter
// Set static field: static private System.String cloneDestroyedMessage
void UnityEngine::Object::_set_cloneDestroyedMessage(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::_set_cloneDestroyedMessage");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Object", "cloneDestroyedMessage", value));
}
// Autogenerated method: UnityEngine.Object.GetInstanceID
int UnityEngine::Object::GetInstanceID() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::GetInstanceID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInstanceID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Object.CompareBaseObjects
bool UnityEngine::Object::CompareBaseObjects(UnityEngine::Object* lhs, UnityEngine::Object* rhs) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::CompareBaseObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "CompareBaseObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lhs, rhs);
}
// Autogenerated method: UnityEngine.Object.IsNativeObjectAlive
bool UnityEngine::Object::IsNativeObjectAlive(UnityEngine::Object* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::IsNativeObjectAlive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "IsNativeObjectAlive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, o);
}
// Autogenerated method: UnityEngine.Object.GetCachedPtr
System::IntPtr UnityEngine::Object::GetCachedPtr() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::GetCachedPtr");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCachedPtr", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::IntPtr, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Object.get_name
::Il2CppString* UnityEngine::Object::get_name() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::get_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Object.set_name
void UnityEngine::Object::set_name(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::set_name");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Object.Instantiate
UnityEngine::Object* UnityEngine::Object::Instantiate(UnityEngine::Object* original, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::Instantiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "Instantiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original, position, rotation);
}
// Autogenerated method: UnityEngine.Object.Instantiate
UnityEngine::Object* UnityEngine::Object::Instantiate(UnityEngine::Object* original, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Transform* parent) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::Instantiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "Instantiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(parent)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original, position, rotation, parent);
}
// Autogenerated method: UnityEngine.Object.Instantiate
UnityEngine::Object* UnityEngine::Object::Instantiate(UnityEngine::Object* original) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::Instantiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "Instantiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original);
}
// Autogenerated method: UnityEngine.Object.Instantiate
UnityEngine::Object* UnityEngine::Object::Instantiate(UnityEngine::Object* original, UnityEngine::Transform* parent, bool instantiateInWorldSpace) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::Instantiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "Instantiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(original), ::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(instantiateInWorldSpace)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, original, parent, instantiateInWorldSpace);
}
// Autogenerated method: UnityEngine.Object.Destroy
void UnityEngine::Object::Destroy(UnityEngine::Object* obj, float t) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::Destroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, t);
}
// Autogenerated method: UnityEngine.Object.Destroy
void UnityEngine::Object::Destroy(UnityEngine::Object* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::Destroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: UnityEngine.Object.DestroyImmediate
void UnityEngine::Object::DestroyImmediate(UnityEngine::Object* obj, bool allowDestroyingAssets) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::DestroyImmediate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "DestroyImmediate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(allowDestroyingAssets)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, allowDestroyingAssets);
}
// Autogenerated method: UnityEngine.Object.DestroyImmediate
void UnityEngine::Object::DestroyImmediate(UnityEngine::Object* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::DestroyImmediate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "DestroyImmediate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: UnityEngine.Object.FindObjectsOfType
::Array<UnityEngine::Object*>* UnityEngine::Object::FindObjectsOfType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::FindObjectsOfType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "FindObjectsOfType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Object*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: UnityEngine.Object.DontDestroyOnLoad
void UnityEngine::Object::DontDestroyOnLoad(UnityEngine::Object* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::DontDestroyOnLoad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "DontDestroyOnLoad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, target);
}
// Autogenerated method: UnityEngine.Object.get_hideFlags
UnityEngine::HideFlags UnityEngine::Object::get_hideFlags() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::get_hideFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hideFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::HideFlags, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Object.set_hideFlags
void UnityEngine::Object::set_hideFlags(UnityEngine::HideFlags value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::set_hideFlags");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hideFlags", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Object.CheckNullArgument
void UnityEngine::Object::CheckNullArgument(::Il2CppObject* arg, ::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::CheckNullArgument");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "CheckNullArgument", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(arg), ::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, arg, message);
}
// Autogenerated method: UnityEngine.Object.FindObjectOfType
UnityEngine::Object* UnityEngine::Object::FindObjectOfType(System::Type* type) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::FindObjectOfType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "FindObjectOfType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, type);
}
// Autogenerated method: UnityEngine.Object.GetOffsetOfInstanceIDInCPlusPlusObject
int UnityEngine::Object::GetOffsetOfInstanceIDInCPlusPlusObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::GetOffsetOfInstanceIDInCPlusPlusObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "GetOffsetOfInstanceIDInCPlusPlusObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Object.Internal_CloneSingle
UnityEngine::Object* UnityEngine::Object::Internal_CloneSingle(UnityEngine::Object* data) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::Internal_CloneSingle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "Internal_CloneSingle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, data);
}
// Autogenerated method: UnityEngine.Object.Internal_CloneSingleWithParent
UnityEngine::Object* UnityEngine::Object::Internal_CloneSingleWithParent(UnityEngine::Object* data, UnityEngine::Transform* parent, bool worldPositionStays) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::Internal_CloneSingleWithParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "Internal_CloneSingleWithParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(worldPositionStays)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, data, parent, worldPositionStays);
}
// Autogenerated method: UnityEngine.Object.Internal_InstantiateSingle
UnityEngine::Object* UnityEngine::Object::Internal_InstantiateSingle(UnityEngine::Object* data, UnityEngine::Vector3 pos, UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::Internal_InstantiateSingle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "Internal_InstantiateSingle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rot)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, data, pos, rot);
}
// Autogenerated method: UnityEngine.Object.Internal_InstantiateSingleWithParent
UnityEngine::Object* UnityEngine::Object::Internal_InstantiateSingleWithParent(UnityEngine::Object* data, UnityEngine::Transform* parent, UnityEngine::Vector3 pos, UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::Internal_InstantiateSingleWithParent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "Internal_InstantiateSingleWithParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rot)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, data, parent, pos, rot);
}
// Autogenerated method: UnityEngine.Object.ToString
::Il2CppString* UnityEngine::Object::ToString(UnityEngine::Object* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::ToString");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: UnityEngine.Object.GetName
::Il2CppString* UnityEngine::Object::GetName(UnityEngine::Object* obj) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::GetName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "GetName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj);
}
// Autogenerated method: UnityEngine.Object.SetName
void UnityEngine::Object::SetName(UnityEngine::Object* obj, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::SetName");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "SetName", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(name)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, obj, name);
}
// Autogenerated method: UnityEngine.Object.FindObjectFromInstanceID
UnityEngine::Object* UnityEngine::Object::FindObjectFromInstanceID(int instanceID) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::FindObjectFromInstanceID");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "FindObjectFromInstanceID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instanceID)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, instanceID);
}
// Autogenerated method: UnityEngine.Object..cctor
void UnityEngine::Object::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Object.Internal_InstantiateSingle_Injected
UnityEngine::Object* UnityEngine::Object::Internal_InstantiateSingle_Injected(UnityEngine::Object* data, UnityEngine::Vector3& pos, UnityEngine::Quaternion& rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::Internal_InstantiateSingle_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "Internal_InstantiateSingle_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rot)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, data, pos, rot);
}
// Autogenerated method: UnityEngine.Object.Internal_InstantiateSingleWithParent_Injected
UnityEngine::Object* UnityEngine::Object::Internal_InstantiateSingleWithParent_Injected(UnityEngine::Object* data, UnityEngine::Transform* parent, UnityEngine::Vector3& pos, UnityEngine::Quaternion& rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::Internal_InstantiateSingleWithParent_Injected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "Internal_InstantiateSingleWithParent_Injected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(pos), ::il2cpp_utils::ExtractType(rot)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, data, parent, pos, rot);
}
// Autogenerated method: UnityEngine.Object.GetHashCode
int UnityEngine::Object::GetHashCode() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::GetHashCode");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHashCode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Object.Equals
bool UnityEngine::Object::Equals(::Il2CppObject* other) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::Equals");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Equals", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, other);
}
// Autogenerated method: UnityEngine.Object.ToString
::Il2CppString* UnityEngine::Object::ToString() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::ToString");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ToString", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Object.op_Equality
bool UnityEngine::operator ==(UnityEngine::Object* x, UnityEngine::Object& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::op_Equality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(&y)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x, &y);
}
// Autogenerated method: UnityEngine.Object.op_Inequality
bool UnityEngine::operator !=(UnityEngine::Object* x, UnityEngine::Object& y) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Object::op_Inequality");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Object", "op_Inequality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x), ::il2cpp_utils::ExtractType(&y)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, x, &y);
}
// Writing MetadataGetter for method: Object::GetInstanceID
// Il2CppName: GetInstanceID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Object::*)()>(&Object::GetInstanceID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "GetInstanceID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Object::CompareBaseObjects
// Il2CppName: CompareBaseObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Object*, UnityEngine::Object*)>(&Object::CompareBaseObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "CompareBaseObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: Object::IsNativeObjectAlive
// Il2CppName: IsNativeObjectAlive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Object*)>(&Object::IsNativeObjectAlive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "IsNativeObjectAlive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: Object::GetCachedPtr
// Il2CppName: GetCachedPtr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IntPtr (Object::*)()>(&Object::GetCachedPtr)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "GetCachedPtr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Object::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Object::*)()>(&Object::get_name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Object::set_name
// Il2CppName: set_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Object::*)(::Il2CppString*)>(&Object::set_name)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "set_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Object::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(UnityEngine::Object*, UnityEngine::Vector3, UnityEngine::Quaternion)>(&Object::Instantiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: Object::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(UnityEngine::Object*, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Transform*)>(&Object::Instantiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: Object::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(UnityEngine::Object*)>(&Object::Instantiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: Object::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(UnityEngine::Object*, UnityEngine::Transform*, bool)>(&Object::Instantiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Object::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Object::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Object::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Object::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Object::Instantiate
// Il2CppName: Instantiate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Object::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*, float)>(&Object::Destroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Object::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*)>(&Object::Destroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: Object::DestroyImmediate
// Il2CppName: DestroyImmediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*, bool)>(&Object::DestroyImmediate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "DestroyImmediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Object::DestroyImmediate
// Il2CppName: DestroyImmediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*)>(&Object::DestroyImmediate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "DestroyImmediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: Object::FindObjectsOfType
// Il2CppName: FindObjectsOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Object*>* (*)(System::Type*)>(&Object::FindObjectsOfType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "FindObjectsOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Object::DontDestroyOnLoad
// Il2CppName: DontDestroyOnLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*)>(&Object::DontDestroyOnLoad)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "DontDestroyOnLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: Object::get_hideFlags
// Il2CppName: get_hideFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::HideFlags (Object::*)()>(&Object::get_hideFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "get_hideFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Object::set_hideFlags
// Il2CppName: set_hideFlags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Object::*)(UnityEngine::HideFlags)>(&Object::set_hideFlags)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "set_hideFlags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::HideFlags>()});
  }
};
// Writing MetadataGetter for method: Object::FindObjectsOfType
// Il2CppName: FindObjectsOfType
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Object::FindObjectOfType
// Il2CppName: FindObjectOfType
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Object::CheckNullArgument
// Il2CppName: CheckNullArgument
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppObject*, ::Il2CppString*)>(&Object::CheckNullArgument)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "CheckNullArgument", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Object::FindObjectOfType
// Il2CppName: FindObjectOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(System::Type*)>(&Object::FindObjectOfType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "FindObjectOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Type*>()});
  }
};
// Writing MetadataGetter for method: Object::GetOffsetOfInstanceIDInCPlusPlusObject
// Il2CppName: GetOffsetOfInstanceIDInCPlusPlusObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Object::GetOffsetOfInstanceIDInCPlusPlusObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "GetOffsetOfInstanceIDInCPlusPlusObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Object::Internal_CloneSingle
// Il2CppName: Internal_CloneSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(UnityEngine::Object*)>(&Object::Internal_CloneSingle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "Internal_CloneSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: Object::Internal_CloneSingleWithParent
// Il2CppName: Internal_CloneSingleWithParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(UnityEngine::Object*, UnityEngine::Transform*, bool)>(&Object::Internal_CloneSingleWithParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "Internal_CloneSingleWithParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Object::Internal_InstantiateSingle
// Il2CppName: Internal_InstantiateSingle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(UnityEngine::Object*, UnityEngine::Vector3, UnityEngine::Quaternion)>(&Object::Internal_InstantiateSingle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "Internal_InstantiateSingle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: Object::Internal_InstantiateSingleWithParent
// Il2CppName: Internal_InstantiateSingleWithParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(UnityEngine::Object*, UnityEngine::Transform*, UnityEngine::Vector3, UnityEngine::Quaternion)>(&Object::Internal_InstantiateSingleWithParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "Internal_InstantiateSingleWithParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: Object::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(UnityEngine::Object*)>(&Object::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: Object::GetName
// Il2CppName: GetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(UnityEngine::Object*)>(&Object::GetName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "GetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>()});
  }
};
// Writing MetadataGetter for method: Object::SetName
// Il2CppName: SetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*, ::Il2CppString*)>(&Object::SetName)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "SetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Object::FindObjectFromInstanceID
// Il2CppName: FindObjectFromInstanceID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(int)>(&Object::FindObjectFromInstanceID)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "FindObjectFromInstanceID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Object::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Object::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Object::Internal_InstantiateSingle_Injected
// Il2CppName: Internal_InstantiateSingle_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(UnityEngine::Object*, UnityEngine::Vector3&, UnityEngine::Quaternion&)>(&Object::Internal_InstantiateSingle_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "Internal_InstantiateSingle_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Object::Internal_InstantiateSingleWithParent_Injected
// Il2CppName: Internal_InstantiateSingleWithParent_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(UnityEngine::Object*, UnityEngine::Transform*, UnityEngine::Vector3&, UnityEngine::Quaternion&)>(&Object::Internal_InstantiateSingleWithParent_Injected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "Internal_InstantiateSingleWithParent_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: Object::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Object::*)()>(&Object::GetHashCode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Object::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Object::*)(::Il2CppObject*)>(&Object::Equals)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Object::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (Object::*)()>(&Object::ToString)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Object::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Object::*)()>(&Object::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Object::*)()>(&Object::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Object::operator ==
// Il2CppName: op_Equality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Object*, UnityEngine::Object&)>(&Object::operator ==)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "op_Equality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object&>()});
  }
};
// Writing MetadataGetter for method: Object::operator !=
// Il2CppName: op_Inequality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Object*, UnityEngine::Object&)>(&Object::operator !=)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Object*), "op_Inequality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Object*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Object&>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UnitySynchronizationContext
#include "UnityEngine/UnitySynchronizationContext.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.UnitySynchronizationContext.Exec
void UnityEngine::UnitySynchronizationContext::Exec() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnitySynchronizationContext::Exec");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Exec", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.UnitySynchronizationContext.HasPendingTasks
bool UnityEngine::UnitySynchronizationContext::HasPendingTasks() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnitySynchronizationContext::HasPendingTasks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HasPendingTasks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.UnitySynchronizationContext.InitializeSynchronizationContext
void UnityEngine::UnitySynchronizationContext::InitializeSynchronizationContext() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnitySynchronizationContext::InitializeSynchronizationContext");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "UnitySynchronizationContext", "InitializeSynchronizationContext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.UnitySynchronizationContext.ExecuteTasks
void UnityEngine::UnitySynchronizationContext::ExecuteTasks() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnitySynchronizationContext::ExecuteTasks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "UnitySynchronizationContext", "ExecuteTasks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.UnitySynchronizationContext.ExecutePendingTasks
bool UnityEngine::UnitySynchronizationContext::ExecutePendingTasks(int64_t millisecondsTimeout) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnitySynchronizationContext::ExecutePendingTasks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "UnitySynchronizationContext", "ExecutePendingTasks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(millisecondsTimeout)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, millisecondsTimeout);
}
// Autogenerated method: UnityEngine.UnitySynchronizationContext.Send
void UnityEngine::UnitySynchronizationContext::Send(System::Threading::SendOrPostCallback* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnitySynchronizationContext::Send");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callback, state);
}
// Autogenerated method: UnityEngine.UnitySynchronizationContext.OperationStarted
void UnityEngine::UnitySynchronizationContext::OperationStarted() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnitySynchronizationContext::OperationStarted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OperationStarted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.UnitySynchronizationContext.OperationCompleted
void UnityEngine::UnitySynchronizationContext::OperationCompleted() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnitySynchronizationContext::OperationCompleted");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OperationCompleted", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.UnitySynchronizationContext.Post
void UnityEngine::UnitySynchronizationContext::Post(System::Threading::SendOrPostCallback* callback, ::Il2CppObject* state) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnitySynchronizationContext::Post");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Post", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(state)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, callback, state);
}
// Autogenerated method: UnityEngine.UnitySynchronizationContext.CreateCopy
System::Threading::SynchronizationContext* UnityEngine::UnitySynchronizationContext::CreateCopy() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnitySynchronizationContext::CreateCopy");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateCopy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::SynchronizationContext*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: UnitySynchronizationContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnitySynchronizationContext::*)(int)>(&UnitySynchronizationContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnitySynchronizationContext::*)(int)>(&UnitySynchronizationContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnitySynchronizationContext::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnitySynchronizationContext::*)(System::Collections::Generic::List_1<UnityEngine::UnitySynchronizationContext::WorkRequest>*, int)>(&UnitySynchronizationContext::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::UnitySynchronizationContext::WorkRequest>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnitySynchronizationContext::*)(System::Collections::Generic::List_1<UnityEngine::UnitySynchronizationContext::WorkRequest>*, int)>(&UnitySynchronizationContext::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<UnityEngine::UnitySynchronizationContext::WorkRequest>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: UnitySynchronizationContext::Exec
// Il2CppName: Exec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnitySynchronizationContext::*)()>(&UnitySynchronizationContext::Exec)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext*), "Exec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnitySynchronizationContext::HasPendingTasks
// Il2CppName: HasPendingTasks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnitySynchronizationContext::*)()>(&UnitySynchronizationContext::HasPendingTasks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext*), "HasPendingTasks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnitySynchronizationContext::InitializeSynchronizationContext
// Il2CppName: InitializeSynchronizationContext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnitySynchronizationContext::InitializeSynchronizationContext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext*), "InitializeSynchronizationContext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnitySynchronizationContext::ExecuteTasks
// Il2CppName: ExecuteTasks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnitySynchronizationContext::ExecuteTasks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext*), "ExecuteTasks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnitySynchronizationContext::ExecutePendingTasks
// Il2CppName: ExecutePendingTasks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int64_t)>(&UnitySynchronizationContext::ExecutePendingTasks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext*), "ExecutePendingTasks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int64_t>()});
  }
};
// Writing MetadataGetter for method: UnitySynchronizationContext::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnitySynchronizationContext::*)(System::Threading::SendOrPostCallback*, ::Il2CppObject*)>(&UnitySynchronizationContext::Send)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::SendOrPostCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: UnitySynchronizationContext::OperationStarted
// Il2CppName: OperationStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnitySynchronizationContext::*)()>(&UnitySynchronizationContext::OperationStarted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext*), "OperationStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnitySynchronizationContext::OperationCompleted
// Il2CppName: OperationCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnitySynchronizationContext::*)()>(&UnitySynchronizationContext::OperationCompleted)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext*), "OperationCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnitySynchronizationContext::Post
// Il2CppName: Post
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnitySynchronizationContext::*)(System::Threading::SendOrPostCallback*, ::Il2CppObject*)>(&UnitySynchronizationContext::Post)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext*), "Post", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::SendOrPostCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: UnitySynchronizationContext::CreateCopy
// Il2CppName: CreateCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::SynchronizationContext* (UnitySynchronizationContext::*)()>(&UnitySynchronizationContext::CreateCopy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext*), "CreateCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UnitySynchronizationContext/WorkRequest
#include "UnityEngine/UnitySynchronizationContext.hpp"
// Including type: System.Threading.SendOrPostCallback
#include "System/Threading/SendOrPostCallback.hpp"
// Including type: System.Threading.ManualResetEvent
#include "System/Threading/ManualResetEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.UnitySynchronizationContext/WorkRequest.Invoke
void UnityEngine::UnitySynchronizationContext::WorkRequest::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UnitySynchronizationContext::WorkRequest::Invoke");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Writing MetadataGetter for method: UnitySynchronizationContext::WorkRequest::WorkRequest
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnitySynchronizationContext::WorkRequest::*)(System::Threading::SendOrPostCallback*, ::Il2CppObject*, System::Threading::ManualResetEvent*)>(&UnitySynchronizationContext::WorkRequest::WorkRequest<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext::WorkRequest), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::SendOrPostCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::ManualResetEvent*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnitySynchronizationContext::WorkRequest::*)(System::Threading::SendOrPostCallback*, ::Il2CppObject*, System::Threading::ManualResetEvent*)>(&UnitySynchronizationContext::WorkRequest::WorkRequest<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext::WorkRequest), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Threading::SendOrPostCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::ManualResetEvent*>()});
  }
};
// Writing MetadataGetter for method: UnitySynchronizationContext::WorkRequest::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnitySynchronizationContext::WorkRequest::*)()>(&UnitySynchronizationContext::WorkRequest::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnitySynchronizationContext::WorkRequest), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.WaitForEndOfFrame
#include "UnityEngine/WaitForEndOfFrame.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: WaitForEndOfFrame::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitForEndOfFrame::*)()>(&WaitForEndOfFrame::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitForEndOfFrame*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitForEndOfFrame::*)()>(&WaitForEndOfFrame::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitForEndOfFrame*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.WaitForSeconds
#include "UnityEngine/WaitForSeconds.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: WaitForSeconds::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitForSeconds::*)(float)>(&WaitForSeconds::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitForSeconds*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitForSeconds::*)(float)>(&WaitForSeconds::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitForSeconds*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.WaitForSecondsRealtime
#include "UnityEngine/WaitForSecondsRealtime.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.WaitForSecondsRealtime.get_waitTime
float UnityEngine::WaitForSecondsRealtime::get_waitTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WaitForSecondsRealtime::get_waitTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_waitTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.WaitForSecondsRealtime.set_waitTime
void UnityEngine::WaitForSecondsRealtime::set_waitTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WaitForSecondsRealtime::set_waitTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_waitTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.WaitForSecondsRealtime.get_keepWaiting
bool UnityEngine::WaitForSecondsRealtime::get_keepWaiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WaitForSecondsRealtime::get_keepWaiting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_keepWaiting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: WaitForSecondsRealtime::get_waitTime
// Il2CppName: get_waitTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (WaitForSecondsRealtime::*)()>(&WaitForSecondsRealtime::get_waitTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitForSecondsRealtime*), "get_waitTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: WaitForSecondsRealtime::set_waitTime
// Il2CppName: set_waitTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitForSecondsRealtime::*)(float)>(&WaitForSecondsRealtime::set_waitTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitForSecondsRealtime*), "set_waitTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: WaitForSecondsRealtime::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitForSecondsRealtime::*)(float)>(&WaitForSecondsRealtime::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitForSecondsRealtime*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitForSecondsRealtime::*)(float)>(&WaitForSecondsRealtime::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitForSecondsRealtime*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: WaitForSecondsRealtime::get_keepWaiting
// Il2CppName: get_keepWaiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WaitForSecondsRealtime::*)()>(&WaitForSecondsRealtime::get_keepWaiting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitForSecondsRealtime*), "get_keepWaiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.WaitUntil
#include "UnityEngine/WaitUntil.hpp"
// Including type: System.Func`1
#include "System/Func_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.WaitUntil.get_keepWaiting
bool UnityEngine::WaitUntil::get_keepWaiting() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::WaitUntil::get_keepWaiting");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_keepWaiting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: WaitUntil::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitUntil::*)(System::Func_1<bool>*)>(&WaitUntil::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitUntil*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_1<bool>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (WaitUntil::*)(System::Func_1<bool>*)>(&WaitUntil::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitUntil*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Func_1<bool>*>()});
  }
};
// Writing MetadataGetter for method: WaitUntil::get_keepWaiting
// Il2CppName: get_keepWaiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (WaitUntil::*)()>(&WaitUntil::get_keepWaiting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(WaitUntil*), "get_keepWaiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.YieldInstruction
#include "UnityEngine/YieldInstruction.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: YieldInstruction::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (YieldInstruction::*)()>(&YieldInstruction::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(YieldInstruction*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (YieldInstruction::*)()>(&YieldInstruction::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(YieldInstruction*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.SerializeField
#include "UnityEngine/SerializeField.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SerializeField::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SerializeField::*)()>(&SerializeField::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SerializeField*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SerializeField::*)()>(&SerializeField::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SerializeField*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
void UnityEngine::ISerializationCallbackReceiver::OnBeforeSerialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ISerializationCallbackReceiver::OnBeforeSerialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnBeforeSerialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
void UnityEngine::ISerializationCallbackReceiver::OnAfterDeserialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ISerializationCallbackReceiver::OnAfterDeserialize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAfterDeserialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ISerializationCallbackReceiver::OnBeforeSerialize
// Il2CppName: OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ISerializationCallbackReceiver::*)()>(&ISerializationCallbackReceiver::OnBeforeSerialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ISerializationCallbackReceiver*), "OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ISerializationCallbackReceiver::OnAfterDeserialize
// Il2CppName: OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ISerializationCallbackReceiver::*)()>(&ISerializationCallbackReceiver::OnAfterDeserialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ISerializationCallbackReceiver*), "OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.DisableBatchingType
#include "UnityEngine/DisableBatchingType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.DisableBatchingType False
UnityEngine::DisableBatchingType UnityEngine::DisableBatchingType::_get_False() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::DisableBatchingType::_get_False");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::DisableBatchingType>("UnityEngine", "DisableBatchingType", "False"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.DisableBatchingType False
void UnityEngine::DisableBatchingType::_set_False(UnityEngine::DisableBatchingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::DisableBatchingType::_set_False");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "DisableBatchingType", "False", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.DisableBatchingType True
UnityEngine::DisableBatchingType UnityEngine::DisableBatchingType::_get_True() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::DisableBatchingType::_get_True");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::DisableBatchingType>("UnityEngine", "DisableBatchingType", "True"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.DisableBatchingType True
void UnityEngine::DisableBatchingType::_set_True(UnityEngine::DisableBatchingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::DisableBatchingType::_set_True");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "DisableBatchingType", "True", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.DisableBatchingType WhenLODFading
UnityEngine::DisableBatchingType UnityEngine::DisableBatchingType::_get_WhenLODFading() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::DisableBatchingType::_get_WhenLODFading");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::DisableBatchingType>("UnityEngine", "DisableBatchingType", "WhenLODFading"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.DisableBatchingType WhenLODFading
void UnityEngine::DisableBatchingType::_set_WhenLODFading(UnityEngine::DisableBatchingType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::DisableBatchingType::_set_WhenLODFading");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "DisableBatchingType", "WhenLODFading", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ComputeShader
#include "UnityEngine/ComputeShader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.ComputeShader.FindKernel
int UnityEngine::ComputeShader::FindKernel(::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ComputeShader::FindKernel");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FindKernel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, name);
}
// Writing MetadataGetter for method: ComputeShader::FindKernel
// Il2CppName: FindKernel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (ComputeShader::*)(::Il2CppString*)>(&ComputeShader::FindKernel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ComputeShader*), "FindKernel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.LowerResBlitTexture
#include "UnityEngine/LowerResBlitTexture.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.LowerResBlitTexture.LowerResBlitTextureDontStripMe
void UnityEngine::LowerResBlitTexture::LowerResBlitTextureDontStripMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::LowerResBlitTexture::LowerResBlitTextureDontStripMe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LowerResBlitTextureDontStripMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LowerResBlitTexture::LowerResBlitTextureDontStripMe
// Il2CppName: LowerResBlitTextureDontStripMe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LowerResBlitTexture::*)()>(&LowerResBlitTexture::LowerResBlitTextureDontStripMe)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LowerResBlitTexture*), "LowerResBlitTextureDontStripMe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.PreloadData
#include "UnityEngine/PreloadData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.PreloadData.PreloadDataDontStripMe
void UnityEngine::PreloadData::PreloadDataDontStripMe() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::PreloadData::PreloadDataDontStripMe");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PreloadDataDontStripMe", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PreloadData::PreloadDataDontStripMe
// Il2CppName: PreloadDataDontStripMe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PreloadData::*)()>(&PreloadData::PreloadDataDontStripMe)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PreloadData*), "PreloadDataDontStripMe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.OperatingSystemFamily
#include "UnityEngine/OperatingSystemFamily.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.OperatingSystemFamily Other
UnityEngine::OperatingSystemFamily UnityEngine::OperatingSystemFamily::_get_Other() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::OperatingSystemFamily::_get_Other");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::OperatingSystemFamily>("UnityEngine", "OperatingSystemFamily", "Other"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.OperatingSystemFamily Other
void UnityEngine::OperatingSystemFamily::_set_Other(UnityEngine::OperatingSystemFamily value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::OperatingSystemFamily::_set_Other");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "OperatingSystemFamily", "Other", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.OperatingSystemFamily MacOSX
UnityEngine::OperatingSystemFamily UnityEngine::OperatingSystemFamily::_get_MacOSX() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::OperatingSystemFamily::_get_MacOSX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::OperatingSystemFamily>("UnityEngine", "OperatingSystemFamily", "MacOSX"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.OperatingSystemFamily MacOSX
void UnityEngine::OperatingSystemFamily::_set_MacOSX(UnityEngine::OperatingSystemFamily value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::OperatingSystemFamily::_set_MacOSX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "OperatingSystemFamily", "MacOSX", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.OperatingSystemFamily Windows
UnityEngine::OperatingSystemFamily UnityEngine::OperatingSystemFamily::_get_Windows() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::OperatingSystemFamily::_get_Windows");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::OperatingSystemFamily>("UnityEngine", "OperatingSystemFamily", "Windows"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.OperatingSystemFamily Windows
void UnityEngine::OperatingSystemFamily::_set_Windows(UnityEngine::OperatingSystemFamily value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::OperatingSystemFamily::_set_Windows");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "OperatingSystemFamily", "Windows", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.OperatingSystemFamily Linux
UnityEngine::OperatingSystemFamily UnityEngine::OperatingSystemFamily::_get_Linux() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::OperatingSystemFamily::_get_Linux");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::OperatingSystemFamily>("UnityEngine", "OperatingSystemFamily", "Linux"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.OperatingSystemFamily Linux
void UnityEngine::OperatingSystemFamily::_set_Linux(UnityEngine::OperatingSystemFamily value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::OperatingSystemFamily::_set_Linux");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "OperatingSystemFamily", "Linux", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.DeviceType
#include "UnityEngine/DeviceType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.DeviceType Unknown
UnityEngine::DeviceType UnityEngine::DeviceType::_get_Unknown() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::DeviceType::_get_Unknown");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::DeviceType>("UnityEngine", "DeviceType", "Unknown"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.DeviceType Unknown
void UnityEngine::DeviceType::_set_Unknown(UnityEngine::DeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::DeviceType::_set_Unknown");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "DeviceType", "Unknown", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.DeviceType Handheld
UnityEngine::DeviceType UnityEngine::DeviceType::_get_Handheld() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::DeviceType::_get_Handheld");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::DeviceType>("UnityEngine", "DeviceType", "Handheld"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.DeviceType Handheld
void UnityEngine::DeviceType::_set_Handheld(UnityEngine::DeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::DeviceType::_set_Handheld");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "DeviceType", "Handheld", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.DeviceType Console
UnityEngine::DeviceType UnityEngine::DeviceType::_get_Console() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::DeviceType::_get_Console");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::DeviceType>("UnityEngine", "DeviceType", "Console"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.DeviceType Console
void UnityEngine::DeviceType::_set_Console(UnityEngine::DeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::DeviceType::_set_Console");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "DeviceType", "Console", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.DeviceType Desktop
UnityEngine::DeviceType UnityEngine::DeviceType::_get_Desktop() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::DeviceType::_get_Desktop");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::DeviceType>("UnityEngine", "DeviceType", "Desktop"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.DeviceType Desktop
void UnityEngine::DeviceType::_set_Desktop(UnityEngine::DeviceType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::DeviceType::_set_Desktop");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "DeviceType", "Desktop", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.SystemInfo
#include "UnityEngine/SystemInfo.hpp"
// Including type: UnityEngine.OperatingSystemFamily
#include "UnityEngine/OperatingSystemFamily.hpp"
// Including type: UnityEngine.DeviceType
#include "UnityEngine/DeviceType.hpp"
// Including type: UnityEngine.Rendering.GraphicsDeviceType
#include "UnityEngine/Rendering/GraphicsDeviceType.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Including type: UnityEngine.RenderTextureFormat
#include "UnityEngine/RenderTextureFormat.hpp"
// Including type: UnityEngine.TextureFormat
#include "UnityEngine/TextureFormat.hpp"
// Including type: UnityEngine.Experimental.Rendering.GraphicsFormat
#include "UnityEngine/Experimental/Rendering/GraphicsFormat.hpp"
// Including type: UnityEngine.Experimental.Rendering.FormatUsage
#include "UnityEngine/Experimental/Rendering/FormatUsage.hpp"
// Including type: UnityEngine.Experimental.Rendering.DefaultFormat
#include "UnityEngine/Experimental/Rendering/DefaultFormat.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.SystemInfo.get_operatingSystemFamily
UnityEngine::OperatingSystemFamily UnityEngine::SystemInfo::get_operatingSystemFamily() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::get_operatingSystemFamily");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "get_operatingSystemFamily", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::OperatingSystemFamily, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.SystemInfo.get_deviceType
UnityEngine::DeviceType UnityEngine::SystemInfo::get_deviceType() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::get_deviceType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "get_deviceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::DeviceType, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.SystemInfo.get_graphicsDeviceType
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::SystemInfo::get_graphicsDeviceType() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::get_graphicsDeviceType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "get_graphicsDeviceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::GraphicsDeviceType, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.SystemInfo.get_graphicsDeviceVersion
::Il2CppString* UnityEngine::SystemInfo::get_graphicsDeviceVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::get_graphicsDeviceVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "get_graphicsDeviceVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.SystemInfo.get_supportsInstancing
bool UnityEngine::SystemInfo::get_supportsInstancing() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::get_supportsInstancing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "get_supportsInstancing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.SystemInfo.get_usesReversedZBuffer
bool UnityEngine::SystemInfo::get_usesReversedZBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::get_usesReversedZBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "get_usesReversedZBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.SystemInfo.IsValidEnumValue
bool UnityEngine::SystemInfo::IsValidEnumValue(System::Enum* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::IsValidEnumValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "IsValidEnumValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.SystemInfo.SupportsRenderTextureFormat
bool UnityEngine::SystemInfo::SupportsRenderTextureFormat(UnityEngine::RenderTextureFormat format) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::SupportsRenderTextureFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "SupportsRenderTextureFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, format);
}
// Autogenerated method: UnityEngine.SystemInfo.SupportsTextureFormat
bool UnityEngine::SystemInfo::SupportsTextureFormat(UnityEngine::TextureFormat format) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::SupportsTextureFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "SupportsTextureFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, format);
}
// Autogenerated method: UnityEngine.SystemInfo.GetOperatingSystemFamily
UnityEngine::OperatingSystemFamily UnityEngine::SystemInfo::GetOperatingSystemFamily() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::GetOperatingSystemFamily");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "GetOperatingSystemFamily", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::OperatingSystemFamily, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.SystemInfo.GetDeviceType
UnityEngine::DeviceType UnityEngine::SystemInfo::GetDeviceType() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::GetDeviceType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "GetDeviceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::DeviceType, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.SystemInfo.GetGraphicsDeviceType
UnityEngine::Rendering::GraphicsDeviceType UnityEngine::SystemInfo::GetGraphicsDeviceType() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::GetGraphicsDeviceType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "GetGraphicsDeviceType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Rendering::GraphicsDeviceType, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.SystemInfo.GetGraphicsDeviceVersion
::Il2CppString* UnityEngine::SystemInfo::GetGraphicsDeviceVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::GetGraphicsDeviceVersion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "GetGraphicsDeviceVersion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.SystemInfo.SupportsInstancing
bool UnityEngine::SystemInfo::SupportsInstancing() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::SupportsInstancing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "SupportsInstancing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.SystemInfo.UsesReversedZBuffer
bool UnityEngine::SystemInfo::UsesReversedZBuffer() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::UsesReversedZBuffer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "UsesReversedZBuffer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.SystemInfo.HasRenderTextureNative
bool UnityEngine::SystemInfo::HasRenderTextureNative(UnityEngine::RenderTextureFormat format) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::HasRenderTextureNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "HasRenderTextureNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, format);
}
// Autogenerated method: UnityEngine.SystemInfo.SupportsTextureFormatNative
bool UnityEngine::SystemInfo::SupportsTextureFormatNative(UnityEngine::TextureFormat format) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::SupportsTextureFormatNative");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "SupportsTextureFormatNative", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, format);
}
// Autogenerated method: UnityEngine.SystemInfo.IsFormatSupported
bool UnityEngine::SystemInfo::IsFormatSupported(UnityEngine::Experimental::Rendering::GraphicsFormat format, UnityEngine::Experimental::Rendering::FormatUsage usage) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::IsFormatSupported");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "IsFormatSupported", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(usage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, format, usage);
}
// Autogenerated method: UnityEngine.SystemInfo.GetCompatibleFormat
UnityEngine::Experimental::Rendering::GraphicsFormat UnityEngine::SystemInfo::GetCompatibleFormat(UnityEngine::Experimental::Rendering::GraphicsFormat format, UnityEngine::Experimental::Rendering::FormatUsage usage) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::GetCompatibleFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "GetCompatibleFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format), ::il2cpp_utils::ExtractType(usage)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Experimental::Rendering::GraphicsFormat, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, format, usage);
}
// Autogenerated method: UnityEngine.SystemInfo.GetGraphicsFormat
UnityEngine::Experimental::Rendering::GraphicsFormat UnityEngine::SystemInfo::GetGraphicsFormat(UnityEngine::Experimental::Rendering::DefaultFormat format) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemInfo::GetGraphicsFormat");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemInfo", "GetGraphicsFormat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(format)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Experimental::Rendering::GraphicsFormat, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, format);
}
// Writing MetadataGetter for method: SystemInfo::get_operatingSystemFamily
// Il2CppName: get_operatingSystemFamily
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::OperatingSystemFamily (*)()>(&SystemInfo::get_operatingSystemFamily)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "get_operatingSystemFamily", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SystemInfo::get_deviceType
// Il2CppName: get_deviceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::DeviceType (*)()>(&SystemInfo::get_deviceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "get_deviceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SystemInfo::get_graphicsDeviceType
// Il2CppName: get_graphicsDeviceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::GraphicsDeviceType (*)()>(&SystemInfo::get_graphicsDeviceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "get_graphicsDeviceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SystemInfo::get_graphicsDeviceVersion
// Il2CppName: get_graphicsDeviceVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&SystemInfo::get_graphicsDeviceVersion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "get_graphicsDeviceVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SystemInfo::get_supportsInstancing
// Il2CppName: get_supportsInstancing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&SystemInfo::get_supportsInstancing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "get_supportsInstancing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SystemInfo::get_usesReversedZBuffer
// Il2CppName: get_usesReversedZBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&SystemInfo::get_usesReversedZBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "get_usesReversedZBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SystemInfo::IsValidEnumValue
// Il2CppName: IsValidEnumValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(System::Enum*)>(&SystemInfo::IsValidEnumValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "IsValidEnumValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Enum*>()});
  }
};
// Writing MetadataGetter for method: SystemInfo::SupportsRenderTextureFormat
// Il2CppName: SupportsRenderTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::RenderTextureFormat)>(&SystemInfo::SupportsRenderTextureFormat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "SupportsRenderTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTextureFormat>()});
  }
};
// Writing MetadataGetter for method: SystemInfo::SupportsTextureFormat
// Il2CppName: SupportsTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::TextureFormat)>(&SystemInfo::SupportsTextureFormat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "SupportsTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextureFormat>()});
  }
};
// Writing MetadataGetter for method: SystemInfo::GetOperatingSystemFamily
// Il2CppName: GetOperatingSystemFamily
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::OperatingSystemFamily (*)()>(&SystemInfo::GetOperatingSystemFamily)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "GetOperatingSystemFamily", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SystemInfo::GetDeviceType
// Il2CppName: GetDeviceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::DeviceType (*)()>(&SystemInfo::GetDeviceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "GetDeviceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SystemInfo::GetGraphicsDeviceType
// Il2CppName: GetGraphicsDeviceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Rendering::GraphicsDeviceType (*)()>(&SystemInfo::GetGraphicsDeviceType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "GetGraphicsDeviceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SystemInfo::GetGraphicsDeviceVersion
// Il2CppName: GetGraphicsDeviceVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&SystemInfo::GetGraphicsDeviceVersion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "GetGraphicsDeviceVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SystemInfo::SupportsInstancing
// Il2CppName: SupportsInstancing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&SystemInfo::SupportsInstancing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "SupportsInstancing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SystemInfo::UsesReversedZBuffer
// Il2CppName: UsesReversedZBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&SystemInfo::UsesReversedZBuffer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "UsesReversedZBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SystemInfo::HasRenderTextureNative
// Il2CppName: HasRenderTextureNative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::RenderTextureFormat)>(&SystemInfo::HasRenderTextureNative)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "HasRenderTextureNative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RenderTextureFormat>()});
  }
};
// Writing MetadataGetter for method: SystemInfo::SupportsTextureFormatNative
// Il2CppName: SupportsTextureFormatNative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::TextureFormat)>(&SystemInfo::SupportsTextureFormatNative)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "SupportsTextureFormatNative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::TextureFormat>()});
  }
};
// Writing MetadataGetter for method: SystemInfo::IsFormatSupported
// Il2CppName: IsFormatSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Experimental::Rendering::GraphicsFormat, UnityEngine::Experimental::Rendering::FormatUsage)>(&SystemInfo::IsFormatSupported)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "IsFormatSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::Rendering::GraphicsFormat>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::Rendering::FormatUsage>()});
  }
};
// Writing MetadataGetter for method: SystemInfo::GetCompatibleFormat
// Il2CppName: GetCompatibleFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Experimental::Rendering::GraphicsFormat (*)(UnityEngine::Experimental::Rendering::GraphicsFormat, UnityEngine::Experimental::Rendering::FormatUsage)>(&SystemInfo::GetCompatibleFormat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "GetCompatibleFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::Rendering::GraphicsFormat>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::Rendering::FormatUsage>()});
  }
};
// Writing MetadataGetter for method: SystemInfo::GetGraphicsFormat
// Il2CppName: GetGraphicsFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Experimental::Rendering::GraphicsFormat (*)(UnityEngine::Experimental::Rendering::DefaultFormat)>(&SystemInfo::GetGraphicsFormat)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemInfo*), "GetGraphicsFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Experimental::Rendering::DefaultFormat>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.SystemClock
#include "UnityEngine/SystemClock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.DateTime s_Epoch
System::DateTime UnityEngine::SystemClock::_get_s_Epoch() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemClock::_get_s_Epoch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::DateTime>("UnityEngine", "SystemClock", "s_Epoch"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.DateTime s_Epoch
void UnityEngine::SystemClock::_set_s_Epoch(System::DateTime value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemClock::_set_s_Epoch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "SystemClock", "s_Epoch", value));
}
// Autogenerated method: UnityEngine.SystemClock.get_now
System::DateTime UnityEngine::SystemClock::get_now() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemClock::get_now");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemClock", "get_now", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::DateTime, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.SystemClock..cctor
void UnityEngine::SystemClock::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::SystemClock::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "SystemClock", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: SystemClock::get_now
// Il2CppName: get_now
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::DateTime (*)()>(&SystemClock::get_now)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemClock*), "get_now", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SystemClock::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&SystemClock::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SystemClock*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Time
#include "UnityEngine/Time.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Time.get_time
float UnityEngine::Time::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::get_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Time.get_timeSinceLevelLoad
float UnityEngine::Time::get_timeSinceLevelLoad() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::get_timeSinceLevelLoad");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "get_timeSinceLevelLoad", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Time.get_deltaTime
float UnityEngine::Time::get_deltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::get_deltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "get_deltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Time.get_unscaledTime
float UnityEngine::Time::get_unscaledTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::get_unscaledTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "get_unscaledTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Time.get_unscaledDeltaTime
float UnityEngine::Time::get_unscaledDeltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::get_unscaledDeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "get_unscaledDeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Time.get_fixedDeltaTime
float UnityEngine::Time::get_fixedDeltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::get_fixedDeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "get_fixedDeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Time.set_fixedDeltaTime
void UnityEngine::Time::set_fixedDeltaTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::set_fixedDeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "set_fixedDeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Time.get_maximumDeltaTime
float UnityEngine::Time::get_maximumDeltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::get_maximumDeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "get_maximumDeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Time.get_smoothDeltaTime
float UnityEngine::Time::get_smoothDeltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::get_smoothDeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "get_smoothDeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Time.get_timeScale
float UnityEngine::Time::get_timeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::get_timeScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "get_timeScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Time.set_timeScale
void UnityEngine::Time::set_timeScale(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::set_timeScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "set_timeScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Time.get_frameCount
int UnityEngine::Time::get_frameCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::get_frameCount");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "get_frameCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Time.get_realtimeSinceStartup
float UnityEngine::Time::get_realtimeSinceStartup() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::get_realtimeSinceStartup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "get_realtimeSinceStartup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Time.get_captureDeltaTime
float UnityEngine::Time::get_captureDeltaTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::get_captureDeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "get_captureDeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Time.set_captureDeltaTime
void UnityEngine::Time::set_captureDeltaTime(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::set_captureDeltaTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "set_captureDeltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Autogenerated method: UnityEngine.Time.get_captureFramerate
int UnityEngine::Time::get_captureFramerate() {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::get_captureFramerate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "get_captureFramerate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: UnityEngine.Time.set_captureFramerate
void UnityEngine::Time::set_captureFramerate(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Time::set_captureFramerate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine", "Time", "set_captureFramerate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, value);
}
// Writing MetadataGetter for method: Time::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Time::get_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Time::get_timeSinceLevelLoad
// Il2CppName: get_timeSinceLevelLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Time::get_timeSinceLevelLoad)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "get_timeSinceLevelLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Time::get_deltaTime
// Il2CppName: get_deltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Time::get_deltaTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "get_deltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Time::get_unscaledTime
// Il2CppName: get_unscaledTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Time::get_unscaledTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "get_unscaledTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Time::get_unscaledDeltaTime
// Il2CppName: get_unscaledDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Time::get_unscaledDeltaTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "get_unscaledDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Time::get_fixedDeltaTime
// Il2CppName: get_fixedDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Time::get_fixedDeltaTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "get_fixedDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Time::set_fixedDeltaTime
// Il2CppName: set_fixedDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&Time::set_fixedDeltaTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "set_fixedDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Time::get_maximumDeltaTime
// Il2CppName: get_maximumDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Time::get_maximumDeltaTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "get_maximumDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Time::get_smoothDeltaTime
// Il2CppName: get_smoothDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Time::get_smoothDeltaTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "get_smoothDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Time::get_timeScale
// Il2CppName: get_timeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Time::get_timeScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "get_timeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Time::set_timeScale
// Il2CppName: set_timeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&Time::set_timeScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "set_timeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Time::get_frameCount
// Il2CppName: get_frameCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Time::get_frameCount)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "get_frameCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Time::get_realtimeSinceStartup
// Il2CppName: get_realtimeSinceStartup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Time::get_realtimeSinceStartup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "get_realtimeSinceStartup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Time::get_captureDeltaTime
// Il2CppName: get_captureDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&Time::get_captureDeltaTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "get_captureDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Time::set_captureDeltaTime
// Il2CppName: set_captureDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&Time::set_captureDeltaTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "set_captureDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Time::get_captureFramerate
// Il2CppName: get_captureFramerate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&Time::get_captureFramerate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "get_captureFramerate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Time::set_captureFramerate
// Il2CppName: set_captureFramerate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&Time::set_captureFramerate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Time*), "set_captureFramerate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
