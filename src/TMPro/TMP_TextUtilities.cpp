// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_TextUtilities
#include "TMPro/TMP_TextUtilities.hpp"
// Including type: TMPro.TMP_TextUtilities/LineSegment
#include "TMPro/TMP_TextUtilities_LineSegment.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
// Including type: UnityEngine.Camera
#include "UnityEngine/Camera.hpp"
// Including type: TMPro.CaretPosition
#include "TMPro/CaretPosition.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private UnityEngine.Vector3[] m_rectWorldCorners
::Array<UnityEngine::Vector3>* TMPro::TMP_TextUtilities::_get_m_rectWorldCorners() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Array<UnityEngine::Vector3>*>("TMPro", "TMP_TextUtilities", "m_rectWorldCorners"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.Vector3[] m_rectWorldCorners
void TMPro::TMP_TextUtilities::_set_m_rectWorldCorners(::Array<UnityEngine::Vector3>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextUtilities", "m_rectWorldCorners", value));
}
// Autogenerated static field getter
// Get static field: static private System.String k_lookupStringL
::CsString* TMPro::TMP_TextUtilities::_get_k_lookupStringL() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::CsString*>("TMPro", "TMP_TextUtilities", "k_lookupStringL"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_lookupStringL
void TMPro::TMP_TextUtilities::_set_k_lookupStringL(::CsString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextUtilities", "k_lookupStringL", value));
}
// Autogenerated static field getter
// Get static field: static private System.String k_lookupStringU
::CsString* TMPro::TMP_TextUtilities::_get_k_lookupStringU() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::CsString*>("TMPro", "TMP_TextUtilities", "k_lookupStringU"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_lookupStringU
void TMPro::TMP_TextUtilities::_set_k_lookupStringU(::CsString* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_TextUtilities", "k_lookupStringU", value));
}
// Autogenerated method: TMPro.TMP_TextUtilities.GetCursorIndexFromPosition
int TMPro::TMP_TextUtilities::GetCursorIndexFromPosition(TMPro::TMP_Text* textComponent, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("TMPro", "TMP_TextUtilities", "GetCursorIndexFromPosition", textComponent, position, camera));
}
// Autogenerated method: TMPro.TMP_TextUtilities.GetCursorIndexFromPosition
int TMPro::TMP_TextUtilities::GetCursorIndexFromPosition(TMPro::TMP_Text* textComponent, UnityEngine::Vector3 position, UnityEngine::Camera* camera, TMPro::CaretPosition& cursor) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("TMPro", "TMP_TextUtilities", "GetCursorIndexFromPosition", textComponent, position, camera, cursor));
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindNearestLine
int TMPro::TMP_TextUtilities::FindNearestLine(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("TMPro", "TMP_TextUtilities", "FindNearestLine", text, position, camera));
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindNearestCharacterOnLine
int TMPro::TMP_TextUtilities::FindNearestCharacterOnLine(TMPro::TMP_Text* text, UnityEngine::Vector3 position, int line, UnityEngine::Camera* camera, bool visibleOnly) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("TMPro", "TMP_TextUtilities", "FindNearestCharacterOnLine", text, position, line, camera, visibleOnly));
}
// Autogenerated method: TMPro.TMP_TextUtilities.IsIntersectingRectTransform
bool TMPro::TMP_TextUtilities::IsIntersectingRectTransform(UnityEngine::RectTransform* rectTransform, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("TMPro", "TMP_TextUtilities", "IsIntersectingRectTransform", rectTransform, position, camera));
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindIntersectingCharacter
int TMPro::TMP_TextUtilities::FindIntersectingCharacter(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera, bool visibleOnly) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("TMPro", "TMP_TextUtilities", "FindIntersectingCharacter", text, position, camera, visibleOnly));
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindNearestCharacter
int TMPro::TMP_TextUtilities::FindNearestCharacter(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera, bool visibleOnly) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("TMPro", "TMP_TextUtilities", "FindNearestCharacter", text, position, camera, visibleOnly));
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindIntersectingWord
int TMPro::TMP_TextUtilities::FindIntersectingWord(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("TMPro", "TMP_TextUtilities", "FindIntersectingWord", text, position, camera));
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindNearestWord
int TMPro::TMP_TextUtilities::FindNearestWord(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("TMPro", "TMP_TextUtilities", "FindNearestWord", text, position, camera));
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindIntersectingLine
int TMPro::TMP_TextUtilities::FindIntersectingLine(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("TMPro", "TMP_TextUtilities", "FindIntersectingLine", text, position, camera));
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindIntersectingLink
int TMPro::TMP_TextUtilities::FindIntersectingLink(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("TMPro", "TMP_TextUtilities", "FindIntersectingLink", text, position, camera));
}
// Autogenerated method: TMPro.TMP_TextUtilities.FindNearestLink
int TMPro::TMP_TextUtilities::FindNearestLink(TMPro::TMP_Text* text, UnityEngine::Vector3 position, UnityEngine::Camera* camera) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("TMPro", "TMP_TextUtilities", "FindNearestLink", text, position, camera));
}
// Autogenerated method: TMPro.TMP_TextUtilities.PointIntersectRectangle
bool TMPro::TMP_TextUtilities::PointIntersectRectangle(UnityEngine::Vector3 m, UnityEngine::Vector3 a, UnityEngine::Vector3 b, UnityEngine::Vector3 c, UnityEngine::Vector3 d) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("TMPro", "TMP_TextUtilities", "PointIntersectRectangle", m, a, b, c, d));
}
// Autogenerated method: TMPro.TMP_TextUtilities.ScreenPointToWorldPointInRectangle
bool TMPro::TMP_TextUtilities::ScreenPointToWorldPointInRectangle(UnityEngine::Transform* transform, UnityEngine::Vector2 screenPoint, UnityEngine::Camera* cam, UnityEngine::Vector3& worldPoint) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("TMPro", "TMP_TextUtilities", "ScreenPointToWorldPointInRectangle", transform, screenPoint, cam, worldPoint));
}
// Autogenerated method: TMPro.TMP_TextUtilities.IntersectLinePlane
bool TMPro::TMP_TextUtilities::IntersectLinePlane(TMPro::TMP_TextUtilities::LineSegment line, UnityEngine::Vector3 point, UnityEngine::Vector3 normal, UnityEngine::Vector3& intersectingPoint) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("TMPro", "TMP_TextUtilities", "IntersectLinePlane", line, point, normal, intersectingPoint));
}
// Autogenerated method: TMPro.TMP_TextUtilities.DistanceToLine
float TMPro::TMP_TextUtilities::DistanceToLine(UnityEngine::Vector3 a, UnityEngine::Vector3 b, UnityEngine::Vector3 point) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("TMPro", "TMP_TextUtilities", "DistanceToLine", a, b, point));
}
// Autogenerated method: TMPro.TMP_TextUtilities.ToLowerFast
::Il2CppChar TMPro::TMP_TextUtilities::ToLowerFast(::Il2CppChar c) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppChar>("TMPro", "TMP_TextUtilities", "ToLowerFast", c));
}
// Autogenerated method: TMPro.TMP_TextUtilities.ToUpperFast
::Il2CppChar TMPro::TMP_TextUtilities::ToUpperFast(::Il2CppChar c) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppChar>("TMPro", "TMP_TextUtilities", "ToUpperFast", c));
}
// Autogenerated method: TMPro.TMP_TextUtilities.GetSimpleHashCode
int TMPro::TMP_TextUtilities::GetSimpleHashCode(::CsString* s) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("TMPro", "TMP_TextUtilities", "GetSimpleHashCode", s));
}
// Autogenerated method: TMPro.TMP_TextUtilities.GetSimpleHashCodeLowercase
uint TMPro::TMP_TextUtilities::GetSimpleHashCodeLowercase(::CsString* s) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<uint>("TMPro", "TMP_TextUtilities", "GetSimpleHashCodeLowercase", s));
}
// Autogenerated method: TMPro.TMP_TextUtilities.HexToInt
int TMPro::TMP_TextUtilities::HexToInt(::Il2CppChar hex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("TMPro", "TMP_TextUtilities", "HexToInt", hex));
}
// Autogenerated method: TMPro.TMP_TextUtilities.StringHexToInt
int TMPro::TMP_TextUtilities::StringHexToInt(::CsString* s) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>("TMPro", "TMP_TextUtilities", "StringHexToInt", s));
}
// Autogenerated method: TMPro.TMP_TextUtilities..cctor
void TMPro::TMP_TextUtilities::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("TMPro", "TMP_TextUtilities", ".cctor"));
}
