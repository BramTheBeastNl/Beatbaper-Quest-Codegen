// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
// Including type: TMPro.RichTextTagAttribute
#include "TMPro/RichTextTagAttribute.hpp"
// Including type: TMPro.TMP_Text/UnicodeChar
#include "TMPro/TMP_Text_UnicodeChar.hpp"
// Including type: TMPro.TMP_FontAsset
#include "TMPro/TMP_FontAsset.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: TMPro.TMP_ColorGradient
#include "TMPro/TMP_ColorGradient.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: TMPro.TMP_SpriteAsset
#include "TMPro/TMP_SpriteAsset.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: TMPro.TMP_TextInfo
#include "TMPro/TMP_TextInfo.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.RectTransform
#include "UnityEngine/RectTransform.hpp"
// Including type: UnityEngine.Mesh
#include "UnityEngine/Mesh.hpp"
// Including type: TMPro.TMP_SpriteAnimator
#include "TMPro/TMP_SpriteAnimator.hpp"
// Including type: UnityEngine.UI.LayoutElement
#include "UnityEngine/UI/LayoutElement.hpp"
// Including type: TMPro.TMP_CharacterInfo
#include "TMPro/TMP_CharacterInfo.hpp"
// Including type: TMPro.TMP_TextElement
#include "TMPro/TMP_TextElement.hpp"
// Including type: TMPro.TMP_Character
#include "TMPro/TMP_Character.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: TMPro.TMP_VertexDataUpdateFlags
#include "TMPro/TMP_VertexDataUpdateFlags.hpp"
// Including type: System.Text.StringBuilder
#include "System/Text/StringBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static protected UnityEngine.Color32 s_colorWhite
UnityEngine::Color32 TMPro::TMP_Text::_get_s_colorWhite() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Color32>("TMPro", "TMP_Text", "s_colorWhite"));
}
// Autogenerated static field setter
// Set static field: static protected UnityEngine.Color32 s_colorWhite
void TMPro::TMP_Text::_set_s_colorWhite(UnityEngine::Color32 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text", "s_colorWhite", value));
}
// Autogenerated static field getter
// Get static field: static protected UnityEngine.Vector2 k_LargePositiveVector2
UnityEngine::Vector2 TMPro::TMP_Text::_get_k_LargePositiveVector2() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("TMPro", "TMP_Text", "k_LargePositiveVector2"));
}
// Autogenerated static field setter
// Set static field: static protected UnityEngine.Vector2 k_LargePositiveVector2
void TMPro::TMP_Text::_set_k_LargePositiveVector2(UnityEngine::Vector2 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text", "k_LargePositiveVector2", value));
}
// Autogenerated static field getter
// Get static field: static protected UnityEngine.Vector2 k_LargeNegativeVector2
UnityEngine::Vector2 TMPro::TMP_Text::_get_k_LargeNegativeVector2() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector2>("TMPro", "TMP_Text", "k_LargeNegativeVector2"));
}
// Autogenerated static field setter
// Set static field: static protected UnityEngine.Vector2 k_LargeNegativeVector2
void TMPro::TMP_Text::_set_k_LargeNegativeVector2(UnityEngine::Vector2 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text", "k_LargeNegativeVector2", value));
}
// Autogenerated static field getter
// Get static field: static protected System.Single k_LargePositiveFloat
float TMPro::TMP_Text::_get_k_LargePositiveFloat() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("TMPro", "TMP_Text", "k_LargePositiveFloat"));
}
// Autogenerated static field setter
// Set static field: static protected System.Single k_LargePositiveFloat
void TMPro::TMP_Text::_set_k_LargePositiveFloat(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text", "k_LargePositiveFloat", value));
}
// Autogenerated static field getter
// Get static field: static protected System.Single k_LargeNegativeFloat
float TMPro::TMP_Text::_get_k_LargeNegativeFloat() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("TMPro", "TMP_Text", "k_LargeNegativeFloat"));
}
// Autogenerated static field setter
// Set static field: static protected System.Single k_LargeNegativeFloat
void TMPro::TMP_Text::_set_k_LargeNegativeFloat(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text", "k_LargeNegativeFloat", value));
}
// Autogenerated static field getter
// Get static field: static protected System.Int32 k_LargePositiveInt
int TMPro::TMP_Text::_get_k_LargePositiveInt() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "TMP_Text", "k_LargePositiveInt"));
}
// Autogenerated static field setter
// Set static field: static protected System.Int32 k_LargePositiveInt
void TMPro::TMP_Text::_set_k_LargePositiveInt(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text", "k_LargePositiveInt", value));
}
// Autogenerated static field getter
// Get static field: static protected System.Int32 k_LargeNegativeInt
int TMPro::TMP_Text::_get_k_LargeNegativeInt() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("TMPro", "TMP_Text", "k_LargeNegativeInt"));
}
// Autogenerated static field setter
// Set static field: static protected System.Int32 k_LargeNegativeInt
void TMPro::TMP_Text::_set_k_LargeNegativeInt(int value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("TMPro", "TMP_Text", "k_LargeNegativeInt", value));
}
// Autogenerated method: TMPro.TMP_Text.get_text
::CsString* TMPro::TMP_Text::get_text() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::CsString*>(this, "get_text"));
}
// Autogenerated method: TMPro.TMP_Text.set_text
void TMPro::TMP_Text::set_text(::CsString* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_text", value));
}
// Autogenerated method: TMPro.TMP_Text.get_isRightToLeftText
bool TMPro::TMP_Text::get_isRightToLeftText() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isRightToLeftText"));
}
// Autogenerated method: TMPro.TMP_Text.set_isRightToLeftText
void TMPro::TMP_Text::set_isRightToLeftText(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isRightToLeftText", value));
}
// Autogenerated method: TMPro.TMP_Text.get_font
TMPro::TMP_FontAsset* TMPro::TMP_Text::get_font() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::TMP_FontAsset*>(this, "get_font"));
}
// Autogenerated method: TMPro.TMP_Text.set_font
void TMPro::TMP_Text::set_font(TMPro::TMP_FontAsset* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_font", value));
}
// Autogenerated method: TMPro.TMP_Text.get_fontSharedMaterial
UnityEngine::Material* TMPro::TMP_Text::get_fontSharedMaterial() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Material*>(this, "get_fontSharedMaterial"));
}
// Autogenerated method: TMPro.TMP_Text.set_fontSharedMaterial
void TMPro::TMP_Text::set_fontSharedMaterial(UnityEngine::Material* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_fontSharedMaterial", value));
}
// Autogenerated method: TMPro.TMP_Text.get_fontSharedMaterials
::Array<UnityEngine::Material*>* TMPro::TMP_Text::get_fontSharedMaterials() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<UnityEngine::Material*>*>(this, "get_fontSharedMaterials"));
}
// Autogenerated method: TMPro.TMP_Text.set_fontSharedMaterials
void TMPro::TMP_Text::set_fontSharedMaterials(::Array<UnityEngine::Material*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_fontSharedMaterials", value));
}
// Autogenerated method: TMPro.TMP_Text.get_fontMaterial
UnityEngine::Material* TMPro::TMP_Text::get_fontMaterial() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Material*>(this, "get_fontMaterial"));
}
// Autogenerated method: TMPro.TMP_Text.set_fontMaterial
void TMPro::TMP_Text::set_fontMaterial(UnityEngine::Material* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_fontMaterial", value));
}
// Autogenerated method: TMPro.TMP_Text.get_fontMaterials
::Array<UnityEngine::Material*>* TMPro::TMP_Text::get_fontMaterials() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<UnityEngine::Material*>*>(this, "get_fontMaterials"));
}
// Autogenerated method: TMPro.TMP_Text.set_fontMaterials
void TMPro::TMP_Text::set_fontMaterials(::Array<UnityEngine::Material*>* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_fontMaterials", value));
}
// Autogenerated method: TMPro.TMP_Text.get_alpha
float TMPro::TMP_Text::get_alpha() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_alpha"));
}
// Autogenerated method: TMPro.TMP_Text.set_alpha
void TMPro::TMP_Text::set_alpha(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_alpha", value));
}
// Autogenerated method: TMPro.TMP_Text.get_enableVertexGradient
bool TMPro::TMP_Text::get_enableVertexGradient() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_enableVertexGradient"));
}
// Autogenerated method: TMPro.TMP_Text.set_enableVertexGradient
void TMPro::TMP_Text::set_enableVertexGradient(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_enableVertexGradient", value));
}
// Autogenerated method: TMPro.TMP_Text.get_colorGradient
TMPro::VertexGradient TMPro::TMP_Text::get_colorGradient() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::VertexGradient>(this, "get_colorGradient"));
}
// Autogenerated method: TMPro.TMP_Text.set_colorGradient
void TMPro::TMP_Text::set_colorGradient(TMPro::VertexGradient value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_colorGradient", value));
}
// Autogenerated method: TMPro.TMP_Text.get_colorGradientPreset
TMPro::TMP_ColorGradient* TMPro::TMP_Text::get_colorGradientPreset() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::TMP_ColorGradient*>(this, "get_colorGradientPreset"));
}
// Autogenerated method: TMPro.TMP_Text.set_colorGradientPreset
void TMPro::TMP_Text::set_colorGradientPreset(TMPro::TMP_ColorGradient* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_colorGradientPreset", value));
}
// Autogenerated method: TMPro.TMP_Text.get_spriteAsset
TMPro::TMP_SpriteAsset* TMPro::TMP_Text::get_spriteAsset() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::TMP_SpriteAsset*>(this, "get_spriteAsset"));
}
// Autogenerated method: TMPro.TMP_Text.set_spriteAsset
void TMPro::TMP_Text::set_spriteAsset(TMPro::TMP_SpriteAsset* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_spriteAsset", value));
}
// Autogenerated method: TMPro.TMP_Text.get_tintAllSprites
bool TMPro::TMP_Text::get_tintAllSprites() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_tintAllSprites"));
}
// Autogenerated method: TMPro.TMP_Text.set_tintAllSprites
void TMPro::TMP_Text::set_tintAllSprites(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_tintAllSprites", value));
}
// Autogenerated method: TMPro.TMP_Text.get_overrideColorTags
bool TMPro::TMP_Text::get_overrideColorTags() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_overrideColorTags"));
}
// Autogenerated method: TMPro.TMP_Text.set_overrideColorTags
void TMPro::TMP_Text::set_overrideColorTags(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_overrideColorTags", value));
}
// Autogenerated method: TMPro.TMP_Text.get_faceColor
UnityEngine::Color32 TMPro::TMP_Text::get_faceColor() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color32>(this, "get_faceColor"));
}
// Autogenerated method: TMPro.TMP_Text.set_faceColor
void TMPro::TMP_Text::set_faceColor(UnityEngine::Color32 value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_faceColor", value));
}
// Autogenerated method: TMPro.TMP_Text.get_outlineColor
UnityEngine::Color32 TMPro::TMP_Text::get_outlineColor() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color32>(this, "get_outlineColor"));
}
// Autogenerated method: TMPro.TMP_Text.set_outlineColor
void TMPro::TMP_Text::set_outlineColor(UnityEngine::Color32 value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_outlineColor", value));
}
// Autogenerated method: TMPro.TMP_Text.get_outlineWidth
float TMPro::TMP_Text::get_outlineWidth() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_outlineWidth"));
}
// Autogenerated method: TMPro.TMP_Text.set_outlineWidth
void TMPro::TMP_Text::set_outlineWidth(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_outlineWidth", value));
}
// Autogenerated method: TMPro.TMP_Text.get_fontSize
float TMPro::TMP_Text::get_fontSize() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_fontSize"));
}
// Autogenerated method: TMPro.TMP_Text.set_fontSize
void TMPro::TMP_Text::set_fontSize(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_fontSize", value));
}
// Autogenerated method: TMPro.TMP_Text.get_fontScale
float TMPro::TMP_Text::get_fontScale() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_fontScale"));
}
// Autogenerated method: TMPro.TMP_Text.get_fontWeight
TMPro::FontWeight TMPro::TMP_Text::get_fontWeight() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::FontWeight>(this, "get_fontWeight"));
}
// Autogenerated method: TMPro.TMP_Text.set_fontWeight
void TMPro::TMP_Text::set_fontWeight(TMPro::FontWeight value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_fontWeight", value));
}
// Autogenerated method: TMPro.TMP_Text.get_pixelsPerUnit
float TMPro::TMP_Text::get_pixelsPerUnit() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_pixelsPerUnit"));
}
// Autogenerated method: TMPro.TMP_Text.get_enableAutoSizing
bool TMPro::TMP_Text::get_enableAutoSizing() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_enableAutoSizing"));
}
// Autogenerated method: TMPro.TMP_Text.set_enableAutoSizing
void TMPro::TMP_Text::set_enableAutoSizing(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_enableAutoSizing", value));
}
// Autogenerated method: TMPro.TMP_Text.get_fontSizeMin
float TMPro::TMP_Text::get_fontSizeMin() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_fontSizeMin"));
}
// Autogenerated method: TMPro.TMP_Text.set_fontSizeMin
void TMPro::TMP_Text::set_fontSizeMin(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_fontSizeMin", value));
}
// Autogenerated method: TMPro.TMP_Text.get_fontSizeMax
float TMPro::TMP_Text::get_fontSizeMax() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_fontSizeMax"));
}
// Autogenerated method: TMPro.TMP_Text.set_fontSizeMax
void TMPro::TMP_Text::set_fontSizeMax(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_fontSizeMax", value));
}
// Autogenerated method: TMPro.TMP_Text.get_fontStyle
TMPro::FontStyles TMPro::TMP_Text::get_fontStyle() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::FontStyles>(this, "get_fontStyle"));
}
// Autogenerated method: TMPro.TMP_Text.set_fontStyle
void TMPro::TMP_Text::set_fontStyle(TMPro::FontStyles value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_fontStyle", value));
}
// Autogenerated method: TMPro.TMP_Text.get_isUsingBold
bool TMPro::TMP_Text::get_isUsingBold() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isUsingBold"));
}
// Autogenerated method: TMPro.TMP_Text.get_alignment
TMPro::TextAlignmentOptions TMPro::TMP_Text::get_alignment() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::TextAlignmentOptions>(this, "get_alignment"));
}
// Autogenerated method: TMPro.TMP_Text.set_alignment
void TMPro::TMP_Text::set_alignment(TMPro::TextAlignmentOptions value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_alignment", value));
}
// Autogenerated method: TMPro.TMP_Text.get_characterSpacing
float TMPro::TMP_Text::get_characterSpacing() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_characterSpacing"));
}
// Autogenerated method: TMPro.TMP_Text.set_characterSpacing
void TMPro::TMP_Text::set_characterSpacing(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_characterSpacing", value));
}
// Autogenerated method: TMPro.TMP_Text.get_wordSpacing
float TMPro::TMP_Text::get_wordSpacing() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_wordSpacing"));
}
// Autogenerated method: TMPro.TMP_Text.set_wordSpacing
void TMPro::TMP_Text::set_wordSpacing(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_wordSpacing", value));
}
// Autogenerated method: TMPro.TMP_Text.get_lineSpacing
float TMPro::TMP_Text::get_lineSpacing() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_lineSpacing"));
}
// Autogenerated method: TMPro.TMP_Text.set_lineSpacing
void TMPro::TMP_Text::set_lineSpacing(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_lineSpacing", value));
}
// Autogenerated method: TMPro.TMP_Text.get_lineSpacingAdjustment
float TMPro::TMP_Text::get_lineSpacingAdjustment() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_lineSpacingAdjustment"));
}
// Autogenerated method: TMPro.TMP_Text.set_lineSpacingAdjustment
void TMPro::TMP_Text::set_lineSpacingAdjustment(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_lineSpacingAdjustment", value));
}
// Autogenerated method: TMPro.TMP_Text.get_paragraphSpacing
float TMPro::TMP_Text::get_paragraphSpacing() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_paragraphSpacing"));
}
// Autogenerated method: TMPro.TMP_Text.set_paragraphSpacing
void TMPro::TMP_Text::set_paragraphSpacing(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_paragraphSpacing", value));
}
// Autogenerated method: TMPro.TMP_Text.get_characterWidthAdjustment
float TMPro::TMP_Text::get_characterWidthAdjustment() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_characterWidthAdjustment"));
}
// Autogenerated method: TMPro.TMP_Text.set_characterWidthAdjustment
void TMPro::TMP_Text::set_characterWidthAdjustment(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_characterWidthAdjustment", value));
}
// Autogenerated method: TMPro.TMP_Text.get_enableWordWrapping
bool TMPro::TMP_Text::get_enableWordWrapping() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_enableWordWrapping"));
}
// Autogenerated method: TMPro.TMP_Text.set_enableWordWrapping
void TMPro::TMP_Text::set_enableWordWrapping(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_enableWordWrapping", value));
}
// Autogenerated method: TMPro.TMP_Text.get_wordWrappingRatios
float TMPro::TMP_Text::get_wordWrappingRatios() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_wordWrappingRatios"));
}
// Autogenerated method: TMPro.TMP_Text.set_wordWrappingRatios
void TMPro::TMP_Text::set_wordWrappingRatios(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_wordWrappingRatios", value));
}
// Autogenerated method: TMPro.TMP_Text.get_overflowMode
TMPro::TextOverflowModes TMPro::TMP_Text::get_overflowMode() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::TextOverflowModes>(this, "get_overflowMode"));
}
// Autogenerated method: TMPro.TMP_Text.set_overflowMode
void TMPro::TMP_Text::set_overflowMode(TMPro::TextOverflowModes value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_overflowMode", value));
}
// Autogenerated method: TMPro.TMP_Text.get_isTextOverflowing
bool TMPro::TMP_Text::get_isTextOverflowing() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isTextOverflowing"));
}
// Autogenerated method: TMPro.TMP_Text.get_firstOverflowCharacterIndex
int TMPro::TMP_Text::get_firstOverflowCharacterIndex() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_firstOverflowCharacterIndex"));
}
// Autogenerated method: TMPro.TMP_Text.get_linkedTextComponent
TMPro::TMP_Text* TMPro::TMP_Text::get_linkedTextComponent() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::TMP_Text*>(this, "get_linkedTextComponent"));
}
// Autogenerated method: TMPro.TMP_Text.set_linkedTextComponent
void TMPro::TMP_Text::set_linkedTextComponent(TMPro::TMP_Text* value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_linkedTextComponent", value));
}
// Autogenerated method: TMPro.TMP_Text.get_isLinkedTextComponent
bool TMPro::TMP_Text::get_isLinkedTextComponent() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isLinkedTextComponent"));
}
// Autogenerated method: TMPro.TMP_Text.set_isLinkedTextComponent
void TMPro::TMP_Text::set_isLinkedTextComponent(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isLinkedTextComponent", value));
}
// Autogenerated method: TMPro.TMP_Text.get_isTextTruncated
bool TMPro::TMP_Text::get_isTextTruncated() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isTextTruncated"));
}
// Autogenerated method: TMPro.TMP_Text.get_enableKerning
bool TMPro::TMP_Text::get_enableKerning() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_enableKerning"));
}
// Autogenerated method: TMPro.TMP_Text.set_enableKerning
void TMPro::TMP_Text::set_enableKerning(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_enableKerning", value));
}
// Autogenerated method: TMPro.TMP_Text.get_extraPadding
bool TMPro::TMP_Text::get_extraPadding() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_extraPadding"));
}
// Autogenerated method: TMPro.TMP_Text.set_extraPadding
void TMPro::TMP_Text::set_extraPadding(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_extraPadding", value));
}
// Autogenerated method: TMPro.TMP_Text.get_richText
bool TMPro::TMP_Text::get_richText() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_richText"));
}
// Autogenerated method: TMPro.TMP_Text.set_richText
void TMPro::TMP_Text::set_richText(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_richText", value));
}
// Autogenerated method: TMPro.TMP_Text.get_parseCtrlCharacters
bool TMPro::TMP_Text::get_parseCtrlCharacters() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_parseCtrlCharacters"));
}
// Autogenerated method: TMPro.TMP_Text.set_parseCtrlCharacters
void TMPro::TMP_Text::set_parseCtrlCharacters(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_parseCtrlCharacters", value));
}
// Autogenerated method: TMPro.TMP_Text.get_isOverlay
bool TMPro::TMP_Text::get_isOverlay() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isOverlay"));
}
// Autogenerated method: TMPro.TMP_Text.set_isOverlay
void TMPro::TMP_Text::set_isOverlay(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isOverlay", value));
}
// Autogenerated method: TMPro.TMP_Text.get_isOrthographic
bool TMPro::TMP_Text::get_isOrthographic() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isOrthographic"));
}
// Autogenerated method: TMPro.TMP_Text.set_isOrthographic
void TMPro::TMP_Text::set_isOrthographic(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isOrthographic", value));
}
// Autogenerated method: TMPro.TMP_Text.get_enableCulling
bool TMPro::TMP_Text::get_enableCulling() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_enableCulling"));
}
// Autogenerated method: TMPro.TMP_Text.set_enableCulling
void TMPro::TMP_Text::set_enableCulling(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_enableCulling", value));
}
// Autogenerated method: TMPro.TMP_Text.get_ignoreRectMaskCulling
bool TMPro::TMP_Text::get_ignoreRectMaskCulling() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_ignoreRectMaskCulling"));
}
// Autogenerated method: TMPro.TMP_Text.set_ignoreRectMaskCulling
void TMPro::TMP_Text::set_ignoreRectMaskCulling(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_ignoreRectMaskCulling", value));
}
// Autogenerated method: TMPro.TMP_Text.get_ignoreVisibility
bool TMPro::TMP_Text::get_ignoreVisibility() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_ignoreVisibility"));
}
// Autogenerated method: TMPro.TMP_Text.set_ignoreVisibility
void TMPro::TMP_Text::set_ignoreVisibility(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_ignoreVisibility", value));
}
// Autogenerated method: TMPro.TMP_Text.get_horizontalMapping
TMPro::TextureMappingOptions TMPro::TMP_Text::get_horizontalMapping() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::TextureMappingOptions>(this, "get_horizontalMapping"));
}
// Autogenerated method: TMPro.TMP_Text.set_horizontalMapping
void TMPro::TMP_Text::set_horizontalMapping(TMPro::TextureMappingOptions value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_horizontalMapping", value));
}
// Autogenerated method: TMPro.TMP_Text.get_verticalMapping
TMPro::TextureMappingOptions TMPro::TMP_Text::get_verticalMapping() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::TextureMappingOptions>(this, "get_verticalMapping"));
}
// Autogenerated method: TMPro.TMP_Text.set_verticalMapping
void TMPro::TMP_Text::set_verticalMapping(TMPro::TextureMappingOptions value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_verticalMapping", value));
}
// Autogenerated method: TMPro.TMP_Text.get_mappingUvLineOffset
float TMPro::TMP_Text::get_mappingUvLineOffset() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_mappingUvLineOffset"));
}
// Autogenerated method: TMPro.TMP_Text.set_mappingUvLineOffset
void TMPro::TMP_Text::set_mappingUvLineOffset(float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_mappingUvLineOffset", value));
}
// Autogenerated method: TMPro.TMP_Text.get_renderMode
TMPro::TextRenderFlags TMPro::TMP_Text::get_renderMode() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::TextRenderFlags>(this, "get_renderMode"));
}
// Autogenerated method: TMPro.TMP_Text.set_renderMode
void TMPro::TMP_Text::set_renderMode(TMPro::TextRenderFlags value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_renderMode", value));
}
// Autogenerated method: TMPro.TMP_Text.get_geometrySortingOrder
TMPro::VertexSortingOrder TMPro::TMP_Text::get_geometrySortingOrder() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::VertexSortingOrder>(this, "get_geometrySortingOrder"));
}
// Autogenerated method: TMPro.TMP_Text.set_geometrySortingOrder
void TMPro::TMP_Text::set_geometrySortingOrder(TMPro::VertexSortingOrder value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_geometrySortingOrder", value));
}
// Autogenerated method: TMPro.TMP_Text.get_vertexBufferAutoSizeReduction
bool TMPro::TMP_Text::get_vertexBufferAutoSizeReduction() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_vertexBufferAutoSizeReduction"));
}
// Autogenerated method: TMPro.TMP_Text.set_vertexBufferAutoSizeReduction
void TMPro::TMP_Text::set_vertexBufferAutoSizeReduction(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_vertexBufferAutoSizeReduction", value));
}
// Autogenerated method: TMPro.TMP_Text.get_firstVisibleCharacter
int TMPro::TMP_Text::get_firstVisibleCharacter() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_firstVisibleCharacter"));
}
// Autogenerated method: TMPro.TMP_Text.set_firstVisibleCharacter
void TMPro::TMP_Text::set_firstVisibleCharacter(int value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_firstVisibleCharacter", value));
}
// Autogenerated method: TMPro.TMP_Text.get_maxVisibleCharacters
int TMPro::TMP_Text::get_maxVisibleCharacters() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_maxVisibleCharacters"));
}
// Autogenerated method: TMPro.TMP_Text.set_maxVisibleCharacters
void TMPro::TMP_Text::set_maxVisibleCharacters(int value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_maxVisibleCharacters", value));
}
// Autogenerated method: TMPro.TMP_Text.get_maxVisibleWords
int TMPro::TMP_Text::get_maxVisibleWords() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_maxVisibleWords"));
}
// Autogenerated method: TMPro.TMP_Text.set_maxVisibleWords
void TMPro::TMP_Text::set_maxVisibleWords(int value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_maxVisibleWords", value));
}
// Autogenerated method: TMPro.TMP_Text.get_maxVisibleLines
int TMPro::TMP_Text::get_maxVisibleLines() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_maxVisibleLines"));
}
// Autogenerated method: TMPro.TMP_Text.set_maxVisibleLines
void TMPro::TMP_Text::set_maxVisibleLines(int value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_maxVisibleLines", value));
}
// Autogenerated method: TMPro.TMP_Text.get_useMaxVisibleDescender
bool TMPro::TMP_Text::get_useMaxVisibleDescender() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_useMaxVisibleDescender"));
}
// Autogenerated method: TMPro.TMP_Text.set_useMaxVisibleDescender
void TMPro::TMP_Text::set_useMaxVisibleDescender(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_useMaxVisibleDescender", value));
}
// Autogenerated method: TMPro.TMP_Text.get_pageToDisplay
int TMPro::TMP_Text::get_pageToDisplay() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_pageToDisplay"));
}
// Autogenerated method: TMPro.TMP_Text.set_pageToDisplay
void TMPro::TMP_Text::set_pageToDisplay(int value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_pageToDisplay", value));
}
// Autogenerated method: TMPro.TMP_Text.get_margin
UnityEngine::Vector4 TMPro::TMP_Text::get_margin() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector4>(this, "get_margin"));
}
// Autogenerated method: TMPro.TMP_Text.set_margin
void TMPro::TMP_Text::set_margin(UnityEngine::Vector4 value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_margin", value));
}
// Autogenerated method: TMPro.TMP_Text.get_textInfo
TMPro::TMP_TextInfo* TMPro::TMP_Text::get_textInfo() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::TMP_TextInfo*>(this, "get_textInfo"));
}
// Autogenerated method: TMPro.TMP_Text.get_havePropertiesChanged
bool TMPro::TMP_Text::get_havePropertiesChanged() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_havePropertiesChanged"));
}
// Autogenerated method: TMPro.TMP_Text.set_havePropertiesChanged
void TMPro::TMP_Text::set_havePropertiesChanged(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_havePropertiesChanged", value));
}
// Autogenerated method: TMPro.TMP_Text.get_isUsingLegacyAnimationComponent
bool TMPro::TMP_Text::get_isUsingLegacyAnimationComponent() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isUsingLegacyAnimationComponent"));
}
// Autogenerated method: TMPro.TMP_Text.set_isUsingLegacyAnimationComponent
void TMPro::TMP_Text::set_isUsingLegacyAnimationComponent(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isUsingLegacyAnimationComponent", value));
}
// Autogenerated method: TMPro.TMP_Text.get_autoSizeTextContainer
bool TMPro::TMP_Text::get_autoSizeTextContainer() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_autoSizeTextContainer"));
}
// Autogenerated method: TMPro.TMP_Text.set_autoSizeTextContainer
void TMPro::TMP_Text::set_autoSizeTextContainer(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_autoSizeTextContainer", value));
}
// Autogenerated method: TMPro.TMP_Text.get_mesh
UnityEngine::Mesh* TMPro::TMP_Text::get_mesh() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Mesh*>(this, "get_mesh"));
}
// Autogenerated method: TMPro.TMP_Text.get_isVolumetricText
bool TMPro::TMP_Text::get_isVolumetricText() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_isVolumetricText"));
}
// Autogenerated method: TMPro.TMP_Text.set_isVolumetricText
void TMPro::TMP_Text::set_isVolumetricText(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_isVolumetricText", value));
}
// Autogenerated method: TMPro.TMP_Text.get_bounds
UnityEngine::Bounds TMPro::TMP_Text::get_bounds() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Bounds>(this, "get_bounds"));
}
// Autogenerated method: TMPro.TMP_Text.get_textBounds
UnityEngine::Bounds TMPro::TMP_Text::get_textBounds() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Bounds>(this, "get_textBounds"));
}
// Autogenerated method: TMPro.TMP_Text.get_spriteAnimator
TMPro::TMP_SpriteAnimator* TMPro::TMP_Text::get_spriteAnimator() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::TMP_SpriteAnimator*>(this, "get_spriteAnimator"));
}
// Autogenerated method: TMPro.TMP_Text.get_flexibleHeight
float TMPro::TMP_Text::get_flexibleHeight() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_flexibleHeight"));
}
// Autogenerated method: TMPro.TMP_Text.get_flexibleWidth
float TMPro::TMP_Text::get_flexibleWidth() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_flexibleWidth"));
}
// Autogenerated method: TMPro.TMP_Text.get_minWidth
float TMPro::TMP_Text::get_minWidth() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_minWidth"));
}
// Autogenerated method: TMPro.TMP_Text.get_minHeight
float TMPro::TMP_Text::get_minHeight() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_minHeight"));
}
// Autogenerated method: TMPro.TMP_Text.get_maxWidth
float TMPro::TMP_Text::get_maxWidth() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_maxWidth"));
}
// Autogenerated method: TMPro.TMP_Text.get_maxHeight
float TMPro::TMP_Text::get_maxHeight() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_maxHeight"));
}
// Autogenerated method: TMPro.TMP_Text.get_layoutElement
UnityEngine::UI::LayoutElement* TMPro::TMP_Text::get_layoutElement() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::UI::LayoutElement*>(this, "get_layoutElement"));
}
// Autogenerated method: TMPro.TMP_Text.get_preferredWidth
float TMPro::TMP_Text::get_preferredWidth() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_preferredWidth"));
}
// Autogenerated method: TMPro.TMP_Text.get_preferredHeight
float TMPro::TMP_Text::get_preferredHeight() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_preferredHeight"));
}
// Autogenerated method: TMPro.TMP_Text.get_renderedWidth
float TMPro::TMP_Text::get_renderedWidth() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_renderedWidth"));
}
// Autogenerated method: TMPro.TMP_Text.get_renderedHeight
float TMPro::TMP_Text::get_renderedHeight() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_renderedHeight"));
}
// Autogenerated method: TMPro.TMP_Text.get_layoutPriority
int TMPro::TMP_Text::get_layoutPriority() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_layoutPriority"));
}
// Autogenerated method: TMPro.TMP_Text.LoadFontAsset
void TMPro::TMP_Text::LoadFontAsset() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LoadFontAsset"));
}
// Autogenerated method: TMPro.TMP_Text.SetSharedMaterial
void TMPro::TMP_Text::SetSharedMaterial(UnityEngine::Material* mat) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetSharedMaterial", mat));
}
// Autogenerated method: TMPro.TMP_Text.GetMaterial
UnityEngine::Material* TMPro::TMP_Text::GetMaterial(UnityEngine::Material* mat) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Material*>(this, "GetMaterial", mat));
}
// Autogenerated method: TMPro.TMP_Text.SetFontBaseMaterial
void TMPro::TMP_Text::SetFontBaseMaterial(UnityEngine::Material* mat) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetFontBaseMaterial", mat));
}
// Autogenerated method: TMPro.TMP_Text.GetSharedMaterials
::Array<UnityEngine::Material*>* TMPro::TMP_Text::GetSharedMaterials() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<UnityEngine::Material*>*>(this, "GetSharedMaterials"));
}
// Autogenerated method: TMPro.TMP_Text.SetSharedMaterials
void TMPro::TMP_Text::SetSharedMaterials(::Array<UnityEngine::Material*>* materials) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetSharedMaterials", materials));
}
// Autogenerated method: TMPro.TMP_Text.GetMaterials
::Array<UnityEngine::Material*>* TMPro::TMP_Text::GetMaterials(::Array<UnityEngine::Material*>* mats) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<UnityEngine::Material*>*>(this, "GetMaterials", mats));
}
// Autogenerated method: TMPro.TMP_Text.CreateMaterialInstance
UnityEngine::Material* TMPro::TMP_Text::CreateMaterialInstance(UnityEngine::Material* source) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Material*>(this, "CreateMaterialInstance", source));
}
// Autogenerated method: TMPro.TMP_Text.SetVertexColorGradient
void TMPro::TMP_Text::SetVertexColorGradient(TMPro::TMP_ColorGradient* gradient) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetVertexColorGradient", gradient));
}
// Autogenerated method: TMPro.TMP_Text.SetTextSortingOrder
void TMPro::TMP_Text::SetTextSortingOrder(TMPro::VertexSortingOrder order) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetTextSortingOrder", order));
}
// Autogenerated method: TMPro.TMP_Text.SetTextSortingOrder
void TMPro::TMP_Text::SetTextSortingOrder(::Array<int>* order) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetTextSortingOrder", order));
}
// Autogenerated method: TMPro.TMP_Text.SetFaceColor
void TMPro::TMP_Text::SetFaceColor(UnityEngine::Color32 color) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetFaceColor", color));
}
// Autogenerated method: TMPro.TMP_Text.SetOutlineColor
void TMPro::TMP_Text::SetOutlineColor(UnityEngine::Color32 color) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetOutlineColor", color));
}
// Autogenerated method: TMPro.TMP_Text.SetOutlineThickness
void TMPro::TMP_Text::SetOutlineThickness(float thickness) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetOutlineThickness", thickness));
}
// Autogenerated method: TMPro.TMP_Text.SetShaderDepth
void TMPro::TMP_Text::SetShaderDepth() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetShaderDepth"));
}
// Autogenerated method: TMPro.TMP_Text.SetCulling
void TMPro::TMP_Text::SetCulling() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetCulling"));
}
// Autogenerated method: TMPro.TMP_Text.GetPaddingForMaterial
float TMPro::TMP_Text::GetPaddingForMaterial() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetPaddingForMaterial"));
}
// Autogenerated method: TMPro.TMP_Text.GetPaddingForMaterial
float TMPro::TMP_Text::GetPaddingForMaterial(UnityEngine::Material* mat) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetPaddingForMaterial", mat));
}
// Autogenerated method: TMPro.TMP_Text.GetTextContainerLocalCorners
::Array<UnityEngine::Vector3>* TMPro::TMP_Text::GetTextContainerLocalCorners() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<UnityEngine::Vector3>*>(this, "GetTextContainerLocalCorners"));
}
// Autogenerated method: TMPro.TMP_Text.ForceMeshUpdate
void TMPro::TMP_Text::ForceMeshUpdate() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ForceMeshUpdate"));
}
// Autogenerated method: TMPro.TMP_Text.ForceMeshUpdate
void TMPro::TMP_Text::ForceMeshUpdate(bool ignoreActiveState) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ForceMeshUpdate", ignoreActiveState));
}
// Autogenerated method: TMPro.TMP_Text.SetTextInternal
void TMPro::TMP_Text::SetTextInternal(::CsString* text) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetTextInternal", text));
}
// Autogenerated method: TMPro.TMP_Text.UpdateGeometry
void TMPro::TMP_Text::UpdateGeometry(UnityEngine::Mesh* mesh, int index) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateGeometry", mesh, index));
}
// Autogenerated method: TMPro.TMP_Text.UpdateVertexData
void TMPro::TMP_Text::UpdateVertexData(TMPro::TMP_VertexDataUpdateFlags flags) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateVertexData", flags));
}
// Autogenerated method: TMPro.TMP_Text.UpdateVertexData
void TMPro::TMP_Text::UpdateVertexData() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateVertexData"));
}
// Autogenerated method: TMPro.TMP_Text.SetVertices
void TMPro::TMP_Text::SetVertices(::Array<UnityEngine::Vector3>* vertices) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetVertices", vertices));
}
// Autogenerated method: TMPro.TMP_Text.UpdateMeshPadding
void TMPro::TMP_Text::UpdateMeshPadding() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdateMeshPadding"));
}
// Autogenerated method: TMPro.TMP_Text.InternalCrossFadeColor
void TMPro::TMP_Text::InternalCrossFadeColor(UnityEngine::Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "InternalCrossFadeColor", targetColor, duration, ignoreTimeScale, useAlpha));
}
// Autogenerated method: TMPro.TMP_Text.InternalCrossFadeAlpha
void TMPro::TMP_Text::InternalCrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "InternalCrossFadeAlpha", alpha, duration, ignoreTimeScale));
}
// Autogenerated method: TMPro.TMP_Text.ParseInputText
void TMPro::TMP_Text::ParseInputText() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ParseInputText"));
}
// Autogenerated method: TMPro.TMP_Text.SetText
void TMPro::TMP_Text::SetText(::CsString* text) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetText", text));
}
// Autogenerated method: TMPro.TMP_Text.SetText
void TMPro::TMP_Text::SetText(::CsString* text, bool syncTextInputBox) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetText", text, syncTextInputBox));
}
// Autogenerated method: TMPro.TMP_Text.SetText
void TMPro::TMP_Text::SetText(::CsString* text, float arg0) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetText", text, arg0));
}
// Autogenerated method: TMPro.TMP_Text.SetText
void TMPro::TMP_Text::SetText(::CsString* text, float arg0, float arg1) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetText", text, arg0, arg1));
}
// Autogenerated method: TMPro.TMP_Text.SetText
void TMPro::TMP_Text::SetText(::CsString* text, float arg0, float arg1, float arg2) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetText", text, arg0, arg1, arg2));
}
// Autogenerated method: TMPro.TMP_Text.SetText
void TMPro::TMP_Text::SetText(System::Text::StringBuilder* text) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetText", text));
}
// Autogenerated method: TMPro.TMP_Text.SetCharArray
void TMPro::TMP_Text::SetCharArray(::Array<::Il2CppChar>* sourceText) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetCharArray", sourceText));
}
// Autogenerated method: TMPro.TMP_Text.SetCharArray
void TMPro::TMP_Text::SetCharArray(::Array<::Il2CppChar>* sourceText, int start, int length) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetCharArray", sourceText, start, length));
}
// Autogenerated method: TMPro.TMP_Text.SetCharArray
void TMPro::TMP_Text::SetCharArray(::Array<int>* sourceText, int start, int length) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetCharArray", sourceText, start, length));
}
// Autogenerated method: TMPro.TMP_Text.SetTextArrayToCharArray
void TMPro::TMP_Text::SetTextArrayToCharArray(::Array<::Il2CppChar>* sourceText, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetTextArrayToCharArray", sourceText, charBuffer));
}
// Autogenerated method: TMPro.TMP_Text.StringToCharArray
void TMPro::TMP_Text::StringToCharArray(::CsString* sourceText, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "StringToCharArray", sourceText, charBuffer));
}
// Autogenerated method: TMPro.TMP_Text.StringBuilderToIntArray
void TMPro::TMP_Text::StringBuilderToIntArray(System::Text::StringBuilder* sourceText, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "StringBuilderToIntArray", sourceText, charBuffer));
}
// Autogenerated method: TMPro.TMP_Text.ReplaceOpeningStyleTag
bool TMPro::TMP_Text::ReplaceOpeningStyleTag(::CsString*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ReplaceOpeningStyleTag", sourceText, srcIndex, srcOffset, charBuffer, writeIndex));
}
// Autogenerated method: TMPro.TMP_Text.ReplaceOpeningStyleTag
bool TMPro::TMP_Text::ReplaceOpeningStyleTag(::Array<int>*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ReplaceOpeningStyleTag", sourceText, srcIndex, srcOffset, charBuffer, writeIndex));
}
// Autogenerated method: TMPro.TMP_Text.ReplaceOpeningStyleTag
bool TMPro::TMP_Text::ReplaceOpeningStyleTag(::Array<::Il2CppChar>*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ReplaceOpeningStyleTag", sourceText, srcIndex, srcOffset, charBuffer, writeIndex));
}
// Autogenerated method: TMPro.TMP_Text.ReplaceOpeningStyleTag
bool TMPro::TMP_Text::ReplaceOpeningStyleTag(System::Text::StringBuilder*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ReplaceOpeningStyleTag", sourceText, srcIndex, srcOffset, charBuffer, writeIndex));
}
// Autogenerated method: TMPro.TMP_Text.ReplaceClosingStyleTag
bool TMPro::TMP_Text::ReplaceClosingStyleTag(::CsString*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ReplaceClosingStyleTag", sourceText, srcIndex, charBuffer, writeIndex));
}
// Autogenerated method: TMPro.TMP_Text.ReplaceClosingStyleTag
bool TMPro::TMP_Text::ReplaceClosingStyleTag(::Array<int>*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ReplaceClosingStyleTag", sourceText, srcIndex, charBuffer, writeIndex));
}
// Autogenerated method: TMPro.TMP_Text.ReplaceClosingStyleTag
bool TMPro::TMP_Text::ReplaceClosingStyleTag(::Array<::Il2CppChar>*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ReplaceClosingStyleTag", sourceText, srcIndex, charBuffer, writeIndex));
}
// Autogenerated method: TMPro.TMP_Text.ReplaceClosingStyleTag
bool TMPro::TMP_Text::ReplaceClosingStyleTag(System::Text::StringBuilder*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ReplaceClosingStyleTag", sourceText, srcIndex, charBuffer, writeIndex));
}
// Autogenerated method: TMPro.TMP_Text.IsTagName
bool TMPro::TMP_Text::IsTagName(::CsString*& text, ::CsString* tag, int index) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsTagName", text, tag, index));
}
// Autogenerated method: TMPro.TMP_Text.IsTagName
bool TMPro::TMP_Text::IsTagName(::Array<::Il2CppChar>*& text, ::CsString* tag, int index) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsTagName", text, tag, index));
}
// Autogenerated method: TMPro.TMP_Text.IsTagName
bool TMPro::TMP_Text::IsTagName(::Array<int>*& text, ::CsString* tag, int index) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsTagName", text, tag, index));
}
// Autogenerated method: TMPro.TMP_Text.IsTagName
bool TMPro::TMP_Text::IsTagName(System::Text::StringBuilder*& text, ::CsString* tag, int index) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsTagName", text, tag, index));
}
// Autogenerated method: TMPro.TMP_Text.GetTagHashCode
int TMPro::TMP_Text::GetTagHashCode(::CsString*& text, int index, int& closeIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetTagHashCode", text, index, closeIndex));
}
// Autogenerated method: TMPro.TMP_Text.GetTagHashCode
int TMPro::TMP_Text::GetTagHashCode(::Array<::Il2CppChar>*& text, int index, int& closeIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetTagHashCode", text, index, closeIndex));
}
// Autogenerated method: TMPro.TMP_Text.GetTagHashCode
int TMPro::TMP_Text::GetTagHashCode(::Array<int>*& text, int index, int& closeIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetTagHashCode", text, index, closeIndex));
}
// Autogenerated method: TMPro.TMP_Text.GetTagHashCode
int TMPro::TMP_Text::GetTagHashCode(System::Text::StringBuilder*& text, int index, int& closeIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetTagHashCode", text, index, closeIndex));
}
// Autogenerated method: TMPro.TMP_Text.AddFloatToCharArray
void TMPro::TMP_Text::AddFloatToCharArray(double number, int& index, int precision) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddFloatToCharArray", number, index, precision));
}
// Autogenerated method: TMPro.TMP_Text.AddIntToCharArray
void TMPro::TMP_Text::AddIntToCharArray(double number, int& index, int precision) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddIntToCharArray", number, index, precision));
}
// Autogenerated method: TMPro.TMP_Text.SetArraySizes
int TMPro::TMP_Text::SetArraySizes(::Array<TMPro::TMP_Text::UnicodeChar>* chars) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "SetArraySizes", chars));
}
// Autogenerated method: TMPro.TMP_Text.GenerateTextMesh
void TMPro::TMP_Text::GenerateTextMesh() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GenerateTextMesh"));
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredValues
UnityEngine::Vector2 TMPro::TMP_Text::GetPreferredValues() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector2>(this, "GetPreferredValues"));
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredValues
UnityEngine::Vector2 TMPro::TMP_Text::GetPreferredValues(float width, float height) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector2>(this, "GetPreferredValues", width, height));
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredValues
UnityEngine::Vector2 TMPro::TMP_Text::GetPreferredValues(::CsString* text) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector2>(this, "GetPreferredValues", text));
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredValues
UnityEngine::Vector2 TMPro::TMP_Text::GetPreferredValues(::CsString* text, float width, float height) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector2>(this, "GetPreferredValues", text, width, height));
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredWidth
float TMPro::TMP_Text::GetPreferredWidth() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetPreferredWidth"));
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredWidth
float TMPro::TMP_Text::GetPreferredWidth(UnityEngine::Vector2 margin) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetPreferredWidth", margin));
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredHeight
float TMPro::TMP_Text::GetPreferredHeight() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetPreferredHeight"));
}
// Autogenerated method: TMPro.TMP_Text.GetPreferredHeight
float TMPro::TMP_Text::GetPreferredHeight(UnityEngine::Vector2 margin) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetPreferredHeight", margin));
}
// Autogenerated method: TMPro.TMP_Text.GetRenderedValues
UnityEngine::Vector2 TMPro::TMP_Text::GetRenderedValues() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector2>(this, "GetRenderedValues"));
}
// Autogenerated method: TMPro.TMP_Text.GetRenderedValues
UnityEngine::Vector2 TMPro::TMP_Text::GetRenderedValues(bool onlyVisibleCharacters) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector2>(this, "GetRenderedValues", onlyVisibleCharacters));
}
// Autogenerated method: TMPro.TMP_Text.GetRenderedWidth
float TMPro::TMP_Text::GetRenderedWidth() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetRenderedWidth"));
}
// Autogenerated method: TMPro.TMP_Text.GetRenderedWidth
float TMPro::TMP_Text::GetRenderedWidth(bool onlyVisibleCharacters) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetRenderedWidth", onlyVisibleCharacters));
}
// Autogenerated method: TMPro.TMP_Text.GetRenderedHeight
float TMPro::TMP_Text::GetRenderedHeight() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetRenderedHeight"));
}
// Autogenerated method: TMPro.TMP_Text.GetRenderedHeight
float TMPro::TMP_Text::GetRenderedHeight(bool onlyVisibleCharacters) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "GetRenderedHeight", onlyVisibleCharacters));
}
// Autogenerated method: TMPro.TMP_Text.CalculatePreferredValues
UnityEngine::Vector2 TMPro::TMP_Text::CalculatePreferredValues(float defaultFontSize, UnityEngine::Vector2 marginSize, bool ignoreTextAutoSizing) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector2>(this, "CalculatePreferredValues", defaultFontSize, marginSize, ignoreTextAutoSizing));
}
// Autogenerated method: TMPro.TMP_Text.GetCompoundBounds
UnityEngine::Bounds TMPro::TMP_Text::GetCompoundBounds() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Bounds>(this, "GetCompoundBounds"));
}
// Autogenerated method: TMPro.TMP_Text.GetTextBounds
UnityEngine::Bounds TMPro::TMP_Text::GetTextBounds() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Bounds>(this, "GetTextBounds"));
}
// Autogenerated method: TMPro.TMP_Text.GetTextBounds
UnityEngine::Bounds TMPro::TMP_Text::GetTextBounds(bool onlyVisibleCharacters) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Bounds>(this, "GetTextBounds", onlyVisibleCharacters));
}
// Autogenerated method: TMPro.TMP_Text.AdjustLineOffset
void TMPro::TMP_Text::AdjustLineOffset(int startIndex, int endIndex, float offset) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "AdjustLineOffset", startIndex, endIndex, offset));
}
// Autogenerated method: TMPro.TMP_Text.ResizeLineExtents
void TMPro::TMP_Text::ResizeLineExtents(int size) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ResizeLineExtents", size));
}
// Autogenerated method: TMPro.TMP_Text.GetTextInfo
TMPro::TMP_TextInfo* TMPro::TMP_Text::GetTextInfo(::CsString* text) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::TMP_TextInfo*>(this, "GetTextInfo", text));
}
// Autogenerated method: TMPro.TMP_Text.ComputeMarginSize
void TMPro::TMP_Text::ComputeMarginSize() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ComputeMarginSize"));
}
// Autogenerated method: TMPro.TMP_Text.SaveWordWrappingState
void TMPro::TMP_Text::SaveWordWrappingState(TMPro::WordWrapState& state, int index, int count) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SaveWordWrappingState", state, index, count));
}
// Autogenerated method: TMPro.TMP_Text.RestoreWordWrappingState
int TMPro::TMP_Text::RestoreWordWrappingState(TMPro::WordWrapState& state) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "RestoreWordWrappingState", state));
}
// Autogenerated method: TMPro.TMP_Text.SaveGlyphVertexInfo
void TMPro::TMP_Text::SaveGlyphVertexInfo(float padding, float style_padding, UnityEngine::Color32 vertexColor) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SaveGlyphVertexInfo", padding, style_padding, vertexColor));
}
// Autogenerated method: TMPro.TMP_Text.SaveSpriteVertexInfo
void TMPro::TMP_Text::SaveSpriteVertexInfo(UnityEngine::Color32 vertexColor) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SaveSpriteVertexInfo", vertexColor));
}
// Autogenerated method: TMPro.TMP_Text.FillCharacterVertexBuffers
void TMPro::TMP_Text::FillCharacterVertexBuffers(int i, int index_X4) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FillCharacterVertexBuffers", i, index_X4));
}
// Autogenerated method: TMPro.TMP_Text.FillCharacterVertexBuffers
void TMPro::TMP_Text::FillCharacterVertexBuffers(int i, int index_X4, bool isVolumetric) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FillCharacterVertexBuffers", i, index_X4, isVolumetric));
}
// Autogenerated method: TMPro.TMP_Text.FillSpriteVertexBuffers
void TMPro::TMP_Text::FillSpriteVertexBuffers(int i, int index_X4) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "FillSpriteVertexBuffers", i, index_X4));
}
// Autogenerated method: TMPro.TMP_Text.DrawUnderlineMesh
void TMPro::TMP_Text::DrawUnderlineMesh(UnityEngine::Vector3 start, UnityEngine::Vector3 end, int& index, float startScale, float endScale, float maxScale, float sdfScale, UnityEngine::Color32 underlineColor) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DrawUnderlineMesh", start, end, index, startScale, endScale, maxScale, sdfScale, underlineColor));
}
// Autogenerated method: TMPro.TMP_Text.DrawTextHighlight
void TMPro::TMP_Text::DrawTextHighlight(UnityEngine::Vector3 start, UnityEngine::Vector3 end, int& index, UnityEngine::Color32 highlightColor) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "DrawTextHighlight", start, end, index, highlightColor));
}
// Autogenerated method: TMPro.TMP_Text.LoadDefaultSettings
void TMPro::TMP_Text::LoadDefaultSettings() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "LoadDefaultSettings"));
}
// Autogenerated method: TMPro.TMP_Text.GetSpecialCharacters
void TMPro::TMP_Text::GetSpecialCharacters(TMPro::TMP_FontAsset* fontAsset) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "GetSpecialCharacters", fontAsset));
}
// Autogenerated method: TMPro.TMP_Text.ReplaceTagWithCharacter
void TMPro::TMP_Text::ReplaceTagWithCharacter(::Array<int>* chars, int insertionIndex, int tagLength, ::Il2CppChar c) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ReplaceTagWithCharacter", chars, insertionIndex, tagLength, c));
}
// Autogenerated method: TMPro.TMP_Text.GetFontAssetForWeight
TMPro::TMP_FontAsset* TMPro::TMP_Text::GetFontAssetForWeight(int fontWeight) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<TMPro::TMP_FontAsset*>(this, "GetFontAssetForWeight", fontWeight));
}
// Autogenerated method: TMPro.TMP_Text.SetActiveSubMeshes
void TMPro::TMP_Text::SetActiveSubMeshes(bool state) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetActiveSubMeshes", state));
}
// Autogenerated method: TMPro.TMP_Text.ClearSubMeshObjects
void TMPro::TMP_Text::ClearSubMeshObjects() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ClearSubMeshObjects"));
}
// Autogenerated method: TMPro.TMP_Text.ClearMesh
void TMPro::TMP_Text::ClearMesh() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ClearMesh"));
}
// Autogenerated method: TMPro.TMP_Text.ClearMesh
void TMPro::TMP_Text::ClearMesh(bool uploadGeometry) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "ClearMesh", uploadGeometry));
}
// Autogenerated method: TMPro.TMP_Text.GetParsedText
::CsString* TMPro::TMP_Text::GetParsedText() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::CsString*>(this, "GetParsedText"));
}
// Autogenerated method: TMPro.TMP_Text.PackUV
UnityEngine::Vector2 TMPro::TMP_Text::PackUV(float x, float y, float scale) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector2>(this, "PackUV", x, y, scale));
}
// Autogenerated method: TMPro.TMP_Text.PackUV
float TMPro::TMP_Text::PackUV(float x, float y) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "PackUV", x, y));
}
// Autogenerated method: TMPro.TMP_Text.InternalUpdate
void TMPro::TMP_Text::InternalUpdate() {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "InternalUpdate"));
}
// Autogenerated method: TMPro.TMP_Text.HexToInt
int TMPro::TMP_Text::HexToInt(::Il2CppChar hex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "HexToInt", hex));
}
// Autogenerated method: TMPro.TMP_Text.GetUTF16
int TMPro::TMP_Text::GetUTF16(::CsString* text, int i) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetUTF16", text, i));
}
// Autogenerated method: TMPro.TMP_Text.GetUTF16
int TMPro::TMP_Text::GetUTF16(System::Text::StringBuilder* text, int i) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetUTF16", text, i));
}
// Autogenerated method: TMPro.TMP_Text.GetUTF32
int TMPro::TMP_Text::GetUTF32(::CsString* text, int i) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetUTF32", text, i));
}
// Autogenerated method: TMPro.TMP_Text.GetUTF32
int TMPro::TMP_Text::GetUTF32(System::Text::StringBuilder* text, int i) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetUTF32", text, i));
}
// Autogenerated method: TMPro.TMP_Text.HexCharsToColor
UnityEngine::Color32 TMPro::TMP_Text::HexCharsToColor(::Array<::Il2CppChar>* hexChars, int tagCount) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color32>(this, "HexCharsToColor", hexChars, tagCount));
}
// Autogenerated method: TMPro.TMP_Text.HexCharsToColor
UnityEngine::Color32 TMPro::TMP_Text::HexCharsToColor(::Array<::Il2CppChar>* hexChars, int startIndex, int length) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color32>(this, "HexCharsToColor", hexChars, startIndex, length));
}
// Autogenerated method: TMPro.TMP_Text.GetAttributeParameters
int TMPro::TMP_Text::GetAttributeParameters(::Array<::Il2CppChar>* chars, int startIndex, int length, ::Array<float>*& parameters) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetAttributeParameters", chars, startIndex, length, parameters));
}
// Autogenerated method: TMPro.TMP_Text.ConvertToFloat
float TMPro::TMP_Text::ConvertToFloat(::Array<::Il2CppChar>* chars, int startIndex, int length) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "ConvertToFloat", chars, startIndex, length));
}
// Autogenerated method: TMPro.TMP_Text.ConvertToFloat
float TMPro::TMP_Text::ConvertToFloat(::Array<::Il2CppChar>* chars, int startIndex, int length, int& lastIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "ConvertToFloat", chars, startIndex, length, lastIndex));
}
// Autogenerated method: TMPro.TMP_Text.ValidateHtmlTag
bool TMPro::TMP_Text::ValidateHtmlTag(::Array<TMPro::TMP_Text::UnicodeChar>* chars, int startIndex, int& endIndex) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ValidateHtmlTag", chars, startIndex, endIndex));
}
// Autogenerated method: TMPro.TMP_Text.get_color
UnityEngine::Color TMPro::TMP_Text::get_color() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>(this, "get_color"));
}
// Autogenerated method: TMPro.TMP_Text.set_color
void TMPro::TMP_Text::set_color(UnityEngine::Color value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_color", value));
}
// Autogenerated method: TMPro.TMP_Text.get_transform
UnityEngine::Transform* TMPro::TMP_Text::get_transform() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Transform*>(this, "get_transform"));
}
UnityEngine::Transform* TMPro::TMP_Text::UnityEngine_UI_ICanvasElement_get_transform() {
  return get_transform();
}
// Redundant proxy method!
// ABORTED: conflicts with another method. UnityEngine::Transform* TMPro::TMP_Text::UnityEngine_UI_ICanvasElement_get_transform()
// Autogenerated method: TMPro.TMP_Text.get_rectTransform
UnityEngine::RectTransform* TMPro::TMP_Text::get_rectTransform() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::RectTransform*>(this, "get_rectTransform"));
}
// Autogenerated method: TMPro.TMP_Text.CrossFadeColor
void TMPro::TMP_Text::CrossFadeColor(UnityEngine::Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CrossFadeColor", targetColor, duration, ignoreTimeScale, useAlpha));
}
// Autogenerated method: TMPro.TMP_Text.CrossFadeAlpha
void TMPro::TMP_Text::CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale) {
  THROW_UNLESS(il2cpp_utils::RunMethod(this, "CrossFadeAlpha", alpha, duration, ignoreTimeScale));
}
// Autogenerated method: TMPro.TMP_Text..ctor
TMPro::TMP_Text* TMPro::TMP_Text::New_ctor() {
  return (TMP_Text*)THROW_UNLESS(il2cpp_utils::New("TMPro", "TMP_Text"));
}
// Autogenerated method: TMPro.TMP_Text..cctor
void TMPro::TMP_Text::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("TMPro", "TMP_Text", ".cctor"));
}
