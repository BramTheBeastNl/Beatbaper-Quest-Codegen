// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.Playables.DirectorWrapMode
#include "UnityEngine/Playables/DirectorWrapMode.hpp"
// Including type: UnityEngine.Playables.PlayableAsset
#include "UnityEngine/Playables/PlayableAsset.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.PropertyName
#include "UnityEngine/PropertyName.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Playables.PlayableDirector.get_extrapolationMode
UnityEngine::Playables::DirectorWrapMode UnityEngine::Playables::PlayableDirector::get_extrapolationMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("get_extrapolationMode");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_extrapolationMode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::DirectorWrapMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.get_playableAsset
UnityEngine::Playables::PlayableAsset* UnityEngine::Playables::PlayableDirector::get_playableAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("get_playableAsset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_playableAsset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableAsset*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.get_playableGraph
UnityEngine::Playables::PlayableGraph UnityEngine::Playables::PlayableDirector::get_playableGraph() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("get_playableGraph");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_playableGraph", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableGraph, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.SetGenericBinding
void UnityEngine::Playables::PlayableDirector::SetGenericBinding(UnityEngine::Object* key, UnityEngine::Object* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("SetGenericBinding");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetGenericBinding", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key, value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, key, value);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.set_time
void UnityEngine::Playables::PlayableDirector::set_time(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("set_time");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_time", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.get_time
double UnityEngine::Playables::PlayableDirector::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("get_time");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_time", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.get_duration
double UnityEngine::Playables::PlayableDirector::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("get_duration");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.Evaluate
void UnityEngine::Playables::PlayableDirector::Evaluate() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("Evaluate");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Evaluate", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.Play
void UnityEngine::Playables::PlayableDirector::Play() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("Play");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.Stop
void UnityEngine::Playables::PlayableDirector::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("Stop");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.Pause
void UnityEngine::Playables::PlayableDirector::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("Pause");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.GetGenericBinding
UnityEngine::Object* UnityEngine::Playables::PlayableDirector::GetGenericBinding(UnityEngine::Object* key) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("GetGenericBinding");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetGenericBinding", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method, key);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.GetWrapMode
UnityEngine::Playables::DirectorWrapMode UnityEngine::Playables::PlayableDirector::GetWrapMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("GetWrapMode");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetWrapMode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::DirectorWrapMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.GetGraphHandle
UnityEngine::Playables::PlayableGraph UnityEngine::Playables::PlayableDirector::GetGraphHandle() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("GetGraphHandle");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetGraphHandle", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::PlayableGraph, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.Internal_SetGenericBinding
void UnityEngine::Playables::PlayableDirector::Internal_SetGenericBinding(UnityEngine::Object* key, UnityEngine::Object* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("Internal_SetGenericBinding");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Internal_SetGenericBinding", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key, value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, key, value);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.Internal_GetPlayableAsset
UnityEngine::ScriptableObject* UnityEngine::Playables::PlayableDirector::Internal_GetPlayableAsset() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("Internal_GetPlayableAsset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Internal_GetPlayableAsset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::ScriptableObject*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.SendOnPlayableDirectorPlay
void UnityEngine::Playables::PlayableDirector::SendOnPlayableDirectorPlay() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("SendOnPlayableDirectorPlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SendOnPlayableDirectorPlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.SendOnPlayableDirectorPause
void UnityEngine::Playables::PlayableDirector::SendOnPlayableDirectorPause() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("SendOnPlayableDirectorPause");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SendOnPlayableDirectorPause", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.SendOnPlayableDirectorStop
void UnityEngine::Playables::PlayableDirector::SendOnPlayableDirectorStop() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("SendOnPlayableDirectorStop");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SendOnPlayableDirectorStop", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.GetReferenceValue_Injected
UnityEngine::Object* UnityEngine::Playables::PlayableDirector::GetReferenceValue_Injected(UnityEngine::PropertyName& id, bool& idValid) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("GetReferenceValue_Injected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetReferenceValue_Injected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(id, idValid)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method, id, idValid);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.GetGraphHandle_Injected
void UnityEngine::Playables::PlayableDirector::GetGraphHandle_Injected(UnityEngine::Playables::PlayableGraph& ret) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("GetGraphHandle_Injected");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetGraphHandle_Injected", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ret)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ret);
}
// Autogenerated method: UnityEngine.Playables.PlayableDirector.GetReferenceValue
UnityEngine::Object* UnityEngine::Playables::PlayableDirector::GetReferenceValue(UnityEngine::PropertyName id, bool& idValid) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Playables").WithContext("PlayableDirector").WithContext("GetReferenceValue");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetReferenceValue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(id, idValid)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Object*, false>(this, ___internal__method, id, idValid);
}
