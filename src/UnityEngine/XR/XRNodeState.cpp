// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.XR.XRNodeState
#include "UnityEngine/XR/XRNodeState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.XR.XRNodeState.set_uniqueID
void UnityEngine::XR::XRNodeState::set_uniqueID(uint64_t value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_uniqueID", value));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.get_nodeType
UnityEngine::XR::XRNode UnityEngine::XR::XRNodeState::get_nodeType() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::XR::XRNode>(*this, "get_nodeType"));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.set_nodeType
void UnityEngine::XR::XRNodeState::set_nodeType(UnityEngine::XR::XRNode value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_nodeType", value));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.set_tracked
void UnityEngine::XR::XRNodeState::set_tracked(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_tracked", value));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetPosition
bool UnityEngine::XR::XRNodeState::TryGetPosition(UnityEngine::Vector3& position) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "TryGetPosition", position));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetRotation
bool UnityEngine::XR::XRNodeState::TryGetRotation(UnityEngine::Quaternion& rotation) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "TryGetRotation", rotation));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetVelocity
bool UnityEngine::XR::XRNodeState::TryGetVelocity(UnityEngine::Vector3& velocity) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "TryGetVelocity", velocity));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetAngularVelocity
bool UnityEngine::XR::XRNodeState::TryGetAngularVelocity(UnityEngine::Vector3& angularVelocity) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "TryGetAngularVelocity", angularVelocity));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetAcceleration
bool UnityEngine::XR::XRNodeState::TryGetAcceleration(UnityEngine::Vector3& acceleration) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "TryGetAcceleration", acceleration));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGetAngularAcceleration
bool UnityEngine::XR::XRNodeState::TryGetAngularAcceleration(UnityEngine::Vector3& angularAcceleration) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "TryGetAngularAcceleration", angularAcceleration));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGet
bool UnityEngine::XR::XRNodeState::TryGet(UnityEngine::Vector3 inValue, UnityEngine::XR::AvailableTrackingData availabilityFlag, UnityEngine::Vector3& outValue) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "TryGet", inValue, availabilityFlag, outValue));
}
// Autogenerated method: UnityEngine.XR.XRNodeState.TryGet
bool UnityEngine::XR::XRNodeState::TryGet(UnityEngine::Quaternion inValue, UnityEngine::XR::AvailableTrackingData availabilityFlag, UnityEngine::Quaternion& outValue) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "TryGet", inValue, availabilityFlag, outValue));
}
