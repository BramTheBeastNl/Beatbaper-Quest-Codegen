// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.TimelineClipCapsExtensions
#include "UnityEngine/Timeline/TimelineClipCapsExtensions.hpp"
// Including type: UnityEngine.Timeline.TimelineClip
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.SupportsLooping
bool UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsLooping(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("TimelineClipCapsExtensions").WithContext("SupportsLooping");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "SupportsLooping", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.SupportsExtrapolation
bool UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsExtrapolation(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("TimelineClipCapsExtensions").WithContext("SupportsExtrapolation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "SupportsExtrapolation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.SupportsClipIn
bool UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsClipIn(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("TimelineClipCapsExtensions").WithContext("SupportsClipIn");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "SupportsClipIn", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.SupportsSpeedMultiplier
bool UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsSpeedMultiplier(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("TimelineClipCapsExtensions").WithContext("SupportsSpeedMultiplier");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "SupportsSpeedMultiplier", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.SupportsBlending
bool UnityEngine::Timeline::TimelineClipCapsExtensions::SupportsBlending(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("TimelineClipCapsExtensions").WithContext("SupportsBlending");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "SupportsBlending", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.HasAll
bool UnityEngine::Timeline::TimelineClipCapsExtensions::HasAll(UnityEngine::Timeline::ClipCaps caps, UnityEngine::Timeline::ClipCaps flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("TimelineClipCapsExtensions").WithContext("HasAll");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "HasAll", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(caps, flags)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, caps, flags);
}
// Autogenerated method: UnityEngine.Timeline.TimelineClipCapsExtensions.HasAny
bool UnityEngine::Timeline::TimelineClipCapsExtensions::HasAny(UnityEngine::Timeline::ClipCaps caps, UnityEngine::Timeline::ClipCaps flags) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("TimelineClipCapsExtensions").WithContext("HasAny");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "TimelineClipCapsExtensions", "HasAny", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(caps, flags)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, caps, flags);
}
