// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.AnimationTrack
#include "UnityEngine/Timeline/AnimationTrack.hpp"
// Including type: UnityEngine.Timeline.AnimationTrack/AnimationTrackUpgrade
#include "UnityEngine/Timeline/AnimationTrack_AnimationTrackUpgrade.hpp"
// Including type: UnityEngine.Timeline.AnimationTrack/<get_outputs>d__49
#include "UnityEngine/Timeline/AnimationTrack_-get_outputs-d__49.hpp"
// Including type: UnityEngine.AvatarMask
#include "UnityEngine/AvatarMask.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: System.Collections.Generic.Queue`1
#include "System/Collections/Generic/Queue_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Timeline.IntervalTree`1
#include "UnityEngine/Timeline/IntervalTree_1.hpp"
// Including type: UnityEngine.Timeline.RuntimeElement
#include "UnityEngine/Timeline/RuntimeElement.hpp"
// Including type: UnityEngine.Timeline.AppliedOffsetMode
#include "UnityEngine/Timeline/AppliedOffsetMode.hpp"
// Including type: UnityEngine.Animations.AnimationLayerMixerPlayable
#include "UnityEngine/Animations/AnimationLayerMixerPlayable.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String k_DefaultInfiniteClipName
::Il2CppString* UnityEngine::Timeline::AnimationTrack::_get_k_DefaultInfiniteClipName() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("_get_k_DefaultInfiniteClipName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("UnityEngine.Timeline", "AnimationTrack", "k_DefaultInfiniteClipName"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_DefaultInfiniteClipName
void UnityEngine::Timeline::AnimationTrack::_set_k_DefaultInfiniteClipName(::Il2CppString* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("_set_k_DefaultInfiniteClipName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationTrack", "k_DefaultInfiniteClipName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String k_DefaultRecordableClipName
::Il2CppString* UnityEngine::Timeline::AnimationTrack::_get_k_DefaultRecordableClipName() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("_get_k_DefaultRecordableClipName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("UnityEngine.Timeline", "AnimationTrack", "k_DefaultRecordableClipName"));
}
// Autogenerated static field setter
// Set static field: static private System.String k_DefaultRecordableClipName
void UnityEngine::Timeline::AnimationTrack::_set_k_DefaultRecordableClipName(::Il2CppString* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("_set_k_DefaultRecordableClipName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationTrack", "k_DefaultRecordableClipName", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.Queue`1<UnityEngine.Transform> s_CachedQueue
System::Collections::Generic::Queue_1<UnityEngine::Transform*>* UnityEngine::Timeline::AnimationTrack::_get_s_CachedQueue() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("_get_s_CachedQueue");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::Queue_1<UnityEngine::Transform*>*>("UnityEngine.Timeline", "AnimationTrack", "s_CachedQueue"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.Queue`1<UnityEngine.Transform> s_CachedQueue
void UnityEngine::Timeline::AnimationTrack::_set_s_CachedQueue(System::Collections::Generic::Queue_1<UnityEngine::Transform*>* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("_set_s_CachedQueue");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationTrack", "s_CachedQueue", value));
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_position
UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_position");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_position
void UnityEngine::Timeline::AnimationTrack::set_position(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_position");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_position", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_rotation
UnityEngine::Quaternion UnityEngine::Timeline::AnimationTrack::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_rotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_rotation
void UnityEngine::Timeline::AnimationTrack::set_rotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_rotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_rotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_eulerAngles
UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_eulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_eulerAngles");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_eulerAngles", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_eulerAngles
void UnityEngine::Timeline::AnimationTrack::set_eulerAngles(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_eulerAngles");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_eulerAngles", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_applyOffsets
bool UnityEngine::Timeline::AnimationTrack::get_applyOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_applyOffsets");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_applyOffsets", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_applyOffsets
void UnityEngine::Timeline::AnimationTrack::set_applyOffsets(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_applyOffsets");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_applyOffsets", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_trackOffset
UnityEngine::Timeline::TrackOffset UnityEngine::Timeline::AnimationTrack::get_trackOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_trackOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_trackOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TrackOffset, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_trackOffset
void UnityEngine::Timeline::AnimationTrack::set_trackOffset(UnityEngine::Timeline::TrackOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_trackOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_trackOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_matchTargetFields
UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::AnimationTrack::get_matchTargetFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_matchTargetFields");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_matchTargetFields", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::MatchTargetFields, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_matchTargetFields
void UnityEngine::Timeline::AnimationTrack::set_matchTargetFields(UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_matchTargetFields");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_matchTargetFields", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClip
UnityEngine::AnimationClip* UnityEngine::Timeline::AnimationTrack::get_infiniteClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_infiniteClip");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_infiniteClip", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClip
void UnityEngine::Timeline::AnimationTrack::set_infiniteClip(UnityEngine::AnimationClip* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_infiniteClip");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_infiniteClip", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipRemoveOffset
bool UnityEngine::Timeline::AnimationTrack::get_infiniteClipRemoveOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_infiniteClipRemoveOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_infiniteClipRemoveOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipRemoveOffset
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipRemoveOffset(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_infiniteClipRemoveOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_infiniteClipRemoveOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_avatarMask
UnityEngine::AvatarMask* UnityEngine::Timeline::AnimationTrack::get_avatarMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_avatarMask");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_avatarMask", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AvatarMask*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_avatarMask
void UnityEngine::Timeline::AnimationTrack::set_avatarMask(UnityEngine::AvatarMask* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_avatarMask");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_avatarMask", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_applyAvatarMask
bool UnityEngine::Timeline::AnimationTrack::get_applyAvatarMask() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_applyAvatarMask");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_applyAvatarMask", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_applyAvatarMask
void UnityEngine::Timeline::AnimationTrack::set_applyAvatarMask(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_applyAvatarMask");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_applyAvatarMask", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_inClipMode
bool UnityEngine::Timeline::AnimationTrack::get_inClipMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_inClipMode");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_inClipMode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipOffsetPosition
UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_infiniteClipOffsetPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_infiniteClipOffsetPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipOffsetPosition
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetPosition(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_infiniteClipOffsetPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_infiniteClipOffsetPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipOffsetRotation
UnityEngine::Quaternion UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_infiniteClipOffsetRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_infiniteClipOffsetRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipOffsetRotation
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetRotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_infiniteClipOffsetRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_infiniteClipOffsetRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipOffsetEulerAngles
UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_infiniteClipOffsetEulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_infiniteClipOffsetEulerAngles");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_infiniteClipOffsetEulerAngles", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipOffsetEulerAngles
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipOffsetEulerAngles(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_infiniteClipOffsetEulerAngles");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_infiniteClipOffsetEulerAngles", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipApplyFootIK
bool UnityEngine::Timeline::AnimationTrack::get_infiniteClipApplyFootIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_infiniteClipApplyFootIK");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_infiniteClipApplyFootIK", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipApplyFootIK
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipApplyFootIK(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_infiniteClipApplyFootIK");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_infiniteClipApplyFootIK", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipTimeOffset
double UnityEngine::Timeline::AnimationTrack::get_infiniteClipTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_infiniteClipTimeOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_infiniteClipTimeOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipTimeOffset
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipTimeOffset(double value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_infiniteClipTimeOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_infiniteClipTimeOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipPreExtrapolation
UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::AnimationTrack::get_infiniteClipPreExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_infiniteClipPreExtrapolation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_infiniteClipPreExtrapolation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipPreExtrapolation
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipPreExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_infiniteClipPreExtrapolation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_infiniteClipPreExtrapolation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipPostExtrapolation
UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::AnimationTrack::get_infiniteClipPostExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_infiniteClipPostExtrapolation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_infiniteClipPostExtrapolation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipPostExtrapolation
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipPostExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_infiniteClipPostExtrapolation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_infiniteClipPostExtrapolation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_infiniteClipLoop
UnityEngine::Timeline::AnimationPlayableAsset::LoopMode UnityEngine::Timeline::AnimationTrack::get_infiniteClipLoop() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_infiniteClipLoop");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_infiniteClipLoop", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::AnimationPlayableAsset::LoopMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_infiniteClipLoop
void UnityEngine::Timeline::AnimationTrack::set_infiniteClipLoop(UnityEngine::Timeline::AnimationPlayableAsset::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_infiniteClipLoop");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_infiniteClipLoop", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.ResetOffsets
void UnityEngine::Timeline::AnimationTrack::ResetOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("ResetOffsets");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ResetOffsets", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateClip
UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::AnimationTrack::CreateClip(UnityEngine::AnimationClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("CreateClip");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateClip", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateInfiniteClip
void UnityEngine::Timeline::AnimationTrack::CreateInfiniteClip(::Il2CppString* infiniteClipName) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("CreateInfiniteClip");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateInfiniteClip", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(infiniteClipName)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, infiniteClipName);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateRecordableClip
UnityEngine::Timeline::TimelineClip* UnityEngine::Timeline::AnimationTrack::CreateRecordableClip(::Il2CppString* animClipName) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("CreateRecordableClip");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateRecordableClip", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(animClipName)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip*, false>(this, ___internal__method, animClipName);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.UpdateClipOffsets
void UnityEngine::Timeline::AnimationTrack::UpdateClipOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("UpdateClipOffsets");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateClipOffsets", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CompileTrackPlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::CompileTrackPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Timeline::AnimationTrack* track, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree, UnityEngine::Timeline::AppliedOffsetMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("CompileTrackPlayable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CompileTrackPlayable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(graph, track, go, tree, mode)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, track, go, tree, mode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetDefaultBlendCount
int UnityEngine::Timeline::AnimationTrack::GetDefaultBlendCount() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("GetDefaultBlendCount");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetDefaultBlendCount", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.AttachDefaultBlend
void UnityEngine::Timeline::AnimationTrack::AttachDefaultBlend(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Animations::AnimationLayerMixerPlayable mixer, bool requireOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("AttachDefaultBlend");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AttachDefaultBlend", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(graph, mixer, requireOffset)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, graph, mixer, requireOffset);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.AttachOffsetPlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::AttachOffsetPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::Playable playable, UnityEngine::Vector3 pos, UnityEngine::Quaternion rot) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("AttachOffsetPlayable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AttachOffsetPlayable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(graph, playable, pos, rot)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, playable, pos, rot);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.RequiresMotionXPlayable
bool UnityEngine::Timeline::AnimationTrack::RequiresMotionXPlayable(UnityEngine::Timeline::AppliedOffsetMode mode, UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("RequiresMotionXPlayable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "RequiresMotionXPlayable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(mode, gameObject)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, mode, gameObject);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.UsesAbsoluteMotion
bool UnityEngine::Timeline::AnimationTrack::UsesAbsoluteMotion(UnityEngine::Timeline::AppliedOffsetMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("UsesAbsoluteMotion");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack", "UsesAbsoluteMotion", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(mode)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.HasController
bool UnityEngine::Timeline::AnimationTrack::HasController(UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("HasController");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HasController", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(gameObject)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, gameObject);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetBinding
UnityEngine::Animator* UnityEngine::Timeline::AnimationTrack::GetBinding(UnityEngine::Playables::PlayableDirector* director) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("GetBinding");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetBinding", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(director)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animator*, false>(this, ___internal__method, director);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateGroupMixer
UnityEngine::Animations::AnimationLayerMixerPlayable UnityEngine::Timeline::AnimationTrack::CreateGroupMixer(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("CreateGroupMixer");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack", "CreateGroupMixer", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(graph, go, inputCount)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Animations::AnimationLayerMixerPlayable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, go, inputCount);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CreateInfiniteTrackPlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::CreateInfiniteTrackPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree, UnityEngine::Timeline::AppliedOffsetMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("CreateInfiniteTrackPlayable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateInfiniteTrackPlayable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(graph, go, tree, mode)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, tree, mode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.ApplyTrackOffset
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::ApplyTrackOffset(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::Playable root, UnityEngine::GameObject* go, UnityEngine::Timeline::AppliedOffsetMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("ApplyTrackOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ApplyTrackOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(graph, root, go, mode)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, root, go, mode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.AssignAnimationClip
void UnityEngine::Timeline::AnimationTrack::AssignAnimationClip(UnityEngine::Timeline::TimelineClip* clip, UnityEngine::AnimationClip* animClip) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("AssignAnimationClip");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AssignAnimationClip", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip, animClip)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip, animClip);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetAnimationClips
void UnityEngine::Timeline::AnimationTrack::GetAnimationClips(System::Collections::Generic::List_1<UnityEngine::AnimationClip*>* animClips) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("GetAnimationClips");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetAnimationClips", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(animClips)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animClips);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetOffsetMode
UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AnimationTrack::GetOffsetMode(UnityEngine::GameObject* go, bool animatesRootTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("GetOffsetMode");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetOffsetMode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(go, animatesRootTransform)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::AppliedOffsetMode, false>(this, ___internal__method, go, animatesRootTransform);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.IsRootTransformDisabledByMask
bool UnityEngine::Timeline::AnimationTrack::IsRootTransformDisabledByMask(UnityEngine::GameObject* gameObject, UnityEngine::Transform* genericRootNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("IsRootTransformDisabledByMask");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsRootTransformDisabledByMask", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(gameObject, genericRootNode)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, gameObject, genericRootNode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetGenericRootNode
UnityEngine::Transform* UnityEngine::Timeline::AnimationTrack::GetGenericRootNode(UnityEngine::GameObject* gameObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("GetGenericRootNode");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetGenericRootNode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(gameObject)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method, gameObject);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.AnimatesRootTransform
bool UnityEngine::Timeline::AnimationTrack::AnimatesRootTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("AnimatesRootTransform");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "AnimatesRootTransform", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.FindInHierarchyBreadthFirst
UnityEngine::Transform* UnityEngine::Timeline::AnimationTrack::FindInHierarchyBreadthFirst(UnityEngine::Transform* t, ::Il2CppString* name) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("FindInHierarchyBreadthFirst");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack", "FindInHierarchyBreadthFirst", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, name)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, name);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_openClipOffsetPosition
UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_openClipOffsetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_openClipOffsetPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_openClipOffsetPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_openClipOffsetPosition
void UnityEngine::Timeline::AnimationTrack::set_openClipOffsetPosition(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_openClipOffsetPosition");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_openClipOffsetPosition", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_openClipOffsetRotation
UnityEngine::Quaternion UnityEngine::Timeline::AnimationTrack::get_openClipOffsetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_openClipOffsetRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_openClipOffsetRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_openClipOffsetRotation
void UnityEngine::Timeline::AnimationTrack::set_openClipOffsetRotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_openClipOffsetRotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_openClipOffsetRotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_openClipOffsetEulerAngles
UnityEngine::Vector3 UnityEngine::Timeline::AnimationTrack::get_openClipOffsetEulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_openClipOffsetEulerAngles");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_openClipOffsetEulerAngles", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_openClipOffsetEulerAngles
void UnityEngine::Timeline::AnimationTrack::set_openClipOffsetEulerAngles(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_openClipOffsetEulerAngles");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_openClipOffsetEulerAngles", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_openClipPreExtrapolation
UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::AnimationTrack::get_openClipPreExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_openClipPreExtrapolation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_openClipPreExtrapolation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_openClipPreExtrapolation
void UnityEngine::Timeline::AnimationTrack::set_openClipPreExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_openClipPreExtrapolation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_openClipPreExtrapolation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_openClipPostExtrapolation
UnityEngine::Timeline::TimelineClip::ClipExtrapolation UnityEngine::Timeline::AnimationTrack::get_openClipPostExtrapolation() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_openClipPostExtrapolation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_openClipPostExtrapolation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::TimelineClip::ClipExtrapolation, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.set_openClipPostExtrapolation
void UnityEngine::Timeline::AnimationTrack::set_openClipPostExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("set_openClipPostExtrapolation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_openClipPostExtrapolation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CanCompileClips
bool UnityEngine::Timeline::AnimationTrack::CanCompileClips() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("CanCompileClips");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CanCompileClips", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.get_outputs
System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AnimationTrack::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("get_outputs");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_outputs", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.OnCreateClip
void UnityEngine::Timeline::AnimationTrack::OnCreateClip(UnityEngine::Timeline::TimelineClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("OnCreateClip");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnCreateClip", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.CalculateItemsHash
int UnityEngine::Timeline::AnimationTrack::CalculateItemsHash() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("CalculateItemsHash");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CalculateItemsHash", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.UnityEngine.Timeline.ILayerable.CreateLayerMixer
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::UnityEngine_Timeline_ILayerable_CreateLayerMixer(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, int inputCount) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("UnityEngine.Timeline.ILayerable.CreateLayerMixer");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UnityEngine.Timeline.ILayerable.CreateLayerMixer", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(graph, go, inputCount)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, inputCount);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.OnCreateClipPlayableGraph
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationTrack::OnCreateClipPlayableGraph(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("OnCreateClipPlayableGraph");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnCreateClipPlayableGraph", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(graph, go, tree)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go, tree);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetEvaluationTime
void UnityEngine::Timeline::AnimationTrack::GetEvaluationTime(double& outStart, double& outDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("GetEvaluationTime");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetEvaluationTime", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(outStart, outDuration)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, outStart, outDuration);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GetSequenceTime
void UnityEngine::Timeline::AnimationTrack::GetSequenceTime(double& outStart, double& outDuration) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("GetSequenceTime");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetSequenceTime", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(outStart, outDuration)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, outStart, outDuration);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.GatherProperties
void UnityEngine::Timeline::AnimationTrack::GatherProperties(UnityEngine::Playables::PlayableDirector* director, UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("GatherProperties");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GatherProperties", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(director, driver)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack.OnUpgradeFromVersion
void UnityEngine::Timeline::AnimationTrack::OnUpgradeFromVersion(int oldVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext("OnUpgradeFromVersion");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnUpgradeFromVersion", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(oldVersion)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldVersion);
}
// Autogenerated method: UnityEngine.Timeline.AnimationTrack..cctor
void UnityEngine::Timeline::AnimationTrack::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationTrack").WithContext(".cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationTrack", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
