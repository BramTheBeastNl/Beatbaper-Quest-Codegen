// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.AnimationPlayableAsset
#include "UnityEngine/Timeline/AnimationPlayableAsset.hpp"
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/Versions
#include "UnityEngine/Timeline/AnimationPlayableAsset_Versions.hpp"
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/AnimationPlayableAssetUpgrade
#include "UnityEngine/Timeline/AnimationPlayableAsset_AnimationPlayableAssetUpgrade.hpp"
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/<get_outputs>d__45
#include "UnityEngine/Timeline/AnimationPlayableAsset_-get_outputs-d__45.hpp"
// Including type: UnityEngine.AnimationClip
#include "UnityEngine/AnimationClip.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private readonly System.Int32 k_LatestVersion
int UnityEngine::Timeline::AnimationPlayableAsset::_get_k_LatestVersion() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("_get_k_LatestVersion");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityEngine.Timeline", "AnimationPlayableAsset", "k_LatestVersion"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Int32 k_LatestVersion
void UnityEngine::Timeline::AnimationPlayableAsset::_set_k_LatestVersion(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("_set_k_LatestVersion");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "AnimationPlayableAsset", "k_LatestVersion", value));
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_position
UnityEngine::Vector3 UnityEngine::Timeline::AnimationPlayableAsset::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("get_position");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_position
void UnityEngine::Timeline::AnimationPlayableAsset::set_position(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("set_position");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_position", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_rotation
UnityEngine::Quaternion UnityEngine::Timeline::AnimationPlayableAsset::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("get_rotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_rotation
void UnityEngine::Timeline::AnimationPlayableAsset::set_rotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("set_rotation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_rotation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_eulerAngles
UnityEngine::Vector3 UnityEngine::Timeline::AnimationPlayableAsset::get_eulerAngles() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("get_eulerAngles");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_eulerAngles", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_eulerAngles
void UnityEngine::Timeline::AnimationPlayableAsset::set_eulerAngles(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("set_eulerAngles");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_eulerAngles", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_useTrackMatchFields
bool UnityEngine::Timeline::AnimationPlayableAsset::get_useTrackMatchFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("get_useTrackMatchFields");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_useTrackMatchFields", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_useTrackMatchFields
void UnityEngine::Timeline::AnimationPlayableAsset::set_useTrackMatchFields(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("set_useTrackMatchFields");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_useTrackMatchFields", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_matchTargetFields
UnityEngine::Timeline::MatchTargetFields UnityEngine::Timeline::AnimationPlayableAsset::get_matchTargetFields() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("get_matchTargetFields");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_matchTargetFields", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::MatchTargetFields, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_matchTargetFields
void UnityEngine::Timeline::AnimationPlayableAsset::set_matchTargetFields(UnityEngine::Timeline::MatchTargetFields value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("set_matchTargetFields");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_matchTargetFields", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_removeStartOffset
bool UnityEngine::Timeline::AnimationPlayableAsset::get_removeStartOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("get_removeStartOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_removeStartOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_removeStartOffset
void UnityEngine::Timeline::AnimationPlayableAsset::set_removeStartOffset(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("set_removeStartOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_removeStartOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_applyFootIK
bool UnityEngine::Timeline::AnimationPlayableAsset::get_applyFootIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("get_applyFootIK");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_applyFootIK", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_applyFootIK
void UnityEngine::Timeline::AnimationPlayableAsset::set_applyFootIK(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("set_applyFootIK");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_applyFootIK", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_loop
UnityEngine::Timeline::AnimationPlayableAsset::LoopMode UnityEngine::Timeline::AnimationPlayableAsset::get_loop() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("get_loop");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_loop", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::AnimationPlayableAsset::LoopMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_loop
void UnityEngine::Timeline::AnimationPlayableAsset::set_loop(UnityEngine::Timeline::AnimationPlayableAsset::LoopMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("set_loop");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_loop", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_hasRootTransforms
bool UnityEngine::Timeline::AnimationPlayableAsset::get_hasRootTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("get_hasRootTransforms");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_hasRootTransforms", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_appliedOffsetMode
UnityEngine::Timeline::AppliedOffsetMode UnityEngine::Timeline::AnimationPlayableAsset::get_appliedOffsetMode() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("get_appliedOffsetMode");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_appliedOffsetMode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::AppliedOffsetMode, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_appliedOffsetMode
void UnityEngine::Timeline::AnimationPlayableAsset::set_appliedOffsetMode(UnityEngine::Timeline::AppliedOffsetMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("set_appliedOffsetMode");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_appliedOffsetMode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_clip
UnityEngine::AnimationClip* UnityEngine::Timeline::AnimationPlayableAsset::get_clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("get_clip");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_clip", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AnimationClip*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.set_clip
void UnityEngine::Timeline::AnimationPlayableAsset::set_clip(UnityEngine::AnimationClip* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("set_clip");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_clip", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.CreatePlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationPlayableAsset::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::AnimationClip* clip, UnityEngine::Vector3 positionOffset, UnityEngine::Vector3 eulerOffset, bool removeStartOffset, UnityEngine::Timeline::AppliedOffsetMode mode, bool applyFootIK, UnityEngine::Timeline::AnimationPlayableAsset::LoopMode loop) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("CreatePlayable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset", "CreatePlayable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(graph, clip, positionOffset, eulerOffset, removeStartOffset, mode, applyFootIK, loop)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, clip, positionOffset, eulerOffset, removeStartOffset, mode, applyFootIK, loop);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.ShouldApplyOffset
bool UnityEngine::Timeline::AnimationPlayableAsset::ShouldApplyOffset(UnityEngine::Timeline::AppliedOffsetMode mode, UnityEngine::AnimationClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("ShouldApplyOffset");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset", "ShouldApplyOffset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(mode, clip)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mode, clip);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.ShouldApplyScaleRemove
bool UnityEngine::Timeline::AnimationPlayableAsset::ShouldApplyScaleRemove(UnityEngine::Timeline::AppliedOffsetMode mode) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("ShouldApplyScaleRemove");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset", "ShouldApplyScaleRemove", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(mode)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mode);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.ResetOffsets
void UnityEngine::Timeline::AnimationPlayableAsset::ResetOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("ResetOffsets");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ResetOffsets", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.HasRootTransforms
bool UnityEngine::Timeline::AnimationPlayableAsset::HasRootTransforms(UnityEngine::AnimationClip* clip) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("HasRootTransforms");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset", "HasRootTransforms", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(clip)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, clip);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.OnUpgradeFromVersion
void UnityEngine::Timeline::AnimationPlayableAsset::OnUpgradeFromVersion(int oldVersion) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("OnUpgradeFromVersion");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnUpgradeFromVersion", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(oldVersion)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, oldVersion);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_duration
double UnityEngine::Timeline::AnimationPlayableAsset::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("get_duration");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_outputs
System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* UnityEngine::Timeline::AnimationPlayableAsset::get_outputs() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("get_outputs");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_outputs", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>*, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.CreatePlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::AnimationPlayableAsset::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("CreatePlayable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreatePlayable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(graph, go)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.get_clipCaps
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::AnimationPlayableAsset::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("get_clipCaps");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_clipCaps", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.GatherProperties
void UnityEngine::Timeline::AnimationPlayableAsset::GatherProperties(UnityEngine::Playables::PlayableDirector* director, UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("GatherProperties");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GatherProperties", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(director, driver)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
void UnityEngine::Timeline::AnimationPlayableAsset::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset.UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
void UnityEngine::Timeline::AnimationPlayableAsset::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext("UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.AnimationPlayableAsset..cctor
void UnityEngine::Timeline::AnimationPlayableAsset::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("AnimationPlayableAsset").WithContext(".cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "AnimationPlayableAsset", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
