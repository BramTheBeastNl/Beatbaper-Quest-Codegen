// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.Timeline.ControlPlayableAsset
#include "UnityEngine/Timeline/ControlPlayableAsset.hpp"
// Including type: UnityEngine.Timeline.ControlPlayableAsset/<GetControlableScripts>d__38
#include "UnityEngine/Timeline/ControlPlayableAsset_-GetControlableScripts-d__38.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
// Including type: UnityEngine.Timeline.IPropertyCollector
#include "UnityEngine/Timeline/IPropertyCollector.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 k_MaxRandInt
int UnityEngine::Timeline::ControlPlayableAsset::_get_k_MaxRandInt() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("_get_k_MaxRandInt");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("UnityEngine.Timeline", "ControlPlayableAsset", "k_MaxRandInt"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 k_MaxRandInt
void UnityEngine::Timeline::ControlPlayableAsset::_set_k_MaxRandInt(int value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("_set_k_MaxRandInt");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "k_MaxRandInt", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Playables.PlayableDirector> k_EmptyDirectorsList
System::Collections::Generic::List_1<UnityEngine::Playables::PlayableDirector*>* UnityEngine::Timeline::ControlPlayableAsset::_get_k_EmptyDirectorsList() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("_get_k_EmptyDirectorsList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<UnityEngine::Playables::PlayableDirector*>*>("UnityEngine.Timeline", "ControlPlayableAsset", "k_EmptyDirectorsList"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.Playables.PlayableDirector> k_EmptyDirectorsList
void UnityEngine::Timeline::ControlPlayableAsset::_set_k_EmptyDirectorsList(System::Collections::Generic::List_1<UnityEngine::Playables::PlayableDirector*>* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("_set_k_EmptyDirectorsList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "k_EmptyDirectorsList", value));
}
// Autogenerated static field getter
// Get static field: static private readonly System.Collections.Generic.List`1<UnityEngine.ParticleSystem> k_EmptyParticlesList
System::Collections::Generic::List_1<UnityEngine::ParticleSystem*>* UnityEngine::Timeline::ControlPlayableAsset::_get_k_EmptyParticlesList() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("_get_k_EmptyParticlesList");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::List_1<UnityEngine::ParticleSystem*>*>("UnityEngine.Timeline", "ControlPlayableAsset", "k_EmptyParticlesList"));
}
// Autogenerated static field setter
// Set static field: static private readonly System.Collections.Generic.List`1<UnityEngine.ParticleSystem> k_EmptyParticlesList
void UnityEngine::Timeline::ControlPlayableAsset::_set_k_EmptyParticlesList(System::Collections::Generic::List_1<UnityEngine::ParticleSystem*>* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("_set_k_EmptyParticlesList");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "k_EmptyParticlesList", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.HashSet`1<UnityEngine.Playables.PlayableDirector> s_ProcessedDirectors
System::Collections::Generic::HashSet_1<UnityEngine::Playables::PlayableDirector*>* UnityEngine::Timeline::ControlPlayableAsset::_get_s_ProcessedDirectors() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("_get_s_ProcessedDirectors");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::HashSet_1<UnityEngine::Playables::PlayableDirector*>*>("UnityEngine.Timeline", "ControlPlayableAsset", "s_ProcessedDirectors"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.HashSet`1<UnityEngine.Playables.PlayableDirector> s_ProcessedDirectors
void UnityEngine::Timeline::ControlPlayableAsset::_set_s_ProcessedDirectors(System::Collections::Generic::HashSet_1<UnityEngine::Playables::PlayableDirector*>* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("_set_s_ProcessedDirectors");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "s_ProcessedDirectors", value));
}
// Autogenerated static field getter
// Get static field: static private System.Collections.Generic.HashSet`1<UnityEngine.GameObject> s_CreatedPrefabs
System::Collections::Generic::HashSet_1<UnityEngine::GameObject*>* UnityEngine::Timeline::ControlPlayableAsset::_get_s_CreatedPrefabs() {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("_get_s_CreatedPrefabs");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Collections::Generic::HashSet_1<UnityEngine::GameObject*>*>("UnityEngine.Timeline", "ControlPlayableAsset", "s_CreatedPrefabs"));
}
// Autogenerated static field setter
// Set static field: static private System.Collections.Generic.HashSet`1<UnityEngine.GameObject> s_CreatedPrefabs
void UnityEngine::Timeline::ControlPlayableAsset::_set_s_CreatedPrefabs(System::Collections::Generic::HashSet_1<UnityEngine::GameObject*>* value) {
  static auto ___internal__logger = Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("_set_s_CreatedPrefabs");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.Timeline", "ControlPlayableAsset", "s_CreatedPrefabs", value));
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.get_controllingDirectors
bool UnityEngine::Timeline::ControlPlayableAsset::get_controllingDirectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("get_controllingDirectors");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_controllingDirectors", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.set_controllingDirectors
void UnityEngine::Timeline::ControlPlayableAsset::set_controllingDirectors(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("set_controllingDirectors");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_controllingDirectors", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.get_controllingParticles
bool UnityEngine::Timeline::ControlPlayableAsset::get_controllingParticles() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("get_controllingParticles");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_controllingParticles", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.set_controllingParticles
void UnityEngine::Timeline::ControlPlayableAsset::set_controllingParticles(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("set_controllingParticles");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_controllingParticles", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.OnEnable
void UnityEngine::Timeline::ControlPlayableAsset::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("OnEnable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.ConnectPlayablesToMixer
UnityEngine::Playables::Playable UnityEngine::Timeline::ControlPlayableAsset::ConnectPlayablesToMixer(UnityEngine::Playables::PlayableGraph graph, System::Collections::Generic::List_1<UnityEngine::Playables::Playable>* playables) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("ConnectPlayablesToMixer");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "ConnectPlayablesToMixer", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(graph, playables)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, playables);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.CreateActivationPlayable
void UnityEngine::Timeline::ControlPlayableAsset::CreateActivationPlayable(UnityEngine::GameObject* root, UnityEngine::Playables::PlayableGraph graph, System::Collections::Generic::List_1<UnityEngine::Playables::Playable>* outplayables) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("CreateActivationPlayable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateActivationPlayable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(root, graph, outplayables)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, root, graph, outplayables);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.SearchHiearchyAndConnectParticleSystem
void UnityEngine::Timeline::ControlPlayableAsset::SearchHiearchyAndConnectParticleSystem(System::Collections::Generic::IEnumerable_1<UnityEngine::ParticleSystem*>* particleSystems, UnityEngine::Playables::PlayableGraph graph, System::Collections::Generic::List_1<UnityEngine::Playables::Playable>* outplayables) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("SearchHiearchyAndConnectParticleSystem");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SearchHiearchyAndConnectParticleSystem", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(particleSystems, graph, outplayables)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, particleSystems, graph, outplayables);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.SearchHierarchyAndConnectDirector
void UnityEngine::Timeline::ControlPlayableAsset::SearchHierarchyAndConnectDirector(System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableDirector*>* directors, UnityEngine::Playables::PlayableGraph graph, System::Collections::Generic::List_1<UnityEngine::Playables::Playable>* outplayables, bool disableSelfReferences) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("SearchHierarchyAndConnectDirector");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SearchHierarchyAndConnectDirector", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(directors, graph, outplayables, disableSelfReferences)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, directors, graph, outplayables, disableSelfReferences);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.SearchHierarchyAndConnectControlableScripts
void UnityEngine::Timeline::ControlPlayableAsset::SearchHierarchyAndConnectControlableScripts(System::Collections::Generic::IEnumerable_1<UnityEngine::MonoBehaviour*>* controlableScripts, UnityEngine::Playables::PlayableGraph graph, System::Collections::Generic::List_1<UnityEngine::Playables::Playable>* outplayables) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("SearchHierarchyAndConnectControlableScripts");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "SearchHierarchyAndConnectControlableScripts", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(controlableScripts, graph, outplayables)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, controlableScripts, graph, outplayables);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.ConnectMixerAndPlayable
void UnityEngine::Timeline::ControlPlayableAsset::ConnectMixerAndPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::Playable mixer, UnityEngine::Playables::Playable playable, int portIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("ConnectMixerAndPlayable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "ConnectMixerAndPlayable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(graph, mixer, playable, portIndex)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, mixer, playable, portIndex);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.GetControlableScripts
System::Collections::Generic::IEnumerable_1<UnityEngine::MonoBehaviour*>* UnityEngine::Timeline::ControlPlayableAsset::GetControlableScripts(UnityEngine::GameObject* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("GetControlableScripts");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "GetControlableScripts", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(root)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerable_1<UnityEngine::MonoBehaviour*>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, root);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.UpdateDurationAndLoopFlag
void UnityEngine::Timeline::ControlPlayableAsset::UpdateDurationAndLoopFlag(System::Collections::Generic::IList_1<UnityEngine::Playables::PlayableDirector*>* directors, System::Collections::Generic::IList_1<UnityEngine::ParticleSystem*>* particleSystems) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("UpdateDurationAndLoopFlag");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateDurationAndLoopFlag", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(directors, particleSystems)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, directors, particleSystems);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.GetParticleSystemRoots
System::Collections::Generic::IList_1<UnityEngine::ParticleSystem*>* UnityEngine::Timeline::ControlPlayableAsset::GetParticleSystemRoots(UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("GetParticleSystemRoots");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetParticleSystemRoots", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(go)));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IList_1<UnityEngine::ParticleSystem*>*, false>(this, ___internal__method, go);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.GetParticleSystemRoots
void UnityEngine::Timeline::ControlPlayableAsset::GetParticleSystemRoots(UnityEngine::Transform* t, System::Collections::Generic::ICollection_1<UnityEngine::ParticleSystem*>* roots) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("GetParticleSystemRoots");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "GetParticleSystemRoots", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(t, roots)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, t, roots);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.PreviewParticles
void UnityEngine::Timeline::ControlPlayableAsset::PreviewParticles(UnityEngine::Timeline::IPropertyCollector* driver, System::Collections::Generic::IEnumerable_1<UnityEngine::ParticleSystem*>* particles) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("PreviewParticles");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "PreviewParticles", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(driver, particles)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, driver, particles);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.PreviewActivation
void UnityEngine::Timeline::ControlPlayableAsset::PreviewActivation(UnityEngine::Timeline::IPropertyCollector* driver, System::Collections::Generic::IEnumerable_1<UnityEngine::GameObject*>* objects) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("PreviewActivation");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "PreviewActivation", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(driver, objects)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, driver, objects);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.PreviewTimeControl
void UnityEngine::Timeline::ControlPlayableAsset::PreviewTimeControl(UnityEngine::Timeline::IPropertyCollector* driver, UnityEngine::Playables::PlayableDirector* director, System::Collections::Generic::IEnumerable_1<UnityEngine::MonoBehaviour*>* scripts) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("PreviewTimeControl");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "PreviewTimeControl", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(driver, director, scripts)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, driver, director, scripts);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.PreviewDirectors
void UnityEngine::Timeline::ControlPlayableAsset::PreviewDirectors(UnityEngine::Timeline::IPropertyCollector* driver, System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableDirector*>* directors) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("PreviewDirectors");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", "PreviewDirectors", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(driver, directors)));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, driver, directors);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.get_duration
double UnityEngine::Timeline::ControlPlayableAsset::get_duration() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("get_duration");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_duration", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.get_clipCaps
UnityEngine::Timeline::ClipCaps UnityEngine::Timeline::ControlPlayableAsset::get_clipCaps() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("get_clipCaps");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_clipCaps", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Timeline::ClipCaps, false>(this, ___internal__method);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.CreatePlayable
UnityEngine::Playables::Playable UnityEngine::Timeline::ControlPlayableAsset::CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("CreatePlayable");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreatePlayable", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(graph, go)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::Playable, false>(this, ___internal__method, graph, go);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset.GatherProperties
void UnityEngine::Timeline::ControlPlayableAsset::GatherProperties(UnityEngine::Playables::PlayableDirector* director, UnityEngine::Timeline::IPropertyCollector* driver) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext("GatherProperties");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GatherProperties", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(director, driver)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, director, driver);
}
// Autogenerated method: UnityEngine.Timeline.ControlPlayableAsset..cctor
void UnityEngine::Timeline::ControlPlayableAsset::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("ControlPlayableAsset").WithContext(".cctor");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "ControlPlayableAsset", ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
