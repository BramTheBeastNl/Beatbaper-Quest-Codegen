// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.DirectorControlPlayable
#include "UnityEngine/Timeline/DirectorControlPlayable.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: UnityEngine.Playables.ScriptPlayable`1
#include "UnityEngine/Playables/ScriptPlayable_1.hpp"
// Including type: UnityEngine.Playables.PlayableGraph
#include "UnityEngine/Playables/PlayableGraph.hpp"
// Including type: UnityEngine.Playables.Playable
#include "UnityEngine/Playables/Playable.hpp"
// Including type: UnityEngine.Playables.FrameData
#include "UnityEngine/Playables/FrameData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Timeline.DirectorControlPlayable.Create
UnityEngine::Playables::ScriptPlayable_1<UnityEngine::Timeline::DirectorControlPlayable*> UnityEngine::Timeline::DirectorControlPlayable::Create(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::PlayableDirector* director) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("DirectorControlPlayable").WithContext("Create");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.Timeline", "DirectorControlPlayable", "Create", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(graph, director)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Playables::ScriptPlayable_1<UnityEngine::Timeline::DirectorControlPlayable*>, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, graph, director);
}
// Autogenerated method: UnityEngine.Timeline.DirectorControlPlayable.SyncSpeed
void UnityEngine::Timeline::DirectorControlPlayable::SyncSpeed(double speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("DirectorControlPlayable").WithContext("SyncSpeed");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SyncSpeed", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(speed)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, speed);
}
// Autogenerated method: UnityEngine.Timeline.DirectorControlPlayable.SyncPlayState
void UnityEngine::Timeline::DirectorControlPlayable::SyncPlayState(UnityEngine::Playables::PlayableGraph graph, double playableTime) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("DirectorControlPlayable").WithContext("SyncPlayState");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SyncPlayState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(graph, playableTime)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, graph, playableTime);
}
// Autogenerated method: UnityEngine.Timeline.DirectorControlPlayable.DetectDiscontinuity
bool UnityEngine::Timeline::DirectorControlPlayable::DetectDiscontinuity(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("DirectorControlPlayable").WithContext("DetectDiscontinuity");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DetectDiscontinuity", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(playable, info)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, playable, info);
}
// Autogenerated method: UnityEngine.Timeline.DirectorControlPlayable.DetectOutOfSync
bool UnityEngine::Timeline::DirectorControlPlayable::DetectOutOfSync(UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("DirectorControlPlayable").WithContext("DetectOutOfSync");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "DetectOutOfSync", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(playable)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, playable);
}
// Autogenerated method: UnityEngine.Timeline.DirectorControlPlayable.UpdateTime
void UnityEngine::Timeline::DirectorControlPlayable::UpdateTime(UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("DirectorControlPlayable").WithContext("UpdateTime");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdateTime", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(playable)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: UnityEngine.Timeline.DirectorControlPlayable.OnPlayableDestroy
void UnityEngine::Timeline::DirectorControlPlayable::OnPlayableDestroy(UnityEngine::Playables::Playable playable) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("DirectorControlPlayable").WithContext("OnPlayableDestroy");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnPlayableDestroy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(playable)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable);
}
// Autogenerated method: UnityEngine.Timeline.DirectorControlPlayable.PrepareFrame
void UnityEngine::Timeline::DirectorControlPlayable::PrepareFrame(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("DirectorControlPlayable").WithContext("PrepareFrame");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "PrepareFrame", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(playable, info)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable, info);
}
// Autogenerated method: UnityEngine.Timeline.DirectorControlPlayable.OnBehaviourPlay
void UnityEngine::Timeline::DirectorControlPlayable::OnBehaviourPlay(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("DirectorControlPlayable").WithContext("OnBehaviourPlay");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnBehaviourPlay", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(playable, info)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable, info);
}
// Autogenerated method: UnityEngine.Timeline.DirectorControlPlayable.OnBehaviourPause
void UnityEngine::Timeline::DirectorControlPlayable::OnBehaviourPause(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("DirectorControlPlayable").WithContext("OnBehaviourPause");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnBehaviourPause", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(playable, info)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable, info);
}
// Autogenerated method: UnityEngine.Timeline.DirectorControlPlayable.ProcessFrame
void UnityEngine::Timeline::DirectorControlPlayable::ProcessFrame(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::Timeline").WithContext("DirectorControlPlayable").WithContext("ProcessFrame");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ProcessFrame", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(playable, info, playerData)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, playable, info, playerData);
}
