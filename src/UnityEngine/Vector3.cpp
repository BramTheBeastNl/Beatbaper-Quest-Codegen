// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kEpsilon
float UnityEngine::Vector3::_get_kEpsilon() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngine", "Vector3", "kEpsilon"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kEpsilon
void UnityEngine::Vector3::_set_kEpsilon(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "kEpsilon", value));
}
// Autogenerated static field getter
// Get static field: static public System.Single kEpsilonNormalSqrt
float UnityEngine::Vector3::_get_kEpsilonNormalSqrt() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngine", "Vector3", "kEpsilonNormalSqrt"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kEpsilonNormalSqrt
void UnityEngine::Vector3::_set_kEpsilonNormalSqrt(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "kEpsilonNormalSqrt", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 zeroVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_zeroVector() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "zeroVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 zeroVector
void UnityEngine::Vector3::_set_zeroVector(UnityEngine::Vector3 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "zeroVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 oneVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_oneVector() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "oneVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 oneVector
void UnityEngine::Vector3::_set_oneVector(UnityEngine::Vector3 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "oneVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 upVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_upVector() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "upVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 upVector
void UnityEngine::Vector3::_set_upVector(UnityEngine::Vector3 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "upVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 downVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_downVector() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "downVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 downVector
void UnityEngine::Vector3::_set_downVector(UnityEngine::Vector3 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "downVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 leftVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_leftVector() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "leftVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 leftVector
void UnityEngine::Vector3::_set_leftVector(UnityEngine::Vector3 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "leftVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 rightVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_rightVector() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "rightVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 rightVector
void UnityEngine::Vector3::_set_rightVector(UnityEngine::Vector3 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "rightVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 forwardVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_forwardVector() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "forwardVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 forwardVector
void UnityEngine::Vector3::_set_forwardVector(UnityEngine::Vector3 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "forwardVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 backVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_backVector() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "backVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 backVector
void UnityEngine::Vector3::_set_backVector(UnityEngine::Vector3 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "backVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 positiveInfinityVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_positiveInfinityVector() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "positiveInfinityVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 positiveInfinityVector
void UnityEngine::Vector3::_set_positiveInfinityVector(UnityEngine::Vector3 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "positiveInfinityVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector3 negativeInfinityVector
UnityEngine::Vector3 UnityEngine::Vector3::_get_negativeInfinityVector() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector3>("UnityEngine", "Vector3", "negativeInfinityVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector3 negativeInfinityVector
void UnityEngine::Vector3::_set_negativeInfinityVector(UnityEngine::Vector3 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector3", "negativeInfinityVector", value));
}
// Autogenerated method: UnityEngine.Vector3.Slerp
UnityEngine::Vector3 UnityEngine::Vector3::Slerp(UnityEngine::Vector3 a, UnityEngine::Vector3 b, float t) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "Slerp", a, b, t));
}
// Autogenerated method: UnityEngine.Vector3.OrthoNormalize2
void UnityEngine::Vector3::OrthoNormalize2(UnityEngine::Vector3& a, UnityEngine::Vector3& b) {
  THROW_UNLESS(il2cpp_utils::RunMethod("UnityEngine", "Vector3", "OrthoNormalize2", a, b));
}
// Autogenerated method: UnityEngine.Vector3.OrthoNormalize
void UnityEngine::Vector3::OrthoNormalize(UnityEngine::Vector3& normal, UnityEngine::Vector3& tangent) {
  THROW_UNLESS(il2cpp_utils::RunMethod("UnityEngine", "Vector3", "OrthoNormalize", normal, tangent));
}
// Autogenerated method: UnityEngine.Vector3.RotateTowards
UnityEngine::Vector3 UnityEngine::Vector3::RotateTowards(UnityEngine::Vector3 current, UnityEngine::Vector3 target, float maxRadiansDelta, float maxMagnitudeDelta) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "RotateTowards", current, target, maxRadiansDelta, maxMagnitudeDelta));
}
// Autogenerated method: UnityEngine.Vector3.Lerp
UnityEngine::Vector3 UnityEngine::Vector3::Lerp(UnityEngine::Vector3 a, UnityEngine::Vector3 b, float t) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "Lerp", a, b, t));
}
// Autogenerated method: UnityEngine.Vector3.LerpUnclamped
UnityEngine::Vector3 UnityEngine::Vector3::LerpUnclamped(UnityEngine::Vector3 a, UnityEngine::Vector3 b, float t) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "LerpUnclamped", a, b, t));
}
// Autogenerated method: UnityEngine.Vector3.SmoothDamp
UnityEngine::Vector3 UnityEngine::Vector3::SmoothDamp(UnityEngine::Vector3 current, UnityEngine::Vector3 target, UnityEngine::Vector3& currentVelocity, float smoothTime) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "SmoothDamp", current, target, currentVelocity, smoothTime));
}
// Autogenerated method: UnityEngine.Vector3.SmoothDamp
UnityEngine::Vector3 UnityEngine::Vector3::SmoothDamp(UnityEngine::Vector3 current, UnityEngine::Vector3 target, UnityEngine::Vector3& currentVelocity, float smoothTime, float maxSpeed, float deltaTime) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "SmoothDamp", current, target, currentVelocity, smoothTime, maxSpeed, deltaTime));
}
// Autogenerated method: UnityEngine.Vector3.get_Item
float UnityEngine::Vector3::get_Item(int index) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(*this, "get_Item", index));
}
// Autogenerated method: UnityEngine.Vector3.set_Item
void UnityEngine::Vector3::set_Item(int index, float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_Item", index, value));
}
// Autogenerated method: UnityEngine.Vector3..ctor
// ABORTED elsewhere.  UnityEngine::Vector3::Vector3(float x, float y, float z)
// Autogenerated method: UnityEngine.Vector3..ctor
UnityEngine::Vector3::Vector3(float x, float y) {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, ".ctor", x, y));
}
// Autogenerated method: UnityEngine.Vector3.Scale
UnityEngine::Vector3 UnityEngine::Vector3::Scale(UnityEngine::Vector3 a, UnityEngine::Vector3 b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "Scale", a, b));
}
// Autogenerated method: UnityEngine.Vector3.Scale
void UnityEngine::Vector3::Scale(UnityEngine::Vector3 scale) {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "Scale", scale));
}
// Autogenerated method: UnityEngine.Vector3.Cross
UnityEngine::Vector3 UnityEngine::Vector3::Cross(UnityEngine::Vector3 lhs, UnityEngine::Vector3 rhs) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "Cross", lhs, rhs));
}
// Autogenerated method: UnityEngine.Vector3.Normalize
UnityEngine::Vector3 UnityEngine::Vector3::Normalize(UnityEngine::Vector3 value) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "Normalize", value));
}
// Autogenerated method: UnityEngine.Vector3.Normalize
void UnityEngine::Vector3::Normalize() {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "Normalize"));
}
// Autogenerated method: UnityEngine.Vector3.get_normalized
UnityEngine::Vector3 UnityEngine::Vector3::get_normalized() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>(*this, "get_normalized"));
}
// Autogenerated method: UnityEngine.Vector3.Dot
float UnityEngine::Vector3::Dot(UnityEngine::Vector3 lhs, UnityEngine::Vector3 rhs) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("UnityEngine", "Vector3", "Dot", lhs, rhs));
}
// Autogenerated method: UnityEngine.Vector3.Project
UnityEngine::Vector3 UnityEngine::Vector3::Project(UnityEngine::Vector3 vector, UnityEngine::Vector3 onNormal) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "Project", vector, onNormal));
}
// Autogenerated method: UnityEngine.Vector3.Angle
float UnityEngine::Vector3::Angle(UnityEngine::Vector3 from, UnityEngine::Vector3 to) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("UnityEngine", "Vector3", "Angle", from, to));
}
// Autogenerated method: UnityEngine.Vector3.Distance
float UnityEngine::Vector3::Distance(UnityEngine::Vector3 a, UnityEngine::Vector3 b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("UnityEngine", "Vector3", "Distance", a, b));
}
// Autogenerated method: UnityEngine.Vector3.ClampMagnitude
UnityEngine::Vector3 UnityEngine::Vector3::ClampMagnitude(UnityEngine::Vector3 vector, float maxLength) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "ClampMagnitude", vector, maxLength));
}
// Autogenerated method: UnityEngine.Vector3.Magnitude
float UnityEngine::Vector3::Magnitude(UnityEngine::Vector3 vector) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("UnityEngine", "Vector3", "Magnitude", vector));
}
// Autogenerated method: UnityEngine.Vector3.get_magnitude
float UnityEngine::Vector3::get_magnitude() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(*this, "get_magnitude"));
}
// Autogenerated method: UnityEngine.Vector3.SqrMagnitude
float UnityEngine::Vector3::SqrMagnitude(UnityEngine::Vector3 vector) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("UnityEngine", "Vector3", "SqrMagnitude", vector));
}
// Autogenerated method: UnityEngine.Vector3.get_sqrMagnitude
float UnityEngine::Vector3::get_sqrMagnitude() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(*this, "get_sqrMagnitude"));
}
// Autogenerated method: UnityEngine.Vector3.Min
UnityEngine::Vector3 UnityEngine::Vector3::Min(UnityEngine::Vector3 lhs, UnityEngine::Vector3 rhs) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "Min", lhs, rhs));
}
// Autogenerated method: UnityEngine.Vector3.Max
UnityEngine::Vector3 UnityEngine::Vector3::Max(UnityEngine::Vector3 lhs, UnityEngine::Vector3 rhs) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "Max", lhs, rhs));
}
// Autogenerated method: UnityEngine.Vector3.get_zero
UnityEngine::Vector3 UnityEngine::Vector3::get_zero() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "get_zero"));
}
// Autogenerated method: UnityEngine.Vector3.get_one
UnityEngine::Vector3 UnityEngine::Vector3::get_one() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "get_one"));
}
// Autogenerated method: UnityEngine.Vector3.get_forward
UnityEngine::Vector3 UnityEngine::Vector3::get_forward() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "get_forward"));
}
// Autogenerated method: UnityEngine.Vector3.get_back
UnityEngine::Vector3 UnityEngine::Vector3::get_back() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "get_back"));
}
// Autogenerated method: UnityEngine.Vector3.get_up
UnityEngine::Vector3 UnityEngine::Vector3::get_up() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "get_up"));
}
// Autogenerated method: UnityEngine.Vector3.get_down
UnityEngine::Vector3 UnityEngine::Vector3::get_down() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "get_down"));
}
// Autogenerated method: UnityEngine.Vector3.get_left
UnityEngine::Vector3 UnityEngine::Vector3::get_left() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "get_left"));
}
// Autogenerated method: UnityEngine.Vector3.get_right
UnityEngine::Vector3 UnityEngine::Vector3::get_right() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "get_right"));
}
// Autogenerated method: UnityEngine.Vector3.get_positiveInfinity
UnityEngine::Vector3 UnityEngine::Vector3::get_positiveInfinity() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "get_positiveInfinity"));
}
// Autogenerated method: UnityEngine.Vector3.ToString
::Il2CppString* UnityEngine::Vector3::ToString(::Il2CppString* format) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(*this, "ToString", format));
}
// Autogenerated method: UnityEngine.Vector3..cctor
void UnityEngine::Vector3::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("UnityEngine", "Vector3", ".cctor"));
}
// Autogenerated method: UnityEngine.Vector3.Slerp_Injected
void UnityEngine::Vector3::Slerp_Injected(UnityEngine::Vector3& a, UnityEngine::Vector3& b, float t, UnityEngine::Vector3& ret) {
  THROW_UNLESS(il2cpp_utils::RunMethod("UnityEngine", "Vector3", "Slerp_Injected", a, b, t, ret));
}
// Autogenerated method: UnityEngine.Vector3.RotateTowards_Injected
void UnityEngine::Vector3::RotateTowards_Injected(UnityEngine::Vector3& current, UnityEngine::Vector3& target, float maxRadiansDelta, float maxMagnitudeDelta, UnityEngine::Vector3& ret) {
  THROW_UNLESS(il2cpp_utils::RunMethod("UnityEngine", "Vector3", "RotateTowards_Injected", current, target, maxRadiansDelta, maxMagnitudeDelta, ret));
}
// Autogenerated method: UnityEngine.Vector3.GetHashCode
int UnityEngine::Vector3::GetHashCode() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(*this, "GetHashCode"));
}
// Autogenerated method: UnityEngine.Vector3.Equals
bool UnityEngine::Vector3::Equals(::Il2CppObject* other) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "Equals", other));
}
// Autogenerated method: UnityEngine.Vector3.Equals
bool UnityEngine::Vector3::Equals(UnityEngine::Vector3 other) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "Equals", other));
}
// Autogenerated method: UnityEngine.Vector3.ToString
::Il2CppString* UnityEngine::Vector3::ToString() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(*this, "ToString"));
}
// Autogenerated method: UnityEngine.Vector3.op_Addition
UnityEngine::Vector3 UnityEngine::operator+(const UnityEngine::Vector3& a, const UnityEngine::Vector3& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "op_Addition", a, b));
}
// Autogenerated method: UnityEngine.Vector3.op_Subtraction
UnityEngine::Vector3 UnityEngine::operator-(const UnityEngine::Vector3& a, const UnityEngine::Vector3& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "op_Subtraction", a, b));
}
// Autogenerated method: UnityEngine.Vector3.op_UnaryNegation
UnityEngine::Vector3 UnityEngine::operator-(const UnityEngine::Vector3& a) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "op_UnaryNegation", a));
}
// Autogenerated method: UnityEngine.Vector3.op_Multiply
UnityEngine::Vector3 UnityEngine::operator*(const UnityEngine::Vector3& a, const float& d) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "op_Multiply", a, d));
}
// Autogenerated method: UnityEngine.Vector3.op_Multiply
UnityEngine::Vector3 UnityEngine::operator*(const float& d, const UnityEngine::Vector3& a) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "op_Multiply", d, a));
}
// Autogenerated method: UnityEngine.Vector3.op_Division
UnityEngine::Vector3 UnityEngine::operator/(const UnityEngine::Vector3& a, const float& d) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine", "Vector3", "op_Division", a, d));
}
// Autogenerated method: UnityEngine.Vector3.op_Equality
bool UnityEngine::operator ==(const UnityEngine::Vector3& lhs, const UnityEngine::Vector3& rhs) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("UnityEngine", "Vector3", "op_Equality", lhs, rhs));
}
// Autogenerated method: UnityEngine.Vector3.op_Inequality
bool UnityEngine::operator !=(const UnityEngine::Vector3& lhs, const UnityEngine::Vector3& rhs) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("UnityEngine", "Vector3", "op_Inequality", lhs, rhs));
}
