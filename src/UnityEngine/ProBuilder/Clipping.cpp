// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: UnityEngine.ProBuilder.Clipping
#include "UnityEngine/ProBuilder/Clipping.hpp"
// Including type: UnityEngine.ProBuilder.Clipping/OutCode
#include "UnityEngine/ProBuilder/Clipping_OutCode.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.ProBuilder.Clipping.ComputeOutCode
UnityEngine::ProBuilder::Clipping::OutCode UnityEngine::ProBuilder::Clipping::ComputeOutCode(UnityEngine::Rect rect, float x, float y) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::ProBuilder").WithContext("Clipping").WithContext("ComputeOutCode");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.ProBuilder", "Clipping", "ComputeOutCode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rect, x, y)));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::ProBuilder::Clipping::OutCode, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rect, x, y);
}
// Autogenerated method: UnityEngine.ProBuilder.Clipping.RectContainsLineSegment
bool UnityEngine::ProBuilder::Clipping::RectContainsLineSegment(UnityEngine::Rect rect, float x0, float y0, float x1, float y1) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine::ProBuilder").WithContext("Clipping").WithContext("RectContainsLineSegment");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("UnityEngine.ProBuilder", "Clipping", "RectContainsLineSegment", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(rect, x0, y0, x1, y1)));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rect, x0, y0, x1, y1);
}
