// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ProBuilder.MeshOperations.CombineMeshes
#include "UnityEngine/ProBuilder/MeshOperations/CombineMeshes.hpp"
// Including type: UnityEngine.ProBuilder.MeshOperations.CombineMeshes/<>c
#include "UnityEngine/ProBuilder/MeshOperations/CombineMeshes_--c.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.ProBuilder.ProBuilderMesh
#include "UnityEngine/ProBuilder/ProBuilderMesh.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.ProBuilder.Vertex
#include "UnityEngine/ProBuilder/Vertex.hpp"
// Including type: UnityEngine.ProBuilder.Face
#include "UnityEngine/ProBuilder/Face.hpp"
// Including type: UnityEngine.ProBuilder.SharedVertex
#include "UnityEngine/ProBuilder/SharedVertex.hpp"
// Including type: UnityEngine.Material
#include "UnityEngine/Material.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.ProBuilder.MeshOperations.CombineMeshes.Combine
System::Collections::Generic::List_1<UnityEngine::ProBuilder::ProBuilderMesh*>* UnityEngine::ProBuilder::MeshOperations::CombineMeshes::Combine(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::ProBuilderMesh*>* meshes) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::List_1<UnityEngine::ProBuilder::ProBuilderMesh*>*>("UnityEngine.ProBuilder.MeshOperations", "CombineMeshes", "Combine", meshes));
}
// Autogenerated method: UnityEngine.ProBuilder.MeshOperations.CombineMeshes.Combine
System::Collections::Generic::List_1<UnityEngine::ProBuilder::ProBuilderMesh*>* UnityEngine::ProBuilder::MeshOperations::CombineMeshes::Combine(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::ProBuilderMesh*>* meshes, UnityEngine::ProBuilder::ProBuilderMesh* meshTarget) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::List_1<UnityEngine::ProBuilder::ProBuilderMesh*>*>("UnityEngine.ProBuilder.MeshOperations", "CombineMeshes", "Combine", meshes, meshTarget));
}
// Autogenerated method: UnityEngine.ProBuilder.MeshOperations.CombineMeshes.CombineToNewMeshes
System::Collections::Generic::List_1<UnityEngine::ProBuilder::ProBuilderMesh*>* UnityEngine::ProBuilder::MeshOperations::CombineMeshes::CombineToNewMeshes(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::ProBuilderMesh*>* meshes) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::List_1<UnityEngine::ProBuilder::ProBuilderMesh*>*>("UnityEngine.ProBuilder.MeshOperations", "CombineMeshes", "CombineToNewMeshes", meshes));
}
// Autogenerated method: UnityEngine.ProBuilder.MeshOperations.CombineMeshes.AccumulateMeshesInfo
void UnityEngine::ProBuilder::MeshOperations::CombineMeshes::AccumulateMeshesInfo(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::ProBuilderMesh*>* meshes, int offset, System::Collections::Generic::List_1<UnityEngine::ProBuilder::Vertex*>*& vertices, System::Collections::Generic::List_1<UnityEngine::ProBuilder::Face*>*& faces, System::Collections::Generic::List_1<UnityEngine::ProBuilder::Face*>*& autoUvFaces, System::Collections::Generic::List_1<UnityEngine::ProBuilder::SharedVertex*>*& sharedVertices, System::Collections::Generic::List_1<UnityEngine::ProBuilder::SharedVertex*>*& sharedTextures, System::Collections::Generic::List_1<UnityEngine::Material*>*& materialMap, UnityEngine::Transform* targetTransform) {
  THROW_UNLESS(il2cpp_utils::RunMethod("UnityEngine.ProBuilder.MeshOperations", "CombineMeshes", "AccumulateMeshesInfo", meshes, offset, vertices, faces, autoUvFaces, sharedVertices, sharedTextures, materialMap, targetTransform));
}
// Autogenerated method: UnityEngine.ProBuilder.MeshOperations.CombineMeshes.CreateMeshFromSplit
UnityEngine::ProBuilder::ProBuilderMesh* UnityEngine::ProBuilder::MeshOperations::CombineMeshes::CreateMeshFromSplit(System::Collections::Generic::List_1<UnityEngine::ProBuilder::Vertex*>* vertices, System::Collections::Generic::List_1<UnityEngine::ProBuilder::Face*>* faces, System::Collections::Generic::Dictionary_2<int, int>* sharedVertexLookup, System::Collections::Generic::Dictionary_2<int, int>* sharedTextureLookup, System::Collections::Generic::Dictionary_2<int, int>* remap, ::Array<UnityEngine::Material*>* materials) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::ProBuilder::ProBuilderMesh*>("UnityEngine.ProBuilder.MeshOperations", "CombineMeshes", "CreateMeshFromSplit", vertices, faces, sharedVertexLookup, sharedTextureLookup, remap, materials));
}
// Autogenerated method: UnityEngine.ProBuilder.MeshOperations.CombineMeshes.SplitByMaxVertexCount
System::Collections::Generic::List_1<UnityEngine::ProBuilder::ProBuilderMesh*>* UnityEngine::ProBuilder::MeshOperations::CombineMeshes::SplitByMaxVertexCount(System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Vertex*>* vertices, System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Face*>* faces, System::Collections::Generic::IList_1<UnityEngine::ProBuilder::SharedVertex*>* sharedVertices, System::Collections::Generic::IList_1<UnityEngine::ProBuilder::SharedVertex*>* sharedTextures, uint maxVertexCount) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::List_1<UnityEngine::ProBuilder::ProBuilderMesh*>*>("UnityEngine.ProBuilder.MeshOperations", "CombineMeshes", "SplitByMaxVertexCount", vertices, faces, sharedVertices, sharedTextures, maxVertexCount));
}
