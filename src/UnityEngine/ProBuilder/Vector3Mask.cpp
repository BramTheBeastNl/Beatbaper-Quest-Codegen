// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ProBuilder.Vector3Mask
#include "UnityEngine/ProBuilder/Vector3Mask.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Byte X
uint8_t UnityEngine::ProBuilder::Vector3Mask::_get_X() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("UnityEngine.ProBuilder", "Vector3Mask", "X"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte X
void UnityEngine::ProBuilder::Vector3Mask::_set_X(uint8_t value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.ProBuilder", "Vector3Mask", "X", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte Y
uint8_t UnityEngine::ProBuilder::Vector3Mask::_get_Y() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("UnityEngine.ProBuilder", "Vector3Mask", "Y"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte Y
void UnityEngine::ProBuilder::Vector3Mask::_set_Y(uint8_t value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.ProBuilder", "Vector3Mask", "Y", value));
}
// Autogenerated static field getter
// Get static field: static private System.Byte Z
uint8_t UnityEngine::ProBuilder::Vector3Mask::_get_Z() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<uint8_t>("UnityEngine.ProBuilder", "Vector3Mask", "Z"));
}
// Autogenerated static field setter
// Set static field: static private System.Byte Z
void UnityEngine::ProBuilder::Vector3Mask::_set_Z(uint8_t value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.ProBuilder", "Vector3Mask", "Z", value));
}
// Autogenerated static field getter
// Get static field: static public readonly UnityEngine.ProBuilder.Vector3Mask XYZ
UnityEngine::ProBuilder::Vector3Mask UnityEngine::ProBuilder::Vector3Mask::_get_XYZ() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::ProBuilder::Vector3Mask>("UnityEngine.ProBuilder", "Vector3Mask", "XYZ"));
}
// Autogenerated static field setter
// Set static field: static public readonly UnityEngine.ProBuilder.Vector3Mask XYZ
void UnityEngine::ProBuilder::Vector3Mask::_set_XYZ(UnityEngine::ProBuilder::Vector3Mask value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine.ProBuilder", "Vector3Mask", "XYZ", value));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.get_x
float UnityEngine::ProBuilder::Vector3Mask::get_x() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(*this, "get_x"));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.get_y
float UnityEngine::ProBuilder::Vector3Mask::get_y() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(*this, "get_y"));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.get_z
float UnityEngine::ProBuilder::Vector3Mask::get_z() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(*this, "get_z"));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask..ctor
UnityEngine::ProBuilder::Vector3Mask* UnityEngine::ProBuilder::Vector3Mask::New_ctor(UnityEngine::Vector3 v, float epsilon) {
  return (Vector3Mask*)THROW_UNLESS(il2cpp_utils::New("UnityEngine.ProBuilder", "Vector3Mask", v, epsilon));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask..ctor
UnityEngine::ProBuilder::Vector3Mask* UnityEngine::ProBuilder::Vector3Mask::New_ctor(uint8_t mask) {
  return (Vector3Mask*)THROW_UNLESS(il2cpp_utils::New("UnityEngine.ProBuilder", "Vector3Mask", mask));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.get_active
int UnityEngine::ProBuilder::Vector3Mask::get_active() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(*this, "get_active"));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.get_Item
float UnityEngine::ProBuilder::Vector3Mask::get_Item(int i) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(*this, "get_Item", i));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.set_Item
void UnityEngine::ProBuilder::Vector3Mask::set_Item(int i, float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_Item", i, value));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask..cctor
void UnityEngine::ProBuilder::Vector3Mask::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("UnityEngine.ProBuilder", "Vector3Mask", ".cctor"));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.ToString
::Il2CppString* UnityEngine::ProBuilder::Vector3Mask::ToString() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(*this, "ToString"));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.Equals
bool UnityEngine::ProBuilder::Vector3Mask::Equals(UnityEngine::ProBuilder::Vector3Mask other) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "Equals", other));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.Equals
bool UnityEngine::ProBuilder::Vector3Mask::Equals(::Il2CppObject* obj) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "Equals", obj));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.GetHashCode
int UnityEngine::ProBuilder::Vector3Mask::GetHashCode() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(*this, "GetHashCode"));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.op_BitwiseOr
UnityEngine::ProBuilder::Vector3Mask UnityEngine::ProBuilder::operator|(const UnityEngine::ProBuilder::Vector3Mask& left, const UnityEngine::ProBuilder::Vector3Mask& right) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::ProBuilder::Vector3Mask>("UnityEngine.ProBuilder", "Vector3Mask", "op_BitwiseOr", left, right));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.op_BitwiseAnd
UnityEngine::ProBuilder::Vector3Mask UnityEngine::ProBuilder::operator&(const UnityEngine::ProBuilder::Vector3Mask& left, const UnityEngine::ProBuilder::Vector3Mask& right) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::ProBuilder::Vector3Mask>("UnityEngine.ProBuilder", "Vector3Mask", "op_BitwiseAnd", left, right));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.op_ExclusiveOr
UnityEngine::ProBuilder::Vector3Mask UnityEngine::ProBuilder::operator^(const UnityEngine::ProBuilder::Vector3Mask& left, const UnityEngine::ProBuilder::Vector3Mask& right) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::ProBuilder::Vector3Mask>("UnityEngine.ProBuilder", "Vector3Mask", "op_ExclusiveOr", left, right));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.op_Multiply
UnityEngine::Vector3 UnityEngine::ProBuilder::operator*(const UnityEngine::ProBuilder::Vector3Mask& mask, const float& value) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine.ProBuilder", "Vector3Mask", "op_Multiply", mask, value));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.op_Multiply
UnityEngine::Vector3 UnityEngine::ProBuilder::operator*(const UnityEngine::Quaternion& rotation, const UnityEngine::ProBuilder::Vector3Mask& mask) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector3>("UnityEngine.ProBuilder", "Vector3Mask", "op_Multiply", rotation, mask));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.op_Equality
bool UnityEngine::ProBuilder::operator ==(const UnityEngine::ProBuilder::Vector3Mask& left, const UnityEngine::ProBuilder::Vector3Mask& right) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("UnityEngine.ProBuilder", "Vector3Mask", "op_Equality", left, right));
}
// Autogenerated method: UnityEngine.ProBuilder.Vector3Mask.op_Inequality
bool UnityEngine::ProBuilder::operator !=(const UnityEngine::ProBuilder::Vector3Mask& left, const UnityEngine::ProBuilder::Vector3Mask& right) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("UnityEngine.ProBuilder", "Vector3Mask", "op_Inequality", left, right));
}
