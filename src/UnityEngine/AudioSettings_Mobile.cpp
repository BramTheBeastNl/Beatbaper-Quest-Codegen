// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.AudioSettings/Mobile
#include "UnityEngine/AudioSettings_Mobile.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Boolean <muteState>k__BackingField
bool UnityEngine::AudioSettings::Mobile::_get_$muteState$k__BackingField() {
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<bool>("UnityEngine", "AudioSettings/Mobile", "<muteState>k__BackingField")));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean <muteState>k__BackingField
void UnityEngine::AudioSettings::Mobile::_set_$muteState$k__BackingField(bool value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioSettings/Mobile", "<muteState>k__BackingField", value));
}
// Autogenerated static field getter
// Get static field: static private System.Boolean _stopAudioOutputOnMute
bool UnityEngine::AudioSettings::Mobile::_get__stopAudioOutputOnMute() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<bool>("UnityEngine", "AudioSettings/Mobile", "_stopAudioOutputOnMute"));
}
// Autogenerated static field setter
// Set static field: static private System.Boolean _stopAudioOutputOnMute
void UnityEngine::AudioSettings::Mobile::_set__stopAudioOutputOnMute(bool value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioSettings/Mobile", "_stopAudioOutputOnMute", value));
}
// Autogenerated static field getter
// Get static field: static private System.Action`1<System.Boolean> OnMuteStateChanged
System::Action_1<bool>* UnityEngine::AudioSettings::Mobile::_get_OnMuteStateChanged() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Action_1<bool>*>("UnityEngine", "AudioSettings/Mobile", "OnMuteStateChanged"));
}
// Autogenerated static field setter
// Set static field: static private System.Action`1<System.Boolean> OnMuteStateChanged
void UnityEngine::AudioSettings::Mobile::_set_OnMuteStateChanged(System::Action_1<bool>* value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "AudioSettings/Mobile", "OnMuteStateChanged", value));
}
// Autogenerated method: UnityEngine.AudioSettings/Mobile.get_muteState
bool UnityEngine::AudioSettings::Mobile::get_muteState() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("UnityEngine", "AudioSettings/Mobile", "get_muteState"));
}
// Autogenerated method: UnityEngine.AudioSettings/Mobile.set_muteState
void UnityEngine::AudioSettings::Mobile::set_muteState(bool value) {
  THROW_UNLESS(il2cpp_utils::RunMethod("UnityEngine", "AudioSettings/Mobile", "set_muteState", value));
}
// Autogenerated method: UnityEngine.AudioSettings/Mobile.get_stopAudioOutputOnMute
bool UnityEngine::AudioSettings::Mobile::get_stopAudioOutputOnMute() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("UnityEngine", "AudioSettings/Mobile", "get_stopAudioOutputOnMute"));
}
// Autogenerated method: UnityEngine.AudioSettings/Mobile.InvokeOnMuteStateChanged
void UnityEngine::AudioSettings::Mobile::InvokeOnMuteStateChanged(bool mute) {
  THROW_UNLESS(il2cpp_utils::RunMethod("UnityEngine", "AudioSettings/Mobile", "InvokeOnMuteStateChanged", mute));
}
// Autogenerated method: UnityEngine.AudioSettings/Mobile.StartAudioOutput
void UnityEngine::AudioSettings::Mobile::StartAudioOutput() {
  THROW_UNLESS(il2cpp_utils::RunMethod("UnityEngine", "AudioSettings/Mobile", "StartAudioOutput"));
}
// Autogenerated method: UnityEngine.AudioSettings/Mobile.StopAudioOutput
void UnityEngine::AudioSettings::Mobile::StopAudioOutput() {
  THROW_UNLESS(il2cpp_utils::RunMethod("UnityEngine", "AudioSettings/Mobile", "StopAudioOutput"));
}
// Autogenerated method: UnityEngine.AudioSettings/Mobile..cctor
void UnityEngine::AudioSettings::Mobile::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("UnityEngine", "AudioSettings/Mobile", ".cctor"));
}
