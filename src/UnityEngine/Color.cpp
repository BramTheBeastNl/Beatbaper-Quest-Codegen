// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.Color..ctor
UnityEngine::Color* UnityEngine::Color::New_ctor(float r, float g, float b, float a) {
  return (Color*)THROW_UNLESS(il2cpp_utils::New("UnityEngine", "Color", r, g, b, a));
}
// Autogenerated method: UnityEngine.Color..ctor
UnityEngine::Color* UnityEngine::Color::New_ctor(float r, float g, float b) {
  return (Color*)THROW_UNLESS(il2cpp_utils::New("UnityEngine", "Color", r, g, b));
}
// Autogenerated method: UnityEngine.Color.ToString
::Il2CppString* UnityEngine::Color::ToString(::Il2CppString* format) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(*this, "ToString", format));
}
// Autogenerated method: UnityEngine.Color.Lerp
UnityEngine::Color UnityEngine::Color::Lerp(UnityEngine::Color a, UnityEngine::Color b, float t) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "Lerp", a, b, t));
}
// Autogenerated method: UnityEngine.Color.RGBMultiplied
UnityEngine::Color UnityEngine::Color::RGBMultiplied(float multiplier) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>(*this, "RGBMultiplied", multiplier));
}
// Autogenerated method: UnityEngine.Color.get_red
UnityEngine::Color UnityEngine::Color::get_red() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "get_red"));
}
// Autogenerated method: UnityEngine.Color.get_green
UnityEngine::Color UnityEngine::Color::get_green() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "get_green"));
}
// Autogenerated method: UnityEngine.Color.get_blue
UnityEngine::Color UnityEngine::Color::get_blue() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "get_blue"));
}
// Autogenerated method: UnityEngine.Color.get_white
UnityEngine::Color UnityEngine::Color::get_white() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "get_white"));
}
// Autogenerated method: UnityEngine.Color.get_black
UnityEngine::Color UnityEngine::Color::get_black() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "get_black"));
}
// Autogenerated method: UnityEngine.Color.get_yellow
UnityEngine::Color UnityEngine::Color::get_yellow() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "get_yellow"));
}
// Autogenerated method: UnityEngine.Color.get_cyan
UnityEngine::Color UnityEngine::Color::get_cyan() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "get_cyan"));
}
// Autogenerated method: UnityEngine.Color.get_magenta
UnityEngine::Color UnityEngine::Color::get_magenta() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "get_magenta"));
}
// Autogenerated method: UnityEngine.Color.get_gray
UnityEngine::Color UnityEngine::Color::get_gray() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "get_gray"));
}
// Autogenerated method: UnityEngine.Color.get_clear
UnityEngine::Color UnityEngine::Color::get_clear() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "get_clear"));
}
// Autogenerated method: UnityEngine.Color.get_grayscale
float UnityEngine::Color::get_grayscale() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(*this, "get_grayscale"));
}
// Autogenerated method: UnityEngine.Color.get_linear
UnityEngine::Color UnityEngine::Color::get_linear() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>(*this, "get_linear"));
}
// Autogenerated method: UnityEngine.Color.get_maxColorComponent
float UnityEngine::Color::get_maxColorComponent() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(*this, "get_maxColorComponent"));
}
// Autogenerated method: UnityEngine.Color.RGBToHSV
void UnityEngine::Color::RGBToHSV(UnityEngine::Color rgbColor, float& H, float& S, float& V) {
  THROW_UNLESS(il2cpp_utils::RunMethod("UnityEngine", "Color", "RGBToHSV", rgbColor, H, S, V));
}
// Autogenerated method: UnityEngine.Color.RGBToHSVHelper
void UnityEngine::Color::RGBToHSVHelper(float offset, float dominantcolor, float colorone, float colortwo, float& H, float& S, float& V) {
  THROW_UNLESS(il2cpp_utils::RunMethod("UnityEngine", "Color", "RGBToHSVHelper", offset, dominantcolor, colorone, colortwo, H, S, V));
}
// Autogenerated method: UnityEngine.Color.HSVToRGB
UnityEngine::Color UnityEngine::Color::HSVToRGB(float H, float S, float V) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "HSVToRGB", H, S, V));
}
// Autogenerated method: UnityEngine.Color.HSVToRGB
UnityEngine::Color UnityEngine::Color::HSVToRGB(float H, float S, float V, bool hdr) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "HSVToRGB", H, S, V, hdr));
}
// Autogenerated method: UnityEngine.Color.ToString
::Il2CppString* UnityEngine::Color::ToString() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(*this, "ToString"));
}
// Autogenerated method: UnityEngine.Color.GetHashCode
int UnityEngine::Color::GetHashCode() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(*this, "GetHashCode"));
}
// Autogenerated method: UnityEngine.Color.Equals
bool UnityEngine::Color::Equals(::Il2CppObject* other) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "Equals", other));
}
// Autogenerated method: UnityEngine.Color.Equals
bool UnityEngine::Color::Equals(UnityEngine::Color other) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "Equals", other));
}
// Autogenerated method: UnityEngine.Color.op_Addition
UnityEngine::Color UnityEngine::operator+(const UnityEngine::Color& a, const UnityEngine::Color& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "op_Addition", a, b));
}
// Autogenerated method: UnityEngine.Color.op_Subtraction
UnityEngine::Color UnityEngine::operator-(const UnityEngine::Color& a, const UnityEngine::Color& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "op_Subtraction", a, b));
}
// Autogenerated method: UnityEngine.Color.op_Multiply
UnityEngine::Color UnityEngine::operator*(const UnityEngine::Color& a, const UnityEngine::Color& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "op_Multiply", a, b));
}
// Autogenerated method: UnityEngine.Color.op_Multiply
UnityEngine::Color UnityEngine::operator*(const UnityEngine::Color& a, const float& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "op_Multiply", a, b));
}
// Autogenerated method: UnityEngine.Color.op_Division
UnityEngine::Color UnityEngine::operator/(const UnityEngine::Color& a, const float& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Color>("UnityEngine", "Color", "op_Division", a, b));
}
// Autogenerated method: UnityEngine.Color.op_Equality
bool UnityEngine::operator ==(const UnityEngine::Color& lhs, const UnityEngine::Color& rhs) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("UnityEngine", "Color", "op_Equality", lhs, rhs));
}
// Autogenerated method: UnityEngine.Color.op_Inequality
bool UnityEngine::operator !=(const UnityEngine::Color& lhs, const UnityEngine::Color& rhs) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("UnityEngine", "Color", "op_Inequality", lhs, rhs));
}
