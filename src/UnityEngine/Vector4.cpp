// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kEpsilon
float UnityEngine::Vector4::_get_kEpsilon() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("UnityEngine", "Vector4", "kEpsilon"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kEpsilon
void UnityEngine::Vector4::_set_kEpsilon(float value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector4", "kEpsilon", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector4 zeroVector
UnityEngine::Vector4 UnityEngine::Vector4::_get_zeroVector() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector4>("UnityEngine", "Vector4", "zeroVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector4 zeroVector
void UnityEngine::Vector4::_set_zeroVector(UnityEngine::Vector4 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector4", "zeroVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector4 oneVector
UnityEngine::Vector4 UnityEngine::Vector4::_get_oneVector() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector4>("UnityEngine", "Vector4", "oneVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector4 oneVector
void UnityEngine::Vector4::_set_oneVector(UnityEngine::Vector4 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector4", "oneVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector4 positiveInfinityVector
UnityEngine::Vector4 UnityEngine::Vector4::_get_positiveInfinityVector() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector4>("UnityEngine", "Vector4", "positiveInfinityVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector4 positiveInfinityVector
void UnityEngine::Vector4::_set_positiveInfinityVector(UnityEngine::Vector4 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector4", "positiveInfinityVector", value));
}
// Autogenerated static field getter
// Get static field: static private readonly UnityEngine.Vector4 negativeInfinityVector
UnityEngine::Vector4 UnityEngine::Vector4::_get_negativeInfinityVector() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::Vector4>("UnityEngine", "Vector4", "negativeInfinityVector"));
}
// Autogenerated static field setter
// Set static field: static private readonly UnityEngine.Vector4 negativeInfinityVector
void UnityEngine::Vector4::_set_negativeInfinityVector(UnityEngine::Vector4 value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "Vector4", "negativeInfinityVector", value));
}
// Autogenerated method: UnityEngine.Vector4.get_Item
float UnityEngine::Vector4::get_Item(int index) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(*this, "get_Item", index));
}
// Autogenerated method: UnityEngine.Vector4.set_Item
void UnityEngine::Vector4::set_Item(int index, float value) {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_Item", index, value));
}
// Autogenerated method: UnityEngine.Vector4..ctor
UnityEngine::Vector4* UnityEngine::Vector4::New_ctor(float x, float y, float z, float w) {
  return (Vector4*)THROW_UNLESS(il2cpp_utils::New("UnityEngine", "Vector4", x, y, z, w));
}
// Autogenerated method: UnityEngine.Vector4..ctor
UnityEngine::Vector4* UnityEngine::Vector4::New_ctor(float x, float y, float z) {
  return (Vector4*)THROW_UNLESS(il2cpp_utils::New("UnityEngine", "Vector4", x, y, z));
}
// Autogenerated method: UnityEngine.Vector4.Normalize
void UnityEngine::Vector4::Normalize() {
  THROW_UNLESS(il2cpp_utils::RunMethod(*this, "Normalize"));
}
// Autogenerated method: UnityEngine.Vector4.Dot
float UnityEngine::Vector4::Dot(UnityEngine::Vector4 a, UnityEngine::Vector4 b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("UnityEngine", "Vector4", "Dot", a, b));
}
// Autogenerated method: UnityEngine.Vector4.Magnitude
float UnityEngine::Vector4::Magnitude(UnityEngine::Vector4 a) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>("UnityEngine", "Vector4", "Magnitude", a));
}
// Autogenerated method: UnityEngine.Vector4.get_sqrMagnitude
float UnityEngine::Vector4::get_sqrMagnitude() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<float>(*this, "get_sqrMagnitude"));
}
// Autogenerated method: UnityEngine.Vector4.get_zero
UnityEngine::Vector4 UnityEngine::Vector4::get_zero() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector4>("UnityEngine", "Vector4", "get_zero"));
}
// Autogenerated method: UnityEngine.Vector4.get_one
UnityEngine::Vector4 UnityEngine::Vector4::get_one() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector4>("UnityEngine", "Vector4", "get_one"));
}
// Autogenerated method: UnityEngine.Vector4.ToString
::Il2CppString* UnityEngine::Vector4::ToString(::Il2CppString* format) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(*this, "ToString", format));
}
// Autogenerated method: UnityEngine.Vector4..cctor
void UnityEngine::Vector4::_cctor() {
  THROW_UNLESS(il2cpp_utils::RunMethod("UnityEngine", "Vector4", ".cctor"));
}
// Autogenerated method: UnityEngine.Vector4.GetHashCode
int UnityEngine::Vector4::GetHashCode() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<int>(*this, "GetHashCode"));
}
// Autogenerated method: UnityEngine.Vector4.Equals
bool UnityEngine::Vector4::Equals(::Il2CppObject* other) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "Equals", other));
}
// Autogenerated method: UnityEngine.Vector4.Equals
bool UnityEngine::Vector4::Equals(UnityEngine::Vector4 other) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "Equals", other));
}
// Autogenerated method: UnityEngine.Vector4.ToString
::Il2CppString* UnityEngine::Vector4::ToString() {
  return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(*this, "ToString"));
}
// Autogenerated method: UnityEngine.Vector4.op_Addition
UnityEngine::Vector4 UnityEngine::operator+(const UnityEngine::Vector4& a, const UnityEngine::Vector4& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector4>("UnityEngine", "Vector4", "op_Addition", a, b));
}
// Autogenerated method: UnityEngine.Vector4.op_Subtraction
UnityEngine::Vector4 UnityEngine::operator-(const UnityEngine::Vector4& a, const UnityEngine::Vector4& b) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector4>("UnityEngine", "Vector4", "op_Subtraction", a, b));
}
// Autogenerated method: UnityEngine.Vector4.op_Multiply
UnityEngine::Vector4 UnityEngine::operator*(const UnityEngine::Vector4& a, const float& d) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector4>("UnityEngine", "Vector4", "op_Multiply", a, d));
}
// Autogenerated method: UnityEngine.Vector4.op_Division
UnityEngine::Vector4 UnityEngine::operator/(const UnityEngine::Vector4& a, const float& d) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<UnityEngine::Vector4>("UnityEngine", "Vector4", "op_Division", a, d));
}
// Autogenerated method: UnityEngine.Vector4.op_Equality
bool UnityEngine::operator ==(const UnityEngine::Vector4& lhs, const UnityEngine::Vector4& rhs) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("UnityEngine", "Vector4", "op_Equality", lhs, rhs));
}
// Autogenerated method: UnityEngine.Vector4.op_Inequality
bool UnityEngine::operator !=(const UnityEngine::Vector4& lhs, const UnityEngine::Vector4& rhs) {
  return THROW_UNLESS(il2cpp_utils::RunMethod<bool>("UnityEngine", "Vector4", "op_Inequality", lhs, rhs));
}
