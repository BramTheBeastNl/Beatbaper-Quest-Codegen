// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ILogHandler
#include "UnityEngine/ILogHandler.hpp"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Including type: System.Exception
#include "System/Exception.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: UnityEngine.ILogHandler.LogFormat
void UnityEngine::ILogHandler::LogFormat(UnityEngine::LogType logType, UnityEngine::Object* context, ::Il2CppString* format, ::Array<::Il2CppObject*>* args) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine").WithContext("ILogHandler").WithContext("LogFormat");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LogFormat", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(logType, context, format, args)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, logType, context, format, args);
}
// Creating initializer_list -> params proxy for: System.Void LogFormat(UnityEngine.LogType logType, UnityEngine.Object context, System.String format, params System.Object[] args)
void UnityEngine::ILogHandler::LogFormat(UnityEngine::LogType logType, UnityEngine::Object* context, ::Il2CppString* format, std::initializer_list<::Il2CppObject*> args) {
  UnityEngine::ILogHandler::LogFormat(logType, context, format, ::Array<::Il2CppObject*>::New(args));
}
// Autogenerated method: UnityEngine.ILogHandler.LogException
void UnityEngine::ILogHandler::LogException(System::Exception* exception, UnityEngine::Object* context) {
  static auto ___internal__logger = ::Logger::get().WithContext("codegen").WithContext("UnityEngine").WithContext("ILogHandler").WithContext("LogException");
  static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LogException", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(exception, context)));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, exception, context);
}
