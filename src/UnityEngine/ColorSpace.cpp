// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ColorSpace
#include "UnityEngine\ColorSpace.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public UnityEngine.ColorSpace Uninitialized
UnityEngine::ColorSpace UnityEngine::ColorSpace::_get_Uninitialized() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::ColorSpace>("UnityEngine", "ColorSpace", "Uninitialized"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.ColorSpace Uninitialized
void UnityEngine::ColorSpace::_set_Uninitialized(UnityEngine::ColorSpace value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "ColorSpace", "Uninitialized", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.ColorSpace Gamma
UnityEngine::ColorSpace UnityEngine::ColorSpace::_get_Gamma() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::ColorSpace>("UnityEngine", "ColorSpace", "Gamma"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.ColorSpace Gamma
void UnityEngine::ColorSpace::_set_Gamma(UnityEngine::ColorSpace value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "ColorSpace", "Gamma", value));
}
// Autogenerated static field getter
// Get static field: static public UnityEngine.ColorSpace Linear
UnityEngine::ColorSpace UnityEngine::ColorSpace::_get_Linear() {
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::ColorSpace>("UnityEngine", "ColorSpace", "Linear"));
}
// Autogenerated static field setter
// Set static field: static public UnityEngine.ColorSpace Linear
void UnityEngine::ColorSpace::_set_Linear(UnityEngine::ColorSpace value) {
  THROW_UNLESS(il2cpp_utils::SetFieldValue("UnityEngine", "ColorSpace", "Linear", value));
}
