// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PCArcadeAppInit
#include "GlobalNamespace/PCArcadeAppInit.hpp"
// Including type: MainSystemInit
#include "GlobalNamespace/MainSystemInit.hpp"
// Including type: SteamInit
#include "GlobalNamespace/SteamInit.hpp"
// Including type: DefaultScenesTransitionsFromInit
#include "GlobalNamespace/DefaultScenesTransitionsFromInit.hpp"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
// Including type: VRsenalLogger
#include "GlobalNamespace/VRsenalLogger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PCArcadeAppInit.AppStartAndMultiSceneEditorSetup
void GlobalNamespace::PCArcadeAppInit::AppStartAndMultiSceneEditorSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PCArcadeAppInit::AppStartAndMultiSceneEditorSetup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppStartAndMultiSceneEditorSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PCArcadeAppInit.RepeatableSetup
void GlobalNamespace::PCArcadeAppInit::RepeatableSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PCArcadeAppInit::RepeatableSetup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RepeatableSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PCArcadeAppInit.TransitionToNextScene
void GlobalNamespace::PCArcadeAppInit::TransitionToNextScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PCArcadeAppInit::TransitionToNextScene");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToNextScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PCArcadeAppInit.InstallBindings
void GlobalNamespace::PCArcadeAppInit::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PCArcadeAppInit::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PCArcadeAppInit::AppStartAndMultiSceneEditorSetup
// Il2CppName: AppStartAndMultiSceneEditorSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PCArcadeAppInit::*)()>(&PCArcadeAppInit::AppStartAndMultiSceneEditorSetup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PCArcadeAppInit*), "AppStartAndMultiSceneEditorSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PCArcadeAppInit::RepeatableSetup
// Il2CppName: RepeatableSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PCArcadeAppInit::*)()>(&PCArcadeAppInit::RepeatableSetup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PCArcadeAppInit*), "RepeatableSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PCArcadeAppInit::TransitionToNextScene
// Il2CppName: TransitionToNextScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PCArcadeAppInit::*)()>(&PCArcadeAppInit::TransitionToNextScene)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PCArcadeAppInit*), "TransitionToNextScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PCArcadeAppInit::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PCArcadeAppInit::*)()>(&PCArcadeAppInit::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PCArcadeAppInit*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PCArcadeAppInit::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PCArcadeAppInit::*)()>(&PCArcadeAppInit::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PCArcadeAppInit*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PCArcadeAppInit::*)()>(&PCArcadeAppInit::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PCArcadeAppInit*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PS4AppInit
#include "GlobalNamespace/PS4AppInit.hpp"
// Including type: MainSystemInit
#include "GlobalNamespace/MainSystemInit.hpp"
// Including type: DefaultScenesTransitionsFromInit
#include "GlobalNamespace/DefaultScenesTransitionsFromInit.hpp"
// Including type: AppInitScenesTransitionSetupDataContainerSO
#include "GlobalNamespace/AppInitScenesTransitionSetupDataContainerSO.hpp"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
// Including type: PS4ActivePublisherSKUSettingsSO
#include "GlobalNamespace/PS4ActivePublisherSKUSettingsSO.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PS4AppInit.AppStartAndMultiSceneEditorSetup
void GlobalNamespace::PS4AppInit::AppStartAndMultiSceneEditorSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PS4AppInit::AppStartAndMultiSceneEditorSetup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppStartAndMultiSceneEditorSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PS4AppInit.RepeatableSetup
void GlobalNamespace::PS4AppInit::RepeatableSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PS4AppInit::RepeatableSetup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RepeatableSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PS4AppInit.TransitionToNextScene
void GlobalNamespace::PS4AppInit::TransitionToNextScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PS4AppInit::TransitionToNextScene");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToNextScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PS4AppInit.InstallBindings
void GlobalNamespace::PS4AppInit::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PS4AppInit::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PS4AppInit::AppStartAndMultiSceneEditorSetup
// Il2CppName: AppStartAndMultiSceneEditorSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PS4AppInit::*)()>(&PS4AppInit::AppStartAndMultiSceneEditorSetup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PS4AppInit*), "AppStartAndMultiSceneEditorSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PS4AppInit::RepeatableSetup
// Il2CppName: RepeatableSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PS4AppInit::*)()>(&PS4AppInit::RepeatableSetup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PS4AppInit*), "RepeatableSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PS4AppInit::TransitionToNextScene
// Il2CppName: TransitionToNextScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PS4AppInit::*)()>(&PS4AppInit::TransitionToNextScene)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PS4AppInit*), "TransitionToNextScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PS4AppInit::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PS4AppInit::*)()>(&PS4AppInit::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PS4AppInit*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PS4AppInit::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PS4AppInit::*)()>(&PS4AppInit::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PS4AppInit*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PS4AppInit::*)()>(&PS4AppInit::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PS4AppInit*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: QuestAppInit
#include "GlobalNamespace/QuestAppInit.hpp"
// Including type: MainSystemInit
#include "GlobalNamespace/MainSystemInit.hpp"
// Including type: OculusInit
#include "GlobalNamespace/OculusInit.hpp"
// Including type: DefaultScenesTransitionsFromInit
#include "GlobalNamespace/DefaultScenesTransitionsFromInit.hpp"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: QuestAppInit.AppStartAndMultiSceneEditorSetup
void GlobalNamespace::QuestAppInit::AppStartAndMultiSceneEditorSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuestAppInit::AppStartAndMultiSceneEditorSetup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppStartAndMultiSceneEditorSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuestAppInit.RepeatableSetup
void GlobalNamespace::QuestAppInit::RepeatableSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuestAppInit::RepeatableSetup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RepeatableSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuestAppInit.TransitionToNextScene
void GlobalNamespace::QuestAppInit::TransitionToNextScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuestAppInit::TransitionToNextScene");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToNextScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuestAppInit.InstallBindings
void GlobalNamespace::QuestAppInit::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuestAppInit::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: QuestAppInit::AppStartAndMultiSceneEditorSetup
// Il2CppName: AppStartAndMultiSceneEditorSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuestAppInit::*)()>(&QuestAppInit::AppStartAndMultiSceneEditorSetup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuestAppInit*), "AppStartAndMultiSceneEditorSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuestAppInit::RepeatableSetup
// Il2CppName: RepeatableSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuestAppInit::*)()>(&QuestAppInit::RepeatableSetup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuestAppInit*), "RepeatableSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuestAppInit::TransitionToNextScene
// Il2CppName: TransitionToNextScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuestAppInit::*)()>(&QuestAppInit::TransitionToNextScene)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuestAppInit*), "TransitionToNextScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuestAppInit::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuestAppInit::*)()>(&QuestAppInit::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuestAppInit*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuestAppInit::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuestAppInit::*)()>(&QuestAppInit::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuestAppInit*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuestAppInit::*)()>(&QuestAppInit::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuestAppInit*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: QuestShowcaseAppInit
#include "GlobalNamespace/QuestShowcaseAppInit.hpp"
// Including type: MainSystemInit
#include "GlobalNamespace/MainSystemInit.hpp"
// Including type: OculusInit
#include "GlobalNamespace/OculusInit.hpp"
// Including type: MenuScenesTransitionSetupDataSO
#include "GlobalNamespace/MenuScenesTransitionSetupDataSO.hpp"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: QuestShowcaseAppInit.AppStartAndMultiSceneEditorSetup
void GlobalNamespace::QuestShowcaseAppInit::AppStartAndMultiSceneEditorSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuestShowcaseAppInit::AppStartAndMultiSceneEditorSetup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppStartAndMultiSceneEditorSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuestShowcaseAppInit.RepeatableSetup
void GlobalNamespace::QuestShowcaseAppInit::RepeatableSetup() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuestShowcaseAppInit::RepeatableSetup");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RepeatableSetup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuestShowcaseAppInit.TransitionToNextScene
void GlobalNamespace::QuestShowcaseAppInit::TransitionToNextScene() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuestShowcaseAppInit::TransitionToNextScene");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TransitionToNextScene", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: QuestShowcaseAppInit.InstallBindings
void GlobalNamespace::QuestShowcaseAppInit::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::QuestShowcaseAppInit::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: QuestShowcaseAppInit::AppStartAndMultiSceneEditorSetup
// Il2CppName: AppStartAndMultiSceneEditorSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuestShowcaseAppInit::*)()>(&QuestShowcaseAppInit::AppStartAndMultiSceneEditorSetup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuestShowcaseAppInit*), "AppStartAndMultiSceneEditorSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuestShowcaseAppInit::RepeatableSetup
// Il2CppName: RepeatableSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuestShowcaseAppInit::*)()>(&QuestShowcaseAppInit::RepeatableSetup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuestShowcaseAppInit*), "RepeatableSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuestShowcaseAppInit::TransitionToNextScene
// Il2CppName: TransitionToNextScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuestShowcaseAppInit::*)()>(&QuestShowcaseAppInit::TransitionToNextScene)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuestShowcaseAppInit*), "TransitionToNextScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuestShowcaseAppInit::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuestShowcaseAppInit::*)()>(&QuestShowcaseAppInit::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuestShowcaseAppInit*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: QuestShowcaseAppInit::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuestShowcaseAppInit::*)()>(&QuestShowcaseAppInit::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuestShowcaseAppInit*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (QuestShowcaseAppInit::*)()>(&QuestShowcaseAppInit::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(QuestShowcaseAppInit*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SteamInit
#include "GlobalNamespace/SteamInit.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SteamInit.Init
void GlobalNamespace::SteamInit::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamInit::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SteamInit::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamInit::*)()>(&SteamInit::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamInit*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SteamInit::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamInit::*)()>(&SteamInit::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamInit*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SteamInit::*)()>(&SteamInit::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SteamInit*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AudioClipLoaderSO
#include "GlobalNamespace/AudioClipLoaderSO.hpp"
// Including type: AudioClipLoaderSO/<LoadAudioFileCoroutine>d__3
#include "GlobalNamespace/AudioClipLoaderSO_-LoadAudioFileCoroutine-d__3.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AudioClipLoaderSO.LoadAudioFile
void GlobalNamespace::AudioClipLoaderSO::LoadAudioFile(::Il2CppString* filePath, System::Action_1<UnityEngine::AudioClip*>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioClipLoaderSO::LoadAudioFile");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadAudioFile", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filePath), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, filePath, finishCallback);
}
// Autogenerated method: AudioClipLoaderSO.LoadAudioFileCoroutine
System::Collections::IEnumerator* GlobalNamespace::AudioClipLoaderSO::LoadAudioFileCoroutine(::Il2CppString* filePath, System::Action_1<UnityEngine::AudioClip*>* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioClipLoaderSO::LoadAudioFileCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LoadAudioFileCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(filePath), ::il2cpp_utils::ExtractType(finishCallback)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, filePath, finishCallback);
}
// Autogenerated method: AudioClipLoaderSO.OnEnable
void GlobalNamespace::AudioClipLoaderSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioClipLoaderSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AudioClipLoaderSO::LoadAudioFile
// Il2CppName: LoadAudioFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipLoaderSO::*)(::Il2CppString*, System::Action_1<UnityEngine::AudioClip*>*)>(&AudioClipLoaderSO::LoadAudioFile)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipLoaderSO*), "LoadAudioFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::AudioClip*>*>()});
  }
};
// Writing MetadataGetter for method: AudioClipLoaderSO::LoadAudioFileCoroutine
// Il2CppName: LoadAudioFileCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (AudioClipLoaderSO::*)(::Il2CppString*, System::Action_1<UnityEngine::AudioClip*>*)>(&AudioClipLoaderSO::LoadAudioFileCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipLoaderSO*), "LoadAudioFileCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::AudioClip*>*>()});
  }
};
// Writing MetadataGetter for method: AudioClipLoaderSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipLoaderSO::*)()>(&AudioClipLoaderSO::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipLoaderSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClipLoaderSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipLoaderSO::*)()>(&AudioClipLoaderSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipLoaderSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipLoaderSO::*)()>(&AudioClipLoaderSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipLoaderSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AudioClipLoaderSO/<LoadAudioFileCoroutine>d__3
#include "GlobalNamespace/AudioClipLoaderSO_-LoadAudioFileCoroutine-d__3.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.Networking.UnityWebRequest
#include "UnityEngine/Networking/UnityWebRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AudioClipLoaderSO/<LoadAudioFileCoroutine>d__3.System.IDisposable.Dispose
void GlobalNamespace::AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioClipLoaderSO/<LoadAudioFileCoroutine>d__3.MoveNext
bool GlobalNamespace::AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: AudioClipLoaderSO/<LoadAudioFileCoroutine>d__3.<>m__Finally1
void GlobalNamespace::AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::$$m__Finally1() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::<>m__Finally1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<>m__Finally1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioClipLoaderSO/<LoadAudioFileCoroutine>d__3.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: AudioClipLoaderSO/<LoadAudioFileCoroutine>d__3.System.Collections.IEnumerator.Reset
void GlobalNamespace::AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioClipLoaderSO/<LoadAudioFileCoroutine>d__3.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::*)(int)>(&AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::*)(int)>(&AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::*)()>(&AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::*)()>(&AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::$$m__Finally1
// Il2CppName: <>m__Finally1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::*)()>(&AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::$$m__Finally1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3*), "<>m__Finally1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::*)()>(&AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::*)()>(&AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::*)()>(&AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipLoaderSO::$LoadAudioFileCoroutine$d__3*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AudioClipQueue
#include "GlobalNamespace/AudioClipQueue.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AudioClipQueue.Awake
void GlobalNamespace::AudioClipQueue::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioClipQueue::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioClipQueue.Update
void GlobalNamespace::AudioClipQueue::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioClipQueue::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioClipQueue.PlayAudioClipWithDelay
void GlobalNamespace::AudioClipQueue::PlayAudioClipWithDelay(UnityEngine::AudioClip* audioClip, float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioClipQueue::PlayAudioClipWithDelay");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayAudioClipWithDelay", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(audioClip), ::il2cpp_utils::ExtractType(delay)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, audioClip, delay);
}
// Writing MetadataGetter for method: AudioClipQueue::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipQueue::*)()>(&AudioClipQueue::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipQueue*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClipQueue::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipQueue::*)()>(&AudioClipQueue::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipQueue*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioClipQueue::PlayAudioClipWithDelay
// Il2CppName: PlayAudioClipWithDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipQueue::*)(UnityEngine::AudioClip*, float)>(&AudioClipQueue::PlayAudioClipWithDelay)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipQueue*), "PlayAudioClipWithDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioClipQueue::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipQueue::*)()>(&AudioClipQueue::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipQueue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioClipQueue::*)()>(&AudioClipQueue::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioClipQueue*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AudioFading
#include "GlobalNamespace/AudioFading.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AudioFading.Start
void GlobalNamespace::AudioFading::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioFading::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioFading.Update
void GlobalNamespace::AudioFading::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioFading::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioFading.FadeOut
void GlobalNamespace::AudioFading::FadeOut() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioFading::FadeOut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioFading.FadeIn
void GlobalNamespace::AudioFading::FadeIn() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioFading::FadeIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AudioFading::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioFading::*)()>(&AudioFading::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioFading*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioFading::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioFading::*)()>(&AudioFading::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioFading*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioFading::FadeOut
// Il2CppName: FadeOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioFading::*)()>(&AudioFading::FadeOut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioFading*), "FadeOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioFading::FadeIn
// Il2CppName: FadeIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioFading::*)()>(&AudioFading::FadeIn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioFading*), "FadeIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioFading::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioFading::*)()>(&AudioFading::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioFading*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioFading::*)()>(&AudioFading::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioFading*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AudioListenerController
#include "GlobalNamespace/AudioListenerController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AudioListenerController.get_isPaused
bool GlobalNamespace::AudioListenerController::get_isPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioListenerController::get_isPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: AudioListenerController.Awake
void GlobalNamespace::AudioListenerController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioListenerController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioListenerController.OnDestroy
void GlobalNamespace::AudioListenerController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioListenerController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioListenerController.Pause
void GlobalNamespace::AudioListenerController::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioListenerController::Pause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioListenerController.Resume
void GlobalNamespace::AudioListenerController::Resume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioListenerController::Resume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AudioListenerController::get_isPaused
// Il2CppName: get_isPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioListenerController::*)()>(&AudioListenerController::get_isPaused)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioListenerController*), "get_isPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioListenerController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioListenerController::*)()>(&AudioListenerController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioListenerController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioListenerController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioListenerController::*)()>(&AudioListenerController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioListenerController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioListenerController::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioListenerController::*)()>(&AudioListenerController::Pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioListenerController*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioListenerController::Resume
// Il2CppName: Resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioListenerController::*)()>(&AudioListenerController::Resume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioListenerController*), "Resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioListenerController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioListenerController::*)()>(&AudioListenerController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioListenerController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioListenerController::*)()>(&AudioListenerController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioListenerController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AudioManagerSO
#include "GlobalNamespace/AudioManagerSO.hpp"
// Including type: UnityEngine.Audio.AudioMixer
#include "UnityEngine/Audio/AudioMixer.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public System.Single kDefaultMusicVolume
float GlobalNamespace::AudioManagerSO::_get_kDefaultMusicVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::_get_kDefaultMusicVolume");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "AudioManagerSO", "kDefaultMusicVolume"));
}
// Autogenerated static field setter
// Set static field: static public System.Single kDefaultMusicVolume
void GlobalNamespace::AudioManagerSO::_set_kDefaultMusicVolume(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::_set_kDefaultMusicVolume");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AudioManagerSO", "kDefaultMusicVolume", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMsHrtfSpatializerPluginName
::Il2CppString* GlobalNamespace::AudioManagerSO::_get_kMsHrtfSpatializerPluginName() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::_get_kMsHrtfSpatializerPluginName");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "AudioManagerSO", "kMsHrtfSpatializerPluginName"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMsHrtfSpatializerPluginName
void GlobalNamespace::AudioManagerSO::_set_kMsHrtfSpatializerPluginName(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::_set_kMsHrtfSpatializerPluginName");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AudioManagerSO", "kMsHrtfSpatializerPluginName", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kSfxVolume
::Il2CppString* GlobalNamespace::AudioManagerSO::_get_kSfxVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::_get_kSfxVolume");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "AudioManagerSO", "kSfxVolume"));
}
// Autogenerated static field setter
// Set static field: static private System.String kSfxVolume
void GlobalNamespace::AudioManagerSO::_set_kSfxVolume(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::_set_kSfxVolume");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AudioManagerSO", "kSfxVolume", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMainVolume
::Il2CppString* GlobalNamespace::AudioManagerSO::_get_kMainVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::_get_kMainVolume");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "AudioManagerSO", "kMainVolume"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMainVolume
void GlobalNamespace::AudioManagerSO::_set_kMainVolume(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::_set_kMainVolume");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AudioManagerSO", "kMainVolume", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMusicVolume
::Il2CppString* GlobalNamespace::AudioManagerSO::_get_kMusicVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::_get_kMusicVolume");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "AudioManagerSO", "kMusicVolume"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMusicVolume
void GlobalNamespace::AudioManagerSO::_set_kMusicVolume(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::_set_kMusicVolume");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AudioManagerSO", "kMusicVolume", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMusicPitch
::Il2CppString* GlobalNamespace::AudioManagerSO::_get_kMusicPitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::_get_kMusicPitch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "AudioManagerSO", "kMusicPitch"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMusicPitch
void GlobalNamespace::AudioManagerSO::_set_kMusicPitch(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::_set_kMusicPitch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AudioManagerSO", "kMusicPitch", value));
}
// Autogenerated static field getter
// Get static field: static private System.String kMusicPitchShifterWet
::Il2CppString* GlobalNamespace::AudioManagerSO::_get_kMusicPitchShifterWet() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::_get_kMusicPitchShifterWet");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("", "AudioManagerSO", "kMusicPitchShifterWet"));
}
// Autogenerated static field setter
// Set static field: static private System.String kMusicPitchShifterWet
void GlobalNamespace::AudioManagerSO::_set_kMusicPitchShifterWet(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::_set_kMusicPitchShifterWet");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AudioManagerSO", "kMusicPitchShifterWet", value));
}
// Autogenerated method: AudioManagerSO.get_sfxLatency
float GlobalNamespace::AudioManagerSO::get_sfxLatency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::get_sfxLatency");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sfxLatency", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AudioManagerSO.Init
void GlobalNamespace::AudioManagerSO::Init() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioManagerSO.set_mainVolume
void GlobalNamespace::AudioManagerSO::set_mainVolume(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::set_mainVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mainVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AudioManagerSO.set_musicVolume
void GlobalNamespace::AudioManagerSO::set_musicVolume(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::set_musicVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_musicVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AudioManagerSO.set_sfxVolume
void GlobalNamespace::AudioManagerSO::set_sfxVolume(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::set_sfxVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sfxVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AudioManagerSO.get_sfxEnabled
bool GlobalNamespace::AudioManagerSO::get_sfxEnabled() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::get_sfxEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sfxEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: AudioManagerSO.set_sfxEnabled
void GlobalNamespace::AudioManagerSO::set_sfxEnabled(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::set_sfxEnabled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sfxEnabled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AudioManagerSO.set_musicPitch
void GlobalNamespace::AudioManagerSO::set_musicPitch(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::set_musicPitch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_musicPitch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: AudioManagerSO::get_sfxLatency
// Il2CppName: get_sfxLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioManagerSO::*)()>(&AudioManagerSO::get_sfxLatency)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioManagerSO*), "get_sfxLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioManagerSO::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioManagerSO::*)()>(&AudioManagerSO::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioManagerSO*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioManagerSO::set_mainVolume
// Il2CppName: set_mainVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioManagerSO::*)(float)>(&AudioManagerSO::set_mainVolume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioManagerSO*), "set_mainVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioManagerSO::set_musicVolume
// Il2CppName: set_musicVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioManagerSO::*)(float)>(&AudioManagerSO::set_musicVolume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioManagerSO*), "set_musicVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioManagerSO::set_sfxVolume
// Il2CppName: set_sfxVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioManagerSO::*)(float)>(&AudioManagerSO::set_sfxVolume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioManagerSO*), "set_sfxVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioManagerSO::get_sfxEnabled
// Il2CppName: get_sfxEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioManagerSO::*)()>(&AudioManagerSO::get_sfxEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioManagerSO*), "get_sfxEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioManagerSO::set_sfxEnabled
// Il2CppName: set_sfxEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioManagerSO::*)(bool)>(&AudioManagerSO::set_sfxEnabled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioManagerSO*), "set_sfxEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AudioManagerSO::set_musicPitch
// Il2CppName: set_musicPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioManagerSO::*)(float)>(&AudioManagerSO::set_musicPitch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioManagerSO*), "set_musicPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioManagerSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioManagerSO::*)()>(&AudioManagerSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioManagerSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioManagerSO::*)()>(&AudioManagerSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioManagerSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AudioPitchGainEffect
#include "GlobalNamespace/AudioPitchGainEffect.hpp"
// Including type: AudioPitchGainEffect/<StartEffectCoroutine>d__8
#include "GlobalNamespace/AudioPitchGainEffect_-StartEffectCoroutine-d__8.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Coroutine
#include "UnityEngine/Coroutine.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AudioPitchGainEffect.Start
void GlobalNamespace::AudioPitchGainEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioPitchGainEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioPitchGainEffect.StartEffectCoroutine
System::Collections::IEnumerator* GlobalNamespace::AudioPitchGainEffect::StartEffectCoroutine(float volumeScale, System::Action* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioPitchGainEffect::StartEffectCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartEffectCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(volumeScale), ::il2cpp_utils::ExtractType(finishCallback)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, volumeScale, finishCallback);
}
// Autogenerated method: AudioPitchGainEffect.StartEffect
void GlobalNamespace::AudioPitchGainEffect::StartEffect(float volumeScale, System::Action* finishCallback) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioPitchGainEffect::StartEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(volumeScale), ::il2cpp_utils::ExtractType(finishCallback)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, volumeScale, finishCallback);
}
// Autogenerated method: AudioPitchGainEffect.InterruptEffect
void GlobalNamespace::AudioPitchGainEffect::InterruptEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioPitchGainEffect::InterruptEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InterruptEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioPitchGainEffect.SetAudioSource
void GlobalNamespace::AudioPitchGainEffect::SetAudioSource(UnityEngine::AudioSource* audioSource) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioPitchGainEffect::SetAudioSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetAudioSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(audioSource)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, audioSource);
}
// Writing MetadataGetter for method: AudioPitchGainEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPitchGainEffect::*)()>(&AudioPitchGainEffect::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPitchGainEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPitchGainEffect::StartEffectCoroutine
// Il2CppName: StartEffectCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (AudioPitchGainEffect::*)(float, System::Action*)>(&AudioPitchGainEffect::StartEffectCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPitchGainEffect*), "StartEffectCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: AudioPitchGainEffect::StartEffect
// Il2CppName: StartEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPitchGainEffect::*)(float, System::Action*)>(&AudioPitchGainEffect::StartEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPitchGainEffect*), "StartEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: AudioPitchGainEffect::InterruptEffect
// Il2CppName: InterruptEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPitchGainEffect::*)()>(&AudioPitchGainEffect::InterruptEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPitchGainEffect*), "InterruptEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPitchGainEffect::SetAudioSource
// Il2CppName: SetAudioSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPitchGainEffect::*)(UnityEngine::AudioSource*)>(&AudioPitchGainEffect::SetAudioSource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPitchGainEffect*), "SetAudioSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>()});
  }
};
// Writing MetadataGetter for method: AudioPitchGainEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPitchGainEffect::*)()>(&AudioPitchGainEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPitchGainEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPitchGainEffect::*)()>(&AudioPitchGainEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPitchGainEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AudioPitchGainEffect/<StartEffectCoroutine>d__8
#include "GlobalNamespace/AudioPitchGainEffect_-StartEffectCoroutine-d__8.hpp"
// Including type: System.Action
#include "System/Action.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AudioPitchGainEffect/<StartEffectCoroutine>d__8.System.IDisposable.Dispose
void GlobalNamespace::AudioPitchGainEffect::$StartEffectCoroutine$d__8::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioPitchGainEffect::$StartEffectCoroutine$d__8::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioPitchGainEffect/<StartEffectCoroutine>d__8.MoveNext
bool GlobalNamespace::AudioPitchGainEffect::$StartEffectCoroutine$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioPitchGainEffect::$StartEffectCoroutine$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: AudioPitchGainEffect/<StartEffectCoroutine>d__8.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::AudioPitchGainEffect::$StartEffectCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioPitchGainEffect::$StartEffectCoroutine$d__8::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: AudioPitchGainEffect/<StartEffectCoroutine>d__8.System.Collections.IEnumerator.Reset
void GlobalNamespace::AudioPitchGainEffect::$StartEffectCoroutine$d__8::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioPitchGainEffect::$StartEffectCoroutine$d__8::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioPitchGainEffect/<StartEffectCoroutine>d__8.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::AudioPitchGainEffect::$StartEffectCoroutine$d__8::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioPitchGainEffect::$StartEffectCoroutine$d__8::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AudioPitchGainEffect::$StartEffectCoroutine$d__8::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPitchGainEffect::$StartEffectCoroutine$d__8::*)(int)>(&AudioPitchGainEffect::$StartEffectCoroutine$d__8::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPitchGainEffect::$StartEffectCoroutine$d__8*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPitchGainEffect::$StartEffectCoroutine$d__8::*)(int)>(&AudioPitchGainEffect::$StartEffectCoroutine$d__8::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPitchGainEffect::$StartEffectCoroutine$d__8*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AudioPitchGainEffect::$StartEffectCoroutine$d__8::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPitchGainEffect::$StartEffectCoroutine$d__8::*)()>(&AudioPitchGainEffect::$StartEffectCoroutine$d__8::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPitchGainEffect::$StartEffectCoroutine$d__8*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPitchGainEffect::$StartEffectCoroutine$d__8::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioPitchGainEffect::$StartEffectCoroutine$d__8::*)()>(&AudioPitchGainEffect::$StartEffectCoroutine$d__8::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPitchGainEffect::$StartEffectCoroutine$d__8*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPitchGainEffect::$StartEffectCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (AudioPitchGainEffect::$StartEffectCoroutine$d__8::*)()>(&AudioPitchGainEffect::$StartEffectCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPitchGainEffect::$StartEffectCoroutine$d__8*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPitchGainEffect::$StartEffectCoroutine$d__8::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPitchGainEffect::$StartEffectCoroutine$d__8::*)()>(&AudioPitchGainEffect::$StartEffectCoroutine$d__8::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPitchGainEffect::$StartEffectCoroutine$d__8*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPitchGainEffect::$StartEffectCoroutine$d__8::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (AudioPitchGainEffect::$StartEffectCoroutine$d__8::*)()>(&AudioPitchGainEffect::$StartEffectCoroutine$d__8::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPitchGainEffect::$StartEffectCoroutine$d__8*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AudioPlayerBase
#include "GlobalNamespace/AudioPlayerBase.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AudioPlayerBase.get_activeAudioClip
UnityEngine::AudioClip* GlobalNamespace::AudioPlayerBase::get_activeAudioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioPlayerBase::get_activeAudioClip");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeAudioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: AudioPlayerBase.FadeOut
void GlobalNamespace::AudioPlayerBase::FadeOut(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioPlayerBase::FadeOut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: AudioPlayerBase.PauseCurrentChannel
void GlobalNamespace::AudioPlayerBase::PauseCurrentChannel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioPlayerBase::PauseCurrentChannel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseCurrentChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioPlayerBase.UnPauseCurrentChannel
void GlobalNamespace::AudioPlayerBase::UnPauseCurrentChannel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioPlayerBase::UnPauseCurrentChannel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnPauseCurrentChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AudioPlayerBase::get_activeAudioClip
// Il2CppName: get_activeAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (AudioPlayerBase::*)()>(&AudioPlayerBase::get_activeAudioClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayerBase*), "get_activeAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayerBase::FadeOut
// Il2CppName: FadeOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayerBase::*)(float)>(&AudioPlayerBase::FadeOut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayerBase*), "FadeOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioPlayerBase::PauseCurrentChannel
// Il2CppName: PauseCurrentChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayerBase::*)()>(&AudioPlayerBase::PauseCurrentChannel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayerBase*), "PauseCurrentChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayerBase::UnPauseCurrentChannel
// Il2CppName: UnPauseCurrentChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayerBase::*)()>(&AudioPlayerBase::UnPauseCurrentChannel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayerBase*), "UnPauseCurrentChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioPlayerBase::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayerBase::*)()>(&AudioPlayerBase::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayerBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioPlayerBase::*)()>(&AudioPlayerBase::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioPlayerBase*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: AudioTimeSyncController/InitData
#include "GlobalNamespace/AudioTimeSyncController_InitData.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: FloatSO
#include "GlobalNamespace/FloatSO.hpp"
// Including type: UnityEngine.WaitUntil
#include "UnityEngine/WaitUntil.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AudioTimeSyncController.get_state
GlobalNamespace::AudioTimeSyncController::State GlobalNamespace::AudioTimeSyncController::get_state() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::get_state");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_state", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AudioTimeSyncController::State, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.get_songTime
float GlobalNamespace::AudioTimeSyncController::get_songTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::get_songTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.get_songLength
float GlobalNamespace::AudioTimeSyncController::get_songLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::get_songLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.get_isAudioLoaded
bool GlobalNamespace::AudioTimeSyncController::get_isAudioLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::get_isAudioLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isAudioLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.get_songEndTime
float GlobalNamespace::AudioTimeSyncController::get_songEndTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::get_songEndTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songEndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.get_timeScale
float GlobalNamespace::AudioTimeSyncController::get_timeScale() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::get_timeScale");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeScale", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.get_dspTimeOffset
double GlobalNamespace::AudioTimeSyncController::get_dspTimeOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::get_dspTimeOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_dspTimeOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<double, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.get_waitUntilAudioIsLoaded
UnityEngine::WaitUntil* GlobalNamespace::AudioTimeSyncController::get_waitUntilAudioIsLoaded() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::get_waitUntilAudioIsLoaded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_waitUntilAudioIsLoaded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::WaitUntil*, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.get_isReady
bool GlobalNamespace::AudioTimeSyncController::get_isReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::get_isReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.get_audioSource
UnityEngine::AudioSource* GlobalNamespace::AudioTimeSyncController::get_audioSource() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::get_audioSource");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_audioSource", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioSource*, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.Awake
void GlobalNamespace::AudioTimeSyncController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.Start
void GlobalNamespace::AudioTimeSyncController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.Update
void GlobalNamespace::AudioTimeSyncController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.get_timeSinceStart
float GlobalNamespace::AudioTimeSyncController::get_timeSinceStart() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::get_timeSinceStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_timeSinceStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.StartSong
void GlobalNamespace::AudioTimeSyncController::StartSong(float startTimeOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::StartSong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTimeOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startTimeOffset);
}
// Autogenerated method: AudioTimeSyncController.SeekTo
void GlobalNamespace::AudioTimeSyncController::SeekTo(float startTimeOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::SeekTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SeekTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(startTimeOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, startTimeOffset);
}
// Autogenerated method: AudioTimeSyncController.StopSong
void GlobalNamespace::AudioTimeSyncController::StopSong() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::StopSong");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopSong", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.Pause
void GlobalNamespace::AudioTimeSyncController::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::Pause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.Resume
void GlobalNamespace::AudioTimeSyncController::Resume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::Resume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AudioTimeSyncController.<get_waitUntilAudioIsLoaded>b__25_0
bool GlobalNamespace::AudioTimeSyncController::$get_waitUntilAudioIsLoaded$b__25_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::<get_waitUntilAudioIsLoaded>b__25_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<get_waitUntilAudioIsLoaded>b__25_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AudioTimeSyncController::get_state
// Il2CppName: get_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AudioTimeSyncController::State (AudioTimeSyncController::*)()>(&AudioTimeSyncController::get_state)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "get_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::get_songTime
// Il2CppName: get_songTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioTimeSyncController::*)()>(&AudioTimeSyncController::get_songTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "get_songTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::get_songLength
// Il2CppName: get_songLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioTimeSyncController::*)()>(&AudioTimeSyncController::get_songLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "get_songLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::get_isAudioLoaded
// Il2CppName: get_isAudioLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioTimeSyncController::*)()>(&AudioTimeSyncController::get_isAudioLoaded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "get_isAudioLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::get_songEndTime
// Il2CppName: get_songEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioTimeSyncController::*)()>(&AudioTimeSyncController::get_songEndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "get_songEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::get_timeScale
// Il2CppName: get_timeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioTimeSyncController::*)()>(&AudioTimeSyncController::get_timeScale)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "get_timeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::get_dspTimeOffset
// Il2CppName: get_dspTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (AudioTimeSyncController::*)()>(&AudioTimeSyncController::get_dspTimeOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "get_dspTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::get_waitUntilAudioIsLoaded
// Il2CppName: get_waitUntilAudioIsLoaded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::WaitUntil* (AudioTimeSyncController::*)()>(&AudioTimeSyncController::get_waitUntilAudioIsLoaded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "get_waitUntilAudioIsLoaded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::get_isReady
// Il2CppName: get_isReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioTimeSyncController::*)()>(&AudioTimeSyncController::get_isReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "get_isReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::get_audioSource
// Il2CppName: get_audioSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioSource* (AudioTimeSyncController::*)()>(&AudioTimeSyncController::get_audioSource)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "get_audioSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTimeSyncController::*)()>(&AudioTimeSyncController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTimeSyncController::*)()>(&AudioTimeSyncController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTimeSyncController::*)()>(&AudioTimeSyncController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::get_timeSinceStart
// Il2CppName: get_timeSinceStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AudioTimeSyncController::*)()>(&AudioTimeSyncController::get_timeSinceStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "get_timeSinceStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::StartSong
// Il2CppName: StartSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTimeSyncController::*)(float)>(&AudioTimeSyncController::StartSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "StartSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::SeekTo
// Il2CppName: SeekTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTimeSyncController::*)(float)>(&AudioTimeSyncController::SeekTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "SeekTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::StopSong
// Il2CppName: StopSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTimeSyncController::*)()>(&AudioTimeSyncController::StopSong)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "StopSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTimeSyncController::*)()>(&AudioTimeSyncController::Pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::Resume
// Il2CppName: Resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTimeSyncController::*)()>(&AudioTimeSyncController::Resume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "Resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::$get_waitUntilAudioIsLoaded$b__25_0
// Il2CppName: <get_waitUntilAudioIsLoaded>b__25_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AudioTimeSyncController::*)()>(&AudioTimeSyncController::$get_waitUntilAudioIsLoaded$b__25_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), "<get_waitUntilAudioIsLoaded>b__25_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AudioTimeSyncController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTimeSyncController::*)()>(&AudioTimeSyncController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTimeSyncController::*)()>(&AudioTimeSyncController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AudioTimeSyncController/InitData
#include "GlobalNamespace/AudioTimeSyncController_InitData.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AudioTimeSyncController::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTimeSyncController::InitData::*)(UnityEngine::AudioClip*, float, float, float)>(&AudioTimeSyncController::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AudioTimeSyncController::InitData::*)(UnityEngine::AudioClip*, float, float, float)>(&AudioTimeSyncController::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AudioTimeSyncController::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AudioTimeSyncController/State
#include "GlobalNamespace/AudioTimeSyncController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public AudioTimeSyncController/State Playing
GlobalNamespace::AudioTimeSyncController::State GlobalNamespace::AudioTimeSyncController::State::_get_Playing() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::State::_get_Playing");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AudioTimeSyncController::State>("", "AudioTimeSyncController/State", "Playing"));
}
// Autogenerated static field setter
// Set static field: static public AudioTimeSyncController/State Playing
void GlobalNamespace::AudioTimeSyncController::State::_set_Playing(GlobalNamespace::AudioTimeSyncController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::State::_set_Playing");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AudioTimeSyncController/State", "Playing", value));
}
// Autogenerated static field getter
// Get static field: static public AudioTimeSyncController/State Paused
GlobalNamespace::AudioTimeSyncController::State GlobalNamespace::AudioTimeSyncController::State::_get_Paused() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::State::_get_Paused");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AudioTimeSyncController::State>("", "AudioTimeSyncController/State", "Paused"));
}
// Autogenerated static field setter
// Set static field: static public AudioTimeSyncController/State Paused
void GlobalNamespace::AudioTimeSyncController::State::_set_Paused(GlobalNamespace::AudioTimeSyncController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::State::_set_Paused");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AudioTimeSyncController/State", "Paused", value));
}
// Autogenerated static field getter
// Get static field: static public AudioTimeSyncController/State Stopped
GlobalNamespace::AudioTimeSyncController::State GlobalNamespace::AudioTimeSyncController::State::_get_Stopped() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::State::_get_Stopped");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AudioTimeSyncController::State>("", "AudioTimeSyncController/State", "Stopped"));
}
// Autogenerated static field setter
// Set static field: static public AudioTimeSyncController/State Stopped
void GlobalNamespace::AudioTimeSyncController::State::_set_Stopped(GlobalNamespace::AudioTimeSyncController::State value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioTimeSyncController::State::_set_Stopped");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AudioTimeSyncController/State", "Stopped", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AutomaticSFXVolume
#include "GlobalNamespace/AutomaticSFXVolume.hpp"
// Including type: AutomaticSFXVolume/InitData
#include "GlobalNamespace/AutomaticSFXVolume_InitData.hpp"
// Including type: AutomaticSFXVolumeParamsSO
#include "GlobalNamespace/AutomaticSFXVolumeParamsSO.hpp"
// Including type: AudioManagerSO
#include "GlobalNamespace/AudioManagerSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kBaseVolume
float GlobalNamespace::AutomaticSFXVolume::_get_kBaseVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolume::_get_kBaseVolume");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "AutomaticSFXVolume", "kBaseVolume"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kBaseVolume
void GlobalNamespace::AutomaticSFXVolume::_set_kBaseVolume(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolume::_set_kBaseVolume");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AutomaticSFXVolume", "kBaseVolume", value));
}
// Autogenerated method: AutomaticSFXVolume.Start
void GlobalNamespace::AutomaticSFXVolume::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolume::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AutomaticSFXVolume.OnDisable
void GlobalNamespace::AutomaticSFXVolume::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolume::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AutomaticSFXVolume.OnValidate
void GlobalNamespace::AutomaticSFXVolume::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolume::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AutomaticSFXVolume.RecalculateParams
void GlobalNamespace::AutomaticSFXVolume::RecalculateParams() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolume::RecalculateParams");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RecalculateParams", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AutomaticSFXVolume.OnAudioFilterRead
void GlobalNamespace::AutomaticSFXVolume::OnAudioFilterRead(::Array<float>* data, int channels) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolume::OnAudioFilterRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnAudioFilterRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(data), ::il2cpp_utils::ExtractType(channels)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, data, channels);
}
// Autogenerated method: AutomaticSFXVolume.Update
void GlobalNamespace::AutomaticSFXVolume::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolume::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AutomaticSFXVolume::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutomaticSFXVolume::*)()>(&AutomaticSFXVolume::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolume*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutomaticSFXVolume::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutomaticSFXVolume::*)()>(&AutomaticSFXVolume::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolume*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutomaticSFXVolume::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutomaticSFXVolume::*)()>(&AutomaticSFXVolume::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolume*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutomaticSFXVolume::RecalculateParams
// Il2CppName: RecalculateParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutomaticSFXVolume::*)()>(&AutomaticSFXVolume::RecalculateParams)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolume*), "RecalculateParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutomaticSFXVolume::OnAudioFilterRead
// Il2CppName: OnAudioFilterRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutomaticSFXVolume::*)(::Array<float>*, int)>(&AutomaticSFXVolume::OnAudioFilterRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolume*), "OnAudioFilterRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<float>*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AutomaticSFXVolume::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutomaticSFXVolume::*)()>(&AutomaticSFXVolume::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolume*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutomaticSFXVolume::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutomaticSFXVolume::*)()>(&AutomaticSFXVolume::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolume*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutomaticSFXVolume::*)()>(&AutomaticSFXVolume::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolume*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AutomaticSFXVolume/InitData
#include "GlobalNamespace/AutomaticSFXVolume_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: AutomaticSFXVolume::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutomaticSFXVolume::InitData::*)(float, bool, float)>(&AutomaticSFXVolume::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolume::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutomaticSFXVolume::InitData::*)(float, bool, float)>(&AutomaticSFXVolume::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolume::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AutomaticSFXVolumeParamsSO
#include "GlobalNamespace/AutomaticSFXVolumeParamsSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AutomaticSFXVolumeParamsSO.get_musicVolumeMultiplier
float GlobalNamespace::AutomaticSFXVolumeParamsSO::get_musicVolumeMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolumeParamsSO::get_musicVolumeMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_musicVolumeMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AutomaticSFXVolumeParamsSO.get_threshold
float GlobalNamespace::AutomaticSFXVolumeParamsSO::get_threshold() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolumeParamsSO::get_threshold");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_threshold", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AutomaticSFXVolumeParamsSO.get_impact
float GlobalNamespace::AutomaticSFXVolumeParamsSO::get_impact() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolumeParamsSO::get_impact");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_impact", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AutomaticSFXVolumeParamsSO.get_attackTime
float GlobalNamespace::AutomaticSFXVolumeParamsSO::get_attackTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolumeParamsSO::get_attackTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_attackTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AutomaticSFXVolumeParamsSO.get_releaseTime
float GlobalNamespace::AutomaticSFXVolumeParamsSO::get_releaseTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolumeParamsSO::get_releaseTime");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_releaseTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AutomaticSFXVolumeParamsSO.get_minVolume
float GlobalNamespace::AutomaticSFXVolumeParamsSO::get_minVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolumeParamsSO::get_minVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_minVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AutomaticSFXVolumeParamsSO.get_maxVolume
float GlobalNamespace::AutomaticSFXVolumeParamsSO::get_maxVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolumeParamsSO::get_maxVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: AutomaticSFXVolumeParamsSO.get_volumeSmooth
float GlobalNamespace::AutomaticSFXVolumeParamsSO::get_volumeSmooth() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AutomaticSFXVolumeParamsSO::get_volumeSmooth");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_volumeSmooth", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AutomaticSFXVolumeParamsSO::get_musicVolumeMultiplier
// Il2CppName: get_musicVolumeMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AutomaticSFXVolumeParamsSO::*)()>(&AutomaticSFXVolumeParamsSO::get_musicVolumeMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolumeParamsSO*), "get_musicVolumeMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutomaticSFXVolumeParamsSO::get_threshold
// Il2CppName: get_threshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AutomaticSFXVolumeParamsSO::*)()>(&AutomaticSFXVolumeParamsSO::get_threshold)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolumeParamsSO*), "get_threshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutomaticSFXVolumeParamsSO::get_impact
// Il2CppName: get_impact
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AutomaticSFXVolumeParamsSO::*)()>(&AutomaticSFXVolumeParamsSO::get_impact)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolumeParamsSO*), "get_impact", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutomaticSFXVolumeParamsSO::get_attackTime
// Il2CppName: get_attackTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AutomaticSFXVolumeParamsSO::*)()>(&AutomaticSFXVolumeParamsSO::get_attackTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolumeParamsSO*), "get_attackTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutomaticSFXVolumeParamsSO::get_releaseTime
// Il2CppName: get_releaseTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AutomaticSFXVolumeParamsSO::*)()>(&AutomaticSFXVolumeParamsSO::get_releaseTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolumeParamsSO*), "get_releaseTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutomaticSFXVolumeParamsSO::get_minVolume
// Il2CppName: get_minVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AutomaticSFXVolumeParamsSO::*)()>(&AutomaticSFXVolumeParamsSO::get_minVolume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolumeParamsSO*), "get_minVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutomaticSFXVolumeParamsSO::get_maxVolume
// Il2CppName: get_maxVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AutomaticSFXVolumeParamsSO::*)()>(&AutomaticSFXVolumeParamsSO::get_maxVolume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolumeParamsSO*), "get_maxVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutomaticSFXVolumeParamsSO::get_volumeSmooth
// Il2CppName: get_volumeSmooth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (AutomaticSFXVolumeParamsSO::*)()>(&AutomaticSFXVolumeParamsSO::get_volumeSmooth)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolumeParamsSO*), "get_volumeSmooth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AutomaticSFXVolumeParamsSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutomaticSFXVolumeParamsSO::*)()>(&AutomaticSFXVolumeParamsSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolumeParamsSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AutomaticSFXVolumeParamsSO::*)()>(&AutomaticSFXVolumeParamsSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AutomaticSFXVolumeParamsSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BombCutSoundEffect
#include "GlobalNamespace/BombCutSoundEffect.hpp"
// Including type: BombCutSoundEffect/Pool
#include "GlobalNamespace/BombCutSoundEffect_Pool.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BombCutSoundEffect.add_didFinishEvent
void GlobalNamespace::BombCutSoundEffect::add_didFinishEvent(System::Action_1<GlobalNamespace::BombCutSoundEffect*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombCutSoundEffect::add_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BombCutSoundEffect.remove_didFinishEvent
void GlobalNamespace::BombCutSoundEffect::remove_didFinishEvent(System::Action_1<GlobalNamespace::BombCutSoundEffect*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombCutSoundEffect::remove_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: BombCutSoundEffect.Init
void GlobalNamespace::BombCutSoundEffect::Init(UnityEngine::AudioClip* audioClip, GlobalNamespace::Saber* saber, float volume) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombCutSoundEffect::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(audioClip), ::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(volume)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, audioClip, saber, volume);
}
// Autogenerated method: BombCutSoundEffect.LateUpdate
void GlobalNamespace::BombCutSoundEffect::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombCutSoundEffect::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombCutSoundEffect.StopPlayingAndFinish
void GlobalNamespace::BombCutSoundEffect::StopPlayingAndFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombCutSoundEffect::StopPlayingAndFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopPlayingAndFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: BombCutSoundEffect::add_didFinishEvent
// Il2CppName: add_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombCutSoundEffect::*)(System::Action_1<GlobalNamespace::BombCutSoundEffect*>*)>(&BombCutSoundEffect::add_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombCutSoundEffect*), "add_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::BombCutSoundEffect*>*>()});
  }
};
// Writing MetadataGetter for method: BombCutSoundEffect::remove_didFinishEvent
// Il2CppName: remove_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombCutSoundEffect::*)(System::Action_1<GlobalNamespace::BombCutSoundEffect*>*)>(&BombCutSoundEffect::remove_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombCutSoundEffect*), "remove_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<GlobalNamespace::BombCutSoundEffect*>*>()});
  }
};
// Writing MetadataGetter for method: BombCutSoundEffect::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombCutSoundEffect::*)(UnityEngine::AudioClip*, GlobalNamespace::Saber*, float)>(&BombCutSoundEffect::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombCutSoundEffect*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Saber*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: BombCutSoundEffect::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombCutSoundEffect::*)()>(&BombCutSoundEffect::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombCutSoundEffect*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BombCutSoundEffect::StopPlayingAndFinish
// Il2CppName: StopPlayingAndFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombCutSoundEffect::*)()>(&BombCutSoundEffect::StopPlayingAndFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombCutSoundEffect*), "StopPlayingAndFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BombCutSoundEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombCutSoundEffect::*)()>(&BombCutSoundEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombCutSoundEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombCutSoundEffect::*)()>(&BombCutSoundEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombCutSoundEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: BombCutSoundEffect/Pool
#include "GlobalNamespace/BombCutSoundEffect_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: BombCutSoundEffect::Pool::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombCutSoundEffect::Pool::*)()>(&BombCutSoundEffect::Pool::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombCutSoundEffect::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombCutSoundEffect::Pool::*)()>(&BombCutSoundEffect::Pool::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombCutSoundEffect::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BombCutSoundEffectManager
#include "GlobalNamespace/BombCutSoundEffectManager.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: RandomObjectPicker`1
#include "GlobalNamespace/RandomObjectPicker_1.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: BombCutSoundEffect/Pool
#include "GlobalNamespace/BombCutSoundEffect_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: BombCutSoundEffectManager.Start
void GlobalNamespace::BombCutSoundEffectManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombCutSoundEffectManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombCutSoundEffectManager.HandleNoteWasCut
void GlobalNamespace::BombCutSoundEffectManager::HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombCutSoundEffectManager::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Autogenerated method: BombCutSoundEffectManager.OnDestroy
void GlobalNamespace::BombCutSoundEffectManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombCutSoundEffectManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: BombCutSoundEffectManager.HandleBombCutSoundEffectDidFinish
void GlobalNamespace::BombCutSoundEffectManager::HandleBombCutSoundEffectDidFinish(GlobalNamespace::BombCutSoundEffect* bombCutSoundEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombCutSoundEffectManager::HandleBombCutSoundEffectDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleBombCutSoundEffectDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bombCutSoundEffect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bombCutSoundEffect);
}
// Writing MetadataGetter for method: BombCutSoundEffectManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombCutSoundEffectManager::*)()>(&BombCutSoundEffectManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombCutSoundEffectManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BombCutSoundEffectManager::HandleNoteWasCut
// Il2CppName: HandleNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombCutSoundEffectManager::*)(GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo&)>(&BombCutSoundEffectManager::HandleNoteWasCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombCutSoundEffectManager*), "HandleNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>()});
  }
};
// Writing MetadataGetter for method: BombCutSoundEffectManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombCutSoundEffectManager::*)()>(&BombCutSoundEffectManager::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombCutSoundEffectManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BombCutSoundEffectManager::HandleBombCutSoundEffectDidFinish
// Il2CppName: HandleBombCutSoundEffectDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombCutSoundEffectManager::*)(GlobalNamespace::BombCutSoundEffect*)>(&BombCutSoundEffectManager::HandleBombCutSoundEffectDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombCutSoundEffectManager*), "HandleBombCutSoundEffectDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::BombCutSoundEffect*>()});
  }
};
// Writing MetadataGetter for method: BombCutSoundEffectManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombCutSoundEffectManager::*)()>(&BombCutSoundEffectManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombCutSoundEffectManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (BombCutSoundEffectManager::*)()>(&BombCutSoundEffectManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BombCutSoundEffectManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: CrossFadeAudioSource
#include "GlobalNamespace/CrossFadeAudioSource.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: AudioPitchGainEffect
#include "GlobalNamespace/AudioPitchGainEffect.hpp"
// Including type: Tweening.TweeningManager
#include "Tweening/TweeningManager.hpp"
// Including type: Tweening.Tween`1
#include "Tweening/Tween_1.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: CrossFadeAudioSource.get_clip
UnityEngine::AudioClip* GlobalNamespace::CrossFadeAudioSource::get_clip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::get_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: CrossFadeAudioSource.set_clip
void GlobalNamespace::CrossFadeAudioSource::set_clip(UnityEngine::AudioClip* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::set_clip");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CrossFadeAudioSource.set_pitch
void GlobalNamespace::CrossFadeAudioSource::set_pitch(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::set_pitch");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pitch", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CrossFadeAudioSource.set_time
void GlobalNamespace::CrossFadeAudioSource::set_time(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::set_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: CrossFadeAudioSource.get_isPlaying
bool GlobalNamespace::CrossFadeAudioSource::get_isPlaying() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::get_isPlaying");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPlaying", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: CrossFadeAudioSource.Awake
void GlobalNamespace::CrossFadeAudioSource::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CrossFadeAudioSource.OnDestroy
void GlobalNamespace::CrossFadeAudioSource::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CrossFadeAudioSource.PlayPitchGainEffect
void GlobalNamespace::CrossFadeAudioSource::PlayPitchGainEffect(float volumeScale) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::PlayPitchGainEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PlayPitchGainEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(volumeScale)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, volumeScale);
}
// Autogenerated method: CrossFadeAudioSource.InterruptLastPitchGainEffect
void GlobalNamespace::CrossFadeAudioSource::InterruptLastPitchGainEffect() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::InterruptLastPitchGainEffect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InterruptLastPitchGainEffect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CrossFadeAudioSource.CrossFade
void GlobalNamespace::CrossFadeAudioSource::CrossFade(float toSongTime, float toVolume) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::CrossFade");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFade", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(toSongTime), ::il2cpp_utils::ExtractType(toVolume)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, toSongTime, toVolume);
}
// Autogenerated method: CrossFadeAudioSource.Play
void GlobalNamespace::CrossFadeAudioSource::Play() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::Play");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Play", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CrossFadeAudioSource.Stop
void GlobalNamespace::CrossFadeAudioSource::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: CrossFadeAudioSource.<Awake>b__21_0
void GlobalNamespace::CrossFadeAudioSource::$Awake$b__21_0(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::<Awake>b__21_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__21_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: CrossFadeAudioSource.<Awake>b__21_1
void GlobalNamespace::CrossFadeAudioSource::$Awake$b__21_1(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::<Awake>b__21_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Awake>b__21_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: CrossFadeAudioSource.<CrossFade>b__25_0
void GlobalNamespace::CrossFadeAudioSource::$CrossFade$b__25_0(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::<CrossFade>b__25_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CrossFade>b__25_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: CrossFadeAudioSource.<CrossFade>b__25_1
void GlobalNamespace::CrossFadeAudioSource::$CrossFade$b__25_1(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::<CrossFade>b__25_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CrossFade>b__25_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: CrossFadeAudioSource.<CrossFade>b__25_2
void GlobalNamespace::CrossFadeAudioSource::$CrossFade$b__25_2() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::<CrossFade>b__25_2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CrossFade>b__25_2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CrossFadeAudioSource::get_clip
// Il2CppName: get_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (CrossFadeAudioSource::*)()>(&CrossFadeAudioSource::get_clip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "get_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::set_clip
// Il2CppName: set_clip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)(UnityEngine::AudioClip*)>(&CrossFadeAudioSource::set_clip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "set_clip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>()});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::set_pitch
// Il2CppName: set_pitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)(float)>(&CrossFadeAudioSource::set_pitch)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "set_pitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::set_time
// Il2CppName: set_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)(float)>(&CrossFadeAudioSource::set_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "set_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::get_isPlaying
// Il2CppName: get_isPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CrossFadeAudioSource::*)()>(&CrossFadeAudioSource::get_isPlaying)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "get_isPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)()>(&CrossFadeAudioSource::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)()>(&CrossFadeAudioSource::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::PlayPitchGainEffect
// Il2CppName: PlayPitchGainEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)(float)>(&CrossFadeAudioSource::PlayPitchGainEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "PlayPitchGainEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::InterruptLastPitchGainEffect
// Il2CppName: InterruptLastPitchGainEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)()>(&CrossFadeAudioSource::InterruptLastPitchGainEffect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "InterruptLastPitchGainEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::CrossFade
// Il2CppName: CrossFade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)(float, float)>(&CrossFadeAudioSource::CrossFade)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "CrossFade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::Play
// Il2CppName: Play
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)()>(&CrossFadeAudioSource::Play)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "Play", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)()>(&CrossFadeAudioSource::Stop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::$Awake$b__21_0
// Il2CppName: <Awake>b__21_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)(float)>(&CrossFadeAudioSource::$Awake$b__21_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "<Awake>b__21_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::$Awake$b__21_1
// Il2CppName: <Awake>b__21_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)(float)>(&CrossFadeAudioSource::$Awake$b__21_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "<Awake>b__21_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::$CrossFade$b__25_0
// Il2CppName: <CrossFade>b__25_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)(float)>(&CrossFadeAudioSource::$CrossFade$b__25_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "<CrossFade>b__25_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::$CrossFade$b__25_1
// Il2CppName: <CrossFade>b__25_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)(float)>(&CrossFadeAudioSource::$CrossFade$b__25_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "<CrossFade>b__25_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::$CrossFade$b__25_2
// Il2CppName: <CrossFade>b__25_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)()>(&CrossFadeAudioSource::$CrossFade$b__25_2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), "<CrossFade>b__25_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CrossFadeAudioSource::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)()>(&CrossFadeAudioSource::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CrossFadeAudioSource::*)()>(&CrossFadeAudioSource::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CrossFadeAudioSource*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: DisableSpatializerOnOldWindows
#include "GlobalNamespace/DisableSpatializerOnOldWindows.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: DisableSpatializerOnOldWindows::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableSpatializerOnOldWindows::*)()>(&DisableSpatializerOnOldWindows::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableSpatializerOnOldWindows*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (DisableSpatializerOnOldWindows::*)()>(&DisableSpatializerOnOldWindows::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(DisableSpatializerOnOldWindows*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FadeOutSongPreviewPlayerOnSceneTransitionStart
#include "GlobalNamespace/FadeOutSongPreviewPlayerOnSceneTransitionStart.hpp"
// Including type: AudioPlayerBase
#include "GlobalNamespace/AudioPlayerBase.hpp"
// Including type: GameScenesManager
#include "GlobalNamespace/GameScenesManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FadeOutSongPreviewPlayerOnSceneTransitionStart.Start
void GlobalNamespace::FadeOutSongPreviewPlayerOnSceneTransitionStart::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeOutSongPreviewPlayerOnSceneTransitionStart::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeOutSongPreviewPlayerOnSceneTransitionStart.OnDestroy
void GlobalNamespace::FadeOutSongPreviewPlayerOnSceneTransitionStart::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeOutSongPreviewPlayerOnSceneTransitionStart::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FadeOutSongPreviewPlayerOnSceneTransitionStart.HandleGameScenesManagerTransitionDidStart
void GlobalNamespace::FadeOutSongPreviewPlayerOnSceneTransitionStart::HandleGameScenesManagerTransitionDidStart(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FadeOutSongPreviewPlayerOnSceneTransitionStart::HandleGameScenesManagerTransitionDidStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameScenesManagerTransitionDidStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration);
}
// Writing MetadataGetter for method: FadeOutSongPreviewPlayerOnSceneTransitionStart::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeOutSongPreviewPlayerOnSceneTransitionStart::*)()>(&FadeOutSongPreviewPlayerOnSceneTransitionStart::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeOutSongPreviewPlayerOnSceneTransitionStart*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeOutSongPreviewPlayerOnSceneTransitionStart::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeOutSongPreviewPlayerOnSceneTransitionStart::*)()>(&FadeOutSongPreviewPlayerOnSceneTransitionStart::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeOutSongPreviewPlayerOnSceneTransitionStart*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FadeOutSongPreviewPlayerOnSceneTransitionStart::HandleGameScenesManagerTransitionDidStart
// Il2CppName: HandleGameScenesManagerTransitionDidStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeOutSongPreviewPlayerOnSceneTransitionStart::*)(float)>(&FadeOutSongPreviewPlayerOnSceneTransitionStart::HandleGameScenesManagerTransitionDidStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeOutSongPreviewPlayerOnSceneTransitionStart*), "HandleGameScenesManagerTransitionDidStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FadeOutSongPreviewPlayerOnSceneTransitionStart::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeOutSongPreviewPlayerOnSceneTransitionStart::*)()>(&FadeOutSongPreviewPlayerOnSceneTransitionStart::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeOutSongPreviewPlayerOnSceneTransitionStart*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FadeOutSongPreviewPlayerOnSceneTransitionStart::*)()>(&FadeOutSongPreviewPlayerOnSceneTransitionStart::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FadeOutSongPreviewPlayerOnSceneTransitionStart*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: IAudioTimeSource.get_songTime
float GlobalNamespace::IAudioTimeSource::get_songTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAudioTimeSource::get_songTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IAudioTimeSource.get_songEndTime
float GlobalNamespace::IAudioTimeSource::get_songEndTime() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAudioTimeSource::get_songEndTime");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_songEndTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: IAudioTimeSource.get_isReady
bool GlobalNamespace::IAudioTimeSource::get_isReady() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAudioTimeSource::get_isReady");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IAudioTimeSource::get_songTime
// Il2CppName: get_songTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IAudioTimeSource::*)()>(&IAudioTimeSource::get_songTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAudioTimeSource*), "get_songTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IAudioTimeSource::get_songEndTime
// Il2CppName: get_songEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IAudioTimeSource::*)()>(&IAudioTimeSource::get_songEndTime)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAudioTimeSource*), "get_songEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IAudioTimeSource::get_isReady
// Il2CppName: get_isReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IAudioTimeSource::*)()>(&IAudioTimeSource::get_isReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IAudioTimeSource*), "get_isReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MainAudioEffects
#include "GlobalNamespace/MainAudioEffects.hpp"
// Including type: UnityEngine.AudioLowPassFilter
#include "UnityEngine/AudioLowPassFilter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kDefaultCutoffFrequency
int GlobalNamespace::MainAudioEffects::_get_kDefaultCutoffFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainAudioEffects::_get_kDefaultCutoffFrequency");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MainAudioEffects", "kDefaultCutoffFrequency"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kDefaultCutoffFrequency
void GlobalNamespace::MainAudioEffects::_set_kDefaultCutoffFrequency(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainAudioEffects::_set_kDefaultCutoffFrequency");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainAudioEffects", "kDefaultCutoffFrequency", value));
}
// Autogenerated static field getter
// Get static field: static private System.Int32 kLowPassCutoffFrequency
int GlobalNamespace::MainAudioEffects::_get_kLowPassCutoffFrequency() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainAudioEffects::_get_kLowPassCutoffFrequency");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "MainAudioEffects", "kLowPassCutoffFrequency"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kLowPassCutoffFrequency
void GlobalNamespace::MainAudioEffects::_set_kLowPassCutoffFrequency(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainAudioEffects::_set_kLowPassCutoffFrequency");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MainAudioEffects", "kLowPassCutoffFrequency", value));
}
// Autogenerated method: MainAudioEffects.Start
void GlobalNamespace::MainAudioEffects::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainAudioEffects::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainAudioEffects.LateUpdate
void GlobalNamespace::MainAudioEffects::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainAudioEffects::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainAudioEffects.ResumeNormalSound
void GlobalNamespace::MainAudioEffects::ResumeNormalSound() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainAudioEffects::ResumeNormalSound");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeNormalSound", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MainAudioEffects.TriggerLowPass
void GlobalNamespace::MainAudioEffects::TriggerLowPass() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainAudioEffects::TriggerLowPass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerLowPass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MainAudioEffects::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainAudioEffects::*)()>(&MainAudioEffects::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainAudioEffects*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainAudioEffects::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainAudioEffects::*)()>(&MainAudioEffects::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainAudioEffects*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainAudioEffects::ResumeNormalSound
// Il2CppName: ResumeNormalSound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainAudioEffects::*)()>(&MainAudioEffects::ResumeNormalSound)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainAudioEffects*), "ResumeNormalSound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainAudioEffects::TriggerLowPass
// Il2CppName: TriggerLowPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainAudioEffects::*)()>(&MainAudioEffects::TriggerLowPass)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainAudioEffects*), "TriggerLowPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MainAudioEffects::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainAudioEffects::*)()>(&MainAudioEffects::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainAudioEffects*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MainAudioEffects::*)()>(&MainAudioEffects::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MainAudioEffects*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: INoteCutSoundEffectDidFinishEvent
#include "GlobalNamespace/INoteCutSoundEffectDidFinishEvent.hpp"
// Including type: NoteCutSoundEffect
#include "GlobalNamespace/NoteCutSoundEffect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: INoteCutSoundEffectDidFinishEvent.HandleNoteCutSoundEffectDidFinish
void GlobalNamespace::INoteCutSoundEffectDidFinishEvent::HandleNoteCutSoundEffectDidFinish(GlobalNamespace::NoteCutSoundEffect* noteCutSoundEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::INoteCutSoundEffectDidFinishEvent::HandleNoteCutSoundEffectDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteCutSoundEffectDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutSoundEffect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteCutSoundEffect);
}
// Writing MetadataGetter for method: INoteCutSoundEffectDidFinishEvent::HandleNoteCutSoundEffectDidFinish
// Il2CppName: HandleNoteCutSoundEffectDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (INoteCutSoundEffectDidFinishEvent::*)(GlobalNamespace::NoteCutSoundEffect*)>(&INoteCutSoundEffectDidFinishEvent::HandleNoteCutSoundEffectDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(INoteCutSoundEffectDidFinishEvent*), "HandleNoteCutSoundEffectDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutSoundEffect*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NoteCutSoundEffect
#include "GlobalNamespace/NoteCutSoundEffect.hpp"
// Including type: NoteCutSoundEffect/Pool
#include "GlobalNamespace/NoteCutSoundEffect_Pool.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: Saber
#include "GlobalNamespace/Saber.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: RandomObjectPicker`1
#include "GlobalNamespace/RandomObjectPicker_1.hpp"
// Including type: LazyCopyHashSet`1
#include "GlobalNamespace/LazyCopyHashSet_1.hpp"
// Including type: INoteCutSoundEffectDidFinishEvent
#include "GlobalNamespace/INoteCutSoundEffectDidFinishEvent.hpp"
// Including type: ILazyCopyHashSet`1
#include "GlobalNamespace/ILazyCopyHashSet_1.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kEndOverlap
float GlobalNamespace::NoteCutSoundEffect::_get_kEndOverlap() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::_get_kEndOverlap");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteCutSoundEffect", "kEndOverlap"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kEndOverlap
void GlobalNamespace::NoteCutSoundEffect::_set_kEndOverlap(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::_set_kEndOverlap");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutSoundEffect", "kEndOverlap", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kEndFadeLength
float GlobalNamespace::NoteCutSoundEffect::_get_kEndFadeLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::_get_kEndFadeLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteCutSoundEffect", "kEndFadeLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kEndFadeLength
void GlobalNamespace::NoteCutSoundEffect::_set_kEndFadeLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::_set_kEndFadeLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutSoundEffect", "kEndFadeLength", value));
}
// Autogenerated method: NoteCutSoundEffect.get_didFinishEvent
GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteCutSoundEffectDidFinishEvent*>* GlobalNamespace::NoteCutSoundEffect::get_didFinishEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::get_didFinishEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_didFinishEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteCutSoundEffectDidFinishEvent*>*, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutSoundEffect.set_volumeMultiplier
void GlobalNamespace::NoteCutSoundEffect::set_volumeMultiplier(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::set_volumeMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_volumeMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteCutSoundEffect.get_volumeMultiplier
float GlobalNamespace::NoteCutSoundEffect::get_volumeMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::get_volumeMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_volumeMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutSoundEffect.get_time
float GlobalNamespace::NoteCutSoundEffect::get_time() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::get_time");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_time", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutSoundEffect.Awake
void GlobalNamespace::NoteCutSoundEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutSoundEffect.Start
void GlobalNamespace::NoteCutSoundEffect::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutSoundEffect.Init
void GlobalNamespace::NoteCutSoundEffect::Init(UnityEngine::AudioClip* audioClip, GlobalNamespace::NoteController* noteController, double noteDSPTime, float aheadTime, float missedTimeOffset, float timeToPrevNote, float timeToNextNote, GlobalNamespace::Saber* saber, bool handleWrongSaberTypeAsGood, float volumeMultiplier, bool ignoreSaberSpeed, bool ignoreBadCuts) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(audioClip), ::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteDSPTime), ::il2cpp_utils::ExtractType(aheadTime), ::il2cpp_utils::ExtractType(missedTimeOffset), ::il2cpp_utils::ExtractType(timeToPrevNote), ::il2cpp_utils::ExtractType(timeToNextNote), ::il2cpp_utils::ExtractType(saber), ::il2cpp_utils::ExtractType(handleWrongSaberTypeAsGood), ::il2cpp_utils::ExtractType(volumeMultiplier), ::il2cpp_utils::ExtractType(ignoreSaberSpeed), ::il2cpp_utils::ExtractType(ignoreBadCuts)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, audioClip, noteController, noteDSPTime, aheadTime, missedTimeOffset, timeToPrevNote, timeToNextNote, saber, handleWrongSaberTypeAsGood, volumeMultiplier, ignoreSaberSpeed, ignoreBadCuts);
}
// Autogenerated method: NoteCutSoundEffect.ComputeDSPTimes
void GlobalNamespace::NoteCutSoundEffect::ComputeDSPTimes(double noteDSPTime, float aheadTime, float timeToPrevNote, float timeToNextNote) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::ComputeDSPTimes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ComputeDSPTimes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteDSPTime), ::il2cpp_utils::ExtractType(aheadTime), ::il2cpp_utils::ExtractType(timeToPrevNote), ::il2cpp_utils::ExtractType(timeToNextNote)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteDSPTime, aheadTime, timeToPrevNote, timeToNextNote);
}
// Autogenerated method: NoteCutSoundEffect.LateUpdate
void GlobalNamespace::NoteCutSoundEffect::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutSoundEffect.StopPlayingAndFinish
void GlobalNamespace::NoteCutSoundEffect::StopPlayingAndFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::StopPlayingAndFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopPlayingAndFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutSoundEffect.NoteWasCut
void GlobalNamespace::NoteCutSoundEffect::NoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffect::NoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "NoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Writing MetadataGetter for method: NoteCutSoundEffect::get_didFinishEvent
// Il2CppName: get_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ILazyCopyHashSet_1<GlobalNamespace::INoteCutSoundEffectDidFinishEvent*>* (NoteCutSoundEffect::*)()>(&NoteCutSoundEffect::get_didFinishEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffect*), "get_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffect::set_volumeMultiplier
// Il2CppName: set_volumeMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffect::*)(float)>(&NoteCutSoundEffect::set_volumeMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffect*), "set_volumeMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffect::get_volumeMultiplier
// Il2CppName: get_volumeMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (NoteCutSoundEffect::*)()>(&NoteCutSoundEffect::get_volumeMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffect*), "get_volumeMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffect::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (NoteCutSoundEffect::*)()>(&NoteCutSoundEffect::get_time)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffect*), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffect::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffect::*)()>(&NoteCutSoundEffect::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffect*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffect::*)()>(&NoteCutSoundEffect::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffect::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffect::*)(UnityEngine::AudioClip*, GlobalNamespace::NoteController*, double, float, float, float, float, GlobalNamespace::Saber*, bool, float, bool, bool)>(&NoteCutSoundEffect::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffect*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>(), ::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::Saber*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffect::ComputeDSPTimes
// Il2CppName: ComputeDSPTimes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffect::*)(double, float, float, float)>(&NoteCutSoundEffect::ComputeDSPTimes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffect*), "ComputeDSPTimes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<double>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffect::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffect::*)()>(&NoteCutSoundEffect::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffect*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffect::StopPlayingAndFinish
// Il2CppName: StopPlayingAndFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffect::*)()>(&NoteCutSoundEffect::StopPlayingAndFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffect*), "StopPlayingAndFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffect::NoteWasCut
// Il2CppName: NoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffect::*)(GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo&)>(&NoteCutSoundEffect::NoteWasCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffect*), "NoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>()});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffect::*)()>(&NoteCutSoundEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffect::*)()>(&NoteCutSoundEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutSoundEffect/Pool
#include "GlobalNamespace/NoteCutSoundEffect_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NoteCutSoundEffect::Pool::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffect::Pool::*)()>(&NoteCutSoundEffect::Pool::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffect::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffect::Pool::*)()>(&NoteCutSoundEffect::Pool::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffect::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NoteCutSoundEffectManager
#include "GlobalNamespace/NoteCutSoundEffectManager.hpp"
// Including type: NoteCutSoundEffectManager/InitData
#include "GlobalNamespace/NoteCutSoundEffectManager_InitData.hpp"
// Including type: AudioManagerSO
#include "GlobalNamespace/AudioManagerSO.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: BeatmapObjectManager
#include "GlobalNamespace/BeatmapObjectManager.hpp"
// Including type: SaberManager
#include "GlobalNamespace/SaberManager.hpp"
// Including type: AudioTimeSyncController
#include "GlobalNamespace/AudioTimeSyncController.hpp"
// Including type: RandomObjectPicker`1
#include "GlobalNamespace/RandomObjectPicker_1.hpp"
// Including type: MemoryPoolContainer`1
#include "GlobalNamespace/MemoryPoolContainer_1.hpp"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: NoteCutInfo
#include "GlobalNamespace/NoteCutInfo.hpp"
// Including type: NoteCutSoundEffect/Pool
#include "GlobalNamespace/NoteCutSoundEffect_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Int32 kMaxNumberOfEffects
int GlobalNamespace::NoteCutSoundEffectManager::_get_kMaxNumberOfEffects() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffectManager::_get_kMaxNumberOfEffects");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "NoteCutSoundEffectManager", "kMaxNumberOfEffects"));
}
// Autogenerated static field setter
// Set static field: static private System.Int32 kMaxNumberOfEffects
void GlobalNamespace::NoteCutSoundEffectManager::_set_kMaxNumberOfEffects(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffectManager::_set_kMaxNumberOfEffects");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutSoundEffectManager", "kMaxNumberOfEffects", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kTwoNotesAtTheSameTimeVolumeMul
float GlobalNamespace::NoteCutSoundEffectManager::_get_kTwoNotesAtTheSameTimeVolumeMul() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffectManager::_get_kTwoNotesAtTheSameTimeVolumeMul");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteCutSoundEffectManager", "kTwoNotesAtTheSameTimeVolumeMul"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kTwoNotesAtTheSameTimeVolumeMul
void GlobalNamespace::NoteCutSoundEffectManager::_set_kTwoNotesAtTheSameTimeVolumeMul(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffectManager::_set_kTwoNotesAtTheSameTimeVolumeMul");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutSoundEffectManager", "kTwoNotesAtTheSameTimeVolumeMul", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single kDenseNotesVolumeMul
float GlobalNamespace::NoteCutSoundEffectManager::_get_kDenseNotesVolumeMul() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffectManager::_get_kDenseNotesVolumeMul");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "NoteCutSoundEffectManager", "kDenseNotesVolumeMul"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kDenseNotesVolumeMul
void GlobalNamespace::NoteCutSoundEffectManager::_set_kDenseNotesVolumeMul(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffectManager::_set_kDenseNotesVolumeMul");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "NoteCutSoundEffectManager", "kDenseNotesVolumeMul", value));
}
// Autogenerated method: NoteCutSoundEffectManager.get_handleWrongSaberTypeAsGood
bool GlobalNamespace::NoteCutSoundEffectManager::get_handleWrongSaberTypeAsGood() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffectManager::get_handleWrongSaberTypeAsGood");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_handleWrongSaberTypeAsGood", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutSoundEffectManager.set_handleWrongSaberTypeAsGood
void GlobalNamespace::NoteCutSoundEffectManager::set_handleWrongSaberTypeAsGood(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffectManager::set_handleWrongSaberTypeAsGood");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_handleWrongSaberTypeAsGood", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: NoteCutSoundEffectManager.Start
void GlobalNamespace::NoteCutSoundEffectManager::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffectManager::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutSoundEffectManager.OnDestroy
void GlobalNamespace::NoteCutSoundEffectManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffectManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: NoteCutSoundEffectManager.HandleNoteWasSpawned
void GlobalNamespace::NoteCutSoundEffectManager::HandleNoteWasSpawned(GlobalNamespace::NoteController* noteController) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffectManager::HandleNoteWasSpawned");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasSpawned", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController);
}
// Autogenerated method: NoteCutSoundEffectManager.HandleNoteWasCut
void GlobalNamespace::NoteCutSoundEffectManager::HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo& noteCutInfo) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffectManager::HandleNoteWasCut");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteWasCut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteController), ::il2cpp_utils::ExtractType(noteCutInfo)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteController, noteCutInfo);
}
// Autogenerated method: NoteCutSoundEffectManager.HandleNoteCutSoundEffectDidFinish
void GlobalNamespace::NoteCutSoundEffectManager::HandleNoteCutSoundEffectDidFinish(GlobalNamespace::NoteCutSoundEffect* noteCutSoundEffect) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteCutSoundEffectManager::HandleNoteCutSoundEffectDidFinish");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleNoteCutSoundEffectDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(noteCutSoundEffect)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, noteCutSoundEffect);
}
// Writing MetadataGetter for method: NoteCutSoundEffectManager::get_handleWrongSaberTypeAsGood
// Il2CppName: get_handleWrongSaberTypeAsGood
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (NoteCutSoundEffectManager::*)()>(&NoteCutSoundEffectManager::get_handleWrongSaberTypeAsGood)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffectManager*), "get_handleWrongSaberTypeAsGood", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffectManager::set_handleWrongSaberTypeAsGood
// Il2CppName: set_handleWrongSaberTypeAsGood
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffectManager::*)(bool)>(&NoteCutSoundEffectManager::set_handleWrongSaberTypeAsGood)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffectManager*), "set_handleWrongSaberTypeAsGood", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffectManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffectManager::*)()>(&NoteCutSoundEffectManager::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffectManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffectManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffectManager::*)()>(&NoteCutSoundEffectManager::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffectManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffectManager::HandleNoteWasSpawned
// Il2CppName: HandleNoteWasSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffectManager::*)(GlobalNamespace::NoteController*)>(&NoteCutSoundEffectManager::HandleNoteWasSpawned)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffectManager*), "HandleNoteWasSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>()});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffectManager::HandleNoteWasCut
// Il2CppName: HandleNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffectManager::*)(GlobalNamespace::NoteController*, GlobalNamespace::NoteCutInfo&)>(&NoteCutSoundEffectManager::HandleNoteWasCut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffectManager*), "HandleNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteController*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutInfo&>()});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffectManager::HandleNoteCutSoundEffectDidFinish
// Il2CppName: HandleNoteCutSoundEffectDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffectManager::*)(GlobalNamespace::NoteCutSoundEffect*)>(&NoteCutSoundEffectManager::HandleNoteCutSoundEffectDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffectManager*), "HandleNoteCutSoundEffectDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::NoteCutSoundEffect*>()});
  }
};
// Writing MetadataGetter for method: NoteCutSoundEffectManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffectManager::*)()>(&NoteCutSoundEffectManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffectManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffectManager::*)()>(&NoteCutSoundEffectManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffectManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: NoteCutSoundEffectManager/InitData
#include "GlobalNamespace/NoteCutSoundEffectManager_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: NoteCutSoundEffectManager::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffectManager::InitData::*)(bool, bool)>(&NoteCutSoundEffectManager::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffectManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (NoteCutSoundEffectManager::InitData::*)(bool, bool)>(&NoteCutSoundEffectManager::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NoteCutSoundEffectManager::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ObstacleSaberSoundEffect
#include "GlobalNamespace/ObstacleSaberSoundEffect.hpp"
// Including type: ObstacleSaberSparkleEffectManager
#include "GlobalNamespace/ObstacleSaberSparkleEffectManager.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single kSmooth
float GlobalNamespace::ObstacleSaberSoundEffect::_get_kSmooth() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSoundEffect::_get_kSmooth");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("", "ObstacleSaberSoundEffect", "kSmooth"));
}
// Autogenerated static field setter
// Set static field: static private System.Single kSmooth
void GlobalNamespace::ObstacleSaberSoundEffect::_set_kSmooth(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSoundEffect::_set_kSmooth");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "ObstacleSaberSoundEffect", "kSmooth", value));
}
// Autogenerated method: ObstacleSaberSoundEffect.Awake
void GlobalNamespace::ObstacleSaberSoundEffect::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSoundEffect::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleSaberSoundEffect.OnDestroy
void GlobalNamespace::ObstacleSaberSoundEffect::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSoundEffect::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleSaberSoundEffect.LateUpdate
void GlobalNamespace::ObstacleSaberSoundEffect::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSoundEffect::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ObstacleSaberSoundEffect.HandleSparkleEffectDidStart
void GlobalNamespace::ObstacleSaberSoundEffect::HandleSparkleEffectDidStart(GlobalNamespace::SaberType saberType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSoundEffect::HandleSparkleEffectDidStart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSparkleEffectDidStart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saberType);
}
// Autogenerated method: ObstacleSaberSoundEffect.HandleSparkleEffecDidEnd
void GlobalNamespace::ObstacleSaberSoundEffect::HandleSparkleEffecDidEnd(GlobalNamespace::SaberType saberType) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSoundEffect::HandleSparkleEffecDidEnd");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSparkleEffecDidEnd", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(saberType)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, saberType);
}
// Writing MetadataGetter for method: ObstacleSaberSoundEffect::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleSaberSoundEffect::*)()>(&ObstacleSaberSoundEffect::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleSaberSoundEffect*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ObstacleSaberSoundEffect::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleSaberSoundEffect::*)()>(&ObstacleSaberSoundEffect::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleSaberSoundEffect*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ObstacleSaberSoundEffect::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleSaberSoundEffect::*)()>(&ObstacleSaberSoundEffect::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleSaberSoundEffect*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ObstacleSaberSoundEffect::HandleSparkleEffectDidStart
// Il2CppName: HandleSparkleEffectDidStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleSaberSoundEffect::*)(GlobalNamespace::SaberType)>(&ObstacleSaberSoundEffect::HandleSparkleEffectDidStart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleSaberSoundEffect*), "HandleSparkleEffectDidStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SaberType>()});
  }
};
// Writing MetadataGetter for method: ObstacleSaberSoundEffect::HandleSparkleEffecDidEnd
// Il2CppName: HandleSparkleEffecDidEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleSaberSoundEffect::*)(GlobalNamespace::SaberType)>(&ObstacleSaberSoundEffect::HandleSparkleEffecDidEnd)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleSaberSoundEffect*), "HandleSparkleEffecDidEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::SaberType>()});
  }
};
// Writing MetadataGetter for method: ObstacleSaberSoundEffect::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleSaberSoundEffect::*)()>(&ObstacleSaberSoundEffect::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleSaberSoundEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ObstacleSaberSoundEffect::*)()>(&ObstacleSaberSoundEffect::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ObstacleSaberSoundEffect*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayAudioOnGameEventController
#include "GlobalNamespace/PlayAudioOnGameEventController.hpp"
// Including type: PlayAudioOnGameEventController/EventAudioBinding
#include "GlobalNamespace/PlayAudioOnGameEventController_EventAudioBinding.hpp"
// Including type: AudioClipQueue
#include "GlobalNamespace/AudioClipQueue.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayAudioOnGameEventController.Awake
void GlobalNamespace::PlayAudioOnGameEventController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayAudioOnGameEventController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayAudioOnGameEventController.OnDestroy
void GlobalNamespace::PlayAudioOnGameEventController::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayAudioOnGameEventController::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PlayAudioOnGameEventController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayAudioOnGameEventController::*)()>(&PlayAudioOnGameEventController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayAudioOnGameEventController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayAudioOnGameEventController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayAudioOnGameEventController::*)()>(&PlayAudioOnGameEventController::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayAudioOnGameEventController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayAudioOnGameEventController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayAudioOnGameEventController::*)()>(&PlayAudioOnGameEventController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayAudioOnGameEventController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayAudioOnGameEventController::*)()>(&PlayAudioOnGameEventController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayAudioOnGameEventController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlayAudioOnGameEventController/EventAudioBinding
#include "GlobalNamespace/PlayAudioOnGameEventController_EventAudioBinding.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: LocalizedAudioClipSO
#include "GlobalNamespace/LocalizedAudioClipSO.hpp"
// Including type: AudioClipQueue
#include "GlobalNamespace/AudioClipQueue.hpp"
// Including type: RandomObjectPicker`1
#include "GlobalNamespace/RandomObjectPicker_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlayAudioOnGameEventController/EventAudioBinding.Init
void GlobalNamespace::PlayAudioOnGameEventController::EventAudioBinding::Init(GlobalNamespace::AudioClipQueue* audioClipQueue) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayAudioOnGameEventController::EventAudioBinding::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(audioClipQueue)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, audioClipQueue);
}
// Autogenerated method: PlayAudioOnGameEventController/EventAudioBinding.Deinit
void GlobalNamespace::PlayAudioOnGameEventController::EventAudioBinding::Deinit() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayAudioOnGameEventController::EventAudioBinding::Deinit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deinit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlayAudioOnGameEventController/EventAudioBinding.HandleGameEvent
void GlobalNamespace::PlayAudioOnGameEventController::EventAudioBinding::HandleGameEvent() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayAudioOnGameEventController::EventAudioBinding::HandleGameEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleGameEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: PlayAudioOnGameEventController::EventAudioBinding::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayAudioOnGameEventController::EventAudioBinding::*)(GlobalNamespace::AudioClipQueue*)>(&PlayAudioOnGameEventController::EventAudioBinding::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayAudioOnGameEventController::EventAudioBinding*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AudioClipQueue*>()});
  }
};
// Writing MetadataGetter for method: PlayAudioOnGameEventController::EventAudioBinding::Deinit
// Il2CppName: Deinit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayAudioOnGameEventController::EventAudioBinding::*)()>(&PlayAudioOnGameEventController::EventAudioBinding::Deinit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayAudioOnGameEventController::EventAudioBinding*), "Deinit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayAudioOnGameEventController::EventAudioBinding::HandleGameEvent
// Il2CppName: HandleGameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayAudioOnGameEventController::EventAudioBinding::*)()>(&PlayAudioOnGameEventController::EventAudioBinding::HandleGameEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayAudioOnGameEventController::EventAudioBinding*), "HandleGameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlayAudioOnGameEventController::EventAudioBinding::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayAudioOnGameEventController::EventAudioBinding::*)()>(&PlayAudioOnGameEventController::EventAudioBinding::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayAudioOnGameEventController::EventAudioBinding*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlayAudioOnGameEventController::EventAudioBinding::*)()>(&PlayAudioOnGameEventController::EventAudioBinding::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlayAudioOnGameEventController::EventAudioBinding*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ResetPitchOnGameplayFinished
#include "GlobalNamespace/ResetPitchOnGameplayFinished.hpp"
// Including type: GameplayLevelSceneTransitionEvents
#include "GlobalNamespace/GameplayLevelSceneTransitionEvents.hpp"
// Including type: AudioManagerSO
#include "GlobalNamespace/AudioManagerSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ResetPitchOnGameplayFinished.HandleAnyGameplayLevelDidFinish
void GlobalNamespace::ResetPitchOnGameplayFinished::HandleAnyGameplayLevelDidFinish() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResetPitchOnGameplayFinished::HandleAnyGameplayLevelDidFinish");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleAnyGameplayLevelDidFinish", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: ResetPitchOnGameplayFinished.Finalize
void GlobalNamespace::ResetPitchOnGameplayFinished::Finalize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ResetPitchOnGameplayFinished::Finalize");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Finalize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ResetPitchOnGameplayFinished::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResetPitchOnGameplayFinished::*)(GlobalNamespace::GameplayLevelSceneTransitionEvents*, GlobalNamespace::AudioManagerSO*)>(&ResetPitchOnGameplayFinished::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResetPitchOnGameplayFinished*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayLevelSceneTransitionEvents*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AudioManagerSO*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResetPitchOnGameplayFinished::*)(GlobalNamespace::GameplayLevelSceneTransitionEvents*, GlobalNamespace::AudioManagerSO*)>(&ResetPitchOnGameplayFinished::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResetPitchOnGameplayFinished*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::GameplayLevelSceneTransitionEvents*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AudioManagerSO*>()});
  }
};
// Writing MetadataGetter for method: ResetPitchOnGameplayFinished::HandleAnyGameplayLevelDidFinish
// Il2CppName: HandleAnyGameplayLevelDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResetPitchOnGameplayFinished::*)()>(&ResetPitchOnGameplayFinished::HandleAnyGameplayLevelDidFinish)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResetPitchOnGameplayFinished*), "HandleAnyGameplayLevelDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ResetPitchOnGameplayFinished::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ResetPitchOnGameplayFinished::*)()>(&ResetPitchOnGameplayFinished::Finalize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ResetPitchOnGameplayFinished*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SimpleAudioPlayer
#include "GlobalNamespace/SimpleAudioPlayer.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SimpleAudioPlayer.Start
void GlobalNamespace::SimpleAudioPlayer::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleAudioPlayer::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleAudioPlayer.Update
void GlobalNamespace::SimpleAudioPlayer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleAudioPlayer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleAudioPlayer.FadeIn
void GlobalNamespace::SimpleAudioPlayer::FadeIn(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleAudioPlayer::FadeIn");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeIn", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: SimpleAudioPlayer.get_activeAudioClip
UnityEngine::AudioClip* GlobalNamespace::SimpleAudioPlayer::get_activeAudioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleAudioPlayer::get_activeAudioClip");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeAudioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: SimpleAudioPlayer.FadeOut
void GlobalNamespace::SimpleAudioPlayer::FadeOut(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleAudioPlayer::FadeOut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration);
}
// Autogenerated method: SimpleAudioPlayer.PauseCurrentChannel
void GlobalNamespace::SimpleAudioPlayer::PauseCurrentChannel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleAudioPlayer::PauseCurrentChannel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseCurrentChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SimpleAudioPlayer.UnPauseCurrentChannel
void GlobalNamespace::SimpleAudioPlayer::UnPauseCurrentChannel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SimpleAudioPlayer::UnPauseCurrentChannel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnPauseCurrentChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SimpleAudioPlayer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleAudioPlayer::*)()>(&SimpleAudioPlayer::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleAudioPlayer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleAudioPlayer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleAudioPlayer::*)()>(&SimpleAudioPlayer::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleAudioPlayer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleAudioPlayer::FadeIn
// Il2CppName: FadeIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleAudioPlayer::*)(float)>(&SimpleAudioPlayer::FadeIn)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleAudioPlayer*), "FadeIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SimpleAudioPlayer::get_activeAudioClip
// Il2CppName: get_activeAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (SimpleAudioPlayer::*)()>(&SimpleAudioPlayer::get_activeAudioClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleAudioPlayer*), "get_activeAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleAudioPlayer::FadeOut
// Il2CppName: FadeOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleAudioPlayer::*)(float)>(&SimpleAudioPlayer::FadeOut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleAudioPlayer*), "FadeOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SimpleAudioPlayer::PauseCurrentChannel
// Il2CppName: PauseCurrentChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleAudioPlayer::*)()>(&SimpleAudioPlayer::PauseCurrentChannel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleAudioPlayer*), "PauseCurrentChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleAudioPlayer::UnPauseCurrentChannel
// Il2CppName: UnPauseCurrentChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleAudioPlayer::*)()>(&SimpleAudioPlayer::UnPauseCurrentChannel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleAudioPlayer*), "UnPauseCurrentChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SimpleAudioPlayer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleAudioPlayer::*)()>(&SimpleAudioPlayer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleAudioPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SimpleAudioPlayer::*)()>(&SimpleAudioPlayer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SimpleAudioPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongPreviewPlayer
#include "GlobalNamespace/SongPreviewPlayer.hpp"
// Including type: SongPreviewPlayer/InitData
#include "GlobalNamespace/SongPreviewPlayer_InitData.hpp"
// Including type: SongPreviewPlayer/AudioSourceParams
#include "GlobalNamespace/SongPreviewPlayer_AudioSourceParams.hpp"
// Including type: SongPreviewPlayer/AudioSourceVolumeController
#include "GlobalNamespace/SongPreviewPlayer_AudioSourceVolumeController.hpp"
// Including type: SongPreviewPlayer/<CrossFadeAfterDelayCoroutine>d__27
#include "GlobalNamespace/SongPreviewPlayer_-CrossFadeAfterDelayCoroutine-d__27.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
// Including type: UnityEngine.AudioClip
#include "UnityEngine/AudioClip.hpp"
// Including type: AudioManagerSO
#include "GlobalNamespace/AudioManagerSO.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SongPreviewPlayer.Awake
void GlobalNamespace::SongPreviewPlayer::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer.Start
void GlobalNamespace::SongPreviewPlayer::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer.OnEnable
void GlobalNamespace::SongPreviewPlayer::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer.CrossFadeAfterDelayCoroutine
System::Collections::IEnumerator* GlobalNamespace::SongPreviewPlayer::CrossFadeAfterDelayCoroutine(float delay) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::CrossFadeAfterDelayCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossFadeAfterDelayCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delay)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, delay);
}
// Autogenerated method: SongPreviewPlayer.OnDisable
void GlobalNamespace::SongPreviewPlayer::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer.Update
void GlobalNamespace::SongPreviewPlayer::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer.CrossfadeToDefault
void GlobalNamespace::SongPreviewPlayer::CrossfadeToDefault() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::CrossfadeToDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossfadeToDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer.CrossfadeToNewDefault
void GlobalNamespace::SongPreviewPlayer::CrossfadeToNewDefault(UnityEngine::AudioClip* audioClip) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::CrossfadeToNewDefault");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossfadeToNewDefault", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(audioClip)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, audioClip);
}
// Autogenerated method: SongPreviewPlayer.CrossfadeTo
void GlobalNamespace::SongPreviewPlayer::CrossfadeTo(UnityEngine::AudioClip* audioClip, float musicVolume, float startTime, float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::CrossfadeTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossfadeTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(audioClip), ::il2cpp_utils::ExtractType(musicVolume), ::il2cpp_utils::ExtractType(startTime), ::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, audioClip, musicVolume, startTime, duration);
}
// Autogenerated method: SongPreviewPlayer.CrossfadeTo
void GlobalNamespace::SongPreviewPlayer::CrossfadeTo(UnityEngine::AudioClip* audioClip, float musicVolume, float startTime, float duration, bool isDefault) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::CrossfadeTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CrossfadeTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(audioClip), ::il2cpp_utils::ExtractType(musicVolume), ::il2cpp_utils::ExtractType(startTime), ::il2cpp_utils::ExtractType(duration), ::il2cpp_utils::ExtractType(isDefault)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, audioClip, musicVolume, startTime, duration, isDefault);
}
// Autogenerated method: SongPreviewPlayer.get_activeAudioClip
UnityEngine::AudioClip* GlobalNamespace::SongPreviewPlayer::get_activeAudioClip() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::get_activeAudioClip");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_activeAudioClip", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::AudioClip*, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer.PauseCurrentChannel
void GlobalNamespace::SongPreviewPlayer::PauseCurrentChannel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::PauseCurrentChannel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseCurrentChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer.UnPauseCurrentChannel
void GlobalNamespace::SongPreviewPlayer::UnPauseCurrentChannel() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::UnPauseCurrentChannel");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnPauseCurrentChannel", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer.FadeOut
void GlobalNamespace::SongPreviewPlayer::FadeOut(float duration) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::FadeOut");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOut", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(duration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, duration);
}
// Writing MetadataGetter for method: SongPreviewPlayer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::*)()>(&SongPreviewPlayer::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::*)()>(&SongPreviewPlayer::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::*)()>(&SongPreviewPlayer::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::CrossFadeAfterDelayCoroutine
// Il2CppName: CrossFadeAfterDelayCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (SongPreviewPlayer::*)(float)>(&SongPreviewPlayer::CrossFadeAfterDelayCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), "CrossFadeAfterDelayCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::*)()>(&SongPreviewPlayer::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::*)()>(&SongPreviewPlayer::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::CrossfadeToDefault
// Il2CppName: CrossfadeToDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::*)()>(&SongPreviewPlayer::CrossfadeToDefault)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), "CrossfadeToDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::CrossfadeToNewDefault
// Il2CppName: CrossfadeToNewDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::*)(UnityEngine::AudioClip*)>(&SongPreviewPlayer::CrossfadeToNewDefault)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), "CrossfadeToNewDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>()});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::CrossfadeTo
// Il2CppName: CrossfadeTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::*)(UnityEngine::AudioClip*, float, float, float)>(&SongPreviewPlayer::CrossfadeTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), "CrossfadeTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::CrossfadeTo
// Il2CppName: CrossfadeTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::*)(UnityEngine::AudioClip*, float, float, float, bool)>(&SongPreviewPlayer::CrossfadeTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), "CrossfadeTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioClip*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::get_activeAudioClip
// Il2CppName: get_activeAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::AudioClip* (SongPreviewPlayer::*)()>(&SongPreviewPlayer::get_activeAudioClip)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), "get_activeAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::PauseCurrentChannel
// Il2CppName: PauseCurrentChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::*)()>(&SongPreviewPlayer::PauseCurrentChannel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), "PauseCurrentChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::UnPauseCurrentChannel
// Il2CppName: UnPauseCurrentChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::*)()>(&SongPreviewPlayer::UnPauseCurrentChannel)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), "UnPauseCurrentChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::FadeOut
// Il2CppName: FadeOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::*)(float)>(&SongPreviewPlayer::FadeOut)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), "FadeOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::*)()>(&SongPreviewPlayer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::*)()>(&SongPreviewPlayer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SongPreviewPlayer/InitData
#include "GlobalNamespace/SongPreviewPlayer_InitData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: SongPreviewPlayer::InitData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::InitData::*)(float)>(&SongPreviewPlayer::InitData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::InitData::*)(float)>(&SongPreviewPlayer::InitData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::InitData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SongPreviewPlayer/AudioSourceParams
#include "GlobalNamespace/SongPreviewPlayer_AudioSourceParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SongPreviewPlayer/AudioSourceParams.get_position
UnityEngine::Vector3 GlobalNamespace::SongPreviewPlayer::AudioSourceParams::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::AudioSourceParams::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer/AudioSourceParams.get_reverbZoneMix
float GlobalNamespace::SongPreviewPlayer::AudioSourceParams::get_reverbZoneMix() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::AudioSourceParams::get_reverbZoneMix");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_reverbZoneMix", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer/AudioSourceParams.get_spatialBlend
float GlobalNamespace::SongPreviewPlayer::AudioSourceParams::get_spatialBlend() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::AudioSourceParams::get_spatialBlend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spatialBlend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer/AudioSourceParams.get_spread
float GlobalNamespace::SongPreviewPlayer::AudioSourceParams::get_spread() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::AudioSourceParams::get_spread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SongPreviewPlayer::AudioSourceParams::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (SongPreviewPlayer::AudioSourceParams::*)()>(&SongPreviewPlayer::AudioSourceParams::get_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::AudioSourceParams*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::AudioSourceParams::get_reverbZoneMix
// Il2CppName: get_reverbZoneMix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SongPreviewPlayer::AudioSourceParams::*)()>(&SongPreviewPlayer::AudioSourceParams::get_reverbZoneMix)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::AudioSourceParams*), "get_reverbZoneMix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::AudioSourceParams::get_spatialBlend
// Il2CppName: get_spatialBlend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SongPreviewPlayer::AudioSourceParams::*)()>(&SongPreviewPlayer::AudioSourceParams::get_spatialBlend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::AudioSourceParams*), "get_spatialBlend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::AudioSourceParams::get_spread
// Il2CppName: get_spread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SongPreviewPlayer::AudioSourceParams::*)()>(&SongPreviewPlayer::AudioSourceParams::get_spread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::AudioSourceParams*), "get_spread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::AudioSourceParams::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::AudioSourceParams::*)()>(&SongPreviewPlayer::AudioSourceParams::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::AudioSourceParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::AudioSourceParams::*)()>(&SongPreviewPlayer::AudioSourceParams::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::AudioSourceParams*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SongPreviewPlayer/AudioSourceVolumeController
#include "GlobalNamespace/SongPreviewPlayer_AudioSourceVolumeController.hpp"
// Including type: UnityEngine.AudioSource
#include "UnityEngine/AudioSource.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SongPreviewPlayer/AudioSourceVolumeController.set_volume
void GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController::set_volume(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController::set_volume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_volume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: SongPreviewPlayer/AudioSourceVolumeController.get_volume
float GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController::get_volume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController::get_volume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_volume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer/AudioSourceVolumeController.get_maxVolume
float GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController::get_maxVolume() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController::get_maxVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer/AudioSourceVolumeController.set_maxVolume
void GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController::set_maxVolume(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController::set_maxVolume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maxVolume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Writing MetadataGetter for method: SongPreviewPlayer::AudioSourceVolumeController::set_volume
// Il2CppName: set_volume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::AudioSourceVolumeController::*)(float)>(&SongPreviewPlayer::AudioSourceVolumeController::set_volume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::AudioSourceVolumeController*), "set_volume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::AudioSourceVolumeController::get_volume
// Il2CppName: get_volume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SongPreviewPlayer::AudioSourceVolumeController::*)()>(&SongPreviewPlayer::AudioSourceVolumeController::get_volume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::AudioSourceVolumeController*), "get_volume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::AudioSourceVolumeController::get_maxVolume
// Il2CppName: get_maxVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (SongPreviewPlayer::AudioSourceVolumeController::*)()>(&SongPreviewPlayer::AudioSourceVolumeController::get_maxVolume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::AudioSourceVolumeController*), "get_maxVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::AudioSourceVolumeController::set_maxVolume
// Il2CppName: set_maxVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::AudioSourceVolumeController::*)(float)>(&SongPreviewPlayer::AudioSourceVolumeController::set_maxVolume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::AudioSourceVolumeController*), "set_maxVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::AudioSourceVolumeController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::AudioSourceVolumeController::*)(UnityEngine::AudioSource*)>(&SongPreviewPlayer::AudioSourceVolumeController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::AudioSourceVolumeController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::AudioSourceVolumeController::*)(UnityEngine::AudioSource*)>(&SongPreviewPlayer::AudioSourceVolumeController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::AudioSourceVolumeController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AudioSource*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongPreviewPlayer/<CrossFadeAfterDelayCoroutine>d__27
#include "GlobalNamespace/SongPreviewPlayer_-CrossFadeAfterDelayCoroutine-d__27.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SongPreviewPlayer/<CrossFadeAfterDelayCoroutine>d__27.System.IDisposable.Dispose
void GlobalNamespace::SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer/<CrossFadeAfterDelayCoroutine>d__27.MoveNext
bool GlobalNamespace::SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer/<CrossFadeAfterDelayCoroutine>d__27.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer/<CrossFadeAfterDelayCoroutine>d__27.System.Collections.IEnumerator.Reset
void GlobalNamespace::SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayer/<CrossFadeAfterDelayCoroutine>d__27.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::*)(int)>(&SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::*)(int)>(&SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::*)()>(&SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::*)()>(&SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::*)()>(&SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::*)()>(&SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::*)()>(&SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__27*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: SongPreviewPlayerPauseOnInputFocusLost
#include "GlobalNamespace/SongPreviewPlayerPauseOnInputFocusLost.hpp"
// Including type: AudioPlayerBase
#include "GlobalNamespace/AudioPlayerBase.hpp"
// Including type: IVRPlatformHelper
#include "GlobalNamespace/IVRPlatformHelper.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: SongPreviewPlayerPauseOnInputFocusLost.Start
void GlobalNamespace::SongPreviewPlayerPauseOnInputFocusLost::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayerPauseOnInputFocusLost::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayerPauseOnInputFocusLost.OnDestroy
void GlobalNamespace::SongPreviewPlayerPauseOnInputFocusLost::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayerPauseOnInputFocusLost::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayerPauseOnInputFocusLost.HandleInputFocusCaptured
void GlobalNamespace::SongPreviewPlayerPauseOnInputFocusLost::HandleInputFocusCaptured() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayerPauseOnInputFocusLost::HandleInputFocusCaptured");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusCaptured", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: SongPreviewPlayerPauseOnInputFocusLost.HandleInputFocusReleased
void GlobalNamespace::SongPreviewPlayerPauseOnInputFocusLost::HandleInputFocusReleased() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayerPauseOnInputFocusLost::HandleInputFocusReleased");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleInputFocusReleased", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: SongPreviewPlayerPauseOnInputFocusLost::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayerPauseOnInputFocusLost::*)()>(&SongPreviewPlayerPauseOnInputFocusLost::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayerPauseOnInputFocusLost*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayerPauseOnInputFocusLost::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayerPauseOnInputFocusLost::*)()>(&SongPreviewPlayerPauseOnInputFocusLost::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayerPauseOnInputFocusLost*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayerPauseOnInputFocusLost::HandleInputFocusCaptured
// Il2CppName: HandleInputFocusCaptured
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayerPauseOnInputFocusLost::*)()>(&SongPreviewPlayerPauseOnInputFocusLost::HandleInputFocusCaptured)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayerPauseOnInputFocusLost*), "HandleInputFocusCaptured", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayerPauseOnInputFocusLost::HandleInputFocusReleased
// Il2CppName: HandleInputFocusReleased
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayerPauseOnInputFocusLost::*)()>(&SongPreviewPlayerPauseOnInputFocusLost::HandleInputFocusReleased)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayerPauseOnInputFocusLost*), "HandleInputFocusReleased", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: SongPreviewPlayerPauseOnInputFocusLost::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayerPauseOnInputFocusLost::*)()>(&SongPreviewPlayerPauseOnInputFocusLost::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayerPauseOnInputFocusLost*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (SongPreviewPlayerPauseOnInputFocusLost::*)()>(&SongPreviewPlayerPauseOnInputFocusLost::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(SongPreviewPlayerPauseOnInputFocusLost*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AnimatedAvatarPoseController
#include "GlobalNamespace/AnimatedAvatarPoseController.hpp"
// Including type: AvatarPoseController
#include "GlobalNamespace/AvatarPoseController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AnimatedAvatarPoseController.LateUpdate
void GlobalNamespace::AnimatedAvatarPoseController::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnimatedAvatarPoseController::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AnimatedAvatarPoseController::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimatedAvatarPoseController::*)()>(&AnimatedAvatarPoseController::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimatedAvatarPoseController*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AnimatedAvatarPoseController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimatedAvatarPoseController::*)()>(&AnimatedAvatarPoseController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimatedAvatarPoseController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AnimatedAvatarPoseController::*)()>(&AnimatedAvatarPoseController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AnimatedAvatarPoseController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarColorPropertyIds
#include "GlobalNamespace/AvatarColorPropertyIds.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE1529C
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 colorPropertyId
int GlobalNamespace::AvatarColorPropertyIds::_get_colorPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorPropertyIds::_get_colorPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "AvatarColorPropertyIds", "colorPropertyId"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 colorPropertyId
void GlobalNamespace::AvatarColorPropertyIds::_set_colorPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorPropertyIds::_set_colorPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AvatarColorPropertyIds", "colorPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE152AC
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 rimLightColorPropertyId
int GlobalNamespace::AvatarColorPropertyIds::_get_rimLightColorPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorPropertyIds::_get_rimLightColorPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "AvatarColorPropertyIds", "rimLightColorPropertyId"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 rimLightColorPropertyId
void GlobalNamespace::AvatarColorPropertyIds::_set_rimLightColorPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorPropertyIds::_set_rimLightColorPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AvatarColorPropertyIds", "rimLightColorPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE152BC
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 uvColorsPropertyId
int GlobalNamespace::AvatarColorPropertyIds::_get_uvColorsPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorPropertyIds::_get_uvColorsPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "AvatarColorPropertyIds", "uvColorsPropertyId"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 uvColorsPropertyId
void GlobalNamespace::AvatarColorPropertyIds::_set_uvColorsPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorPropertyIds::_set_uvColorsPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AvatarColorPropertyIds", "uvColorsPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE152CC
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 uvRimLightColorsPropertyId
int GlobalNamespace::AvatarColorPropertyIds::_get_uvRimLightColorsPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorPropertyIds::_get_uvRimLightColorsPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "AvatarColorPropertyIds", "uvRimLightColorsPropertyId"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 uvRimLightColorsPropertyId
void GlobalNamespace::AvatarColorPropertyIds::_set_uvRimLightColorsPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorPropertyIds::_set_uvRimLightColorsPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AvatarColorPropertyIds", "uvRimLightColorsPropertyId", value));
}
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE152DC
// Autogenerated static field getter
// Get static field: static public readonly System.Int32 segmentToHighlightPropertyId
int GlobalNamespace::AvatarColorPropertyIds::_get_segmentToHighlightPropertyId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorPropertyIds::_get_segmentToHighlightPropertyId");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>("", "AvatarColorPropertyIds", "segmentToHighlightPropertyId"));
}
// Autogenerated static field setter
// Set static field: static public readonly System.Int32 segmentToHighlightPropertyId
void GlobalNamespace::AvatarColorPropertyIds::_set_segmentToHighlightPropertyId(int value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorPropertyIds::_set_segmentToHighlightPropertyId");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AvatarColorPropertyIds", "segmentToHighlightPropertyId", value));
}
// Autogenerated method: AvatarColorPropertyIds..cctor
void GlobalNamespace::AvatarColorPropertyIds::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarColorPropertyIds::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AvatarColorPropertyIds", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Writing MetadataGetter for method: AvatarColorPropertyIds::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&AvatarColorPropertyIds::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarColorPropertyIds*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarHeadOffset
#include "GlobalNamespace/AvatarHeadOffset.hpp"
// Including type: AvatarPoseController
#include "GlobalNamespace/AvatarPoseController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarHeadOffset.Start
void GlobalNamespace::AvatarHeadOffset::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarHeadOffset::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarHeadOffset.OnDestroy
void GlobalNamespace::AvatarHeadOffset::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarHeadOffset::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarHeadOffset.HandleMultiplayerAvatarPoseControllerDidUpdatePose
void GlobalNamespace::AvatarHeadOffset::HandleMultiplayerAvatarPoseControllerDidUpdatePose(UnityEngine::Vector3 headLocalPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarHeadOffset::HandleMultiplayerAvatarPoseControllerDidUpdatePose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleMultiplayerAvatarPoseControllerDidUpdatePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headLocalPosition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, headLocalPosition);
}
// Writing MetadataGetter for method: AvatarHeadOffset::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarHeadOffset::*)()>(&AvatarHeadOffset::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarHeadOffset*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarHeadOffset::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarHeadOffset::*)()>(&AvatarHeadOffset::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarHeadOffset*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarHeadOffset::HandleMultiplayerAvatarPoseControllerDidUpdatePose
// Il2CppName: HandleMultiplayerAvatarPoseControllerDidUpdatePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarHeadOffset::*)(UnityEngine::Vector3)>(&AvatarHeadOffset::HandleMultiplayerAvatarPoseControllerDidUpdatePose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarHeadOffset*), "HandleMultiplayerAvatarPoseControllerDidUpdatePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AvatarHeadOffset::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarHeadOffset::*)()>(&AvatarHeadOffset::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarHeadOffset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarHeadOffset::*)()>(&AvatarHeadOffset::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarHeadOffset*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarPoseController
#include "GlobalNamespace/AvatarPoseController.hpp"
// Including type: AvatarPoseController/PositionsWillBeSetDelegate
#include "GlobalNamespace/AvatarPoseController_PositionsWillBeSetDelegate.hpp"
// Including type: AvatarPoseController/LatePositionsWillBeSetDelegate
#include "GlobalNamespace/AvatarPoseController_LatePositionsWillBeSetDelegate.hpp"
// Including type: AvatarPoseController/RotationsWillBeSetDelegate
#include "GlobalNamespace/AvatarPoseController_RotationsWillBeSetDelegate.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: HeadBodyOffsetSO
#include "GlobalNamespace/HeadBodyOffsetSO.hpp"
// Including type: System.Action`1
#include "System/Action_1.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarPoseController.get_earlyPositionsWillBeSetCallback
GlobalNamespace::AvatarPoseController::PositionsWillBeSetDelegate* GlobalNamespace::AvatarPoseController::get_earlyPositionsWillBeSetCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::get_earlyPositionsWillBeSetCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_earlyPositionsWillBeSetCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPoseController::PositionsWillBeSetDelegate*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPoseController.set_earlyPositionsWillBeSetCallback
void GlobalNamespace::AvatarPoseController::set_earlyPositionsWillBeSetCallback(GlobalNamespace::AvatarPoseController::PositionsWillBeSetDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::set_earlyPositionsWillBeSetCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_earlyPositionsWillBeSetCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarPoseController.get_latePositionsWillBeSetCallback
GlobalNamespace::AvatarPoseController::LatePositionsWillBeSetDelegate* GlobalNamespace::AvatarPoseController::get_latePositionsWillBeSetCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::get_latePositionsWillBeSetCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_latePositionsWillBeSetCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPoseController::LatePositionsWillBeSetDelegate*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPoseController.set_latePositionsWillBeSetCallback
void GlobalNamespace::AvatarPoseController::set_latePositionsWillBeSetCallback(GlobalNamespace::AvatarPoseController::LatePositionsWillBeSetDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::set_latePositionsWillBeSetCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_latePositionsWillBeSetCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarPoseController.get_earlyRotationsWillBeSetCallback
GlobalNamespace::AvatarPoseController::RotationsWillBeSetDelegate* GlobalNamespace::AvatarPoseController::get_earlyRotationsWillBeSetCallback() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::get_earlyRotationsWillBeSetCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_earlyRotationsWillBeSetCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::AvatarPoseController::RotationsWillBeSetDelegate*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPoseController.set_earlyRotationsWillBeSetCallback
void GlobalNamespace::AvatarPoseController::set_earlyRotationsWillBeSetCallback(GlobalNamespace::AvatarPoseController::RotationsWillBeSetDelegate* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::set_earlyRotationsWillBeSetCallback");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_earlyRotationsWillBeSetCallback", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarPoseController.add_didUpdatePoseEvent
void GlobalNamespace::AvatarPoseController::add_didUpdatePoseEvent(System::Action_1<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::add_didUpdatePoseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didUpdatePoseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarPoseController.remove_didUpdatePoseEvent
void GlobalNamespace::AvatarPoseController::remove_didUpdatePoseEvent(System::Action_1<UnityEngine::Vector3>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::remove_didUpdatePoseEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didUpdatePoseEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AvatarPoseController.UpdateTransforms
void GlobalNamespace::AvatarPoseController::UpdateTransforms(UnityEngine::Vector3 headPosition, UnityEngine::Vector3 leftHandPosition, UnityEngine::Vector3 rightHandPosition, UnityEngine::Quaternion headRotation, UnityEngine::Quaternion leftHandRotation, UnityEngine::Quaternion rightHandRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::UpdateTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headPosition), ::il2cpp_utils::ExtractType(leftHandPosition), ::il2cpp_utils::ExtractType(rightHandPosition), ::il2cpp_utils::ExtractType(headRotation), ::il2cpp_utils::ExtractType(leftHandRotation), ::il2cpp_utils::ExtractType(rightHandRotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, headPosition, leftHandPosition, rightHandPosition, headRotation, leftHandRotation, rightHandRotation);
}
// Autogenerated method: AvatarPoseController.UpdateBodyPosition
void GlobalNamespace::AvatarPoseController::UpdateBodyPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::UpdateBodyPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateBodyPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AvatarPoseController::get_earlyPositionsWillBeSetCallback
// Il2CppName: get_earlyPositionsWillBeSetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarPoseController::PositionsWillBeSetDelegate* (AvatarPoseController::*)()>(&AvatarPoseController::get_earlyPositionsWillBeSetCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController*), "get_earlyPositionsWillBeSetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::set_earlyPositionsWillBeSetCallback
// Il2CppName: set_earlyPositionsWillBeSetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::*)(GlobalNamespace::AvatarPoseController::PositionsWillBeSetDelegate*)>(&AvatarPoseController::set_earlyPositionsWillBeSetCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController*), "set_earlyPositionsWillBeSetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AvatarPoseController::PositionsWillBeSetDelegate*>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::get_latePositionsWillBeSetCallback
// Il2CppName: get_latePositionsWillBeSetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarPoseController::LatePositionsWillBeSetDelegate* (AvatarPoseController::*)()>(&AvatarPoseController::get_latePositionsWillBeSetCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController*), "get_latePositionsWillBeSetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::set_latePositionsWillBeSetCallback
// Il2CppName: set_latePositionsWillBeSetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::*)(GlobalNamespace::AvatarPoseController::LatePositionsWillBeSetDelegate*)>(&AvatarPoseController::set_latePositionsWillBeSetCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController*), "set_latePositionsWillBeSetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AvatarPoseController::LatePositionsWillBeSetDelegate*>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::get_earlyRotationsWillBeSetCallback
// Il2CppName: get_earlyRotationsWillBeSetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AvatarPoseController::RotationsWillBeSetDelegate* (AvatarPoseController::*)()>(&AvatarPoseController::get_earlyRotationsWillBeSetCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController*), "get_earlyRotationsWillBeSetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::set_earlyRotationsWillBeSetCallback
// Il2CppName: set_earlyRotationsWillBeSetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::*)(GlobalNamespace::AvatarPoseController::RotationsWillBeSetDelegate*)>(&AvatarPoseController::set_earlyRotationsWillBeSetCallback)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController*), "set_earlyRotationsWillBeSetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AvatarPoseController::RotationsWillBeSetDelegate*>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::add_didUpdatePoseEvent
// Il2CppName: add_didUpdatePoseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::*)(System::Action_1<UnityEngine::Vector3>*)>(&AvatarPoseController::add_didUpdatePoseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController*), "add_didUpdatePoseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Vector3>*>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::remove_didUpdatePoseEvent
// Il2CppName: remove_didUpdatePoseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::*)(System::Action_1<UnityEngine::Vector3>*)>(&AvatarPoseController::remove_didUpdatePoseEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController*), "remove_didUpdatePoseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action_1<UnityEngine::Vector3>*>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::UpdateTransforms
// Il2CppName: UpdateTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Quaternion, UnityEngine::Quaternion)>(&AvatarPoseController::UpdateTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController*), "UpdateTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::UpdateBodyPosition
// Il2CppName: UpdateBodyPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::*)()>(&AvatarPoseController::UpdateBodyPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController*), "UpdateBodyPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::*)()>(&AvatarPoseController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::*)()>(&AvatarPoseController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarPoseController/PositionsWillBeSetDelegate
#include "GlobalNamespace/AvatarPoseController_PositionsWillBeSetDelegate.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarPoseController/PositionsWillBeSetDelegate.Invoke
void GlobalNamespace::AvatarPoseController::PositionsWillBeSetDelegate::Invoke(UnityEngine::Vector3 headPosition, UnityEngine::Vector3 leftHandPosition, UnityEngine::Vector3 rightHandPosition, UnityEngine::Vector3& newHeadPosition, UnityEngine::Vector3& newLeftHandPosition, UnityEngine::Vector3& newRightHandPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::PositionsWillBeSetDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headPosition), ::il2cpp_utils::ExtractType(leftHandPosition), ::il2cpp_utils::ExtractType(rightHandPosition), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, headPosition, leftHandPosition, rightHandPosition, newHeadPosition, newLeftHandPosition, newRightHandPosition);
}
// Autogenerated method: AvatarPoseController/PositionsWillBeSetDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::AvatarPoseController::PositionsWillBeSetDelegate::BeginInvoke(UnityEngine::Vector3 headPosition, UnityEngine::Vector3 leftHandPosition, UnityEngine::Vector3 rightHandPosition, UnityEngine::Vector3& newHeadPosition, UnityEngine::Vector3& newLeftHandPosition, UnityEngine::Vector3& newRightHandPosition, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::PositionsWillBeSetDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headPosition), ::il2cpp_utils::ExtractType(leftHandPosition), ::il2cpp_utils::ExtractType(rightHandPosition), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, headPosition, leftHandPosition, rightHandPosition, newHeadPosition, newLeftHandPosition, newRightHandPosition, callback, object);
}
// Autogenerated method: AvatarPoseController/PositionsWillBeSetDelegate.EndInvoke
void GlobalNamespace::AvatarPoseController::PositionsWillBeSetDelegate::EndInvoke(UnityEngine::Vector3& newHeadPosition, UnityEngine::Vector3& newLeftHandPosition, UnityEngine::Vector3& newRightHandPosition, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::PositionsWillBeSetDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newHeadPosition, newLeftHandPosition, newRightHandPosition, result);
}
// Writing MetadataGetter for method: AvatarPoseController::PositionsWillBeSetDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::PositionsWillBeSetDelegate::*)(::Il2CppObject*, System::IntPtr)>(&AvatarPoseController::PositionsWillBeSetDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController::PositionsWillBeSetDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::PositionsWillBeSetDelegate::*)(::Il2CppObject*, System::IntPtr)>(&AvatarPoseController::PositionsWillBeSetDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController::PositionsWillBeSetDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::PositionsWillBeSetDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::PositionsWillBeSetDelegate::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3&, UnityEngine::Vector3&, UnityEngine::Vector3&)>(&AvatarPoseController::PositionsWillBeSetDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController::PositionsWillBeSetDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::PositionsWillBeSetDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (AvatarPoseController::PositionsWillBeSetDelegate::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3&, UnityEngine::Vector3&, UnityEngine::Vector3&, System::AsyncCallback*, ::Il2CppObject*)>(&AvatarPoseController::PositionsWillBeSetDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController::PositionsWillBeSetDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::PositionsWillBeSetDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::PositionsWillBeSetDelegate::*)(UnityEngine::Vector3&, UnityEngine::Vector3&, UnityEngine::Vector3&, System::IAsyncResult*)>(&AvatarPoseController::PositionsWillBeSetDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController::PositionsWillBeSetDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarPoseController/LatePositionsWillBeSetDelegate
#include "GlobalNamespace/AvatarPoseController_LatePositionsWillBeSetDelegate.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarPoseController/LatePositionsWillBeSetDelegate.Invoke
void GlobalNamespace::AvatarPoseController::LatePositionsWillBeSetDelegate::Invoke(UnityEngine::Quaternion headRotation, UnityEngine::Vector3 headPosition, UnityEngine::Vector3 leftHandPosition, UnityEngine::Vector3 rightHandPosition, UnityEngine::Vector3& newHeadPosition, UnityEngine::Vector3& newLeftHandPosition, UnityEngine::Vector3& newRightHandPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::LatePositionsWillBeSetDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headRotation), ::il2cpp_utils::ExtractType(headPosition), ::il2cpp_utils::ExtractType(leftHandPosition), ::il2cpp_utils::ExtractType(rightHandPosition), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, headRotation, headPosition, leftHandPosition, rightHandPosition, newHeadPosition, newLeftHandPosition, newRightHandPosition);
}
// Autogenerated method: AvatarPoseController/LatePositionsWillBeSetDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::AvatarPoseController::LatePositionsWillBeSetDelegate::BeginInvoke(UnityEngine::Quaternion headRotation, UnityEngine::Vector3 headPosition, UnityEngine::Vector3 leftHandPosition, UnityEngine::Vector3 rightHandPosition, UnityEngine::Vector3& newHeadPosition, UnityEngine::Vector3& newLeftHandPosition, UnityEngine::Vector3& newRightHandPosition, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::LatePositionsWillBeSetDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headRotation), ::il2cpp_utils::ExtractType(headPosition), ::il2cpp_utils::ExtractType(leftHandPosition), ::il2cpp_utils::ExtractType(rightHandPosition), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, headRotation, headPosition, leftHandPosition, rightHandPosition, newHeadPosition, newLeftHandPosition, newRightHandPosition, callback, object);
}
// Autogenerated method: AvatarPoseController/LatePositionsWillBeSetDelegate.EndInvoke
void GlobalNamespace::AvatarPoseController::LatePositionsWillBeSetDelegate::EndInvoke(UnityEngine::Vector3& newHeadPosition, UnityEngine::Vector3& newLeftHandPosition, UnityEngine::Vector3& newRightHandPosition, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::LatePositionsWillBeSetDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newHeadPosition, newLeftHandPosition, newRightHandPosition, result);
}
// Writing MetadataGetter for method: AvatarPoseController::LatePositionsWillBeSetDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::LatePositionsWillBeSetDelegate::*)(::Il2CppObject*, System::IntPtr)>(&AvatarPoseController::LatePositionsWillBeSetDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController::LatePositionsWillBeSetDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::LatePositionsWillBeSetDelegate::*)(::Il2CppObject*, System::IntPtr)>(&AvatarPoseController::LatePositionsWillBeSetDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController::LatePositionsWillBeSetDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::LatePositionsWillBeSetDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::LatePositionsWillBeSetDelegate::*)(UnityEngine::Quaternion, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3&, UnityEngine::Vector3&, UnityEngine::Vector3&)>(&AvatarPoseController::LatePositionsWillBeSetDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController::LatePositionsWillBeSetDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::LatePositionsWillBeSetDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (AvatarPoseController::LatePositionsWillBeSetDelegate::*)(UnityEngine::Quaternion, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3&, UnityEngine::Vector3&, UnityEngine::Vector3&, System::AsyncCallback*, ::Il2CppObject*)>(&AvatarPoseController::LatePositionsWillBeSetDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController::LatePositionsWillBeSetDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::LatePositionsWillBeSetDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::LatePositionsWillBeSetDelegate::*)(UnityEngine::Vector3&, UnityEngine::Vector3&, UnityEngine::Vector3&, System::IAsyncResult*)>(&AvatarPoseController::LatePositionsWillBeSetDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController::LatePositionsWillBeSetDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarPoseController/RotationsWillBeSetDelegate
#include "GlobalNamespace/AvatarPoseController_RotationsWillBeSetDelegate.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarPoseController/RotationsWillBeSetDelegate.Invoke
void GlobalNamespace::AvatarPoseController::RotationsWillBeSetDelegate::Invoke(UnityEngine::Quaternion headRotation, UnityEngine::Quaternion leftHandRotation, UnityEngine::Quaternion rightHandRotation, UnityEngine::Quaternion& newHeadRotation, UnityEngine::Quaternion& newLeftHandRotation, UnityEngine::Quaternion& newRightHandRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::RotationsWillBeSetDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headRotation), ::il2cpp_utils::ExtractType(leftHandRotation), ::il2cpp_utils::ExtractType(rightHandRotation), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, headRotation, leftHandRotation, rightHandRotation, newHeadRotation, newLeftHandRotation, newRightHandRotation);
}
// Autogenerated method: AvatarPoseController/RotationsWillBeSetDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::AvatarPoseController::RotationsWillBeSetDelegate::BeginInvoke(UnityEngine::Quaternion headRotation, UnityEngine::Quaternion leftHandRotation, UnityEngine::Quaternion rightHandRotation, UnityEngine::Quaternion& newHeadRotation, UnityEngine::Quaternion& newLeftHandRotation, UnityEngine::Quaternion& newRightHandRotation, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::RotationsWillBeSetDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headRotation), ::il2cpp_utils::ExtractType(leftHandRotation), ::il2cpp_utils::ExtractType(rightHandRotation), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, headRotation, leftHandRotation, rightHandRotation, newHeadRotation, newLeftHandRotation, newRightHandRotation, callback, object);
}
// Autogenerated method: AvatarPoseController/RotationsWillBeSetDelegate.EndInvoke
void GlobalNamespace::AvatarPoseController::RotationsWillBeSetDelegate::EndInvoke(UnityEngine::Quaternion& newHeadRotation, UnityEngine::Quaternion& newLeftHandRotation, UnityEngine::Quaternion& newRightHandRotation, System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseController::RotationsWillBeSetDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newHeadRotation, newLeftHandRotation, newRightHandRotation, result);
}
// Writing MetadataGetter for method: AvatarPoseController::RotationsWillBeSetDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::RotationsWillBeSetDelegate::*)(::Il2CppObject*, System::IntPtr)>(&AvatarPoseController::RotationsWillBeSetDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController::RotationsWillBeSetDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::RotationsWillBeSetDelegate::*)(::Il2CppObject*, System::IntPtr)>(&AvatarPoseController::RotationsWillBeSetDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController::RotationsWillBeSetDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::RotationsWillBeSetDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::RotationsWillBeSetDelegate::*)(UnityEngine::Quaternion, UnityEngine::Quaternion, UnityEngine::Quaternion, UnityEngine::Quaternion&, UnityEngine::Quaternion&, UnityEngine::Quaternion&)>(&AvatarPoseController::RotationsWillBeSetDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController::RotationsWillBeSetDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::RotationsWillBeSetDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (AvatarPoseController::RotationsWillBeSetDelegate::*)(UnityEngine::Quaternion, UnityEngine::Quaternion, UnityEngine::Quaternion, UnityEngine::Quaternion&, UnityEngine::Quaternion&, UnityEngine::Quaternion&, System::AsyncCallback*, ::Il2CppObject*)>(&AvatarPoseController::RotationsWillBeSetDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController::RotationsWillBeSetDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseController::RotationsWillBeSetDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseController::RotationsWillBeSetDelegate::*)(UnityEngine::Quaternion&, UnityEngine::Quaternion&, UnityEngine::Quaternion&, System::IAsyncResult*)>(&AvatarPoseController::RotationsWillBeSetDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseController::RotationsWillBeSetDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarPoseMirror
#include "GlobalNamespace/AvatarPoseMirror.hpp"
// Including type: AvatarPoseController
#include "GlobalNamespace/AvatarPoseController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarPoseMirror.Start
void GlobalNamespace::AvatarPoseMirror::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseMirror::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPoseMirror.HandleAvatarPoseControllerPositionsWillBeSet
void GlobalNamespace::AvatarPoseMirror::HandleAvatarPoseControllerPositionsWillBeSet(UnityEngine::Vector3 headPosition, UnityEngine::Vector3 leftHandPosition, UnityEngine::Vector3 rightHandPosition, UnityEngine::Vector3& newHeadPosition, UnityEngine::Vector3& newLeftHandPosition, UnityEngine::Vector3& newRightHandPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseMirror::HandleAvatarPoseControllerPositionsWillBeSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AvatarPoseMirror", "HandleAvatarPoseControllerPositionsWillBeSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headPosition), ::il2cpp_utils::ExtractType(leftHandPosition), ::il2cpp_utils::ExtractType(rightHandPosition), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, headPosition, leftHandPosition, rightHandPosition, newHeadPosition, newLeftHandPosition, newRightHandPosition);
}
// Autogenerated method: AvatarPoseMirror.HandleAvatarPoseControllerRotationsWillBeSet
void GlobalNamespace::AvatarPoseMirror::HandleAvatarPoseControllerRotationsWillBeSet(UnityEngine::Quaternion headRotation, UnityEngine::Quaternion leftHandRotation, UnityEngine::Quaternion rightHandRotation, UnityEngine::Quaternion& newHeadRotation, UnityEngine::Quaternion& newLeftHandRotation, UnityEngine::Quaternion& newRightHandRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseMirror::HandleAvatarPoseControllerRotationsWillBeSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AvatarPoseMirror", "HandleAvatarPoseControllerRotationsWillBeSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headRotation), ::il2cpp_utils::ExtractType(leftHandRotation), ::il2cpp_utils::ExtractType(rightHandRotation), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, headRotation, leftHandRotation, rightHandRotation, newHeadRotation, newLeftHandRotation, newRightHandRotation);
}
// Autogenerated method: AvatarPoseMirror.MirrorRotation
UnityEngine::Quaternion GlobalNamespace::AvatarPoseMirror::MirrorRotation(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseMirror::MirrorRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AvatarPoseMirror", "MirrorRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, rotation);
}
// Autogenerated method: AvatarPoseMirror.MirrorPosition
UnityEngine::Vector3 GlobalNamespace::AvatarPoseMirror::MirrorPosition(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseMirror::MirrorPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "AvatarPoseMirror", "MirrorPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, position);
}
// Writing MetadataGetter for method: AvatarPoseMirror::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseMirror::*)()>(&AvatarPoseMirror::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseMirror*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPoseMirror::HandleAvatarPoseControllerPositionsWillBeSet
// Il2CppName: HandleAvatarPoseControllerPositionsWillBeSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3&, UnityEngine::Vector3&, UnityEngine::Vector3&)>(&AvatarPoseMirror::HandleAvatarPoseControllerPositionsWillBeSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseMirror*), "HandleAvatarPoseControllerPositionsWillBeSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseMirror::HandleAvatarPoseControllerRotationsWillBeSet
// Il2CppName: HandleAvatarPoseControllerRotationsWillBeSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Quaternion, UnityEngine::Quaternion, UnityEngine::Quaternion, UnityEngine::Quaternion&, UnityEngine::Quaternion&, UnityEngine::Quaternion&)>(&AvatarPoseMirror::HandleAvatarPoseControllerRotationsWillBeSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseMirror*), "HandleAvatarPoseControllerRotationsWillBeSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseMirror::MirrorRotation
// Il2CppName: MirrorRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (*)(UnityEngine::Quaternion)>(&AvatarPoseMirror::MirrorRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseMirror*), "MirrorRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseMirror::MirrorPosition
// Il2CppName: MirrorPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3)>(&AvatarPoseMirror::MirrorPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseMirror*), "MirrorPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseMirror::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseMirror::*)()>(&AvatarPoseMirror::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseMirror*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseMirror::*)()>(&AvatarPoseMirror::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseMirror*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarPoseRestrictions
#include "GlobalNamespace/AvatarPoseRestrictions.hpp"
// Including type: AvatarPoseController
#include "GlobalNamespace/AvatarPoseController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarPoseRestrictions.Start
void GlobalNamespace::AvatarPoseRestrictions::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseRestrictions::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPoseRestrictions.HandleAvatarPoseControllerPositionsWillBeSet
void GlobalNamespace::AvatarPoseRestrictions::HandleAvatarPoseControllerPositionsWillBeSet(UnityEngine::Quaternion headRotation, UnityEngine::Vector3 headPosition, UnityEngine::Vector3 leftHandPosition, UnityEngine::Vector3 rightHandPosition, UnityEngine::Vector3& newHeadPosition, UnityEngine::Vector3& newLeftHandPosition, UnityEngine::Vector3& newRightHandPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseRestrictions::HandleAvatarPoseControllerPositionsWillBeSet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleAvatarPoseControllerPositionsWillBeSet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(headRotation), ::il2cpp_utils::ExtractType(headPosition), ::il2cpp_utils::ExtractType(leftHandPosition), ::il2cpp_utils::ExtractType(rightHandPosition), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, headRotation, headPosition, leftHandPosition, rightHandPosition, newHeadPosition, newLeftHandPosition, newRightHandPosition);
}
// Autogenerated method: AvatarPoseRestrictions.LimitHandPositionRelativeToHead
UnityEngine::Vector3 GlobalNamespace::AvatarPoseRestrictions::LimitHandPositionRelativeToHead(UnityEngine::Vector3 handPosition, UnityEngine::Vector3 headCenter) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseRestrictions::LimitHandPositionRelativeToHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitHandPositionRelativeToHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(handPosition), ::il2cpp_utils::ExtractType(headCenter)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, handPosition, headCenter);
}
// Writing MetadataGetter for method: AvatarPoseRestrictions::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseRestrictions::*)()>(&AvatarPoseRestrictions::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseRestrictions*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPoseRestrictions::HandleAvatarPoseControllerPositionsWillBeSet
// Il2CppName: HandleAvatarPoseControllerPositionsWillBeSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseRestrictions::*)(UnityEngine::Quaternion, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3&, UnityEngine::Vector3&, UnityEngine::Vector3&)>(&AvatarPoseRestrictions::HandleAvatarPoseControllerPositionsWillBeSet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseRestrictions*), "HandleAvatarPoseControllerPositionsWillBeSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseRestrictions::LimitHandPositionRelativeToHead
// Il2CppName: LimitHandPositionRelativeToHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (AvatarPoseRestrictions::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&AvatarPoseRestrictions::LimitHandPositionRelativeToHead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseRestrictions*), "LimitHandPositionRelativeToHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AvatarPoseRestrictions::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseRestrictions::*)()>(&AvatarPoseRestrictions::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseRestrictions*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPoseRestrictions::*)()>(&AvatarPoseRestrictions::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPoseRestrictions*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarPropertyBlockColorSetter
#include "GlobalNamespace/AvatarPropertyBlockColorSetter.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE15514
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
UnityEngine::MaterialPropertyBlock* GlobalNamespace::AvatarPropertyBlockColorSetter::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPropertyBlockColorSetter::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::MaterialPropertyBlock*>("", "AvatarPropertyBlockColorSetter", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void GlobalNamespace::AvatarPropertyBlockColorSetter::_set__materialPropertyBlock(UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPropertyBlockColorSetter::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AvatarPropertyBlockColorSetter", "_materialPropertyBlock", value));
}
// Autogenerated method: AvatarPropertyBlockColorSetter.Awake
void GlobalNamespace::AvatarPropertyBlockColorSetter::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPropertyBlockColorSetter::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPropertyBlockColorSetter.OnValidate
void GlobalNamespace::AvatarPropertyBlockColorSetter::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPropertyBlockColorSetter::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarPropertyBlockColorSetter.SetColor
void GlobalNamespace::AvatarPropertyBlockColorSetter::SetColor(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPropertyBlockColorSetter::SetColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: AvatarPropertyBlockColorSetter.SetColors
void GlobalNamespace::AvatarPropertyBlockColorSetter::SetColors(UnityEngine::Color mainColor, UnityEngine::Color rimLightColor) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPropertyBlockColorSetter::SetColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mainColor), ::il2cpp_utils::ExtractType(rimLightColor)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, mainColor, rimLightColor);
}
// Autogenerated method: AvatarPropertyBlockColorSetter.SetHighlight
void GlobalNamespace::AvatarPropertyBlockColorSetter::SetHighlight(bool highlighted, int uvSegment) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPropertyBlockColorSetter::SetHighlight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighlight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(highlighted), ::il2cpp_utils::ExtractType(uvSegment)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, highlighted, uvSegment);
}
// Autogenerated method: AvatarPropertyBlockColorSetter.UpdateRenderer
void GlobalNamespace::AvatarPropertyBlockColorSetter::UpdateRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPropertyBlockColorSetter::UpdateRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AvatarPropertyBlockColorSetter::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPropertyBlockColorSetter::*)()>(&AvatarPropertyBlockColorSetter::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPropertyBlockColorSetter*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPropertyBlockColorSetter::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPropertyBlockColorSetter::*)()>(&AvatarPropertyBlockColorSetter::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPropertyBlockColorSetter*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPropertyBlockColorSetter::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPropertyBlockColorSetter::*)(UnityEngine::Color)>(&AvatarPropertyBlockColorSetter::SetColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPropertyBlockColorSetter*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: AvatarPropertyBlockColorSetter::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPropertyBlockColorSetter::*)(UnityEngine::Color, UnityEngine::Color)>(&AvatarPropertyBlockColorSetter::SetColors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPropertyBlockColorSetter*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: AvatarPropertyBlockColorSetter::SetHighlight
// Il2CppName: SetHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPropertyBlockColorSetter::*)(bool, int)>(&AvatarPropertyBlockColorSetter::SetHighlight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPropertyBlockColorSetter*), "SetHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AvatarPropertyBlockColorSetter::UpdateRenderer
// Il2CppName: UpdateRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPropertyBlockColorSetter::*)()>(&AvatarPropertyBlockColorSetter::UpdateRenderer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPropertyBlockColorSetter*), "UpdateRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarPropertyBlockColorSetter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPropertyBlockColorSetter::*)()>(&AvatarPropertyBlockColorSetter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPropertyBlockColorSetter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarPropertyBlockColorSetter::*)()>(&AvatarPropertyBlockColorSetter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarPropertyBlockColorSetter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarTweenController
#include "GlobalNamespace/AvatarTweenController.hpp"
// Including type: AvatarTweenController/<>c__DisplayClass52_0
#include "GlobalNamespace/AvatarTweenController_--c__DisplayClass52_0.hpp"
// Including type: AvatarTweenController/<AppearAnimation>d__53
#include "GlobalNamespace/AvatarTweenController_-AppearAnimation-d__53.hpp"
// Including type: AvatarTweenController/<DisappearAnimation>d__58
#include "GlobalNamespace/AvatarTweenController_-DisappearAnimation-d__58.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: Tweening.TweeningManager
#include "Tweening/TweeningManager.hpp"
// Including type: Tweening.Tween`1
#include "Tweening/Tween_1.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarTweenController.Awake
void GlobalNamespace::AvatarTweenController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController.OnDisable
void GlobalNamespace::AvatarTweenController::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController.PresentAvatar
void GlobalNamespace::AvatarTweenController::PresentAvatar() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::PresentAvatar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PresentAvatar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController.HideAvatar
void GlobalNamespace::AvatarTweenController::HideAvatar() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::HideAvatar");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HideAvatar", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController.PopAll
void GlobalNamespace::AvatarTweenController::PopAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::PopAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController.PopHead
void GlobalNamespace::AvatarTweenController::PopHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::PopHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController.PopHands
void GlobalNamespace::AvatarTweenController::PopHands() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::PopHands");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopHands", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController.PopClothes
void GlobalNamespace::AvatarTweenController::PopClothes() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::PopClothes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopClothes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController.PopHead
void GlobalNamespace::AvatarTweenController::PopHead(float popAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::PopHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(popAmount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, popAmount);
}
// Autogenerated method: AvatarTweenController.PopHands
void GlobalNamespace::AvatarTweenController::PopHands(float popAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::PopHands");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopHands", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(popAmount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, popAmount);
}
// Autogenerated method: AvatarTweenController.PopClothes
void GlobalNamespace::AvatarTweenController::PopClothes(float popAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::PopClothes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PopClothes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(popAmount)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, popAmount);
}
// Autogenerated method: AvatarTweenController.CreatePopTween
Tweening::Tween_1<float>* GlobalNamespace::AvatarTweenController::CreatePopTween(UnityEngine::Transform* partTransform, float popAmount) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::CreatePopTween");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePopTween", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(partTransform), ::il2cpp_utils::ExtractType(popAmount)})));
  return ::il2cpp_utils::RunMethodThrow<Tweening::Tween_1<float>*, false>(this, ___internal__method, partTransform, popAmount);
}
// Autogenerated method: AvatarTweenController.AppearAnimation
System::Collections::IEnumerator* GlobalNamespace::AvatarTweenController::AppearAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::AppearAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppearAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController.AppearBody
void GlobalNamespace::AvatarTweenController::AppearBody() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::AppearBody");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppearBody", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController.AppearHead
void GlobalNamespace::AvatarTweenController::AppearHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::AppearHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppearHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController.AppearLeftHand
void GlobalNamespace::AvatarTweenController::AppearLeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::AppearLeftHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppearLeftHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController.AppearRightHand
void GlobalNamespace::AvatarTweenController::AppearRightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::AppearRightHand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AppearRightHand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController.DisappearAnimation
System::Collections::IEnumerator* GlobalNamespace::AvatarTweenController::DisappearAnimation() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::DisappearAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisappearAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController.StopAll
void GlobalNamespace::AvatarTweenController::StopAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::StopAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController.<AppearBody>b__54_0
void GlobalNamespace::AvatarTweenController::$AppearBody$b__54_0(UnityEngine::Vector3 val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::<AppearBody>b__54_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AppearBody>b__54_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: AvatarTweenController.<AppearBody>b__54_1
void GlobalNamespace::AvatarTweenController::$AppearBody$b__54_1(UnityEngine::Vector3 val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::<AppearBody>b__54_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AppearBody>b__54_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: AvatarTweenController.<AppearHead>b__55_0
void GlobalNamespace::AvatarTweenController::$AppearHead$b__55_0(UnityEngine::Vector3 val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::<AppearHead>b__55_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AppearHead>b__55_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: AvatarTweenController.<AppearHead>b__55_1
void GlobalNamespace::AvatarTweenController::$AppearHead$b__55_1(UnityEngine::Vector3 val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::<AppearHead>b__55_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AppearHead>b__55_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: AvatarTweenController.<AppearLeftHand>b__56_0
void GlobalNamespace::AvatarTweenController::$AppearLeftHand$b__56_0(UnityEngine::Vector3 val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::<AppearLeftHand>b__56_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AppearLeftHand>b__56_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: AvatarTweenController.<AppearLeftHand>b__56_1
void GlobalNamespace::AvatarTweenController::$AppearLeftHand$b__56_1(UnityEngine::Vector3 val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::<AppearLeftHand>b__56_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AppearLeftHand>b__56_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: AvatarTweenController.<AppearRightHand>b__57_0
void GlobalNamespace::AvatarTweenController::$AppearRightHand$b__57_0(UnityEngine::Vector3 val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::<AppearRightHand>b__57_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AppearRightHand>b__57_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: AvatarTweenController.<AppearRightHand>b__57_1
void GlobalNamespace::AvatarTweenController::$AppearRightHand$b__57_1(UnityEngine::Vector3 val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::<AppearRightHand>b__57_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<AppearRightHand>b__57_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: AvatarTweenController.<DisappearAnimation>b__58_0
void GlobalNamespace::AvatarTweenController::$DisappearAnimation$b__58_0(UnityEngine::Vector3 val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::<DisappearAnimation>b__58_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DisappearAnimation>b__58_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Autogenerated method: AvatarTweenController.<DisappearAnimation>b__58_1
void GlobalNamespace::AvatarTweenController::$DisappearAnimation$b__58_1(UnityEngine::Vector3 val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::<DisappearAnimation>b__58_1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<DisappearAnimation>b__58_1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Writing MetadataGetter for method: AvatarTweenController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)()>(&AvatarTweenController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)()>(&AvatarTweenController::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::PresentAvatar
// Il2CppName: PresentAvatar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)()>(&AvatarTweenController::PresentAvatar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "PresentAvatar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::HideAvatar
// Il2CppName: HideAvatar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)()>(&AvatarTweenController::HideAvatar)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "HideAvatar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::PopAll
// Il2CppName: PopAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)()>(&AvatarTweenController::PopAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "PopAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::PopHead
// Il2CppName: PopHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)()>(&AvatarTweenController::PopHead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "PopHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::PopHands
// Il2CppName: PopHands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)()>(&AvatarTweenController::PopHands)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "PopHands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::PopClothes
// Il2CppName: PopClothes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)()>(&AvatarTweenController::PopClothes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "PopClothes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::PopHead
// Il2CppName: PopHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)(float)>(&AvatarTweenController::PopHead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "PopHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::PopHands
// Il2CppName: PopHands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)(float)>(&AvatarTweenController::PopHands)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "PopHands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::PopClothes
// Il2CppName: PopClothes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)(float)>(&AvatarTweenController::PopClothes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "PopClothes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::CreatePopTween
// Il2CppName: CreatePopTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Tweening::Tween_1<float>* (AvatarTweenController::*)(UnityEngine::Transform*, float)>(&AvatarTweenController::CreatePopTween)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "CreatePopTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::AppearAnimation
// Il2CppName: AppearAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (AvatarTweenController::*)()>(&AvatarTweenController::AppearAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "AppearAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::AppearBody
// Il2CppName: AppearBody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)()>(&AvatarTweenController::AppearBody)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "AppearBody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::AppearHead
// Il2CppName: AppearHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)()>(&AvatarTweenController::AppearHead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "AppearHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::AppearLeftHand
// Il2CppName: AppearLeftHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)()>(&AvatarTweenController::AppearLeftHand)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "AppearLeftHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::AppearRightHand
// Il2CppName: AppearRightHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)()>(&AvatarTweenController::AppearRightHand)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "AppearRightHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::DisappearAnimation
// Il2CppName: DisappearAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (AvatarTweenController::*)()>(&AvatarTweenController::DisappearAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "DisappearAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::StopAll
// Il2CppName: StopAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)()>(&AvatarTweenController::StopAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "StopAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$AppearBody$b__54_0
// Il2CppName: <AppearBody>b__54_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)(UnityEngine::Vector3)>(&AvatarTweenController::$AppearBody$b__54_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "<AppearBody>b__54_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$AppearBody$b__54_1
// Il2CppName: <AppearBody>b__54_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)(UnityEngine::Vector3)>(&AvatarTweenController::$AppearBody$b__54_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "<AppearBody>b__54_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$AppearHead$b__55_0
// Il2CppName: <AppearHead>b__55_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)(UnityEngine::Vector3)>(&AvatarTweenController::$AppearHead$b__55_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "<AppearHead>b__55_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$AppearHead$b__55_1
// Il2CppName: <AppearHead>b__55_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)(UnityEngine::Vector3)>(&AvatarTweenController::$AppearHead$b__55_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "<AppearHead>b__55_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$AppearLeftHand$b__56_0
// Il2CppName: <AppearLeftHand>b__56_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)(UnityEngine::Vector3)>(&AvatarTweenController::$AppearLeftHand$b__56_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "<AppearLeftHand>b__56_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$AppearLeftHand$b__56_1
// Il2CppName: <AppearLeftHand>b__56_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)(UnityEngine::Vector3)>(&AvatarTweenController::$AppearLeftHand$b__56_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "<AppearLeftHand>b__56_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$AppearRightHand$b__57_0
// Il2CppName: <AppearRightHand>b__57_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)(UnityEngine::Vector3)>(&AvatarTweenController::$AppearRightHand$b__57_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "<AppearRightHand>b__57_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$AppearRightHand$b__57_1
// Il2CppName: <AppearRightHand>b__57_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)(UnityEngine::Vector3)>(&AvatarTweenController::$AppearRightHand$b__57_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "<AppearRightHand>b__57_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$DisappearAnimation$b__58_0
// Il2CppName: <DisappearAnimation>b__58_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)(UnityEngine::Vector3)>(&AvatarTweenController::$DisappearAnimation$b__58_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "<DisappearAnimation>b__58_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$DisappearAnimation$b__58_1
// Il2CppName: <DisappearAnimation>b__58_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)(UnityEngine::Vector3)>(&AvatarTweenController::$DisappearAnimation$b__58_1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), "<DisappearAnimation>b__58_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)()>(&AvatarTweenController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::*)()>(&AvatarTweenController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarTweenController/<>c__DisplayClass52_0
#include "GlobalNamespace/AvatarTweenController_--c__DisplayClass52_0.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarTweenController/<>c__DisplayClass52_0.<CreatePopTween>b__0
void GlobalNamespace::AvatarTweenController::$$c__DisplayClass52_0::$CreatePopTween$b__0(float val) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::$$c__DisplayClass52_0::<CreatePopTween>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreatePopTween>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(val)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, val);
}
// Writing MetadataGetter for method: AvatarTweenController::$$c__DisplayClass52_0::$CreatePopTween$b__0
// Il2CppName: <CreatePopTween>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::$$c__DisplayClass52_0::*)(float)>(&AvatarTweenController::$$c__DisplayClass52_0::$CreatePopTween$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$$c__DisplayClass52_0*), "<CreatePopTween>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$$c__DisplayClass52_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::$$c__DisplayClass52_0::*)()>(&AvatarTweenController::$$c__DisplayClass52_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$$c__DisplayClass52_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::$$c__DisplayClass52_0::*)()>(&AvatarTweenController::$$c__DisplayClass52_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$$c__DisplayClass52_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarTweenController/<AppearAnimation>d__53
#include "GlobalNamespace/AvatarTweenController_-AppearAnimation-d__53.hpp"
// Including type: UnityEngine.WaitForSeconds
#include "UnityEngine/WaitForSeconds.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarTweenController/<AppearAnimation>d__53.System.IDisposable.Dispose
void GlobalNamespace::AvatarTweenController::$AppearAnimation$d__53::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::$AppearAnimation$d__53::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController/<AppearAnimation>d__53.MoveNext
bool GlobalNamespace::AvatarTweenController::$AppearAnimation$d__53::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::$AppearAnimation$d__53::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController/<AppearAnimation>d__53.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::AvatarTweenController::$AppearAnimation$d__53::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::$AppearAnimation$d__53::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController/<AppearAnimation>d__53.System.Collections.IEnumerator.Reset
void GlobalNamespace::AvatarTweenController::$AppearAnimation$d__53::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::$AppearAnimation$d__53::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController/<AppearAnimation>d__53.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::AvatarTweenController::$AppearAnimation$d__53::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::$AppearAnimation$d__53::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AvatarTweenController::$AppearAnimation$d__53::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::$AppearAnimation$d__53::*)(int)>(&AvatarTweenController::$AppearAnimation$d__53::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$AppearAnimation$d__53*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::$AppearAnimation$d__53::*)(int)>(&AvatarTweenController::$AppearAnimation$d__53::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$AppearAnimation$d__53*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$AppearAnimation$d__53::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::$AppearAnimation$d__53::*)()>(&AvatarTweenController::$AppearAnimation$d__53::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$AppearAnimation$d__53*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$AppearAnimation$d__53::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AvatarTweenController::$AppearAnimation$d__53::*)()>(&AvatarTweenController::$AppearAnimation$d__53::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$AppearAnimation$d__53*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$AppearAnimation$d__53::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (AvatarTweenController::$AppearAnimation$d__53::*)()>(&AvatarTweenController::$AppearAnimation$d__53::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$AppearAnimation$d__53*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$AppearAnimation$d__53::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::$AppearAnimation$d__53::*)()>(&AvatarTweenController::$AppearAnimation$d__53::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$AppearAnimation$d__53*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$AppearAnimation$d__53::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (AvatarTweenController::$AppearAnimation$d__53::*)()>(&AvatarTweenController::$AppearAnimation$d__53::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$AppearAnimation$d__53*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarTweenController/<DisappearAnimation>d__58
#include "GlobalNamespace/AvatarTweenController_-DisappearAnimation-d__58.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarTweenController/<DisappearAnimation>d__58.System.IDisposable.Dispose
void GlobalNamespace::AvatarTweenController::$DisappearAnimation$d__58::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::$DisappearAnimation$d__58::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController/<DisappearAnimation>d__58.MoveNext
bool GlobalNamespace::AvatarTweenController::$DisappearAnimation$d__58::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::$DisappearAnimation$d__58::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController/<DisappearAnimation>d__58.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::AvatarTweenController::$DisappearAnimation$d__58::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::$DisappearAnimation$d__58::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController/<DisappearAnimation>d__58.System.Collections.IEnumerator.Reset
void GlobalNamespace::AvatarTweenController::$DisappearAnimation$d__58::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::$DisappearAnimation$d__58::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarTweenController/<DisappearAnimation>d__58.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::AvatarTweenController::$DisappearAnimation$d__58::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarTweenController::$DisappearAnimation$d__58::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AvatarTweenController::$DisappearAnimation$d__58::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::$DisappearAnimation$d__58::*)(int)>(&AvatarTweenController::$DisappearAnimation$d__58::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$DisappearAnimation$d__58*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::$DisappearAnimation$d__58::*)(int)>(&AvatarTweenController::$DisappearAnimation$d__58::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$DisappearAnimation$d__58*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$DisappearAnimation$d__58::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::$DisappearAnimation$d__58::*)()>(&AvatarTweenController::$DisappearAnimation$d__58::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$DisappearAnimation$d__58*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$DisappearAnimation$d__58::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (AvatarTweenController::$DisappearAnimation$d__58::*)()>(&AvatarTweenController::$DisappearAnimation$d__58::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$DisappearAnimation$d__58*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$DisappearAnimation$d__58::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (AvatarTweenController::$DisappearAnimation$d__58::*)()>(&AvatarTweenController::$DisappearAnimation$d__58::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$DisappearAnimation$d__58*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$DisappearAnimation$d__58::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarTweenController::$DisappearAnimation$d__58::*)()>(&AvatarTweenController::$DisappearAnimation$d__58::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$DisappearAnimation$d__58*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarTweenController::$DisappearAnimation$d__58::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (AvatarTweenController::$DisappearAnimation$d__58::*)()>(&AvatarTweenController::$DisappearAnimation$d__58::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarTweenController::$DisappearAnimation$d__58*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AvatarVisualController
#include "GlobalNamespace/AvatarVisualController.hpp"
// Including type: AvatarVisualController/HighlighterDelegate
#include "GlobalNamespace/AvatarVisualController_HighlighterDelegate.hpp"
// Including type: UnityEngine.MeshFilter
#include "UnityEngine/MeshFilter.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
// Including type: MulticolorAvatarPartPropertyBlockSetter
#include "GlobalNamespace/MulticolorAvatarPartPropertyBlockSetter.hpp"
// Including type: AvatarPropertyBlockColorSetter
#include "GlobalNamespace/AvatarPropertyBlockColorSetter.hpp"
// Including type: AvatarPartsModel
#include "GlobalNamespace/AvatarPartsModel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: AvatarData
#include "GlobalNamespace/AvatarData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarVisualController.get_lightColor
UnityEngine::Color GlobalNamespace::AvatarVisualController::get_lightColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarVisualController::get_lightColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lightColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: AvatarVisualController.Awake
void GlobalNamespace::AvatarVisualController::Awake() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarVisualController::Awake");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Awake", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarVisualController.UpdateAvatarVisual
void GlobalNamespace::AvatarVisualController::UpdateAvatarVisual(GlobalNamespace::AvatarData* avatarData) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarVisualController::UpdateAvatarVisual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAvatarVisual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(avatarData)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, avatarData);
}
// Autogenerated method: AvatarVisualController.SetLightColor
void GlobalNamespace::AvatarVisualController::SetLightColor(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarVisualController::SetLightColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLightColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: AvatarVisualController.UpdateAvatarColors
void GlobalNamespace::AvatarVisualController::UpdateAvatarColors() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarVisualController::UpdateAvatarColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateAvatarColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarVisualController.HighlightEditedPart
void GlobalNamespace::AvatarVisualController::HighlightEditedPart(GlobalNamespace::EditAvatarViewController::AvatarEditPart editPart, int uvSegment) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarVisualController::HighlightEditedPart");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HighlightEditedPart", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(editPart), ::il2cpp_utils::ExtractType(uvSegment)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, editPart, uvSegment);
}
// Autogenerated method: AvatarVisualController.DisableEditedPartHighlight
void GlobalNamespace::AvatarVisualController::DisableEditedPartHighlight() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarVisualController::DisableEditedPartHighlight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DisableEditedPartHighlight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AvatarVisualController.SetHandsHighlight
void GlobalNamespace::AvatarVisualController::SetHandsHighlight(bool highlighted, int uvSegment) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarVisualController::SetHandsHighlight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHandsHighlight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(highlighted), ::il2cpp_utils::ExtractType(uvSegment)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, highlighted, uvSegment);
}
// Writing MetadataGetter for method: AvatarVisualController::get_lightColor
// Il2CppName: get_lightColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (AvatarVisualController::*)()>(&AvatarVisualController::get_lightColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarVisualController*), "get_lightColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarVisualController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarVisualController::*)()>(&AvatarVisualController::Awake)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarVisualController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarVisualController::UpdateAvatarVisual
// Il2CppName: UpdateAvatarVisual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarVisualController::*)(GlobalNamespace::AvatarData*)>(&AvatarVisualController::UpdateAvatarVisual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarVisualController*), "UpdateAvatarVisual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AvatarData*>()});
  }
};
// Writing MetadataGetter for method: AvatarVisualController::SetLightColor
// Il2CppName: SetLightColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarVisualController::*)(UnityEngine::Color)>(&AvatarVisualController::SetLightColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarVisualController*), "SetLightColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: AvatarVisualController::UpdateAvatarColors
// Il2CppName: UpdateAvatarColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarVisualController::*)()>(&AvatarVisualController::UpdateAvatarColors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarVisualController*), "UpdateAvatarColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarVisualController::HighlightEditedPart
// Il2CppName: HighlightEditedPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarVisualController::*)(GlobalNamespace::EditAvatarViewController::AvatarEditPart, int)>(&AvatarVisualController::HighlightEditedPart)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarVisualController*), "HighlightEditedPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::EditAvatarViewController::AvatarEditPart>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AvatarVisualController::DisableEditedPartHighlight
// Il2CppName: DisableEditedPartHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarVisualController::*)()>(&AvatarVisualController::DisableEditedPartHighlight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarVisualController*), "DisableEditedPartHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AvatarVisualController::SetHandsHighlight
// Il2CppName: SetHandsHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarVisualController::*)(bool, int)>(&AvatarVisualController::SetHandsHighlight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarVisualController*), "SetHandsHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AvatarVisualController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarVisualController::*)()>(&AvatarVisualController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarVisualController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarVisualController::*)()>(&AvatarVisualController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarVisualController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AvatarVisualController/HighlighterDelegate
#include "GlobalNamespace/AvatarVisualController_HighlighterDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AvatarVisualController/HighlighterDelegate.Invoke
void GlobalNamespace::AvatarVisualController::HighlighterDelegate::Invoke(bool highlighted, int uvSegmentNumber) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarVisualController::HighlighterDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(highlighted), ::il2cpp_utils::ExtractType(uvSegmentNumber)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, highlighted, uvSegmentNumber);
}
// Autogenerated method: AvatarVisualController/HighlighterDelegate.BeginInvoke
System::IAsyncResult* GlobalNamespace::AvatarVisualController::HighlighterDelegate::BeginInvoke(bool highlighted, int uvSegmentNumber, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarVisualController::HighlighterDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(highlighted), ::il2cpp_utils::ExtractType(uvSegmentNumber), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, highlighted, uvSegmentNumber, callback, object);
}
// Autogenerated method: AvatarVisualController/HighlighterDelegate.EndInvoke
void GlobalNamespace::AvatarVisualController::HighlighterDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarVisualController::HighlighterDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: AvatarVisualController::HighlighterDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarVisualController::HighlighterDelegate::*)(::Il2CppObject*, System::IntPtr)>(&AvatarVisualController::HighlighterDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarVisualController::HighlighterDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarVisualController::HighlighterDelegate::*)(::Il2CppObject*, System::IntPtr)>(&AvatarVisualController::HighlighterDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarVisualController::HighlighterDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: AvatarVisualController::HighlighterDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarVisualController::HighlighterDelegate::*)(bool, int)>(&AvatarVisualController::HighlighterDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarVisualController::HighlighterDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: AvatarVisualController::HighlighterDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (AvatarVisualController::HighlighterDelegate::*)(bool, int, System::AsyncCallback*, ::Il2CppObject*)>(&AvatarVisualController::HighlighterDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarVisualController::HighlighterDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: AvatarVisualController::HighlighterDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AvatarVisualController::HighlighterDelegate::*)(System::IAsyncResult*)>(&AvatarVisualController::HighlighterDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AvatarVisualController::HighlighterDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ConnectedPlayerName
#include "GlobalNamespace/ConnectedPlayerName.hpp"
// Including type: TMPro.TextMeshProUGUI
#include "TMPro/TextMeshProUGUI.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ConnectedPlayerName.Start
void GlobalNamespace::ConnectedPlayerName::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerName::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ConnectedPlayerName::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerName::*)()>(&ConnectedPlayerName::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerName*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ConnectedPlayerName::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerName::*)()>(&ConnectedPlayerName::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ConnectedPlayerName::*)()>(&ConnectedPlayerName::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ConnectedPlayerName*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: HeadBodyOffsetSO
#include "GlobalNamespace/HeadBodyOffsetSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: HeadBodyOffsetSO.get_headNeckOffset
UnityEngine::Vector3 GlobalNamespace::HeadBodyOffsetSO::get_headNeckOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HeadBodyOffsetSO::get_headNeckOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headNeckOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: HeadBodyOffsetSO.get_verticalOffset
float GlobalNamespace::HeadBodyOffsetSO::get_verticalOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HeadBodyOffsetSO::get_verticalOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_verticalOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: HeadBodyOffsetSO::get_headNeckOffset
// Il2CppName: get_headNeckOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (HeadBodyOffsetSO::*)()>(&HeadBodyOffsetSO::get_headNeckOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HeadBodyOffsetSO*), "get_headNeckOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HeadBodyOffsetSO::get_verticalOffset
// Il2CppName: get_verticalOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HeadBodyOffsetSO::*)()>(&HeadBodyOffsetSO::get_verticalOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HeadBodyOffsetSO*), "get_verticalOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HeadBodyOffsetSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HeadBodyOffsetSO::*)()>(&HeadBodyOffsetSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HeadBodyOffsetSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HeadBodyOffsetSO::*)()>(&HeadBodyOffsetSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HeadBodyOffsetSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: LobbyAvatarInstaller
#include "GlobalNamespace/LobbyAvatarInstaller.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: LobbyAvatarInstaller.InstallBindings
void GlobalNamespace::LobbyAvatarInstaller::InstallBindings() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LobbyAvatarInstaller::InstallBindings");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InstallBindings", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LobbyAvatarInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyAvatarInstaller::*)()>(&LobbyAvatarInstaller::InstallBindings)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyAvatarInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LobbyAvatarInstaller::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyAvatarInstaller::*)()>(&LobbyAvatarInstaller::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyAvatarInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LobbyAvatarInstaller::*)()>(&LobbyAvatarInstaller::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LobbyAvatarInstaller*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MulticolorAvatarPartPropertyBlockSetter
#include "GlobalNamespace/MulticolorAvatarPartPropertyBlockSetter.hpp"
// Including type: MulticolorAvatarPartPropertyBlockSetter/ColorData
#include "GlobalNamespace/MulticolorAvatarPartPropertyBlockSetter_ColorData.hpp"
// Including type: MulticolorAvatarPartPropertyBlockSetter/<>c
#include "GlobalNamespace/MulticolorAvatarPartPropertyBlockSetter_--c.hpp"
// Including type: UnityEngine.Renderer
#include "UnityEngine/Renderer.hpp"
// Including type: UnityEngine.MaterialPropertyBlock
#include "UnityEngine/MaterialPropertyBlock.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// [DoesNotRequireDomainReloadInitAttribute] Offset: 0xE15A80
// Autogenerated static field getter
// Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
UnityEngine::MaterialPropertyBlock* GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::_get__materialPropertyBlock() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::_get__materialPropertyBlock");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<UnityEngine::MaterialPropertyBlock*>("", "MulticolorAvatarPartPropertyBlockSetter", "_materialPropertyBlock"));
}
// Autogenerated static field setter
// Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
void GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::_set__materialPropertyBlock(UnityEngine::MaterialPropertyBlock* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::_set__materialPropertyBlock");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "MulticolorAvatarPartPropertyBlockSetter", "_materialPropertyBlock", value));
}
// Autogenerated method: MulticolorAvatarPartPropertyBlockSetter.OnValidate
void GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::OnValidate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::OnValidate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnValidate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MulticolorAvatarPartPropertyBlockSetter.SetColors
void GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::SetColors(::Array<UnityEngine::Color>* colors) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::SetColors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetColors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(colors)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, colors);
}
// Creating initializer_list -> params proxy for: System.Void SetColors(params UnityEngine.Color[] colors)
void GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::SetColors(std::initializer_list<UnityEngine::Color> colors) {
  GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::SetColors(::Array<UnityEngine::Color>::New(colors));
}
// Autogenerated method: MulticolorAvatarPartPropertyBlockSetter.SetHighlight
void GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::SetHighlight(bool highlighted, int uvSegment) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::SetHighlight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetHighlight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(highlighted), ::il2cpp_utils::ExtractType(uvSegment)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, highlighted, uvSegment);
}
// Autogenerated method: MulticolorAvatarPartPropertyBlockSetter.UpdateRenderer
void GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::UpdateRenderer() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::UpdateRenderer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateRenderer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MulticolorAvatarPartPropertyBlockSetter::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MulticolorAvatarPartPropertyBlockSetter::*)()>(&MulticolorAvatarPartPropertyBlockSetter::OnValidate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MulticolorAvatarPartPropertyBlockSetter*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MulticolorAvatarPartPropertyBlockSetter::SetColors
// Il2CppName: SetColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MulticolorAvatarPartPropertyBlockSetter::*)(::Array<UnityEngine::Color>*)>(&MulticolorAvatarPartPropertyBlockSetter::SetColors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MulticolorAvatarPartPropertyBlockSetter*), "SetColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Color>*>()});
  }
};
// Writing MetadataGetter for method: MulticolorAvatarPartPropertyBlockSetter::SetHighlight
// Il2CppName: SetHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MulticolorAvatarPartPropertyBlockSetter::*)(bool, int)>(&MulticolorAvatarPartPropertyBlockSetter::SetHighlight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MulticolorAvatarPartPropertyBlockSetter*), "SetHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MulticolorAvatarPartPropertyBlockSetter::UpdateRenderer
// Il2CppName: UpdateRenderer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MulticolorAvatarPartPropertyBlockSetter::*)()>(&MulticolorAvatarPartPropertyBlockSetter::UpdateRenderer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MulticolorAvatarPartPropertyBlockSetter*), "UpdateRenderer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MulticolorAvatarPartPropertyBlockSetter::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MulticolorAvatarPartPropertyBlockSetter::*)()>(&MulticolorAvatarPartPropertyBlockSetter::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MulticolorAvatarPartPropertyBlockSetter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MulticolorAvatarPartPropertyBlockSetter::*)()>(&MulticolorAvatarPartPropertyBlockSetter::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MulticolorAvatarPartPropertyBlockSetter*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MulticolorAvatarPartPropertyBlockSetter/ColorData
#include "GlobalNamespace/MulticolorAvatarPartPropertyBlockSetter_ColorData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MulticolorAvatarPartPropertyBlockSetter/ColorData.get_defaultColor
UnityEngine::Color GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::ColorData::get_defaultColor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::ColorData::get_defaultColor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_defaultColor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method);
}
// Autogenerated method: MulticolorAvatarPartPropertyBlockSetter/ColorData.get_darkerColorMultiplier
float GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::ColorData::get_darkerColorMultiplier() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::ColorData::get_darkerColorMultiplier");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_darkerColorMultiplier", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: MulticolorAvatarPartPropertyBlockSetter/ColorData.get_whiteBoost
float GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::ColorData::get_whiteBoost() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::ColorData::get_whiteBoost");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_whiteBoost", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MulticolorAvatarPartPropertyBlockSetter::ColorData::get_defaultColor
// Il2CppName: get_defaultColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (MulticolorAvatarPartPropertyBlockSetter::ColorData::*)()>(&MulticolorAvatarPartPropertyBlockSetter::ColorData::get_defaultColor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MulticolorAvatarPartPropertyBlockSetter::ColorData*), "get_defaultColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MulticolorAvatarPartPropertyBlockSetter::ColorData::get_darkerColorMultiplier
// Il2CppName: get_darkerColorMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MulticolorAvatarPartPropertyBlockSetter::ColorData::*)()>(&MulticolorAvatarPartPropertyBlockSetter::ColorData::get_darkerColorMultiplier)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MulticolorAvatarPartPropertyBlockSetter::ColorData*), "get_darkerColorMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MulticolorAvatarPartPropertyBlockSetter::ColorData::get_whiteBoost
// Il2CppName: get_whiteBoost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (MulticolorAvatarPartPropertyBlockSetter::ColorData::*)()>(&MulticolorAvatarPartPropertyBlockSetter::ColorData::get_whiteBoost)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MulticolorAvatarPartPropertyBlockSetter::ColorData*), "get_whiteBoost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MulticolorAvatarPartPropertyBlockSetter::ColorData::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MulticolorAvatarPartPropertyBlockSetter::ColorData::*)()>(&MulticolorAvatarPartPropertyBlockSetter::ColorData::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MulticolorAvatarPartPropertyBlockSetter::ColorData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MulticolorAvatarPartPropertyBlockSetter::ColorData::*)()>(&MulticolorAvatarPartPropertyBlockSetter::ColorData::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MulticolorAvatarPartPropertyBlockSetter::ColorData*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MulticolorAvatarPartPropertyBlockSetter/<>c
#include "GlobalNamespace/MulticolorAvatarPartPropertyBlockSetter_--c.hpp"
// Including type: System.Func`2
#include "System/Func_2.hpp"
// Including type: MulticolorAvatarPartPropertyBlockSetter/ColorData
#include "GlobalNamespace/MulticolorAvatarPartPropertyBlockSetter_ColorData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public readonly MulticolorAvatarPartPropertyBlockSetter/<>c <>9
GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::$$c* GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::$$c::_get_$$9() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::$$c::_get_$$9");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::$$c*>("", "MulticolorAvatarPartPropertyBlockSetter/<>c", "<>9")));
}
// Autogenerated static field setter
// Set static field: static public readonly MulticolorAvatarPartPropertyBlockSetter/<>c <>9
void GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::$$c::_set_$$9(GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::$$c* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::$$c::_set_$$9");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MulticolorAvatarPartPropertyBlockSetter/<>c", "<>9", value)));
}
// Autogenerated static field getter
// Get static field: static public System.Func`2<MulticolorAvatarPartPropertyBlockSetter/ColorData,UnityEngine.Color> <>9__10_0
System::Func_2<GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::ColorData*, UnityEngine::Color>* GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::$$c::_get_$$9__10_0() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::$$c::_get_$$9__10_0");
  return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::ColorData*, UnityEngine::Color>*>("", "MulticolorAvatarPartPropertyBlockSetter/<>c", "<>9__10_0")));
}
// Autogenerated static field setter
// Set static field: static public System.Func`2<MulticolorAvatarPartPropertyBlockSetter/ColorData,UnityEngine.Color> <>9__10_0
void GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::$$c::_set_$$9__10_0(System::Func_2<GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::ColorData*, UnityEngine::Color>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::$$c::_set_$$9__10_0");
  THROW_UNLESS((il2cpp_utils::SetFieldValue("", "MulticolorAvatarPartPropertyBlockSetter/<>c", "<>9__10_0", value)));
}
// Autogenerated method: MulticolorAvatarPartPropertyBlockSetter/<>c..cctor
void GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::$$c::_cctor() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::$$c::.cctor");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "MulticolorAvatarPartPropertyBlockSetter/<>c", ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
}
// Autogenerated method: MulticolorAvatarPartPropertyBlockSetter/<>c.<OnValidate>b__10_0
UnityEngine::Color GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::$$c::$OnValidate$b__10_0(GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::ColorData* x) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::$$c::<OnValidate>b__10_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<OnValidate>b__10_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(x)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Color, false>(this, ___internal__method, x);
}
// Writing MetadataGetter for method: MulticolorAvatarPartPropertyBlockSetter::$$c::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&MulticolorAvatarPartPropertyBlockSetter::$$c::_cctor)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MulticolorAvatarPartPropertyBlockSetter::$$c*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MulticolorAvatarPartPropertyBlockSetter::$$c::$OnValidate$b__10_0
// Il2CppName: <OnValidate>b__10_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (MulticolorAvatarPartPropertyBlockSetter::$$c::*)(GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::ColorData*)>(&MulticolorAvatarPartPropertyBlockSetter::$$c::$OnValidate$b__10_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MulticolorAvatarPartPropertyBlockSetter::$$c*), "<OnValidate>b__10_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MulticolorAvatarPartPropertyBlockSetter::ColorData*>()});
  }
};
// Writing MetadataGetter for method: MulticolorAvatarPartPropertyBlockSetter::$$c::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MulticolorAvatarPartPropertyBlockSetter::$$c::*)()>(&MulticolorAvatarPartPropertyBlockSetter::$$c::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MulticolorAvatarPartPropertyBlockSetter::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MulticolorAvatarPartPropertyBlockSetter::$$c::*)()>(&MulticolorAvatarPartPropertyBlockSetter::$$c::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MulticolorAvatarPartPropertyBlockSetter::$$c*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerAvatarPoseController
#include "GlobalNamespace/MultiplayerAvatarPoseController.hpp"
// Including type: AvatarPoseController
#include "GlobalNamespace/AvatarPoseController.hpp"
// Including type: INodePoseSyncStateManager
#include "GlobalNamespace/INodePoseSyncStateManager.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerAvatarPoseController.set_connectedPlayer
void GlobalNamespace::MultiplayerAvatarPoseController::set_connectedPlayer(GlobalNamespace::IConnectedPlayer* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerAvatarPoseController::set_connectedPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_connectedPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: MultiplayerAvatarPoseController.Start
void GlobalNamespace::MultiplayerAvatarPoseController::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerAvatarPoseController::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerAvatarPoseController.Update
void GlobalNamespace::MultiplayerAvatarPoseController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerAvatarPoseController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerAvatarPoseController::set_connectedPlayer
// Il2CppName: set_connectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerAvatarPoseController::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerAvatarPoseController::set_connectedPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerAvatarPoseController*), "set_connectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerAvatarPoseController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerAvatarPoseController::*)()>(&MultiplayerAvatarPoseController::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerAvatarPoseController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerAvatarPoseController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerAvatarPoseController::*)()>(&MultiplayerAvatarPoseController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerAvatarPoseController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerAvatarPoseController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerAvatarPoseController::*)()>(&MultiplayerAvatarPoseController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerAvatarPoseController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerAvatarPoseController::*)()>(&MultiplayerAvatarPoseController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerAvatarPoseController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerAvatarVisualProvider
#include "GlobalNamespace/MultiplayerAvatarVisualProvider.hpp"
// Including type: AvatarVisualController
#include "GlobalNamespace/AvatarVisualController.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerAvatarVisualProvider.Start
void GlobalNamespace::MultiplayerAvatarVisualProvider::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerAvatarVisualProvider::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerAvatarVisualProvider::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerAvatarVisualProvider::*)()>(&MultiplayerAvatarVisualProvider::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerAvatarVisualProvider*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerAvatarVisualProvider::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerAvatarVisualProvider::*)()>(&MultiplayerAvatarVisualProvider::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerAvatarVisualProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerAvatarVisualProvider::*)()>(&MultiplayerAvatarVisualProvider::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerAvatarVisualProvider*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLobbyAvatarController
#include "GlobalNamespace/MultiplayerLobbyAvatarController.hpp"
// Including type: MultiplayerLobbyAvatarController/Factory
#include "GlobalNamespace/MultiplayerLobbyAvatarController_Factory.hpp"
// Including type: MultiplayerLobbyAvatarController/<SpawnAnimationCoroutine>d__8
#include "GlobalNamespace/MultiplayerLobbyAvatarController_-SpawnAnimationCoroutine-d__8.hpp"
// Including type: MultiplayerLobbyAvatarController/<ShowDespawnAnimationAndDestroy>d__10
#include "GlobalNamespace/MultiplayerLobbyAvatarController_-ShowDespawnAnimationAndDestroy-d__10.hpp"
// Including type: MultiplayerLobbyAvatarController/<DespawnAnimationCoroutine>d__12
#include "GlobalNamespace/MultiplayerLobbyAvatarController_-DespawnAnimationCoroutine-d__12.hpp"
// Including type: UnityEngine.Playables.PlayableDirector
#include "UnityEngine/Playables/PlayableDirector.hpp"
// Including type: VFXController
#include "GlobalNamespace/VFXController.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLobbyAvatarController.ShowSpawnAnimation
void GlobalNamespace::MultiplayerLobbyAvatarController::ShowSpawnAnimation(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::ShowSpawnAnimation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowSpawnAnimation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position, rotation);
}
// Autogenerated method: MultiplayerLobbyAvatarController.SpawnAnimationCoroutine
System::Collections::IEnumerator* GlobalNamespace::MultiplayerLobbyAvatarController::SpawnAnimationCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::SpawnAnimationCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnAnimationCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarController.ActivateVisualObjects
void GlobalNamespace::MultiplayerLobbyAvatarController::ActivateVisualObjects(bool on) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::ActivateVisualObjects");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateVisualObjects", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(on)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, on);
}
// Autogenerated method: MultiplayerLobbyAvatarController.ShowDespawnAnimationAndDestroy
System::Collections::IEnumerator* GlobalNamespace::MultiplayerLobbyAvatarController::ShowDespawnAnimationAndDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::ShowDespawnAnimationAndDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ShowDespawnAnimationAndDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarController.DestroySelf
void GlobalNamespace::MultiplayerLobbyAvatarController::DestroySelf() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::DestroySelf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroySelf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarController.DespawnAnimationCoroutine
System::Collections::IEnumerator* GlobalNamespace::MultiplayerLobbyAvatarController::DespawnAnimationCoroutine() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::DespawnAnimationCoroutine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnAnimationCoroutine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::ShowSpawnAnimation
// Il2CppName: ShowSpawnAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::*)(UnityEngine::Vector3, UnityEngine::Quaternion)>(&MultiplayerLobbyAvatarController::ShowSpawnAnimation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController*), "ShowSpawnAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::SpawnAnimationCoroutine
// Il2CppName: SpawnAnimationCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MultiplayerLobbyAvatarController::*)()>(&MultiplayerLobbyAvatarController::SpawnAnimationCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController*), "SpawnAnimationCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::ActivateVisualObjects
// Il2CppName: ActivateVisualObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::*)(bool)>(&MultiplayerLobbyAvatarController::ActivateVisualObjects)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController*), "ActivateVisualObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::ShowDespawnAnimationAndDestroy
// Il2CppName: ShowDespawnAnimationAndDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MultiplayerLobbyAvatarController::*)()>(&MultiplayerLobbyAvatarController::ShowDespawnAnimationAndDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController*), "ShowDespawnAnimationAndDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::DestroySelf
// Il2CppName: DestroySelf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::*)()>(&MultiplayerLobbyAvatarController::DestroySelf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController*), "DestroySelf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::DespawnAnimationCoroutine
// Il2CppName: DespawnAnimationCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MultiplayerLobbyAvatarController::*)()>(&MultiplayerLobbyAvatarController::DespawnAnimationCoroutine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController*), "DespawnAnimationCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::*)()>(&MultiplayerLobbyAvatarController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::*)()>(&MultiplayerLobbyAvatarController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLobbyAvatarController/Factory
#include "GlobalNamespace/MultiplayerLobbyAvatarController_Factory.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::Factory::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::Factory::*)()>(&MultiplayerLobbyAvatarController::Factory::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::Factory*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::Factory::*)()>(&MultiplayerLobbyAvatarController::Factory::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::Factory*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLobbyAvatarController/<SpawnAnimationCoroutine>d__8
#include "GlobalNamespace/MultiplayerLobbyAvatarController_-SpawnAnimationCoroutine-d__8.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLobbyAvatarController/<SpawnAnimationCoroutine>d__8.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarController/<SpawnAnimationCoroutine>d__8.MoveNext
bool GlobalNamespace::MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarController/<SpawnAnimationCoroutine>d__8.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarController/<SpawnAnimationCoroutine>d__8.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarController/<SpawnAnimationCoroutine>d__8.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::*)(int)>(&MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::*)(int)>(&MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::*)()>(&MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::*)()>(&MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::*)()>(&MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::*)()>(&MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::*)()>(&MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$SpawnAnimationCoroutine$d__8*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLobbyAvatarController/<ShowDespawnAnimationAndDestroy>d__10
#include "GlobalNamespace/MultiplayerLobbyAvatarController_-ShowDespawnAnimationAndDestroy-d__10.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLobbyAvatarController/<ShowDespawnAnimationAndDestroy>d__10.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarController/<ShowDespawnAnimationAndDestroy>d__10.MoveNext
bool GlobalNamespace::MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarController/<ShowDespawnAnimationAndDestroy>d__10.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarController/<ShowDespawnAnimationAndDestroy>d__10.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarController/<ShowDespawnAnimationAndDestroy>d__10.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::*)(int)>(&MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::*)(int)>(&MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::*)()>(&MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::*)()>(&MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::*)()>(&MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::*)()>(&MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::*)()>(&MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$ShowDespawnAnimationAndDestroy$d__10*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLobbyAvatarController/<DespawnAnimationCoroutine>d__12
#include "GlobalNamespace/MultiplayerLobbyAvatarController_-DespawnAnimationCoroutine-d__12.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLobbyAvatarController/<DespawnAnimationCoroutine>d__12.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarController/<DespawnAnimationCoroutine>d__12.MoveNext
bool GlobalNamespace::MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarController/<DespawnAnimationCoroutine>d__12.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarController/<DespawnAnimationCoroutine>d__12.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarController/<DespawnAnimationCoroutine>d__12.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::*)(int)>(&MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::*)(int)>(&MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::*)()>(&MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::*)()>(&MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::*)()>(&MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::*)()>(&MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::*)()>(&MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarController::$DespawnAnimationCoroutine$d__12*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLobbyAvatarManager
#include "GlobalNamespace/MultiplayerLobbyAvatarManager.hpp"
// Including type: MultiplayerLobbyAvatarManager/<RemovePlayerAndDestroy>d__13
#include "GlobalNamespace/MultiplayerLobbyAvatarManager_-RemovePlayerAndDestroy-d__13.hpp"
// Including type: ILobbyStateDataModel
#include "GlobalNamespace/ILobbyStateDataModel.hpp"
// Including type: System.Collections.Generic.Dictionary`2
#include "System/Collections/Generic/Dictionary_2.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
// Including type: MultiplayerLobbyAvatarController/Factory
#include "GlobalNamespace/MultiplayerLobbyAvatarController_Factory.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLobbyAvatarManager.Init
void GlobalNamespace::MultiplayerLobbyAvatarManager::Init(float innerCircleRadius, float minOuterCircleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarManager::Init");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(innerCircleRadius), ::il2cpp_utils::ExtractType(minOuterCircleRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, innerCircleRadius, minOuterCircleRadius);
}
// Autogenerated method: MultiplayerLobbyAvatarManager.ActivateMultiplayerLobbyAvatarManager
void GlobalNamespace::MultiplayerLobbyAvatarManager::ActivateMultiplayerLobbyAvatarManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarManager::ActivateMultiplayerLobbyAvatarManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ActivateMultiplayerLobbyAvatarManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarManager.DeactivateMultiplayerLobbyAvatarManager
void GlobalNamespace::MultiplayerLobbyAvatarManager::DeactivateMultiplayerLobbyAvatarManager() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarManager::DeactivateMultiplayerLobbyAvatarManager");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DeactivateMultiplayerLobbyAvatarManager", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarManager.HandleLobbyStateDataModelPlayerConnected
void GlobalNamespace::MultiplayerLobbyAvatarManager::HandleLobbyStateDataModelPlayerConnected(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarManager::HandleLobbyStateDataModelPlayerConnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyStateDataModelPlayerConnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: MultiplayerLobbyAvatarManager.HandleLobbyStateDataModelPlayerDisconnected
void GlobalNamespace::MultiplayerLobbyAvatarManager::HandleLobbyStateDataModelPlayerDisconnected(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarManager::HandleLobbyStateDataModelPlayerDisconnected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleLobbyStateDataModelPlayerDisconnected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: MultiplayerLobbyAvatarManager.AddPlayer
void GlobalNamespace::MultiplayerLobbyAvatarManager::AddPlayer(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarManager::AddPlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: MultiplayerLobbyAvatarManager.RemovePlayer
void GlobalNamespace::MultiplayerLobbyAvatarManager::RemovePlayer(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarManager::RemovePlayer");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemovePlayer", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectedPlayer)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, connectedPlayer);
}
// Autogenerated method: MultiplayerLobbyAvatarManager.RemovePlayerAndDestroy
System::Collections::IEnumerator* GlobalNamespace::MultiplayerLobbyAvatarManager::RemovePlayerAndDestroy(::Il2CppString* userId, GlobalNamespace::MultiplayerLobbyAvatarController* multiplayerAvatar) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarManager::RemovePlayerAndDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemovePlayerAndDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(userId), ::il2cpp_utils::ExtractType(multiplayerAvatar)})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method, userId, multiplayerAvatar);
}
// Writing MetadataGetter for method: MultiplayerLobbyAvatarManager::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarManager::*)(float, float)>(&MultiplayerLobbyAvatarManager::Init)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarManager::ActivateMultiplayerLobbyAvatarManager
// Il2CppName: ActivateMultiplayerLobbyAvatarManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarManager::*)()>(&MultiplayerLobbyAvatarManager::ActivateMultiplayerLobbyAvatarManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager*), "ActivateMultiplayerLobbyAvatarManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarManager::DeactivateMultiplayerLobbyAvatarManager
// Il2CppName: DeactivateMultiplayerLobbyAvatarManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarManager::*)()>(&MultiplayerLobbyAvatarManager::DeactivateMultiplayerLobbyAvatarManager)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager*), "DeactivateMultiplayerLobbyAvatarManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarManager::HandleLobbyStateDataModelPlayerConnected
// Il2CppName: HandleLobbyStateDataModelPlayerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarManager::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerLobbyAvatarManager::HandleLobbyStateDataModelPlayerConnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager*), "HandleLobbyStateDataModelPlayerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarManager::HandleLobbyStateDataModelPlayerDisconnected
// Il2CppName: HandleLobbyStateDataModelPlayerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarManager::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerLobbyAvatarManager::HandleLobbyStateDataModelPlayerDisconnected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager*), "HandleLobbyStateDataModelPlayerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarManager::AddPlayer
// Il2CppName: AddPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarManager::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerLobbyAvatarManager::AddPlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager*), "AddPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarManager::RemovePlayer
// Il2CppName: RemovePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarManager::*)(GlobalNamespace::IConnectedPlayer*)>(&MultiplayerLobbyAvatarManager::RemovePlayer)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager*), "RemovePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IConnectedPlayer*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarManager::RemovePlayerAndDestroy
// Il2CppName: RemovePlayerAndDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (MultiplayerLobbyAvatarManager::*)(::Il2CppString*, GlobalNamespace::MultiplayerLobbyAvatarController*)>(&MultiplayerLobbyAvatarManager::RemovePlayerAndDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager*), "RemovePlayerAndDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MultiplayerLobbyAvatarController*>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarManager::*)()>(&MultiplayerLobbyAvatarManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarManager::*)()>(&MultiplayerLobbyAvatarManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLobbyAvatarManager/<RemovePlayerAndDestroy>d__13
#include "GlobalNamespace/MultiplayerLobbyAvatarManager_-RemovePlayerAndDestroy-d__13.hpp"
// Including type: MultiplayerLobbyAvatarController
#include "GlobalNamespace/MultiplayerLobbyAvatarController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLobbyAvatarManager/<RemovePlayerAndDestroy>d__13.System.IDisposable.Dispose
void GlobalNamespace::MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System_IDisposable_Dispose() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System.IDisposable.Dispose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarManager/<RemovePlayerAndDestroy>d__13.MoveNext
bool GlobalNamespace::MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarManager/<RemovePlayerAndDestroy>d__13.System.Collections.Generic.IEnumerator<System.Object>.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System.Collections.Generic.IEnumerator<System.Object>.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarManager/<RemovePlayerAndDestroy>d__13.System.Collections.IEnumerator.Reset
void GlobalNamespace::MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System_Collections_IEnumerator_Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System.Collections.IEnumerator.Reset");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarManager/<RemovePlayerAndDestroy>d__13.System.Collections.IEnumerator.get_Current
::Il2CppObject* GlobalNamespace::MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System_Collections_IEnumerator_get_Current() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System.Collections.IEnumerator.get_Current");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::*)(int)>(&MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::*)(int)>(&MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System_IDisposable_Dispose
// Il2CppName: System.IDisposable.Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::*)()>(&MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System_IDisposable_Dispose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13*), "System.IDisposable.Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::*)()>(&MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13*), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current
// Il2CppName: System.Collections.Generic.IEnumerator<System.Object>.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::*)()>(&MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System_Collections_Generic_IEnumerator$System_Object$_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13*), "System.Collections.Generic.IEnumerator<System.Object>.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System_Collections_IEnumerator_Reset
// Il2CppName: System.Collections.IEnumerator.Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::*)()>(&MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System_Collections_IEnumerator_Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13*), "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::*)()>(&MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13::System_Collections_IEnumerator_get_Current)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarManager::$RemovePlayerAndDestroy$d__13*), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLobbyAvatarPlace
#include "GlobalNamespace/MultiplayerLobbyAvatarPlace.hpp"
// Including type: MultiplayerLobbyAvatarPlace/Pool
#include "GlobalNamespace/MultiplayerLobbyAvatarPlace_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLobbyAvatarPlace.SetPositionAndRotation
void GlobalNamespace::MultiplayerLobbyAvatarPlace::SetPositionAndRotation(UnityEngine::Vector3 worldPos, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarPlace::SetPositionAndRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPositionAndRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(worldPos), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, worldPos, rotation);
}
// Writing MetadataGetter for method: MultiplayerLobbyAvatarPlace::SetPositionAndRotation
// Il2CppName: SetPositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarPlace::*)(UnityEngine::Vector3, UnityEngine::Quaternion)>(&MultiplayerLobbyAvatarPlace::SetPositionAndRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarPlace*), "SetPositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarPlace::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarPlace::*)()>(&MultiplayerLobbyAvatarPlace::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarPlace*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarPlace::*)()>(&MultiplayerLobbyAvatarPlace::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarPlace*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLobbyAvatarPlace/Pool
#include "GlobalNamespace/MultiplayerLobbyAvatarPlace_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: MultiplayerLobbyAvatarPlace::Pool::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarPlace::Pool::*)()>(&MultiplayerLobbyAvatarPlace::Pool::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarPlace::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarPlace::Pool::*)()>(&MultiplayerLobbyAvatarPlace::Pool::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarPlace::Pool*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: MultiplayerLobbyAvatarPlaceManager
#include "GlobalNamespace/MultiplayerLobbyAvatarPlaceManager.hpp"
// Including type: ILobbyStateDataModel
#include "GlobalNamespace/ILobbyStateDataModel.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: MultiplayerLobbyAvatarPlace/Pool
#include "GlobalNamespace/MultiplayerLobbyAvatarPlace_Pool.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: MultiplayerLobbyAvatarPlaceManager.Activate
void GlobalNamespace::MultiplayerLobbyAvatarPlaceManager::Activate(float innerCircleRadius, float minOuterCircleRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarPlaceManager::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(innerCircleRadius), ::il2cpp_utils::ExtractType(minOuterCircleRadius)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, innerCircleRadius, minOuterCircleRadius);
}
// Autogenerated method: MultiplayerLobbyAvatarPlaceManager.Deactivate
void GlobalNamespace::MultiplayerLobbyAvatarPlaceManager::Deactivate() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarPlaceManager::Deactivate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Deactivate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarPlaceManager.OnDestroy
void GlobalNamespace::MultiplayerLobbyAvatarPlaceManager::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarPlaceManager::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarPlaceManager.SpawnAllPlaces
void GlobalNamespace::MultiplayerLobbyAvatarPlaceManager::SpawnAllPlaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarPlaceManager::SpawnAllPlaces");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpawnAllPlaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: MultiplayerLobbyAvatarPlaceManager.DespawnAllPlaces
void GlobalNamespace::MultiplayerLobbyAvatarPlaceManager::DespawnAllPlaces() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLobbyAvatarPlaceManager::DespawnAllPlaces");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DespawnAllPlaces", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: MultiplayerLobbyAvatarPlaceManager::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarPlaceManager::*)(float, float)>(&MultiplayerLobbyAvatarPlaceManager::Activate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarPlaceManager*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarPlaceManager::Deactivate
// Il2CppName: Deactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarPlaceManager::*)()>(&MultiplayerLobbyAvatarPlaceManager::Deactivate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarPlaceManager*), "Deactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarPlaceManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarPlaceManager::*)()>(&MultiplayerLobbyAvatarPlaceManager::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarPlaceManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarPlaceManager::SpawnAllPlaces
// Il2CppName: SpawnAllPlaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarPlaceManager::*)()>(&MultiplayerLobbyAvatarPlaceManager::SpawnAllPlaces)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarPlaceManager*), "SpawnAllPlaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarPlaceManager::DespawnAllPlaces
// Il2CppName: DespawnAllPlaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarPlaceManager::*)()>(&MultiplayerLobbyAvatarPlaceManager::DespawnAllPlaces)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarPlaceManager*), "DespawnAllPlaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: MultiplayerLobbyAvatarPlaceManager::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarPlaceManager::*)()>(&MultiplayerLobbyAvatarPlaceManager::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarPlaceManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (MultiplayerLobbyAvatarPlaceManager::*)()>(&MultiplayerLobbyAvatarPlaceManager::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(MultiplayerLobbyAvatarPlaceManager*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: ShadowFollowController
#include "GlobalNamespace/ShadowFollowController.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.SpriteRenderer
#include "UnityEngine/SpriteRenderer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: ShadowFollowController.SetTargetTransform
void GlobalNamespace::ShadowFollowController::SetTargetTransform(UnityEngine::Transform* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShadowFollowController::SetTargetTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetTargetTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, target);
}
// Autogenerated method: ShadowFollowController.Update
void GlobalNamespace::ShadowFollowController::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ShadowFollowController::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ShadowFollowController::SetTargetTransform
// Il2CppName: SetTargetTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShadowFollowController::*)(UnityEngine::Transform*)>(&ShadowFollowController::SetTargetTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShadowFollowController*), "SetTargetTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: ShadowFollowController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShadowFollowController::*)()>(&ShadowFollowController::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShadowFollowController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ShadowFollowController::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShadowFollowController::*)()>(&ShadowFollowController::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShadowFollowController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ShadowFollowController::*)()>(&ShadowFollowController::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ShadowFollowController*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AchievementIdsModelSO
#include "GlobalNamespace/AchievementIdsModelSO.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: AchievementSO
#include "GlobalNamespace/AchievementSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AchievementIdsModelSO.get_achievementsIds
System::Collections::Generic::List_1<GlobalNamespace::AchievementSO*>* GlobalNamespace::AchievementIdsModelSO::get_achievementsIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AchievementIdsModelSO::get_achievementsIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_achievementsIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<GlobalNamespace::AchievementSO*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AchievementIdsModelSO::get_achievementsIds
// Il2CppName: get_achievementsIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::AchievementSO*>* (AchievementIdsModelSO::*)()>(&AchievementIdsModelSO::get_achievementsIds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementIdsModelSO*), "get_achievementsIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AchievementIdsModelSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementIdsModelSO::*)()>(&AchievementIdsModelSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementIdsModelSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementIdsModelSO::*)()>(&AchievementIdsModelSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementIdsModelSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AchievementSO
#include "GlobalNamespace/AchievementSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AchievementSO.get_achievementId
::Il2CppString* GlobalNamespace::AchievementSO::get_achievementId() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AchievementSO::get_achievementId");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_achievementId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Il2CppString*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AchievementSO::get_achievementId
// Il2CppName: get_achievementId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (AchievementSO::*)()>(&AchievementSO::get_achievementId)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementSO*), "get_achievementId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AchievementSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementSO::*)()>(&AchievementSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementSO::*)()>(&AchievementSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AchievementsEvaluationHandler
#include "GlobalNamespace/AchievementsEvaluationHandler.hpp"
// Including type: AchievementsModelSO
#include "GlobalNamespace/AchievementsModelSO.hpp"
// Including type: AchievementSO
#include "GlobalNamespace/AchievementSO.hpp"
// Including type: PlayerDataModel
#include "GlobalNamespace/PlayerDataModel.hpp"
// Including type: MissionNodesManager
#include "GlobalNamespace/MissionNodesManager.hpp"
// Including type: LevelCompletionResults
#include "GlobalNamespace/LevelCompletionResults.hpp"
// Including type: IDifficultyBeatmap
#include "GlobalNamespace/IDifficultyBeatmap.hpp"
// Including type: MissionCompletionResults
#include "GlobalNamespace/MissionCompletionResults.hpp"
// Including type: MissionNode
#include "GlobalNamespace/MissionNode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AchievementsEvaluationHandler.Start
void GlobalNamespace::AchievementsEvaluationHandler::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AchievementsEvaluationHandler::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AchievementsEvaluationHandler.OnDestroy
void GlobalNamespace::AchievementsEvaluationHandler::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AchievementsEvaluationHandler::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AchievementsEvaluationHandler.HandleSoloFreePlayOverallStatsDataDidUpdate
void GlobalNamespace::AchievementsEvaluationHandler::HandleSoloFreePlayOverallStatsDataDidUpdate(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AchievementsEvaluationHandler::HandleSoloFreePlayOverallStatsDataDidUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleSoloFreePlayOverallStatsDataDidUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(difficultyBeatmap)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelCompletionResults, difficultyBeatmap);
}
// Autogenerated method: AchievementsEvaluationHandler.HandlePartyFreePlayOverallStatsDataDidUpdate
void GlobalNamespace::AchievementsEvaluationHandler::HandlePartyFreePlayOverallStatsDataDidUpdate(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AchievementsEvaluationHandler::HandlePartyFreePlayOverallStatsDataDidUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandlePartyFreePlayOverallStatsDataDidUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelCompletionResults), ::il2cpp_utils::ExtractType(difficultyBeatmap)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, levelCompletionResults, difficultyBeatmap);
}
// Autogenerated method: AchievementsEvaluationHandler.HandleCampaignOverallStatsDataDidUpdate
void GlobalNamespace::AchievementsEvaluationHandler::HandleCampaignOverallStatsDataDidUpdate(GlobalNamespace::MissionCompletionResults* missionCompletionResults, GlobalNamespace::MissionNode* missionNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AchievementsEvaluationHandler::HandleCampaignOverallStatsDataDidUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleCampaignOverallStatsDataDidUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionCompletionResults), ::il2cpp_utils::ExtractType(missionNode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, missionCompletionResults, missionNode);
}
// Autogenerated method: AchievementsEvaluationHandler.ProcessMissionFinishData
void GlobalNamespace::AchievementsEvaluationHandler::ProcessMissionFinishData(GlobalNamespace::MissionNode* missionNode, GlobalNamespace::MissionCompletionResults* missionCompletionResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AchievementsEvaluationHandler::ProcessMissionFinishData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessMissionFinishData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(missionNode), ::il2cpp_utils::ExtractType(missionCompletionResults)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, missionNode, missionCompletionResults);
}
// Autogenerated method: AchievementsEvaluationHandler.ProcessSoloFreePlayLevelFinishData
void GlobalNamespace::AchievementsEvaluationHandler::ProcessSoloFreePlayLevelFinishData(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::LevelCompletionResults* levelCompletionResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AchievementsEvaluationHandler::ProcessSoloFreePlayLevelFinishData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessSoloFreePlayLevelFinishData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(levelCompletionResults)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, difficultyBeatmap, levelCompletionResults);
}
// Autogenerated method: AchievementsEvaluationHandler.ProcessLevelFinishData
void GlobalNamespace::AchievementsEvaluationHandler::ProcessLevelFinishData(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::LevelCompletionResults* levelCompletionResults) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AchievementsEvaluationHandler::ProcessLevelFinishData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ProcessLevelFinishData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(difficultyBeatmap), ::il2cpp_utils::ExtractType(levelCompletionResults)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, difficultyBeatmap, levelCompletionResults);
}
// Writing MetadataGetter for method: AchievementsEvaluationHandler::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsEvaluationHandler::*)()>(&AchievementsEvaluationHandler::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsEvaluationHandler*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AchievementsEvaluationHandler::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsEvaluationHandler::*)()>(&AchievementsEvaluationHandler::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsEvaluationHandler*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AchievementsEvaluationHandler::HandleSoloFreePlayOverallStatsDataDidUpdate
// Il2CppName: HandleSoloFreePlayOverallStatsDataDidUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsEvaluationHandler::*)(GlobalNamespace::LevelCompletionResults*, GlobalNamespace::IDifficultyBeatmap*)>(&AchievementsEvaluationHandler::HandleSoloFreePlayOverallStatsDataDidUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsEvaluationHandler*), "HandleSoloFreePlayOverallStatsDataDidUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
  }
};
// Writing MetadataGetter for method: AchievementsEvaluationHandler::HandlePartyFreePlayOverallStatsDataDidUpdate
// Il2CppName: HandlePartyFreePlayOverallStatsDataDidUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsEvaluationHandler::*)(GlobalNamespace::LevelCompletionResults*, GlobalNamespace::IDifficultyBeatmap*)>(&AchievementsEvaluationHandler::HandlePartyFreePlayOverallStatsDataDidUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsEvaluationHandler*), "HandlePartyFreePlayOverallStatsDataDidUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>()});
  }
};
// Writing MetadataGetter for method: AchievementsEvaluationHandler::HandleCampaignOverallStatsDataDidUpdate
// Il2CppName: HandleCampaignOverallStatsDataDidUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsEvaluationHandler::*)(GlobalNamespace::MissionCompletionResults*, GlobalNamespace::MissionNode*)>(&AchievementsEvaluationHandler::HandleCampaignOverallStatsDataDidUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsEvaluationHandler*), "HandleCampaignOverallStatsDataDidUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionCompletionResults*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>()});
  }
};
// Writing MetadataGetter for method: AchievementsEvaluationHandler::ProcessMissionFinishData
// Il2CppName: ProcessMissionFinishData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsEvaluationHandler::*)(GlobalNamespace::MissionNode*, GlobalNamespace::MissionCompletionResults*)>(&AchievementsEvaluationHandler::ProcessMissionFinishData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsEvaluationHandler*), "ProcessMissionFinishData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionNode*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::MissionCompletionResults*>()});
  }
};
// Writing MetadataGetter for method: AchievementsEvaluationHandler::ProcessSoloFreePlayLevelFinishData
// Il2CppName: ProcessSoloFreePlayLevelFinishData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsEvaluationHandler::*)(GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::LevelCompletionResults*)>(&AchievementsEvaluationHandler::ProcessSoloFreePlayLevelFinishData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsEvaluationHandler*), "ProcessSoloFreePlayLevelFinishData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>()});
  }
};
// Writing MetadataGetter for method: AchievementsEvaluationHandler::ProcessLevelFinishData
// Il2CppName: ProcessLevelFinishData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsEvaluationHandler::*)(GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::LevelCompletionResults*)>(&AchievementsEvaluationHandler::ProcessLevelFinishData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsEvaluationHandler*), "ProcessLevelFinishData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::IDifficultyBeatmap*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::LevelCompletionResults*>()});
  }
};
// Writing MetadataGetter for method: AchievementsEvaluationHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsEvaluationHandler::*)()>(&AchievementsEvaluationHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsEvaluationHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsEvaluationHandler::*)()>(&AchievementsEvaluationHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsEvaluationHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AchievementsModelSO
#include "GlobalNamespace/AchievementsModelSO.hpp"
// Including type: AchievementsModelSO/<>c__DisplayClass4_0
#include "GlobalNamespace/AchievementsModelSO_--c__DisplayClass4_0.hpp"
// Including type: PlatformAchievementsModelSO/GetUnlockedAchievementsResult
#include "GlobalNamespace/PlatformAchievementsModelSO_GetUnlockedAchievementsResult.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
// Including type: AchievementSO
#include "GlobalNamespace/AchievementSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AchievementsModelSO.Initialize
void GlobalNamespace::AchievementsModelSO::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AchievementsModelSO::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AchievementsModelSO.UnlockAchievement
void GlobalNamespace::AchievementsModelSO::UnlockAchievement(GlobalNamespace::AchievementSO* achievement) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AchievementsModelSO::UnlockAchievement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnlockAchievement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(achievement)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, achievement);
}
// Autogenerated method: AchievementsModelSO.<Initialize>b__3_0
void GlobalNamespace::AchievementsModelSO::$Initialize$b__3_0(GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult result, ::Array<::Il2CppString*>* achievementIds) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AchievementsModelSO::<Initialize>b__3_0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<Initialize>b__3_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(achievementIds)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result, achievementIds);
}
// Writing MetadataGetter for method: AchievementsModelSO::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsModelSO::*)()>(&AchievementsModelSO::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsModelSO*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AchievementsModelSO::UnlockAchievement
// Il2CppName: UnlockAchievement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsModelSO::*)(GlobalNamespace::AchievementSO*)>(&AchievementsModelSO::UnlockAchievement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsModelSO*), "UnlockAchievement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::AchievementSO*>()});
  }
};
// Writing MetadataGetter for method: AchievementsModelSO::$Initialize$b__3_0
// Il2CppName: <Initialize>b__3_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsModelSO::*)(GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult, ::Array<::Il2CppString*>*)>(&AchievementsModelSO::$Initialize$b__3_0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsModelSO*), "<Initialize>b__3_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: AchievementsModelSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsModelSO::*)()>(&AchievementsModelSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsModelSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsModelSO::*)()>(&AchievementsModelSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsModelSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AchievementsModelSO/<>c__DisplayClass4_0
#include "GlobalNamespace/AchievementsModelSO_--c__DisplayClass4_0.hpp"
// Including type: PlatformAchievementsModelSO/UnlockAchievementResult
#include "GlobalNamespace/PlatformAchievementsModelSO_UnlockAchievementResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AchievementsModelSO/<>c__DisplayClass4_0.<UnlockAchievement>b__0
void GlobalNamespace::AchievementsModelSO::$$c__DisplayClass4_0::$UnlockAchievement$b__0(GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AchievementsModelSO::$$c__DisplayClass4_0::<UnlockAchievement>b__0");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<UnlockAchievement>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: AchievementsModelSO::$$c__DisplayClass4_0::$UnlockAchievement$b__0
// Il2CppName: <UnlockAchievement>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsModelSO::$$c__DisplayClass4_0::*)(GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult)>(&AchievementsModelSO::$$c__DisplayClass4_0::$UnlockAchievement$b__0)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsModelSO::$$c__DisplayClass4_0*), "<UnlockAchievement>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult>()});
  }
};
// Writing MetadataGetter for method: AchievementsModelSO::$$c__DisplayClass4_0::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsModelSO::$$c__DisplayClass4_0::*)()>(&AchievementsModelSO::$$c__DisplayClass4_0::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsModelSO::$$c__DisplayClass4_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AchievementsModelSO::$$c__DisplayClass4_0::*)()>(&AchievementsModelSO::$$c__DisplayClass4_0::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AchievementsModelSO::$$c__DisplayClass4_0*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: FinishTutorialAchievementHandler
#include "GlobalNamespace/FinishTutorialAchievementHandler.hpp"
// Including type: AchievementsModelSO
#include "GlobalNamespace/AchievementsModelSO.hpp"
// Including type: Signal
#include "GlobalNamespace/Signal.hpp"
// Including type: AchievementSO
#include "GlobalNamespace/AchievementSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: FinishTutorialAchievementHandler.Start
void GlobalNamespace::FinishTutorialAchievementHandler::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FinishTutorialAchievementHandler::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FinishTutorialAchievementHandler.OnDestroy
void GlobalNamespace::FinishTutorialAchievementHandler::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FinishTutorialAchievementHandler::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: FinishTutorialAchievementHandler.HandleTutorialFinished
void GlobalNamespace::FinishTutorialAchievementHandler::HandleTutorialFinished() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FinishTutorialAchievementHandler::HandleTutorialFinished");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "HandleTutorialFinished", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FinishTutorialAchievementHandler::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FinishTutorialAchievementHandler::*)()>(&FinishTutorialAchievementHandler::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FinishTutorialAchievementHandler*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FinishTutorialAchievementHandler::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FinishTutorialAchievementHandler::*)()>(&FinishTutorialAchievementHandler::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FinishTutorialAchievementHandler*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FinishTutorialAchievementHandler::HandleTutorialFinished
// Il2CppName: HandleTutorialFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FinishTutorialAchievementHandler::*)()>(&FinishTutorialAchievementHandler::HandleTutorialFinished)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FinishTutorialAchievementHandler*), "HandleTutorialFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FinishTutorialAchievementHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FinishTutorialAchievementHandler::*)()>(&FinishTutorialAchievementHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FinishTutorialAchievementHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FinishTutorialAchievementHandler::*)()>(&FinishTutorialAchievementHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FinishTutorialAchievementHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlatformAchievementsHandler
#include "GlobalNamespace/PlatformAchievementsHandler.hpp"
// Including type: HMAsyncRequest
#include "GlobalNamespace/HMAsyncRequest.hpp"
// Including type: PlatformAchievementsModelSO/UnlockAchievementCompletionHandler
#include "GlobalNamespace/PlatformAchievementsModelSO_UnlockAchievementCompletionHandler.hpp"
// Including type: PlatformAchievementsModelSO/GetUnlockedAchievementsCompletionHandler
#include "GlobalNamespace/PlatformAchievementsModelSO_GetUnlockedAchievementsCompletionHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlatformAchievementsHandler.UnlockAchievement
GlobalNamespace::HMAsyncRequest* GlobalNamespace::PlatformAchievementsHandler::UnlockAchievement(::Il2CppString* achievementId, GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementCompletionHandler* completionHandler) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsHandler::UnlockAchievement");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnlockAchievement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(achievementId), ::il2cpp_utils::ExtractType(completionHandler)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::HMAsyncRequest*, false>(this, ___internal__method, achievementId, completionHandler);
}
// Autogenerated method: PlatformAchievementsHandler.GetUnlockedAchievements
GlobalNamespace::HMAsyncRequest* GlobalNamespace::PlatformAchievementsHandler::GetUnlockedAchievements(GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler* completionHandler) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsHandler::GetUnlockedAchievements");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUnlockedAchievements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completionHandler)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::HMAsyncRequest*, false>(this, ___internal__method, completionHandler);
}
// Writing MetadataGetter for method: PlatformAchievementsHandler::UnlockAchievement
// Il2CppName: UnlockAchievement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::HMAsyncRequest* (PlatformAchievementsHandler::*)(::Il2CppString*, GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementCompletionHandler*)>(&PlatformAchievementsHandler::UnlockAchievement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsHandler*), "UnlockAchievement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementCompletionHandler*>()});
  }
};
// Writing MetadataGetter for method: PlatformAchievementsHandler::GetUnlockedAchievements
// Il2CppName: GetUnlockedAchievements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::HMAsyncRequest* (PlatformAchievementsHandler::*)(GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler*)>(&PlatformAchievementsHandler::GetUnlockedAchievements)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsHandler*), "GetUnlockedAchievements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler*>()});
  }
};
// Writing MetadataGetter for method: PlatformAchievementsHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAchievementsHandler::*)()>(&PlatformAchievementsHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAchievementsHandler::*)()>(&PlatformAchievementsHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlatformAchievementsModelSO
#include "GlobalNamespace/PlatformAchievementsModelSO.hpp"
// Including type: PlatformAchievementsModelSO/UnlockAchievementResult
#include "GlobalNamespace/PlatformAchievementsModelSO_UnlockAchievementResult.hpp"
// Including type: PlatformAchievementsModelSO/GetUnlockedAchievementsResult
#include "GlobalNamespace/PlatformAchievementsModelSO_GetUnlockedAchievementsResult.hpp"
// Including type: PlatformAchievementsModelSO/UnlockAchievementCompletionHandler
#include "GlobalNamespace/PlatformAchievementsModelSO_UnlockAchievementCompletionHandler.hpp"
// Including type: PlatformAchievementsModelSO/GetUnlockedAchievementsCompletionHandler
#include "GlobalNamespace/PlatformAchievementsModelSO_GetUnlockedAchievementsCompletionHandler.hpp"
// Including type: PS4AchievementIdsModelSO
#include "GlobalNamespace/PS4AchievementIdsModelSO.hpp"
// Including type: AchievementIdsModelSO
#include "GlobalNamespace/AchievementIdsModelSO.hpp"
// Including type: PlatformAchievementsHandler
#include "GlobalNamespace/PlatformAchievementsHandler.hpp"
// Including type: HMAsyncRequest
#include "GlobalNamespace/HMAsyncRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlatformAchievementsModelSO.get_platformAchievementsHandler
GlobalNamespace::PlatformAchievementsHandler* GlobalNamespace::PlatformAchievementsModelSO::get_platformAchievementsHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::get_platformAchievementsHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_platformAchievementsHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::PlatformAchievementsHandler*, false>(this, ___internal__method);
}
// Autogenerated method: PlatformAchievementsModelSO.Initialize
void GlobalNamespace::PlatformAchievementsModelSO::Initialize() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::Initialize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlatformAchievementsModelSO.CreatePlatformAchievementsHandler
void GlobalNamespace::PlatformAchievementsModelSO::CreatePlatformAchievementsHandler() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::CreatePlatformAchievementsHandler");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePlatformAchievementsHandler", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: PlatformAchievementsModelSO.UnlockAchievement
GlobalNamespace::HMAsyncRequest* GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievement(::Il2CppString* achievementId, GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementCompletionHandler* completionHandler) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievement");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UnlockAchievement", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(achievementId), ::il2cpp_utils::ExtractType(completionHandler)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::HMAsyncRequest*, false>(this, ___internal__method, achievementId, completionHandler);
}
// Autogenerated method: PlatformAchievementsModelSO.GetUnlockedAchievements
GlobalNamespace::HMAsyncRequest* GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievements(GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler* completionHandler) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievements");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetUnlockedAchievements", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(completionHandler)})));
  return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::HMAsyncRequest*, false>(this, ___internal__method, completionHandler);
}
// Writing MetadataGetter for method: PlatformAchievementsModelSO::get_platformAchievementsHandler
// Il2CppName: get_platformAchievementsHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::PlatformAchievementsHandler* (PlatformAchievementsModelSO::*)()>(&PlatformAchievementsModelSO::get_platformAchievementsHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO*), "get_platformAchievementsHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlatformAchievementsModelSO::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAchievementsModelSO::*)()>(&PlatformAchievementsModelSO::Initialize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlatformAchievementsModelSO::CreatePlatformAchievementsHandler
// Il2CppName: CreatePlatformAchievementsHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAchievementsModelSO::*)()>(&PlatformAchievementsModelSO::CreatePlatformAchievementsHandler)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO*), "CreatePlatformAchievementsHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: PlatformAchievementsModelSO::UnlockAchievement
// Il2CppName: UnlockAchievement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::HMAsyncRequest* (PlatformAchievementsModelSO::*)(::Il2CppString*, GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementCompletionHandler*)>(&PlatformAchievementsModelSO::UnlockAchievement)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO*), "UnlockAchievement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementCompletionHandler*>()});
  }
};
// Writing MetadataGetter for method: PlatformAchievementsModelSO::GetUnlockedAchievements
// Il2CppName: GetUnlockedAchievements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::HMAsyncRequest* (PlatformAchievementsModelSO::*)(GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler*)>(&PlatformAchievementsModelSO::GetUnlockedAchievements)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO*), "GetUnlockedAchievements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler*>()});
  }
};
// Writing MetadataGetter for method: PlatformAchievementsModelSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAchievementsModelSO::*)()>(&PlatformAchievementsModelSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAchievementsModelSO::*)()>(&PlatformAchievementsModelSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlatformAchievementsModelSO/UnlockAchievementResult
#include "GlobalNamespace/PlatformAchievementsModelSO_UnlockAchievementResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public PlatformAchievementsModelSO/UnlockAchievementResult OK
GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult::_get_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult::_get_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult>("", "PlatformAchievementsModelSO/UnlockAchievementResult", "OK"));
}
// Autogenerated static field setter
// Set static field: static public PlatformAchievementsModelSO/UnlockAchievementResult OK
void GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult::_set_OK(GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult::_set_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlatformAchievementsModelSO/UnlockAchievementResult", "OK", value));
}
// Autogenerated static field getter
// Get static field: static public PlatformAchievementsModelSO/UnlockAchievementResult Failed
GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult>("", "PlatformAchievementsModelSO/UnlockAchievementResult", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public PlatformAchievementsModelSO/UnlockAchievementResult Failed
void GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult::_set_Failed(GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlatformAchievementsModelSO/UnlockAchievementResult", "Failed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: PlatformAchievementsModelSO/GetUnlockedAchievementsResult
#include "GlobalNamespace/PlatformAchievementsModelSO_GetUnlockedAchievementsResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public PlatformAchievementsModelSO/GetUnlockedAchievementsResult OK
GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult::_get_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult::_get_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult>("", "PlatformAchievementsModelSO/GetUnlockedAchievementsResult", "OK"));
}
// Autogenerated static field setter
// Set static field: static public PlatformAchievementsModelSO/GetUnlockedAchievementsResult OK
void GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult::_set_OK(GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult::_set_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlatformAchievementsModelSO/GetUnlockedAchievementsResult", "OK", value));
}
// Autogenerated static field getter
// Get static field: static public PlatformAchievementsModelSO/GetUnlockedAchievementsResult Failed
GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult>("", "PlatformAchievementsModelSO/GetUnlockedAchievementsResult", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public PlatformAchievementsModelSO/GetUnlockedAchievementsResult Failed
void GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult::_set_Failed(GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "PlatformAchievementsModelSO/GetUnlockedAchievementsResult", "Failed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlatformAchievementsModelSO/UnlockAchievementCompletionHandler
#include "GlobalNamespace/PlatformAchievementsModelSO_UnlockAchievementCompletionHandler.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: PlatformAchievementsModelSO/UnlockAchievementResult
#include "GlobalNamespace/PlatformAchievementsModelSO_UnlockAchievementResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlatformAchievementsModelSO/UnlockAchievementCompletionHandler.Invoke
void GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::Invoke(GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Autogenerated method: PlatformAchievementsModelSO/UnlockAchievementCompletionHandler.BeginInvoke
System::IAsyncResult* GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::BeginInvoke(GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult result, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, result, callback, object);
}
// Autogenerated method: PlatformAchievementsModelSO/UnlockAchievementCompletionHandler.EndInvoke
void GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::*)(::Il2CppObject*, System::IntPtr)>(&PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO::UnlockAchievementCompletionHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::*)(::Il2CppObject*, System::IntPtr)>(&PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO::UnlockAchievementCompletionHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::*)(GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult)>(&PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO::UnlockAchievementCompletionHandler*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult>()});
  }
};
// Writing MetadataGetter for method: PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::*)(GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult, System::AsyncCallback*, ::Il2CppObject*)>(&PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO::UnlockAchievementCompletionHandler*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementResult>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::*)(System::IAsyncResult*)>(&PlatformAchievementsModelSO::UnlockAchievementCompletionHandler::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO::UnlockAchievementCompletionHandler*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlatformAchievementsModelSO/GetUnlockedAchievementsCompletionHandler
#include "GlobalNamespace/PlatformAchievementsModelSO_GetUnlockedAchievementsCompletionHandler.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: PlatformAchievementsModelSO/GetUnlockedAchievementsResult
#include "GlobalNamespace/PlatformAchievementsModelSO_GetUnlockedAchievementsResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: PlatformAchievementsModelSO/GetUnlockedAchievementsCompletionHandler.Invoke
void GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::Invoke(GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult result, ::Array<::Il2CppString*>* unlockedAchievementsIds) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(unlockedAchievementsIds)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result, unlockedAchievementsIds);
}
// Autogenerated method: PlatformAchievementsModelSO/GetUnlockedAchievementsCompletionHandler.BeginInvoke
System::IAsyncResult* GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::BeginInvoke(GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult result, ::Array<::Il2CppString*>* unlockedAchievementsIds, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(unlockedAchievementsIds), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, result, unlockedAchievementsIds, callback, object);
}
// Autogenerated method: PlatformAchievementsModelSO/GetUnlockedAchievementsCompletionHandler.EndInvoke
void GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::*)(::Il2CppObject*, System::IntPtr)>(&PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::*)(::Il2CppObject*, System::IntPtr)>(&PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::*)(GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult, ::Array<::Il2CppString*>*)>(&PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>()});
  }
};
// Writing MetadataGetter for method: PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::*)(GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult, ::Array<::Il2CppString*>*, System::AsyncCallback*, ::Il2CppObject*)>(&PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsResult>(), ::il2cpp_utils::ExtractIndependentType<::Array<::Il2CppString*>*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::*)(System::IAsyncResult*)>(&PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AdditionalContentModel
#include "GlobalNamespace/AdditionalContentModel.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: AdditionalContentModel/UpdateEntitlementsResult
#include "GlobalNamespace/AdditionalContentModel_UpdateEntitlementsResult.hpp"
// Including type: AdditionalContentModel/<GetLevelEntitlementStatusAsync>d__10
#include "GlobalNamespace/AdditionalContentModel_-GetLevelEntitlementStatusAsync-d__10.hpp"
// Including type: AdditionalContentModel/<GetPackEntitlementStatusAsync>d__11
#include "GlobalNamespace/AdditionalContentModel_-GetPackEntitlementStatusAsync-d__11.hpp"
// Including type: AlwaysOwnedContentContainerSO
#include "GlobalNamespace/AlwaysOwnedContentContainerSO.hpp"
// Including type: System.Action
#include "System/Action.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AdditionalContentModel.add_didInvalidateDataEvent
void GlobalNamespace::AdditionalContentModel::add_didInvalidateDataEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::add_didInvalidateDataEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "add_didInvalidateDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AdditionalContentModel.remove_didInvalidateDataEvent
void GlobalNamespace::AdditionalContentModel::remove_didInvalidateDataEvent(System::Action* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::remove_didInvalidateDataEvent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "remove_didInvalidateDataEvent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: AdditionalContentModel.OnApplicationFocus
void GlobalNamespace::AdditionalContentModel::OnApplicationFocus(bool hasFocus) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::OnApplicationFocus");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnApplicationFocus", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hasFocus)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hasFocus);
}
// Autogenerated method: AdditionalContentModel.InvalidateData
void GlobalNamespace::AdditionalContentModel::InvalidateData() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::InvalidateData");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidateData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AdditionalContentModel.GetLevelEntitlementStatusAsync
System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>* GlobalNamespace::AdditionalContentModel::GetLevelEntitlementStatusAsync(::Il2CppString* levelId, System::Threading::CancellationToken token) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::GetLevelEntitlementStatusAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLevelEntitlementStatusAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId), ::il2cpp_utils::ExtractType(token)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>*, false>(this, ___internal__method, levelId, token);
}
// Autogenerated method: AdditionalContentModel.GetPackEntitlementStatusAsync
System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>* GlobalNamespace::AdditionalContentModel::GetPackEntitlementStatusAsync(::Il2CppString* levelPackId, System::Threading::CancellationToken token) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::GetPackEntitlementStatusAsync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPackEntitlementStatusAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelPackId), ::il2cpp_utils::ExtractType(token)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>*, false>(this, ___internal__method, levelPackId, token);
}
// Autogenerated method: AdditionalContentModel.InvalidateDataInternal
void GlobalNamespace::AdditionalContentModel::InvalidateDataInternal() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::InvalidateDataInternal");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InvalidateDataInternal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AdditionalContentModel.GetLevelEntitlementStatusInternalAsync
System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>* GlobalNamespace::AdditionalContentModel::GetLevelEntitlementStatusInternalAsync(::Il2CppString* levelId, System::Threading::CancellationToken token) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::GetLevelEntitlementStatusInternalAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLevelEntitlementStatusInternalAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId), ::il2cpp_utils::ExtractType(token)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>*, false>(this, ___internal__method, levelId, token);
}
// Autogenerated method: AdditionalContentModel.GetPackEntitlementStatusInternalAsync
System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>* GlobalNamespace::AdditionalContentModel::GetPackEntitlementStatusInternalAsync(::Il2CppString* levelPackId, System::Threading::CancellationToken token) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::GetPackEntitlementStatusInternalAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPackEntitlementStatusInternalAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelPackId), ::il2cpp_utils::ExtractType(token)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>*, false>(this, ___internal__method, levelPackId, token);
}
// Autogenerated method: AdditionalContentModel.IsPackBetterBuyThanLevelAsync
System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult>* GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelAsync(::Il2CppString* levelPackId, System::Threading::CancellationToken token) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPackBetterBuyThanLevelAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelPackId), ::il2cpp_utils::ExtractType(token)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult>*, false>(this, ___internal__method, levelPackId, token);
}
// Autogenerated method: AdditionalContentModel.OpenLevelProductStoreAsync
System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::OpenProductStoreResult>* GlobalNamespace::AdditionalContentModel::OpenLevelProductStoreAsync(::Il2CppString* levelId, System::Threading::CancellationToken token) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::OpenLevelProductStoreAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenLevelProductStoreAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelId), ::il2cpp_utils::ExtractType(token)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::OpenProductStoreResult>*, false>(this, ___internal__method, levelId, token);
}
// Autogenerated method: AdditionalContentModel.OpenLevelPackProductStoreAsync
System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::OpenProductStoreResult>* GlobalNamespace::AdditionalContentModel::OpenLevelPackProductStoreAsync(::Il2CppString* levelPackId, System::Threading::CancellationToken token) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::OpenLevelPackProductStoreAsync");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenLevelPackProductStoreAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(levelPackId), ::il2cpp_utils::ExtractType(token)})));
  return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::OpenProductStoreResult>*, false>(this, ___internal__method, levelPackId, token);
}
// Writing MetadataGetter for method: AdditionalContentModel::add_didInvalidateDataEvent
// Il2CppName: add_didInvalidateDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdditionalContentModel::*)(System::Action*)>(&AdditionalContentModel::add_didInvalidateDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel*), "add_didInvalidateDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: AdditionalContentModel::remove_didInvalidateDataEvent
// Il2CppName: remove_didInvalidateDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdditionalContentModel::*)(System::Action*)>(&AdditionalContentModel::remove_didInvalidateDataEvent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel*), "remove_didInvalidateDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Action*>()});
  }
};
// Writing MetadataGetter for method: AdditionalContentModel::OnApplicationFocus
// Il2CppName: OnApplicationFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdditionalContentModel::*)(bool)>(&AdditionalContentModel::OnApplicationFocus)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel*), "OnApplicationFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: AdditionalContentModel::InvalidateData
// Il2CppName: InvalidateData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdditionalContentModel::*)()>(&AdditionalContentModel::InvalidateData)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel*), "InvalidateData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdditionalContentModel::GetLevelEntitlementStatusAsync
// Il2CppName: GetLevelEntitlementStatusAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>* (AdditionalContentModel::*)(::Il2CppString*, System::Threading::CancellationToken)>(&AdditionalContentModel::GetLevelEntitlementStatusAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel*), "GetLevelEntitlementStatusAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: AdditionalContentModel::GetPackEntitlementStatusAsync
// Il2CppName: GetPackEntitlementStatusAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>* (AdditionalContentModel::*)(::Il2CppString*, System::Threading::CancellationToken)>(&AdditionalContentModel::GetPackEntitlementStatusAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel*), "GetPackEntitlementStatusAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: AdditionalContentModel::InvalidateDataInternal
// Il2CppName: InvalidateDataInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdditionalContentModel::*)()>(&AdditionalContentModel::InvalidateDataInternal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel*), "InvalidateDataInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdditionalContentModel::GetLevelEntitlementStatusInternalAsync
// Il2CppName: GetLevelEntitlementStatusInternalAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>* (AdditionalContentModel::*)(::Il2CppString*, System::Threading::CancellationToken)>(&AdditionalContentModel::GetLevelEntitlementStatusInternalAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel*), "GetLevelEntitlementStatusInternalAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: AdditionalContentModel::GetPackEntitlementStatusInternalAsync
// Il2CppName: GetPackEntitlementStatusInternalAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::EntitlementStatus>* (AdditionalContentModel::*)(::Il2CppString*, System::Threading::CancellationToken)>(&AdditionalContentModel::GetPackEntitlementStatusInternalAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel*), "GetPackEntitlementStatusInternalAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: AdditionalContentModel::IsPackBetterBuyThanLevelAsync
// Il2CppName: IsPackBetterBuyThanLevelAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult>* (AdditionalContentModel::*)(::Il2CppString*, System::Threading::CancellationToken)>(&AdditionalContentModel::IsPackBetterBuyThanLevelAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel*), "IsPackBetterBuyThanLevelAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: AdditionalContentModel::OpenLevelProductStoreAsync
// Il2CppName: OpenLevelProductStoreAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::OpenProductStoreResult>* (AdditionalContentModel::*)(::Il2CppString*, System::Threading::CancellationToken)>(&AdditionalContentModel::OpenLevelProductStoreAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel*), "OpenLevelProductStoreAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: AdditionalContentModel::OpenLevelPackProductStoreAsync
// Il2CppName: OpenLevelPackProductStoreAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Threading::Tasks::Task_1<GlobalNamespace::AdditionalContentModel::OpenProductStoreResult>* (AdditionalContentModel::*)(::Il2CppString*, System::Threading::CancellationToken)>(&AdditionalContentModel::OpenLevelPackProductStoreAsync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel*), "OpenLevelPackProductStoreAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<System::Threading::CancellationToken>()});
  }
};
// Writing MetadataGetter for method: AdditionalContentModel::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdditionalContentModel::*)()>(&AdditionalContentModel::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdditionalContentModel::*)()>(&AdditionalContentModel::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AdditionalContentModel/EntitlementStatus
#include "GlobalNamespace/AdditionalContentModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public AdditionalContentModel/EntitlementStatus Failed
GlobalNamespace::AdditionalContentModel::EntitlementStatus GlobalNamespace::AdditionalContentModel::EntitlementStatus::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::EntitlementStatus::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AdditionalContentModel::EntitlementStatus>("", "AdditionalContentModel/EntitlementStatus", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public AdditionalContentModel/EntitlementStatus Failed
void GlobalNamespace::AdditionalContentModel::EntitlementStatus::_set_Failed(GlobalNamespace::AdditionalContentModel::EntitlementStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::EntitlementStatus::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AdditionalContentModel/EntitlementStatus", "Failed", value));
}
// Autogenerated static field getter
// Get static field: static public AdditionalContentModel/EntitlementStatus Owned
GlobalNamespace::AdditionalContentModel::EntitlementStatus GlobalNamespace::AdditionalContentModel::EntitlementStatus::_get_Owned() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::EntitlementStatus::_get_Owned");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AdditionalContentModel::EntitlementStatus>("", "AdditionalContentModel/EntitlementStatus", "Owned"));
}
// Autogenerated static field setter
// Set static field: static public AdditionalContentModel/EntitlementStatus Owned
void GlobalNamespace::AdditionalContentModel::EntitlementStatus::_set_Owned(GlobalNamespace::AdditionalContentModel::EntitlementStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::EntitlementStatus::_set_Owned");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AdditionalContentModel/EntitlementStatus", "Owned", value));
}
// Autogenerated static field getter
// Get static field: static public AdditionalContentModel/EntitlementStatus NotOwned
GlobalNamespace::AdditionalContentModel::EntitlementStatus GlobalNamespace::AdditionalContentModel::EntitlementStatus::_get_NotOwned() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::EntitlementStatus::_get_NotOwned");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AdditionalContentModel::EntitlementStatus>("", "AdditionalContentModel/EntitlementStatus", "NotOwned"));
}
// Autogenerated static field setter
// Set static field: static public AdditionalContentModel/EntitlementStatus NotOwned
void GlobalNamespace::AdditionalContentModel::EntitlementStatus::_set_NotOwned(GlobalNamespace::AdditionalContentModel::EntitlementStatus value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::EntitlementStatus::_set_NotOwned");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AdditionalContentModel/EntitlementStatus", "NotOwned", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AdditionalContentModel/OpenProductStoreResult
#include "GlobalNamespace/AdditionalContentModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public AdditionalContentModel/OpenProductStoreResult OK
GlobalNamespace::AdditionalContentModel::OpenProductStoreResult GlobalNamespace::AdditionalContentModel::OpenProductStoreResult::_get_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::OpenProductStoreResult::_get_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AdditionalContentModel::OpenProductStoreResult>("", "AdditionalContentModel/OpenProductStoreResult", "OK"));
}
// Autogenerated static field setter
// Set static field: static public AdditionalContentModel/OpenProductStoreResult OK
void GlobalNamespace::AdditionalContentModel::OpenProductStoreResult::_set_OK(GlobalNamespace::AdditionalContentModel::OpenProductStoreResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::OpenProductStoreResult::_set_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AdditionalContentModel/OpenProductStoreResult", "OK", value));
}
// Autogenerated static field getter
// Get static field: static public AdditionalContentModel/OpenProductStoreResult Failed
GlobalNamespace::AdditionalContentModel::OpenProductStoreResult GlobalNamespace::AdditionalContentModel::OpenProductStoreResult::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::OpenProductStoreResult::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AdditionalContentModel::OpenProductStoreResult>("", "AdditionalContentModel/OpenProductStoreResult", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public AdditionalContentModel/OpenProductStoreResult Failed
void GlobalNamespace::AdditionalContentModel::OpenProductStoreResult::_set_Failed(GlobalNamespace::AdditionalContentModel::OpenProductStoreResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::OpenProductStoreResult::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AdditionalContentModel/OpenProductStoreResult", "Failed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AdditionalContentModel/UpdateEntitlementsResult
#include "GlobalNamespace/AdditionalContentModel_UpdateEntitlementsResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public AdditionalContentModel/UpdateEntitlementsResult OK
GlobalNamespace::AdditionalContentModel::UpdateEntitlementsResult GlobalNamespace::AdditionalContentModel::UpdateEntitlementsResult::_get_OK() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::UpdateEntitlementsResult::_get_OK");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AdditionalContentModel::UpdateEntitlementsResult>("", "AdditionalContentModel/UpdateEntitlementsResult", "OK"));
}
// Autogenerated static field setter
// Set static field: static public AdditionalContentModel/UpdateEntitlementsResult OK
void GlobalNamespace::AdditionalContentModel::UpdateEntitlementsResult::_set_OK(GlobalNamespace::AdditionalContentModel::UpdateEntitlementsResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::UpdateEntitlementsResult::_set_OK");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AdditionalContentModel/UpdateEntitlementsResult", "OK", value));
}
// Autogenerated static field getter
// Get static field: static public AdditionalContentModel/UpdateEntitlementsResult Failed
GlobalNamespace::AdditionalContentModel::UpdateEntitlementsResult GlobalNamespace::AdditionalContentModel::UpdateEntitlementsResult::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::UpdateEntitlementsResult::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AdditionalContentModel::UpdateEntitlementsResult>("", "AdditionalContentModel/UpdateEntitlementsResult", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public AdditionalContentModel/UpdateEntitlementsResult Failed
void GlobalNamespace::AdditionalContentModel::UpdateEntitlementsResult::_set_Failed(GlobalNamespace::AdditionalContentModel::UpdateEntitlementsResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::UpdateEntitlementsResult::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AdditionalContentModel/UpdateEntitlementsResult", "Failed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: AdditionalContentModel/IsPackBetterBuyThanLevelResult
#include "GlobalNamespace/AdditionalContentModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public AdditionalContentModel/IsPackBetterBuyThanLevelResult PackIsBetter
GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult::_get_PackIsBetter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult::_get_PackIsBetter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult>("", "AdditionalContentModel/IsPackBetterBuyThanLevelResult", "PackIsBetter"));
}
// Autogenerated static field setter
// Set static field: static public AdditionalContentModel/IsPackBetterBuyThanLevelResult PackIsBetter
void GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult::_set_PackIsBetter(GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult::_set_PackIsBetter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AdditionalContentModel/IsPackBetterBuyThanLevelResult", "PackIsBetter", value));
}
// Autogenerated static field getter
// Get static field: static public AdditionalContentModel/IsPackBetterBuyThanLevelResult LevelIsBetter
GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult::_get_LevelIsBetter() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult::_get_LevelIsBetter");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult>("", "AdditionalContentModel/IsPackBetterBuyThanLevelResult", "LevelIsBetter"));
}
// Autogenerated static field setter
// Set static field: static public AdditionalContentModel/IsPackBetterBuyThanLevelResult LevelIsBetter
void GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult::_set_LevelIsBetter(GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult::_set_LevelIsBetter");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AdditionalContentModel/IsPackBetterBuyThanLevelResult", "LevelIsBetter", value));
}
// Autogenerated static field getter
// Get static field: static public AdditionalContentModel/IsPackBetterBuyThanLevelResult Failed
GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult::_get_Failed() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult::_get_Failed");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult>("", "AdditionalContentModel/IsPackBetterBuyThanLevelResult", "Failed"));
}
// Autogenerated static field setter
// Set static field: static public AdditionalContentModel/IsPackBetterBuyThanLevelResult Failed
void GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult::_set_Failed(GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult value) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::IsPackBetterBuyThanLevelResult::_set_Failed");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("", "AdditionalContentModel/IsPackBetterBuyThanLevelResult", "Failed", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AdditionalContentModel/<GetLevelEntitlementStatusAsync>d__10
#include "GlobalNamespace/AdditionalContentModel_-GetLevelEntitlementStatusAsync-d__10.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AdditionalContentModel/<GetLevelEntitlementStatusAsync>d__10.MoveNext
void GlobalNamespace::AdditionalContentModel::$GetLevelEntitlementStatusAsync$d__10::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::$GetLevelEntitlementStatusAsync$d__10::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: AdditionalContentModel/<GetLevelEntitlementStatusAsync>d__10.SetStateMachine
void GlobalNamespace::AdditionalContentModel::$GetLevelEntitlementStatusAsync$d__10::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::$GetLevelEntitlementStatusAsync$d__10::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: AdditionalContentModel::$GetLevelEntitlementStatusAsync$d__10::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdditionalContentModel::$GetLevelEntitlementStatusAsync$d__10::*)()>(&AdditionalContentModel::$GetLevelEntitlementStatusAsync$d__10::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel::$GetLevelEntitlementStatusAsync$d__10), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdditionalContentModel::$GetLevelEntitlementStatusAsync$d__10::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdditionalContentModel::$GetLevelEntitlementStatusAsync$d__10::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&AdditionalContentModel::$GetLevelEntitlementStatusAsync$d__10::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel::$GetLevelEntitlementStatusAsync$d__10), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AdditionalContentModel/<GetPackEntitlementStatusAsync>d__11
#include "GlobalNamespace/AdditionalContentModel_-GetPackEntitlementStatusAsync-d__11.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AdditionalContentModel/<GetPackEntitlementStatusAsync>d__11.MoveNext
void GlobalNamespace::AdditionalContentModel::$GetPackEntitlementStatusAsync$d__11::MoveNext() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::$GetPackEntitlementStatusAsync$d__11::MoveNext");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
}
// Autogenerated method: AdditionalContentModel/<GetPackEntitlementStatusAsync>d__11.SetStateMachine
void GlobalNamespace::AdditionalContentModel::$GetPackEntitlementStatusAsync$d__11::SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AdditionalContentModel::$GetPackEntitlementStatusAsync$d__11::SetStateMachine");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stateMachine)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
}
// Writing MetadataGetter for method: AdditionalContentModel::$GetPackEntitlementStatusAsync$d__11::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdditionalContentModel::$GetPackEntitlementStatusAsync$d__11::*)()>(&AdditionalContentModel::$GetPackEntitlementStatusAsync$d__11::MoveNext)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel::$GetPackEntitlementStatusAsync$d__11), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AdditionalContentModel::$GetPackEntitlementStatusAsync$d__11::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AdditionalContentModel::$GetPackEntitlementStatusAsync$d__11::*)(System::Runtime::CompilerServices::IAsyncStateMachine*)>(&AdditionalContentModel::$GetPackEntitlementStatusAsync$d__11::SetStateMachine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AdditionalContentModel::$GetPackEntitlementStatusAsync$d__11), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Runtime::CompilerServices::IAsyncStateMachine*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AlwaysOwnedContentContainerSO
#include "GlobalNamespace/AlwaysOwnedContentContainerSO.hpp"
// Including type: AlwaysOwnedContentSO
#include "GlobalNamespace/AlwaysOwnedContentSO.hpp"
// Including type: System.Collections.Generic.HashSet`1
#include "System/Collections/Generic/HashSet_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AlwaysOwnedContentContainerSO.get_alwaysOwnedBeatmapLevelIds
System::Collections::Generic::HashSet_1<::Il2CppString*>* GlobalNamespace::AlwaysOwnedContentContainerSO::get_alwaysOwnedBeatmapLevelIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlwaysOwnedContentContainerSO::get_alwaysOwnedBeatmapLevelIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_alwaysOwnedBeatmapLevelIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::HashSet_1<::Il2CppString*>*, false>(this, ___internal__method);
}
// Autogenerated method: AlwaysOwnedContentContainerSO.get_alwaysOwnedPacksIds
System::Collections::Generic::HashSet_1<::Il2CppString*>* GlobalNamespace::AlwaysOwnedContentContainerSO::get_alwaysOwnedPacksIds() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlwaysOwnedContentContainerSO::get_alwaysOwnedPacksIds");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_alwaysOwnedPacksIds", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::HashSet_1<::Il2CppString*>*, false>(this, ___internal__method);
}
// Autogenerated method: AlwaysOwnedContentContainerSO.InitAlwaysOwnedItems
void GlobalNamespace::AlwaysOwnedContentContainerSO::InitAlwaysOwnedItems() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlwaysOwnedContentContainerSO::InitAlwaysOwnedItems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitAlwaysOwnedItems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: AlwaysOwnedContentContainerSO.OnEnable
void GlobalNamespace::AlwaysOwnedContentContainerSO::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlwaysOwnedContentContainerSO::OnEnable");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AlwaysOwnedContentContainerSO::get_alwaysOwnedBeatmapLevelIds
// Il2CppName: get_alwaysOwnedBeatmapLevelIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::HashSet_1<::Il2CppString*>* (AlwaysOwnedContentContainerSO::*)()>(&AlwaysOwnedContentContainerSO::get_alwaysOwnedBeatmapLevelIds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlwaysOwnedContentContainerSO*), "get_alwaysOwnedBeatmapLevelIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AlwaysOwnedContentContainerSO::get_alwaysOwnedPacksIds
// Il2CppName: get_alwaysOwnedPacksIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::HashSet_1<::Il2CppString*>* (AlwaysOwnedContentContainerSO::*)()>(&AlwaysOwnedContentContainerSO::get_alwaysOwnedPacksIds)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlwaysOwnedContentContainerSO*), "get_alwaysOwnedPacksIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AlwaysOwnedContentContainerSO::InitAlwaysOwnedItems
// Il2CppName: InitAlwaysOwnedItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlwaysOwnedContentContainerSO::*)()>(&AlwaysOwnedContentContainerSO::InitAlwaysOwnedItems)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlwaysOwnedContentContainerSO*), "InitAlwaysOwnedItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AlwaysOwnedContentContainerSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlwaysOwnedContentContainerSO::*)()>(&AlwaysOwnedContentContainerSO::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlwaysOwnedContentContainerSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AlwaysOwnedContentContainerSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlwaysOwnedContentContainerSO::*)()>(&AlwaysOwnedContentContainerSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlwaysOwnedContentContainerSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlwaysOwnedContentContainerSO::*)()>(&AlwaysOwnedContentContainerSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlwaysOwnedContentContainerSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AlwaysOwnedContentSO
#include "GlobalNamespace/AlwaysOwnedContentSO.hpp"
// Including type: BeatmapLevelPackSO
#include "GlobalNamespace/BeatmapLevelPackSO.hpp"
// Including type: BeatmapLevelSO
#include "GlobalNamespace/BeatmapLevelSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: AlwaysOwnedContentSO.get_alwaysOwnedPacks
::Array<GlobalNamespace::BeatmapLevelPackSO*>* GlobalNamespace::AlwaysOwnedContentSO::get_alwaysOwnedPacks() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlwaysOwnedContentSO::get_alwaysOwnedPacks");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_alwaysOwnedPacks", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::BeatmapLevelPackSO*>*, false>(this, ___internal__method);
}
// Autogenerated method: AlwaysOwnedContentSO.get_alwaysOwnedBeatmapLevels
::Array<GlobalNamespace::BeatmapLevelSO*>* GlobalNamespace::AlwaysOwnedContentSO::get_alwaysOwnedBeatmapLevels() {
  static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AlwaysOwnedContentSO::get_alwaysOwnedBeatmapLevels");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_alwaysOwnedBeatmapLevels", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<GlobalNamespace::BeatmapLevelSO*>*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AlwaysOwnedContentSO::get_alwaysOwnedPacks
// Il2CppName: get_alwaysOwnedPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::BeatmapLevelPackSO*>* (AlwaysOwnedContentSO::*)()>(&AlwaysOwnedContentSO::get_alwaysOwnedPacks)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlwaysOwnedContentSO*), "get_alwaysOwnedPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AlwaysOwnedContentSO::get_alwaysOwnedBeatmapLevels
// Il2CppName: get_alwaysOwnedBeatmapLevels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::BeatmapLevelSO*>* (AlwaysOwnedContentSO::*)()>(&AlwaysOwnedContentSO::get_alwaysOwnedBeatmapLevels)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlwaysOwnedContentSO*), "get_alwaysOwnedBeatmapLevels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AlwaysOwnedContentSO::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlwaysOwnedContentSO::*)()>(&AlwaysOwnedContentSO::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlwaysOwnedContentSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AlwaysOwnedContentSO::*)()>(&AlwaysOwnedContentSO::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AlwaysOwnedContentSO*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
