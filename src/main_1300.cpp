// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Constraints
#include "RootMotion/FinalIK/Constraints.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Constraints.IsValid
bool RootMotion::FinalIK::Constraints::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Constraints::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Constraints.Initiate
void RootMotion::FinalIK::Constraints::Initiate(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Constraints::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.Constraints.Update
void RootMotion::FinalIK::Constraints::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Constraints::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Constraints::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Constraints::*)()>(&Constraints::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraints*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Constraints::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Constraints::*)(UnityEngine::Transform*)>(&Constraints::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraints*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: Constraints::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Constraints::*)()>(&Constraints::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraints*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Constraints::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Constraints::*)()>(&Constraints::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraints*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Constraints::*)()>(&Constraints::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Constraints*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Finger
#include "RootMotion/FinalIK/Finger.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Finger.get_initiated
bool RootMotion::FinalIK::Finger::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.set_initiated
void RootMotion::FinalIK::Finger::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Finger.get_IKPosition
UnityEngine::Vector3 RootMotion::FinalIK::Finger::get_IKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::get_IKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.set_IKPosition
void RootMotion::FinalIK::Finger::set_IKPosition(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::set_IKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Finger.get_IKRotation
UnityEngine::Quaternion RootMotion::FinalIK::Finger::get_IKRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::get_IKRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IKRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.set_IKRotation
void RootMotion::FinalIK::Finger::set_IKRotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::set_IKRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IKRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Finger.IsValid
bool RootMotion::FinalIK::Finger::IsValid(::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, errorMessage);
}
// Autogenerated method: RootMotion.FinalIK.Finger.Initiate
void RootMotion::FinalIK::Finger::Initiate(UnityEngine::Transform* hand, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, hand, index);
}
// Autogenerated method: RootMotion.FinalIK.Finger.FixTransforms
void RootMotion::FinalIK::Finger::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.StoreDefaultLocalState
void RootMotion::FinalIK::Finger::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Finger.Update
void RootMotion::FinalIK::Finger::Update(float masterWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(masterWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, masterWeight);
}
// Writing MetadataGetter for method: Finger::get_initiated
// Il2CppName: get_initiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Finger::*)()>(&Finger::get_initiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Finger*), "get_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Finger::set_initiated
// Il2CppName: set_initiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Finger::*)(bool)>(&Finger::set_initiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Finger*), "set_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Finger::get_IKPosition
// Il2CppName: get_IKPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Finger::*)()>(&Finger::get_IKPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Finger*), "get_IKPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Finger::set_IKPosition
// Il2CppName: set_IKPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Finger::*)(UnityEngine::Vector3)>(&Finger::set_IKPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Finger*), "set_IKPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Finger::get_IKRotation
// Il2CppName: get_IKRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (Finger::*)()>(&Finger::get_IKRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Finger*), "get_IKRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Finger::set_IKRotation
// Il2CppName: set_IKRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Finger::*)(UnityEngine::Quaternion)>(&Finger::set_IKRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Finger*), "set_IKRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: Finger::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Finger::*)(::Il2CppString*&)>(&Finger::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Finger*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: Finger::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Finger::*)(UnityEngine::Transform*, int)>(&Finger::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Finger*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: Finger::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Finger::*)()>(&Finger::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Finger*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Finger::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Finger::*)()>(&Finger::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Finger*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Finger::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Finger::*)(float)>(&Finger::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Finger*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Finger::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Finger::*)()>(&Finger::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Finger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Finger::*)()>(&Finger::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Finger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Finger/DOF
#include "RootMotion/FinalIK/Finger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Finger/DOF One
RootMotion::FinalIK::Finger::DOF RootMotion::FinalIK::Finger::DOF::_get_One() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::DOF::_get_One");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Finger::DOF>("RootMotion.FinalIK", "Finger/DOF", "One"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Finger/DOF One
void RootMotion::FinalIK::Finger::DOF::_set_One(RootMotion::FinalIK::Finger::DOF value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::DOF::_set_One");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Finger/DOF", "One", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Finger/DOF Three
RootMotion::FinalIK::Finger::DOF RootMotion::FinalIK::Finger::DOF::_get_Three() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::DOF::_get_Three");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Finger::DOF>("RootMotion.FinalIK", "Finger/DOF", "Three"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Finger/DOF Three
void RootMotion::FinalIK::Finger::DOF::_set_Three(RootMotion::FinalIK::Finger::DOF value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Finger::DOF::_set_Three");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Finger/DOF", "Three", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.FingerRig
#include "RootMotion/FinalIK/FingerRig.hpp"
// Including type: RootMotion.FinalIK.Finger
#include "RootMotion/FinalIK/Finger.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FingerRig.get_initiated
bool RootMotion::FinalIK::FingerRig::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.set_initiated
void RootMotion::FinalIK::FingerRig::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.IsValid
bool RootMotion::FinalIK::FingerRig::IsValid(::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, errorMessage);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.AutoDetect
void RootMotion::FinalIK::FingerRig::AutoDetect() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::AutoDetect");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AutoDetect", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.AddFinger
void RootMotion::FinalIK::FingerRig::AddFinger(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, UnityEngine::Transform* tip, UnityEngine::Transform* target) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::AddFinger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddFinger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(tip), ::il2cpp_utils::ExtractType(target)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone1, bone2, bone3, tip, target);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.RemoveFinger
void RootMotion::FinalIK::FingerRig::RemoveFinger(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::RemoveFinger");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveFinger", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.AddChildrenRecursive
void RootMotion::FinalIK::FingerRig::AddChildrenRecursive(UnityEngine::Transform* parent, ::Array<UnityEngine::Transform*>*& array) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::AddChildrenRecursive");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddChildrenRecursive", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(parent), ::il2cpp_utils::ExtractType(array)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, parent, array);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.UpdateFingerSolvers
void RootMotion::FinalIK::FingerRig::UpdateFingerSolvers() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::UpdateFingerSolvers");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateFingerSolvers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.FixFingerTransforms
void RootMotion::FinalIK::FingerRig::FixFingerTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::FixFingerTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixFingerTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.StoreDefaultLocalState
void RootMotion::FinalIK::FingerRig::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.InitiateSolver
void RootMotion::FinalIK::FingerRig::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.UpdateSolver
void RootMotion::FinalIK::FingerRig::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FingerRig.FixTransforms
void RootMotion::FinalIK::FingerRig::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FingerRig::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FingerRig::get_initiated
// Il2CppName: get_initiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FingerRig::*)()>(&FingerRig::get_initiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FingerRig*), "get_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FingerRig::set_initiated
// Il2CppName: set_initiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)(bool)>(&FingerRig::set_initiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FingerRig*), "set_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: FingerRig::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FingerRig::*)(::Il2CppString*&)>(&FingerRig::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FingerRig*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: FingerRig::AutoDetect
// Il2CppName: AutoDetect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::AutoDetect)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FingerRig*), "AutoDetect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FingerRig::AddFinger
// Il2CppName: AddFinger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)(UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*)>(&FingerRig::AddFinger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FingerRig*), "AddFinger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: FingerRig::RemoveFinger
// Il2CppName: RemoveFinger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)(int)>(&FingerRig::RemoveFinger)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FingerRig*), "RemoveFinger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FingerRig::AddChildrenRecursive
// Il2CppName: AddChildrenRecursive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)(UnityEngine::Transform*, ::Array<UnityEngine::Transform*>*&)>(&FingerRig::AddChildrenRecursive)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FingerRig*), "AddChildrenRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*&>()});
  }
};
// Writing MetadataGetter for method: FingerRig::UpdateFingerSolvers
// Il2CppName: UpdateFingerSolvers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::UpdateFingerSolvers)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FingerRig*), "UpdateFingerSolvers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FingerRig::FixFingerTransforms
// Il2CppName: FixFingerTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::FixFingerTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FingerRig*), "FixFingerTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FingerRig::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FingerRig*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FingerRig::InitiateSolver
// Il2CppName: InitiateSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::InitiateSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FingerRig*), "InitiateSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FingerRig::UpdateSolver
// Il2CppName: UpdateSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::UpdateSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FingerRig*), "UpdateSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FingerRig::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FingerRig*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FingerRig::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FingerRig*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FingerRig::*)()>(&FingerRig::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FingerRig*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Grounder
#include "RootMotion/FinalIK/Grounder.hpp"
// Including type: RootMotion.FinalIK.Grounder/GrounderDelegate
#include "RootMotion/FinalIK/Grounder_GrounderDelegate.hpp"
// Including type: RootMotion.FinalIK.Grounding/Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounder.ResetPosition
void RootMotion::FinalIK::Grounder::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.get_initiated
bool RootMotion::FinalIK::Grounder::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.set_initiated
void RootMotion::FinalIK::Grounder::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.GetSpineOffsetTarget
UnityEngine::Vector3 RootMotion::FinalIK::Grounder::GetSpineOffsetTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GetSpineOffsetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpineOffsetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.LogWarning
void RootMotion::FinalIK::Grounder::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.GetLegSpineBendVector
UnityEngine::Vector3 RootMotion::FinalIK::Grounder::GetLegSpineBendVector(RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GetLegSpineBendVector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLegSpineBendVector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leg)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, leg);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.GetLegSpineTangent
UnityEngine::Vector3 RootMotion::FinalIK::Grounder::GetLegSpineTangent(RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GetLegSpineTangent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLegSpineTangent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(leg)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, leg);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.OpenUserManual
void RootMotion::FinalIK::Grounder::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder.OpenScriptReference
void RootMotion::FinalIK::Grounder::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Grounder::ResetPosition
// Il2CppName: ResetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounder::*)()>(&Grounder::ResetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder*), "ResetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounder::get_initiated
// Il2CppName: get_initiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Grounder::*)()>(&Grounder::get_initiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder*), "get_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounder::set_initiated
// Il2CppName: set_initiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounder::*)(bool)>(&Grounder::set_initiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder*), "set_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Grounder::GetSpineOffsetTarget
// Il2CppName: GetSpineOffsetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Grounder::*)()>(&Grounder::GetSpineOffsetTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder*), "GetSpineOffsetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounder::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounder::*)(::Il2CppString*)>(&Grounder::LogWarning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Grounder::GetLegSpineBendVector
// Il2CppName: GetLegSpineBendVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Grounder::*)(RootMotion::FinalIK::Grounding::Leg*)>(&Grounder::GetLegSpineBendVector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder*), "GetLegSpineBendVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::Grounding::Leg*>()});
  }
};
// Writing MetadataGetter for method: Grounder::GetLegSpineTangent
// Il2CppName: GetLegSpineTangent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Grounder::*)(RootMotion::FinalIK::Grounding::Leg*)>(&Grounder::GetLegSpineTangent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder*), "GetLegSpineTangent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::Grounding::Leg*>()});
  }
};
// Writing MetadataGetter for method: Grounder::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounder::*)()>(&Grounder::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounder::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounder::*)()>(&Grounder::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounder::*)()>(&Grounder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounder::*)()>(&Grounder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Grounder/GrounderDelegate
#include "RootMotion/FinalIK/Grounder_GrounderDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounder/GrounderDelegate.Invoke
void RootMotion::FinalIK::Grounder::GrounderDelegate::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GrounderDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounder/GrounderDelegate.BeginInvoke
System::IAsyncResult* RootMotion::FinalIK::Grounder::GrounderDelegate::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GrounderDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: RootMotion.FinalIK.Grounder/GrounderDelegate.EndInvoke
void RootMotion::FinalIK::Grounder::GrounderDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounder::GrounderDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: Grounder::GrounderDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounder::GrounderDelegate::*)(::Il2CppObject*, System::IntPtr)>(&Grounder::GrounderDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder::GrounderDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounder::GrounderDelegate::*)(::Il2CppObject*, System::IntPtr)>(&Grounder::GrounderDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder::GrounderDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: Grounder::GrounderDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounder::GrounderDelegate::*)()>(&Grounder::GrounderDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder::GrounderDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounder::GrounderDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (Grounder::GrounderDelegate::*)(System::AsyncCallback*, ::Il2CppObject*)>(&Grounder::GrounderDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder::GrounderDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: Grounder::GrounderDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounder::GrounderDelegate::*)(System::IAsyncResult*)>(&Grounder::GrounderDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounder::GrounderDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderBipedIK
#include "RootMotion/FinalIK/GrounderBipedIK.hpp"
// Including type: RootMotion.FinalIK.BipedIK
#include "RootMotion/FinalIK/BipedIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderBipedIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.Update
void RootMotion::FinalIK::GrounderBipedIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.Initiate
void RootMotion::FinalIK::GrounderBipedIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnDisable
void RootMotion::FinalIK::GrounderBipedIK::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderBipedIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.SetLegIK
void RootMotion::FinalIK::GrounderBipedIK::SetLegIK(RootMotion::FinalIK::IKSolverLimb* limb, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(limb), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, limb, index);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderBipedIK::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OnDestroy
void RootMotion::FinalIK::GrounderBipedIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OpenUserManual
void RootMotion::FinalIK::GrounderBipedIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.OpenScriptReference
void RootMotion::FinalIK::GrounderBipedIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderBipedIK.ResetPosition
void RootMotion::FinalIK::GrounderBipedIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderBipedIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GrounderBipedIK::IsReadyToInitiate
// Il2CppName: IsReadyToInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GrounderBipedIK::*)()>(&GrounderBipedIK::IsReadyToInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderBipedIK*), "IsReadyToInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderBipedIK::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderBipedIK::*)()>(&GrounderBipedIK::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderBipedIK*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderBipedIK::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderBipedIK::*)()>(&GrounderBipedIK::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderBipedIK*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderBipedIK::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderBipedIK::*)()>(&GrounderBipedIK::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderBipedIK*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderBipedIK::OnSolverUpdate
// Il2CppName: OnSolverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderBipedIK::*)()>(&GrounderBipedIK::OnSolverUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderBipedIK*), "OnSolverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderBipedIK::SetLegIK
// Il2CppName: SetLegIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderBipedIK::*)(RootMotion::FinalIK::IKSolverLimb*, int)>(&GrounderBipedIK::SetLegIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderBipedIK*), "SetLegIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverLimb*>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GrounderBipedIK::OnPostSolverUpdate
// Il2CppName: OnPostSolverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderBipedIK::*)()>(&GrounderBipedIK::OnPostSolverUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderBipedIK*), "OnPostSolverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderBipedIK::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderBipedIK::*)()>(&GrounderBipedIK::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderBipedIK*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderBipedIK::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderBipedIK::*)()>(&GrounderBipedIK::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderBipedIK*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderBipedIK::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderBipedIK::*)()>(&GrounderBipedIK::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderBipedIK*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderBipedIK::ResetPosition
// Il2CppName: ResetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderBipedIK::*)()>(&GrounderBipedIK::ResetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderBipedIK*), "ResetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderBipedIK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderBipedIK::*)()>(&GrounderBipedIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderBipedIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderBipedIK::*)()>(&GrounderBipedIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderBipedIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderFBBIK
#include "RootMotion/FinalIK/GrounderFBBIK.hpp"
// Including type: RootMotion.FinalIK.GrounderFBBIK/SpineEffector
#include "RootMotion/FinalIK/GrounderFBBIK_SpineEffector.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: RootMotion.FinalIK.Grounding/Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OpenTutorial
void RootMotion::FinalIK::GrounderFBBIK::OpenTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OpenTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderFBBIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.Update
void RootMotion::FinalIK::GrounderFBBIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.FixedUpdate
void RootMotion::FinalIK::GrounderFBBIK::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.LateUpdate
void RootMotion::FinalIK::GrounderFBBIK::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.Initiate
void RootMotion::FinalIK::GrounderFBBIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderFBBIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.SetLegIK
void RootMotion::FinalIK::GrounderFBBIK::SetLegIK(RootMotion::FinalIK::IKEffector* effector, RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(leg)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effector, leg);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OnDrawGizmosSelected
void RootMotion::FinalIK::GrounderFBBIK::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OnDestroy
void RootMotion::FinalIK::GrounderFBBIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OpenUserManual
void RootMotion::FinalIK::GrounderFBBIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.OpenScriptReference
void RootMotion::FinalIK::GrounderFBBIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderFBBIK.ResetPosition
void RootMotion::FinalIK::GrounderFBBIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderFBBIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GrounderFBBIK::OpenTutorial
// Il2CppName: OpenTutorial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::*)()>(&GrounderFBBIK::OpenTutorial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK*), "OpenTutorial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderFBBIK::IsReadyToInitiate
// Il2CppName: IsReadyToInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GrounderFBBIK::*)()>(&GrounderFBBIK::IsReadyToInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK*), "IsReadyToInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderFBBIK::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::*)()>(&GrounderFBBIK::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderFBBIK::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::*)()>(&GrounderFBBIK::FixedUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderFBBIK::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::*)()>(&GrounderFBBIK::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderFBBIK::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::*)()>(&GrounderFBBIK::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderFBBIK::OnSolverUpdate
// Il2CppName: OnSolverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::*)()>(&GrounderFBBIK::OnSolverUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK*), "OnSolverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderFBBIK::SetLegIK
// Il2CppName: SetLegIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::*)(RootMotion::FinalIK::IKEffector*, RootMotion::FinalIK::Grounding::Leg*)>(&GrounderFBBIK::SetLegIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK*), "SetLegIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKEffector*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::Grounding::Leg*>()});
  }
};
// Writing MetadataGetter for method: GrounderFBBIK::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::*)()>(&GrounderFBBIK::OnDrawGizmosSelected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderFBBIK::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::*)()>(&GrounderFBBIK::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderFBBIK::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::*)()>(&GrounderFBBIK::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderFBBIK::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::*)()>(&GrounderFBBIK::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderFBBIK::ResetPosition
// Il2CppName: ResetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::*)()>(&GrounderFBBIK::ResetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK*), "ResetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderFBBIK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::*)()>(&GrounderFBBIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::*)()>(&GrounderFBBIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.GrounderFBBIK/SpineEffector
#include "RootMotion/FinalIK/GrounderFBBIK_SpineEffector.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GrounderFBBIK::SpineEffector::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::SpineEffector::*)(RootMotion::FinalIK::FullBodyBipedEffector, float, float)>(&GrounderFBBIK::SpineEffector::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK::SpineEffector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::SpineEffector::*)(RootMotion::FinalIK::FullBodyBipedEffector, float, float)>(&GrounderFBBIK::SpineEffector::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK::SpineEffector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GrounderFBBIK::SpineEffector::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::SpineEffector::*)()>(&GrounderFBBIK::SpineEffector::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK::SpineEffector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderFBBIK::SpineEffector::*)()>(&GrounderFBBIK::SpineEffector::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderFBBIK::SpineEffector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderIK
#include "RootMotion/FinalIK/GrounderIK.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GrounderIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnDisable
void RootMotion::FinalIK::GrounderIK::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.Update
void RootMotion::FinalIK::GrounderIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.Initiate
void RootMotion::FinalIK::GrounderIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.SetLegIK
void RootMotion::FinalIK::GrounderIK::SetLegIK(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderIK::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OnDestroy
void RootMotion::FinalIK::GrounderIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OpenUserManual
void RootMotion::FinalIK::GrounderIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.OpenScriptReference
void RootMotion::FinalIK::GrounderIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderIK.ResetPosition
void RootMotion::FinalIK::GrounderIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GrounderIK::IsReadyToInitiate
// Il2CppName: IsReadyToInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GrounderIK::*)()>(&GrounderIK::IsReadyToInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderIK*), "IsReadyToInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderIK::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderIK::*)()>(&GrounderIK::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderIK*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderIK::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderIK::*)()>(&GrounderIK::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderIK*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderIK::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderIK::*)()>(&GrounderIK::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderIK*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderIK::OnSolverUpdate
// Il2CppName: OnSolverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderIK::*)()>(&GrounderIK::OnSolverUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderIK*), "OnSolverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderIK::SetLegIK
// Il2CppName: SetLegIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderIK::*)(int)>(&GrounderIK::SetLegIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderIK*), "SetLegIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GrounderIK::OnPostSolverUpdate
// Il2CppName: OnPostSolverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderIK::*)()>(&GrounderIK::OnPostSolverUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderIK*), "OnPostSolverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderIK::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderIK::*)()>(&GrounderIK::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderIK*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderIK::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderIK::*)()>(&GrounderIK::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderIK*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderIK::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderIK::*)()>(&GrounderIK::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderIK*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderIK::ResetPosition
// Il2CppName: ResetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderIK::*)()>(&GrounderIK::ResetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderIK*), "ResetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderIK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderIK::*)()>(&GrounderIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderIK::*)()>(&GrounderIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderQuadruped
#include "RootMotion/FinalIK/GrounderQuadruped.hpp"
// Including type: UnityEngine.Rigidbody
#include "UnityEngine/Rigidbody.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.IsReadyToInitiateLegs
bool RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiateLegs(::Array<RootMotion::FinalIK::IK*>* ikComponents) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::IsReadyToInitiateLegs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiateLegs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ikComponents)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, ikComponents);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnDisable
void RootMotion::FinalIK::GrounderQuadruped::OnDisable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OnDisable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDisable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.Update
void RootMotion::FinalIK::GrounderQuadruped::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.Initiate
void RootMotion::FinalIK::GrounderQuadruped::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.InitiateFeet
::Array<UnityEngine::Transform*>* RootMotion::FinalIK::GrounderQuadruped::InitiateFeet(::Array<RootMotion::FinalIK::IK*>* ikComponents, ::Array<RootMotion::FinalIK::GrounderQuadruped::Foot>*& f, int indexOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::InitiateFeet");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateFeet", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ikComponents), ::il2cpp_utils::ExtractType(f), ::il2cpp_utils::ExtractType(indexOffset)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Transform*>*, false>(this, ___internal__method, ikComponents, f, indexOffset);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.LateUpdate
void RootMotion::FinalIK::GrounderQuadruped::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.RootRotation
void RootMotion::FinalIK::GrounderQuadruped::RootRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::RootRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RootRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnSolverUpdate
void RootMotion::FinalIK::GrounderQuadruped::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.UpdateForefeetRoot
void RootMotion::FinalIK::GrounderQuadruped::UpdateForefeetRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::UpdateForefeetRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateForefeetRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.SetFootIK
void RootMotion::FinalIK::GrounderQuadruped::SetFootIK(RootMotion::FinalIK::GrounderQuadruped::Foot foot, float maxOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::SetFootIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFootIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(foot), ::il2cpp_utils::ExtractType(maxOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, foot, maxOffset);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderQuadruped::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OnDestroy
void RootMotion::FinalIK::GrounderQuadruped::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.DestroyLegs
void RootMotion::FinalIK::GrounderQuadruped::DestroyLegs(::Array<RootMotion::FinalIK::IK*>* ikComponents) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::DestroyLegs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DestroyLegs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(ikComponents)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, ikComponents);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OpenUserManual
void RootMotion::FinalIK::GrounderQuadruped::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.OpenScriptReference
void RootMotion::FinalIK::GrounderQuadruped::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderQuadruped.ResetPosition
void RootMotion::FinalIK::GrounderQuadruped::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderQuadruped::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GrounderQuadruped::IsReadyToInitiate
// Il2CppName: IsReadyToInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GrounderQuadruped::*)()>(&GrounderQuadruped::IsReadyToInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "IsReadyToInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::IsReadyToInitiateLegs
// Il2CppName: IsReadyToInitiateLegs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GrounderQuadruped::*)(::Array<RootMotion::FinalIK::IK*>*)>(&GrounderQuadruped::IsReadyToInitiateLegs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "IsReadyToInitiateLegs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IK*>*>()});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)()>(&GrounderQuadruped::OnDisable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)()>(&GrounderQuadruped::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)()>(&GrounderQuadruped::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::InitiateFeet
// Il2CppName: InitiateFeet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Transform*>* (GrounderQuadruped::*)(::Array<RootMotion::FinalIK::IK*>*, ::Array<RootMotion::FinalIK::GrounderQuadruped::Foot>*&, int)>(&GrounderQuadruped::InitiateFeet)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "InitiateFeet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IK*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::GrounderQuadruped::Foot>*&>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)()>(&GrounderQuadruped::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::RootRotation
// Il2CppName: RootRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)()>(&GrounderQuadruped::RootRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "RootRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::OnSolverUpdate
// Il2CppName: OnSolverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)()>(&GrounderQuadruped::OnSolverUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "OnSolverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::UpdateForefeetRoot
// Il2CppName: UpdateForefeetRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)()>(&GrounderQuadruped::UpdateForefeetRoot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "UpdateForefeetRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::SetFootIK
// Il2CppName: SetFootIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)(RootMotion::FinalIK::GrounderQuadruped::Foot, float)>(&GrounderQuadruped::SetFootIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "SetFootIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::GrounderQuadruped::Foot>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::OnPostSolverUpdate
// Il2CppName: OnPostSolverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)()>(&GrounderQuadruped::OnPostSolverUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "OnPostSolverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)()>(&GrounderQuadruped::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::DestroyLegs
// Il2CppName: DestroyLegs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)(::Array<RootMotion::FinalIK::IK*>*)>(&GrounderQuadruped::DestroyLegs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "DestroyLegs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IK*>*>()});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)()>(&GrounderQuadruped::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)()>(&GrounderQuadruped::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::ResetPosition
// Il2CppName: ResetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)()>(&GrounderQuadruped::ResetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), "ResetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderQuadruped::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)()>(&GrounderQuadruped::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::*)()>(&GrounderQuadruped::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.GrounderQuadruped/Foot
#include "RootMotion/FinalIK/GrounderQuadruped.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.Grounding/Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: GrounderQuadruped::Foot::Foot
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::Foot::*)(RootMotion::FinalIK::IKSolver*, UnityEngine::Transform*)>(&GrounderQuadruped::Foot::Foot<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped::Foot), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolver*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderQuadruped::Foot::*)(RootMotion::FinalIK::IKSolver*, UnityEngine::Transform*)>(&GrounderQuadruped::Foot::Foot<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderQuadruped::Foot), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolver*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GrounderVRIK
#include "RootMotion/FinalIK/GrounderVRIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/PositionOffset
#include "RootMotion/FinalIK/IKSolverVR_PositionOffset.hpp"
// Including type: RootMotion.FinalIK.Grounding/Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OpenTutorial
void RootMotion::FinalIK::GrounderVRIK::OpenTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OpenTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.IsReadyToInitiate
bool RootMotion::FinalIK::GrounderVRIK::IsReadyToInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::IsReadyToInitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsReadyToInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.Update
void RootMotion::FinalIK::GrounderVRIK::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.Initiate
void RootMotion::FinalIK::GrounderVRIK::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnSolverUpdate
void RootMotion::FinalIK::GrounderVRIK::OnSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OnSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.SetLegIK
void RootMotion::FinalIK::GrounderVRIK::SetLegIK(RootMotion::FinalIK::IKSolverVR::PositionOffset positionOffset, UnityEngine::Transform* bone, RootMotion::FinalIK::Grounding::Leg* leg) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::SetLegIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLegIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positionOffset), ::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(leg)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positionOffset, bone, leg);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnPostSolverUpdate
void RootMotion::FinalIK::GrounderVRIK::OnPostSolverUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OnPostSolverUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolverUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnDrawGizmosSelected
void RootMotion::FinalIK::GrounderVRIK::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OnDestroy
void RootMotion::FinalIK::GrounderVRIK::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OpenUserManual
void RootMotion::FinalIK::GrounderVRIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.OpenScriptReference
void RootMotion::FinalIK::GrounderVRIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.GrounderVRIK.ResetPosition
void RootMotion::FinalIK::GrounderVRIK::ResetPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GrounderVRIK::ResetPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: GrounderVRIK::OpenTutorial
// Il2CppName: OpenTutorial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderVRIK::*)()>(&GrounderVRIK::OpenTutorial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderVRIK*), "OpenTutorial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderVRIK::IsReadyToInitiate
// Il2CppName: IsReadyToInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GrounderVRIK::*)()>(&GrounderVRIK::IsReadyToInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderVRIK*), "IsReadyToInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderVRIK::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderVRIK::*)()>(&GrounderVRIK::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderVRIK*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderVRIK::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderVRIK::*)()>(&GrounderVRIK::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderVRIK*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderVRIK::OnSolverUpdate
// Il2CppName: OnSolverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderVRIK::*)()>(&GrounderVRIK::OnSolverUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderVRIK*), "OnSolverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderVRIK::SetLegIK
// Il2CppName: SetLegIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderVRIK::*)(RootMotion::FinalIK::IKSolverVR::PositionOffset, UnityEngine::Transform*, RootMotion::FinalIK::Grounding::Leg*)>(&GrounderVRIK::SetLegIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderVRIK*), "SetLegIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::PositionOffset>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::Grounding::Leg*>()});
  }
};
// Writing MetadataGetter for method: GrounderVRIK::OnPostSolverUpdate
// Il2CppName: OnPostSolverUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderVRIK::*)()>(&GrounderVRIK::OnPostSolverUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderVRIK*), "OnPostSolverUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderVRIK::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderVRIK::*)()>(&GrounderVRIK::OnDrawGizmosSelected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderVRIK*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderVRIK::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderVRIK::*)()>(&GrounderVRIK::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderVRIK*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderVRIK::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderVRIK::*)()>(&GrounderVRIK::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderVRIK*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderVRIK::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderVRIK::*)()>(&GrounderVRIK::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderVRIK*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderVRIK::ResetPosition
// Il2CppName: ResetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderVRIK::*)()>(&GrounderVRIK::ResetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderVRIK*), "ResetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GrounderVRIK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderVRIK::*)()>(&GrounderVRIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderVRIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GrounderVRIK::*)()>(&GrounderVRIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GrounderVRIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Grounding
#include "RootMotion/FinalIK/Grounding.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.Grounding/Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
// Including type: RootMotion.FinalIK.Grounding/Pelvis
#include "RootMotion/FinalIK/Grounding_Pelvis.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounding.get_legs
::Array<RootMotion::FinalIK::Grounding::Leg*>* RootMotion::FinalIK::Grounding::get_legs() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_legs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_legs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::Grounding::Leg*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_legs
void RootMotion::FinalIK::Grounding::set_legs(::Array<RootMotion::FinalIK::Grounding::Leg*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::set_legs");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_legs", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_pelvis
RootMotion::FinalIK::Grounding::Pelvis* RootMotion::FinalIK::Grounding::get_pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_pelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::Grounding::Pelvis*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_pelvis
void RootMotion::FinalIK::Grounding::set_pelvis(RootMotion::FinalIK::Grounding::Pelvis* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::set_pelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_isGrounded
bool RootMotion::FinalIK::Grounding::get_isGrounded() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_isGrounded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isGrounded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_isGrounded
void RootMotion::FinalIK::Grounding::set_isGrounded(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::set_isGrounded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isGrounded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_root
UnityEngine::Transform* RootMotion::FinalIK::Grounding::get_root() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_root");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_root", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_root
void RootMotion::FinalIK::Grounding::set_root(UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::set_root");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_root", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_rootHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::get_rootHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_rootHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.set_rootHit
void RootMotion::FinalIK::Grounding::set_rootHit(UnityEngine::RaycastHit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::set_rootHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rootHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_rootGrounded
bool RootMotion::FinalIK::Grounding::get_rootGrounded() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_rootGrounded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootGrounded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetRootHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::GetRootHit(float maxDistanceMlp) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::GetRootHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRootHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(maxDistanceMlp)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method, maxDistanceMlp);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.IsValid
bool RootMotion::FinalIK::Grounding::IsValid(::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, errorMessage);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Initiate
void RootMotion::FinalIK::Grounding::Initiate(UnityEngine::Transform* root, ::Array<UnityEngine::Transform*>* feet) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(feet)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, root, feet);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Update
void RootMotion::FinalIK::Grounding::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetLegsPlaneNormal
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::GetLegsPlaneNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::GetLegsPlaneNormal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLegsPlaneNormal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Reset
void RootMotion::FinalIK::Grounding::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.LogWarning
void RootMotion::FinalIK::Grounding::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_up
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::get_up() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_up");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_up", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetVerticalOffset
float RootMotion::FinalIK::Grounding::GetVerticalOffset(UnityEngine::Vector3 p1, UnityEngine::Vector3 p2) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::GetVerticalOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetVerticalOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p1), ::il2cpp_utils::ExtractType(p2)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, p1, p2);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.Flatten
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Flatten(UnityEngine::Vector3 v) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Flatten");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Flatten", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, v);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.get_useRootRotation
bool RootMotion::FinalIK::Grounding::get_useRootRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::get_useRootRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_useRootRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding.GetFootCenterOffset
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::GetFootCenterOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::GetFootCenterOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetFootCenterOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Grounding::get_legs
// Il2CppName: get_legs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<RootMotion::FinalIK::Grounding::Leg*>* (Grounding::*)()>(&Grounding::get_legs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "get_legs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::set_legs
// Il2CppName: set_legs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::*)(::Array<RootMotion::FinalIK::Grounding::Leg*>*)>(&Grounding::set_legs)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "set_legs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::Grounding::Leg*>*>()});
  }
};
// Writing MetadataGetter for method: Grounding::get_pelvis
// Il2CppName: get_pelvis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::Grounding::Pelvis* (Grounding::*)()>(&Grounding::get_pelvis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "get_pelvis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::set_pelvis
// Il2CppName: set_pelvis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::*)(RootMotion::FinalIK::Grounding::Pelvis*)>(&Grounding::set_pelvis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "set_pelvis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::Grounding::Pelvis*>()});
  }
};
// Writing MetadataGetter for method: Grounding::get_isGrounded
// Il2CppName: get_isGrounded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Grounding::*)()>(&Grounding::get_isGrounded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "get_isGrounded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::set_isGrounded
// Il2CppName: set_isGrounded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::*)(bool)>(&Grounding::set_isGrounded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "set_isGrounded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Grounding::get_root
// Il2CppName: get_root
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (Grounding::*)()>(&Grounding::get_root)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "get_root", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::set_root
// Il2CppName: set_root
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::*)(UnityEngine::Transform*)>(&Grounding::set_root)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "set_root", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: Grounding::get_rootHit
// Il2CppName: get_rootHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RaycastHit (Grounding::*)()>(&Grounding::get_rootHit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "get_rootHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::set_rootHit
// Il2CppName: set_rootHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::*)(UnityEngine::RaycastHit)>(&Grounding::set_rootHit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "set_rootHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RaycastHit>()});
  }
};
// Writing MetadataGetter for method: Grounding::get_rootGrounded
// Il2CppName: get_rootGrounded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Grounding::*)()>(&Grounding::get_rootGrounded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "get_rootGrounded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::GetRootHit
// Il2CppName: GetRootHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RaycastHit (Grounding::*)(float)>(&Grounding::GetRootHit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "GetRootHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Grounding::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Grounding::*)(::Il2CppString*&)>(&Grounding::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: Grounding::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::*)(UnityEngine::Transform*, ::Array<UnityEngine::Transform*>*)>(&Grounding::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*>()});
  }
};
// Writing MetadataGetter for method: Grounding::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::*)()>(&Grounding::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::GetLegsPlaneNormal
// Il2CppName: GetLegsPlaneNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Grounding::*)()>(&Grounding::GetLegsPlaneNormal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "GetLegsPlaneNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::*)()>(&Grounding::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::*)(::Il2CppString*)>(&Grounding::LogWarning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: Grounding::get_up
// Il2CppName: get_up
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Grounding::*)()>(&Grounding::get_up)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "get_up", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::GetVerticalOffset
// Il2CppName: GetVerticalOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Grounding::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Grounding::GetVerticalOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "GetVerticalOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Grounding::Flatten
// Il2CppName: Flatten
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Grounding::*)(UnityEngine::Vector3)>(&Grounding::Flatten)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "Flatten", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Grounding::get_useRootRotation
// Il2CppName: get_useRootRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Grounding::*)()>(&Grounding::get_useRootRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "get_useRootRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::GetFootCenterOffset
// Il2CppName: GetFootCenterOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Grounding::*)()>(&Grounding::GetFootCenterOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), "GetFootCenterOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::*)()>(&Grounding::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::*)()>(&Grounding::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Grounding/Quality
#include "RootMotion/FinalIK/Grounding.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Grounding/Quality Fastest
RootMotion::FinalIK::Grounding::Quality RootMotion::FinalIK::Grounding::Quality::_get_Fastest() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_get_Fastest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Grounding::Quality>("RootMotion.FinalIK", "Grounding/Quality", "Fastest"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Grounding/Quality Fastest
void RootMotion::FinalIK::Grounding::Quality::_set_Fastest(RootMotion::FinalIK::Grounding::Quality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_set_Fastest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Grounding/Quality", "Fastest", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Grounding/Quality Simple
RootMotion::FinalIK::Grounding::Quality RootMotion::FinalIK::Grounding::Quality::_get_Simple() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_get_Simple");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Grounding::Quality>("RootMotion.FinalIK", "Grounding/Quality", "Simple"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Grounding/Quality Simple
void RootMotion::FinalIK::Grounding::Quality::_set_Simple(RootMotion::FinalIK::Grounding::Quality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_set_Simple");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Grounding/Quality", "Simple", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.Grounding/Quality Best
RootMotion::FinalIK::Grounding::Quality RootMotion::FinalIK::Grounding::Quality::_get_Best() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_get_Best");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::Grounding::Quality>("RootMotion.FinalIK", "Grounding/Quality", "Best"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.Grounding/Quality Best
void RootMotion::FinalIK::Grounding::Quality::_set_Best(RootMotion::FinalIK::Grounding::Quality value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Quality::_set_Best");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "Grounding/Quality", "Best", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Grounding/Leg
#include "RootMotion/FinalIK/Grounding_Leg.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_isGrounded
bool RootMotion::FinalIK::Grounding::Leg::get_isGrounded() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_isGrounded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isGrounded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_isGrounded
void RootMotion::FinalIK::Grounding::Leg::set_isGrounded(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_isGrounded");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isGrounded", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_IKPosition
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Leg::get_IKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_IKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_IKPosition
void RootMotion::FinalIK::Grounding::Leg::set_IKPosition(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_IKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_initiated
bool RootMotion::FinalIK::Grounding::Leg::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_initiated
void RootMotion::FinalIK::Grounding::Leg::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_heightFromGround
float RootMotion::FinalIK::Grounding::Leg::get_heightFromGround() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_heightFromGround");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_heightFromGround", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_heightFromGround
void RootMotion::FinalIK::Grounding::Leg::set_heightFromGround(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_heightFromGround");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_heightFromGround", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_velocity
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Leg::get_velocity() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_velocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_velocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_velocity
void RootMotion::FinalIK::Grounding::Leg::set_velocity(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_velocity");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_velocity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_transform
UnityEngine::Transform* RootMotion::FinalIK::Grounding::Leg::get_transform() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_transform
void RootMotion::FinalIK::Grounding::Leg::set_transform(UnityEngine::Transform* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_transform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_transform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_IKOffset
float RootMotion::FinalIK::Grounding::Leg::get_IKOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_IKOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IKOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_IKOffset
void RootMotion::FinalIK::Grounding::Leg::set_IKOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_IKOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IKOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_heelHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::get_heelHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_heelHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_heelHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_heelHit
void RootMotion::FinalIK::Grounding::Leg::set_heelHit(UnityEngine::RaycastHit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_heelHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_heelHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_capsuleHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::get_capsuleHit() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_capsuleHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_capsuleHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.set_capsuleHit
void RootMotion::FinalIK::Grounding::Leg::set_capsuleHit(UnityEngine::RaycastHit value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::set_capsuleHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_capsuleHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_GetHitPoint
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::get_GetHitPoint() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_GetHitPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_GetHitPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.SetFootPosition
void RootMotion::FinalIK::Grounding::Leg::SetFootPosition(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::SetFootPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFootPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.Initiate
void RootMotion::FinalIK::Grounding::Leg::Initiate(RootMotion::FinalIK::Grounding* grounding, UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(grounding), ::il2cpp_utils::ExtractType(transform)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, grounding, transform);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.OnEnable
void RootMotion::FinalIK::Grounding::Leg::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.Reset
void RootMotion::FinalIK::Grounding::Leg::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.Process
void RootMotion::FinalIK::Grounding::Leg::Process() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::Process");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_stepHeightFromGround
float RootMotion::FinalIK::Grounding::Leg::get_stepHeightFromGround() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_stepHeightFromGround");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stepHeightFromGround", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.GetCapsuleHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::GetCapsuleHit(UnityEngine::Vector3 offsetFromHeel) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::GetCapsuleHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCapsuleHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offsetFromHeel)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method, offsetFromHeel);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.GetRaycastHit
UnityEngine::RaycastHit RootMotion::FinalIK::Grounding::Leg::GetRaycastHit(UnityEngine::Vector3 offsetFromHeel) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::GetRaycastHit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRaycastHit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offsetFromHeel)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::RaycastHit, false>(this, ___internal__method, offsetFromHeel);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.RotateNormal
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Leg::RotateNormal(UnityEngine::Vector3 normal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::RotateNormal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateNormal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, normal);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.SetFootToPoint
void RootMotion::FinalIK::Grounding::Leg::SetFootToPoint(UnityEngine::Vector3 normal, UnityEngine::Vector3 point) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::SetFootToPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFootToPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(normal), ::il2cpp_utils::ExtractType(point)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, normal, point);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.SetFootToPlane
void RootMotion::FinalIK::Grounding::Leg::SetFootToPlane(UnityEngine::Vector3 planeNormal, UnityEngine::Vector3 planePoint, UnityEngine::Vector3 heelHitPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::SetFootToPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetFootToPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(planeNormal), ::il2cpp_utils::ExtractType(planePoint), ::il2cpp_utils::ExtractType(heelHitPoint)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, planeNormal, planePoint, heelHitPoint);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.GetHeightFromGround
float RootMotion::FinalIK::Grounding::Leg::GetHeightFromGround(UnityEngine::Vector3 hitPoint) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::GetHeightFromGround");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHeightFromGround", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hitPoint)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, hitPoint);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.RotateFoot
void RootMotion::FinalIK::Grounding::Leg::RotateFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::RotateFoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateFoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.GetRotationOffsetTarget
UnityEngine::Quaternion RootMotion::FinalIK::Grounding::Leg::GetRotationOffsetTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::GetRotationOffsetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRotationOffsetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Leg.get_rootYOffset
float RootMotion::FinalIK::Grounding::Leg::get_rootYOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Leg::get_rootYOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootYOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: Grounding::Leg::get_isGrounded
// Il2CppName: get_isGrounded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Grounding::Leg::*)()>(&Grounding::Leg::get_isGrounded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "get_isGrounded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::set_isGrounded
// Il2CppName: set_isGrounded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)(bool)>(&Grounding::Leg::set_isGrounded)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "set_isGrounded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::get_IKPosition
// Il2CppName: get_IKPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Grounding::Leg::*)()>(&Grounding::Leg::get_IKPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "get_IKPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::set_IKPosition
// Il2CppName: set_IKPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)(UnityEngine::Vector3)>(&Grounding::Leg::set_IKPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "set_IKPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::get_initiated
// Il2CppName: get_initiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Grounding::Leg::*)()>(&Grounding::Leg::get_initiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "get_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::set_initiated
// Il2CppName: set_initiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)(bool)>(&Grounding::Leg::set_initiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "set_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::get_heightFromGround
// Il2CppName: get_heightFromGround
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Grounding::Leg::*)()>(&Grounding::Leg::get_heightFromGround)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "get_heightFromGround", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::set_heightFromGround
// Il2CppName: set_heightFromGround
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)(float)>(&Grounding::Leg::set_heightFromGround)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "set_heightFromGround", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::get_velocity
// Il2CppName: get_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Grounding::Leg::*)()>(&Grounding::Leg::get_velocity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "get_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::set_velocity
// Il2CppName: set_velocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)(UnityEngine::Vector3)>(&Grounding::Leg::set_velocity)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "set_velocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::get_transform
// Il2CppName: get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (Grounding::Leg::*)()>(&Grounding::Leg::get_transform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::set_transform
// Il2CppName: set_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)(UnityEngine::Transform*)>(&Grounding::Leg::set_transform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "set_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::get_IKOffset
// Il2CppName: get_IKOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Grounding::Leg::*)()>(&Grounding::Leg::get_IKOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "get_IKOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::set_IKOffset
// Il2CppName: set_IKOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)(float)>(&Grounding::Leg::set_IKOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "set_IKOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::get_heelHit
// Il2CppName: get_heelHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RaycastHit (Grounding::Leg::*)()>(&Grounding::Leg::get_heelHit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "get_heelHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::set_heelHit
// Il2CppName: set_heelHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)(UnityEngine::RaycastHit)>(&Grounding::Leg::set_heelHit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "set_heelHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RaycastHit>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::get_capsuleHit
// Il2CppName: get_capsuleHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RaycastHit (Grounding::Leg::*)()>(&Grounding::Leg::get_capsuleHit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "get_capsuleHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::set_capsuleHit
// Il2CppName: set_capsuleHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)(UnityEngine::RaycastHit)>(&Grounding::Leg::set_capsuleHit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "set_capsuleHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::RaycastHit>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::get_GetHitPoint
// Il2CppName: get_GetHitPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RaycastHit (Grounding::Leg::*)()>(&Grounding::Leg::get_GetHitPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "get_GetHitPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::SetFootPosition
// Il2CppName: SetFootPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)(UnityEngine::Vector3)>(&Grounding::Leg::SetFootPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "SetFootPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)(RootMotion::FinalIK::Grounding*, UnityEngine::Transform*)>(&Grounding::Leg::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::Grounding*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)()>(&Grounding::Leg::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)()>(&Grounding::Leg::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)()>(&Grounding::Leg::Process)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::get_stepHeightFromGround
// Il2CppName: get_stepHeightFromGround
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Grounding::Leg::*)()>(&Grounding::Leg::get_stepHeightFromGround)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "get_stepHeightFromGround", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::GetCapsuleHit
// Il2CppName: GetCapsuleHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RaycastHit (Grounding::Leg::*)(UnityEngine::Vector3)>(&Grounding::Leg::GetCapsuleHit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "GetCapsuleHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::GetRaycastHit
// Il2CppName: GetRaycastHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RaycastHit (Grounding::Leg::*)(UnityEngine::Vector3)>(&Grounding::Leg::GetRaycastHit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "GetRaycastHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::RotateNormal
// Il2CppName: RotateNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Grounding::Leg::*)(UnityEngine::Vector3)>(&Grounding::Leg::RotateNormal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "RotateNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::SetFootToPoint
// Il2CppName: SetFootToPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&Grounding::Leg::SetFootToPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "SetFootToPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::SetFootToPlane
// Il2CppName: SetFootToPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3)>(&Grounding::Leg::SetFootToPlane)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "SetFootToPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::GetHeightFromGround
// Il2CppName: GetHeightFromGround
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Grounding::Leg::*)(UnityEngine::Vector3)>(&Grounding::Leg::GetHeightFromGround)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "GetHeightFromGround", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::RotateFoot
// Il2CppName: RotateFoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)()>(&Grounding::Leg::RotateFoot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "RotateFoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::GetRotationOffsetTarget
// Il2CppName: GetRotationOffsetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (Grounding::Leg::*)()>(&Grounding::Leg::GetRotationOffsetTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "GetRotationOffsetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::get_rootYOffset
// Il2CppName: get_rootYOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Grounding::Leg::*)()>(&Grounding::Leg::get_rootYOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), "get_rootYOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Leg::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)()>(&Grounding::Leg::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Leg::*)()>(&Grounding::Leg::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Leg*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.Grounding/Pelvis
#include "RootMotion/FinalIK/Grounding_Pelvis.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.get_IKOffset
UnityEngine::Vector3 RootMotion::FinalIK::Grounding::Pelvis::get_IKOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::get_IKOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IKOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.set_IKOffset
void RootMotion::FinalIK::Grounding::Pelvis::set_IKOffset(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::set_IKOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_IKOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.get_heightOffset
float RootMotion::FinalIK::Grounding::Pelvis::get_heightOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::get_heightOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_heightOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.set_heightOffset
void RootMotion::FinalIK::Grounding::Pelvis::set_heightOffset(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::set_heightOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_heightOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.Initiate
void RootMotion::FinalIK::Grounding::Pelvis::Initiate(RootMotion::FinalIK::Grounding* grounding) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(grounding)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, grounding);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.Reset
void RootMotion::FinalIK::Grounding::Pelvis::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.OnEnable
void RootMotion::FinalIK::Grounding::Pelvis::OnEnable() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::OnEnable");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnEnable", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.Grounding/Pelvis.Process
void RootMotion::FinalIK::Grounding::Pelvis::Process(float lowestOffset, float highestOffset, bool isGrounded) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Grounding::Pelvis::Process");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lowestOffset), ::il2cpp_utils::ExtractType(highestOffset), ::il2cpp_utils::ExtractType(isGrounded)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, lowestOffset, highestOffset, isGrounded);
}
// Writing MetadataGetter for method: Grounding::Pelvis::get_IKOffset
// Il2CppName: get_IKOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (Grounding::Pelvis::*)()>(&Grounding::Pelvis::get_IKOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Pelvis*), "get_IKOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Pelvis::set_IKOffset
// Il2CppName: set_IKOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Pelvis::*)(UnityEngine::Vector3)>(&Grounding::Pelvis::set_IKOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Pelvis*), "set_IKOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: Grounding::Pelvis::get_heightOffset
// Il2CppName: get_heightOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Grounding::Pelvis::*)()>(&Grounding::Pelvis::get_heightOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Pelvis*), "get_heightOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Pelvis::set_heightOffset
// Il2CppName: set_heightOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Pelvis::*)(float)>(&Grounding::Pelvis::set_heightOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Pelvis*), "set_heightOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: Grounding::Pelvis::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Pelvis::*)(RootMotion::FinalIK::Grounding*)>(&Grounding::Pelvis::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Pelvis*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::Grounding*>()});
  }
};
// Writing MetadataGetter for method: Grounding::Pelvis::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Pelvis::*)()>(&Grounding::Pelvis::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Pelvis*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Pelvis::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Pelvis::*)()>(&Grounding::Pelvis::OnEnable)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Pelvis*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Grounding::Pelvis::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Pelvis::*)(float, float, bool)>(&Grounding::Pelvis::Process)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Pelvis*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: Grounding::Pelvis::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Pelvis::*)()>(&Grounding::Pelvis::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Pelvis*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Grounding::Pelvis::*)()>(&Grounding::Pelvis::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Grounding::Pelvis*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.AimIK
#include "RootMotion/FinalIK/AimIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverAim
#include "RootMotion/FinalIK/IKSolverAim.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.AimIK.OpenSetupTutorial
void RootMotion::FinalIK::AimIK::OpenSetupTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::OpenSetupTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenSetupTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.SupportGroup
void RootMotion::FinalIK::AimIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.ASThread
void RootMotion::FinalIK::AimIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.OpenUserManual
void RootMotion::FinalIK::AimIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.OpenScriptReference
void RootMotion::FinalIK::AimIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.AimIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::AimIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::AimIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: AimIK::OpenSetupTutorial
// Il2CppName: OpenSetupTutorial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AimIK::*)()>(&AimIK::OpenSetupTutorial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AimIK*), "OpenSetupTutorial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AimIK::SupportGroup
// Il2CppName: SupportGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AimIK::*)()>(&AimIK::SupportGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AimIK*), "SupportGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AimIK::ASThread
// Il2CppName: ASThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AimIK::*)()>(&AimIK::ASThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AimIK*), "ASThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AimIK::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AimIK::*)()>(&AimIK::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AimIK*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AimIK::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AimIK::*)()>(&AimIK::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AimIK*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AimIK::GetIKSolver
// Il2CppName: GetIKSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver* (AimIK::*)()>(&AimIK::GetIKSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AimIK*), "GetIKSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: AimIK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AimIK::*)()>(&AimIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AimIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (AimIK::*)()>(&AimIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(AimIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.ArmIK
#include "RootMotion/FinalIK/ArmIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverArm
#include "RootMotion/FinalIK/IKSolverArm.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.ArmIK.SupportGroup
void RootMotion::FinalIK::ArmIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ArmIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.ASThread
void RootMotion::FinalIK::ArmIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ArmIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.OpenUserManual
void RootMotion::FinalIK::ArmIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ArmIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.OpenScriptReference
void RootMotion::FinalIK::ArmIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ArmIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.ArmIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::ArmIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ArmIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: ArmIK::SupportGroup
// Il2CppName: SupportGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArmIK::*)()>(&ArmIK::SupportGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArmIK*), "SupportGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ArmIK::ASThread
// Il2CppName: ASThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArmIK::*)()>(&ArmIK::ASThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArmIK*), "ASThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ArmIK::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArmIK::*)()>(&ArmIK::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArmIK*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ArmIK::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArmIK::*)()>(&ArmIK::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArmIK*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ArmIK::GetIKSolver
// Il2CppName: GetIKSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver* (ArmIK::*)()>(&ArmIK::GetIKSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArmIK*), "GetIKSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: ArmIK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArmIK::*)()>(&ArmIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArmIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (ArmIK::*)()>(&ArmIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(ArmIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.CCDIK
#include "RootMotion/FinalIK/CCDIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverCCD
#include "RootMotion/FinalIK/IKSolverCCD.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.CCDIK.SupportGroup
void RootMotion::FinalIK::CCDIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::CCDIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.ASThread
void RootMotion::FinalIK::CCDIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::CCDIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.OpenUserManual
void RootMotion::FinalIK::CCDIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::CCDIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.OpenScriptReference
void RootMotion::FinalIK::CCDIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::CCDIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.CCDIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::CCDIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::CCDIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: CCDIK::SupportGroup
// Il2CppName: SupportGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CCDIK::*)()>(&CCDIK::SupportGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CCDIK*), "SupportGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CCDIK::ASThread
// Il2CppName: ASThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CCDIK::*)()>(&CCDIK::ASThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CCDIK*), "ASThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CCDIK::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CCDIK::*)()>(&CCDIK::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CCDIK*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CCDIK::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CCDIK::*)()>(&CCDIK::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CCDIK*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CCDIK::GetIKSolver
// Il2CppName: GetIKSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver* (CCDIK::*)()>(&CCDIK::GetIKSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CCDIK*), "GetIKSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CCDIK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CCDIK::*)()>(&CCDIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CCDIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CCDIK::*)()>(&CCDIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CCDIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FABRIK
#include "RootMotion/FinalIK/FABRIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverFABRIK
#include "RootMotion/FinalIK/IKSolverFABRIK.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FABRIK.SupportGroup
void RootMotion::FinalIK::FABRIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.ASThread
void RootMotion::FinalIK::FABRIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.OpenUserManual
void RootMotion::FinalIK::FABRIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.OpenScriptReference
void RootMotion::FinalIK::FABRIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::FABRIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FABRIK::SupportGroup
// Il2CppName: SupportGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIK::*)()>(&FABRIK::SupportGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIK*), "SupportGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FABRIK::ASThread
// Il2CppName: ASThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIK::*)()>(&FABRIK::ASThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIK*), "ASThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FABRIK::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIK::*)()>(&FABRIK::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIK*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FABRIK::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIK::*)()>(&FABRIK::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIK*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FABRIK::GetIKSolver
// Il2CppName: GetIKSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver* (FABRIK::*)()>(&FABRIK::GetIKSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIK*), "GetIKSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FABRIK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIK::*)()>(&FABRIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIK::*)()>(&FABRIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FABRIKRoot
#include "RootMotion/FinalIK/FABRIKRoot.hpp"
// Including type: RootMotion.FinalIK.IKSolverFABRIKRoot
#include "RootMotion/FinalIK/IKSolverFABRIKRoot.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.SupportGroup
void RootMotion::FinalIK::FABRIKRoot::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKRoot::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.ASThread
void RootMotion::FinalIK::FABRIKRoot::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKRoot::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.OpenUserManual
void RootMotion::FinalIK::FABRIKRoot::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKRoot::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.OpenScriptReference
void RootMotion::FinalIK::FABRIKRoot::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKRoot::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKRoot.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::FABRIKRoot::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKRoot::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FABRIKRoot::SupportGroup
// Il2CppName: SupportGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIKRoot::*)()>(&FABRIKRoot::SupportGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIKRoot*), "SupportGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FABRIKRoot::ASThread
// Il2CppName: ASThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIKRoot::*)()>(&FABRIKRoot::ASThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIKRoot*), "ASThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FABRIKRoot::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIKRoot::*)()>(&FABRIKRoot::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIKRoot*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FABRIKRoot::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIKRoot::*)()>(&FABRIKRoot::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIKRoot*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FABRIKRoot::GetIKSolver
// Il2CppName: GetIKSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver* (FABRIKRoot::*)()>(&FABRIKRoot::GetIKSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIKRoot*), "GetIKSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FABRIKRoot::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIKRoot::*)()>(&FABRIKRoot::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIKRoot*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIKRoot::*)()>(&FABRIKRoot::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIKRoot*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenSetupTutorial
void RootMotion::FinalIK::FullBodyBipedIK::OpenSetupTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::OpenSetupTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenSetupTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenInspectorTutorial
void RootMotion::FinalIK::FullBodyBipedIK::OpenInspectorTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::OpenInspectorTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenInspectorTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.SupportGroup
void RootMotion::FinalIK::FullBodyBipedIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.ASThread
void RootMotion::FinalIK::FullBodyBipedIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.SetReferences
void RootMotion::FinalIK::FullBodyBipedIK::SetReferences(RootMotion::BipedReferences* references, UnityEngine::Transform* rootNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::SetReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(rootNode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, references, rootNode);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.ReferencesError
bool RootMotion::FinalIK::FullBodyBipedIK::ReferencesError(::Il2CppString*& errorMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::ReferencesError");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReferencesError", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(errorMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, errorMessage);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.ReferencesWarning
bool RootMotion::FinalIK::FullBodyBipedIK::ReferencesWarning(::Il2CppString*& warningMessage) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::ReferencesWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReferencesWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(warningMessage)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, warningMessage);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.Reinitiate
void RootMotion::FinalIK::FullBodyBipedIK::Reinitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::Reinitiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reinitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.AutoDetectReferences
void RootMotion::FinalIK::FullBodyBipedIK::AutoDetectReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::AutoDetectReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AutoDetectReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenUserManual
void RootMotion::FinalIK::FullBodyBipedIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.OpenScriptReference
void RootMotion::FinalIK::FullBodyBipedIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FullBodyBipedIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::FullBodyBipedIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FullBodyBipedIK::OpenSetupTutorial
// Il2CppName: OpenSetupTutorial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullBodyBipedIK::*)()>(&FullBodyBipedIK::OpenSetupTutorial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullBodyBipedIK*), "OpenSetupTutorial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FullBodyBipedIK::OpenInspectorTutorial
// Il2CppName: OpenInspectorTutorial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullBodyBipedIK::*)()>(&FullBodyBipedIK::OpenInspectorTutorial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullBodyBipedIK*), "OpenInspectorTutorial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FullBodyBipedIK::SupportGroup
// Il2CppName: SupportGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullBodyBipedIK::*)()>(&FullBodyBipedIK::SupportGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullBodyBipedIK*), "SupportGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FullBodyBipedIK::ASThread
// Il2CppName: ASThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullBodyBipedIK::*)()>(&FullBodyBipedIK::ASThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullBodyBipedIK*), "ASThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FullBodyBipedIK::SetReferences
// Il2CppName: SetReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullBodyBipedIK::*)(RootMotion::BipedReferences*, UnityEngine::Transform*)>(&FullBodyBipedIK::SetReferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullBodyBipedIK*), "SetReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::BipedReferences*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: FullBodyBipedIK::ReferencesError
// Il2CppName: ReferencesError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FullBodyBipedIK::*)(::Il2CppString*&)>(&FullBodyBipedIK::ReferencesError)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullBodyBipedIK*), "ReferencesError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: FullBodyBipedIK::ReferencesWarning
// Il2CppName: ReferencesWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FullBodyBipedIK::*)(::Il2CppString*&)>(&FullBodyBipedIK::ReferencesWarning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullBodyBipedIK*), "ReferencesWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: FullBodyBipedIK::Reinitiate
// Il2CppName: Reinitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullBodyBipedIK::*)()>(&FullBodyBipedIK::Reinitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullBodyBipedIK*), "Reinitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FullBodyBipedIK::AutoDetectReferences
// Il2CppName: AutoDetectReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullBodyBipedIK::*)()>(&FullBodyBipedIK::AutoDetectReferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullBodyBipedIK*), "AutoDetectReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FullBodyBipedIK::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullBodyBipedIK::*)()>(&FullBodyBipedIK::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullBodyBipedIK*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FullBodyBipedIK::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullBodyBipedIK::*)()>(&FullBodyBipedIK::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullBodyBipedIK*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FullBodyBipedIK::GetIKSolver
// Il2CppName: GetIKSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver* (FullBodyBipedIK::*)()>(&FullBodyBipedIK::GetIKSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullBodyBipedIK*), "GetIKSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FullBodyBipedIK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullBodyBipedIK::*)()>(&FullBodyBipedIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullBodyBipedIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FullBodyBipedIK::*)()>(&FullBodyBipedIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FullBodyBipedIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::IK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.OpenUserManual
void RootMotion::FinalIK::IK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.OpenScriptReference
void RootMotion::FinalIK::IK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.UpdateSolver
void RootMotion::FinalIK::IK::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.InitiateSolver
void RootMotion::FinalIK::IK::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IK.FixTransforms
void RootMotion::FinalIK::IK::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IK::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IK::GetIKSolver
// Il2CppName: GetIKSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver* (IK::*)()>(&IK::GetIKSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IK*), "GetIKSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IK::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IK::*)()>(&IK::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IK*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IK::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IK::*)()>(&IK::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IK*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IK::UpdateSolver
// Il2CppName: UpdateSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IK::*)()>(&IK::UpdateSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IK*), "UpdateSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IK::InitiateSolver
// Il2CppName: InitiateSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IK::*)()>(&IK::InitiateSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IK*), "InitiateSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IK::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IK::*)()>(&IK::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IK*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IK::*)()>(&IK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IK::*)()>(&IK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKExecutionOrder
#include "RootMotion/FinalIK/IKExecutionOrder.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.get_animatePhysics
bool RootMotion::FinalIK::IKExecutionOrder::get_animatePhysics() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::get_animatePhysics");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_animatePhysics", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.Start
void RootMotion::FinalIK::IKExecutionOrder::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.Update
void RootMotion::FinalIK::IKExecutionOrder::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.FixedUpdate
void RootMotion::FinalIK::IKExecutionOrder::FixedUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::FixedUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixedUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.LateUpdate
void RootMotion::FinalIK::IKExecutionOrder::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKExecutionOrder.FixTransforms
void RootMotion::FinalIK::IKExecutionOrder::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKExecutionOrder::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKExecutionOrder::get_animatePhysics
// Il2CppName: get_animatePhysics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKExecutionOrder::*)()>(&IKExecutionOrder::get_animatePhysics)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKExecutionOrder*), "get_animatePhysics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKExecutionOrder::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKExecutionOrder::*)()>(&IKExecutionOrder::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKExecutionOrder*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKExecutionOrder::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKExecutionOrder::*)()>(&IKExecutionOrder::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKExecutionOrder*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKExecutionOrder::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKExecutionOrder::*)()>(&IKExecutionOrder::FixedUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKExecutionOrder*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKExecutionOrder::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKExecutionOrder::*)()>(&IKExecutionOrder::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKExecutionOrder*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKExecutionOrder::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKExecutionOrder::*)()>(&IKExecutionOrder::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKExecutionOrder*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKExecutionOrder::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKExecutionOrder::*)()>(&IKExecutionOrder::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKExecutionOrder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKExecutionOrder::*)()>(&IKExecutionOrder::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKExecutionOrder*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.LegIK
#include "RootMotion/FinalIK/LegIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverLeg
#include "RootMotion/FinalIK/IKSolverLeg.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.LegIK.SupportGroup
void RootMotion::FinalIK::LegIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LegIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.ASThread
void RootMotion::FinalIK::LegIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LegIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.OpenUserManual
void RootMotion::FinalIK::LegIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LegIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.OpenScriptReference
void RootMotion::FinalIK::LegIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LegIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LegIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::LegIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LegIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LegIK::SupportGroup
// Il2CppName: SupportGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LegIK::*)()>(&LegIK::SupportGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LegIK*), "SupportGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LegIK::ASThread
// Il2CppName: ASThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LegIK::*)()>(&LegIK::ASThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LegIK*), "ASThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LegIK::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LegIK::*)()>(&LegIK::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LegIK*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LegIK::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LegIK::*)()>(&LegIK::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LegIK*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LegIK::GetIKSolver
// Il2CppName: GetIKSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver* (LegIK::*)()>(&LegIK::GetIKSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LegIK*), "GetIKSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LegIK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LegIK::*)()>(&LegIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LegIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LegIK::*)()>(&LegIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LegIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.LimbIK
#include "RootMotion/FinalIK/LimbIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.LimbIK.SupportGroup
void RootMotion::FinalIK::LimbIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LimbIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.ASThread
void RootMotion::FinalIK::LimbIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LimbIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.OpenUserManual
void RootMotion::FinalIK::LimbIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LimbIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.OpenScriptReference
void RootMotion::FinalIK::LimbIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LimbIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LimbIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::LimbIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LimbIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LimbIK::SupportGroup
// Il2CppName: SupportGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LimbIK::*)()>(&LimbIK::SupportGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LimbIK*), "SupportGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LimbIK::ASThread
// Il2CppName: ASThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LimbIK::*)()>(&LimbIK::ASThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LimbIK*), "ASThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LimbIK::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LimbIK::*)()>(&LimbIK::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LimbIK*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LimbIK::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LimbIK::*)()>(&LimbIK::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LimbIK*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LimbIK::GetIKSolver
// Il2CppName: GetIKSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver* (LimbIK::*)()>(&LimbIK::GetIKSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LimbIK*), "GetIKSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LimbIK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LimbIK::*)()>(&LimbIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LimbIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LimbIK::*)()>(&LimbIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LimbIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.LookAtIK
#include "RootMotion/FinalIK/LookAtIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverLookAt
#include "RootMotion/FinalIK/IKSolverLookAt.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.LookAtIK.SupportGroup
void RootMotion::FinalIK::LookAtIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.ASThread
void RootMotion::FinalIK::LookAtIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.OpenUserManual
void RootMotion::FinalIK::LookAtIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.OpenScriptReference
void RootMotion::FinalIK::LookAtIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.LookAtIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::LookAtIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::LookAtIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: LookAtIK::SupportGroup
// Il2CppName: SupportGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LookAtIK::*)()>(&LookAtIK::SupportGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LookAtIK*), "SupportGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LookAtIK::ASThread
// Il2CppName: ASThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LookAtIK::*)()>(&LookAtIK::ASThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LookAtIK*), "ASThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LookAtIK::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LookAtIK::*)()>(&LookAtIK::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LookAtIK*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LookAtIK::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LookAtIK::*)()>(&LookAtIK::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LookAtIK*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LookAtIK::GetIKSolver
// Il2CppName: GetIKSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver* (LookAtIK::*)()>(&LookAtIK::GetIKSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LookAtIK*), "GetIKSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LookAtIK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LookAtIK::*)()>(&LookAtIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LookAtIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LookAtIK::*)()>(&LookAtIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LookAtIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.TrigonometricIK
#include "RootMotion/FinalIK/TrigonometricIK.hpp"
// Including type: RootMotion.FinalIK.IKSolverTrigonometric
#include "RootMotion/FinalIK/IKSolverTrigonometric.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.SupportGroup
void RootMotion::FinalIK::TrigonometricIK::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TrigonometricIK::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.ASThread
void RootMotion::FinalIK::TrigonometricIK::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TrigonometricIK::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.OpenUserManual
void RootMotion::FinalIK::TrigonometricIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TrigonometricIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.OpenScriptReference
void RootMotion::FinalIK::TrigonometricIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TrigonometricIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TrigonometricIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::TrigonometricIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TrigonometricIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TrigonometricIK::SupportGroup
// Il2CppName: SupportGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrigonometricIK::*)()>(&TrigonometricIK::SupportGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrigonometricIK*), "SupportGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrigonometricIK::ASThread
// Il2CppName: ASThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrigonometricIK::*)()>(&TrigonometricIK::ASThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrigonometricIK*), "ASThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrigonometricIK::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrigonometricIK::*)()>(&TrigonometricIK::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrigonometricIK*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrigonometricIK::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrigonometricIK::*)()>(&TrigonometricIK::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrigonometricIK*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrigonometricIK::GetIKSolver
// Il2CppName: GetIKSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver* (TrigonometricIK::*)()>(&TrigonometricIK::GetIKSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrigonometricIK*), "GetIKSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TrigonometricIK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrigonometricIK::*)()>(&TrigonometricIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrigonometricIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TrigonometricIK::*)()>(&TrigonometricIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TrigonometricIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.VRIK
#include "RootMotion/FinalIK/VRIK.hpp"
// Including type: RootMotion.FinalIK.VRIK/References
#include "RootMotion/FinalIK/VRIK_References.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR
#include "RootMotion/FinalIK/IKSolverVR.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.VRIK.OpenSetupTutorial
void RootMotion::FinalIK::VRIK::OpenSetupTutorial() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::OpenSetupTutorial");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenSetupTutorial", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.AutoDetectReferences
void RootMotion::FinalIK::VRIK::AutoDetectReferences() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::AutoDetectReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AutoDetectReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.GuessHandOrientations
void RootMotion::FinalIK::VRIK::GuessHandOrientations() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::GuessHandOrientations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GuessHandOrientations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.OpenUserManual
void RootMotion::FinalIK::VRIK::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::OpenUserManual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.OpenScriptReference
void RootMotion::FinalIK::VRIK::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::OpenScriptReference");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.GetIKSolver
RootMotion::FinalIK::IKSolver* RootMotion::FinalIK::VRIK::GetIKSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::GetIKSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.InitiateSolver
void RootMotion::FinalIK::VRIK::InitiateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::InitiateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK.UpdateSolver
void RootMotion::FinalIK::VRIK::UpdateSolver() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::UpdateSolver");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolver", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: VRIK::OpenSetupTutorial
// Il2CppName: OpenSetupTutorial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRIK::*)()>(&VRIK::OpenSetupTutorial)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK*), "OpenSetupTutorial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRIK::AutoDetectReferences
// Il2CppName: AutoDetectReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRIK::*)()>(&VRIK::AutoDetectReferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK*), "AutoDetectReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRIK::GuessHandOrientations
// Il2CppName: GuessHandOrientations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRIK::*)()>(&VRIK::GuessHandOrientations)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK*), "GuessHandOrientations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRIK::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRIK::*)()>(&VRIK::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRIK::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRIK::*)()>(&VRIK::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRIK::GetIKSolver
// Il2CppName: GetIKSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver* (VRIK::*)()>(&VRIK::GetIKSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK*), "GetIKSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRIK::InitiateSolver
// Il2CppName: InitiateSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRIK::*)()>(&VRIK::InitiateSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK*), "InitiateSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRIK::UpdateSolver
// Il2CppName: UpdateSolver
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRIK::*)()>(&VRIK::UpdateSolver)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK*), "UpdateSolver", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRIK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRIK::*)()>(&VRIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRIK::*)()>(&VRIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.VRIK/References
#include "RootMotion/FinalIK/VRIK_References.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.VRIK/References.GetTransforms
::Array<UnityEngine::Transform*>* RootMotion::FinalIK::VRIK::References::GetTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::References::GetTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Transform*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK/References.get_isFilled
bool RootMotion::FinalIK::VRIK::References::get_isFilled() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::References::get_isFilled");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isFilled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK/References.get_isEmpty
bool RootMotion::FinalIK::VRIK::References::get_isEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::References::get_isEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.VRIK/References.AutoDetectReferences
bool RootMotion::FinalIK::VRIK::References::AutoDetectReferences(UnityEngine::Transform* root, RootMotion::FinalIK::VRIK::References*& references) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::References::AutoDetectReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "VRIK/References", "AutoDetectReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::VRIK::References*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, root, references);
}
// Writing MetadataGetter for method: VRIK::References::GetTransforms
// Il2CppName: GetTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Transform*>* (VRIK::References::*)()>(&VRIK::References::GetTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK::References*), "GetTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRIK::References::get_isFilled
// Il2CppName: get_isFilled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VRIK::References::*)()>(&VRIK::References::get_isFilled)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK::References*), "get_isFilled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRIK::References::get_isEmpty
// Il2CppName: get_isEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (VRIK::References::*)()>(&VRIK::References::get_isEmpty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK::References*), "get_isEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: VRIK::References::AutoDetectReferences
// Il2CppName: AutoDetectReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Transform*, RootMotion::FinalIK::VRIK::References*&)>(&VRIK::References::AutoDetectReferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK::References*), "AutoDetectReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::VRIK::References*&>()});
  }
};
// Writing MetadataGetter for method: VRIK::References::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRIK::References::*)()>(&VRIK::References::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK::References*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (VRIK::References::*)()>(&VRIK::References::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(VRIK::References*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.FABRIKChain
#include "RootMotion/FinalIK/FABRIKChain.hpp"
// Including type: RootMotion.FinalIK.FABRIK
#include "RootMotion/FinalIK/FABRIK.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FABRIKChain.IsValid
bool RootMotion::FinalIK::FABRIKChain::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKChain::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKChain.Initiate
void RootMotion::FinalIK::FABRIKChain::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKChain::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKChain.Stage1
void RootMotion::FinalIK::FABRIKChain::Stage1(::Array<RootMotion::FinalIK::FABRIKChain*>* chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKChain::Stage1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stage1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, chain);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKChain.Stage2
void RootMotion::FinalIK::FABRIKChain::Stage2(UnityEngine::Vector3 rootPosition, ::Array<RootMotion::FinalIK::FABRIKChain*>* chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKChain::Stage2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stage2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootPosition), ::il2cpp_utils::ExtractType(chain)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rootPosition, chain);
}
// Autogenerated method: RootMotion.FinalIK.FABRIKChain.GetCentroid
UnityEngine::Vector3 RootMotion::FinalIK::FABRIKChain::GetCentroid(::Array<RootMotion::FinalIK::FABRIKChain*>* chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FABRIKChain::GetCentroid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCentroid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, chain);
}
// Writing MetadataGetter for method: FABRIKChain::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FABRIKChain::*)(::Il2CppString*&)>(&FABRIKChain::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIKChain*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: FABRIKChain::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIKChain::*)()>(&FABRIKChain::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIKChain*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FABRIKChain::Stage1
// Il2CppName: Stage1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIKChain::*)(::Array<RootMotion::FinalIK::FABRIKChain*>*)>(&FABRIKChain::Stage1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIKChain*), "Stage1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::FABRIKChain*>*>()});
  }
};
// Writing MetadataGetter for method: FABRIKChain::Stage2
// Il2CppName: Stage2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIKChain::*)(UnityEngine::Vector3, ::Array<RootMotion::FinalIK::FABRIKChain*>*)>(&FABRIKChain::Stage2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIKChain*), "Stage2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::FABRIKChain*>*>()});
  }
};
// Writing MetadataGetter for method: FABRIKChain::GetCentroid
// Il2CppName: GetCentroid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (FABRIKChain::*)(::Array<RootMotion::FinalIK::FABRIKChain*>*)>(&FABRIKChain::GetCentroid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIKChain*), "GetCentroid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::FABRIKChain*>*>()});
  }
};
// Writing MetadataGetter for method: FABRIKChain::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIKChain::*)()>(&FABRIKChain::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIKChain*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FABRIKChain::*)()>(&FABRIKChain::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FABRIKChain*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FBBIKArmBending
#include "RootMotion/FinalIK/FBBIKArmBending.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FBBIKArmBending.LateUpdate
void RootMotion::FinalIK::FBBIKArmBending::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKArmBending::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKArmBending.OnPostFBBIK
void RootMotion::FinalIK::FBBIKArmBending::OnPostFBBIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKArmBending::OnPostFBBIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostFBBIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKArmBending.OnDestroy
void RootMotion::FinalIK::FBBIKArmBending::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKArmBending::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FBBIKArmBending::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKArmBending::*)()>(&FBBIKArmBending::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKArmBending*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBBIKArmBending::OnPostFBBIK
// Il2CppName: OnPostFBBIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKArmBending::*)()>(&FBBIKArmBending::OnPostFBBIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKArmBending*), "OnPostFBBIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBBIKArmBending::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKArmBending::*)()>(&FBBIKArmBending::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKArmBending*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBBIKArmBending::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKArmBending::*)()>(&FBBIKArmBending::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKArmBending*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKArmBending::*)()>(&FBBIKArmBending::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKArmBending*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.FBBIKHeadEffector
#include "RootMotion/FinalIK/FBBIKHeadEffector.hpp"
// Including type: RootMotion.FinalIK.FBBIKHeadEffector/BendBone
#include "RootMotion/FinalIK/FBBIKHeadEffector_BendBone.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: RootMotion.FinalIK.IKSolver/UpdateDelegate
#include "RootMotion/FinalIK/IKSolver_UpdateDelegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.Start
void RootMotion::FinalIK::FBBIKHeadEffector::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.OnStoreDefaultLocalState
void RootMotion::FinalIK::FBBIKHeadEffector::OnStoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::OnStoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnStoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.OnFixTransforms
void RootMotion::FinalIK::FBBIKHeadEffector::OnFixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::OnFixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.OnPreRead
void RootMotion::FinalIK::FBBIKHeadEffector::OnPreRead() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::OnPreRead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.SpineBend
void RootMotion::FinalIK::FBBIKHeadEffector::SpineBend() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::SpineBend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SpineBend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.CCDPass
void RootMotion::FinalIK::FBBIKHeadEffector::CCDPass() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::CCDPass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CCDPass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.Iterate
void RootMotion::FinalIK::FBBIKHeadEffector::Iterate(int iteration) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::Iterate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Iterate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(iteration)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, iteration);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.OnPostUpdate
void RootMotion::FinalIK::FBBIKHeadEffector::OnPostUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::OnPostUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.ChestDirection
void RootMotion::FinalIK::FBBIKHeadEffector::ChestDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::ChestDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ChestDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.PostStretching
void RootMotion::FinalIK::FBBIKHeadEffector::PostStretching() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::PostStretching");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PostStretching", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.LerpSolverPosition
void RootMotion::FinalIK::FBBIKHeadEffector::LerpSolverPosition(RootMotion::FinalIK::IKEffector* effector, UnityEngine::Vector3 position, float weight, UnityEngine::Vector3 offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::LerpSolverPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LerpSolverPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effector, position, weight, offset);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.Solve
void RootMotion::FinalIK::FBBIKHeadEffector::Solve(UnityEngine::Vector3& pos1, UnityEngine::Vector3& pos2, float nominalDistance) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(nominalDistance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos1, pos2, nominalDistance);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector.OnDestroy
void RootMotion::FinalIK::FBBIKHeadEffector::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FBBIKHeadEffector::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::*)()>(&FBBIKHeadEffector::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::OnStoreDefaultLocalState
// Il2CppName: OnStoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::*)()>(&FBBIKHeadEffector::OnStoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector*), "OnStoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::OnFixTransforms
// Il2CppName: OnFixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::*)()>(&FBBIKHeadEffector::OnFixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector*), "OnFixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::OnPreRead
// Il2CppName: OnPreRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::*)()>(&FBBIKHeadEffector::OnPreRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector*), "OnPreRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::SpineBend
// Il2CppName: SpineBend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::*)()>(&FBBIKHeadEffector::SpineBend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector*), "SpineBend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::CCDPass
// Il2CppName: CCDPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::*)()>(&FBBIKHeadEffector::CCDPass)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector*), "CCDPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::Iterate
// Il2CppName: Iterate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::*)(int)>(&FBBIKHeadEffector::Iterate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector*), "Iterate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::OnPostUpdate
// Il2CppName: OnPostUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::*)()>(&FBBIKHeadEffector::OnPostUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector*), "OnPostUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::ChestDirection
// Il2CppName: ChestDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::*)()>(&FBBIKHeadEffector::ChestDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector*), "ChestDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::PostStretching
// Il2CppName: PostStretching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::*)()>(&FBBIKHeadEffector::PostStretching)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector*), "PostStretching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::LerpSolverPosition
// Il2CppName: LerpSolverPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::*)(RootMotion::FinalIK::IKEffector*, UnityEngine::Vector3, float, UnityEngine::Vector3)>(&FBBIKHeadEffector::LerpSolverPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector*), "LerpSolverPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKEffector*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::*)(UnityEngine::Vector3&, UnityEngine::Vector3&, float)>(&FBBIKHeadEffector::Solve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::*)()>(&FBBIKHeadEffector::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::*)()>(&FBBIKHeadEffector::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::*)()>(&FBBIKHeadEffector::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FBBIKHeadEffector/BendBone
#include "RootMotion/FinalIK/FBBIKHeadEffector_BendBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector/BendBone.StoreDefaultLocalState
void RootMotion::FinalIK::FBBIKHeadEffector::BendBone::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::BendBone::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBBIKHeadEffector/BendBone.FixTransforms
void RootMotion::FinalIK::FBBIKHeadEffector::BendBone::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBBIKHeadEffector::BendBone::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: FBBIKHeadEffector::BendBone::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::BendBone::*)(UnityEngine::Transform*, float)>(&FBBIKHeadEffector::BendBone::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector::BendBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::BendBone::*)(UnityEngine::Transform*, float)>(&FBBIKHeadEffector::BendBone::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector::BendBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::BendBone::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::BendBone::*)()>(&FBBIKHeadEffector::BendBone::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector::BendBone*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::BendBone::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::BendBone::*)()>(&FBBIKHeadEffector::BendBone::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector::BendBone*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBBIKHeadEffector::BendBone::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::BendBone::*)()>(&FBBIKHeadEffector::BendBone::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector::BendBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBBIKHeadEffector::BendBone::*)()>(&FBBIKHeadEffector::BendBone::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBBIKHeadEffector::BendBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.FBIKChain
#include "RootMotion/FinalIK/FBIKChain.hpp"
// Including type: RootMotion.FinalIK.FBIKChain/ChildConstraint
#include "RootMotion/FinalIK/FBIKChain_ChildConstraint.hpp"
// Including type: RootMotion.FinalIK.IKConstraintBend
#include "RootMotion/FinalIK/IKConstraintBend.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single maxLimbLength
float RootMotion::FinalIK::FBIKChain::_get_maxLimbLength() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::_get_maxLimbLength");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("RootMotion.FinalIK", "FBIKChain", "maxLimbLength"));
}
// Autogenerated static field setter
// Set static field: static private System.Single maxLimbLength
void RootMotion::FinalIK::FBIKChain::_set_maxLimbLength(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::_set_maxLimbLength");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FBIKChain", "maxLimbLength", value));
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SetNodes
void RootMotion::FinalIK::FBIKChain::SetNodes(::Array<UnityEngine::Transform*>* boneTransforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::SetNodes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetNodes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneTransforms)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, boneTransforms);
}
// Creating initializer_list -> params proxy for: System.Void SetNodes(params UnityEngine.Transform[] boneTransforms)
void RootMotion::FinalIK::FBIKChain::SetNodes(std::initializer_list<UnityEngine::Transform*> boneTransforms) {
  RootMotion::FinalIK::FBIKChain::SetNodes(::Array<UnityEngine::Transform*>::New(boneTransforms));
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.GetNodeIndex
int RootMotion::FinalIK::FBIKChain::GetNodeIndex(UnityEngine::Transform* boneTransform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::GetNodeIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNodeIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneTransform)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, boneTransform);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.IsValid
bool RootMotion::FinalIK::FBIKChain::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.Initiate
void RootMotion::FinalIK::FBIKChain::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.ReadPose
void RootMotion::FinalIK::FBIKChain::ReadPose(RootMotion::FinalIK::IKSolverFullBody* solver, bool fullBody) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ReadPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(fullBody)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, fullBody);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.CalculateBoneLengths
void RootMotion::FinalIK::FBIKChain::CalculateBoneLengths(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::CalculateBoneLengths");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateBoneLengths", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.Reach
void RootMotion::FinalIK::FBIKChain::Reach(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Reach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.Push
UnityEngine::Vector3 RootMotion::FinalIK::FBIKChain::Push(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Push");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Push", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SolveTrigonometric
void RootMotion::FinalIK::FBIKChain::SolveTrigonometric(RootMotion::FinalIK::IKSolverFullBody* solver, bool calculateBendDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::SolveTrigonometric");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveTrigonometric", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(calculateBendDirection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, calculateBendDirection);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.Stage1
void RootMotion::FinalIK::FBIKChain::Stage1(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Stage1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stage1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.Stage2
void RootMotion::FinalIK::FBIKChain::Stage2(RootMotion::FinalIK::IKSolverFullBody* solver, UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Stage2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stage2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, position);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SolveConstraintSystems
void RootMotion::FinalIK::FBIKChain::SolveConstraintSystems(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::SolveConstraintSystems");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveConstraintSystems", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SolveFABRIKJoint
UnityEngine::Vector3 RootMotion::FinalIK::FBIKChain::SolveFABRIKJoint(UnityEngine::Vector3 pos1, UnityEngine::Vector3 pos2, float length) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::SolveFABRIKJoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveFABRIKJoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, pos1, pos2, length);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.GetDirToBendPoint
UnityEngine::Vector3 RootMotion::FinalIK::FBIKChain::GetDirToBendPoint(UnityEngine::Vector3 direction, UnityEngine::Vector3 bendDirection, float directionMagnitude) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::GetDirToBendPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDirToBendPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(bendDirection), ::il2cpp_utils::ExtractType(directionMagnitude)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, direction, bendDirection, directionMagnitude);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SolveChildConstraints
void RootMotion::FinalIK::FBIKChain::SolveChildConstraints(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::SolveChildConstraints");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveChildConstraints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.SolveLinearConstraint
void RootMotion::FinalIK::FBIKChain::SolveLinearConstraint(RootMotion::FinalIK::IKSolver::Node* node1, RootMotion::FinalIK::IKSolver::Node* node2, float crossFade, float distance) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::SolveLinearConstraint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveLinearConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(node1), ::il2cpp_utils::ExtractType(node2), ::il2cpp_utils::ExtractType(crossFade), ::il2cpp_utils::ExtractType(distance)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node1, node2, crossFade, distance);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.ForwardReach
void RootMotion::FinalIK::FBIKChain::ForwardReach(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ForwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain.BackwardReach
void RootMotion::FinalIK::FBIKChain::BackwardReach(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::BackwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Writing MetadataGetter for method: FBIKChain::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)(float, float, ::Array<UnityEngine::Transform*>*)>(&FBIKChain::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)(float, float, ::Array<UnityEngine::Transform*>*)>(&FBIKChain::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::SetNodes
// Il2CppName: SetNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)(::Array<UnityEngine::Transform*>*)>(&FBIKChain::SetNodes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "SetNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::GetNodeIndex
// Il2CppName: GetNodeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (FBIKChain::*)(UnityEngine::Transform*)>(&FBIKChain::GetNodeIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "GetNodeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FBIKChain::*)(::Il2CppString*&)>(&FBIKChain::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&FBIKChain::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::ReadPose
// Il2CppName: ReadPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)(RootMotion::FinalIK::IKSolverFullBody*, bool)>(&FBIKChain::ReadPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "ReadPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::CalculateBoneLengths
// Il2CppName: CalculateBoneLengths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&FBIKChain::CalculateBoneLengths)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "CalculateBoneLengths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::Reach
// Il2CppName: Reach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&FBIKChain::Reach)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "Reach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (FBIKChain::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&FBIKChain::Push)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::SolveTrigonometric
// Il2CppName: SolveTrigonometric
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)(RootMotion::FinalIK::IKSolverFullBody*, bool)>(&FBIKChain::SolveTrigonometric)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "SolveTrigonometric", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::Stage1
// Il2CppName: Stage1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&FBIKChain::Stage1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "Stage1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::Stage2
// Il2CppName: Stage2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)(RootMotion::FinalIK::IKSolverFullBody*, UnityEngine::Vector3)>(&FBIKChain::Stage2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "Stage2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::SolveConstraintSystems
// Il2CppName: SolveConstraintSystems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&FBIKChain::SolveConstraintSystems)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "SolveConstraintSystems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::SolveFABRIKJoint
// Il2CppName: SolveFABRIKJoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (FBIKChain::*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&FBIKChain::SolveFABRIKJoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "SolveFABRIKJoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::GetDirToBendPoint
// Il2CppName: GetDirToBendPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (FBIKChain::*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&FBIKChain::GetDirToBendPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "GetDirToBendPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::SolveChildConstraints
// Il2CppName: SolveChildConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&FBIKChain::SolveChildConstraints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "SolveChildConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::SolveLinearConstraint
// Il2CppName: SolveLinearConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)(RootMotion::FinalIK::IKSolver::Node*, RootMotion::FinalIK::IKSolver::Node*, float, float)>(&FBIKChain::SolveLinearConstraint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "SolveLinearConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolver::Node*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolver::Node*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::ForwardReach
// Il2CppName: ForwardReach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)(UnityEngine::Vector3)>(&FBIKChain::ForwardReach)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "ForwardReach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::BackwardReach
// Il2CppName: BackwardReach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)(UnityEngine::Vector3)>(&FBIKChain::BackwardReach)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), "BackwardReach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)()>(&FBIKChain::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::*)()>(&FBIKChain::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FBIKChain/ChildConstraint
#include "RootMotion/FinalIK/FBIKChain_ChildConstraint.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.FBIKChain/ChildConstraint.get_nominalDistance
float RootMotion::FinalIK::FBIKChain::ChildConstraint::get_nominalDistance() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ChildConstraint::get_nominalDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_nominalDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/ChildConstraint.set_nominalDistance
void RootMotion::FinalIK::FBIKChain::ChildConstraint::set_nominalDistance(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ChildConstraint::set_nominalDistance");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_nominalDistance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/ChildConstraint.get_isRigid
bool RootMotion::FinalIK::FBIKChain::ChildConstraint::get_isRigid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ChildConstraint::get_isRigid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isRigid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/ChildConstraint.set_isRigid
void RootMotion::FinalIK::FBIKChain::ChildConstraint::set_isRigid(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ChildConstraint::set_isRigid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isRigid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/ChildConstraint.Initiate
void RootMotion::FinalIK::FBIKChain::ChildConstraint::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ChildConstraint::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/ChildConstraint.OnPreSolve
void RootMotion::FinalIK::FBIKChain::ChildConstraint::OnPreSolve(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ChildConstraint::OnPreSolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.FBIKChain/ChildConstraint.Solve
void RootMotion::FinalIK::FBIKChain::ChildConstraint::Solve(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ChildConstraint::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Writing MetadataGetter for method: FBIKChain::ChildConstraint::get_nominalDistance
// Il2CppName: get_nominalDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (FBIKChain::ChildConstraint::*)()>(&FBIKChain::ChildConstraint::get_nominalDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain::ChildConstraint*), "get_nominalDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBIKChain::ChildConstraint::set_nominalDistance
// Il2CppName: set_nominalDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::ChildConstraint::*)(float)>(&FBIKChain::ChildConstraint::set_nominalDistance)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain::ChildConstraint*), "set_nominalDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::ChildConstraint::get_isRigid
// Il2CppName: get_isRigid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (FBIKChain::ChildConstraint::*)()>(&FBIKChain::ChildConstraint::get_isRigid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain::ChildConstraint*), "get_isRigid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: FBIKChain::ChildConstraint::set_isRigid
// Il2CppName: set_isRigid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::ChildConstraint::*)(bool)>(&FBIKChain::ChildConstraint::set_isRigid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain::ChildConstraint*), "set_isRigid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::ChildConstraint::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::ChildConstraint::*)(UnityEngine::Transform*, UnityEngine::Transform*, float, float)>(&FBIKChain::ChildConstraint::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain::ChildConstraint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::ChildConstraint::*)(UnityEngine::Transform*, UnityEngine::Transform*, float, float)>(&FBIKChain::ChildConstraint::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain::ChildConstraint*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::ChildConstraint::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::ChildConstraint::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&FBIKChain::ChildConstraint::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain::ChildConstraint*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::ChildConstraint::OnPreSolve
// Il2CppName: OnPreSolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::ChildConstraint::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&FBIKChain::ChildConstraint::OnPreSolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain::ChildConstraint*), "OnPreSolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: FBIKChain::ChildConstraint::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (FBIKChain::ChildConstraint::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&FBIKChain::ChildConstraint::Solve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(FBIKChain::ChildConstraint*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FBIKChain/Smoothing
#include "RootMotion/FinalIK/FBIKChain.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FBIKChain/Smoothing None
RootMotion::FinalIK::FBIKChain::Smoothing RootMotion::FinalIK::FBIKChain::Smoothing::_get_None() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Smoothing::_get_None");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FBIKChain::Smoothing>("RootMotion.FinalIK", "FBIKChain/Smoothing", "None"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FBIKChain/Smoothing None
void RootMotion::FinalIK::FBIKChain::Smoothing::_set_None(RootMotion::FinalIK::FBIKChain::Smoothing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Smoothing::_set_None");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FBIKChain/Smoothing", "None", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FBIKChain/Smoothing Exponential
RootMotion::FinalIK::FBIKChain::Smoothing RootMotion::FinalIK::FBIKChain::Smoothing::_get_Exponential() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Smoothing::_get_Exponential");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FBIKChain::Smoothing>("RootMotion.FinalIK", "FBIKChain/Smoothing", "Exponential"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FBIKChain/Smoothing Exponential
void RootMotion::FinalIK::FBIKChain::Smoothing::_set_Exponential(RootMotion::FinalIK::FBIKChain::Smoothing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Smoothing::_set_Exponential");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FBIKChain/Smoothing", "Exponential", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FBIKChain/Smoothing Cubic
RootMotion::FinalIK::FBIKChain::Smoothing RootMotion::FinalIK::FBIKChain::Smoothing::_get_Cubic() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Smoothing::_get_Cubic");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FBIKChain::Smoothing>("RootMotion.FinalIK", "FBIKChain/Smoothing", "Cubic"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FBIKChain/Smoothing Cubic
void RootMotion::FinalIK::FBIKChain::Smoothing::_set_Cubic(RootMotion::FinalIK::FBIKChain::Smoothing value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::Smoothing::_set_Cubic");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FBIKChain/Smoothing", "Cubic", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKConstraintBend
#include "RootMotion/FinalIK/IKConstraintBend.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.Warning/Logger
#include "RootMotion/Warning_Logger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.IsValid
bool RootMotion::FinalIK::IKConstraintBend::IsValid(RootMotion::FinalIK::IKSolverFullBody* solver, RootMotion::Warning::Logger* logger) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(logger)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, solver, logger);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.get_initiated
bool RootMotion::FinalIK::IKConstraintBend::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.set_initiated
void RootMotion::FinalIK::IKConstraintBend::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.SetBones
void RootMotion::FinalIK::IKConstraintBend::SetBones(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::SetBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone1, bone2, bone3);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.Initiate
void RootMotion::FinalIK::IKConstraintBend::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.SetLimbOrientation
void RootMotion::FinalIK::IKConstraintBend::SetLimbOrientation(UnityEngine::Vector3 upper, UnityEngine::Vector3 lower, UnityEngine::Vector3 last) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::SetLimbOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLimbOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(upper), ::il2cpp_utils::ExtractType(lower), ::il2cpp_utils::ExtractType(last)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, upper, lower, last);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.LimitBend
void RootMotion::FinalIK::IKConstraintBend::LimitBend(float solverWeight, float positionWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::LimitBend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitBend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solverWeight), ::il2cpp_utils::ExtractType(positionWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solverWeight, positionWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.GetDir
UnityEngine::Vector3 RootMotion::FinalIK::IKConstraintBend::GetDir(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::GetDir");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetDir", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.OrthoToLimb
UnityEngine::Vector3 RootMotion::FinalIK::IKConstraintBend::OrthoToLimb(RootMotion::FinalIK::IKSolverFullBody* solver, UnityEngine::Vector3 tangent) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::OrthoToLimb");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OrthoToLimb", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(tangent)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, solver, tangent);
}
// Autogenerated method: RootMotion.FinalIK.IKConstraintBend.OrthoToBone1
UnityEngine::Vector3 RootMotion::FinalIK::IKConstraintBend::OrthoToBone1(RootMotion::FinalIK::IKSolverFullBody* solver, UnityEngine::Vector3 tangent) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::OrthoToBone1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OrthoToBone1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(tangent)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, solver, tangent);
}
// Writing MetadataGetter for method: IKConstraintBend::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKConstraintBend::*)(RootMotion::FinalIK::IKSolverFullBody*, RootMotion::Warning::Logger*)>(&IKConstraintBend::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKConstraintBend*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::Warning::Logger*>()});
  }
};
// Writing MetadataGetter for method: IKConstraintBend::get_initiated
// Il2CppName: get_initiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKConstraintBend::*)()>(&IKConstraintBend::get_initiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKConstraintBend*), "get_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKConstraintBend::set_initiated
// Il2CppName: set_initiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKConstraintBend::*)(bool)>(&IKConstraintBend::set_initiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKConstraintBend*), "set_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IKConstraintBend::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKConstraintBend::*)(UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*)>(&IKConstraintBend::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKConstraintBend*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKConstraintBend::*)(UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*)>(&IKConstraintBend::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKConstraintBend*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKConstraintBend::SetBones
// Il2CppName: SetBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKConstraintBend::*)(UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*)>(&IKConstraintBend::SetBones)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKConstraintBend*), "SetBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKConstraintBend::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKConstraintBend::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKConstraintBend::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKConstraintBend*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: IKConstraintBend::SetLimbOrientation
// Il2CppName: SetLimbOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKConstraintBend::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3)>(&IKConstraintBend::SetLimbOrientation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKConstraintBend*), "SetLimbOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKConstraintBend::LimitBend
// Il2CppName: LimitBend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKConstraintBend::*)(float, float)>(&IKConstraintBend::LimitBend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKConstraintBend*), "LimitBend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKConstraintBend::GetDir
// Il2CppName: GetDir
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKConstraintBend::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKConstraintBend::GetDir)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKConstraintBend*), "GetDir", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: IKConstraintBend::OrthoToLimb
// Il2CppName: OrthoToLimb
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKConstraintBend::*)(RootMotion::FinalIK::IKSolverFullBody*, UnityEngine::Vector3)>(&IKConstraintBend::OrthoToLimb)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKConstraintBend*), "OrthoToLimb", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKConstraintBend::OrthoToBone1
// Il2CppName: OrthoToBone1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKConstraintBend::*)(RootMotion::FinalIK::IKSolverFullBody*, UnityEngine::Vector3)>(&IKConstraintBend::OrthoToBone1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKConstraintBend*), "OrthoToBone1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKConstraintBend::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKConstraintBend::*)()>(&IKConstraintBend::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKConstraintBend*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKConstraintBend::*)()>(&IKConstraintBend::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKConstraintBend*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKEffector.GetNode
RootMotion::FinalIK::IKSolver::Node* RootMotion::FinalIK::IKEffector::GetNode(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::GetNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Node*, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.get_isEndEffector
bool RootMotion::FinalIK::IKEffector::get_isEndEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::get_isEndEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isEndEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.set_isEndEffector
void RootMotion::FinalIK::IKEffector::set_isEndEffector(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::set_isEndEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isEndEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.PinToBone
void RootMotion::FinalIK::IKEffector::PinToBone(float positionWeight, float rotationWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::PinToBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PinToBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positionWeight), ::il2cpp_utils::ExtractType(rotationWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positionWeight, rotationWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.IsValid
bool RootMotion::FinalIK::IKEffector::IsValid(RootMotion::FinalIK::IKSolver* solver, ::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, solver, message);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.Initiate
void RootMotion::FinalIK::IKEffector::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.ResetOffset
void RootMotion::FinalIK::IKEffector::ResetOffset(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::ResetOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.SetToTarget
void RootMotion::FinalIK::IKEffector::SetToTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::SetToTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.OnPreSolve
void RootMotion::FinalIK::IKEffector::OnPreSolve(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::OnPreSolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.OnPostWrite
void RootMotion::FinalIK::IKEffector::OnPostWrite() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::OnPostWrite");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostWrite", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.GetPlaneRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKEffector::GetPlaneRotation(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::GetPlaneRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlaneRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.Update
void RootMotion::FinalIK::IKEffector::Update(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKEffector.GetPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKEffector::GetPosition(RootMotion::FinalIK::IKSolverFullBody* solver, UnityEngine::Quaternion& planeRotationOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKEffector::GetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, solver, planeRotationOffset);
}
// Writing MetadataGetter for method: IKEffector::GetNode
// Il2CppName: GetNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver::Node* (IKEffector::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKEffector::GetNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), "GetNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: IKEffector::get_isEndEffector
// Il2CppName: get_isEndEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKEffector::*)()>(&IKEffector::get_isEndEffector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), "get_isEndEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKEffector::set_isEndEffector
// Il2CppName: set_isEndEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKEffector::*)(bool)>(&IKEffector::set_isEndEffector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), "set_isEndEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IKEffector::PinToBone
// Il2CppName: PinToBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKEffector::*)(float, float)>(&IKEffector::PinToBone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), "PinToBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKEffector::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKEffector::*)(UnityEngine::Transform*, ::Array<UnityEngine::Transform*>*)>(&IKEffector::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKEffector::*)(UnityEngine::Transform*, ::Array<UnityEngine::Transform*>*)>(&IKEffector::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*>()});
  }
};
// Writing MetadataGetter for method: IKEffector::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKEffector::*)(RootMotion::FinalIK::IKSolver*, ::Il2CppString*&)>(&IKEffector::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolver*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKEffector::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKEffector::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKEffector::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: IKEffector::ResetOffset
// Il2CppName: ResetOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKEffector::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKEffector::ResetOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), "ResetOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: IKEffector::SetToTarget
// Il2CppName: SetToTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKEffector::*)()>(&IKEffector::SetToTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), "SetToTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKEffector::OnPreSolve
// Il2CppName: OnPreSolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKEffector::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKEffector::OnPreSolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), "OnPreSolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: IKEffector::OnPostWrite
// Il2CppName: OnPostWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKEffector::*)()>(&IKEffector::OnPostWrite)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), "OnPostWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKEffector::GetPlaneRotation
// Il2CppName: GetPlaneRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKEffector::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKEffector::GetPlaneRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), "GetPlaneRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: IKEffector::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKEffector::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKEffector::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: IKEffector::GetPosition
// Il2CppName: GetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKEffector::*)(RootMotion::FinalIK::IKSolverFullBody*, UnityEngine::Quaternion&)>(&IKEffector::GetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), "GetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>()});
  }
};
// Writing MetadataGetter for method: IKEffector::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKEffector::*)()>(&IKEffector::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKEffector::*)()>(&IKEffector::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKEffector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKMapping
#include "RootMotion/FinalIK/IKMapping.hpp"
// Including type: RootMotion.FinalIK.IKMapping/BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.Warning/Logger
#include "RootMotion/Warning_Logger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKMapping.IsValid
bool RootMotion::FinalIK::IKMapping::IsValid(RootMotion::FinalIK::IKSolver* solver, ::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, solver, message);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping.Initiate
void RootMotion::FinalIK::IKMapping::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::Initiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping.BoneIsValid
bool RootMotion::FinalIK::IKMapping::BoneIsValid(UnityEngine::Transform* bone, RootMotion::FinalIK::IKSolver* solver, ::Il2CppString*& message, RootMotion::Warning::Logger* logger) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BoneIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message), ::il2cpp_utils::ExtractType(logger)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bone, solver, message, logger);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping.SolveFABRIKJoint
UnityEngine::Vector3 RootMotion::FinalIK::IKMapping::SolveFABRIKJoint(UnityEngine::Vector3 pos1, UnityEngine::Vector3 pos2, float length) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::SolveFABRIKJoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveFABRIKJoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, pos1, pos2, length);
}
// Writing MetadataGetter for method: IKMapping::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKMapping::*)(RootMotion::FinalIK::IKSolver*, ::Il2CppString*&)>(&IKMapping::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolver*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKMapping::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKMapping::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneIsValid
// Il2CppName: BoneIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKMapping::*)(UnityEngine::Transform*, RootMotion::FinalIK::IKSolver*, ::Il2CppString*&, RootMotion::Warning::Logger*)>(&IKMapping::BoneIsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping*), "BoneIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolver*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::Warning::Logger*>()});
  }
};
// Writing MetadataGetter for method: IKMapping::SolveFABRIKJoint
// Il2CppName: SolveFABRIKJoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKMapping::*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&IKMapping::SolveFABRIKJoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping*), "SolveFABRIKJoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKMapping::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::*)()>(&IKMapping::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::*)()>(&IKMapping::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKMapping/BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.Initiate
void RootMotion::FinalIK::IKMapping::BoneMap::Initiate(UnityEngine::Transform* transform, RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transform, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.get_swingDirection
UnityEngine::Vector3 RootMotion::FinalIK::IKMapping::BoneMap::get_swingDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::get_swingDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_swingDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.StoreDefaultLocalState
void RootMotion::FinalIK::IKMapping::BoneMap::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.FixTransform
void RootMotion::FinalIK::IKMapping::BoneMap::FixTransform(bool position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::FixTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.get_isNodeBone
bool RootMotion::FinalIK::IKMapping::BoneMap::get_isNodeBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::get_isNodeBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isNodeBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.SetLength
void RootMotion::FinalIK::IKMapping::BoneMap::SetLength(RootMotion::FinalIK::IKMapping::BoneMap* nextBone) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::SetLength");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLength", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(nextBone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, nextBone);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.SetLocalSwingAxis
void RootMotion::FinalIK::IKMapping::BoneMap::SetLocalSwingAxis(RootMotion::FinalIK::IKMapping::BoneMap* swingTarget) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::SetLocalSwingAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalSwingAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(swingTarget)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, swingTarget);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.SetLocalSwingAxis
void RootMotion::FinalIK::IKMapping::BoneMap::SetLocalSwingAxis(RootMotion::FinalIK::IKMapping::BoneMap* bone1, RootMotion::FinalIK::IKMapping::BoneMap* bone2) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::SetLocalSwingAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalSwingAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone1, bone2);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.SetLocalTwistAxis
void RootMotion::FinalIK::IKMapping::BoneMap::SetLocalTwistAxis(UnityEngine::Vector3 twistDirection, UnityEngine::Vector3 normalDirection) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::SetLocalTwistAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLocalTwistAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(twistDirection), ::il2cpp_utils::ExtractType(normalDirection)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, twistDirection, normalDirection);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.SetPlane
void RootMotion::FinalIK::IKMapping::BoneMap::SetPlane(RootMotion::FinalIK::IKSolverFullBody* solver, UnityEngine::Transform* planeBone1, UnityEngine::Transform* planeBone2, UnityEngine::Transform* planeBone3) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::SetPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(planeBone1), ::il2cpp_utils::ExtractType(planeBone2), ::il2cpp_utils::ExtractType(planeBone3)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, planeBone1, planeBone2, planeBone3);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.UpdatePlane
void RootMotion::FinalIK::IKMapping::BoneMap::UpdatePlane(bool rotation, bool position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::UpdatePlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdatePlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rotation, position);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.SetIKPosition
void RootMotion::FinalIK::IKMapping::BoneMap::SetIKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::SetIKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.MaintainRotation
void RootMotion::FinalIK::IKMapping::BoneMap::MaintainRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::MaintainRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MaintainRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.SetToIKPosition
void RootMotion::FinalIK::IKMapping::BoneMap::SetToIKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::SetToIKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.FixToNode
void RootMotion::FinalIK::IKMapping::BoneMap::FixToNode(RootMotion::FinalIK::IKSolverFullBody* solver, float weight, RootMotion::FinalIK::IKSolver::Node* fixNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::FixToNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixToNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(fixNode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, weight, fixNode);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.GetPlanePosition
UnityEngine::Vector3 RootMotion::FinalIK::IKMapping::BoneMap::GetPlanePosition(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::GetPlanePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPlanePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.PositionToPlane
void RootMotion::FinalIK::IKMapping::BoneMap::PositionToPlane(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::PositionToPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PositionToPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.RotateToPlane
void RootMotion::FinalIK::IKMapping::BoneMap::RotateToPlane(RootMotion::FinalIK::IKSolverFullBody* solver, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::RotateToPlane");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateToPlane", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.Swing
void RootMotion::FinalIK::IKMapping::BoneMap::Swing(UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::Swing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Swing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(swingTarget), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.Swing
void RootMotion::FinalIK::IKMapping::BoneMap::Swing(UnityEngine::Vector3 pos1, UnityEngine::Vector3 pos2, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::Swing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Swing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pos1, pos2, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.Twist
void RootMotion::FinalIK::IKMapping::BoneMap::Twist(UnityEngine::Vector3 twistDirection, UnityEngine::Vector3 normalDirection, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::Twist");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Twist", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(twistDirection), ::il2cpp_utils::ExtractType(normalDirection), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, twistDirection, normalDirection, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.RotateToMaintain
void RootMotion::FinalIK::IKMapping::BoneMap::RotateToMaintain(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::RotateToMaintain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateToMaintain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.RotateToEffector
void RootMotion::FinalIK::IKMapping::BoneMap::RotateToEffector(RootMotion::FinalIK::IKSolverFullBody* solver, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::RotateToEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateToEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.GetTargetRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKMapping::BoneMap::GetTargetRotation(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::GetTargetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTargetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMapping/BoneMap.get_lastAnimatedTargetRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKMapping::BoneMap::get_lastAnimatedTargetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMapping::BoneMap::get_lastAnimatedTargetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lastAnimatedTargetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKMapping::BoneMap::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(UnityEngine::Transform*, RootMotion::FinalIK::IKSolverFullBody*)>(&IKMapping::BoneMap::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::get_swingDirection
// Il2CppName: get_swingDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKMapping::BoneMap::*)()>(&IKMapping::BoneMap::get_swingDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "get_swingDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)()>(&IKMapping::BoneMap::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::FixTransform
// Il2CppName: FixTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(bool)>(&IKMapping::BoneMap::FixTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "FixTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::get_isNodeBone
// Il2CppName: get_isNodeBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKMapping::BoneMap::*)()>(&IKMapping::BoneMap::get_isNodeBone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "get_isNodeBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(RootMotion::FinalIK::IKMapping::BoneMap*)>(&IKMapping::BoneMap::SetLength)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKMapping::BoneMap*>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::SetLocalSwingAxis
// Il2CppName: SetLocalSwingAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(RootMotion::FinalIK::IKMapping::BoneMap*)>(&IKMapping::BoneMap::SetLocalSwingAxis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "SetLocalSwingAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKMapping::BoneMap*>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::SetLocalSwingAxis
// Il2CppName: SetLocalSwingAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(RootMotion::FinalIK::IKMapping::BoneMap*, RootMotion::FinalIK::IKMapping::BoneMap*)>(&IKMapping::BoneMap::SetLocalSwingAxis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "SetLocalSwingAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKMapping::BoneMap*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKMapping::BoneMap*>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::SetLocalTwistAxis
// Il2CppName: SetLocalTwistAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&IKMapping::BoneMap::SetLocalTwistAxis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "SetLocalTwistAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::SetPlane
// Il2CppName: SetPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(RootMotion::FinalIK::IKSolverFullBody*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*)>(&IKMapping::BoneMap::SetPlane)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "SetPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::UpdatePlane
// Il2CppName: UpdatePlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(bool, bool)>(&IKMapping::BoneMap::UpdatePlane)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "UpdatePlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::SetIKPosition
// Il2CppName: SetIKPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)()>(&IKMapping::BoneMap::SetIKPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "SetIKPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::MaintainRotation
// Il2CppName: MaintainRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)()>(&IKMapping::BoneMap::MaintainRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "MaintainRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::SetToIKPosition
// Il2CppName: SetToIKPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)()>(&IKMapping::BoneMap::SetToIKPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "SetToIKPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::FixToNode
// Il2CppName: FixToNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(RootMotion::FinalIK::IKSolverFullBody*, float, RootMotion::FinalIK::IKSolver::Node*)>(&IKMapping::BoneMap::FixToNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "FixToNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolver::Node*>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::GetPlanePosition
// Il2CppName: GetPlanePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKMapping::BoneMap::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKMapping::BoneMap::GetPlanePosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "GetPlanePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::PositionToPlane
// Il2CppName: PositionToPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKMapping::BoneMap::PositionToPlane)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "PositionToPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::RotateToPlane
// Il2CppName: RotateToPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(RootMotion::FinalIK::IKSolverFullBody*, float)>(&IKMapping::BoneMap::RotateToPlane)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "RotateToPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::Swing
// Il2CppName: Swing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(UnityEngine::Vector3, float)>(&IKMapping::BoneMap::Swing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "Swing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::Swing
// Il2CppName: Swing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&IKMapping::BoneMap::Swing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "Swing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::Twist
// Il2CppName: Twist
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&IKMapping::BoneMap::Twist)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "Twist", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::RotateToMaintain
// Il2CppName: RotateToMaintain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(float)>(&IKMapping::BoneMap::RotateToMaintain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "RotateToMaintain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::RotateToEffector
// Il2CppName: RotateToEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)(RootMotion::FinalIK::IKSolverFullBody*, float)>(&IKMapping::BoneMap::RotateToEffector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "RotateToEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::GetTargetRotation
// Il2CppName: GetTargetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKMapping::BoneMap::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKMapping::BoneMap::GetTargetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "GetTargetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::get_lastAnimatedTargetRotation
// Il2CppName: get_lastAnimatedTargetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKMapping::BoneMap::*)()>(&IKMapping::BoneMap::get_lastAnimatedTargetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), "get_lastAnimatedTargetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMapping::BoneMap::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)()>(&IKMapping::BoneMap::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMapping::BoneMap::*)()>(&IKMapping::BoneMap::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMapping::BoneMap*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKMappingBone
#include "RootMotion/FinalIK/IKMappingBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.FinalIK.IKMapping/BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.StoreDefaultLocalState
void RootMotion::FinalIK::IKMappingBone::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingBone::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.FixTransforms
void RootMotion::FinalIK::IKMappingBone::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingBone::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.ReadPose
void RootMotion::FinalIK::IKMappingBone::ReadPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingBone::ReadPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.WritePose
void RootMotion::FinalIK::IKMappingBone::WritePose(float solverWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingBone::WritePose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solverWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solverWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.IsValid
bool RootMotion::FinalIK::IKMappingBone::IsValid(RootMotion::FinalIK::IKSolver* solver, ::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingBone::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, solver, message);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingBone.Initiate
void RootMotion::FinalIK::IKMappingBone::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingBone::Initiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Writing MetadataGetter for method: IKMappingBone::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingBone::*)(UnityEngine::Transform*)>(&IKMappingBone::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingBone::*)(UnityEngine::Transform*)>(&IKMappingBone::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKMappingBone::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingBone::*)()>(&IKMappingBone::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingBone*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMappingBone::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingBone::*)()>(&IKMappingBone::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingBone*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMappingBone::ReadPose
// Il2CppName: ReadPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingBone::*)()>(&IKMappingBone::ReadPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingBone*), "ReadPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMappingBone::WritePose
// Il2CppName: WritePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingBone::*)(float)>(&IKMappingBone::WritePose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingBone*), "WritePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKMappingBone::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKMappingBone::*)(RootMotion::FinalIK::IKSolver*, ::Il2CppString*&)>(&IKMappingBone::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingBone*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolver*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKMappingBone::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingBone::*)()>(&IKMappingBone::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingBone::*)()>(&IKMappingBone::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMappingBone::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingBone::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKMappingBone::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingBone*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKMappingLimb
#include "RootMotion/FinalIK/IKMappingLimb.hpp"
// Including type: RootMotion.FinalIK.IKMappingLimb/BoneMapType
#include "RootMotion/FinalIK/IKMappingLimb_BoneMapType.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKMapping/BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.GetBoneMap
RootMotion::FinalIK::IKMapping::BoneMap* RootMotion::FinalIK::IKMappingLimb::GetBoneMap(RootMotion::FinalIK::IKMappingLimb::BoneMapType boneMap) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::GetBoneMap");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBoneMap", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(boneMap)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMapping::BoneMap*, false>(this, ___internal__method, boneMap);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.SetLimbOrientation
void RootMotion::FinalIK::IKMappingLimb::SetLimbOrientation(UnityEngine::Vector3 upper, UnityEngine::Vector3 lower) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::SetLimbOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLimbOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(upper), ::il2cpp_utils::ExtractType(lower)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, upper, lower);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.SetBones
void RootMotion::FinalIK::IKMappingLimb::SetBones(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, UnityEngine::Transform* parentBone) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::SetBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(parentBone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone1, bone2, bone3, parentBone);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.StoreDefaultLocalState
void RootMotion::FinalIK::IKMappingLimb::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.FixTransforms
void RootMotion::FinalIK::IKMappingLimb::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.ReadPose
void RootMotion::FinalIK::IKMappingLimb::ReadPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::ReadPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.WritePose
void RootMotion::FinalIK::IKMappingLimb::WritePose(RootMotion::FinalIK::IKSolverFullBody* solver, bool fullBody) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::WritePose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(fullBody)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, fullBody);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.IsValid
bool RootMotion::FinalIK::IKMappingLimb::IsValid(RootMotion::FinalIK::IKSolver* solver, ::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, solver, message);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingLimb.Initiate
void RootMotion::FinalIK::IKMappingLimb::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::Initiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Writing MetadataGetter for method: IKMappingLimb::GetBoneMap
// Il2CppName: GetBoneMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKMapping::BoneMap* (IKMappingLimb::*)(RootMotion::FinalIK::IKMappingLimb::BoneMapType)>(&IKMappingLimb::GetBoneMap)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingLimb*), "GetBoneMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKMappingLimb::BoneMapType>()});
  }
};
// Writing MetadataGetter for method: IKMappingLimb::SetLimbOrientation
// Il2CppName: SetLimbOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingLimb::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&IKMappingLimb::SetLimbOrientation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingLimb*), "SetLimbOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKMappingLimb::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingLimb::*)(UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*)>(&IKMappingLimb::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingLimb*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingLimb::*)(UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*)>(&IKMappingLimb::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingLimb*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKMappingLimb::SetBones
// Il2CppName: SetBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingLimb::*)(UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*)>(&IKMappingLimb::SetBones)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingLimb*), "SetBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKMappingLimb::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingLimb::*)()>(&IKMappingLimb::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingLimb*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMappingLimb::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingLimb::*)()>(&IKMappingLimb::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingLimb*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMappingLimb::ReadPose
// Il2CppName: ReadPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingLimb::*)()>(&IKMappingLimb::ReadPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingLimb*), "ReadPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMappingLimb::WritePose
// Il2CppName: WritePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingLimb::*)(RootMotion::FinalIK::IKSolverFullBody*, bool)>(&IKMappingLimb::WritePose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingLimb*), "WritePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IKMappingLimb::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKMappingLimb::*)(RootMotion::FinalIK::IKSolver*, ::Il2CppString*&)>(&IKMappingLimb::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingLimb*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolver*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKMappingLimb::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingLimb::*)()>(&IKMappingLimb::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingLimb*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingLimb::*)()>(&IKMappingLimb::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingLimb*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMappingLimb::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingLimb::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKMappingLimb::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingLimb*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKMappingLimb/BoneMapType
#include "RootMotion/FinalIK/IKMappingLimb_BoneMapType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKMappingLimb/BoneMapType Parent
RootMotion::FinalIK::IKMappingLimb::BoneMapType RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Parent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKMappingLimb::BoneMapType>("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Parent"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKMappingLimb/BoneMapType Parent
void RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Parent(RootMotion::FinalIK::IKMappingLimb::BoneMapType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Parent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Parent", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKMappingLimb/BoneMapType Bone1
RootMotion::FinalIK::IKMappingLimb::BoneMapType RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone1() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone1");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKMappingLimb::BoneMapType>("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone1"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKMappingLimb/BoneMapType Bone1
void RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone1(RootMotion::FinalIK::IKMappingLimb::BoneMapType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone1");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone1", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKMappingLimb/BoneMapType Bone2
RootMotion::FinalIK::IKMappingLimb::BoneMapType RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone2() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone2");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKMappingLimb::BoneMapType>("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone2"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKMappingLimb/BoneMapType Bone2
void RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone2(RootMotion::FinalIK::IKMappingLimb::BoneMapType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone2");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone2", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKMappingLimb/BoneMapType Bone3
RootMotion::FinalIK::IKMappingLimb::BoneMapType RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone3() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_get_Bone3");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKMappingLimb::BoneMapType>("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone3"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKMappingLimb/BoneMapType Bone3
void RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone3(RootMotion::FinalIK::IKMappingLimb::BoneMapType value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingLimb::BoneMapType::_set_Bone3");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKMappingLimb/BoneMapType", "Bone3", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKMappingSpine
#include "RootMotion/FinalIK/IKMappingSpine.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKMapping/BoneMap
#include "RootMotion/FinalIK/IKMapping_BoneMap.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.SetBones
void RootMotion::FinalIK::IKMappingSpine::SetBones(::Array<UnityEngine::Transform*>* spineBones, UnityEngine::Transform* leftUpperArmBone, UnityEngine::Transform* rightUpperArmBone, UnityEngine::Transform* leftThighBone, UnityEngine::Transform* rightThighBone) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::SetBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spineBones), ::il2cpp_utils::ExtractType(leftUpperArmBone), ::il2cpp_utils::ExtractType(rightUpperArmBone), ::il2cpp_utils::ExtractType(leftThighBone), ::il2cpp_utils::ExtractType(rightThighBone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, spineBones, leftUpperArmBone, rightUpperArmBone, leftThighBone, rightThighBone);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.StoreDefaultLocalState
void RootMotion::FinalIK::IKMappingSpine::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.FixTransforms
void RootMotion::FinalIK::IKMappingSpine::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::FixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.UseFABRIK
bool RootMotion::FinalIK::IKMappingSpine::UseFABRIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::UseFABRIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UseFABRIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.ReadPose
void RootMotion::FinalIK::IKMappingSpine::ReadPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::ReadPose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.WritePose
void RootMotion::FinalIK::IKMappingSpine::WritePose(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::WritePose");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.ForwardReach
void RootMotion::FinalIK::IKMappingSpine::ForwardReach(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::ForwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.BackwardReach
void RootMotion::FinalIK::IKMappingSpine::BackwardReach(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::BackwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.MapToSolverPositions
void RootMotion::FinalIK::IKMappingSpine::MapToSolverPositions(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::MapToSolverPositions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MapToSolverPositions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.IsValid
bool RootMotion::FinalIK::IKMappingSpine::IsValid(RootMotion::FinalIK::IKSolver* solver, ::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, solver, message);
}
// Autogenerated method: RootMotion.FinalIK.IKMappingSpine.Initiate
void RootMotion::FinalIK::IKMappingSpine::Initiate(RootMotion::FinalIK::IKSolverFullBody* solver) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::Initiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver);
}
// Writing MetadataGetter for method: IKMappingSpine::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingSpine::*)(::Array<UnityEngine::Transform*>*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*)>(&IKMappingSpine::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingSpine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingSpine::*)(::Array<UnityEngine::Transform*>*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*)>(&IKMappingSpine::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingSpine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKMappingSpine::SetBones
// Il2CppName: SetBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingSpine::*)(::Array<UnityEngine::Transform*>*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*)>(&IKMappingSpine::SetBones)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingSpine*), "SetBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKMappingSpine::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingSpine::*)()>(&IKMappingSpine::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingSpine*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMappingSpine::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingSpine::*)()>(&IKMappingSpine::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingSpine*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMappingSpine::UseFABRIK
// Il2CppName: UseFABRIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKMappingSpine::*)()>(&IKMappingSpine::UseFABRIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingSpine*), "UseFABRIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMappingSpine::ReadPose
// Il2CppName: ReadPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingSpine::*)()>(&IKMappingSpine::ReadPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingSpine*), "ReadPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMappingSpine::WritePose
// Il2CppName: WritePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingSpine::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKMappingSpine::WritePose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingSpine*), "WritePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: IKMappingSpine::ForwardReach
// Il2CppName: ForwardReach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingSpine::*)(UnityEngine::Vector3)>(&IKMappingSpine::ForwardReach)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingSpine*), "ForwardReach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKMappingSpine::BackwardReach
// Il2CppName: BackwardReach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingSpine::*)(UnityEngine::Vector3)>(&IKMappingSpine::BackwardReach)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingSpine*), "BackwardReach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKMappingSpine::MapToSolverPositions
// Il2CppName: MapToSolverPositions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingSpine::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKMappingSpine::MapToSolverPositions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingSpine*), "MapToSolverPositions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Writing MetadataGetter for method: IKMappingSpine::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKMappingSpine::*)(RootMotion::FinalIK::IKSolver*, ::Il2CppString*&)>(&IKMappingSpine::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingSpine*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolver*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKMappingSpine::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingSpine::*)()>(&IKMappingSpine::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingSpine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingSpine::*)()>(&IKMappingSpine::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingSpine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKMappingSpine::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKMappingSpine::*)(RootMotion::FinalIK::IKSolverFullBody*)>(&IKMappingSpine::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKMappingSpine*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBody*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Bone
#include "RootMotion/FinalIK/IKSolver_Bone.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
// Including type: RootMotion.FinalIK.IKSolver/UpdateDelegate
#include "RootMotion/FinalIK/IKSolver_UpdateDelegate.hpp"
// Including type: RootMotion.FinalIK.IKSolver/IterationDelegate
#include "RootMotion/FinalIK/IKSolver_IterationDelegate.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolver.IsValid
bool RootMotion::FinalIK::IKSolver::IsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.IsValid
bool RootMotion::FinalIK::IKSolver::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.Initiate
void RootMotion::FinalIK::IKSolver::Initiate(UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.Update
void RootMotion::FinalIK::IKSolver::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.GetIKPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolver::GetIKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::GetIKPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.SetIKPosition
void RootMotion::FinalIK::IKSolver::SetIKPosition(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::SetIKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.GetIKPositionWeight
float RootMotion::FinalIK::IKSolver::GetIKPositionWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::GetIKPositionWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKPositionWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.SetIKPositionWeight
void RootMotion::FinalIK::IKSolver::SetIKPositionWeight(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::SetIKPositionWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKPositionWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.GetRoot
UnityEngine::Transform* RootMotion::FinalIK::IKSolver::GetRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::GetRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.get_initiated
bool RootMotion::FinalIK::IKSolver::get_initiated() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::get_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.set_initiated
void RootMotion::FinalIK::IKSolver::set_initiated(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::set_initiated");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_initiated", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolver::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolver::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.FixTransforms
void RootMotion::FinalIK::IKSolver::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolver::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.OnInitiate
void RootMotion::FinalIK::IKSolver::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.OnUpdate
void RootMotion::FinalIK::IKSolver::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.LogWarning
void RootMotion::FinalIK::IKSolver::LogWarning(::Il2CppString* message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::LogWarning");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LogWarning", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.ContainsDuplicateBone
UnityEngine::Transform* RootMotion::FinalIK::IKSolver::ContainsDuplicateBone(::Array<RootMotion::FinalIK::IKSolver::Bone*>* bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::ContainsDuplicateBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolver", "ContainsDuplicateBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.HierarchyIsValid
bool RootMotion::FinalIK::IKSolver::HierarchyIsValid(::Array<RootMotion::FinalIK::IKSolver::Bone*>* bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::HierarchyIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolver", "HierarchyIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver.PreSolveBones
float RootMotion::FinalIK::IKSolver::PreSolveBones(::Array<RootMotion::FinalIK::IKSolver::Bone*>*& bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::PreSolveBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolver", "PreSolveBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones);
}
// Writing MetadataGetter for method: IKSolver::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolver::*)()>(&IKSolver::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolver::*)(::Il2CppString*&)>(&IKSolver::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKSolver::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)(UnityEngine::Transform*)>(&IKSolver::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolver::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)()>(&IKSolver::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::GetIKPosition
// Il2CppName: GetIKPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolver::*)()>(&IKSolver::GetIKPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "GetIKPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::SetIKPosition
// Il2CppName: SetIKPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)(UnityEngine::Vector3)>(&IKSolver::SetIKPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "SetIKPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolver::GetIKPositionWeight
// Il2CppName: GetIKPositionWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IKSolver::*)()>(&IKSolver::GetIKPositionWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "GetIKPositionWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::SetIKPositionWeight
// Il2CppName: SetIKPositionWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)(float)>(&IKSolver::SetIKPositionWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "SetIKPositionWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolver::GetRoot
// Il2CppName: GetRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (IKSolver::*)()>(&IKSolver::GetRoot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "GetRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::get_initiated
// Il2CppName: get_initiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolver::*)()>(&IKSolver::get_initiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "get_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::set_initiated
// Il2CppName: set_initiated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)(bool)>(&IKSolver::set_initiated)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "set_initiated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IKSolver::GetPoints
// Il2CppName: GetPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<RootMotion::FinalIK::IKSolver::Point*>* (IKSolver::*)()>(&IKSolver::GetPoints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "GetPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver::Point* (IKSolver::*)(UnityEngine::Transform*)>(&IKSolver::GetPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolver::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)()>(&IKSolver::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)()>(&IKSolver::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::OnInitiate
// Il2CppName: OnInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)()>(&IKSolver::OnInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "OnInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)()>(&IKSolver::OnUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)(::Il2CppString*)>(&IKSolver::LogWarning)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: IKSolver::ContainsDuplicateBone
// Il2CppName: ContainsDuplicateBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (*)(::Array<RootMotion::FinalIK::IKSolver::Bone*>*)>(&IKSolver::ContainsDuplicateBone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "ContainsDuplicateBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolver::Bone*>*>()});
  }
};
// Writing MetadataGetter for method: IKSolver::HierarchyIsValid
// Il2CppName: HierarchyIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Array<RootMotion::FinalIK::IKSolver::Bone*>*)>(&IKSolver::HierarchyIsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "HierarchyIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolver::Bone*>*>()});
  }
};
// Writing MetadataGetter for method: IKSolver::PreSolveBones
// Il2CppName: PreSolveBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Array<RootMotion::FinalIK::IKSolver::Bone*>*&)>(&IKSolver::PreSolveBones)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), "PreSolveBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolver::Bone*>*&>()});
  }
};
// Writing MetadataGetter for method: IKSolver::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)()>(&IKSolver::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::*)()>(&IKSolver::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolver/Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolver/Point.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolver::Point::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Point::StoreDefaultLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/Point.FixTransform
void RootMotion::FinalIK::IKSolver::Point::FixTransform() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Point::FixTransform");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/Point.UpdateSolverPosition
void RootMotion::FinalIK::IKSolver::Point::UpdateSolverPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Point::UpdateSolverPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/Point.UpdateSolverLocalPosition
void RootMotion::FinalIK::IKSolver::Point::UpdateSolverLocalPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Point::UpdateSolverLocalPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverLocalPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/Point.UpdateSolverState
void RootMotion::FinalIK::IKSolver::Point::UpdateSolverState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Point::UpdateSolverState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/Point.UpdateSolverLocalState
void RootMotion::FinalIK::IKSolver::Point::UpdateSolverLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Point::UpdateSolverLocalState");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolver::Point::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Point::*)()>(&IKSolver::Point::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Point*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::Point::FixTransform
// Il2CppName: FixTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Point::*)()>(&IKSolver::Point::FixTransform)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Point*), "FixTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::Point::UpdateSolverPosition
// Il2CppName: UpdateSolverPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Point::*)()>(&IKSolver::Point::UpdateSolverPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Point*), "UpdateSolverPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::Point::UpdateSolverLocalPosition
// Il2CppName: UpdateSolverLocalPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Point::*)()>(&IKSolver::Point::UpdateSolverLocalPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Point*), "UpdateSolverLocalPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::Point::UpdateSolverState
// Il2CppName: UpdateSolverState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Point::*)()>(&IKSolver::Point::UpdateSolverState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Point*), "UpdateSolverState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::Point::UpdateSolverLocalState
// Il2CppName: UpdateSolverLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Point::*)()>(&IKSolver::Point::UpdateSolverLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Point*), "UpdateSolverLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::Point::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Point::*)()>(&IKSolver::Point::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Point*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Point::*)()>(&IKSolver::Point::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Point*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolver/Bone
#include "RootMotion/FinalIK/IKSolver_Bone.hpp"
// Including type: RootMotion.FinalIK.RotationLimit
#include "RootMotion/FinalIK/RotationLimit.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolver/Bone.get_rotationLimit
RootMotion::FinalIK::RotationLimit* RootMotion::FinalIK::IKSolver::Bone::get_rotationLimit() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Bone::get_rotationLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotationLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::RotationLimit*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/Bone.set_rotationLimit
void RootMotion::FinalIK::IKSolver::Bone::set_rotationLimit(RootMotion::FinalIK::RotationLimit* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Bone::set_rotationLimit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rotationLimit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/Bone.Swing
void RootMotion::FinalIK::IKSolver::Bone::Swing(UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Bone::Swing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Swing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(swingTarget), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/Bone.SolverSwing
void RootMotion::FinalIK::IKSolver::Bone::SolverSwing(::Array<RootMotion::FinalIK::IKSolver::Bone*>* bones, int index, UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Bone::SolverSwing");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolver/Bone", "SolverSwing", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(swingTarget), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, index, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/Bone.Swing2D
void RootMotion::FinalIK::IKSolver::Bone::Swing2D(UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Bone::Swing2D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Swing2D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(swingTarget), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/Bone.SetToSolverPosition
void RootMotion::FinalIK::IKSolver::Bone::SetToSolverPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::Bone::SetToSolverPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToSolverPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolver::Bone::get_rotationLimit
// Il2CppName: get_rotationLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::RotationLimit* (IKSolver::Bone::*)()>(&IKSolver::Bone::get_rotationLimit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Bone*), "get_rotationLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::Bone::set_rotationLimit
// Il2CppName: set_rotationLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Bone::*)(RootMotion::FinalIK::RotationLimit*)>(&IKSolver::Bone::set_rotationLimit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Bone*), "set_rotationLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::RotationLimit*>()});
  }
};
// Writing MetadataGetter for method: IKSolver::Bone::Swing
// Il2CppName: Swing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Bone::*)(UnityEngine::Vector3, float)>(&IKSolver::Bone::Swing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Bone*), "Swing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolver::Bone::SolverSwing
// Il2CppName: SolverSwing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<RootMotion::FinalIK::IKSolver::Bone*>*, int, UnityEngine::Vector3, float)>(&IKSolver::Bone::SolverSwing)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Bone*), "SolverSwing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolver::Bone*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolver::Bone::Swing2D
// Il2CppName: Swing2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Bone::*)(UnityEngine::Vector3, float)>(&IKSolver::Bone::Swing2D)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Bone*), "Swing2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolver::Bone::SetToSolverPosition
// Il2CppName: SetToSolverPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Bone::*)()>(&IKSolver::Bone::SetToSolverPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Bone*), "SetToSolverPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::Bone::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Bone::*)(UnityEngine::Transform*)>(&IKSolver::Bone::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Bone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Bone::*)(UnityEngine::Transform*)>(&IKSolver::Bone::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Bone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolver::Bone::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Bone::*)(UnityEngine::Transform*, float)>(&IKSolver::Bone::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Bone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Bone::*)(UnityEngine::Transform*, float)>(&IKSolver::Bone::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Bone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolver::Bone::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Bone::*)()>(&IKSolver::Bone::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Bone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Bone::*)()>(&IKSolver::Bone::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Bone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolver/Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: IKSolver::Node::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Node::*)(UnityEngine::Transform*)>(&IKSolver::Node::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Node*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Node::*)(UnityEngine::Transform*)>(&IKSolver::Node::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Node*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolver::Node::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Node::*)(UnityEngine::Transform*, float)>(&IKSolver::Node::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Node*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Node::*)(UnityEngine::Transform*, float)>(&IKSolver::Node::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Node*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolver::Node::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Node::*)()>(&IKSolver::Node::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Node*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::Node::*)()>(&IKSolver::Node::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::Node*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolver/UpdateDelegate
#include "RootMotion/FinalIK/IKSolver_UpdateDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolver/UpdateDelegate.Invoke
void RootMotion::FinalIK::IKSolver::UpdateDelegate::Invoke() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::UpdateDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/UpdateDelegate.BeginInvoke
System::IAsyncResult* RootMotion::FinalIK::IKSolver::UpdateDelegate::BeginInvoke(System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::UpdateDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, callback, object);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/UpdateDelegate.EndInvoke
void RootMotion::FinalIK::IKSolver::UpdateDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::UpdateDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IKSolver::UpdateDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::UpdateDelegate::*)(::Il2CppObject*, System::IntPtr)>(&IKSolver::UpdateDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::UpdateDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::UpdateDelegate::*)(::Il2CppObject*, System::IntPtr)>(&IKSolver::UpdateDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::UpdateDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IKSolver::UpdateDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::UpdateDelegate::*)()>(&IKSolver::UpdateDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::UpdateDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolver::UpdateDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IKSolver::UpdateDelegate::*)(System::AsyncCallback*, ::Il2CppObject*)>(&IKSolver::UpdateDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::UpdateDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IKSolver::UpdateDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::UpdateDelegate::*)(System::IAsyncResult*)>(&IKSolver::UpdateDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::UpdateDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolver/IterationDelegate
#include "RootMotion/FinalIK/IKSolver_IterationDelegate.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolver/IterationDelegate.Invoke
void RootMotion::FinalIK::IKSolver::IterationDelegate::Invoke(int i) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::IterationDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, i);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/IterationDelegate.BeginInvoke
System::IAsyncResult* RootMotion::FinalIK::IKSolver::IterationDelegate::BeginInvoke(int i, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::IterationDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, i, callback, object);
}
// Autogenerated method: RootMotion.FinalIK.IKSolver/IterationDelegate.EndInvoke
void RootMotion::FinalIK::IKSolver::IterationDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolver::IterationDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: IKSolver::IterationDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::IterationDelegate::*)(::Il2CppObject*, System::IntPtr)>(&IKSolver::IterationDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::IterationDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::IterationDelegate::*)(::Il2CppObject*, System::IntPtr)>(&IKSolver::IterationDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::IterationDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: IKSolver::IterationDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::IterationDelegate::*)(int)>(&IKSolver::IterationDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::IterationDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IKSolver::IterationDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (IKSolver::IterationDelegate::*)(int, System::AsyncCallback*, ::Il2CppObject*)>(&IKSolver::IterationDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::IterationDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: IKSolver::IterationDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolver::IterationDelegate::*)(System::IAsyncResult*)>(&IKSolver::IterationDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolver::IterationDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverAim
#include "RootMotion/FinalIK/IKSolverAim.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.RotationLimit
#include "RootMotion/FinalIK/RotationLimit.hpp"
// Including type: RootMotion.FinalIK.IKSolver/IterationDelegate
#include "RootMotion/FinalIK/IKSolver_IterationDelegate.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Bone
#include "RootMotion/FinalIK/IKSolver_Bone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.GetAngle
float RootMotion::FinalIK::IKSolverAim::GetAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::GetAngle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.get_transformAxis
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverAim::get_transformAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::get_transformAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transformAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.get_transformPoleAxis
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverAim::get_transformPoleAxis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::get_transformPoleAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_transformPoleAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.Solve
void RootMotion::FinalIK::IKSolverAim::Solve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.GetClampedIKPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverAim::GetClampedIKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::GetClampedIKPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClampedIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.RotateToTarget
void RootMotion::FinalIK::IKSolverAim::RotateToTarget(UnityEngine::Vector3 targetPosition, RootMotion::FinalIK::IKSolver::Bone* bone, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::RotateToTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateToTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetPosition), ::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetPosition, bone, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.OnInitiate
void RootMotion::FinalIK::IKSolverAim::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.OnUpdate
void RootMotion::FinalIK::IKSolverAim::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.get_minBones
int RootMotion::FinalIK::IKSolverAim::get_minBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::get_minBones");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_minBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverAim.get_localDirection
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverAim::get_localDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverAim::get_localDirection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverAim::GetAngle
// Il2CppName: GetAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IKSolverAim::*)()>(&IKSolverAim::GetAngle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverAim*), "GetAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverAim::get_transformAxis
// Il2CppName: get_transformAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverAim::*)()>(&IKSolverAim::get_transformAxis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverAim*), "get_transformAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverAim::get_transformPoleAxis
// Il2CppName: get_transformPoleAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverAim::*)()>(&IKSolverAim::get_transformPoleAxis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverAim*), "get_transformPoleAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverAim::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverAim::*)()>(&IKSolverAim::Solve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverAim*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverAim::GetClampedIKPosition
// Il2CppName: GetClampedIKPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverAim::*)()>(&IKSolverAim::GetClampedIKPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverAim*), "GetClampedIKPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverAim::RotateToTarget
// Il2CppName: RotateToTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverAim::*)(UnityEngine::Vector3, RootMotion::FinalIK::IKSolver::Bone*, float)>(&IKSolverAim::RotateToTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverAim*), "RotateToTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolver::Bone*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverAim::OnInitiate
// Il2CppName: OnInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverAim::*)()>(&IKSolverAim::OnInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverAim*), "OnInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverAim::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverAim::*)()>(&IKSolverAim::OnUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverAim*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverAim::get_minBones
// Il2CppName: get_minBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IKSolverAim::*)()>(&IKSolverAim::get_minBones)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverAim*), "get_minBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverAim::get_localDirection
// Il2CppName: get_localDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverAim::*)()>(&IKSolverAim::get_localDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverAim*), "get_localDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverAim::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverAim::*)()>(&IKSolverAim::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverAim*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverAim::*)()>(&IKSolverAim::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverAim*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverArm
#include "RootMotion/FinalIK/IKSolverArm.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/Arm
#include "RootMotion/FinalIK/IKSolverVR_Arm.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.SetChain
bool RootMotion::FinalIK::IKSolverArm::SetChain(UnityEngine::Transform* chest, UnityEngine::Transform* shoulder, UnityEngine::Transform* upperArm, UnityEngine::Transform* forearm, UnityEngine::Transform* hand, UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::SetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chest), ::il2cpp_utils::ExtractType(shoulder), ::il2cpp_utils::ExtractType(upperArm), ::il2cpp_utils::ExtractType(forearm), ::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, chest, shoulder, upperArm, forearm, hand, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.Solve
void RootMotion::FinalIK::IKSolverArm::Solve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.Read
void RootMotion::FinalIK::IKSolverArm::Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.Write
void RootMotion::FinalIK::IKSolverArm::Write() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.IsValid
bool RootMotion::FinalIK::IKSolverArm::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverArm::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverArm::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverArm::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.FixTransforms
void RootMotion::FinalIK::IKSolverArm::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.OnInitiate
void RootMotion::FinalIK::IKSolverArm::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverArm.OnUpdate
void RootMotion::FinalIK::IKSolverArm::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverArm::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverArm::SetChain
// Il2CppName: SetChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverArm::*)(UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*)>(&IKSolverArm::SetChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverArm*), "SetChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverArm::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverArm::*)()>(&IKSolverArm::Solve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverArm*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverArm::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverArm::*)()>(&IKSolverArm::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverArm*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverArm::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverArm::*)()>(&IKSolverArm::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverArm*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverArm::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverArm::*)(::Il2CppString*&)>(&IKSolverArm::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverArm*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverArm::GetPoints
// Il2CppName: GetPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<RootMotion::FinalIK::IKSolver::Point*>* (IKSolverArm::*)()>(&IKSolverArm::GetPoints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverArm*), "GetPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverArm::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver::Point* (IKSolverArm::*)(UnityEngine::Transform*)>(&IKSolverArm::GetPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverArm*), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverArm::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverArm::*)()>(&IKSolverArm::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverArm*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverArm::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverArm::*)()>(&IKSolverArm::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverArm*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverArm::OnInitiate
// Il2CppName: OnInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverArm::*)()>(&IKSolverArm::OnInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverArm*), "OnInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverArm::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverArm::*)()>(&IKSolverArm::OnUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverArm*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverArm::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverArm::*)()>(&IKSolverArm::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverArm*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverArm::*)()>(&IKSolverArm::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverArm*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverCCD
#include "RootMotion/FinalIK/IKSolverCCD.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: RootMotion.FinalIK.IKSolver/IterationDelegate
#include "RootMotion/FinalIK/IKSolver_IterationDelegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverCCD.FadeOutBoneWeights
void RootMotion::FinalIK::IKSolverCCD::FadeOutBoneWeights() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverCCD::FadeOutBoneWeights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FadeOutBoneWeights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverCCD.Solve
void RootMotion::FinalIK::IKSolverCCD::Solve(UnityEngine::Vector3 targetPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverCCD::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetPosition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetPosition);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverCCD.OnInitiate
void RootMotion::FinalIK::IKSolverCCD::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverCCD::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverCCD.OnUpdate
void RootMotion::FinalIK::IKSolverCCD::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverCCD::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverCCD::FadeOutBoneWeights
// Il2CppName: FadeOutBoneWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverCCD::*)()>(&IKSolverCCD::FadeOutBoneWeights)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverCCD*), "FadeOutBoneWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverCCD::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverCCD::*)(UnityEngine::Vector3)>(&IKSolverCCD::Solve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverCCD*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverCCD::OnInitiate
// Il2CppName: OnInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverCCD::*)()>(&IKSolverCCD::OnInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverCCD*), "OnInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverCCD::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverCCD::*)()>(&IKSolverCCD::OnUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverCCD*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverCCD::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverCCD::*)()>(&IKSolverCCD::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverCCD*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverCCD::*)()>(&IKSolverCCD::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverCCD*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverFABRIK
#include "RootMotion/FinalIK/IKSolverFABRIK.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: RootMotion.FinalIK.IKSolver/IterationDelegate
#include "RootMotion/FinalIK/IKSolver_IterationDelegate.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.SolveForward
void RootMotion::FinalIK::IKSolverFABRIK::SolveForward(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::SolveForward");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveForward", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.SolveBackward
void RootMotion::FinalIK::IKSolverFABRIK::SolveBackward(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::SolveBackward");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveBackward", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.SolveJoint
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverFABRIK::SolveJoint(UnityEngine::Vector3 pos1, UnityEngine::Vector3 pos2, float length) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::SolveJoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveJoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, pos1, pos2, length);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.OnPreSolve
void RootMotion::FinalIK::IKSolverFABRIK::OnPreSolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::OnPreSolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.OnPostSolve
void RootMotion::FinalIK::IKSolverFABRIK::OnPostSolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::OnPostSolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.Solve
void RootMotion::FinalIK::IKSolverFABRIK::Solve(UnityEngine::Vector3 targetPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(targetPosition)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, targetPosition);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.ForwardReach
void RootMotion::FinalIK::IKSolverFABRIK::ForwardReach(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::ForwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ForwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.SolverMove
void RootMotion::FinalIK::IKSolverFABRIK::SolverMove(int index, UnityEngine::Vector3 offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::SolverMove");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolverMove", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(offset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, offset);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.SolverRotate
void RootMotion::FinalIK::IKSolverFABRIK::SolverRotate(int index, UnityEngine::Quaternion rotation, bool recursive) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::SolverRotate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolverRotate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(recursive)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, rotation, recursive);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.SolverRotateChildren
void RootMotion::FinalIK::IKSolverFABRIK::SolverRotateChildren(int index, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::SolverRotateChildren");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolverRotateChildren", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.SolverMoveChildrenAroundPoint
void RootMotion::FinalIK::IKSolverFABRIK::SolverMoveChildrenAroundPoint(int index, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::SolverMoveChildrenAroundPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolverMoveChildrenAroundPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, index, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.GetParentSolverRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverFABRIK::GetParentSolverRotation(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::GetParentSolverRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParentSolverRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.GetParentSolverPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverFABRIK::GetParentSolverPosition(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::GetParentSolverPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetParentSolverPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.GetLimitedRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverFABRIK::GetLimitedRotation(int index, UnityEngine::Quaternion q, bool& changed) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::GetLimitedRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLimitedRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(q), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, index, q, changed);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.LimitForward
void RootMotion::FinalIK::IKSolverFABRIK::LimitForward(int rotateBone, int limitBone) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::LimitForward");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitForward", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotateBone), ::il2cpp_utils::ExtractType(limitBone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rotateBone, limitBone);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.BackwardReach
void RootMotion::FinalIK::IKSolverFABRIK::BackwardReach(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::BackwardReach");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackwardReach", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.BackwardReachUnlimited
void RootMotion::FinalIK::IKSolverFABRIK::BackwardReachUnlimited(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::BackwardReachUnlimited");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackwardReachUnlimited", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.BackwardReachLimited
void RootMotion::FinalIK::IKSolverFABRIK::BackwardReachLimited(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::BackwardReachLimited");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BackwardReachLimited", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.MapToSolverPositions
void RootMotion::FinalIK::IKSolverFABRIK::MapToSolverPositions() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::MapToSolverPositions");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MapToSolverPositions", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.MapToSolverPositionsLimited
void RootMotion::FinalIK::IKSolverFABRIK::MapToSolverPositionsLimited() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::MapToSolverPositionsLimited");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MapToSolverPositionsLimited", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.GetIKPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverFABRIK::GetIKPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::GetIKPosition");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.OnInitiate
void RootMotion::FinalIK::IKSolverFABRIK::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.OnUpdate
void RootMotion::FinalIK::IKSolverFABRIK::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIK.get_boneLengthCanBeZero
bool RootMotion::FinalIK::IKSolverFABRIK::get_boneLengthCanBeZero() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIK::get_boneLengthCanBeZero");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_boneLengthCanBeZero", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverFABRIK::SolveForward
// Il2CppName: SolveForward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(UnityEngine::Vector3)>(&IKSolverFABRIK::SolveForward)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "SolveForward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::SolveBackward
// Il2CppName: SolveBackward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(UnityEngine::Vector3)>(&IKSolverFABRIK::SolveBackward)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "SolveBackward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::SolveJoint
// Il2CppName: SolveJoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverFABRIK::*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&IKSolverFABRIK::SolveJoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "SolveJoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::OnPreSolve
// Il2CppName: OnPreSolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::OnPreSolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "OnPreSolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::OnPostSolve
// Il2CppName: OnPostSolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::OnPostSolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "OnPostSolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(UnityEngine::Vector3)>(&IKSolverFABRIK::Solve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::ForwardReach
// Il2CppName: ForwardReach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(UnityEngine::Vector3)>(&IKSolverFABRIK::ForwardReach)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "ForwardReach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::SolverMove
// Il2CppName: SolverMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(int, UnityEngine::Vector3)>(&IKSolverFABRIK::SolverMove)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "SolverMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::SolverRotate
// Il2CppName: SolverRotate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(int, UnityEngine::Quaternion, bool)>(&IKSolverFABRIK::SolverRotate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "SolverRotate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::SolverRotateChildren
// Il2CppName: SolverRotateChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(int, UnityEngine::Quaternion)>(&IKSolverFABRIK::SolverRotateChildren)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "SolverRotateChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::SolverMoveChildrenAroundPoint
// Il2CppName: SolverMoveChildrenAroundPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(int, UnityEngine::Quaternion)>(&IKSolverFABRIK::SolverMoveChildrenAroundPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "SolverMoveChildrenAroundPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::GetParentSolverRotation
// Il2CppName: GetParentSolverRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKSolverFABRIK::*)(int)>(&IKSolverFABRIK::GetParentSolverRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "GetParentSolverRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::GetParentSolverPosition
// Il2CppName: GetParentSolverPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverFABRIK::*)(int)>(&IKSolverFABRIK::GetParentSolverPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "GetParentSolverPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::GetLimitedRotation
// Il2CppName: GetLimitedRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKSolverFABRIK::*)(int, UnityEngine::Quaternion, bool&)>(&IKSolverFABRIK::GetLimitedRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "GetLimitedRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::LimitForward
// Il2CppName: LimitForward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(int, int)>(&IKSolverFABRIK::LimitForward)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "LimitForward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::BackwardReach
// Il2CppName: BackwardReach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(UnityEngine::Vector3)>(&IKSolverFABRIK::BackwardReach)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "BackwardReach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::BackwardReachUnlimited
// Il2CppName: BackwardReachUnlimited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(UnityEngine::Vector3)>(&IKSolverFABRIK::BackwardReachUnlimited)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "BackwardReachUnlimited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::BackwardReachLimited
// Il2CppName: BackwardReachLimited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)(UnityEngine::Vector3)>(&IKSolverFABRIK::BackwardReachLimited)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "BackwardReachLimited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::MapToSolverPositions
// Il2CppName: MapToSolverPositions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::MapToSolverPositions)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "MapToSolverPositions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::MapToSolverPositionsLimited
// Il2CppName: MapToSolverPositionsLimited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::MapToSolverPositionsLimited)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "MapToSolverPositionsLimited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::GetIKPosition
// Il2CppName: GetIKPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverFABRIK::*)()>(&IKSolverFABRIK::GetIKPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "GetIKPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::OnInitiate
// Il2CppName: OnInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::OnInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "OnInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::OnUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::get_boneLengthCanBeZero
// Il2CppName: get_boneLengthCanBeZero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverFABRIK::*)()>(&IKSolverFABRIK::get_boneLengthCanBeZero)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), "get_boneLengthCanBeZero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIK::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIK::*)()>(&IKSolverFABRIK::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIK*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverFABRIKRoot
#include "RootMotion/FinalIK/IKSolverFABRIKRoot.hpp"
// Including type: RootMotion.FinalIK.FABRIKChain
#include "RootMotion/FinalIK/FABRIKChain.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.IsRoot
bool RootMotion::FinalIK::IKSolverFABRIKRoot::IsRoot(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::IsRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.AddPointsToArray
void RootMotion::FinalIK::IKSolverFABRIKRoot::AddPointsToArray(::Array<RootMotion::FinalIK::IKSolver::Point*>*& array, RootMotion::FinalIK::FABRIKChain* chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::AddPointsToArray");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPointsToArray", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(chain)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, chain);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.GetCentroid
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverFABRIKRoot::GetCentroid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::GetCentroid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetCentroid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.IsValid
bool RootMotion::FinalIK::IKSolverFABRIKRoot::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverFABRIKRoot::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.FixTransforms
void RootMotion::FinalIK::IKSolverFABRIKRoot::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.OnInitiate
void RootMotion::FinalIK::IKSolverFABRIKRoot::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.OnUpdate
void RootMotion::FinalIK::IKSolverFABRIKRoot::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverFABRIKRoot::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFABRIKRoot.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverFABRIKRoot::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFABRIKRoot::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Writing MetadataGetter for method: IKSolverFABRIKRoot::IsRoot
// Il2CppName: IsRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverFABRIKRoot::*)(int)>(&IKSolverFABRIKRoot::IsRoot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIKRoot*), "IsRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIKRoot::AddPointsToArray
// Il2CppName: AddPointsToArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIKRoot::*)(::Array<RootMotion::FinalIK::IKSolver::Point*>*&, RootMotion::FinalIK::FABRIKChain*)>(&IKSolverFABRIKRoot::AddPointsToArray)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIKRoot*), "AddPointsToArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolver::Point*>*&>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FABRIKChain*>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIKRoot::GetCentroid
// Il2CppName: GetCentroid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverFABRIKRoot::*)()>(&IKSolverFABRIKRoot::GetCentroid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIKRoot*), "GetCentroid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIKRoot::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverFABRIKRoot::*)(::Il2CppString*&)>(&IKSolverFABRIKRoot::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIKRoot*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIKRoot::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIKRoot::*)()>(&IKSolverFABRIKRoot::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIKRoot*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIKRoot::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIKRoot::*)()>(&IKSolverFABRIKRoot::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIKRoot*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIKRoot::OnInitiate
// Il2CppName: OnInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIKRoot::*)()>(&IKSolverFABRIKRoot::OnInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIKRoot*), "OnInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIKRoot::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIKRoot::*)()>(&IKSolverFABRIKRoot::OnUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIKRoot*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIKRoot::GetPoints
// Il2CppName: GetPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<RootMotion::FinalIK::IKSolver::Point*>* (IKSolverFABRIKRoot::*)()>(&IKSolverFABRIKRoot::GetPoints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIKRoot*), "GetPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIKRoot::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver::Point* (IKSolverFABRIKRoot::*)(UnityEngine::Transform*)>(&IKSolverFABRIKRoot::GetPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIKRoot*), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverFABRIKRoot::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIKRoot::*)()>(&IKSolverFABRIKRoot::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIKRoot*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFABRIKRoot::*)()>(&IKSolverFABRIKRoot::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFABRIKRoot*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverFullBody
#include "RootMotion/FinalIK/IKSolverFullBody.hpp"
// Including type: RootMotion.FinalIK.FBIKChain
#include "RootMotion/FinalIK/FBIKChain.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: RootMotion.FinalIK.IKMappingSpine
#include "RootMotion/FinalIK/IKMappingSpine.hpp"
// Including type: RootMotion.FinalIK.IKMappingBone
#include "RootMotion/FinalIK/IKMappingBone.hpp"
// Including type: RootMotion.FinalIK.IKMappingLimb
#include "RootMotion/FinalIK/IKMappingLimb.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver/UpdateDelegate
#include "RootMotion/FinalIK/IKSolver_UpdateDelegate.hpp"
// Including type: RootMotion.FinalIK.IKSolver/IterationDelegate
#include "RootMotion/FinalIK/IKSolver_IterationDelegate.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Node
#include "RootMotion/FinalIK/IKSolver_Node.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.GetEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBody::GetEffector(UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::GetEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method, t);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.GetChain
RootMotion::FinalIK::FBIKChain* RootMotion::FinalIK::IKSolverFullBody::GetChain(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::GetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FBIKChain*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.GetChainIndex
int RootMotion::FinalIK::IKSolverFullBody::GetChainIndex(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::GetChainIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetChainIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.GetNode
RootMotion::FinalIK::IKSolver::Node* RootMotion::FinalIK::IKSolverFullBody::GetNode(int chainIndex, int nodeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::GetNode");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNode", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chainIndex), ::il2cpp_utils::ExtractType(nodeIndex)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Node*, false>(this, ___internal__method, chainIndex, nodeIndex);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.GetChainAndNodeIndexes
void RootMotion::FinalIK::IKSolverFullBody::GetChainAndNodeIndexes(UnityEngine::Transform* transform, int& chainIndex, int& nodeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::GetChainAndNodeIndexes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetChainAndNodeIndexes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, transform, chainIndex, nodeIndex);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.ReadPose
void RootMotion::FinalIK::IKSolverFullBody::ReadPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::ReadPose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.Solve
void RootMotion::FinalIK::IKSolverFullBody::Solve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::Solve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.ApplyBendConstraints
void RootMotion::FinalIK::IKSolverFullBody::ApplyBendConstraints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::ApplyBendConstraints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyBendConstraints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.WritePose
void RootMotion::FinalIK::IKSolverFullBody::WritePose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::WritePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverFullBody::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverFullBody::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.IsValid
bool RootMotion::FinalIK::IKSolverFullBody::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverFullBody::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.FixTransforms
void RootMotion::FinalIK::IKSolverFullBody::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.OnInitiate
void RootMotion::FinalIK::IKSolverFullBody::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBody.OnUpdate
void RootMotion::FinalIK::IKSolverFullBody::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBody::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverFullBody::GetEffector
// Il2CppName: GetEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKEffector* (IKSolverFullBody::*)(UnityEngine::Transform*)>(&IKSolverFullBody::GetEffector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "GetEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::GetChain
// Il2CppName: GetChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::FBIKChain* (IKSolverFullBody::*)(UnityEngine::Transform*)>(&IKSolverFullBody::GetChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "GetChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::GetChainIndex
// Il2CppName: GetChainIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IKSolverFullBody::*)(UnityEngine::Transform*)>(&IKSolverFullBody::GetChainIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "GetChainIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::GetNode
// Il2CppName: GetNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver::Node* (IKSolverFullBody::*)(int, int)>(&IKSolverFullBody::GetNode)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "GetNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::GetChainAndNodeIndexes
// Il2CppName: GetChainAndNodeIndexes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBody::*)(UnityEngine::Transform*, int&, int&)>(&IKSolverFullBody::GetChainAndNodeIndexes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "GetChainAndNodeIndexes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<int&>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::ReadPose
// Il2CppName: ReadPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBody::*)()>(&IKSolverFullBody::ReadPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "ReadPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBody::*)()>(&IKSolverFullBody::Solve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::ApplyBendConstraints
// Il2CppName: ApplyBendConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBody::*)()>(&IKSolverFullBody::ApplyBendConstraints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "ApplyBendConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::WritePose
// Il2CppName: WritePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBody::*)()>(&IKSolverFullBody::WritePose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "WritePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::GetPoints
// Il2CppName: GetPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<RootMotion::FinalIK::IKSolver::Point*>* (IKSolverFullBody::*)()>(&IKSolverFullBody::GetPoints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "GetPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver::Point* (IKSolverFullBody::*)(UnityEngine::Transform*)>(&IKSolverFullBody::GetPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverFullBody::*)(::Il2CppString*&)>(&IKSolverFullBody::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBody::*)()>(&IKSolverFullBody::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBody::*)()>(&IKSolverFullBody::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::OnInitiate
// Il2CppName: OnInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBody::*)()>(&IKSolverFullBody::OnInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "OnInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBody::*)()>(&IKSolverFullBody::OnUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBody::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBody::*)()>(&IKSolverFullBody::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBody::*)()>(&IKSolverFullBody::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBody*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FullBodyBipedEffector
#include "RootMotion/FinalIK/FullBodyBipedEffector.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector Body
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_Body() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_Body");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "Body"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector Body
void RootMotion::FinalIK::FullBodyBipedEffector::_set_Body(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_Body");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "Body", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftShoulder
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftShoulder() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftShoulder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftShoulder"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftShoulder
void RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftShoulder(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftShoulder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftShoulder", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightShoulder
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_RightShoulder() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_RightShoulder");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "RightShoulder"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightShoulder
void RootMotion::FinalIK::FullBodyBipedEffector::_set_RightShoulder(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_RightShoulder");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "RightShoulder", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftThigh
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftThigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftThigh");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftThigh"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftThigh
void RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftThigh(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftThigh");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftThigh", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightThigh
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_RightThigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_RightThigh");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "RightThigh"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightThigh
void RootMotion::FinalIK::FullBodyBipedEffector::_set_RightThigh(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_RightThigh");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "RightThigh", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftHand
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftHand"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftHand
void RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftHand(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftHand", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightHand
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_RightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_RightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "RightHand"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightHand
void RootMotion::FinalIK::FullBodyBipedEffector::_set_RightHand(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_RightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "RightHand", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftFoot
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_LeftFoot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftFoot"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector LeftFoot
void RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftFoot(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_LeftFoot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "LeftFoot", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightFoot
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::FullBodyBipedEffector::_get_RightFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_get_RightFoot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedEffector>("RootMotion.FinalIK", "FullBodyBipedEffector", "RightFoot"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedEffector RightFoot
void RootMotion::FinalIK::FullBodyBipedEffector::_set_RightFoot(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedEffector::_set_RightFoot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedEffector", "RightFoot", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.FullBodyBipedChain
#include "RootMotion/FinalIK/FullBodyBipedChain.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedChain LeftArm
RootMotion::FinalIK::FullBodyBipedChain RootMotion::FinalIK::FullBodyBipedChain::_get_LeftArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_get_LeftArm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedChain>("RootMotion.FinalIK", "FullBodyBipedChain", "LeftArm"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedChain LeftArm
void RootMotion::FinalIK::FullBodyBipedChain::_set_LeftArm(RootMotion::FinalIK::FullBodyBipedChain value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_set_LeftArm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedChain", "LeftArm", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedChain RightArm
RootMotion::FinalIK::FullBodyBipedChain RootMotion::FinalIK::FullBodyBipedChain::_get_RightArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_get_RightArm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedChain>("RootMotion.FinalIK", "FullBodyBipedChain", "RightArm"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedChain RightArm
void RootMotion::FinalIK::FullBodyBipedChain::_set_RightArm(RootMotion::FinalIK::FullBodyBipedChain value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_set_RightArm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedChain", "RightArm", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedChain LeftLeg
RootMotion::FinalIK::FullBodyBipedChain RootMotion::FinalIK::FullBodyBipedChain::_get_LeftLeg() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_get_LeftLeg");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedChain>("RootMotion.FinalIK", "FullBodyBipedChain", "LeftLeg"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedChain LeftLeg
void RootMotion::FinalIK::FullBodyBipedChain::_set_LeftLeg(RootMotion::FinalIK::FullBodyBipedChain value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_set_LeftLeg");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedChain", "LeftLeg", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.FullBodyBipedChain RightLeg
RootMotion::FinalIK::FullBodyBipedChain RootMotion::FinalIK::FullBodyBipedChain::_get_RightLeg() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_get_RightLeg");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::FullBodyBipedChain>("RootMotion.FinalIK", "FullBodyBipedChain", "RightLeg"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.FullBodyBipedChain RightLeg
void RootMotion::FinalIK::FullBodyBipedChain::_set_RightLeg(RootMotion::FinalIK::FullBodyBipedChain value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FullBodyBipedChain::_set_RightLeg");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "FullBodyBipedChain", "RightLeg", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: RootMotion.FinalIK.FBIKChain
#include "RootMotion/FinalIK/FBIKChain.hpp"
// Including type: RootMotion.FinalIK.IKMappingLimb
#include "RootMotion/FinalIK/IKMappingLimb.hpp"
// Including type: RootMotion.FinalIK.IKMappingBone
#include "RootMotion/FinalIK/IKMappingBone.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedChain
#include "RootMotion/FinalIK/FullBodyBipedChain.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedEffector
#include "RootMotion/FinalIK/FullBodyBipedEffector.hpp"
// Including type: RootMotion.FinalIK.IKMappingSpine
#include "RootMotion/FinalIK/IKMappingSpine.hpp"
// Including type: RootMotion.FinalIK.IKConstraintBend
#include "RootMotion/FinalIK/IKConstraintBend.hpp"
// Including type: RootMotion.BipedReferences
#include "RootMotion/BipedReferences.hpp"
// Including type: RootMotion.BipedLimbOrientations/LimbOrientation
#include "RootMotion/BipedLimbOrientations_LimbOrientation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_bodyEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_bodyEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_bodyEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_bodyEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftShoulderEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftShoulderEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftShoulderEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftShoulderEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightShoulderEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightShoulderEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightShoulderEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightShoulderEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftThighEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftThighEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftThighEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftThighEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightThighEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightThighEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightThighEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightThighEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftHandEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftHandEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftHandEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftHandEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightHandEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightHandEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightHandEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightHandEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftFootEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftFootEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftFootEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftFootEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightFootEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightFootEffector() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightFootEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightFootEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftArmChain
RootMotion::FinalIK::FBIKChain* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftArmChain() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftArmChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftArmChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FBIKChain*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightArmChain
RootMotion::FinalIK::FBIKChain* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightArmChain() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightArmChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightArmChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FBIKChain*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftLegChain
RootMotion::FinalIK::FBIKChain* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftLegChain() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftLegChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftLegChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FBIKChain*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightLegChain
RootMotion::FinalIK::FBIKChain* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightLegChain() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightLegChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightLegChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FBIKChain*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftArmMapping
RootMotion::FinalIK::IKMappingLimb* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftArmMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftArmMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftArmMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingLimb*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightArmMapping
RootMotion::FinalIK::IKMappingLimb* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightArmMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightArmMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightArmMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingLimb*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_leftLegMapping
RootMotion::FinalIK::IKMappingLimb* RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftLegMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_leftLegMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftLegMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingLimb*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_rightLegMapping
RootMotion::FinalIK::IKMappingLimb* RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightLegMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_rightLegMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightLegMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingLimb*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_headMapping
RootMotion::FinalIK::IKMappingBone* RootMotion::FinalIK::IKSolverFullBodyBiped::get_headMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_headMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.SetChainWeights
void RootMotion::FinalIK::IKSolverFullBodyBiped::SetChainWeights(RootMotion::FinalIK::FullBodyBipedChain c, float pull, float reach) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::SetChainWeights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChainWeights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c), ::il2cpp_utils::ExtractType(pull), ::il2cpp_utils::ExtractType(reach)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, c, pull, reach);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.SetEffectorWeights
void RootMotion::FinalIK::IKSolverFullBodyBiped::SetEffectorWeights(RootMotion::FinalIK::FullBodyBipedEffector effector, float positionWeight, float rotationWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::SetEffectorWeights");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetEffectorWeights", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(positionWeight), ::il2cpp_utils::ExtractType(rotationWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effector, positionWeight, rotationWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetChain
RootMotion::FinalIK::FBIKChain* RootMotion::FinalIK::IKSolverFullBodyBiped::GetChain(RootMotion::FinalIK::FullBodyBipedChain c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FBIKChain*, false>(this, ___internal__method, c);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetChain
RootMotion::FinalIK::FBIKChain* RootMotion::FinalIK::IKSolverFullBodyBiped::GetChain(RootMotion::FinalIK::FullBodyBipedEffector effector) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FBIKChain*, false>(this, ___internal__method, effector);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::GetEffector(RootMotion::FinalIK::FullBodyBipedEffector effector) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method, effector);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetEndEffector
RootMotion::FinalIK::IKEffector* RootMotion::FinalIK::IKSolverFullBodyBiped::GetEndEffector(RootMotion::FinalIK::FullBodyBipedChain c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetEndEffector");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetEndEffector", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKEffector*, false>(this, ___internal__method, c);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetLimbMapping
RootMotion::FinalIK::IKMappingLimb* RootMotion::FinalIK::IKSolverFullBodyBiped::GetLimbMapping(RootMotion::FinalIK::FullBodyBipedChain chain) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetLimbMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLimbMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingLimb*, false>(this, ___internal__method, chain);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetLimbMapping
RootMotion::FinalIK::IKMappingLimb* RootMotion::FinalIK::IKSolverFullBodyBiped::GetLimbMapping(RootMotion::FinalIK::FullBodyBipedEffector effector) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetLimbMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetLimbMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingLimb*, false>(this, ___internal__method, effector);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetSpineMapping
RootMotion::FinalIK::IKMappingSpine* RootMotion::FinalIK::IKSolverFullBodyBiped::GetSpineMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetSpineMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSpineMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingSpine*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetHeadMapping
RootMotion::FinalIK::IKMappingBone* RootMotion::FinalIK::IKSolverFullBodyBiped::GetHeadMapping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetHeadMapping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHeadMapping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKMappingBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetBendConstraint
RootMotion::FinalIK::IKConstraintBend* RootMotion::FinalIK::IKSolverFullBodyBiped::GetBendConstraint(RootMotion::FinalIK::FullBodyBipedChain limb) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetBendConstraint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBendConstraint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(limb)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKConstraintBend*, false>(this, ___internal__method, limb);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.SetToReferences
void RootMotion::FinalIK::IKSolverFullBodyBiped::SetToReferences(RootMotion::BipedReferences* references, UnityEngine::Transform* rootNode) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::SetToReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(rootNode)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, references, rootNode);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.DetectRootNodeBone
UnityEngine::Transform* RootMotion::FinalIK::IKSolverFullBodyBiped::DetectRootNodeBone(RootMotion::BipedReferences* references) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::DetectRootNodeBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverFullBodyBiped", "DetectRootNodeBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.SetLimbOrientations
void RootMotion::FinalIK::IKSolverFullBodyBiped::SetLimbOrientations(RootMotion::BipedLimbOrientations* o) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::SetLimbOrientations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLimbOrientations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(o)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, o);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.get_pullBodyOffset
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverFullBodyBiped::get_pullBodyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::get_pullBodyOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pullBodyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.set_pullBodyOffset
void RootMotion::FinalIK::IKSolverFullBodyBiped::set_pullBodyOffset(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::set_pullBodyOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pullBodyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.SetLimbOrientation
void RootMotion::FinalIK::IKSolverFullBodyBiped::SetLimbOrientation(RootMotion::FinalIK::FullBodyBipedChain chain, RootMotion::BipedLimbOrientations::LimbOrientation* limbOrientation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::SetLimbOrientation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLimbOrientation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chain), ::il2cpp_utils::ExtractType(limbOrientation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, chain, limbOrientation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetLeftClavicle
UnityEngine::Transform* RootMotion::FinalIK::IKSolverFullBodyBiped::GetLeftClavicle(RootMotion::BipedReferences* references) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetLeftClavicle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverFullBodyBiped", "GetLeftClavicle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetRightClavicle
UnityEngine::Transform* RootMotion::FinalIK::IKSolverFullBodyBiped::GetRightClavicle(RootMotion::BipedReferences* references) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetRightClavicle");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverFullBodyBiped", "GetRightClavicle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, references);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.Contains
bool RootMotion::FinalIK::IKSolverFullBodyBiped::Contains(::Array<UnityEngine::Transform*>* array, UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::Contains");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverFullBodyBiped", "Contains", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, array, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.PullBody
void RootMotion::FinalIK::IKSolverFullBodyBiped::PullBody() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::PullBody");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PullBody", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetBodyOffset
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverFullBodyBiped::GetBodyOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetBodyOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBodyOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.GetHandBodyPull
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverFullBodyBiped::GetHandBodyPull(RootMotion::FinalIK::IKEffector* effector, RootMotion::FinalIK::FBIKChain* arm, UnityEngine::Vector3 offset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::GetHandBodyPull");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetHandBodyPull", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(arm), ::il2cpp_utils::ExtractType(offset)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, effector, arm, offset);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.IsValid
bool RootMotion::FinalIK::IKSolverFullBodyBiped::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.ReadPose
void RootMotion::FinalIK::IKSolverFullBodyBiped::ReadPose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::ReadPose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ReadPose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.ApplyBendConstraints
void RootMotion::FinalIK::IKSolverFullBodyBiped::ApplyBendConstraints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::ApplyBendConstraints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyBendConstraints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverFullBodyBiped.WritePose
void RootMotion::FinalIK::IKSolverFullBodyBiped::WritePose() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverFullBodyBiped::WritePose");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_bodyEffector
// Il2CppName: get_bodyEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKEffector* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_bodyEffector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_bodyEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_leftShoulderEffector
// Il2CppName: get_leftShoulderEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKEffector* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_leftShoulderEffector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_leftShoulderEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_rightShoulderEffector
// Il2CppName: get_rightShoulderEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKEffector* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_rightShoulderEffector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_rightShoulderEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_leftThighEffector
// Il2CppName: get_leftThighEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKEffector* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_leftThighEffector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_leftThighEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_rightThighEffector
// Il2CppName: get_rightThighEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKEffector* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_rightThighEffector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_rightThighEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_leftHandEffector
// Il2CppName: get_leftHandEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKEffector* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_leftHandEffector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_leftHandEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_rightHandEffector
// Il2CppName: get_rightHandEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKEffector* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_rightHandEffector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_rightHandEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_leftFootEffector
// Il2CppName: get_leftFootEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKEffector* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_leftFootEffector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_leftFootEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_rightFootEffector
// Il2CppName: get_rightFootEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKEffector* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_rightFootEffector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_rightFootEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_leftArmChain
// Il2CppName: get_leftArmChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::FBIKChain* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_leftArmChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_leftArmChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_rightArmChain
// Il2CppName: get_rightArmChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::FBIKChain* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_rightArmChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_rightArmChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_leftLegChain
// Il2CppName: get_leftLegChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::FBIKChain* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_leftLegChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_leftLegChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_rightLegChain
// Il2CppName: get_rightLegChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::FBIKChain* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_rightLegChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_rightLegChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_leftArmMapping
// Il2CppName: get_leftArmMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKMappingLimb* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_leftArmMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_leftArmMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_rightArmMapping
// Il2CppName: get_rightArmMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKMappingLimb* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_rightArmMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_rightArmMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_leftLegMapping
// Il2CppName: get_leftLegMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKMappingLimb* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_leftLegMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_leftLegMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_rightLegMapping
// Il2CppName: get_rightLegMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKMappingLimb* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_rightLegMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_rightLegMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_headMapping
// Il2CppName: get_headMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKMappingBone* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_headMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_headMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::SetChainWeights
// Il2CppName: SetChainWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBodyBiped::*)(RootMotion::FinalIK::FullBodyBipedChain, float, float)>(&IKSolverFullBodyBiped::SetChainWeights)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "SetChainWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedChain>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::SetEffectorWeights
// Il2CppName: SetEffectorWeights
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBodyBiped::*)(RootMotion::FinalIK::FullBodyBipedEffector, float, float)>(&IKSolverFullBodyBiped::SetEffectorWeights)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "SetEffectorWeights", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::GetChain
// Il2CppName: GetChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::FBIKChain* (IKSolverFullBodyBiped::*)(RootMotion::FinalIK::FullBodyBipedChain)>(&IKSolverFullBodyBiped::GetChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "GetChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedChain>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::GetChain
// Il2CppName: GetChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::FBIKChain* (IKSolverFullBodyBiped::*)(RootMotion::FinalIK::FullBodyBipedEffector)>(&IKSolverFullBodyBiped::GetChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "GetChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::GetEffector
// Il2CppName: GetEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKEffector* (IKSolverFullBodyBiped::*)(RootMotion::FinalIK::FullBodyBipedEffector)>(&IKSolverFullBodyBiped::GetEffector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "GetEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::GetEndEffector
// Il2CppName: GetEndEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKEffector* (IKSolverFullBodyBiped::*)(RootMotion::FinalIK::FullBodyBipedChain)>(&IKSolverFullBodyBiped::GetEndEffector)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "GetEndEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedChain>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::GetLimbMapping
// Il2CppName: GetLimbMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKMappingLimb* (IKSolverFullBodyBiped::*)(RootMotion::FinalIK::FullBodyBipedChain)>(&IKSolverFullBodyBiped::GetLimbMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "GetLimbMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedChain>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::GetLimbMapping
// Il2CppName: GetLimbMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKMappingLimb* (IKSolverFullBodyBiped::*)(RootMotion::FinalIK::FullBodyBipedEffector)>(&IKSolverFullBodyBiped::GetLimbMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "GetLimbMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::GetSpineMapping
// Il2CppName: GetSpineMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKMappingSpine* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::GetSpineMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "GetSpineMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::GetHeadMapping
// Il2CppName: GetHeadMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKMappingBone* (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::GetHeadMapping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "GetHeadMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::GetBendConstraint
// Il2CppName: GetBendConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKConstraintBend* (IKSolverFullBodyBiped::*)(RootMotion::FinalIK::FullBodyBipedChain)>(&IKSolverFullBodyBiped::GetBendConstraint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "GetBendConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedChain>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::SetToReferences
// Il2CppName: SetToReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBodyBiped::*)(RootMotion::BipedReferences*, UnityEngine::Transform*)>(&IKSolverFullBodyBiped::SetToReferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "SetToReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::BipedReferences*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::DetectRootNodeBone
// Il2CppName: DetectRootNodeBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (*)(RootMotion::BipedReferences*)>(&IKSolverFullBodyBiped::DetectRootNodeBone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "DetectRootNodeBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::BipedReferences*>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::SetLimbOrientations
// Il2CppName: SetLimbOrientations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBodyBiped::*)(RootMotion::BipedLimbOrientations*)>(&IKSolverFullBodyBiped::SetLimbOrientations)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "SetLimbOrientations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::BipedLimbOrientations*>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::get_pullBodyOffset
// Il2CppName: get_pullBodyOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::get_pullBodyOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "get_pullBodyOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::set_pullBodyOffset
// Il2CppName: set_pullBodyOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBodyBiped::*)(UnityEngine::Vector3)>(&IKSolverFullBodyBiped::set_pullBodyOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "set_pullBodyOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::SetLimbOrientation
// Il2CppName: SetLimbOrientation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBodyBiped::*)(RootMotion::FinalIK::FullBodyBipedChain, RootMotion::BipedLimbOrientations::LimbOrientation*)>(&IKSolverFullBodyBiped::SetLimbOrientation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "SetLimbOrientation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedChain>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::BipedLimbOrientations::LimbOrientation*>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::GetLeftClavicle
// Il2CppName: GetLeftClavicle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (*)(RootMotion::BipedReferences*)>(&IKSolverFullBodyBiped::GetLeftClavicle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "GetLeftClavicle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::BipedReferences*>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::GetRightClavicle
// Il2CppName: GetRightClavicle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (*)(RootMotion::BipedReferences*)>(&IKSolverFullBodyBiped::GetRightClavicle)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "GetRightClavicle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::BipedReferences*>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::Contains
// Il2CppName: Contains
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Array<UnityEngine::Transform*>*, UnityEngine::Transform*)>(&IKSolverFullBodyBiped::Contains)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "Contains", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::PullBody
// Il2CppName: PullBody
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::PullBody)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "PullBody", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::GetBodyOffset
// Il2CppName: GetBodyOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::GetBodyOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "GetBodyOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::GetHandBodyPull
// Il2CppName: GetHandBodyPull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverFullBodyBiped::*)(RootMotion::FinalIK::IKEffector*, RootMotion::FinalIK::FBIKChain*, UnityEngine::Vector3)>(&IKSolverFullBodyBiped::GetHandBodyPull)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "GetHandBodyPull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKEffector*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FBIKChain*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverFullBodyBiped::*)(::Il2CppString*&)>(&IKSolverFullBodyBiped::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::ReadPose
// Il2CppName: ReadPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::ReadPose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "ReadPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::ApplyBendConstraints
// Il2CppName: ApplyBendConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::ApplyBendConstraints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "ApplyBendConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::WritePose
// Il2CppName: WritePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::WritePose)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), "WritePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverFullBodyBiped::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverFullBodyBiped::*)()>(&IKSolverFullBodyBiped::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverFullBodyBiped*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverHeuristic
#include "RootMotion/FinalIK/IKSolverHeuristic.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Bone
#include "RootMotion/FinalIK/IKSolver_Bone.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.SetChain
bool RootMotion::FinalIK::IKSolverHeuristic::SetChain(::Array<UnityEngine::Transform*>* hierarchy, UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::SetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hierarchy), ::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, hierarchy, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.AddBone
void RootMotion::FinalIK::IKSolverHeuristic::AddBone(UnityEngine::Transform* bone) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::AddBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.get_minBones
int RootMotion::FinalIK::IKSolverHeuristic::get_minBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::get_minBones");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_minBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.get_boneLengthCanBeZero
bool RootMotion::FinalIK::IKSolverHeuristic::get_boneLengthCanBeZero() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::get_boneLengthCanBeZero");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_boneLengthCanBeZero", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.get_allowCommonParent
bool RootMotion::FinalIK::IKSolverHeuristic::get_allowCommonParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::get_allowCommonParent");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_allowCommonParent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.InitiateBones
void RootMotion::FinalIK::IKSolverHeuristic::InitiateBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::InitiateBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.get_localDirection
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverHeuristic::get_localDirection() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::get_localDirection");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_localDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.get_positionOffset
float RootMotion::FinalIK::IKSolverHeuristic::get_positionOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::get_positionOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_positionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.GetSingularityOffset
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverHeuristic::GetSingularityOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::GetSingularityOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetSingularityOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.SingularityDetected
bool RootMotion::FinalIK::IKSolverHeuristic::SingularityDetected() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::SingularityDetected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SingularityDetected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverHeuristic::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.FixTransforms
void RootMotion::FinalIK::IKSolverHeuristic::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.IsValid
bool RootMotion::FinalIK::IKSolverHeuristic::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverHeuristic::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverHeuristic::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.OnInitiate
void RootMotion::FinalIK::IKSolverHeuristic::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverHeuristic.OnUpdate
void RootMotion::FinalIK::IKSolverHeuristic::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverHeuristic::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverHeuristic::SetChain
// Il2CppName: SetChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverHeuristic::*)(::Array<UnityEngine::Transform*>*, UnityEngine::Transform*)>(&IKSolverHeuristic::SetChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "SetChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::AddBone
// Il2CppName: AddBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverHeuristic::*)(UnityEngine::Transform*)>(&IKSolverHeuristic::AddBone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "AddBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::get_minBones
// Il2CppName: get_minBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (IKSolverHeuristic::*)()>(&IKSolverHeuristic::get_minBones)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "get_minBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::get_boneLengthCanBeZero
// Il2CppName: get_boneLengthCanBeZero
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverHeuristic::*)()>(&IKSolverHeuristic::get_boneLengthCanBeZero)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "get_boneLengthCanBeZero", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::get_allowCommonParent
// Il2CppName: get_allowCommonParent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverHeuristic::*)()>(&IKSolverHeuristic::get_allowCommonParent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "get_allowCommonParent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::InitiateBones
// Il2CppName: InitiateBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverHeuristic::*)()>(&IKSolverHeuristic::InitiateBones)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "InitiateBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::get_localDirection
// Il2CppName: get_localDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverHeuristic::*)()>(&IKSolverHeuristic::get_localDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "get_localDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::get_positionOffset
// Il2CppName: get_positionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IKSolverHeuristic::*)()>(&IKSolverHeuristic::get_positionOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "get_positionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::GetSingularityOffset
// Il2CppName: GetSingularityOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverHeuristic::*)()>(&IKSolverHeuristic::GetSingularityOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "GetSingularityOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::SingularityDetected
// Il2CppName: SingularityDetected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverHeuristic::*)()>(&IKSolverHeuristic::SingularityDetected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "SingularityDetected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverHeuristic::*)()>(&IKSolverHeuristic::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverHeuristic::*)()>(&IKSolverHeuristic::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverHeuristic::*)(::Il2CppString*&)>(&IKSolverHeuristic::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::GetPoints
// Il2CppName: GetPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<RootMotion::FinalIK::IKSolver::Point*>* (IKSolverHeuristic::*)()>(&IKSolverHeuristic::GetPoints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "GetPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver::Point* (IKSolverHeuristic::*)(UnityEngine::Transform*)>(&IKSolverHeuristic::GetPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::OnInitiate
// Il2CppName: OnInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverHeuristic::*)()>(&IKSolverHeuristic::OnInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "OnInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverHeuristic::*)()>(&IKSolverHeuristic::OnUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverHeuristic::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverHeuristic::*)()>(&IKSolverHeuristic::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverHeuristic::*)()>(&IKSolverHeuristic::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverHeuristic*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverLeg
#include "RootMotion/FinalIK/IKSolverLeg.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/Leg
#include "RootMotion/FinalIK/IKSolverVR_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.SetChain
bool RootMotion::FinalIK::IKSolverLeg::SetChain(UnityEngine::Transform* pelvis, UnityEngine::Transform* thigh, UnityEngine::Transform* calf, UnityEngine::Transform* foot, UnityEngine::Transform* toe, UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::SetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pelvis), ::il2cpp_utils::ExtractType(thigh), ::il2cpp_utils::ExtractType(calf), ::il2cpp_utils::ExtractType(foot), ::il2cpp_utils::ExtractType(toe), ::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, pelvis, thigh, calf, foot, toe, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.Solve
void RootMotion::FinalIK::IKSolverLeg::Solve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.Read
void RootMotion::FinalIK::IKSolverLeg::Read() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.Write
void RootMotion::FinalIK::IKSolverLeg::Write() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.IsValid
bool RootMotion::FinalIK::IKSolverLeg::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverLeg::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverLeg::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverLeg::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.FixTransforms
void RootMotion::FinalIK::IKSolverLeg::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.OnInitiate
void RootMotion::FinalIK::IKSolverLeg::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLeg.OnUpdate
void RootMotion::FinalIK::IKSolverLeg::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLeg::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverLeg::SetChain
// Il2CppName: SetChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverLeg::*)(UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*)>(&IKSolverLeg::SetChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLeg*), "SetChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverLeg::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLeg::*)()>(&IKSolverLeg::Solve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLeg*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLeg::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLeg::*)()>(&IKSolverLeg::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLeg*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLeg::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLeg::*)()>(&IKSolverLeg::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLeg*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLeg::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverLeg::*)(::Il2CppString*&)>(&IKSolverLeg::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLeg*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverLeg::GetPoints
// Il2CppName: GetPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<RootMotion::FinalIK::IKSolver::Point*>* (IKSolverLeg::*)()>(&IKSolverLeg::GetPoints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLeg*), "GetPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLeg::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver::Point* (IKSolverLeg::*)(UnityEngine::Transform*)>(&IKSolverLeg::GetPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLeg*), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverLeg::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLeg::*)()>(&IKSolverLeg::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLeg*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLeg::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLeg::*)()>(&IKSolverLeg::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLeg*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLeg::OnInitiate
// Il2CppName: OnInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLeg::*)()>(&IKSolverLeg::OnInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLeg*), "OnInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLeg::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLeg::*)()>(&IKSolverLeg::OnUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLeg*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLeg::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLeg::*)()>(&IKSolverLeg::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLeg*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLeg::*)()>(&IKSolverLeg::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLeg*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverLimb
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.MaintainRotation
void RootMotion::FinalIK::IKSolverLimb::MaintainRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::MaintainRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MaintainRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.MaintainBend
void RootMotion::FinalIK::IKSolverLimb::MaintainBend() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::MaintainBend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MaintainBend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.get_axisDirections
::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>* RootMotion::FinalIK::IKSolverLimb::get_axisDirections() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::get_axisDirections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_axisDirections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.StoreAxisDirections
void RootMotion::FinalIK::IKSolverLimb::StoreAxisDirections(::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>*& axisDirections) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::StoreAxisDirections");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreAxisDirections", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(axisDirections)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, axisDirections);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.GetModifiedBendNormal
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverLimb::GetModifiedBendNormal() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::GetModifiedBendNormal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetModifiedBendNormal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.OnInitiateVirtual
void RootMotion::FinalIK::IKSolverLimb::OnInitiateVirtual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::OnInitiateVirtual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiateVirtual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.OnUpdateVirtual
void RootMotion::FinalIK::IKSolverLimb::OnUpdateVirtual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::OnUpdateVirtual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdateVirtual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLimb.OnPostSolveVirtual
void RootMotion::FinalIK::IKSolverLimb::OnPostSolveVirtual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::OnPostSolveVirtual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolveVirtual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverLimb::MaintainRotation
// Il2CppName: MaintainRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLimb::*)()>(&IKSolverLimb::MaintainRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLimb*), "MaintainRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLimb::MaintainBend
// Il2CppName: MaintainBend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLimb::*)()>(&IKSolverLimb::MaintainBend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLimb*), "MaintainBend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLimb::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLimb::*)(UnityEngine::AvatarIKGoal)>(&IKSolverLimb::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLimb*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AvatarIKGoal>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLimb::*)(UnityEngine::AvatarIKGoal)>(&IKSolverLimb::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLimb*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::AvatarIKGoal>()});
  }
};
// Writing MetadataGetter for method: IKSolverLimb::get_axisDirections
// Il2CppName: get_axisDirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>* (IKSolverLimb::*)()>(&IKSolverLimb::get_axisDirections)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLimb*), "get_axisDirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLimb::StoreAxisDirections
// Il2CppName: StoreAxisDirections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLimb::*)(::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>*&)>(&IKSolverLimb::StoreAxisDirections)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLimb*), "StoreAxisDirections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverLimb::GetModifiedBendNormal
// Il2CppName: GetModifiedBendNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverLimb::*)()>(&IKSolverLimb::GetModifiedBendNormal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLimb*), "GetModifiedBendNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLimb::OnInitiateVirtual
// Il2CppName: OnInitiateVirtual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLimb::*)()>(&IKSolverLimb::OnInitiateVirtual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLimb*), "OnInitiateVirtual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLimb::OnUpdateVirtual
// Il2CppName: OnUpdateVirtual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLimb::*)()>(&IKSolverLimb::OnUpdateVirtual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLimb*), "OnUpdateVirtual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLimb::OnPostSolveVirtual
// Il2CppName: OnPostSolveVirtual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLimb::*)()>(&IKSolverLimb::OnPostSolveVirtual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLimb*), "OnPostSolveVirtual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLimb::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLimb::*)()>(&IKSolverLimb::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLimb*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLimb::*)()>(&IKSolverLimb::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLimb*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverLimb/BendModifier
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Animation
RootMotion::FinalIK::IKSolverLimb::BendModifier RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Animation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Animation");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverLimb::BendModifier>("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Animation"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Animation
void RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Animation(RootMotion::FinalIK::IKSolverLimb::BendModifier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Animation");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Animation", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Target
RootMotion::FinalIK::IKSolverLimb::BendModifier RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Target() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Target");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverLimb::BendModifier>("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Target"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Target
void RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Target(RootMotion::FinalIK::IKSolverLimb::BendModifier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Target");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Target", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Parent
RootMotion::FinalIK::IKSolverLimb::BendModifier RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Parent() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Parent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverLimb::BendModifier>("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Parent"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Parent
void RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Parent(RootMotion::FinalIK::IKSolverLimb::BendModifier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Parent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Parent", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Arm
RootMotion::FinalIK::IKSolverLimb::BendModifier RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Arm() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Arm");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverLimb::BendModifier>("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Arm"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Arm
void RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Arm(RootMotion::FinalIK::IKSolverLimb::BendModifier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Arm");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Arm", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Goal
RootMotion::FinalIK::IKSolverLimb::BendModifier RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Goal() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_get_Goal");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverLimb::BendModifier>("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Goal"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Goal
void RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Goal(RootMotion::FinalIK::IKSolverLimb::BendModifier value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::BendModifier::_set_Goal");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverLimb/BendModifier", "Goal", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverLimb/AxisDirection
#include "RootMotion/FinalIK/IKSolverLimb.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: IKSolverLimb::AxisDirection::AxisDirection
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLimb::AxisDirection::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&IKSolverLimb::AxisDirection::AxisDirection<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLimb::AxisDirection), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLimb::AxisDirection::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&IKSolverLimb::AxisDirection::AxisDirection<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLimb::AxisDirection), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverLookAt
#include "RootMotion/FinalIK/IKSolverLookAt.hpp"
// Including type: RootMotion.FinalIK.IKSolverLookAt/LookAtBone
#include "RootMotion/FinalIK/IKSolverLookAt_LookAtBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetLookAtWeight
void RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetLookAtWeight
void RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight(float weight, float bodyWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(bodyWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight, bodyWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetLookAtWeight
void RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight(float weight, float bodyWeight, float headWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(bodyWeight), ::il2cpp_utils::ExtractType(headWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight, bodyWeight, headWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetLookAtWeight
void RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(bodyWeight), ::il2cpp_utils::ExtractType(headWeight), ::il2cpp_utils::ExtractType(eyesWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight, bodyWeight, headWeight, eyesWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetLookAtWeight
void RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(bodyWeight), ::il2cpp_utils::ExtractType(headWeight), ::il2cpp_utils::ExtractType(eyesWeight), ::il2cpp_utils::ExtractType(clampWeight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight, bodyWeight, headWeight, eyesWeight, clampWeight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetLookAtWeight
void RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetLookAtWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLookAtWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(bodyWeight), ::il2cpp_utils::ExtractType(headWeight), ::il2cpp_utils::ExtractType(eyesWeight), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(clampWeightHead), ::il2cpp_utils::ExtractType(clampWeightEyes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight, bodyWeight, headWeight, eyesWeight, clampWeight, clampWeightHead, clampWeightEyes);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetChain
bool RootMotion::FinalIK::IKSolverLookAt::SetChain(::Array<UnityEngine::Transform*>* spine, UnityEngine::Transform* head, ::Array<UnityEngine::Transform*>* eyes, UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(spine), ::il2cpp_utils::ExtractType(head), ::il2cpp_utils::ExtractType(eyes), ::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, spine, head, eyes, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.get_spineIsValid
bool RootMotion::FinalIK::IKSolverLookAt::get_spineIsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::get_spineIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spineIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.get_spineIsEmpty
bool RootMotion::FinalIK::IKSolverLookAt::get_spineIsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::get_spineIsEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_spineIsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SolveSpine
void RootMotion::FinalIK::IKSolverLookAt::SolveSpine() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SolveSpine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveSpine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.get_headIsValid
bool RootMotion::FinalIK::IKSolverLookAt::get_headIsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::get_headIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.get_headIsEmpty
bool RootMotion::FinalIK::IKSolverLookAt::get_headIsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::get_headIsEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_headIsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SolveHead
void RootMotion::FinalIK::IKSolverLookAt::SolveHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SolveHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.get_eyesIsValid
bool RootMotion::FinalIK::IKSolverLookAt::get_eyesIsValid() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::get_eyesIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eyesIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.get_eyesIsEmpty
bool RootMotion::FinalIK::IKSolverLookAt::get_eyesIsEmpty() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::get_eyesIsEmpty");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_eyesIsEmpty", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SolveEyes
void RootMotion::FinalIK::IKSolverLookAt::SolveEyes() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SolveEyes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveEyes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.GetForwards
::Array<UnityEngine::Vector3>* RootMotion::FinalIK::IKSolverLookAt::GetForwards(::Array<UnityEngine::Vector3>*& forwards, UnityEngine::Vector3 baseForward, UnityEngine::Vector3 targetForward, int bones, float clamp) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::GetForwards");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetForwards", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(forwards), ::il2cpp_utils::ExtractType(baseForward), ::il2cpp_utils::ExtractType(targetForward), ::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(clamp)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Vector3>*, false>(this, ___internal__method, forwards, baseForward, targetForward, bones, clamp);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.SetBones
void RootMotion::FinalIK::IKSolverLookAt::SetBones(::Array<UnityEngine::Transform*>* array, ::Array<RootMotion::FinalIK::IKSolverLookAt::LookAtBone*>*& bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::SetBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(bones)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, bones);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverLookAt::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.FixTransforms
void RootMotion::FinalIK::IKSolverLookAt::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.IsValid
bool RootMotion::FinalIK::IKSolverLookAt::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverLookAt::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverLookAt::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.OnInitiate
void RootMotion::FinalIK::IKSolverLookAt::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt.OnUpdate
void RootMotion::FinalIK::IKSolverLookAt::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverLookAt::SetLookAtWeight
// Il2CppName: SetLookAtWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)(float)>(&IKSolverLookAt::SetLookAtWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "SetLookAtWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::SetLookAtWeight
// Il2CppName: SetLookAtWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)(float, float)>(&IKSolverLookAt::SetLookAtWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "SetLookAtWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::SetLookAtWeight
// Il2CppName: SetLookAtWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)(float, float, float)>(&IKSolverLookAt::SetLookAtWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "SetLookAtWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::SetLookAtWeight
// Il2CppName: SetLookAtWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)(float, float, float, float)>(&IKSolverLookAt::SetLookAtWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "SetLookAtWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::SetLookAtWeight
// Il2CppName: SetLookAtWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)(float, float, float, float, float)>(&IKSolverLookAt::SetLookAtWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "SetLookAtWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::SetLookAtWeight
// Il2CppName: SetLookAtWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)(float, float, float, float, float, float, float)>(&IKSolverLookAt::SetLookAtWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "SetLookAtWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::SetChain
// Il2CppName: SetChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverLookAt::*)(::Array<UnityEngine::Transform*>*, UnityEngine::Transform*, ::Array<UnityEngine::Transform*>*, UnityEngine::Transform*)>(&IKSolverLookAt::SetChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "SetChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::get_spineIsValid
// Il2CppName: get_spineIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverLookAt::*)()>(&IKSolverLookAt::get_spineIsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "get_spineIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::get_spineIsEmpty
// Il2CppName: get_spineIsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverLookAt::*)()>(&IKSolverLookAt::get_spineIsEmpty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "get_spineIsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::SolveSpine
// Il2CppName: SolveSpine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)()>(&IKSolverLookAt::SolveSpine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "SolveSpine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::get_headIsValid
// Il2CppName: get_headIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverLookAt::*)()>(&IKSolverLookAt::get_headIsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "get_headIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::get_headIsEmpty
// Il2CppName: get_headIsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverLookAt::*)()>(&IKSolverLookAt::get_headIsEmpty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "get_headIsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::SolveHead
// Il2CppName: SolveHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)()>(&IKSolverLookAt::SolveHead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "SolveHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::get_eyesIsValid
// Il2CppName: get_eyesIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverLookAt::*)()>(&IKSolverLookAt::get_eyesIsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "get_eyesIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::get_eyesIsEmpty
// Il2CppName: get_eyesIsEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverLookAt::*)()>(&IKSolverLookAt::get_eyesIsEmpty)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "get_eyesIsEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::SolveEyes
// Il2CppName: SolveEyes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)()>(&IKSolverLookAt::SolveEyes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "SolveEyes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::GetForwards
// Il2CppName: GetForwards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Vector3>* (IKSolverLookAt::*)(::Array<UnityEngine::Vector3>*&, UnityEngine::Vector3, UnityEngine::Vector3, int, float)>(&IKSolverLookAt::GetForwards)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "GetForwards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::SetBones
// Il2CppName: SetBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)(::Array<UnityEngine::Transform*>*, ::Array<RootMotion::FinalIK::IKSolverLookAt::LookAtBone*>*&)>(&IKSolverLookAt::SetBones)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "SetBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverLookAt::LookAtBone*>*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)()>(&IKSolverLookAt::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)()>(&IKSolverLookAt::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverLookAt::*)(::Il2CppString*&)>(&IKSolverLookAt::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::GetPoints
// Il2CppName: GetPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<RootMotion::FinalIK::IKSolver::Point*>* (IKSolverLookAt::*)()>(&IKSolverLookAt::GetPoints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "GetPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver::Point* (IKSolverLookAt::*)(UnityEngine::Transform*)>(&IKSolverLookAt::GetPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::OnInitiate
// Il2CppName: OnInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)()>(&IKSolverLookAt::OnInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "OnInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)()>(&IKSolverLookAt::OnUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)()>(&IKSolverLookAt::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::*)()>(&IKSolverLookAt::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverLookAt/LookAtBone
#include "RootMotion/FinalIK/IKSolverLookAt_LookAtBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt/LookAtBone.Initiate
void RootMotion::FinalIK::IKSolverLookAt::LookAtBone::Initiate(UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::LookAtBone::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt/LookAtBone.LookAt
void RootMotion::FinalIK::IKSolverLookAt::LookAtBone::LookAt(UnityEngine::Vector3 direction, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::LookAtBone::LookAt");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookAt", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, direction, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverLookAt/LookAtBone.get_forward
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverLookAt::LookAtBone::get_forward() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLookAt::LookAtBone::get_forward");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_forward", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverLookAt::LookAtBone::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::LookAtBone::*)(UnityEngine::Transform*)>(&IKSolverLookAt::LookAtBone::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt::LookAtBone*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::LookAtBone::LookAt
// Il2CppName: LookAt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::LookAtBone::*)(UnityEngine::Vector3, float)>(&IKSolverLookAt::LookAtBone::LookAt)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt::LookAtBone*), "LookAt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::LookAtBone::get_forward
// Il2CppName: get_forward
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverLookAt::LookAtBone::*)()>(&IKSolverLookAt::LookAtBone::get_forward)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt::LookAtBone*), "get_forward", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::LookAtBone::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::LookAtBone::*)()>(&IKSolverLookAt::LookAtBone::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt::LookAtBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::LookAtBone::*)()>(&IKSolverLookAt::LookAtBone::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt::LookAtBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverLookAt::LookAtBone::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::LookAtBone::*)(UnityEngine::Transform*)>(&IKSolverLookAt::LookAtBone::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt::LookAtBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverLookAt::LookAtBone::*)(UnityEngine::Transform*)>(&IKSolverLookAt::LookAtBone::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverLookAt::LookAtBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverTrigonometric
#include "RootMotion/FinalIK/IKSolverTrigonometric.hpp"
// Including type: RootMotion.FinalIK.IKSolverTrigonometric/TrigonometricBone
#include "RootMotion/FinalIK/IKSolverTrigonometric_TrigonometricBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.SetBendGoalPosition
void RootMotion::FinalIK::IKSolverTrigonometric::SetBendGoalPosition(UnityEngine::Vector3 goalPosition, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::SetBendGoalPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBendGoalPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(goalPosition), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, goalPosition, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.SetBendPlaneToCurrent
void RootMotion::FinalIK::IKSolverTrigonometric::SetBendPlaneToCurrent() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::SetBendPlaneToCurrent");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetBendPlaneToCurrent", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.SetIKRotation
void RootMotion::FinalIK::IKSolverTrigonometric::SetIKRotation(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::SetIKRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.SetIKRotationWeight
void RootMotion::FinalIK::IKSolverTrigonometric::SetIKRotationWeight(float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::SetIKRotationWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetIKRotationWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.GetIKRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverTrigonometric::GetIKRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::GetIKRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.GetIKRotationWeight
float RootMotion::FinalIK::IKSolverTrigonometric::GetIKRotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::GetIKRotationWeight");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetIKRotationWeight", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.SetChain
bool RootMotion::FinalIK::IKSolverTrigonometric::SetChain(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::SetChain");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetChain", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(root)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, bone1, bone2, bone3, root);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.Solve
void RootMotion::FinalIK::IKSolverTrigonometric::Solve(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, UnityEngine::Vector3 targetPosition, UnityEngine::Vector3 bendNormal, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverTrigonometric", "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(targetPosition), ::il2cpp_utils::ExtractType(bendNormal), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bone1, bone2, bone3, targetPosition, bendNormal, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.GetDirectionToBendPoint
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverTrigonometric::GetDirectionToBendPoint(UnityEngine::Vector3 direction, float directionMag, UnityEngine::Vector3 bendDirection, float sqrMag1, float sqrMag2) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::GetDirectionToBendPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverTrigonometric", "GetDirectionToBendPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(directionMag), ::il2cpp_utils::ExtractType(bendDirection), ::il2cpp_utils::ExtractType(sqrMag1), ::il2cpp_utils::ExtractType(sqrMag2)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, direction, directionMag, bendDirection, sqrMag1, sqrMag2);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.IsDirectHierarchy
bool RootMotion::FinalIK::IKSolverTrigonometric::IsDirectHierarchy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::IsDirectHierarchy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsDirectHierarchy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.InitiateBones
void RootMotion::FinalIK::IKSolverTrigonometric::InitiateBones() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::InitiateBones");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InitiateBones", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.OnInitiateVirtual
void RootMotion::FinalIK::IKSolverTrigonometric::OnInitiateVirtual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::OnInitiateVirtual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiateVirtual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.OnUpdateVirtual
void RootMotion::FinalIK::IKSolverTrigonometric::OnUpdateVirtual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::OnUpdateVirtual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdateVirtual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.OnPostSolveVirtual
void RootMotion::FinalIK::IKSolverTrigonometric::OnPostSolveVirtual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::OnPostSolveVirtual");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostSolveVirtual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.GetBendDirection
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverTrigonometric::GetBendDirection(UnityEngine::Vector3 IKPosition, UnityEngine::Vector3 bendNormal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::GetBendDirection");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBendDirection", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(IKPosition), ::il2cpp_utils::ExtractType(bendNormal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, IKPosition, bendNormal);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverTrigonometric::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverTrigonometric::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverTrigonometric::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.FixTransforms
void RootMotion::FinalIK::IKSolverTrigonometric::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.IsValid
bool RootMotion::FinalIK::IKSolverTrigonometric::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.OnInitiate
void RootMotion::FinalIK::IKSolverTrigonometric::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric.OnUpdate
void RootMotion::FinalIK::IKSolverTrigonometric::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverTrigonometric::SetBendGoalPosition
// Il2CppName: SetBendGoalPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::*)(UnityEngine::Vector3, float)>(&IKSolverTrigonometric::SetBendGoalPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "SetBendGoalPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::SetBendPlaneToCurrent
// Il2CppName: SetBendPlaneToCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::*)()>(&IKSolverTrigonometric::SetBendPlaneToCurrent)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "SetBendPlaneToCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::SetIKRotation
// Il2CppName: SetIKRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::*)(UnityEngine::Quaternion)>(&IKSolverTrigonometric::SetIKRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "SetIKRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::SetIKRotationWeight
// Il2CppName: SetIKRotationWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::*)(float)>(&IKSolverTrigonometric::SetIKRotationWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "SetIKRotationWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::GetIKRotation
// Il2CppName: GetIKRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKSolverTrigonometric::*)()>(&IKSolverTrigonometric::GetIKRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "GetIKRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::GetIKRotationWeight
// Il2CppName: GetIKRotationWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IKSolverTrigonometric::*)()>(&IKSolverTrigonometric::GetIKRotationWeight)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "GetIKRotationWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::SetChain
// Il2CppName: SetChain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverTrigonometric::*)(UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*)>(&IKSolverTrigonometric::SetChain)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "SetChain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::Vector3, UnityEngine::Vector3, float)>(&IKSolverTrigonometric::Solve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::GetDirectionToBendPoint
// Il2CppName: GetDirectionToBendPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, float, UnityEngine::Vector3, float, float)>(&IKSolverTrigonometric::GetDirectionToBendPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "GetDirectionToBendPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::IsDirectHierarchy
// Il2CppName: IsDirectHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverTrigonometric::*)()>(&IKSolverTrigonometric::IsDirectHierarchy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "IsDirectHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::InitiateBones
// Il2CppName: InitiateBones
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::*)()>(&IKSolverTrigonometric::InitiateBones)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "InitiateBones", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::OnInitiateVirtual
// Il2CppName: OnInitiateVirtual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::*)()>(&IKSolverTrigonometric::OnInitiateVirtual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "OnInitiateVirtual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::OnUpdateVirtual
// Il2CppName: OnUpdateVirtual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::*)()>(&IKSolverTrigonometric::OnUpdateVirtual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "OnUpdateVirtual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::OnPostSolveVirtual
// Il2CppName: OnPostSolveVirtual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::*)()>(&IKSolverTrigonometric::OnPostSolveVirtual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "OnPostSolveVirtual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::GetBendDirection
// Il2CppName: GetBendDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverTrigonometric::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&IKSolverTrigonometric::GetBendDirection)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "GetBendDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::GetPoints
// Il2CppName: GetPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<RootMotion::FinalIK::IKSolver::Point*>* (IKSolverTrigonometric::*)()>(&IKSolverTrigonometric::GetPoints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "GetPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver::Point* (IKSolverTrigonometric::*)(UnityEngine::Transform*)>(&IKSolverTrigonometric::GetPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::*)()>(&IKSolverTrigonometric::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::*)()>(&IKSolverTrigonometric::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverTrigonometric::*)(::Il2CppString*&)>(&IKSolverTrigonometric::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::OnInitiate
// Il2CppName: OnInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::*)()>(&IKSolverTrigonometric::OnInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "OnInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::*)()>(&IKSolverTrigonometric::OnUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::*)()>(&IKSolverTrigonometric::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::*)()>(&IKSolverTrigonometric::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverTrigonometric/TrigonometricBone
#include "RootMotion/FinalIK/IKSolverTrigonometric_TrigonometricBone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric/TrigonometricBone.Initiate
void RootMotion::FinalIK::IKSolverTrigonometric::TrigonometricBone::Initiate(UnityEngine::Vector3 childPosition, UnityEngine::Vector3 bendNormal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::TrigonometricBone::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(childPosition), ::il2cpp_utils::ExtractType(bendNormal)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, childPosition, bendNormal);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric/TrigonometricBone.GetRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverTrigonometric::TrigonometricBone::GetRotation(UnityEngine::Vector3 direction, UnityEngine::Vector3 bendNormal) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::TrigonometricBone::GetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(bendNormal)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, direction, bendNormal);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverTrigonometric/TrigonometricBone.GetBendNormalFromCurrentRotation
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverTrigonometric::TrigonometricBone::GetBendNormalFromCurrentRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverTrigonometric::TrigonometricBone::GetBendNormalFromCurrentRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBendNormalFromCurrentRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverTrigonometric::TrigonometricBone::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::TrigonometricBone::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&IKSolverTrigonometric::TrigonometricBone::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric::TrigonometricBone*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::TrigonometricBone::GetRotation
// Il2CppName: GetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKSolverTrigonometric::TrigonometricBone::*)(UnityEngine::Vector3, UnityEngine::Vector3)>(&IKSolverTrigonometric::TrigonometricBone::GetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric::TrigonometricBone*), "GetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::TrigonometricBone::GetBendNormalFromCurrentRotation
// Il2CppName: GetBendNormalFromCurrentRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverTrigonometric::TrigonometricBone::*)()>(&IKSolverTrigonometric::TrigonometricBone::GetBendNormalFromCurrentRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric::TrigonometricBone*), "GetBendNormalFromCurrentRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverTrigonometric::TrigonometricBone::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::TrigonometricBone::*)()>(&IKSolverTrigonometric::TrigonometricBone::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric::TrigonometricBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverTrigonometric::TrigonometricBone::*)()>(&IKSolverTrigonometric::TrigonometricBone::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverTrigonometric::TrigonometricBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR
#include "RootMotion/FinalIK/IKSolverVR.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/Arm
#include "RootMotion/FinalIK/IKSolverVR_Arm.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/BodyPart
#include "RootMotion/FinalIK/IKSolverVR_BodyPart.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/Footstep
#include "RootMotion/FinalIK/IKSolverVR_Footstep.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/Leg
#include "RootMotion/FinalIK/IKSolverVR_Leg.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/Locomotion
#include "RootMotion/FinalIK/IKSolverVR_Locomotion.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/Spine
#include "RootMotion/FinalIK/IKSolverVR_Spine.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/PositionOffset
#include "RootMotion/FinalIK/IKSolverVR_PositionOffset.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/RotationOffset
#include "RootMotion/FinalIK/IKSolverVR_RotationOffset.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/VirtualBone
#include "RootMotion/FinalIK/IKSolverVR_VirtualBone.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.VRIK/References
#include "RootMotion/FinalIK/VRIK_References.hpp"
// Including type: RootMotion.FinalIK.IKSolver/Point
#include "RootMotion/FinalIK/IKSolver_Point.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.SetToReferences
void RootMotion::FinalIK::IKSolverVR::SetToReferences(RootMotion::FinalIK::VRIK::References* references) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::SetToReferences");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetToReferences", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, references);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GuessHandOrientations
void RootMotion::FinalIK::IKSolverVR::GuessHandOrientations(RootMotion::FinalIK::VRIK::References* references, bool onlyIfZero) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GuessHandOrientations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GuessHandOrientations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(references), ::il2cpp_utils::ExtractType(onlyIfZero)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, references, onlyIfZero);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.DefaultAnimationCurves
void RootMotion::FinalIK::IKSolverVR::DefaultAnimationCurves() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::DefaultAnimationCurves");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DefaultAnimationCurves", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.AddPositionOffset
void RootMotion::FinalIK::IKSolverVR::AddPositionOffset(RootMotion::FinalIK::IKSolverVR::PositionOffset positionOffset, UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::AddPositionOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPositionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positionOffset), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positionOffset, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.AddRotationOffset
void RootMotion::FinalIK::IKSolverVR::AddRotationOffset(RootMotion::FinalIK::IKSolverVR::RotationOffset rotationOffset, UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::AddRotationOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddRotationOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotationOffset), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rotationOffset, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.AddRotationOffset
void RootMotion::FinalIK::IKSolverVR::AddRotationOffset(RootMotion::FinalIK::IKSolverVR::RotationOffset rotationOffset, UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::AddRotationOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddRotationOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotationOffset), ::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rotationOffset, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.AddPlatformMotion
void RootMotion::FinalIK::IKSolverVR::AddPlatformMotion(UnityEngine::Vector3 deltaPosition, UnityEngine::Quaternion deltaRotation, UnityEngine::Vector3 platformPivot) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::AddPlatformMotion");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPlatformMotion", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(deltaPosition), ::il2cpp_utils::ExtractType(deltaRotation), ::il2cpp_utils::ExtractType(platformPivot)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, deltaPosition, deltaRotation, platformPivot);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.Reset
void RootMotion::FinalIK::IKSolverVR::Reset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GetNormal
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::GetNormal(::Array<UnityEngine::Transform*>* transforms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GetNormal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetNormal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transforms)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, transforms);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GuessWristToPalmAxis
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::GuessWristToPalmAxis(UnityEngine::Transform* hand, UnityEngine::Transform* forearm) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GuessWristToPalmAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GuessWristToPalmAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(forearm)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, hand, forearm);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GuessPalmToThumbAxis
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::GuessPalmToThumbAxis(UnityEngine::Transform* hand, UnityEngine::Transform* forearm) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GuessPalmToThumbAxis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GuessPalmToThumbAxis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(hand), ::il2cpp_utils::ExtractType(forearm)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, hand, forearm);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GetSineKeyframes
::Array<UnityEngine::Keyframe>* RootMotion::FinalIK::IKSolverVR::GetSineKeyframes(float mag) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GetSineKeyframes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR", "GetSineKeyframes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(mag)})));
  return ::il2cpp_utils::RunMethodThrow<::Array<UnityEngine::Keyframe>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, mag);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.UpdateSolverTransforms
void RootMotion::FinalIK::IKSolverVR::UpdateSolverTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::UpdateSolverTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateSolverTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.WriteTransforms
void RootMotion::FinalIK::IKSolverVR::WriteTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::WriteTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WriteTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.Read
void RootMotion::FinalIK::IKSolverVR::Read(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations), ::il2cpp_utils::ExtractType(hasChest), ::il2cpp_utils::ExtractType(hasNeck), ::il2cpp_utils::ExtractType(hasShoulders), ::il2cpp_utils::ExtractType(hasToes), ::il2cpp_utils::ExtractType(hasLegs)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations, hasChest, hasNeck, hasShoulders, hasToes, hasLegs);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.Solve
void RootMotion::FinalIK::IKSolverVR::Solve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GetPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::GetPosition(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GetPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GetRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverVR::GetRotation(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.get_rootBone
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::get_rootBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::get_rootBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rootBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.set_rootBone
void RootMotion::FinalIK::IKSolverVR::set_rootBone(RootMotion::FinalIK::IKSolverVR::VirtualBone* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::set_rootBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rootBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.Write
void RootMotion::FinalIK::IKSolverVR::Write() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Write");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GetPelvisOffset
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::GetPelvisOffset() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GetPelvisOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPelvisOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.StoreDefaultLocalState
void RootMotion::FinalIK::IKSolverVR::StoreDefaultLocalState() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::StoreDefaultLocalState");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaultLocalState", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.FixTransforms
void RootMotion::FinalIK::IKSolverVR::FixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::FixTransforms");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GetPoints
::Array<RootMotion::FinalIK::IKSolver::Point*>* RootMotion::FinalIK::IKSolverVR::GetPoints() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GetPoints");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoints", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::IKSolver::Point*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.GetPoint
RootMotion::FinalIK::IKSolver::Point* RootMotion::FinalIK::IKSolverVR::GetPoint(UnityEngine::Transform* transform) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::GetPoint");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(transform)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolver::Point*, false>(this, ___internal__method, transform);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.IsValid
bool RootMotion::FinalIK::IKSolverVR::IsValid(::Il2CppString*& message) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::IsValid");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, message);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.OnInitiate
void RootMotion::FinalIK::IKSolverVR::OnInitiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::OnInitiate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnInitiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR.OnUpdate
void RootMotion::FinalIK::IKSolverVR::OnUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::OnUpdate");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverVR::SetToReferences
// Il2CppName: SetToReferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)(RootMotion::FinalIK::VRIK::References*)>(&IKSolverVR::SetToReferences)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "SetToReferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::VRIK::References*>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::GuessHandOrientations
// Il2CppName: GuessHandOrientations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)(RootMotion::FinalIK::VRIK::References*, bool)>(&IKSolverVR::GuessHandOrientations)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "GuessHandOrientations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::VRIK::References*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::DefaultAnimationCurves
// Il2CppName: DefaultAnimationCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)()>(&IKSolverVR::DefaultAnimationCurves)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "DefaultAnimationCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::AddPositionOffset
// Il2CppName: AddPositionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)(RootMotion::FinalIK::IKSolverVR::PositionOffset, UnityEngine::Vector3)>(&IKSolverVR::AddPositionOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "AddPositionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::PositionOffset>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::AddRotationOffset
// Il2CppName: AddRotationOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)(RootMotion::FinalIK::IKSolverVR::RotationOffset, UnityEngine::Vector3)>(&IKSolverVR::AddRotationOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "AddRotationOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::RotationOffset>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::AddRotationOffset
// Il2CppName: AddRotationOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)(RootMotion::FinalIK::IKSolverVR::RotationOffset, UnityEngine::Quaternion)>(&IKSolverVR::AddRotationOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "AddRotationOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::RotationOffset>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::AddPlatformMotion
// Il2CppName: AddPlatformMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)(UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Vector3)>(&IKSolverVR::AddPlatformMotion)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "AddPlatformMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)()>(&IKSolverVR::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::GetNormal
// Il2CppName: GetNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverVR::*)(::Array<UnityEngine::Transform*>*)>(&IKSolverVR::GetNormal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "GetNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Transform*>*>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::GuessWristToPalmAxis
// Il2CppName: GuessWristToPalmAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverVR::*)(UnityEngine::Transform*, UnityEngine::Transform*)>(&IKSolverVR::GuessWristToPalmAxis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "GuessWristToPalmAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::GuessPalmToThumbAxis
// Il2CppName: GuessPalmToThumbAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverVR::*)(UnityEngine::Transform*, UnityEngine::Transform*)>(&IKSolverVR::GuessPalmToThumbAxis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "GuessPalmToThumbAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::GetSineKeyframes
// Il2CppName: GetSineKeyframes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Keyframe>* (*)(float)>(&IKSolverVR::GetSineKeyframes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "GetSineKeyframes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::UpdateSolverTransforms
// Il2CppName: UpdateSolverTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)()>(&IKSolverVR::UpdateSolverTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "UpdateSolverTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::WriteTransforms
// Il2CppName: WriteTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)()>(&IKSolverVR::WriteTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "WriteTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)(::Array<UnityEngine::Vector3>*, ::Array<UnityEngine::Quaternion>*, bool, bool, bool, bool, bool)>(&IKSolverVR::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Quaternion>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)()>(&IKSolverVR::Solve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::GetPosition
// Il2CppName: GetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverVR::*)(int)>(&IKSolverVR::GetPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "GetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::GetRotation
// Il2CppName: GetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKSolverVR::*)(int)>(&IKSolverVR::GetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "GetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::get_rootBone
// Il2CppName: get_rootBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolverVR::VirtualBone* (IKSolverVR::*)()>(&IKSolverVR::get_rootBone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "get_rootBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::set_rootBone
// Il2CppName: set_rootBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)(RootMotion::FinalIK::IKSolverVR::VirtualBone*)>(&IKSolverVR::set_rootBone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "set_rootBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::VirtualBone*>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)()>(&IKSolverVR::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::GetPelvisOffset
// Il2CppName: GetPelvisOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverVR::*)()>(&IKSolverVR::GetPelvisOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "GetPelvisOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::StoreDefaultLocalState
// Il2CppName: StoreDefaultLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)()>(&IKSolverVR::StoreDefaultLocalState)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "StoreDefaultLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::FixTransforms
// Il2CppName: FixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)()>(&IKSolverVR::FixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "FixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::GetPoints
// Il2CppName: GetPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<RootMotion::FinalIK::IKSolver::Point*>* (IKSolverVR::*)()>(&IKSolverVR::GetPoints)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "GetPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::GetPoint
// Il2CppName: GetPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolver::Point* (IKSolverVR::*)(UnityEngine::Transform*)>(&IKSolverVR::GetPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "GetPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverVR::*)(::Il2CppString*&)>(&IKSolverVR::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppString*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::OnInitiate
// Il2CppName: OnInitiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)()>(&IKSolverVR::OnInitiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "OnInitiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::OnUpdate
// Il2CppName: OnUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)()>(&IKSolverVR::OnUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), "OnUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)()>(&IKSolverVR::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::*)()>(&IKSolverVR::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR/Arm
#include "RootMotion/FinalIK/IKSolverVR_Arm.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/VirtualBone
#include "RootMotion/FinalIK/IKSolverVR_VirtualBone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.Single yawOffsetAngle
float RootMotion::FinalIK::IKSolverVR::Arm::_get_yawOffsetAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::_get_yawOffsetAngle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("RootMotion.FinalIK", "IKSolverVR/Arm", "yawOffsetAngle"));
}
// Autogenerated static field setter
// Set static field: static private System.Single yawOffsetAngle
void RootMotion::FinalIK::IKSolverVR::Arm::_set_yawOffsetAngle(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::_set_yawOffsetAngle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/Arm", "yawOffsetAngle", value));
}
// Autogenerated static field getter
// Get static field: static private System.Single pitchOffsetAngle
float RootMotion::FinalIK::IKSolverVR::Arm::_get_pitchOffsetAngle() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::_get_pitchOffsetAngle");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>("RootMotion.FinalIK", "IKSolverVR/Arm", "pitchOffsetAngle"));
}
// Autogenerated static field setter
// Set static field: static private System.Single pitchOffsetAngle
void RootMotion::FinalIK::IKSolverVR::Arm::_set_pitchOffsetAngle(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::_set_pitchOffsetAngle");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/Arm", "pitchOffsetAngle", value));
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.get_position
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Arm::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.set_position
void RootMotion::FinalIK::IKSolverVR::Arm::set_position(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::set_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.get_rotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverVR::Arm::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.set_rotation
void RootMotion::FinalIK::IKSolverVR::Arm::set_rotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::set_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.get_shoulder
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Arm::get_shoulder() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::get_shoulder");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_shoulder", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.get_upperArm
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Arm::get_upperArm() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::get_upperArm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_upperArm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.get_forearm
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Arm::get_forearm() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::get_forearm");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_forearm", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.get_hand
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Arm::get_hand() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::get_hand");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hand", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.Stretching
void RootMotion::FinalIK::IKSolverVR::Arm::Stretching() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::Stretching");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stretching", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.Solve
void RootMotion::FinalIK::IKSolverVR::Arm::Solve(bool isLeft) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(isLeft)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, isLeft);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.DamperValue
float RootMotion::FinalIK::IKSolverVR::Arm::DamperValue(float value, float min, float max, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::DamperValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "DamperValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(min), ::il2cpp_utils::ExtractType(max), ::il2cpp_utils::ExtractType(weight)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, value, min, max, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.GetBendNormal
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Arm::GetBendNormal(UnityEngine::Vector3 dir) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::GetBendNormal");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBendNormal", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(dir)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, dir);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.Visualize
void RootMotion::FinalIK::IKSolverVR::Arm::Visualize(RootMotion::FinalIK::IKSolverVR::VirtualBone* bone1, RootMotion::FinalIK::IKSolverVR::VirtualBone* bone2, RootMotion::FinalIK::IKSolverVR::VirtualBone* bone3, UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::Visualize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Visualize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone1), ::il2cpp_utils::ExtractType(bone2), ::il2cpp_utils::ExtractType(bone3), ::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone1, bone2, bone3, color);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.OnRead
void RootMotion::FinalIK::IKSolverVR::Arm::OnRead(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::OnRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations), ::il2cpp_utils::ExtractType(hasChest), ::il2cpp_utils::ExtractType(hasNeck), ::il2cpp_utils::ExtractType(hasShoulders), ::il2cpp_utils::ExtractType(hasToes), ::il2cpp_utils::ExtractType(hasLegs), ::il2cpp_utils::ExtractType(rootIndex), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations, hasChest, hasNeck, hasShoulders, hasToes, hasLegs, rootIndex, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.PreSolve
void RootMotion::FinalIK::IKSolverVR::Arm::PreSolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::PreSolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.ApplyOffsets
void RootMotion::FinalIK::IKSolverVR::Arm::ApplyOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::ApplyOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.ResetOffsets
void RootMotion::FinalIK::IKSolverVR::Arm::ResetOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::ResetOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Arm.Write
void RootMotion::FinalIK::IKSolverVR::Arm::Write(::Array<UnityEngine::Vector3>*& solvedPositions, ::Array<UnityEngine::Quaternion>*& solvedRotations) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solvedPositions), ::il2cpp_utils::ExtractType(solvedRotations)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solvedPositions, solvedRotations);
}
// Writing MetadataGetter for method: IKSolverVR::Arm::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverVR::Arm::*)()>(&IKSolverVR::Arm::get_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Arm::*)(UnityEngine::Vector3)>(&IKSolverVR::Arm::set_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKSolverVR::Arm::*)()>(&IKSolverVR::Arm::get_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Arm::*)(UnityEngine::Quaternion)>(&IKSolverVR::Arm::set_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::get_shoulder
// Il2CppName: get_shoulder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolverVR::VirtualBone* (IKSolverVR::Arm::*)()>(&IKSolverVR::Arm::get_shoulder)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "get_shoulder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::get_upperArm
// Il2CppName: get_upperArm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolverVR::VirtualBone* (IKSolverVR::Arm::*)()>(&IKSolverVR::Arm::get_upperArm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "get_upperArm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::get_forearm
// Il2CppName: get_forearm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolverVR::VirtualBone* (IKSolverVR::Arm::*)()>(&IKSolverVR::Arm::get_forearm)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "get_forearm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::get_hand
// Il2CppName: get_hand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolverVR::VirtualBone* (IKSolverVR::Arm::*)()>(&IKSolverVR::Arm::get_hand)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "get_hand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::Stretching
// Il2CppName: Stretching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Arm::*)()>(&IKSolverVR::Arm::Stretching)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "Stretching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Arm::*)(bool)>(&IKSolverVR::Arm::Solve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::DamperValue
// Il2CppName: DamperValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IKSolverVR::Arm::*)(float, float, float, float)>(&IKSolverVR::Arm::DamperValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "DamperValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::GetBendNormal
// Il2CppName: GetBendNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverVR::Arm::*)(UnityEngine::Vector3)>(&IKSolverVR::Arm::GetBendNormal)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "GetBendNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::Visualize
// Il2CppName: Visualize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Arm::*)(RootMotion::FinalIK::IKSolverVR::VirtualBone*, RootMotion::FinalIK::IKSolverVR::VirtualBone*, RootMotion::FinalIK::IKSolverVR::VirtualBone*, UnityEngine::Color)>(&IKSolverVR::Arm::Visualize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "Visualize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::VirtualBone*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::VirtualBone*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::VirtualBone*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::OnRead
// Il2CppName: OnRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Arm::*)(::Array<UnityEngine::Vector3>*, ::Array<UnityEngine::Quaternion>*, bool, bool, bool, bool, bool, int, int)>(&IKSolverVR::Arm::OnRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "OnRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Quaternion>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::PreSolve
// Il2CppName: PreSolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Arm::*)()>(&IKSolverVR::Arm::PreSolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "PreSolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::ApplyOffsets
// Il2CppName: ApplyOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Arm::*)()>(&IKSolverVR::Arm::ApplyOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "ApplyOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::ResetOffsets
// Il2CppName: ResetOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Arm::*)()>(&IKSolverVR::Arm::ResetOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "ResetOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Arm::*)(::Array<UnityEngine::Vector3>*&, ::Array<UnityEngine::Quaternion>*&)>(&IKSolverVR::Arm::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*&>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Quaternion>*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Arm::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Arm::*)()>(&IKSolverVR::Arm::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Arm::*)()>(&IKSolverVR::Arm::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Arm*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverVR/Arm/ShoulderRotationMode
#include "RootMotion/FinalIK/IKSolverVR_Arm.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/Arm/ShoulderRotationMode YawPitch
RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_get_YawPitch() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_get_YawPitch");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode>("RootMotion.FinalIK", "IKSolverVR/Arm/ShoulderRotationMode", "YawPitch"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/Arm/ShoulderRotationMode YawPitch
void RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_set_YawPitch(RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_set_YawPitch");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/Arm/ShoulderRotationMode", "YawPitch", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/Arm/ShoulderRotationMode FromTo
RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_get_FromTo() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_get_FromTo");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode>("RootMotion.FinalIK", "IKSolverVR/Arm/ShoulderRotationMode", "FromTo"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/Arm/ShoulderRotationMode FromTo
void RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_set_FromTo(RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode::_set_FromTo");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/Arm/ShoulderRotationMode", "FromTo", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR/BodyPart
#include "RootMotion/FinalIK/IKSolverVR_BodyPart.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/VirtualBone
#include "RootMotion/FinalIK/IKSolverVR_VirtualBone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.OnRead
void RootMotion::FinalIK::IKSolverVR::BodyPart::OnRead(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::OnRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations), ::il2cpp_utils::ExtractType(hasChest), ::il2cpp_utils::ExtractType(hasNeck), ::il2cpp_utils::ExtractType(hasShoulders), ::il2cpp_utils::ExtractType(hasToes), ::il2cpp_utils::ExtractType(hasLegs), ::il2cpp_utils::ExtractType(rootIndex), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations, hasChest, hasNeck, hasShoulders, hasToes, hasLegs, rootIndex, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.PreSolve
void RootMotion::FinalIK::IKSolverVR::BodyPart::PreSolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::PreSolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.Write
void RootMotion::FinalIK::IKSolverVR::BodyPart::Write(::Array<UnityEngine::Vector3>*& solvedPositions, ::Array<UnityEngine::Quaternion>*& solvedRotations) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solvedPositions), ::il2cpp_utils::ExtractType(solvedRotations)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solvedPositions, solvedRotations);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.ApplyOffsets
void RootMotion::FinalIK::IKSolverVR::BodyPart::ApplyOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::ApplyOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.ResetOffsets
void RootMotion::FinalIK::IKSolverVR::BodyPart::ResetOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::ResetOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.get_sqrMag
float RootMotion::FinalIK::IKSolverVR::BodyPart::get_sqrMag() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::get_sqrMag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_sqrMag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.set_sqrMag
void RootMotion::FinalIK::IKSolverVR::BodyPart::set_sqrMag(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::set_sqrMag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_sqrMag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.get_mag
float RootMotion::FinalIK::IKSolverVR::BodyPart::get_mag() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::get_mag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_mag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.set_mag
void RootMotion::FinalIK::IKSolverVR::BodyPart::set_mag(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::set_mag");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mag", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.SetLOD
void RootMotion::FinalIK::IKSolverVR::BodyPart::SetLOD(int LOD) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::SetLOD");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetLOD", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(LOD)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, LOD);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.Read
void RootMotion::FinalIK::IKSolverVR::BodyPart::Read(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations), ::il2cpp_utils::ExtractType(hasChest), ::il2cpp_utils::ExtractType(hasNeck), ::il2cpp_utils::ExtractType(hasShoulders), ::il2cpp_utils::ExtractType(hasToes), ::il2cpp_utils::ExtractType(hasLegs), ::il2cpp_utils::ExtractType(rootIndex), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations, hasChest, hasNeck, hasShoulders, hasToes, hasLegs, rootIndex, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.MovePosition
void RootMotion::FinalIK::IKSolverVR::BodyPart::MovePosition(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::MovePosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MovePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.MoveRotation
void RootMotion::FinalIK::IKSolverVR::BodyPart::MoveRotation(UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::MoveRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "MoveRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.Translate
void RootMotion::FinalIK::IKSolverVR::BodyPart::Translate(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::Translate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Translate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.TranslateRoot
void RootMotion::FinalIK::IKSolverVR::BodyPart::TranslateRoot(UnityEngine::Vector3 newRootPos, UnityEngine::Quaternion newRootRot) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::TranslateRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TranslateRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(newRootPos), ::il2cpp_utils::ExtractType(newRootRot)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newRootPos, newRootRot);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.RotateTo
void RootMotion::FinalIK::IKSolverVR::BodyPart::RotateTo(RootMotion::FinalIK::IKSolverVR::VirtualBone* bone, UnityEngine::Quaternion rotation, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::RotateTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bone), ::il2cpp_utils::ExtractType(rotation), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bone, rotation, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.Visualize
void RootMotion::FinalIK::IKSolverVR::BodyPart::Visualize(UnityEngine::Color color) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::Visualize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Visualize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(color)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, color);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/BodyPart.Visualize
void RootMotion::FinalIK::IKSolverVR::BodyPart::Visualize() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::BodyPart::Visualize");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Visualize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverVR::BodyPart::OnRead
// Il2CppName: OnRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)(::Array<UnityEngine::Vector3>*, ::Array<UnityEngine::Quaternion>*, bool, bool, bool, bool, bool, int, int)>(&IKSolverVR::BodyPart::OnRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "OnRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Quaternion>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::PreSolve
// Il2CppName: PreSolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)()>(&IKSolverVR::BodyPart::PreSolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "PreSolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)(::Array<UnityEngine::Vector3>*&, ::Array<UnityEngine::Quaternion>*&)>(&IKSolverVR::BodyPart::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*&>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Quaternion>*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::ApplyOffsets
// Il2CppName: ApplyOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)()>(&IKSolverVR::BodyPart::ApplyOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "ApplyOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::ResetOffsets
// Il2CppName: ResetOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)()>(&IKSolverVR::BodyPart::ResetOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "ResetOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::get_sqrMag
// Il2CppName: get_sqrMag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IKSolverVR::BodyPart::*)()>(&IKSolverVR::BodyPart::get_sqrMag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "get_sqrMag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::set_sqrMag
// Il2CppName: set_sqrMag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)(float)>(&IKSolverVR::BodyPart::set_sqrMag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "set_sqrMag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::get_mag
// Il2CppName: get_mag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IKSolverVR::BodyPart::*)()>(&IKSolverVR::BodyPart::get_mag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "get_mag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::set_mag
// Il2CppName: set_mag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)(float)>(&IKSolverVR::BodyPart::set_mag)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "set_mag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::SetLOD
// Il2CppName: SetLOD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)(int)>(&IKSolverVR::BodyPart::SetLOD)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "SetLOD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)(::Array<UnityEngine::Vector3>*, ::Array<UnityEngine::Quaternion>*, bool, bool, bool, bool, bool, int, int)>(&IKSolverVR::BodyPart::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Quaternion>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::MovePosition
// Il2CppName: MovePosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)(UnityEngine::Vector3)>(&IKSolverVR::BodyPart::MovePosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "MovePosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::MoveRotation
// Il2CppName: MoveRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)(UnityEngine::Quaternion)>(&IKSolverVR::BodyPart::MoveRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "MoveRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::Translate
// Il2CppName: Translate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)(UnityEngine::Vector3, UnityEngine::Quaternion)>(&IKSolverVR::BodyPart::Translate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "Translate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::TranslateRoot
// Il2CppName: TranslateRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)(UnityEngine::Vector3, UnityEngine::Quaternion)>(&IKSolverVR::BodyPart::TranslateRoot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "TranslateRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::RotateTo
// Il2CppName: RotateTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)(RootMotion::FinalIK::IKSolverVR::VirtualBone*, UnityEngine::Quaternion, float)>(&IKSolverVR::BodyPart::RotateTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "RotateTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::VirtualBone*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::Visualize
// Il2CppName: Visualize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)(UnityEngine::Color)>(&IKSolverVR::BodyPart::Visualize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "Visualize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Color>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::Visualize
// Il2CppName: Visualize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)()>(&IKSolverVR::BodyPart::Visualize)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), "Visualize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::BodyPart::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)()>(&IKSolverVR::BodyPart::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::BodyPart::*)()>(&IKSolverVR::BodyPart::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::BodyPart*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverVR/Footstep
#include "RootMotion/FinalIK/IKSolverVR_Footstep.hpp"
// Including type: RootMotion.InterpolationMode
#include "RootMotion/InterpolationMode.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Footstep.get_isStepping
bool RootMotion::FinalIK::IKSolverVR::Footstep::get_isStepping() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::get_isStepping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isStepping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Footstep.get_stepProgress
float RootMotion::FinalIK::IKSolverVR::Footstep::get_stepProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::get_stepProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_stepProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Footstep.set_stepProgress
void RootMotion::FinalIK::IKSolverVR::Footstep::set_stepProgress(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::set_stepProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_stepProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Footstep.Reset
void RootMotion::FinalIK::IKSolverVR::Footstep::Reset(UnityEngine::Quaternion rootRotation, UnityEngine::Vector3 footPosition, UnityEngine::Quaternion footRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootRotation), ::il2cpp_utils::ExtractType(footPosition), ::il2cpp_utils::ExtractType(footRotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rootRotation, footPosition, footRotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Footstep.StepTo
void RootMotion::FinalIK::IKSolverVR::Footstep::StepTo(UnityEngine::Vector3 p, UnityEngine::Quaternion rootRotation, float stepThreshold) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::StepTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StepTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(rootRotation), ::il2cpp_utils::ExtractType(stepThreshold)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, p, rootRotation, stepThreshold);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Footstep.UpdateStepping
void RootMotion::FinalIK::IKSolverVR::Footstep::UpdateStepping(UnityEngine::Vector3 p, UnityEngine::Quaternion rootRotation, float speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::UpdateStepping");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStepping", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p), ::il2cpp_utils::ExtractType(rootRotation), ::il2cpp_utils::ExtractType(speed)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, p, rootRotation, speed);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Footstep.UpdateStanding
void RootMotion::FinalIK::IKSolverVR::Footstep::UpdateStanding(UnityEngine::Quaternion rootRotation, float minAngle, float speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::UpdateStanding");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateStanding", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootRotation), ::il2cpp_utils::ExtractType(minAngle), ::il2cpp_utils::ExtractType(speed)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rootRotation, minAngle, speed);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Footstep.Update
void RootMotion::FinalIK::IKSolverVR::Footstep::Update(RootMotion::InterpolationMode interpolation, UnityEngine::Events::UnityEvent* onStep) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Footstep::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interpolation), ::il2cpp_utils::ExtractType(onStep)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, interpolation, onStep);
}
// Writing MetadataGetter for method: IKSolverVR::Footstep::get_isStepping
// Il2CppName: get_isStepping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverVR::Footstep::*)()>(&IKSolverVR::Footstep::get_isStepping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Footstep*), "get_isStepping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Footstep::get_stepProgress
// Il2CppName: get_stepProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (IKSolverVR::Footstep::*)()>(&IKSolverVR::Footstep::get_stepProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Footstep*), "get_stepProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Footstep::set_stepProgress
// Il2CppName: set_stepProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Footstep::*)(float)>(&IKSolverVR::Footstep::set_stepProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Footstep*), "set_stepProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Footstep::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Footstep::*)(UnityEngine::Quaternion, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Vector3)>(&IKSolverVR::Footstep::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Footstep*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Footstep::*)(UnityEngine::Quaternion, UnityEngine::Vector3, UnityEngine::Quaternion, UnityEngine::Vector3)>(&IKSolverVR::Footstep::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Footstep*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Footstep::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Footstep::*)(UnityEngine::Quaternion, UnityEngine::Vector3, UnityEngine::Quaternion)>(&IKSolverVR::Footstep::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Footstep*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Footstep::StepTo
// Il2CppName: StepTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Footstep::*)(UnityEngine::Vector3, UnityEngine::Quaternion, float)>(&IKSolverVR::Footstep::StepTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Footstep*), "StepTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Footstep::UpdateStepping
// Il2CppName: UpdateStepping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Footstep::*)(UnityEngine::Vector3, UnityEngine::Quaternion, float)>(&IKSolverVR::Footstep::UpdateStepping)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Footstep*), "UpdateStepping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Footstep::UpdateStanding
// Il2CppName: UpdateStanding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Footstep::*)(UnityEngine::Quaternion, float, float)>(&IKSolverVR::Footstep::UpdateStanding)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Footstep*), "UpdateStanding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Footstep::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Footstep::*)(RootMotion::InterpolationMode, UnityEngine::Events::UnityEvent*)>(&IKSolverVR::Footstep::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Footstep*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::InterpolationMode>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Events::UnityEvent*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR/Leg
#include "RootMotion/FinalIK/IKSolverVR_Leg.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/VirtualBone
#include "RootMotion/FinalIK/IKSolverVR_VirtualBone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.get_position
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Leg::get_position() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.set_position
void RootMotion::FinalIK::IKSolverVR::Leg::set_position(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::set_position");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.get_rotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverVR::Leg::get_rotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.set_rotation
void RootMotion::FinalIK::IKSolverVR::Leg::set_rotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::set_rotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_rotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.get_hasToes
bool RootMotion::FinalIK::IKSolverVR::Leg::get_hasToes() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_hasToes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_hasToes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.set_hasToes
void RootMotion::FinalIK::IKSolverVR::Leg::set_hasToes(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::set_hasToes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_hasToes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.get_thigh
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Leg::get_thigh() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_thigh");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_thigh", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.get_calf
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Leg::get_calf() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_calf");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_calf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.get_foot
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Leg::get_foot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_foot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_foot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.get_toes
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Leg::get_toes() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_toes");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_toes", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.get_lastBone
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Leg::get_lastBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_lastBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lastBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.get_thighRelativeToPelvis
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Leg::get_thighRelativeToPelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::get_thighRelativeToPelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_thighRelativeToPelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.set_thighRelativeToPelvis
void RootMotion::FinalIK::IKSolverVR::Leg::set_thighRelativeToPelvis(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::set_thighRelativeToPelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_thighRelativeToPelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.ApplyPositionOffset
void RootMotion::FinalIK::IKSolverVR::Leg::ApplyPositionOffset(UnityEngine::Vector3 offset, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::ApplyPositionOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyPositionOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, offset, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.ApplyRotationOffset
void RootMotion::FinalIK::IKSolverVR::Leg::ApplyRotationOffset(UnityEngine::Quaternion offset, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::ApplyRotationOffset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyRotationOffset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, offset, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.Solve
void RootMotion::FinalIK::IKSolverVR::Leg::Solve(bool stretch) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(stretch)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, stretch);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.FixTwistRotations
void RootMotion::FinalIK::IKSolverVR::Leg::FixTwistRotations() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::FixTwistRotations");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FixTwistRotations", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.Stretching
void RootMotion::FinalIK::IKSolverVR::Leg::Stretching() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::Stretching");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stretching", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.OnRead
void RootMotion::FinalIK::IKSolverVR::Leg::OnRead(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::OnRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations), ::il2cpp_utils::ExtractType(hasChest), ::il2cpp_utils::ExtractType(hasNeck), ::il2cpp_utils::ExtractType(hasShoulders), ::il2cpp_utils::ExtractType(hasToes), ::il2cpp_utils::ExtractType(hasLegs), ::il2cpp_utils::ExtractType(rootIndex), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations, hasChest, hasNeck, hasShoulders, hasToes, hasLegs, rootIndex, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.PreSolve
void RootMotion::FinalIK::IKSolverVR::Leg::PreSolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::PreSolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.ApplyOffsets
void RootMotion::FinalIK::IKSolverVR::Leg::ApplyOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::ApplyOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.Write
void RootMotion::FinalIK::IKSolverVR::Leg::Write(::Array<UnityEngine::Vector3>*& solvedPositions, ::Array<UnityEngine::Quaternion>*& solvedRotations) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solvedPositions), ::il2cpp_utils::ExtractType(solvedRotations)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solvedPositions, solvedRotations);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Leg.ResetOffsets
void RootMotion::FinalIK::IKSolverVR::Leg::ResetOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Leg::ResetOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverVR::Leg::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::get_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)(UnityEngine::Vector3)>(&IKSolverVR::Leg::set_position)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::get_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)(UnityEngine::Quaternion)>(&IKSolverVR::Leg::set_rotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::get_hasToes
// Il2CppName: get_hasToes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::get_hasToes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "get_hasToes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::set_hasToes
// Il2CppName: set_hasToes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)(bool)>(&IKSolverVR::Leg::set_hasToes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "set_hasToes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::get_thigh
// Il2CppName: get_thigh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolverVR::VirtualBone* (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::get_thigh)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "get_thigh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::get_calf
// Il2CppName: get_calf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolverVR::VirtualBone* (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::get_calf)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "get_calf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::get_foot
// Il2CppName: get_foot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolverVR::VirtualBone* (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::get_foot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "get_foot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::get_toes
// Il2CppName: get_toes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolverVR::VirtualBone* (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::get_toes)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "get_toes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::get_lastBone
// Il2CppName: get_lastBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolverVR::VirtualBone* (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::get_lastBone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "get_lastBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::get_thighRelativeToPelvis
// Il2CppName: get_thighRelativeToPelvis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::get_thighRelativeToPelvis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "get_thighRelativeToPelvis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::set_thighRelativeToPelvis
// Il2CppName: set_thighRelativeToPelvis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)(UnityEngine::Vector3)>(&IKSolverVR::Leg::set_thighRelativeToPelvis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "set_thighRelativeToPelvis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::ApplyPositionOffset
// Il2CppName: ApplyPositionOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)(UnityEngine::Vector3, float)>(&IKSolverVR::Leg::ApplyPositionOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "ApplyPositionOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::ApplyRotationOffset
// Il2CppName: ApplyRotationOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)(UnityEngine::Quaternion, float)>(&IKSolverVR::Leg::ApplyRotationOffset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "ApplyRotationOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)(bool)>(&IKSolverVR::Leg::Solve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::FixTwistRotations
// Il2CppName: FixTwistRotations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::FixTwistRotations)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "FixTwistRotations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::Stretching
// Il2CppName: Stretching
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::Stretching)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "Stretching", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::OnRead
// Il2CppName: OnRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)(::Array<UnityEngine::Vector3>*, ::Array<UnityEngine::Quaternion>*, bool, bool, bool, bool, bool, int, int)>(&IKSolverVR::Leg::OnRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "OnRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Quaternion>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::PreSolve
// Il2CppName: PreSolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::PreSolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "PreSolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::ApplyOffsets
// Il2CppName: ApplyOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::ApplyOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "ApplyOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)(::Array<UnityEngine::Vector3>*&, ::Array<UnityEngine::Quaternion>*&)>(&IKSolverVR::Leg::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*&>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Quaternion>*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::ResetOffsets
// Il2CppName: ResetOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::ResetOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), "ResetOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Leg::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Leg::*)()>(&IKSolverVR::Leg::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Leg*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR/Locomotion
#include "RootMotion/FinalIK/IKSolverVR_Locomotion.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/Footstep
#include "RootMotion/FinalIK/IKSolverVR_Footstep.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/VirtualBone
#include "RootMotion/FinalIK/IKSolverVR_VirtualBone.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/Spine
#include "RootMotion/FinalIK/IKSolverVR_Spine.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/Leg
#include "RootMotion/FinalIK/IKSolverVR_Leg.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/Arm
#include "RootMotion/FinalIK/IKSolverVR_Arm.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Locomotion.get_centerOfMass
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Locomotion::get_centerOfMass() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::get_centerOfMass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_centerOfMass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Locomotion.set_centerOfMass
void RootMotion::FinalIK::IKSolverVR::Locomotion::set_centerOfMass(UnityEngine::Vector3 value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::set_centerOfMass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_centerOfMass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Locomotion.Initiate
void RootMotion::FinalIK::IKSolverVR::Locomotion::Initiate(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasToes) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations), ::il2cpp_utils::ExtractType(hasToes)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations, hasToes);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Locomotion.Reset
void RootMotion::FinalIK::IKSolverVR::Locomotion::Reset(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::Reset");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Reset", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Locomotion.AddDeltaRotation
void RootMotion::FinalIK::IKSolverVR::Locomotion::AddDeltaRotation(UnityEngine::Quaternion delta, UnityEngine::Vector3 pivot) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::AddDeltaRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddDeltaRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delta), ::il2cpp_utils::ExtractType(pivot)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, delta, pivot);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Locomotion.AddDeltaPosition
void RootMotion::FinalIK::IKSolverVR::Locomotion::AddDeltaPosition(UnityEngine::Vector3 delta) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::AddDeltaPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddDeltaPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(delta)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, delta);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Locomotion.Solve
void RootMotion::FinalIK::IKSolverVR::Locomotion::Solve(RootMotion::FinalIK::IKSolverVR::VirtualBone* rootBone, RootMotion::FinalIK::IKSolverVR::Spine* spine, RootMotion::FinalIK::IKSolverVR::Leg* leftLeg, RootMotion::FinalIK::IKSolverVR::Leg* rightLeg, RootMotion::FinalIK::IKSolverVR::Arm* leftArm, RootMotion::FinalIK::IKSolverVR::Arm* rightArm, int supportLegIndex, UnityEngine::Vector3& leftFootPosition, UnityEngine::Vector3& rightFootPosition, UnityEngine::Quaternion& leftFootRotation, UnityEngine::Quaternion& rightFootRotation, float& leftFootOffset, float& rightFootOffset, float& leftHeelOffset, float& rightHeelOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootBone), ::il2cpp_utils::ExtractType(spine), ::il2cpp_utils::ExtractType(leftLeg), ::il2cpp_utils::ExtractType(rightLeg), ::il2cpp_utils::ExtractType(leftArm), ::il2cpp_utils::ExtractType(rightArm), ::il2cpp_utils::ExtractType(supportLegIndex), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rootBone, spine, leftLeg, rightLeg, leftArm, rightArm, supportLegIndex, leftFootPosition, rightFootPosition, leftFootRotation, rightFootRotation, leftFootOffset, rightFootOffset, leftHeelOffset, rightHeelOffset);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Locomotion.get_leftFootstepPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Locomotion::get_leftFootstepPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::get_leftFootstepPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftFootstepPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Locomotion.get_rightFootstepPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Locomotion::get_rightFootstepPosition() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::get_rightFootstepPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightFootstepPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Locomotion.get_leftFootstepRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverVR::Locomotion::get_leftFootstepRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::get_leftFootstepRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_leftFootstepRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Locomotion.get_rightFootstepRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverVR::Locomotion::get_rightFootstepRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::get_rightFootstepRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_rightFootstepRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Locomotion.StepBlocked
bool RootMotion::FinalIK::IKSolverVR::Locomotion::StepBlocked(UnityEngine::Vector3 fromPosition, UnityEngine::Vector3 toPosition, UnityEngine::Vector3 rootPosition) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::StepBlocked");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StepBlocked", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(fromPosition), ::il2cpp_utils::ExtractType(toPosition), ::il2cpp_utils::ExtractType(rootPosition)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, fromPosition, toPosition, rootPosition);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Locomotion.CanStep
bool RootMotion::FinalIK::IKSolverVR::Locomotion::CanStep() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::CanStep");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CanStep", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Locomotion.GetLineSphereCollision
bool RootMotion::FinalIK::IKSolverVR::Locomotion::GetLineSphereCollision(UnityEngine::Vector3 lineStart, UnityEngine::Vector3 lineEnd, UnityEngine::Vector3 sphereCenter, float sphereRadius) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Locomotion::GetLineSphereCollision");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/Locomotion", "GetLineSphereCollision", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lineStart), ::il2cpp_utils::ExtractType(lineEnd), ::il2cpp_utils::ExtractType(sphereCenter), ::il2cpp_utils::ExtractType(sphereRadius)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, lineStart, lineEnd, sphereCenter, sphereRadius);
}
// Writing MetadataGetter for method: IKSolverVR::Locomotion::get_centerOfMass
// Il2CppName: get_centerOfMass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverVR::Locomotion::*)()>(&IKSolverVR::Locomotion::get_centerOfMass)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), "get_centerOfMass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Locomotion::set_centerOfMass
// Il2CppName: set_centerOfMass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Locomotion::*)(UnityEngine::Vector3)>(&IKSolverVR::Locomotion::set_centerOfMass)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), "set_centerOfMass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Locomotion::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Locomotion::*)(::Array<UnityEngine::Vector3>*, ::Array<UnityEngine::Quaternion>*, bool)>(&IKSolverVR::Locomotion::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Quaternion>*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Locomotion::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Locomotion::*)(::Array<UnityEngine::Vector3>*, ::Array<UnityEngine::Quaternion>*)>(&IKSolverVR::Locomotion::Reset)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Quaternion>*>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Locomotion::AddDeltaRotation
// Il2CppName: AddDeltaRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Locomotion::*)(UnityEngine::Quaternion, UnityEngine::Vector3)>(&IKSolverVR::Locomotion::AddDeltaRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), "AddDeltaRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Locomotion::AddDeltaPosition
// Il2CppName: AddDeltaPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Locomotion::*)(UnityEngine::Vector3)>(&IKSolverVR::Locomotion::AddDeltaPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), "AddDeltaPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Locomotion::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Locomotion::*)(RootMotion::FinalIK::IKSolverVR::VirtualBone*, RootMotion::FinalIK::IKSolverVR::Spine*, RootMotion::FinalIK::IKSolverVR::Leg*, RootMotion::FinalIK::IKSolverVR::Leg*, RootMotion::FinalIK::IKSolverVR::Arm*, RootMotion::FinalIK::IKSolverVR::Arm*, int, UnityEngine::Vector3&, UnityEngine::Vector3&, UnityEngine::Quaternion&, UnityEngine::Quaternion&, float&, float&, float&, float&)>(&IKSolverVR::Locomotion::Solve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::VirtualBone*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::Spine*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::Leg*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::Leg*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::Arm*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::Arm*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Locomotion::get_leftFootstepPosition
// Il2CppName: get_leftFootstepPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverVR::Locomotion::*)()>(&IKSolverVR::Locomotion::get_leftFootstepPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), "get_leftFootstepPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Locomotion::get_rightFootstepPosition
// Il2CppName: get_rightFootstepPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverVR::Locomotion::*)()>(&IKSolverVR::Locomotion::get_rightFootstepPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), "get_rightFootstepPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Locomotion::get_leftFootstepRotation
// Il2CppName: get_leftFootstepRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKSolverVR::Locomotion::*)()>(&IKSolverVR::Locomotion::get_leftFootstepRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), "get_leftFootstepRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Locomotion::get_rightFootstepRotation
// Il2CppName: get_rightFootstepRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKSolverVR::Locomotion::*)()>(&IKSolverVR::Locomotion::get_rightFootstepRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), "get_rightFootstepRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Locomotion::StepBlocked
// Il2CppName: StepBlocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverVR::Locomotion::*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3)>(&IKSolverVR::Locomotion::StepBlocked)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), "StepBlocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Locomotion::CanStep
// Il2CppName: CanStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (IKSolverVR::Locomotion::*)()>(&IKSolverVR::Locomotion::CanStep)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), "CanStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Locomotion::GetLineSphereCollision
// Il2CppName: GetLineSphereCollision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Vector3, UnityEngine::Vector3, UnityEngine::Vector3, float)>(&IKSolverVR::Locomotion::GetLineSphereCollision)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), "GetLineSphereCollision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Locomotion::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Locomotion::*)()>(&IKSolverVR::Locomotion::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Locomotion::*)()>(&IKSolverVR::Locomotion::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Locomotion*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR/Spine
#include "RootMotion/FinalIK/IKSolverVR_Spine.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/VirtualBone
#include "RootMotion/FinalIK/IKSolverVR_VirtualBone.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/Arm
#include "RootMotion/FinalIK/IKSolverVR_Arm.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/Leg
#include "RootMotion/FinalIK/IKSolverVR_Leg.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.get_pelvis
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Spine::get_pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::get_pelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_pelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.get_firstSpineBone
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Spine::get_firstSpineBone() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::get_firstSpineBone");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_firstSpineBone", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.get_chest
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Spine::get_chest() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::get_chest");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_chest", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.get_neck
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Spine::get_neck() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::get_neck");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_neck", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.get_head
RootMotion::FinalIK::IKSolverVR::VirtualBone* RootMotion::FinalIK::IKSolverVR::Spine::get_head() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::get_head");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_head", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::IKSolverVR::VirtualBone*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.get_anchorRotation
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverVR::Spine::get_anchorRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::get_anchorRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_anchorRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.set_anchorRotation
void RootMotion::FinalIK::IKSolverVR::Spine::set_anchorRotation(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::set_anchorRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_anchorRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.get_anchorRelativeToHead
UnityEngine::Quaternion RootMotion::FinalIK::IKSolverVR::Spine::get_anchorRelativeToHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::get_anchorRelativeToHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_anchorRelativeToHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.set_anchorRelativeToHead
void RootMotion::FinalIK::IKSolverVR::Spine::set_anchorRelativeToHead(UnityEngine::Quaternion value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::set_anchorRelativeToHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_anchorRelativeToHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.CalculateChestTargetRotation
void RootMotion::FinalIK::IKSolverVR::Spine::CalculateChestTargetRotation(RootMotion::FinalIK::IKSolverVR::VirtualBone* rootBone, ::Array<RootMotion::FinalIK::IKSolverVR::Arm*>* arms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::CalculateChestTargetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CalculateChestTargetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootBone), ::il2cpp_utils::ExtractType(arms)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rootBone, arms);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.Solve
void RootMotion::FinalIK::IKSolverVR::Spine::Solve(RootMotion::FinalIK::IKSolverVR::VirtualBone* rootBone, ::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, ::Array<RootMotion::FinalIK::IKSolverVR::Arm*>* arms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::Solve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Solve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rootBone), ::il2cpp_utils::ExtractType(legs), ::il2cpp_utils::ExtractType(arms)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, rootBone, legs, arms);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.FABRIKPass
void RootMotion::FinalIK::IKSolverVR::Spine::FABRIKPass(UnityEngine::Vector3 animatedPelvisPos, UnityEngine::Vector3 rootUp, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::FABRIKPass");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "FABRIKPass", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animatedPelvisPos), ::il2cpp_utils::ExtractType(rootUp), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animatedPelvisPos, rootUp, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.SolvePelvis
void RootMotion::FinalIK::IKSolverVR::Spine::SolvePelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::SolvePelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolvePelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.AdjustChestByHands
void RootMotion::FinalIK::IKSolverVR::Spine::AdjustChestByHands(UnityEngine::Quaternion& chestTargetRotation, ::Array<RootMotion::FinalIK::IKSolverVR::Arm*>* arms) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::AdjustChestByHands");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AdjustChestByHands", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(chestTargetRotation), ::il2cpp_utils::ExtractType(arms)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, chestTargetRotation, arms);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.InverseTranslateToHead
void RootMotion::FinalIK::IKSolverVR::Spine::InverseTranslateToHead(::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, bool limited, bool useCurrentLegMag, UnityEngine::Vector3 offset, float w) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::InverseTranslateToHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InverseTranslateToHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(legs), ::il2cpp_utils::ExtractType(limited), ::il2cpp_utils::ExtractType(useCurrentLegMag), ::il2cpp_utils::ExtractType(offset), ::il2cpp_utils::ExtractType(w)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, legs, limited, useCurrentLegMag, offset, w);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.TranslatePelvis
void RootMotion::FinalIK::IKSolverVR::Spine::TranslatePelvis(::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, UnityEngine::Vector3 deltaPosition, UnityEngine::Quaternion deltaRotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::TranslatePelvis");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TranslatePelvis", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(legs), ::il2cpp_utils::ExtractType(deltaPosition), ::il2cpp_utils::ExtractType(deltaRotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, legs, deltaPosition, deltaRotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.LimitPelvisPosition
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::Spine::LimitPelvisPosition(::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, UnityEngine::Vector3 pelvisPosition, bool useCurrentLegMag, int it) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::LimitPelvisPosition");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LimitPelvisPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(legs), ::il2cpp_utils::ExtractType(pelvisPosition), ::il2cpp_utils::ExtractType(useCurrentLegMag), ::il2cpp_utils::ExtractType(it)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method, legs, pelvisPosition, useCurrentLegMag, it);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.Bend
void RootMotion::FinalIK::IKSolverVR::Spine::Bend(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int firstIndex, int lastIndex, UnityEngine::Quaternion targetRotation, float clampWeight, bool uniformWeight, float w) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::Bend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(firstIndex), ::il2cpp_utils::ExtractType(lastIndex), ::il2cpp_utils::ExtractType(targetRotation), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(uniformWeight), ::il2cpp_utils::ExtractType(w)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bones, firstIndex, lastIndex, targetRotation, clampWeight, uniformWeight, w);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.Bend
void RootMotion::FinalIK::IKSolverVR::Spine::Bend(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int firstIndex, int lastIndex, UnityEngine::Quaternion targetRotation, UnityEngine::Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::Bend");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Bend", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(firstIndex), ::il2cpp_utils::ExtractType(lastIndex), ::il2cpp_utils::ExtractType(targetRotation), ::il2cpp_utils::ExtractType(rotationOffset), ::il2cpp_utils::ExtractType(clampWeight), ::il2cpp_utils::ExtractType(uniformWeight), ::il2cpp_utils::ExtractType(w)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, bones, firstIndex, lastIndex, targetRotation, rotationOffset, clampWeight, uniformWeight, w);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.OnRead
void RootMotion::FinalIK::IKSolverVR::Spine::OnRead(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::OnRead");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnRead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(positions), ::il2cpp_utils::ExtractType(rotations), ::il2cpp_utils::ExtractType(hasChest), ::il2cpp_utils::ExtractType(hasNeck), ::il2cpp_utils::ExtractType(hasShoulders), ::il2cpp_utils::ExtractType(hasToes), ::il2cpp_utils::ExtractType(hasLegs), ::il2cpp_utils::ExtractType(rootIndex), ::il2cpp_utils::ExtractType(index)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, positions, rotations, hasChest, hasNeck, hasShoulders, hasToes, hasLegs, rootIndex, index);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.PreSolve
void RootMotion::FinalIK::IKSolverVR::Spine::PreSolve() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::PreSolve");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.ApplyOffsets
void RootMotion::FinalIK::IKSolverVR::Spine::ApplyOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::ApplyOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ApplyOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.Write
void RootMotion::FinalIK::IKSolverVR::Spine::Write(::Array<UnityEngine::Vector3>*& solvedPositions, ::Array<UnityEngine::Quaternion>*& solvedRotations) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::Write");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Write", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solvedPositions), ::il2cpp_utils::ExtractType(solvedRotations)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solvedPositions, solvedRotations);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/Spine.ResetOffsets
void RootMotion::FinalIK::IKSolverVR::Spine::ResetOffsets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::ResetOffsets");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetOffsets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: IKSolverVR::Spine::get_pelvis
// Il2CppName: get_pelvis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolverVR::VirtualBone* (IKSolverVR::Spine::*)()>(&IKSolverVR::Spine::get_pelvis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "get_pelvis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::get_firstSpineBone
// Il2CppName: get_firstSpineBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolverVR::VirtualBone* (IKSolverVR::Spine::*)()>(&IKSolverVR::Spine::get_firstSpineBone)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "get_firstSpineBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::get_chest
// Il2CppName: get_chest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolverVR::VirtualBone* (IKSolverVR::Spine::*)()>(&IKSolverVR::Spine::get_chest)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "get_chest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::get_neck
// Il2CppName: get_neck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolverVR::VirtualBone* (IKSolverVR::Spine::*)()>(&IKSolverVR::Spine::get_neck)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "get_neck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::get_head
// Il2CppName: get_head
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::IKSolverVR::VirtualBone* (IKSolverVR::Spine::*)()>(&IKSolverVR::Spine::get_head)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "get_head", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::get_anchorRotation
// Il2CppName: get_anchorRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKSolverVR::Spine::*)()>(&IKSolverVR::Spine::get_anchorRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "get_anchorRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::set_anchorRotation
// Il2CppName: set_anchorRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)(UnityEngine::Quaternion)>(&IKSolverVR::Spine::set_anchorRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "set_anchorRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::get_anchorRelativeToHead
// Il2CppName: get_anchorRelativeToHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (IKSolverVR::Spine::*)()>(&IKSolverVR::Spine::get_anchorRelativeToHead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "get_anchorRelativeToHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::set_anchorRelativeToHead
// Il2CppName: set_anchorRelativeToHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)(UnityEngine::Quaternion)>(&IKSolverVR::Spine::set_anchorRelativeToHead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "set_anchorRelativeToHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::CalculateChestTargetRotation
// Il2CppName: CalculateChestTargetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)(RootMotion::FinalIK::IKSolverVR::VirtualBone*, ::Array<RootMotion::FinalIK::IKSolverVR::Arm*>*)>(&IKSolverVR::Spine::CalculateChestTargetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "CalculateChestTargetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::VirtualBone*>(), ::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::Arm*>*>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::Solve
// Il2CppName: Solve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)(RootMotion::FinalIK::IKSolverVR::VirtualBone*, ::Array<RootMotion::FinalIK::IKSolverVR::Leg*>*, ::Array<RootMotion::FinalIK::IKSolverVR::Arm*>*)>(&IKSolverVR::Spine::Solve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "Solve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverVR::VirtualBone*>(), ::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::Leg*>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::Arm*>*>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::FABRIKPass
// Il2CppName: FABRIKPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&IKSolverVR::Spine::FABRIKPass)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "FABRIKPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::SolvePelvis
// Il2CppName: SolvePelvis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)()>(&IKSolverVR::Spine::SolvePelvis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "SolvePelvis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::AdjustChestByHands
// Il2CppName: AdjustChestByHands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)(UnityEngine::Quaternion&, ::Array<RootMotion::FinalIK::IKSolverVR::Arm*>*)>(&IKSolverVR::Spine::AdjustChestByHands)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "AdjustChestByHands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion&>(), ::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::Arm*>*>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::InverseTranslateToHead
// Il2CppName: InverseTranslateToHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)(::Array<RootMotion::FinalIK::IKSolverVR::Leg*>*, bool, bool, UnityEngine::Vector3, float)>(&IKSolverVR::Spine::InverseTranslateToHead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "InverseTranslateToHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::Leg*>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::TranslatePelvis
// Il2CppName: TranslatePelvis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)(::Array<RootMotion::FinalIK::IKSolverVR::Leg*>*, UnityEngine::Vector3, UnityEngine::Quaternion)>(&IKSolverVR::Spine::TranslatePelvis)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "TranslatePelvis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::Leg*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::LimitPelvisPosition
// Il2CppName: LimitPelvisPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (IKSolverVR::Spine::*)(::Array<RootMotion::FinalIK::IKSolverVR::Leg*>*, UnityEngine::Vector3, bool, int)>(&IKSolverVR::Spine::LimitPelvisPosition)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "LimitPelvisPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::Leg*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::Bend
// Il2CppName: Bend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*, int, int, UnityEngine::Quaternion, float, bool, float)>(&IKSolverVR::Spine::Bend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "Bend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::Bend
// Il2CppName: Bend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*, int, int, UnityEngine::Quaternion, UnityEngine::Quaternion, float, bool, float)>(&IKSolverVR::Spine::Bend)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "Bend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::OnRead
// Il2CppName: OnRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)(::Array<UnityEngine::Vector3>*, ::Array<UnityEngine::Quaternion>*, bool, bool, bool, bool, bool, int, int)>(&IKSolverVR::Spine::OnRead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "OnRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Quaternion>*>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::PreSolve
// Il2CppName: PreSolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)()>(&IKSolverVR::Spine::PreSolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "PreSolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::ApplyOffsets
// Il2CppName: ApplyOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)()>(&IKSolverVR::Spine::ApplyOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "ApplyOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)(::Array<UnityEngine::Vector3>*&, ::Array<UnityEngine::Quaternion>*&)>(&IKSolverVR::Spine::Write)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Vector3>*&>(), ::il2cpp_utils::ExtractIndependentType<::Array<UnityEngine::Quaternion>*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::ResetOffsets
// Il2CppName: ResetOffsets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)()>(&IKSolverVR::Spine::ResetOffsets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), "ResetOffsets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: IKSolverVR::Spine::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)()>(&IKSolverVR::Spine::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::Spine::*)()>(&IKSolverVR::Spine::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::Spine*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverVR/PositionOffset
#include "RootMotion/FinalIK/IKSolverVR_PositionOffset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset Pelvis
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_Pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_Pelvis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "Pelvis"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset Pelvis
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_Pelvis(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_Pelvis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "Pelvis", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset Chest
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_Chest() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_Chest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "Chest"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset Chest
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_Chest(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_Chest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "Chest", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset Head
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_Head() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_Head");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "Head"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset Head
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_Head(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_Head");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "Head", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset LeftHand
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_LeftHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_LeftHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "LeftHand"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset LeftHand
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_LeftHand(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_LeftHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "LeftHand", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset RightHand
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_RightHand() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_RightHand");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "RightHand"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset RightHand
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_RightHand(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_RightHand");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "RightHand", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset LeftFoot
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_LeftFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_LeftFoot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "LeftFoot"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset LeftFoot
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_LeftFoot(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_LeftFoot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "LeftFoot", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset RightFoot
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_RightFoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_RightFoot");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "RightFoot"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset RightFoot
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_RightFoot(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_RightFoot");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "RightFoot", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset LeftHeel
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_LeftHeel() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_LeftHeel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "LeftHeel"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset LeftHeel
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_LeftHeel(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_LeftHeel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "LeftHeel", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset RightHeel
RootMotion::FinalIK::IKSolverVR::PositionOffset RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_RightHeel() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_get_RightHeel");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::PositionOffset>("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "RightHeel"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/PositionOffset RightHeel
void RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_RightHeel(RootMotion::FinalIK::IKSolverVR::PositionOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::PositionOffset::_set_RightHeel");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/PositionOffset", "RightHeel", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.IKSolverVR/RotationOffset
#include "RootMotion/FinalIK/IKSolverVR_RotationOffset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RotationOffset Pelvis
RootMotion::FinalIK::IKSolverVR::RotationOffset RootMotion::FinalIK::IKSolverVR::RotationOffset::_get_Pelvis() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::RotationOffset::_get_Pelvis");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::RotationOffset>("RootMotion.FinalIK", "IKSolverVR/RotationOffset", "Pelvis"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RotationOffset Pelvis
void RootMotion::FinalIK::IKSolverVR::RotationOffset::_set_Pelvis(RootMotion::FinalIK::IKSolverVR::RotationOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::RotationOffset::_set_Pelvis");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/RotationOffset", "Pelvis", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RotationOffset Chest
RootMotion::FinalIK::IKSolverVR::RotationOffset RootMotion::FinalIK::IKSolverVR::RotationOffset::_get_Chest() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::RotationOffset::_get_Chest");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::RotationOffset>("RootMotion.FinalIK", "IKSolverVR/RotationOffset", "Chest"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RotationOffset Chest
void RootMotion::FinalIK::IKSolverVR::RotationOffset::_set_Chest(RootMotion::FinalIK::IKSolverVR::RotationOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::RotationOffset::_set_Chest");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/RotationOffset", "Chest", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.IKSolverVR/RotationOffset Head
RootMotion::FinalIK::IKSolverVR::RotationOffset RootMotion::FinalIK::IKSolverVR::RotationOffset::_get_Head() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::RotationOffset::_get_Head");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::IKSolverVR::RotationOffset>("RootMotion.FinalIK", "IKSolverVR/RotationOffset", "Head"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.IKSolverVR/RotationOffset Head
void RootMotion::FinalIK::IKSolverVR::RotationOffset::_set_Head(RootMotion::FinalIK::IKSolverVR::RotationOffset value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::RotationOffset::_set_Head");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "IKSolverVR/RotationOffset", "Head", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR/VirtualBone
#include "RootMotion/FinalIK/IKSolverVR_VirtualBone.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.Read
void RootMotion::FinalIK::IKSolverVR::VirtualBone::Read(UnityEngine::Vector3 position, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::Read");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.SwingRotation
void RootMotion::FinalIK::IKSolverVR::VirtualBone::SwingRotation(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int index, UnityEngine::Vector3 swingTarget, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::SwingRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "SwingRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(swingTarget), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, index, swingTarget, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.PreSolve
float RootMotion::FinalIK::IKSolverVR::VirtualBone::PreSolve(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*& bones) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::PreSolve");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "PreSolve", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.RotateAroundPoint
void RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateAroundPoint(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int index, UnityEngine::Vector3 point, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateAroundPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "RotateAroundPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(point), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, index, point, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.RotateBy
void RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateBy(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int index, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateBy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "RotateBy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, index, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.RotateBy
void RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateBy(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateBy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "RotateBy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.RotateTo
void RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateTo(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int index, UnityEngine::Quaternion rotation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::RotateTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "RotateTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(rotation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, index, rotation);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.SolveTrigonometric
void RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveTrigonometric(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int first, int second, int third, UnityEngine::Vector3 targetPosition, UnityEngine::Vector3 bendNormal, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveTrigonometric");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "SolveTrigonometric", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(first), ::il2cpp_utils::ExtractType(second), ::il2cpp_utils::ExtractType(third), ::il2cpp_utils::ExtractType(targetPosition), ::il2cpp_utils::ExtractType(bendNormal), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, first, second, third, targetPosition, bendNormal, weight);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.GetDirectionToBendPoint
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::VirtualBone::GetDirectionToBendPoint(UnityEngine::Vector3 direction, float directionMag, UnityEngine::Vector3 bendDirection, float sqrMag1, float sqrMag2) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::GetDirectionToBendPoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "GetDirectionToBendPoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(direction), ::il2cpp_utils::ExtractType(directionMag), ::il2cpp_utils::ExtractType(bendDirection), ::il2cpp_utils::ExtractType(sqrMag1), ::il2cpp_utils::ExtractType(sqrMag2)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, direction, directionMag, bendDirection, sqrMag1, sqrMag2);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.SolveFABRIK
void RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveFABRIK(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, UnityEngine::Vector3 startPosition, UnityEngine::Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length, UnityEngine::Vector3 startOffset) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveFABRIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "SolveFABRIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(startPosition), ::il2cpp_utils::ExtractType(targetPosition), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(minNormalizedTargetDistance), ::il2cpp_utils::ExtractType(iterations), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(startOffset)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, startPosition, targetPosition, weight, minNormalizedTargetDistance, iterations, length, startOffset);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.SolveFABRIKJoint
UnityEngine::Vector3 RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveFABRIKJoint(UnityEngine::Vector3 pos1, UnityEngine::Vector3 pos2, float length) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveFABRIKJoint");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "SolveFABRIKJoint", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pos1), ::il2cpp_utils::ExtractType(pos2), ::il2cpp_utils::ExtractType(length)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, pos1, pos2, length);
}
// Autogenerated method: RootMotion.FinalIK.IKSolverVR/VirtualBone.SolveCCD
void RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveCCD(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, UnityEngine::Vector3 targetPosition, float weight, int iterations) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::VirtualBone::SolveCCD");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("RootMotion.FinalIK", "IKSolverVR/VirtualBone", "SolveCCD", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bones), ::il2cpp_utils::ExtractType(targetPosition), ::il2cpp_utils::ExtractType(weight), ::il2cpp_utils::ExtractType(iterations)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, bones, targetPosition, weight, iterations);
}
// Writing MetadataGetter for method: IKSolverVR::VirtualBone::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::VirtualBone::*)(UnityEngine::Vector3, UnityEngine::Quaternion)>(&IKSolverVR::VirtualBone::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::VirtualBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::VirtualBone::*)(UnityEngine::Vector3, UnityEngine::Quaternion)>(&IKSolverVR::VirtualBone::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::VirtualBone*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::VirtualBone::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (IKSolverVR::VirtualBone::*)(UnityEngine::Vector3, UnityEngine::Quaternion)>(&IKSolverVR::VirtualBone::Read)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::VirtualBone*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::VirtualBone::SwingRotation
// Il2CppName: SwingRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*, int, UnityEngine::Vector3, float)>(&IKSolverVR::VirtualBone::SwingRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::VirtualBone*), "SwingRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::VirtualBone::PreSolve
// Il2CppName: PreSolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*&)>(&IKSolverVR::VirtualBone::PreSolve)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::VirtualBone*), "PreSolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*&>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::VirtualBone::RotateAroundPoint
// Il2CppName: RotateAroundPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*, int, UnityEngine::Vector3, UnityEngine::Quaternion)>(&IKSolverVR::VirtualBone::RotateAroundPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::VirtualBone*), "RotateAroundPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::VirtualBone::RotateBy
// Il2CppName: RotateBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*, int, UnityEngine::Quaternion)>(&IKSolverVR::VirtualBone::RotateBy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::VirtualBone*), "RotateBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::VirtualBone::RotateBy
// Il2CppName: RotateBy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*, UnityEngine::Quaternion)>(&IKSolverVR::VirtualBone::RotateBy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::VirtualBone*), "RotateBy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::VirtualBone::RotateTo
// Il2CppName: RotateTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*, int, UnityEngine::Quaternion)>(&IKSolverVR::VirtualBone::RotateTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::VirtualBone*), "RotateTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Quaternion>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::VirtualBone::SolveTrigonometric
// Il2CppName: SolveTrigonometric
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*, int, int, int, UnityEngine::Vector3, UnityEngine::Vector3, float)>(&IKSolverVR::VirtualBone::SolveTrigonometric)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::VirtualBone*), "SolveTrigonometric", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::VirtualBone::GetDirectionToBendPoint
// Il2CppName: GetDirectionToBendPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, float, UnityEngine::Vector3, float, float)>(&IKSolverVR::VirtualBone::GetDirectionToBendPoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::VirtualBone*), "GetDirectionToBendPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::VirtualBone::SolveFABRIK
// Il2CppName: SolveFABRIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*, UnityEngine::Vector3, UnityEngine::Vector3, float, float, int, float, UnityEngine::Vector3)>(&IKSolverVR::VirtualBone::SolveFABRIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::VirtualBone*), "SolveFABRIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::VirtualBone::SolveFABRIKJoint
// Il2CppName: SolveFABRIKJoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (*)(UnityEngine::Vector3, UnityEngine::Vector3, float)>(&IKSolverVR::VirtualBone::SolveFABRIKJoint)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::VirtualBone*), "SolveFABRIKJoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: IKSolverVR::VirtualBone::SolveCCD
// Il2CppName: SolveCCD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*, UnityEngine::Vector3, float, int)>(&IKSolverVR::VirtualBone::SolveCCD)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(IKSolverVR::VirtualBone*), "SolveCCD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.TwistRelaxer
#include "RootMotion/FinalIK/TwistRelaxer.hpp"
// Including type: RootMotion.FinalIK.IK
#include "RootMotion/FinalIK/IK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.TwistRelaxer.Relax
void RootMotion::FinalIK::TwistRelaxer::Relax() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TwistRelaxer::Relax");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Relax", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TwistRelaxer.Start
void RootMotion::FinalIK::TwistRelaxer::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TwistRelaxer::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TwistRelaxer.OnPostUpdate
void RootMotion::FinalIK::TwistRelaxer::OnPostUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TwistRelaxer::OnPostUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TwistRelaxer.LateUpdate
void RootMotion::FinalIK::TwistRelaxer::LateUpdate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TwistRelaxer::LateUpdate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LateUpdate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.TwistRelaxer.OnDestroy
void RootMotion::FinalIK::TwistRelaxer::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::TwistRelaxer::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: TwistRelaxer::Relax
// Il2CppName: Relax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TwistRelaxer::*)()>(&TwistRelaxer::Relax)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TwistRelaxer*), "Relax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TwistRelaxer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TwistRelaxer::*)()>(&TwistRelaxer::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TwistRelaxer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TwistRelaxer::OnPostUpdate
// Il2CppName: OnPostUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TwistRelaxer::*)()>(&TwistRelaxer::OnPostUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TwistRelaxer*), "OnPostUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TwistRelaxer::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TwistRelaxer::*)()>(&TwistRelaxer::LateUpdate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TwistRelaxer*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TwistRelaxer::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TwistRelaxer::*)()>(&TwistRelaxer::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TwistRelaxer*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TwistRelaxer::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TwistRelaxer::*)()>(&TwistRelaxer::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TwistRelaxer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TwistRelaxer::*)()>(&TwistRelaxer::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TwistRelaxer*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionEffector
#include "RootMotion/FinalIK/InteractionEffector.hpp"
// Including type: RootMotion.FinalIK.InteractionObject
#include "RootMotion/FinalIK/InteractionObject.hpp"
// Including type: RootMotion.FinalIK.Poser
#include "RootMotion/FinalIK/Poser.hpp"
// Including type: RootMotion.FinalIK.IKEffector
#include "RootMotion/FinalIK/IKEffector.hpp"
// Including type: RootMotion.FinalIK.InteractionTarget
#include "RootMotion/FinalIK/InteractionTarget.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: RootMotion.FinalIK.InteractionSystem
#include "RootMotion/FinalIK/InteractionSystem.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.get_effectorType
RootMotion::FinalIK::FullBodyBipedEffector RootMotion::FinalIK::InteractionEffector::get_effectorType() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::get_effectorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_effectorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FullBodyBipedEffector, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.set_effectorType
void RootMotion::FinalIK::InteractionEffector::set_effectorType(RootMotion::FinalIK::FullBodyBipedEffector value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::set_effectorType");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_effectorType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.get_isPaused
bool RootMotion::FinalIK::InteractionEffector::get_isPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::get_isPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_isPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.set_isPaused
void RootMotion::FinalIK::InteractionEffector::set_isPaused(bool value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::set_isPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.get_interactionObject
RootMotion::FinalIK::InteractionObject* RootMotion::FinalIK::InteractionEffector::get_interactionObject() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::get_interactionObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_interactionObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionObject*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.set_interactionObject
void RootMotion::FinalIK::InteractionEffector::set_interactionObject(RootMotion::FinalIK::InteractionObject* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::set_interactionObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_interactionObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.get_inInteraction
bool RootMotion::FinalIK::InteractionEffector::get_inInteraction() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::get_inInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.Initiate
void RootMotion::FinalIK::InteractionEffector::Initiate(RootMotion::FinalIK::InteractionSystem* interactionSystem) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interactionSystem)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, interactionSystem);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.StoreDefaults
void RootMotion::FinalIK::InteractionEffector::StoreDefaults() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::StoreDefaults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StoreDefaults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.ResetToDefaults
bool RootMotion::FinalIK::InteractionEffector::ResetToDefaults(float speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::ResetToDefaults");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetToDefaults", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(speed)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, speed);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.Pause
bool RootMotion::FinalIK::InteractionEffector::Pause() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::Pause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Pause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.Resume
bool RootMotion::FinalIK::InteractionEffector::Resume() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::Resume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Resume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.Start
bool RootMotion::FinalIK::InteractionEffector::Start(RootMotion::FinalIK::InteractionObject* interactionObject, ::Il2CppString* tag, float fadeInTime, bool interrupt) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interactionObject), ::il2cpp_utils::ExtractType(tag), ::il2cpp_utils::ExtractType(fadeInTime), ::il2cpp_utils::ExtractType(interrupt)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, interactionObject, tag, fadeInTime, interrupt);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.Update
void RootMotion::FinalIK::InteractionEffector::Update(UnityEngine::Transform* root, float speed) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root), ::il2cpp_utils::ExtractType(speed)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, root, speed);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.get_progress
float RootMotion::FinalIK::InteractionEffector::get_progress() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::get_progress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_progress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.TriggerUntriggeredEvents
void RootMotion::FinalIK::InteractionEffector::TriggerUntriggeredEvents(bool checkTime, bool& pickUp, bool& pause) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::TriggerUntriggeredEvents");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerUntriggeredEvents", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(checkTime), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, checkTime, pickUp, pause);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.PickUp
void RootMotion::FinalIK::InteractionEffector::PickUp(UnityEngine::Transform* root) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::PickUp");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PickUp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(root)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, root);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.Stop
bool RootMotion::FinalIK::InteractionEffector::Stop() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::Stop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Stop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionEffector.OnPostFBBIK
void RootMotion::FinalIK::InteractionEffector::OnPostFBBIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionEffector::OnPostFBBIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostFBBIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: InteractionEffector::get_effectorType
// Il2CppName: get_effectorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::FullBodyBipedEffector (InteractionEffector::*)()>(&InteractionEffector::get_effectorType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "get_effectorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionEffector::set_effectorType
// Il2CppName: set_effectorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionEffector::*)(RootMotion::FinalIK::FullBodyBipedEffector)>(&InteractionEffector::set_effectorType)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "set_effectorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>()});
  }
};
// Writing MetadataGetter for method: InteractionEffector::get_isPaused
// Il2CppName: get_isPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionEffector::*)()>(&InteractionEffector::get_isPaused)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "get_isPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionEffector::set_isPaused
// Il2CppName: set_isPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionEffector::*)(bool)>(&InteractionEffector::set_isPaused)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "set_isPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: InteractionEffector::get_interactionObject
// Il2CppName: get_interactionObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::InteractionObject* (InteractionEffector::*)()>(&InteractionEffector::get_interactionObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "get_interactionObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionEffector::set_interactionObject
// Il2CppName: set_interactionObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionEffector::*)(RootMotion::FinalIK::InteractionObject*)>(&InteractionEffector::set_interactionObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "set_interactionObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject*>()});
  }
};
// Writing MetadataGetter for method: InteractionEffector::get_inInteraction
// Il2CppName: get_inInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionEffector::*)()>(&InteractionEffector::get_inInteraction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "get_inInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionEffector::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionEffector::*)(RootMotion::FinalIK::FullBodyBipedEffector)>(&InteractionEffector::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionEffector::*)(RootMotion::FinalIK::FullBodyBipedEffector)>(&InteractionEffector::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>()});
  }
};
// Writing MetadataGetter for method: InteractionEffector::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionEffector::*)(RootMotion::FinalIK::InteractionSystem*)>(&InteractionEffector::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionSystem*>()});
  }
};
// Writing MetadataGetter for method: InteractionEffector::StoreDefaults
// Il2CppName: StoreDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionEffector::*)()>(&InteractionEffector::StoreDefaults)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "StoreDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionEffector::ResetToDefaults
// Il2CppName: ResetToDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionEffector::*)(float)>(&InteractionEffector::ResetToDefaults)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "ResetToDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: InteractionEffector::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionEffector::*)()>(&InteractionEffector::Pause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionEffector::Resume
// Il2CppName: Resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionEffector::*)()>(&InteractionEffector::Resume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "Resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionEffector::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionEffector::*)(RootMotion::FinalIK::InteractionObject*, ::Il2CppString*, float, bool)>(&InteractionEffector::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: InteractionEffector::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionEffector::*)(UnityEngine::Transform*, float)>(&InteractionEffector::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: InteractionEffector::get_progress
// Il2CppName: get_progress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (InteractionEffector::*)()>(&InteractionEffector::get_progress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "get_progress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionEffector::TriggerUntriggeredEvents
// Il2CppName: TriggerUntriggeredEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionEffector::*)(bool, bool&, bool&)>(&InteractionEffector::TriggerUntriggeredEvents)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "TriggerUntriggeredEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<bool&>(), ::il2cpp_utils::ExtractIndependentType<bool&>()});
  }
};
// Writing MetadataGetter for method: InteractionEffector::PickUp
// Il2CppName: PickUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionEffector::*)(UnityEngine::Transform*)>(&InteractionEffector::PickUp)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "PickUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: InteractionEffector::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionEffector::*)()>(&InteractionEffector::Stop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionEffector::OnPostFBBIK
// Il2CppName: OnPostFBBIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionEffector::*)()>(&InteractionEffector::OnPostFBBIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionEffector*), "OnPostFBBIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.InteractionLookAt
#include "RootMotion/FinalIK/InteractionLookAt.hpp"
// Including type: RootMotion.FinalIK.LookAtIK
#include "RootMotion/FinalIK/LookAtIK.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionLookAt.Look
void RootMotion::FinalIK::InteractionLookAt::Look(UnityEngine::Transform* target, float time) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionLookAt::Look");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Look", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(time)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, target, time);
}
// Autogenerated method: RootMotion.FinalIK.InteractionLookAt.OnFixTransforms
void RootMotion::FinalIK::InteractionLookAt::OnFixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionLookAt::OnFixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionLookAt.Update
void RootMotion::FinalIK::InteractionLookAt::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionLookAt::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionLookAt.SolveSpine
void RootMotion::FinalIK::InteractionLookAt::SolveSpine() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionLookAt::SolveSpine");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveSpine", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionLookAt.SolveHead
void RootMotion::FinalIK::InteractionLookAt::SolveHead() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionLookAt::SolveHead");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SolveHead", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Writing MetadataGetter for method: InteractionLookAt::Look
// Il2CppName: Look
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionLookAt::*)(UnityEngine::Transform*, float)>(&InteractionLookAt::Look)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionLookAt*), "Look", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: InteractionLookAt::OnFixTransforms
// Il2CppName: OnFixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionLookAt::*)()>(&InteractionLookAt::OnFixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionLookAt*), "OnFixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionLookAt::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionLookAt::*)()>(&InteractionLookAt::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionLookAt*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionLookAt::SolveSpine
// Il2CppName: SolveSpine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionLookAt::*)()>(&InteractionLookAt::SolveSpine)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionLookAt*), "SolveSpine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionLookAt::SolveHead
// Il2CppName: SolveHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionLookAt::*)()>(&InteractionLookAt::SolveHead)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionLookAt*), "SolveHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionLookAt::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionLookAt::*)()>(&InteractionLookAt::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionLookAt*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionLookAt::*)()>(&InteractionLookAt::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionLookAt*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionObject
#include "RootMotion/FinalIK/InteractionObject.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/InteractionEvent
#include "RootMotion/FinalIK/InteractionObject_InteractionEvent.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/Message
#include "RootMotion/FinalIK/InteractionObject_Message.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/AnimatorEvent
#include "RootMotion/FinalIK/InteractionObject_AnimatorEvent.hpp"
// Including type: RootMotion.FinalIK.IKSolverFullBodyBiped
#include "RootMotion/FinalIK/IKSolverFullBodyBiped.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/Multiplier
#include "RootMotion/FinalIK/InteractionObject_Multiplier.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.InteractionSystem
#include "RootMotion/FinalIK/InteractionSystem.hpp"
// Including type: RootMotion.FinalIK.InteractionTarget
#include "RootMotion/FinalIK/InteractionTarget.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedEffector
#include "RootMotion/FinalIK/FullBodyBipedEffector.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionObject.OpenUserManual
void RootMotion::FinalIK::InteractionObject::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.OpenScriptReference
void RootMotion::FinalIK::InteractionObject::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.OpenTutorial1
void RootMotion::FinalIK::InteractionObject::OpenTutorial1() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::OpenTutorial1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.OpenTutorial2
void RootMotion::FinalIK::InteractionObject::OpenTutorial2() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::OpenTutorial2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.OpenTutorial3
void RootMotion::FinalIK::InteractionObject::OpenTutorial3() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::OpenTutorial3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.OpenTutorial4
void RootMotion::FinalIK::InteractionObject::OpenTutorial4() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::OpenTutorial4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.SupportGroup
void RootMotion::FinalIK::InteractionObject::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.ASThread
void RootMotion::FinalIK::InteractionObject::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.get_length
float RootMotion::FinalIK::InteractionObject::get_length() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::get_length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.set_length
void RootMotion::FinalIK::InteractionObject::set_length(float value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::set_length");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_length", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.get_lastUsedInteractionSystem
RootMotion::FinalIK::InteractionSystem* RootMotion::FinalIK::InteractionObject::get_lastUsedInteractionSystem() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::get_lastUsedInteractionSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lastUsedInteractionSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionSystem*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.set_lastUsedInteractionSystem
void RootMotion::FinalIK::InteractionObject::set_lastUsedInteractionSystem(RootMotion::FinalIK::InteractionSystem* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::set_lastUsedInteractionSystem");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_lastUsedInteractionSystem", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.Initiate
void RootMotion::FinalIK::InteractionObject::Initiate() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Initiate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Initiate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.get_lookAtTarget
UnityEngine::Transform* RootMotion::FinalIK::InteractionObject::get_lookAtTarget() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::get_lookAtTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_lookAtTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.GetTarget
RootMotion::FinalIK::InteractionTarget* RootMotion::FinalIK::InteractionObject::GetTarget(RootMotion::FinalIK::FullBodyBipedEffector effectorType, RootMotion::FinalIK::InteractionSystem* interactionSystem) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::GetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType), ::il2cpp_utils::ExtractType(interactionSystem)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionTarget*, false>(this, ___internal__method, effectorType, interactionSystem);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.CurveUsed
bool RootMotion::FinalIK::InteractionObject::CurveUsed(RootMotion::FinalIK::InteractionObject::WeightCurve::Type type) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::CurveUsed");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CurveUsed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, type);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.GetTargets
::Array<RootMotion::FinalIK::InteractionTarget*>* RootMotion::FinalIK::InteractionObject::GetTargets() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::GetTargets");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTargets", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::InteractionTarget*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.GetTarget
UnityEngine::Transform* RootMotion::FinalIK::InteractionObject::GetTarget(RootMotion::FinalIK::FullBodyBipedEffector effectorType, ::Il2CppString* tag) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::GetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType), ::il2cpp_utils::ExtractType(tag)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method, effectorType, tag);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.OnStartInteraction
void RootMotion::FinalIK::InteractionObject::OnStartInteraction(RootMotion::FinalIK::InteractionSystem* interactionSystem) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::OnStartInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnStartInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(interactionSystem)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, interactionSystem);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.Apply
void RootMotion::FinalIK::InteractionObject::Apply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, RootMotion::FinalIK::FullBodyBipedEffector effector, RootMotion::FinalIK::InteractionTarget* target, float timer, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(timer), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, effector, target, timer, weight);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.GetValue
float RootMotion::FinalIK::InteractionObject::GetValue(RootMotion::FinalIK::InteractionObject::WeightCurve::Type weightCurveType, RootMotion::FinalIK::InteractionTarget* target, float timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::GetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weightCurveType), ::il2cpp_utils::ExtractType(target), ::il2cpp_utils::ExtractType(timer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, weightCurveType, target, timer);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.get_targetsRoot
UnityEngine::Transform* RootMotion::FinalIK::InteractionObject::get_targetsRoot() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::get_targetsRoot");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_targetsRoot", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.Start
void RootMotion::FinalIK::InteractionObject::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.Apply
void RootMotion::FinalIK::InteractionObject::Apply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, RootMotion::FinalIK::FullBodyBipedEffector effector, RootMotion::FinalIK::InteractionObject::WeightCurve::Type type, float value, float weight) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Apply");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Apply", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(solver), ::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(weight)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, solver, effector, type, value, weight);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.GetTarget
UnityEngine::Transform* RootMotion::FinalIK::InteractionObject::GetTarget(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::GetTarget");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTarget", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Transform*, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.GetWeightCurveIndex
int RootMotion::FinalIK::InteractionObject::GetWeightCurveIndex(RootMotion::FinalIK::InteractionObject::WeightCurve::Type weightCurveType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::GetWeightCurveIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetWeightCurveIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weightCurveType)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, weightCurveType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject.GetMultiplierIndex
int RootMotion::FinalIK::InteractionObject::GetMultiplierIndex(RootMotion::FinalIK::InteractionObject::WeightCurve::Type weightCurveType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::GetMultiplierIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMultiplierIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weightCurveType)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, weightCurveType);
}
// Writing MetadataGetter for method: InteractionObject::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)()>(&InteractionObject::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionObject::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)()>(&InteractionObject::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionObject::OpenTutorial1
// Il2CppName: OpenTutorial1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)()>(&InteractionObject::OpenTutorial1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "OpenTutorial1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionObject::OpenTutorial2
// Il2CppName: OpenTutorial2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)()>(&InteractionObject::OpenTutorial2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "OpenTutorial2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionObject::OpenTutorial3
// Il2CppName: OpenTutorial3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)()>(&InteractionObject::OpenTutorial3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "OpenTutorial3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionObject::OpenTutorial4
// Il2CppName: OpenTutorial4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)()>(&InteractionObject::OpenTutorial4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "OpenTutorial4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionObject::SupportGroup
// Il2CppName: SupportGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)()>(&InteractionObject::SupportGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "SupportGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionObject::ASThread
// Il2CppName: ASThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)()>(&InteractionObject::ASThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "ASThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionObject::get_length
// Il2CppName: get_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (InteractionObject::*)()>(&InteractionObject::get_length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "get_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionObject::set_length
// Il2CppName: set_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)(float)>(&InteractionObject::set_length)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "set_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::get_lastUsedInteractionSystem
// Il2CppName: get_lastUsedInteractionSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::InteractionSystem* (InteractionObject::*)()>(&InteractionObject::get_lastUsedInteractionSystem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "get_lastUsedInteractionSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionObject::set_lastUsedInteractionSystem
// Il2CppName: set_lastUsedInteractionSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)(RootMotion::FinalIK::InteractionSystem*)>(&InteractionObject::set_lastUsedInteractionSystem)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "set_lastUsedInteractionSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionSystem*>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)()>(&InteractionObject::Initiate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionObject::get_lookAtTarget
// Il2CppName: get_lookAtTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (InteractionObject::*)()>(&InteractionObject::get_lookAtTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "get_lookAtTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionObject::GetTarget
// Il2CppName: GetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::InteractionTarget* (InteractionObject::*)(RootMotion::FinalIK::FullBodyBipedEffector, RootMotion::FinalIK::InteractionSystem*)>(&InteractionObject::GetTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "GetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionSystem*>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::CurveUsed
// Il2CppName: CurveUsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionObject::*)(RootMotion::FinalIK::InteractionObject::WeightCurve::Type)>(&InteractionObject::CurveUsed)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "CurveUsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::GetTargets
// Il2CppName: GetTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<RootMotion::FinalIK::InteractionTarget*>* (InteractionObject::*)()>(&InteractionObject::GetTargets)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "GetTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionObject::GetTarget
// Il2CppName: GetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (InteractionObject::*)(RootMotion::FinalIK::FullBodyBipedEffector, ::Il2CppString*)>(&InteractionObject::GetTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "GetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppString*>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::OnStartInteraction
// Il2CppName: OnStartInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)(RootMotion::FinalIK::InteractionSystem*)>(&InteractionObject::OnStartInteraction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "OnStartInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionSystem*>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)(RootMotion::FinalIK::IKSolverFullBodyBiped*, RootMotion::FinalIK::FullBodyBipedEffector, RootMotion::FinalIK::InteractionTarget*, float, float)>(&InteractionObject::Apply)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBodyBiped*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionTarget*>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (InteractionObject::*)(RootMotion::FinalIK::InteractionObject::WeightCurve::Type, RootMotion::FinalIK::InteractionTarget*, float)>(&InteractionObject::GetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionTarget*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::get_targetsRoot
// Il2CppName: get_targetsRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (InteractionObject::*)()>(&InteractionObject::get_targetsRoot)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "get_targetsRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionObject::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)()>(&InteractionObject::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionObject::Apply
// Il2CppName: Apply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)(RootMotion::FinalIK::IKSolverFullBodyBiped*, RootMotion::FinalIK::FullBodyBipedEffector, RootMotion::FinalIK::InteractionObject::WeightCurve::Type, float, float)>(&InteractionObject::Apply)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "Apply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::IKSolverFullBodyBiped*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>(), ::il2cpp_utils::ExtractIndependentType<float>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::GetTarget
// Il2CppName: GetTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (InteractionObject::*)(RootMotion::FinalIK::FullBodyBipedEffector)>(&InteractionObject::GetTarget)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "GetTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::GetWeightCurveIndex
// Il2CppName: GetWeightCurveIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (InteractionObject::*)(RootMotion::FinalIK::InteractionObject::WeightCurve::Type)>(&InteractionObject::GetWeightCurveIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "GetWeightCurveIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::GetMultiplierIndex
// Il2CppName: GetMultiplierIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (InteractionObject::*)(RootMotion::FinalIK::InteractionObject::WeightCurve::Type)>(&InteractionObject::GetMultiplierIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), "GetMultiplierIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)()>(&InteractionObject::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::*)()>(&InteractionObject::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionObject/InteractionEvent
#include "RootMotion/FinalIK/InteractionObject_InteractionEvent.hpp"
// Including type: UnityEngine.Events.UnityEvent
#include "UnityEngine/Events/UnityEvent.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/AnimatorEvent
#include "RootMotion/FinalIK/InteractionObject_AnimatorEvent.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/Message
#include "RootMotion/FinalIK/InteractionObject_Message.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionObject/InteractionEvent.Activate
void RootMotion::FinalIK::InteractionObject::InteractionEvent::Activate(UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::InteractionEvent::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: InteractionObject::InteractionEvent::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::InteractionEvent::*)(UnityEngine::Transform*)>(&InteractionObject::InteractionEvent::Activate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::InteractionEvent*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::InteractionEvent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::InteractionEvent::*)()>(&InteractionObject::InteractionEvent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::InteractionEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::InteractionEvent::*)()>(&InteractionObject::InteractionEvent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::InteractionEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionObject/Message
#include "RootMotion/FinalIK/InteractionObject_Message.hpp"
// Including type: UnityEngine.GameObject
#include "UnityEngine/GameObject.hpp"
// Including type: System.String
#include "System/String.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String empty
::Il2CppString* RootMotion::FinalIK::InteractionObject::Message::_get_empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Message::_get_empty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("RootMotion.FinalIK", "InteractionObject/Message", "empty"));
}
// Autogenerated static field setter
// Set static field: static private System.String empty
void RootMotion::FinalIK::InteractionObject::Message::_set_empty(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Message::_set_empty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/Message", "empty", value));
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject/Message.Send
void RootMotion::FinalIK::InteractionObject::Message::Send(UnityEngine::Transform* t) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Message::Send");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(t)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, t);
}
// Writing MetadataGetter for method: InteractionObject::Message::Send
// Il2CppName: Send
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::Message::*)(UnityEngine::Transform*)>(&InteractionObject::Message::Send)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::Message*), "Send", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::Message::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::Message::*)()>(&InteractionObject::Message::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::Message*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::Message::*)()>(&InteractionObject::Message::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::Message*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionObject/AnimatorEvent
#include "RootMotion/FinalIK/InteractionObject_AnimatorEvent.hpp"
// Including type: UnityEngine.Animator
#include "UnityEngine/Animator.hpp"
// Including type: UnityEngine.Animation
#include "UnityEngine/Animation.hpp"
// Including type: System.String
#include "System/String.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static private System.String empty
::Il2CppString* RootMotion::FinalIK::InteractionObject::AnimatorEvent::_get_empty() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::AnimatorEvent::_get_empty");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>("RootMotion.FinalIK", "InteractionObject/AnimatorEvent", "empty"));
}
// Autogenerated static field setter
// Set static field: static private System.String empty
void RootMotion::FinalIK::InteractionObject::AnimatorEvent::_set_empty(::Il2CppString* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::AnimatorEvent::_set_empty");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/AnimatorEvent", "empty", value));
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject/AnimatorEvent.Activate
void RootMotion::FinalIK::InteractionObject::AnimatorEvent::Activate(bool pickUp) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::AnimatorEvent::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pickUp)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, pickUp);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject/AnimatorEvent.Activate
void RootMotion::FinalIK::InteractionObject::AnimatorEvent::Activate(UnityEngine::Animator* animator) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::AnimatorEvent::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animator)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animator);
}
// Autogenerated method: RootMotion.FinalIK.InteractionObject/AnimatorEvent.Activate
void RootMotion::FinalIK::InteractionObject::AnimatorEvent::Activate(UnityEngine::Animation* animation) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::AnimatorEvent::Activate");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Activate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(animation)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, animation);
}
// Writing MetadataGetter for method: InteractionObject::AnimatorEvent::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::AnimatorEvent::*)(bool)>(&InteractionObject::AnimatorEvent::Activate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::AnimatorEvent*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::AnimatorEvent::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::AnimatorEvent::*)(UnityEngine::Animator*)>(&InteractionObject::AnimatorEvent::Activate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::AnimatorEvent*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animator*>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::AnimatorEvent::Activate
// Il2CppName: Activate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::AnimatorEvent::*)(UnityEngine::Animation*)>(&InteractionObject::AnimatorEvent::Activate)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::AnimatorEvent*), "Activate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Animation*>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::AnimatorEvent::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::AnimatorEvent::*)()>(&InteractionObject::AnimatorEvent::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::AnimatorEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::AnimatorEvent::*)()>(&InteractionObject::AnimatorEvent::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::AnimatorEvent*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.InteractionObject/WeightCurve
#include "RootMotion/FinalIK/InteractionObject.hpp"
// Including type: UnityEngine.AnimationCurve
#include "UnityEngine/AnimationCurve.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionObject/WeightCurve.GetValue
float RootMotion::FinalIK::InteractionObject::WeightCurve::GetValue(float timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::GetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(timer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, timer);
}
// Writing MetadataGetter for method: InteractionObject::WeightCurve::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (InteractionObject::WeightCurve::*)(float)>(&InteractionObject::WeightCurve::GetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::WeightCurve*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::WeightCurve::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::WeightCurve::*)()>(&InteractionObject::WeightCurve::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::WeightCurve*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::WeightCurve::*)()>(&InteractionObject::WeightCurve::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::WeightCurve*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.InteractionObject/WeightCurve/Type
#include "RootMotion/FinalIK/InteractionObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type PositionWeight
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionWeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionWeight"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type PositionWeight
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionWeight(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionWeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionWeight", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type RotationWeight
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_RotationWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_RotationWeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "RotationWeight"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type RotationWeight
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_RotationWeight(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_RotationWeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "RotationWeight", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type PositionOffsetX
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionOffsetX() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionOffsetX");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionOffsetX"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type PositionOffsetX
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionOffsetX(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionOffsetX");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionOffsetX", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type PositionOffsetY
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionOffsetY() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionOffsetY");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionOffsetY"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type PositionOffsetY
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionOffsetY(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionOffsetY");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionOffsetY", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type PositionOffsetZ
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionOffsetZ() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PositionOffsetZ");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionOffsetZ"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type PositionOffsetZ
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionOffsetZ(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PositionOffsetZ");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PositionOffsetZ", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type Pull
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_Pull() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_Pull");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "Pull"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type Pull
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_Pull(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_Pull");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "Pull", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type Reach
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_Reach() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_Reach");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "Reach"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type Reach
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_Reach(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_Reach");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "Reach", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type RotateBoneWeight
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_RotateBoneWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_RotateBoneWeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "RotateBoneWeight"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type RotateBoneWeight
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_RotateBoneWeight(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_RotateBoneWeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "RotateBoneWeight", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type Push
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_Push() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_Push");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "Push"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type Push
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_Push(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_Push");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "Push", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type PushParent
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PushParent() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PushParent");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PushParent"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type PushParent
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PushParent(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PushParent");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PushParent", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type PoserWeight
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PoserWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_PoserWeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PoserWeight"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type PoserWeight
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PoserWeight(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_PoserWeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "PoserWeight", value));
}
// Autogenerated static field getter
// Get static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type BendGoalWeight
RootMotion::FinalIK::InteractionObject::WeightCurve::Type RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_BendGoalWeight() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_get_BendGoalWeight");
  return THROW_UNLESS(il2cpp_utils::GetFieldValue<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "BendGoalWeight"));
}
// Autogenerated static field setter
// Set static field: static public RootMotion.FinalIK.InteractionObject/WeightCurve/Type BendGoalWeight
void RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_BendGoalWeight(RootMotion::FinalIK::InteractionObject::WeightCurve::Type value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::WeightCurve::Type::_set_BendGoalWeight");
  THROW_UNLESS(il2cpp_utils::SetFieldValue("RootMotion.FinalIK", "InteractionObject/WeightCurve/Type", "BendGoalWeight", value));
}
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.InteractionObject/Multiplier
#include "RootMotion/FinalIK/InteractionObject_Multiplier.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/WeightCurve
#include "RootMotion/FinalIK/InteractionObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionObject/Multiplier.GetValue
float RootMotion::FinalIK::InteractionObject::Multiplier::GetValue(RootMotion::FinalIK::InteractionObject::WeightCurve* weightCurve, float timer) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionObject::Multiplier::GetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(weightCurve), ::il2cpp_utils::ExtractType(timer)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, weightCurve, timer);
}
// Writing MetadataGetter for method: InteractionObject::Multiplier::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (InteractionObject::Multiplier::*)(RootMotion::FinalIK::InteractionObject::WeightCurve*, float)>(&InteractionObject::Multiplier::GetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::Multiplier*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject::WeightCurve*>(), ::il2cpp_utils::ExtractIndependentType<float>()});
  }
};
// Writing MetadataGetter for method: InteractionObject::Multiplier::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::Multiplier::*)()>(&InteractionObject::Multiplier::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::Multiplier*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionObject::Multiplier::*)()>(&InteractionObject::Multiplier::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionObject::Multiplier*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionSystem
#include "RootMotion/FinalIK/InteractionSystem.hpp"
// Including type: RootMotion.FinalIK.InteractionSystem/InteractionDelegate
#include "RootMotion/FinalIK/InteractionSystem_InteractionDelegate.hpp"
// Including type: RootMotion.FinalIK.InteractionSystem/InteractionEventDelegate
#include "RootMotion/FinalIK/InteractionSystem_InteractionEventDelegate.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: RootMotion.FinalIK.InteractionTrigger/Range
#include "RootMotion/FinalIK/InteractionTrigger_Range.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedIK
#include "RootMotion/FinalIK/FullBodyBipedIK.hpp"
// Including type: RootMotion.FinalIK.InteractionLookAt
#include "RootMotion/FinalIK/InteractionLookAt.hpp"
// Including type: RootMotion.FinalIK.InteractionEffector
#include "RootMotion/FinalIK/InteractionEffector.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedEffector
#include "RootMotion/FinalIK/FullBodyBipedEffector.hpp"
// Including type: RootMotion.FinalIK.InteractionObject
#include "RootMotion/FinalIK/InteractionObject.hpp"
// Including type: RootMotion.FinalIK.InteractionTarget
#include "RootMotion/FinalIK/InteractionTarget.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OpenUserManual
void RootMotion::FinalIK::InteractionSystem::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OpenScriptReference
void RootMotion::FinalIK::InteractionSystem::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OpenTutorial1
void RootMotion::FinalIK::InteractionSystem::OpenTutorial1() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OpenTutorial1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OpenTutorial2
void RootMotion::FinalIK::InteractionSystem::OpenTutorial2() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OpenTutorial2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OpenTutorial3
void RootMotion::FinalIK::InteractionSystem::OpenTutorial3() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OpenTutorial3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OpenTutorial4
void RootMotion::FinalIK::InteractionSystem::OpenTutorial4() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OpenTutorial4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.SupportGroup
void RootMotion::FinalIK::InteractionSystem::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.ASThread
void RootMotion::FinalIK::InteractionSystem::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.get_inInteraction
bool RootMotion::FinalIK::InteractionSystem::get_inInteraction() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::get_inInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_inInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.IsInInteraction
bool RootMotion::FinalIK::InteractionSystem::IsInInteraction(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::IsInInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.IsPaused
bool RootMotion::FinalIK::InteractionSystem::IsPaused(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::IsPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.IsPaused
bool RootMotion::FinalIK::InteractionSystem::IsPaused() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::IsPaused");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsPaused", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.IsInSync
bool RootMotion::FinalIK::InteractionSystem::IsInSync() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::IsInSync");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInSync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.StartInteraction
bool RootMotion::FinalIK::InteractionSystem::StartInteraction(RootMotion::FinalIK::FullBodyBipedEffector effectorType, RootMotion::FinalIK::InteractionObject* interactionObject, bool interrupt) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::StartInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StartInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType), ::il2cpp_utils::ExtractType(interactionObject), ::il2cpp_utils::ExtractType(interrupt)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, effectorType, interactionObject, interrupt);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.PauseInteraction
bool RootMotion::FinalIK::InteractionSystem::PauseInteraction(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::PauseInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.ResumeInteraction
bool RootMotion::FinalIK::InteractionSystem::ResumeInteraction(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::ResumeInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.StopInteraction
bool RootMotion::FinalIK::InteractionSystem::StopInteraction(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::StopInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.PauseAll
void RootMotion::FinalIK::InteractionSystem::PauseAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::PauseAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PauseAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.ResumeAll
void RootMotion::FinalIK::InteractionSystem::ResumeAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::ResumeAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResumeAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.StopAll
void RootMotion::FinalIK::InteractionSystem::StopAll() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::StopAll");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "StopAll", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetInteractionObject
RootMotion::FinalIK::InteractionObject* RootMotion::FinalIK::InteractionSystem::GetInteractionObject(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetInteractionObject");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetInteractionObject", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionObject*, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetProgress
float RootMotion::FinalIK::InteractionSystem::GetProgress(RootMotion::FinalIK::FullBodyBipedEffector effectorType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, effectorType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetMinActiveProgress
float RootMotion::FinalIK::InteractionSystem::GetMinActiveProgress() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetMinActiveProgress");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetMinActiveProgress", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.TriggerInteraction
bool RootMotion::FinalIK::InteractionSystem::TriggerInteraction(int index, bool interrupt) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::TriggerInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(interrupt)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index, interrupt);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.TriggerInteraction
bool RootMotion::FinalIK::InteractionSystem::TriggerInteraction(int index, bool interrupt, RootMotion::FinalIK::InteractionObject*& interactionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::TriggerInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(interrupt), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index, interrupt, interactionObject);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.TriggerInteraction
bool RootMotion::FinalIK::InteractionSystem::TriggerInteraction(int index, bool interrupt, RootMotion::FinalIK::InteractionTarget*& interactionTarget) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::TriggerInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(interrupt), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionTarget*&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index, interrupt, interactionTarget);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetClosestInteractionRange
RootMotion::FinalIK::InteractionTrigger::Range* RootMotion::FinalIK::InteractionSystem::GetClosestInteractionRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetClosestInteractionRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClosestInteractionRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionTrigger::Range*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetClosestInteractionObjectInRange
RootMotion::FinalIK::InteractionObject* RootMotion::FinalIK::InteractionSystem::GetClosestInteractionObjectInRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetClosestInteractionObjectInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClosestInteractionObjectInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionObject*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetClosestInteractionTargetInRange
RootMotion::FinalIK::InteractionTarget* RootMotion::FinalIK::InteractionSystem::GetClosestInteractionTargetInRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetClosestInteractionTargetInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClosestInteractionTargetInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionTarget*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetClosestInteractionObjectsInRange
::Array<RootMotion::FinalIK::InteractionObject*>* RootMotion::FinalIK::InteractionSystem::GetClosestInteractionObjectsInRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetClosestInteractionObjectsInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClosestInteractionObjectsInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::InteractionObject*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetClosestInteractionTargetsInRange
::Array<RootMotion::FinalIK::InteractionTarget*>* RootMotion::FinalIK::InteractionSystem::GetClosestInteractionTargetsInRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetClosestInteractionTargetsInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClosestInteractionTargetsInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<::Array<RootMotion::FinalIK::InteractionTarget*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.TriggerEffectorsReady
bool RootMotion::FinalIK::InteractionSystem::TriggerEffectorsReady(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::TriggerEffectorsReady");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerEffectorsReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetTriggerRange
RootMotion::FinalIK::InteractionTrigger::Range* RootMotion::FinalIK::InteractionSystem::GetTriggerRange(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetTriggerRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetTriggerRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::InteractionTrigger::Range*, false>(this, ___internal__method, index);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.GetClosestTriggerIndex
int RootMotion::FinalIK::InteractionSystem::GetClosestTriggerIndex() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::GetClosestTriggerIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetClosestTriggerIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.get_ik
RootMotion::FinalIK::FullBodyBipedIK* RootMotion::FinalIK::InteractionSystem::get_ik() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::get_ik");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ik", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<RootMotion::FinalIK::FullBodyBipedIK*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.set_ik
void RootMotion::FinalIK::InteractionSystem::set_ik(RootMotion::FinalIK::FullBodyBipedIK* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::set_ik");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_ik", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.get_triggersInRange
System::Collections::Generic::List_1<RootMotion::FinalIK::InteractionTrigger*>* RootMotion::FinalIK::InteractionSystem::get_triggersInRange() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::get_triggersInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_triggersInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::List_1<RootMotion::FinalIK::InteractionTrigger*>*, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.set_triggersInRange
void RootMotion::FinalIK::InteractionSystem::set_triggersInRange(System::Collections::Generic::List_1<RootMotion::FinalIK::InteractionTrigger*>* value) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::set_triggersInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_triggersInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.Start
void RootMotion::FinalIK::InteractionSystem::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.InteractionPause
void RootMotion::FinalIK::InteractionSystem::InteractionPause(RootMotion::FinalIK::FullBodyBipedEffector effector, RootMotion::FinalIK::InteractionObject* interactionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionPause");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InteractionPause", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(interactionObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effector, interactionObject);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.InteractionResume
void RootMotion::FinalIK::InteractionSystem::InteractionResume(RootMotion::FinalIK::FullBodyBipedEffector effector, RootMotion::FinalIK::InteractionObject* interactionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionResume");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InteractionResume", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(interactionObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effector, interactionObject);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.InteractionStop
void RootMotion::FinalIK::InteractionSystem::InteractionStop(RootMotion::FinalIK::FullBodyBipedEffector effector, RootMotion::FinalIK::InteractionObject* interactionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionStop");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "InteractionStop", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(interactionObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effector, interactionObject);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.LookAtInteraction
void RootMotion::FinalIK::InteractionSystem::LookAtInteraction(RootMotion::FinalIK::FullBodyBipedEffector effector, RootMotion::FinalIK::InteractionObject* interactionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::LookAtInteraction");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LookAtInteraction", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effector), ::il2cpp_utils::ExtractType(interactionObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effector, interactionObject);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OnTriggerEnter
void RootMotion::FinalIK::InteractionSystem::OnTriggerEnter(UnityEngine::Collider* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OnTriggerEnter");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerEnter", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, c);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OnTriggerExit
void RootMotion::FinalIK::InteractionSystem::OnTriggerExit(UnityEngine::Collider* c) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OnTriggerExit");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnTriggerExit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(c)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, c);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.ContactIsInRange
bool RootMotion::FinalIK::InteractionSystem::ContactIsInRange(int index, int& bestRangeIndex) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::ContactIsInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ContactIsInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractIndependentType<int&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index, bestRangeIndex);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OnDrawGizmosSelected
void RootMotion::FinalIK::InteractionSystem::OnDrawGizmosSelected() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OnDrawGizmosSelected");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDrawGizmosSelected", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.Update
void RootMotion::FinalIK::InteractionSystem::Update() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::Update");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Update", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.Raycasting
void RootMotion::FinalIK::InteractionSystem::Raycasting() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::Raycasting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Raycasting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.UpdateTriggerEventBroadcasting
void RootMotion::FinalIK::InteractionSystem::UpdateTriggerEventBroadcasting() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::UpdateTriggerEventBroadcasting");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateTriggerEventBroadcasting", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.UpdateEffectors
void RootMotion::FinalIK::InteractionSystem::UpdateEffectors() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::UpdateEffectors");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateEffectors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OnPreFBBIK
void RootMotion::FinalIK::InteractionSystem::OnPreFBBIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OnPreFBBIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPreFBBIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OnPostFBBIK
void RootMotion::FinalIK::InteractionSystem::OnPostFBBIK() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OnPostFBBIK");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnPostFBBIK", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OnFixTransforms
void RootMotion::FinalIK::InteractionSystem::OnFixTransforms() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OnFixTransforms");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnFixTransforms", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.OnDestroy
void RootMotion::FinalIK::InteractionSystem::OnDestroy() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::OnDestroy");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OnDestroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.IsValid
bool RootMotion::FinalIK::InteractionSystem::IsValid(bool log) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::IsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(log)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, log);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem.TriggerIndexIsValid
bool RootMotion::FinalIK::InteractionSystem::TriggerIndexIsValid(int index) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::TriggerIndexIsValid");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TriggerIndexIsValid", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(index)})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, index);
}
// Writing MetadataGetter for method: InteractionSystem::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::OpenTutorial1
// Il2CppName: OpenTutorial1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::OpenTutorial1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "OpenTutorial1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::OpenTutorial2
// Il2CppName: OpenTutorial2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::OpenTutorial2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "OpenTutorial2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::OpenTutorial3
// Il2CppName: OpenTutorial3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::OpenTutorial3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "OpenTutorial3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::OpenTutorial4
// Il2CppName: OpenTutorial4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::OpenTutorial4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "OpenTutorial4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::SupportGroup
// Il2CppName: SupportGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::SupportGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "SupportGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::ASThread
// Il2CppName: ASThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::ASThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "ASThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::get_inInteraction
// Il2CppName: get_inInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)()>(&InteractionSystem::get_inInteraction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "get_inInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::IsInInteraction
// Il2CppName: IsInInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)(RootMotion::FinalIK::FullBodyBipedEffector)>(&InteractionSystem::IsInInteraction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "IsInInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::IsPaused
// Il2CppName: IsPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)(RootMotion::FinalIK::FullBodyBipedEffector)>(&InteractionSystem::IsPaused)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "IsPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::IsPaused
// Il2CppName: IsPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)()>(&InteractionSystem::IsPaused)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "IsPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::IsInSync
// Il2CppName: IsInSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)()>(&InteractionSystem::IsInSync)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "IsInSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::StartInteraction
// Il2CppName: StartInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)(RootMotion::FinalIK::FullBodyBipedEffector, RootMotion::FinalIK::InteractionObject*, bool)>(&InteractionSystem::StartInteraction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "StartInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject*>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::PauseInteraction
// Il2CppName: PauseInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)(RootMotion::FinalIK::FullBodyBipedEffector)>(&InteractionSystem::PauseInteraction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "PauseInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::ResumeInteraction
// Il2CppName: ResumeInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)(RootMotion::FinalIK::FullBodyBipedEffector)>(&InteractionSystem::ResumeInteraction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "ResumeInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::StopInteraction
// Il2CppName: StopInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)(RootMotion::FinalIK::FullBodyBipedEffector)>(&InteractionSystem::StopInteraction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "StopInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::PauseAll
// Il2CppName: PauseAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::PauseAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "PauseAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::ResumeAll
// Il2CppName: ResumeAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::ResumeAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "ResumeAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::StopAll
// Il2CppName: StopAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::StopAll)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "StopAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::GetInteractionObject
// Il2CppName: GetInteractionObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::InteractionObject* (InteractionSystem::*)(RootMotion::FinalIK::FullBodyBipedEffector)>(&InteractionSystem::GetInteractionObject)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "GetInteractionObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::GetProgress
// Il2CppName: GetProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (InteractionSystem::*)(RootMotion::FinalIK::FullBodyBipedEffector)>(&InteractionSystem::GetProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "GetProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::GetMinActiveProgress
// Il2CppName: GetMinActiveProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (InteractionSystem::*)()>(&InteractionSystem::GetMinActiveProgress)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "GetMinActiveProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::TriggerInteraction
// Il2CppName: TriggerInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)(int, bool)>(&InteractionSystem::TriggerInteraction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "TriggerInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::TriggerInteraction
// Il2CppName: TriggerInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)(int, bool, RootMotion::FinalIK::InteractionObject*&)>(&InteractionSystem::TriggerInteraction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "TriggerInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject*&>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::TriggerInteraction
// Il2CppName: TriggerInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)(int, bool, RootMotion::FinalIK::InteractionTarget*&)>(&InteractionSystem::TriggerInteraction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "TriggerInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<bool>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionTarget*&>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::GetClosestInteractionRange
// Il2CppName: GetClosestInteractionRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::InteractionTrigger::Range* (InteractionSystem::*)()>(&InteractionSystem::GetClosestInteractionRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "GetClosestInteractionRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::GetClosestInteractionObjectInRange
// Il2CppName: GetClosestInteractionObjectInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::InteractionObject* (InteractionSystem::*)()>(&InteractionSystem::GetClosestInteractionObjectInRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "GetClosestInteractionObjectInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::GetClosestInteractionTargetInRange
// Il2CppName: GetClosestInteractionTargetInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::InteractionTarget* (InteractionSystem::*)()>(&InteractionSystem::GetClosestInteractionTargetInRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "GetClosestInteractionTargetInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::GetClosestInteractionObjectsInRange
// Il2CppName: GetClosestInteractionObjectsInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<RootMotion::FinalIK::InteractionObject*>* (InteractionSystem::*)()>(&InteractionSystem::GetClosestInteractionObjectsInRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "GetClosestInteractionObjectsInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::GetClosestInteractionTargetsInRange
// Il2CppName: GetClosestInteractionTargetsInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<RootMotion::FinalIK::InteractionTarget*>* (InteractionSystem::*)()>(&InteractionSystem::GetClosestInteractionTargetsInRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "GetClosestInteractionTargetsInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::TriggerEffectorsReady
// Il2CppName: TriggerEffectorsReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)(int)>(&InteractionSystem::TriggerEffectorsReady)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "TriggerEffectorsReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::GetTriggerRange
// Il2CppName: GetTriggerRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::InteractionTrigger::Range* (InteractionSystem::*)(int)>(&InteractionSystem::GetTriggerRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "GetTriggerRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::GetClosestTriggerIndex
// Il2CppName: GetClosestTriggerIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (InteractionSystem::*)()>(&InteractionSystem::GetClosestTriggerIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "GetClosestTriggerIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::get_ik
// Il2CppName: get_ik
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<RootMotion::FinalIK::FullBodyBipedIK* (InteractionSystem::*)()>(&InteractionSystem::get_ik)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "get_ik", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::set_ik
// Il2CppName: set_ik
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)(RootMotion::FinalIK::FullBodyBipedIK*)>(&InteractionSystem::set_ik)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "set_ik", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedIK*>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::get_triggersInRange
// Il2CppName: get_triggersInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<RootMotion::FinalIK::InteractionTrigger*>* (InteractionSystem::*)()>(&InteractionSystem::get_triggersInRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "get_triggersInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::set_triggersInRange
// Il2CppName: set_triggersInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)(System::Collections::Generic::List_1<RootMotion::FinalIK::InteractionTrigger*>*)>(&InteractionSystem::set_triggersInRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "set_triggersInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::Collections::Generic::List_1<RootMotion::FinalIK::InteractionTrigger*>*>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::InteractionPause
// Il2CppName: InteractionPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)(RootMotion::FinalIK::FullBodyBipedEffector, RootMotion::FinalIK::InteractionObject*)>(&InteractionSystem::InteractionPause)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "InteractionPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject*>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::InteractionResume
// Il2CppName: InteractionResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)(RootMotion::FinalIK::FullBodyBipedEffector, RootMotion::FinalIK::InteractionObject*)>(&InteractionSystem::InteractionResume)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "InteractionResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject*>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::InteractionStop
// Il2CppName: InteractionStop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)(RootMotion::FinalIK::FullBodyBipedEffector, RootMotion::FinalIK::InteractionObject*)>(&InteractionSystem::InteractionStop)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "InteractionStop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject*>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::LookAtInteraction
// Il2CppName: LookAtInteraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)(RootMotion::FinalIK::FullBodyBipedEffector, RootMotion::FinalIK::InteractionObject*)>(&InteractionSystem::LookAtInteraction)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "LookAtInteraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject*>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)(UnityEngine::Collider*)>(&InteractionSystem::OnTriggerEnter)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Collider*>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)(UnityEngine::Collider*)>(&InteractionSystem::OnTriggerExit)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Collider*>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::ContactIsInRange
// Il2CppName: ContactIsInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)(int, int&)>(&InteractionSystem::ContactIsInRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "ContactIsInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>(), ::il2cpp_utils::ExtractIndependentType<int&>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::OnDrawGizmosSelected
// Il2CppName: OnDrawGizmosSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::OnDrawGizmosSelected)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "OnDrawGizmosSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::Update)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::Raycasting
// Il2CppName: Raycasting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::Raycasting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "Raycasting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::UpdateTriggerEventBroadcasting
// Il2CppName: UpdateTriggerEventBroadcasting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::UpdateTriggerEventBroadcasting)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "UpdateTriggerEventBroadcasting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::UpdateEffectors
// Il2CppName: UpdateEffectors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::UpdateEffectors)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "UpdateEffectors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::OnPreFBBIK
// Il2CppName: OnPreFBBIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::OnPreFBBIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "OnPreFBBIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::OnPostFBBIK
// Il2CppName: OnPostFBBIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::OnPostFBBIK)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "OnPostFBBIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::OnFixTransforms
// Il2CppName: OnFixTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::OnFixTransforms)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "OnFixTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::OnDestroy)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionSystem::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)(bool)>(&InteractionSystem::IsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<bool>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::TriggerIndexIsValid
// Il2CppName: TriggerIndexIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionSystem::*)(int)>(&InteractionSystem::TriggerIndexIsValid)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), "TriggerIndexIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<int>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::*)()>(&InteractionSystem::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionSystem/InteractionDelegate
#include "RootMotion/FinalIK/InteractionSystem_InteractionDelegate.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedEffector
#include "RootMotion/FinalIK/FullBodyBipedEffector.hpp"
// Including type: RootMotion.FinalIK.InteractionObject
#include "RootMotion/FinalIK/InteractionObject.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionSystem/InteractionDelegate.Invoke
void RootMotion::FinalIK::InteractionSystem::InteractionDelegate::Invoke(RootMotion::FinalIK::FullBodyBipedEffector effectorType, RootMotion::FinalIK::InteractionObject* interactionObject) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType), ::il2cpp_utils::ExtractType(interactionObject)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effectorType, interactionObject);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem/InteractionDelegate.BeginInvoke
System::IAsyncResult* RootMotion::FinalIK::InteractionSystem::InteractionDelegate::BeginInvoke(RootMotion::FinalIK::FullBodyBipedEffector effectorType, RootMotion::FinalIK::InteractionObject* interactionObject, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType), ::il2cpp_utils::ExtractType(interactionObject), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, effectorType, interactionObject, callback, object);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem/InteractionDelegate.EndInvoke
void RootMotion::FinalIK::InteractionSystem::InteractionDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: InteractionSystem::InteractionDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::InteractionDelegate::*)(::Il2CppObject*, System::IntPtr)>(&InteractionSystem::InteractionDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem::InteractionDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::InteractionDelegate::*)(::Il2CppObject*, System::IntPtr)>(&InteractionSystem::InteractionDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem::InteractionDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::InteractionDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::InteractionDelegate::*)(RootMotion::FinalIK::FullBodyBipedEffector, RootMotion::FinalIK::InteractionObject*)>(&InteractionSystem::InteractionDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem::InteractionDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject*>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::InteractionDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (InteractionSystem::InteractionDelegate::*)(RootMotion::FinalIK::FullBodyBipedEffector, RootMotion::FinalIK::InteractionObject*, System::AsyncCallback*, ::Il2CppObject*)>(&InteractionSystem::InteractionDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem::InteractionDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::InteractionDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::InteractionDelegate::*)(System::IAsyncResult*)>(&InteractionSystem::InteractionDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem::InteractionDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionSystem/InteractionEventDelegate
#include "RootMotion/FinalIK/InteractionSystem_InteractionEventDelegate.hpp"
// Including type: RootMotion.FinalIK.FullBodyBipedEffector
#include "RootMotion/FinalIK/FullBodyBipedEffector.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.AsyncCallback
#include "System/AsyncCallback.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/InteractionEvent
#include "RootMotion/FinalIK/InteractionObject_InteractionEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionSystem/InteractionEventDelegate.Invoke
void RootMotion::FinalIK::InteractionSystem::InteractionEventDelegate::Invoke(RootMotion::FinalIK::FullBodyBipedEffector effectorType, RootMotion::FinalIK::InteractionObject* interactionObject, RootMotion::FinalIK::InteractionObject::InteractionEvent* interactionEvent) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionEventDelegate::Invoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Invoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType), ::il2cpp_utils::ExtractType(interactionObject), ::il2cpp_utils::ExtractType(interactionEvent)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, effectorType, interactionObject, interactionEvent);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem/InteractionEventDelegate.BeginInvoke
System::IAsyncResult* RootMotion::FinalIK::InteractionSystem::InteractionEventDelegate::BeginInvoke(RootMotion::FinalIK::FullBodyBipedEffector effectorType, RootMotion::FinalIK::InteractionObject* interactionObject, RootMotion::FinalIK::InteractionObject::InteractionEvent* interactionEvent, System::AsyncCallback* callback, ::Il2CppObject* object) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionEventDelegate::BeginInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(effectorType), ::il2cpp_utils::ExtractType(interactionObject), ::il2cpp_utils::ExtractType(interactionEvent), ::il2cpp_utils::ExtractType(callback), ::il2cpp_utils::ExtractType(object)})));
  return ::il2cpp_utils::RunMethodThrow<System::IAsyncResult*, false>(this, ___internal__method, effectorType, interactionObject, interactionEvent, callback, object);
}
// Autogenerated method: RootMotion.FinalIK.InteractionSystem/InteractionEventDelegate.EndInvoke
void RootMotion::FinalIK::InteractionSystem::InteractionEventDelegate::EndInvoke(System::IAsyncResult* result) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionSystem::InteractionEventDelegate::EndInvoke");
  auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EndInvoke", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(result)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, result);
}
// Writing MetadataGetter for method: InteractionSystem::InteractionEventDelegate::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::InteractionEventDelegate::*)(::Il2CppObject*, System::IntPtr)>(&InteractionSystem::InteractionEventDelegate::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem::InteractionEventDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::InteractionEventDelegate::*)(::Il2CppObject*, System::IntPtr)>(&InteractionSystem::InteractionEventDelegate::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem::InteractionEventDelegate*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>(), ::il2cpp_utils::ExtractIndependentType<System::IntPtr>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::InteractionEventDelegate::Invoke
// Il2CppName: Invoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::InteractionEventDelegate::*)(RootMotion::FinalIK::FullBodyBipedEffector, RootMotion::FinalIK::InteractionObject*, RootMotion::FinalIK::InteractionObject::InteractionEvent*)>(&InteractionSystem::InteractionEventDelegate::Invoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem::InteractionEventDelegate*), "Invoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject::InteractionEvent*>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::InteractionEventDelegate::BeginInvoke
// Il2CppName: BeginInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult* (InteractionSystem::InteractionEventDelegate::*)(RootMotion::FinalIK::FullBodyBipedEffector, RootMotion::FinalIK::InteractionObject*, RootMotion::FinalIK::InteractionObject::InteractionEvent*, System::AsyncCallback*, ::Il2CppObject*)>(&InteractionSystem::InteractionEventDelegate::BeginInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem::InteractionEventDelegate*), "BeginInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::FullBodyBipedEffector>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject*>(), ::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject::InteractionEvent*>(), ::il2cpp_utils::ExtractIndependentType<System::AsyncCallback*>(), ::il2cpp_utils::ExtractIndependentType<::Il2CppObject*>()});
  }
};
// Writing MetadataGetter for method: InteractionSystem::InteractionEventDelegate::EndInvoke
// Il2CppName: EndInvoke
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionSystem::InteractionEventDelegate::*)(System::IAsyncResult*)>(&InteractionSystem::InteractionEventDelegate::EndInvoke)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionSystem::InteractionEventDelegate*), "EndInvoke", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<System::IAsyncResult*>()});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionTarget
#include "RootMotion/FinalIK/InteractionTarget.hpp"
// Including type: RootMotion.FinalIK.InteractionTarget/Multiplier
#include "RootMotion/FinalIK/InteractionTarget_Multiplier.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: RootMotion.FinalIK.InteractionObject/WeightCurve/Type
#include "RootMotion/FinalIK/InteractionObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.OpenUserManual
void RootMotion::FinalIK::InteractionTarget::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.OpenScriptReference
void RootMotion::FinalIK::InteractionTarget::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.OpenTutorial1
void RootMotion::FinalIK::InteractionTarget::OpenTutorial1() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::OpenTutorial1");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.OpenTutorial2
void RootMotion::FinalIK::InteractionTarget::OpenTutorial2() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::OpenTutorial2");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial2", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.OpenTutorial3
void RootMotion::FinalIK::InteractionTarget::OpenTutorial3() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::OpenTutorial3");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial3", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.OpenTutorial4
void RootMotion::FinalIK::InteractionTarget::OpenTutorial4() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::OpenTutorial4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.SupportGroup
void RootMotion::FinalIK::InteractionTarget::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.ASThread
void RootMotion::FinalIK::InteractionTarget::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.GetValue
float RootMotion::FinalIK::InteractionTarget::GetValue(RootMotion::FinalIK::InteractionObject::WeightCurve::Type curveType) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::GetValue");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetValue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(curveType)})));
  return ::il2cpp_utils::RunMethodThrow<float, false>(this, ___internal__method, curveType);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.ResetRotation
void RootMotion::FinalIK::InteractionTarget::ResetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::ResetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTarget.RotateTo
void RootMotion::FinalIK::InteractionTarget::RotateTo(UnityEngine::Vector3 position) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTarget::RotateTo");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RotateTo", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(position)})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, position);
}
// Writing MetadataGetter for method: InteractionTarget::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTarget::*)()>(&InteractionTarget::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTarget*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTarget::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTarget::*)()>(&InteractionTarget::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTarget*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTarget::OpenTutorial1
// Il2CppName: OpenTutorial1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTarget::*)()>(&InteractionTarget::OpenTutorial1)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTarget*), "OpenTutorial1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTarget::OpenTutorial2
// Il2CppName: OpenTutorial2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTarget::*)()>(&InteractionTarget::OpenTutorial2)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTarget*), "OpenTutorial2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTarget::OpenTutorial3
// Il2CppName: OpenTutorial3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTarget::*)()>(&InteractionTarget::OpenTutorial3)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTarget*), "OpenTutorial3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTarget::OpenTutorial4
// Il2CppName: OpenTutorial4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTarget::*)()>(&InteractionTarget::OpenTutorial4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTarget*), "OpenTutorial4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTarget::SupportGroup
// Il2CppName: SupportGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTarget::*)()>(&InteractionTarget::SupportGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTarget*), "SupportGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTarget::ASThread
// Il2CppName: ASThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTarget::*)()>(&InteractionTarget::ASThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTarget*), "ASThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTarget::GetValue
// Il2CppName: GetValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (InteractionTarget::*)(RootMotion::FinalIK::InteractionObject::WeightCurve::Type)>(&InteractionTarget::GetValue)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTarget*), "GetValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<RootMotion::FinalIK::InteractionObject::WeightCurve::Type>()});
  }
};
// Writing MetadataGetter for method: InteractionTarget::ResetRotation
// Il2CppName: ResetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTarget::*)()>(&InteractionTarget::ResetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTarget*), "ResetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTarget::RotateTo
// Il2CppName: RotateTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTarget::*)(UnityEngine::Vector3)>(&InteractionTarget::RotateTo)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTarget*), "RotateTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Vector3>()});
  }
};
// Writing MetadataGetter for method: InteractionTarget::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTarget::*)()>(&InteractionTarget::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTarget*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTarget::*)()>(&InteractionTarget::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTarget*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.InteractionTarget/Multiplier
#include "RootMotion/FinalIK/InteractionTarget_Multiplier.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Writing MetadataGetter for method: InteractionTarget::Multiplier::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTarget::Multiplier::*)()>(&InteractionTarget::Multiplier::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTarget::Multiplier*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTarget::Multiplier::*)()>(&InteractionTarget::Multiplier::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTarget::Multiplier*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionTrigger
#include "RootMotion/FinalIK/InteractionTrigger.hpp"
// Including type: RootMotion.FinalIK.InteractionTrigger/CharacterPosition
#include "RootMotion/FinalIK/InteractionTrigger_CharacterPosition.hpp"
// Including type: RootMotion.FinalIK.InteractionTrigger/CameraPosition
#include "RootMotion/FinalIK/InteractionTrigger_CameraPosition.hpp"
// Including type: RootMotion.FinalIK.InteractionTrigger/Range
#include "RootMotion/FinalIK/InteractionTrigger_Range.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger.OpenUserManual
void RootMotion::FinalIK::InteractionTrigger::OpenUserManual() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::OpenUserManual");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenUserManual", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger.OpenScriptReference
void RootMotion::FinalIK::InteractionTrigger::OpenScriptReference() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::OpenScriptReference");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenScriptReference", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger.OpenTutorial4
void RootMotion::FinalIK::InteractionTrigger::OpenTutorial4() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::OpenTutorial4");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "OpenTutorial4", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger.SupportGroup
void RootMotion::FinalIK::InteractionTrigger::SupportGroup() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::SupportGroup");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SupportGroup", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger.ASThread
void RootMotion::FinalIK::InteractionTrigger::ASThread() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::ASThread");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ASThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger.Start
void RootMotion::FinalIK::InteractionTrigger::Start() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::Start");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Start", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger.GetBestRangeIndex
int RootMotion::FinalIK::InteractionTrigger::GetBestRangeIndex(UnityEngine::Transform* character, UnityEngine::Transform* raycastFrom, UnityEngine::RaycastHit raycastHit) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::GetBestRangeIndex");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBestRangeIndex", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character), ::il2cpp_utils::ExtractType(raycastFrom), ::il2cpp_utils::ExtractType(raycastHit)})));
  return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, character, raycastFrom, raycastHit);
}
// Writing MetadataGetter for method: InteractionTrigger::OpenUserManual
// Il2CppName: OpenUserManual
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTrigger::*)()>(&InteractionTrigger::OpenUserManual)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger*), "OpenUserManual", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTrigger::OpenScriptReference
// Il2CppName: OpenScriptReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTrigger::*)()>(&InteractionTrigger::OpenScriptReference)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger*), "OpenScriptReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTrigger::OpenTutorial4
// Il2CppName: OpenTutorial4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTrigger::*)()>(&InteractionTrigger::OpenTutorial4)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger*), "OpenTutorial4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTrigger::SupportGroup
// Il2CppName: SupportGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTrigger::*)()>(&InteractionTrigger::SupportGroup)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger*), "SupportGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTrigger::ASThread
// Il2CppName: ASThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTrigger::*)()>(&InteractionTrigger::ASThread)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger*), "ASThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTrigger::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTrigger::*)()>(&InteractionTrigger::Start)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTrigger::GetBestRangeIndex
// Il2CppName: GetBestRangeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (InteractionTrigger::*)(UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::RaycastHit)>(&InteractionTrigger::GetBestRangeIndex)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger*), "GetBestRangeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RaycastHit>()});
  }
};
// Writing MetadataGetter for method: InteractionTrigger::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTrigger::*)()>(&InteractionTrigger::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTrigger::*)()>(&InteractionTrigger::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.InteractionTrigger/CharacterPosition
#include "RootMotion/FinalIK/InteractionTrigger_CharacterPosition.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger/CharacterPosition.get_offset3D
UnityEngine::Vector3 RootMotion::FinalIK::InteractionTrigger::CharacterPosition::get_offset3D() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::CharacterPosition::get_offset3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_offset3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger/CharacterPosition.get_direction3D
UnityEngine::Vector3 RootMotion::FinalIK::InteractionTrigger::CharacterPosition::get_direction3D() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::CharacterPosition::get_direction3D");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_direction3D", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Vector3, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger/CharacterPosition.IsInRange
bool RootMotion::FinalIK::InteractionTrigger::CharacterPosition::IsInRange(UnityEngine::Transform* character, UnityEngine::Transform* trigger, float& error) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::CharacterPosition::IsInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character), ::il2cpp_utils::ExtractType(trigger), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, character, trigger, error);
}
// Writing MetadataGetter for method: InteractionTrigger::CharacterPosition::get_offset3D
// Il2CppName: get_offset3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (InteractionTrigger::CharacterPosition::*)()>(&InteractionTrigger::CharacterPosition::get_offset3D)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger::CharacterPosition*), "get_offset3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTrigger::CharacterPosition::get_direction3D
// Il2CppName: get_direction3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector3 (InteractionTrigger::CharacterPosition::*)()>(&InteractionTrigger::CharacterPosition::get_direction3D)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger::CharacterPosition*), "get_direction3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTrigger::CharacterPosition::IsInRange
// Il2CppName: IsInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionTrigger::CharacterPosition::*)(UnityEngine::Transform*, UnityEngine::Transform*, float&)>(&InteractionTrigger::CharacterPosition::IsInRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger::CharacterPosition*), "IsInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: InteractionTrigger::CharacterPosition::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTrigger::CharacterPosition::*)()>(&InteractionTrigger::CharacterPosition::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger::CharacterPosition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTrigger::CharacterPosition::*)()>(&InteractionTrigger::CharacterPosition::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger::CharacterPosition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
// Including type: RootMotion.FinalIK.InteractionTrigger/CameraPosition
#include "RootMotion/FinalIK/InteractionTrigger_CameraPosition.hpp"
// Including type: UnityEngine.Collider
#include "UnityEngine/Collider.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger/CameraPosition.GetRotation
UnityEngine::Quaternion RootMotion::FinalIK::InteractionTrigger::CameraPosition::GetRotation() {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::CameraPosition::GetRotation");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetRotation", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
  return ::il2cpp_utils::RunMethodThrow<UnityEngine::Quaternion, false>(this, ___internal__method);
}
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger/CameraPosition.IsInRange
bool RootMotion::FinalIK::InteractionTrigger::CameraPosition::IsInRange(UnityEngine::Transform* raycastFrom, UnityEngine::RaycastHit hit, UnityEngine::Transform* trigger, float& error) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::CameraPosition::IsInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(raycastFrom), ::il2cpp_utils::ExtractType(hit), ::il2cpp_utils::ExtractType(trigger), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, raycastFrom, hit, trigger, error);
}
// Writing MetadataGetter for method: InteractionTrigger::CameraPosition::GetRotation
// Il2CppName: GetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Quaternion (InteractionTrigger::CameraPosition::*)()>(&InteractionTrigger::CameraPosition::GetRotation)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger::CameraPosition*), "GetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: InteractionTrigger::CameraPosition::IsInRange
// Il2CppName: IsInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionTrigger::CameraPosition::*)(UnityEngine::Transform*, UnityEngine::RaycastHit, UnityEngine::Transform*, float&)>(&InteractionTrigger::CameraPosition::IsInRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger::CameraPosition*), "IsInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RaycastHit>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: InteractionTrigger::CameraPosition::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTrigger::CameraPosition::*)()>(&InteractionTrigger::CameraPosition::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger::CameraPosition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTrigger::CameraPosition::*)()>(&InteractionTrigger::CameraPosition::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger::CameraPosition*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Autogenerated from CppSourceCreator
// Created by Sc2ad
// =========================================================================
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.InteractionTrigger/Range
#include "RootMotion/FinalIK/InteractionTrigger_Range.hpp"
// Including type: RootMotion.FinalIK.InteractionTrigger/Range/Interaction
#include "RootMotion/FinalIK/InteractionTrigger_Range_Interaction.hpp"
// Including type: UnityEngine.Transform
#include "UnityEngine/Transform.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: RootMotion.FinalIK.InteractionTrigger/CharacterPosition
#include "RootMotion/FinalIK/InteractionTrigger_CharacterPosition.hpp"
// Including type: RootMotion.FinalIK.InteractionTrigger/CameraPosition
#include "RootMotion/FinalIK/InteractionTrigger_CameraPosition.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Autogenerated method: RootMotion.FinalIK.InteractionTrigger/Range.IsInRange
bool RootMotion::FinalIK::InteractionTrigger::Range::IsInRange(UnityEngine::Transform* character, UnityEngine::Transform* raycastFrom, UnityEngine::RaycastHit raycastHit, UnityEngine::Transform* trigger, float& maxError) {
  static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::InteractionTrigger::Range::IsInRange");
  static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "IsInRange", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(character), ::il2cpp_utils::ExtractType(raycastFrom), ::il2cpp_utils::ExtractType(raycastHit), ::il2cpp_utils::ExtractType(trigger), ::il2cpp_utils::ExtractIndependentType<float&>()})));
  return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, character, raycastFrom, raycastHit, trigger, maxError);
}
// Writing MetadataGetter for method: InteractionTrigger::Range::IsInRange
// Il2CppName: IsInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (InteractionTrigger::Range::*)(UnityEngine::Transform*, UnityEngine::Transform*, UnityEngine::RaycastHit, UnityEngine::Transform*, float&)>(&InteractionTrigger::Range::IsInRange)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger::Range*), "IsInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::RaycastHit>(), ::il2cpp_utils::ExtractIndependentType<UnityEngine::Transform*>(), ::il2cpp_utils::ExtractIndependentType<float&>()});
  }
};
// Writing MetadataGetter for method: InteractionTrigger::Range::New_ctor
// Il2CppName: .ctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTrigger::Range::*)()>(&InteractionTrigger::Range::New_ctor<::il2cpp_utils::CreationType::Temporary>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger::Range*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (InteractionTrigger::Range::*)()>(&InteractionTrigger::Range::New_ctor<::il2cpp_utils::CreationType::Manual>)> {
  const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(InteractionTrigger::Range*), ".ctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
